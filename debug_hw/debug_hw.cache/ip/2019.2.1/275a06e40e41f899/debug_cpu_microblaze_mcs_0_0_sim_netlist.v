// Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
// --------------------------------------------------------------------------------
// Tool Version: Vivado v.2019.2.1 (lin64) Build 2729669 Thu Dec  5 04:48:12 MST 2019
// Date        : Fri Nov 27 09:15:47 2020
// Host        : connors-workstation running 64-bit Ubuntu 18.04.5 LTS
// Command     : write_verilog -force -mode funcsim -rename_top decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix -prefix
//               decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_ debug_cpu_microblaze_mcs_0_0_sim_netlist.v
// Design      : debug_cpu_microblaze_mcs_0_0
// Purpose     : This verilog netlist is a functional simulation representation of the design and should not be modified
//               or synthesized. This netlist cannot be used for SDF annotated simulation.
// Device      : xc7a100tcsg324-1
// --------------------------------------------------------------------------------
`timescale 1 ps / 1 ps

module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Divide_part
   (Clk_En_I_2,
    Clk);
  output Clk_En_I_2;
  input Clk;

  wire Clk;
  wire Clk_En_I_2;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_XIL_SRL16E_878 \One_SRL16.SRL16E_I 
       (.Clk(Clk),
        .Clk_En_I_2(Clk_En_I_2));
endmodule

(* ORIG_REF_NAME = "Divide_part" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Divide_part__parameterized0
   (Clk_En_I_1,
    Clk_En_I_2,
    Clk);
  output Clk_En_I_1;
  input Clk_En_I_2;
  input Clk;

  wire Clk;
  wire Clk_En_I_1;
  wire Clk_En_I_2;
  wire Out1;
  wire loop_Bit;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_XIL_SRL16E_877 \One_SRL16.SRL16E_I 
       (.Clk(Clk),
        .Clk_En_I_2(Clk_En_I_2),
        .loop_Bit(loop_Bit));
  FDRE #(
    .INIT(1'b0)) 
    \not_First.Clk_En_Out_i_reg 
       (.C(Clk),
        .CE(Out1),
        .D(Clk_En_I_2),
        .Q(Clk_En_I_1),
        .R(1'b0));
  FDRE \not_First.Out1_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(loop_Bit),
        .Q(Out1),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "Divide_part" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Divide_part__parameterized1
   (en_16x_baud,
    Clk_En_I_1,
    Clk);
  output en_16x_baud;
  input Clk_En_I_1;
  input Clk;

  wire Clk;
  wire Clk_En_I_1;
  wire en_16x_baud;
  wire loop_Bit;
  wire \not_First.Clk_En_Out_i_i_1_n_0 ;
  wire \not_First.Out1_reg_n_0 ;
  wire shift;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_XIL_SRL16E__parameterized1_876 \Two_SRL16.SRL16E_2 
       (.Clk(Clk),
        .Clk_En_I_1(Clk_En_I_1),
        .loop_Bit(loop_Bit),
        .lopt(loop_Bit),
        .shift(shift));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_XIL_SRLC16E \Two_SRL16.SRLC16E_1 
       (.Clk(Clk),
        .Clk_En_I_1(Clk_En_I_1),
        .loop_Bit(loop_Bit),
        .shift(shift));
  LUT3 #(
    .INIT(8'hB8)) 
    \not_First.Clk_En_Out_i_i_1 
       (.I0(Clk_En_I_1),
        .I1(\not_First.Out1_reg_n_0 ),
        .I2(en_16x_baud),
        .O(\not_First.Clk_En_Out_i_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \not_First.Clk_En_Out_i_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\not_First.Clk_En_Out_i_i_1_n_0 ),
        .Q(en_16x_baud),
        .R(1'b0));
  FDRE \not_First.Out1_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(loop_Bit),
        .Q(\not_First.Out1_reg_n_0 ),
        .R(1'b0));
endmodule

module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_FIT_Module
   (en_16x_baud,
    Clk);
  output en_16x_baud;
  input Clk;

  wire Clk;
  wire Clk_En_I_1;
  wire Clk_En_I_2;
  wire en_16x_baud;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Divide_part \Implement_FIT.Using_SRL16s.SRL16s[1].Divide_I 
       (.Clk(Clk),
        .Clk_En_I_2(Clk_En_I_2));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Divide_part__parameterized0 \Implement_FIT.Using_SRL16s.SRL16s[2].Divide_I 
       (.Clk(Clk),
        .Clk_En_I_1(Clk_En_I_1),
        .Clk_En_I_2(Clk_En_I_2));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Divide_part__parameterized1 \Implement_FIT.Using_SRL16s.SRL16s[3].Divide_I 
       (.Clk(Clk),
        .Clk_En_I_1(Clk_En_I_1),
        .en_16x_baud(en_16x_baud));
endmodule

module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Iomodule_core
   (UART_Tx,
    UART_Interrupt,
    Sl_DBus,
    Clk,
    Rst,
    UART_Rx,
    \TMR_No.RX_Data_reg[0] ,
    \TMR_No.RX_Data_reg[0]_0 ,
    \TMR_No.RX_Data_reg[0]_1 ,
    \TMR_No.RX_Data_reg[0]_2 ,
    \TMR_No.RX_Data_reg[0]_3 ,
    \TMR_No.RX_Data_reg[0]_4 ,
    E,
    D);
  output UART_Tx;
  output UART_Interrupt;
  output [7:0]Sl_DBus;
  input Clk;
  input Rst;
  input UART_Rx;
  input \TMR_No.RX_Data_reg[0] ;
  input \TMR_No.RX_Data_reg[0]_0 ;
  input \TMR_No.RX_Data_reg[0]_1 ;
  input \TMR_No.RX_Data_reg[0]_2 ;
  input \TMR_No.RX_Data_reg[0]_3 ;
  input \TMR_No.RX_Data_reg[0]_4 ;
  input [0:0]E;
  input [7:0]D;

  wire Clk;
  wire [7:0]D;
  wire [0:0]E;
  wire [6:0]RX_Data;
  wire Rst;
  wire [7:0]Sl_DBus;
  wire \TMR_No.RX_Data_reg[0] ;
  wire \TMR_No.RX_Data_reg[0]_0 ;
  wire \TMR_No.RX_Data_reg[0]_1 ;
  wire \TMR_No.RX_Data_reg[0]_2 ;
  wire \TMR_No.RX_Data_reg[0]_3 ;
  wire \TMR_No.RX_Data_reg[0]_4 ;
  wire UART_Interrupt;
  wire UART_Rx;
  wire [6:0]UART_Status;
  wire UART_Status1;
  wire UART_Tx;
  wire \Using_UART_RX.UART_RX_I1_n_3 ;
  wire \Using_UART_RX.UART_RX_I1_n_4 ;
  wire en_16x_baud;
  wire frame_error;
  wire overrun_error;
  wire [3:3]p_0_out;
  wire rx_data_exists;
  wire rx_data_received;
  wire rx_frame_error;
  wire tx_data_transmitted;

  LUT2 #(
    .INIT(4'hE)) 
    \Sl_DBus[25]_INST_0 
       (.I0(RX_Data[6]),
        .I1(UART_Status[6]),
        .O(Sl_DBus[6]));
  LUT2 #(
    .INIT(4'hE)) 
    \Sl_DBus[26]_INST_0 
       (.I0(RX_Data[5]),
        .I1(UART_Status[5]),
        .O(Sl_DBus[5]));
  LUT2 #(
    .INIT(4'hE)) 
    \Sl_DBus[28]_INST_0 
       (.I0(RX_Data[3]),
        .I1(UART_Status[3]),
        .O(Sl_DBus[3]));
  LUT2 #(
    .INIT(4'hE)) 
    \Sl_DBus[31]_INST_0 
       (.I0(RX_Data[0]),
        .I1(UART_Status[0]),
        .O(Sl_DBus[0]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_FIT_Module \Using_UART.No_Dynamic_BaudRate.UART_FIT_I 
       (.Clk(Clk),
        .en_16x_baud(en_16x_baud));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Uart_Control_Status \Using_UART.Uart_Control_Status_I1 
       (.Clk(Clk),
        .D({frame_error,overrun_error}),
        .Q({UART_Status[6:5],UART_Status[3],UART_Status[0]}),
        .Rst(Rst),
        .SR(UART_Status1),
        .\TMR_No.error_interrupt_reg_0 (rx_frame_error),
        .\TMR_No.frame_error_reg_0 (\Using_UART_RX.UART_RX_I1_n_4 ),
        .\TMR_No.overrun_error_reg_0 (\Using_UART_RX.UART_RX_I1_n_3 ),
        .UART_Interrupt(UART_Interrupt),
        .\UART_Status_reg[3]_0 ({p_0_out,rx_data_exists}),
        .\UART_Status_reg[6]_0 (\TMR_No.RX_Data_reg[0] ),
        .\UART_Status_reg[6]_1 (\TMR_No.RX_Data_reg[0]_0 ),
        .\UART_Status_reg[6]_2 (\TMR_No.RX_Data_reg[0]_1 ),
        .\UART_Status_reg[6]_3 (\TMR_No.RX_Data_reg[0]_2 ),
        .\UART_Status_reg[6]_4 (\TMR_No.RX_Data_reg[0]_3 ),
        .\UART_Status_reg[6]_5 (\TMR_No.RX_Data_reg[0]_4 ),
        .out(rx_data_received),
        .tx_data_transmitted(tx_data_transmitted));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_UART_Receive \Using_UART_RX.UART_RX_I1 
       (.Clk(Clk),
        .D({frame_error,overrun_error}),
        .Q({Sl_DBus[7],RX_Data[6:5],Sl_DBus[4],RX_Data[3],Sl_DBus[2:1],RX_Data[0]}),
        .Rst(Rst),
        .SR(UART_Status1),
        .\TMR_No.RX_Data_reg[0]_0 (\TMR_No.RX_Data_reg[0]_4 ),
        .\TMR_No.RX_Data_reg[0]_1 (\TMR_No.RX_Data_reg[0]_3 ),
        .\TMR_No.RX_Data_reg[0]_2 (\TMR_No.RX_Data_reg[0] ),
        .\TMR_No.RX_Data_reg[0]_3 (\TMR_No.RX_Data_reg[0]_0 ),
        .\TMR_No.RX_Data_reg[0]_4 (\TMR_No.RX_Data_reg[0]_1 ),
        .\TMR_No.RX_Data_reg[0]_5 (\TMR_No.RX_Data_reg[0]_2 ),
        .\TMR_No.frame_error_reg (\Using_UART_RX.UART_RX_I1_n_4 ),
        .\TMR_No.new_rx_data_write_reg_0 (\Using_UART_RX.UART_RX_I1_n_3 ),
        .\TMR_No.rx_data_exists_i_reg_0 (rx_data_exists),
        .UART_Rx(UART_Rx),
        .en_16x_baud(en_16x_baud),
        .\not_First.Clk_En_Out_i_reg (rx_frame_error),
        .out(rx_data_received));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_UART_Transmit \Using_UART_TX.UART_TX_I1 
       (.Clk(Clk),
        .D(D),
        .E(E),
        .Rst(Rst),
        .\TMR_No.tx_buffer_empty_i_reg_0 (p_0_out),
        .UART_Tx(UART_Tx),
        .en_16x_baud(en_16x_baud),
        .tx_data_transmitted(tx_data_transmitted));
endmodule

module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_JTAG_CONTROL
   (Q,
    data_Exists_I_reg,
    RX_Data,
    data_Exists_I_reg_0,
    out,
    Ext_NM_BRK,
    AR,
    Debug_SYS_Rst,
    Dbg_Rst_0,
    Ext_BRK,
    Dbg_Reg_En_0,
    mb_data_overrun1__0,
    \Using_FPGA.Native ,
    E,
    tdo,
    tx_Buffer_Full,
    RX_Buffer_Full,
    \Use_Serial_Unified_Completion.sample_1_reg[15]_0 ,
    \Use_Serial_Unified_Completion.count_reg[5]_0 ,
    tx_Buffer_Empty,
    Interrupt,
    CLK,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    S_AXI_ACLK,
    \Using_FPGA.Native_2 ,
    S_AXI_WDATA,
    sel_n_reg_0,
    \Using_FPGA.Native_3 ,
    Scan_Reset,
    Scan_Reset_Sel,
    Scan_En,
    \Use_UART.fifo_Din_reg[7]_0 ,
    \command_1_reg[7]_0 ,
    SEL,
    sel_n_reg_1,
    Dbg_TDO_0,
    FIFO_Write,
    Bus_RNW_reg,
    \GEN_BKEND_CE_REGISTERS[1].ce_out_i_reg ,
    bus2ip_rdce,
    Q_0,
    enable_interrupts,
    \GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg ,
    Dbg_TDI_0,
    \shift_Count_reg[0]_0 ,
    \Use_UART.tdo_reg_reg[7]_0 ,
    \Use_Serial_Unified_Completion.completion_status_reg[10]_0 ,
    \Use_Serial_Unified_Completion.completion_status_reg[15]_0 ,
    \Use_Serial_Unified_Completion.count_reg[5]_1 ,
    D);
  output [0:0]Q;
  output data_Exists_I_reg;
  output [0:7]RX_Data;
  output data_Exists_I_reg_0;
  output out;
  output Ext_NM_BRK;
  output [0:0]AR;
  output Debug_SYS_Rst;
  output Dbg_Rst_0;
  output Ext_BRK;
  output [0:7]Dbg_Reg_En_0;
  output mb_data_overrun1__0;
  output \Using_FPGA.Native ;
  output [0:0]E;
  output tdo;
  output tx_Buffer_Full;
  output RX_Buffer_Full;
  output [0:0]\Use_Serial_Unified_Completion.sample_1_reg[15]_0 ;
  output [0:0]\Use_Serial_Unified_Completion.count_reg[5]_0 ;
  output tx_Buffer_Empty;
  output Interrupt;
  input CLK;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input S_AXI_ACLK;
  input \Using_FPGA.Native_2 ;
  input [7:0]S_AXI_WDATA;
  input sel_n_reg_0;
  input \Using_FPGA.Native_3 ;
  input Scan_Reset;
  input Scan_Reset_Sel;
  input Scan_En;
  input \Use_UART.fifo_Din_reg[7]_0 ;
  input [3:0]\command_1_reg[7]_0 ;
  input SEL;
  input sel_n_reg_1;
  input Dbg_TDO_0;
  input FIFO_Write;
  input Bus_RNW_reg;
  input \GEN_BKEND_CE_REGISTERS[1].ce_out_i_reg ;
  input [0:0]bus2ip_rdce;
  input Q_0;
  input enable_interrupts;
  input \GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg ;
  input Dbg_TDI_0;
  input [0:0]\shift_Count_reg[0]_0 ;
  input [0:0]\Use_UART.tdo_reg_reg[7]_0 ;
  input [0:0]\Use_Serial_Unified_Completion.completion_status_reg[10]_0 ;
  input [0:0]\Use_Serial_Unified_Completion.completion_status_reg[15]_0 ;
  input [0:0]\Use_Serial_Unified_Completion.count_reg[5]_1 ;
  input [0:0]D;

  wire A1;
  wire A2;
  wire A3;
  wire [0:0]AR;
  wire Bus_RNW_reg;
  wire CE;
  wire CLK;
  wire [0:0]D;
  wire D_2;
  wire [4:5]Data_Out;
  wire [0:7]Dbg_Reg_En_0;
  wire Dbg_Rst_0;
  wire Dbg_Shift_31_INST_0_i_1_n_0;
  wire Dbg_Shift_31_INST_0_i_3_n_0;
  wire Dbg_TDI_0;
  wire Dbg_TDO_0;
  wire Debug_Rst_i0;
  wire Debug_SYS_Rst;
  wire [0:0]E;
  wire Ext_BRK;
  wire Ext_NM_BRK;
  wire FIFO_Write;
  wire \GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg ;
  wire \GEN_BKEND_CE_REGISTERS[1].ce_out_i_reg ;
  wire ID_TDO_1;
  wire Interrupt;
  wire [0:0]Q;
  wire Q_0;
  wire RX_Buffer_Full;
  wire [0:7]RX_Data;
  wire SEL;
  wire S_AXI_ACLK;
  wire [7:0]S_AXI_WDATA;
  wire Scan_En;
  wire Scan_Reset;
  wire Scan_Reset_Sel;
  wire \Use_BSCAN.FDC_I_n_11 ;
  wire \Use_BSCAN.FDC_I_n_12 ;
  wire \Use_BSCAN.FDC_I_n_17 ;
  wire \Use_BSCAN.FDC_I_n_19 ;
  wire \Use_BSCAN.FDC_I_n_20 ;
  wire \Use_BSCAN.FDC_I_n_21 ;
  wire \Use_BSCAN.FDC_I_n_22 ;
  wire \Use_BSCAN.FDC_I_n_23 ;
  wire \Use_BSCAN.FDC_I_n_24 ;
  wire \Use_BSCAN.FDC_I_n_25 ;
  wire \Use_BSCAN.FDC_I_n_26 ;
  wire \Use_BSCAN.FDC_I_n_27 ;
  wire \Use_BSCAN.FDC_I_n_28 ;
  wire \Use_BSCAN.FDC_I_n_29 ;
  wire \Use_BSCAN.FDC_I_n_30 ;
  wire \Use_BSCAN.FDC_I_n_31 ;
  wire \Use_BSCAN.FDC_I_n_33 ;
  wire \Use_BSCAN.FDC_I_n_34 ;
  wire \Use_BSCAN.FDC_I_n_35 ;
  wire \Use_BSCAN.FDC_I_n_36 ;
  wire \Use_BSCAN.FDC_I_n_37 ;
  wire \Use_BSCAN.FDC_I_n_38 ;
  wire \Use_BSCAN.SYNC_FDRE_n_1 ;
  wire \Use_BSCAN.SYNC_FDRE_n_2 ;
  wire \Use_BSCAN.command[0]_i_1_n_0 ;
  wire \Use_E2.BSCANE2_I_i_3_n_0 ;
  wire \Use_E2.BSCANE2_I_i_4_n_0 ;
  wire \Use_E2.BSCANE2_I_i_6_n_0 ;
  wire \Use_E2.BSCANE2_I_i_7_n_0 ;
  wire \Use_E2.BSCANE2_I_i_9_n_0 ;
  wire \Use_Serial_Unified_Completion.completion_block_i_3_n_0 ;
  wire \Use_Serial_Unified_Completion.completion_block_i_4_n_0 ;
  wire \Use_Serial_Unified_Completion.completion_block_reg_n_0 ;
  wire \Use_Serial_Unified_Completion.completion_status[10]_i_1_n_0 ;
  wire \Use_Serial_Unified_Completion.completion_status[11]_i_1_n_0 ;
  wire \Use_Serial_Unified_Completion.completion_status[12]_i_1_n_0 ;
  wire \Use_Serial_Unified_Completion.completion_status[13]_i_1_n_0 ;
  wire \Use_Serial_Unified_Completion.completion_status[14]_i_1_n_0 ;
  wire \Use_Serial_Unified_Completion.completion_status[3]_i_2_n_0 ;
  wire \Use_Serial_Unified_Completion.completion_status[4]_i_2_n_0 ;
  wire \Use_Serial_Unified_Completion.completion_status[5]_i_2_n_0 ;
  wire \Use_Serial_Unified_Completion.completion_status[7]_i_2_n_0 ;
  wire \Use_Serial_Unified_Completion.completion_status[9]_i_4_n_0 ;
  wire [0:0]\Use_Serial_Unified_Completion.completion_status_reg[10]_0 ;
  wire [0:0]\Use_Serial_Unified_Completion.completion_status_reg[15]_0 ;
  wire \Use_Serial_Unified_Completion.count[0]__0_i_4_n_0 ;
  wire \Use_Serial_Unified_Completion.count[0]_i_1_n_0 ;
  wire \Use_Serial_Unified_Completion.count[1]_i_1_n_0 ;
  wire [0:4]\Use_Serial_Unified_Completion.count_reg ;
  wire [0:0]\Use_Serial_Unified_Completion.count_reg[5]_0 ;
  wire [0:0]\Use_Serial_Unified_Completion.count_reg[5]_1 ;
  wire \Use_Serial_Unified_Completion.count_reg_n_0_[0] ;
  wire \Use_Serial_Unified_Completion.count_reg_n_0_[1] ;
  wire \Use_Serial_Unified_Completion.mb_data_overrun_i_2_n_0 ;
  wire \Use_Serial_Unified_Completion.mb_data_overrun_i_3_n_0 ;
  wire \Use_Serial_Unified_Completion.mb_data_overrun_reg_n_0 ;
  wire \Use_Serial_Unified_Completion.mb_instr_error_reg_n_0 ;
  wire \Use_Serial_Unified_Completion.sample_1[15]_i_3_n_0 ;
  wire [0:0]\Use_Serial_Unified_Completion.sample_1_reg[15]_0 ;
  wire \Use_Serial_Unified_Completion.sample_1_reg_n_0_[10] ;
  wire \Use_Serial_Unified_Completion.sample_1_reg_n_0_[11] ;
  wire \Use_Serial_Unified_Completion.sample_1_reg_n_0_[12] ;
  wire \Use_Serial_Unified_Completion.sample_1_reg_n_0_[13] ;
  wire \Use_Serial_Unified_Completion.sample_1_reg_n_0_[14] ;
  wire \Use_UART.RX_FIFO_I_n_10 ;
  wire \Use_UART.RX_FIFO_I_n_9 ;
  wire \Use_UART.TX_FIFO_I_n_3 ;
  wire \Use_UART.TX_FIFO_I_n_4 ;
  wire \Use_UART.TX_FIFO_I_n_5 ;
  wire \Use_UART.TX_FIFO_I_n_6 ;
  wire \Use_UART.TX_FIFO_I_n_7 ;
  wire \Use_UART.TX_FIFO_I_n_8 ;
  wire \Use_UART.execute_i_3_n_0 ;
  wire \Use_UART.fifo_Din_reg[7]_0 ;
  wire \Use_UART.fifo_Read_reg_n_0 ;
  wire \Use_UART.fifo_Write_i_2_n_0 ;
  wire \Use_UART.fifo_Write_reg_n_0 ;
  wire \Use_UART.tdo_reg[0]_i_3_n_0 ;
  wire \Use_UART.tdo_reg[0]_i_4_n_0 ;
  wire \Use_UART.tdo_reg[4]_i_2_n_0 ;
  wire [0:0]\Use_UART.tdo_reg_reg[7]_0 ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire [0:0]bus2ip_rdce;
  wire [0:7]command;
  wire [0:7]command_1;
  wire command_10;
  wire [3:0]\command_1_reg[7]_0 ;
  wire completion_block0__10;
  wire completion_ctrl;
  wire [15:0]completion_status;
  wire config_TDO_1;
  wire config_TDO_2;
  wire data_Exists_I_reg;
  wire data_Exists_I_reg_0;
  wire data_cmd_reset;
  wire enable_interrupts;
  wire execute;
  wire execute0;
  (* async_reg = "true" *) wire execute_1;
  (* async_reg = "true" *) wire execute_2;
  wire execute_3;
  wire [0:7]fifo_Din;
  wire fifo_Read2_out;
  wire fifo_Write4_out;
  wire mb_data_overrun1__0;
  wire mb_instr_overrun;
  wire mb_instr_overrun143_out;
  wire [5:1]p_0_in;
  wire p_0_in_3;
  (* async_reg = "true" *) wire [15:13]sample;
  wire sample_1;
  wire sel_n;
  wire sel_n0;
  wire sel_n_reg_0;
  wire sel_n_reg_1;
  wire sel_with_scan_reset;
  wire set_Ext_BRK;
  wire \shift_Count[1]_i_1_n_0 ;
  wire \shift_Count[2]_i_1_n_0 ;
  wire \shift_Count[3]_i_1_n_0 ;
  wire \shift_Count[4]_i_1_n_0 ;
  wire [0:0]\shift_Count_reg[0]_0 ;
  wire \shift_Count_reg_n_0_[4] ;
  wire sync;
  wire tdi_shifter0;
  wire \tdi_shifter_reg_n_0_[1] ;
  wire \tdi_shifter_reg_n_0_[2] ;
  wire \tdi_shifter_reg_n_0_[3] ;
  wire \tdi_shifter_reg_n_0_[4] ;
  wire \tdi_shifter_reg_n_0_[5] ;
  wire \tdi_shifter_reg_n_0_[6] ;
  wire \tdi_shifter_reg_n_0_[7] ;
  wire tdo;
  wire [0:7]tdo_reg;
  wire tx_Buffer_Empty;
  wire tx_Buffer_Full;
  wire tx_buffered;
  (* async_reg = "true" *) wire tx_buffered_1;
  (* async_reg = "true" *) wire tx_buffered_2;

  assign out = tx_buffered_2;
  (* SOFT_HLUTNM = "soft_lutpair33" *) 
  LUT3 #(
    .INIT(8'hFD)) 
    Dbg_Shift_31_INST_0_i_1
       (.I0(command[5]),
        .I1(command[7]),
        .I2(command[4]),
        .O(Dbg_Shift_31_INST_0_i_1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair25" *) 
  LUT4 #(
    .INIT(16'h0001)) 
    Dbg_Shift_31_INST_0_i_3
       (.I0(command[0]),
        .I1(command[1]),
        .I2(command[3]),
        .I3(command[2]),
        .O(Dbg_Shift_31_INST_0_i_3_n_0));
  FDCE #(
    .INIT(1'b0)) 
    Debug_Rst_i_reg
       (.C(CLK),
        .CE(Debug_Rst_i0),
        .CLR(AR),
        .D(p_0_in_3),
        .Q(Dbg_Rst_0));
  FDCE #(
    .INIT(1'b0)) 
    Debug_SYS_Rst_i_reg
       (.C(CLK),
        .CE(Debug_Rst_i0),
        .CLR(AR),
        .D(\tdi_shifter_reg_n_0_[1] ),
        .Q(Debug_SYS_Rst));
  LUT3 #(
    .INIT(8'h40)) 
    Ext_NM_BRK_i_i_2
       (.I0(Scan_En),
        .I1(Scan_Reset_Sel),
        .I2(Scan_Reset),
        .O(AR));
  FDCE #(
    .INIT(1'b0)) 
    Ext_NM_BRK_i_reg
       (.C(CLK),
        .CE(Debug_Rst_i0),
        .CLR(AR),
        .D(\tdi_shifter_reg_n_0_[3] ),
        .Q(Ext_NM_BRK));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FDC_1 \Use_BSCAN.FDC_I 
       (.CE(CE),
        .CLK(CLK),
        .D({\Use_BSCAN.FDC_I_n_19 ,\Use_BSCAN.FDC_I_n_20 ,\Use_BSCAN.FDC_I_n_21 ,\Use_BSCAN.FDC_I_n_22 ,\Use_BSCAN.FDC_I_n_23 ,\Use_BSCAN.FDC_I_n_24 ,\Use_BSCAN.FDC_I_n_25 ,\Use_BSCAN.FDC_I_n_26 ,\Use_BSCAN.FDC_I_n_27 ,\Use_BSCAN.FDC_I_n_28 }),
        .D_2(D_2),
        .Dbg_Reg_En_0(Dbg_Reg_En_0),
        .Dbg_TDO_0(Dbg_TDO_0),
        .Debug_Rst_i0(Debug_Rst_i0),
        .E(\Use_BSCAN.FDC_I_n_12 ),
        .Q({command[0],command[1],command[2],command[3],command[4],command[5],command[6],command[7]}),
        .SEL(SEL),
        .Scan_En(Scan_En),
        .Scan_Reset(Scan_Reset),
        .Scan_Reset_Sel(Scan_Reset_Sel),
        .\Use_BSCAN.PORT_Selector_reg[2] (command_10),
        .\Use_BSCAN.command_reg[6] (\Use_BSCAN.FDC_I_n_17 ),
        .\Use_BSCAN.command_reg[6]_0 (sample_1),
        .\Use_Serial_Unified_Completion.completion_block_reg (\Use_Serial_Unified_Completion.completion_block_reg_n_0 ),
        .\Use_Serial_Unified_Completion.completion_status_reg[0] (\Use_UART.fifo_Din_reg[7]_0 ),
        .\Use_Serial_Unified_Completion.completion_status_reg[3] (\Use_Serial_Unified_Completion.completion_status[3]_i_2_n_0 ),
        .\Use_Serial_Unified_Completion.completion_status_reg[4] (\Use_Serial_Unified_Completion.completion_status[4]_i_2_n_0 ),
        .\Use_Serial_Unified_Completion.completion_status_reg[5] (\Use_Serial_Unified_Completion.completion_status[5]_i_2_n_0 ),
        .\Use_Serial_Unified_Completion.completion_status_reg[6] (\Use_Serial_Unified_Completion.completion_status[7]_i_2_n_0 ),
        .\Use_Serial_Unified_Completion.completion_status_reg[8] (\Use_Serial_Unified_Completion.completion_status[9]_i_4_n_0 ),
        .\Use_Serial_Unified_Completion.completion_status_reg[9] (completion_status[10:0]),
        .\Use_Serial_Unified_Completion.mb_data_overrun_reg (\Use_BSCAN.FDC_I_n_35 ),
        .\Use_Serial_Unified_Completion.mb_data_overrun_reg_0 (\Use_Serial_Unified_Completion.mb_data_overrun_i_2_n_0 ),
        .\Use_Serial_Unified_Completion.mb_instr_error_reg (\Use_BSCAN.FDC_I_n_34 ),
        .\Use_Serial_Unified_Completion.mb_instr_error_reg_0 (\Use_BSCAN.SYNC_FDRE_n_1 ),
        .\Use_Serial_Unified_Completion.mb_instr_overrun_reg (\Use_BSCAN.FDC_I_n_33 ),
        .\Use_Serial_Unified_Completion.mb_instr_overrun_reg_0 (sel_n_reg_0),
        .\Use_Serial_Unified_Completion.mb_instr_overrun_reg_1 (\Use_BSCAN.SYNC_FDRE_n_2 ),
        .\Use_Serial_Unified_Completion.sample_1_reg[10] (\Use_Serial_Unified_Completion.sample_1[15]_i_3_n_0 ),
        .\Use_Serial_Unified_Completion.sample_reg[15] ({\Use_BSCAN.FDC_I_n_29 ,\Use_BSCAN.FDC_I_n_30 ,\Use_BSCAN.FDC_I_n_31 }),
        .\Use_Serial_Unified_Completion.sample_reg[15]_0 ({sample,\Use_Serial_Unified_Completion.mb_data_overrun_reg_n_0 ,\Use_Serial_Unified_Completion.mb_instr_error_reg_n_0 ,mb_instr_overrun}),
        .\Use_UART.tx_buffered_reg (Dbg_Shift_31_INST_0_i_3_n_0),
        .\Use_UART.tx_buffered_reg_0 ({p_0_in_3,\tdi_shifter_reg_n_0_[1] ,\tdi_shifter_reg_n_0_[2] ,\tdi_shifter_reg_n_0_[3] ,\tdi_shifter_reg_n_0_[4] ,\tdi_shifter_reg_n_0_[5] ,\tdi_shifter_reg_n_0_[6] ,\tdi_shifter_reg_n_0_[7] }),
        .\Using_FPGA.Native_0 (\Use_BSCAN.FDC_I_n_11 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native ),
        .\command_1_reg[7] (\command_1_reg[7]_0 ),
        .completion_block0__10(completion_block0__10),
        .completion_ctrl(completion_ctrl),
        .\completion_ctrl_reg[0] (\Use_BSCAN.FDC_I_n_36 ),
        .data_cmd_reset(data_cmd_reset),
        .mb_data_overrun1__0(mb_data_overrun1__0),
        .mb_instr_overrun143_out(mb_instr_overrun143_out),
        .sel_n(sel_n),
        .\tdi_shifter_reg[0] (\Use_BSCAN.FDC_I_n_37 ),
        .\tdi_shifter_reg[0]_0 (\Use_BSCAN.FDC_I_n_38 ),
        .tx_buffered(tx_buffered));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FDRE_1 \Use_BSCAN.SYNC_FDRE 
       (.CE(CE),
        .D_2(D_2),
        .E(E),
        .Q(command[6]),
        .\Use_Serial_Unified_Completion.count_reg[1] (\Use_BSCAN.SYNC_FDRE_n_1 ),
        .\Use_Serial_Unified_Completion.count_reg[1]_0 (\Use_BSCAN.SYNC_FDRE_n_2 ),
        .\Use_Serial_Unified_Completion.mb_instr_error_reg (\Use_Serial_Unified_Completion.count_reg_n_0_[1] ),
        .\Use_Serial_Unified_Completion.mb_instr_error_reg_0 (\Use_Serial_Unified_Completion.count_reg_n_0_[0] ),
        .\Use_Serial_Unified_Completion.mb_instr_error_reg_1 (\Use_BSCAN.FDC_I_n_17 ),
        .\Use_UART.fifo_Din_reg[7] (Dbg_Shift_31_INST_0_i_3_n_0),
        .\Use_UART.fifo_Din_reg[7]_0 (\Use_UART.fifo_Din_reg[7]_0 ),
        .\Use_UART.fifo_Din_reg[7]_1 (Dbg_Shift_31_INST_0_i_1_n_0),
        .\Use_UART.fifo_Din_reg[7]_2 (\Use_BSCAN.FDC_I_n_11 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .sync(sync));
  LUT5 #(
    .INIT(32'h00000008)) 
    \Use_BSCAN.command[0]_i_1 
       (.I0(SEL),
        .I1(\command_1_reg[7]_0 [0]),
        .I2(\command_1_reg[7]_0 [1]),
        .I3(\command_1_reg[7]_0 [3]),
        .I4(\command_1_reg[7]_0 [2]),
        .O(\Use_BSCAN.command[0]_i_1_n_0 ));
  FDCE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b1)) 
    \Use_BSCAN.command_reg[0] 
       (.C(CLK),
        .CE(\Use_BSCAN.command[0]_i_1_n_0 ),
        .CLR(AR),
        .D(command_1[0]),
        .Q(command[0]));
  FDCE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b1)) 
    \Use_BSCAN.command_reg[1] 
       (.C(CLK),
        .CE(\Use_BSCAN.command[0]_i_1_n_0 ),
        .CLR(AR),
        .D(command_1[1]),
        .Q(command[1]));
  FDCE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b1)) 
    \Use_BSCAN.command_reg[2] 
       (.C(CLK),
        .CE(\Use_BSCAN.command[0]_i_1_n_0 ),
        .CLR(AR),
        .D(command_1[2]),
        .Q(command[2]));
  FDCE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b1)) 
    \Use_BSCAN.command_reg[3] 
       (.C(CLK),
        .CE(\Use_BSCAN.command[0]_i_1_n_0 ),
        .CLR(AR),
        .D(command_1[3]),
        .Q(command[3]));
  FDCE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b1)) 
    \Use_BSCAN.command_reg[4] 
       (.C(CLK),
        .CE(\Use_BSCAN.command[0]_i_1_n_0 ),
        .CLR(AR),
        .D(command_1[4]),
        .Q(command[4]));
  FDCE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b1)) 
    \Use_BSCAN.command_reg[5] 
       (.C(CLK),
        .CE(\Use_BSCAN.command[0]_i_1_n_0 ),
        .CLR(AR),
        .D(command_1[5]),
        .Q(command[5]));
  FDCE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b1)) 
    \Use_BSCAN.command_reg[6] 
       (.C(CLK),
        .CE(\Use_BSCAN.command[0]_i_1_n_0 ),
        .CLR(AR),
        .D(command_1[6]),
        .Q(command[6]));
  FDCE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b1)) 
    \Use_BSCAN.command_reg[7] 
       (.C(CLK),
        .CE(\Use_BSCAN.command[0]_i_1_n_0 ),
        .CLR(AR),
        .D(command_1[7]),
        .Q(command[7]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_mdm_v3_2_17_MB_SRL16E \Use_Config_SRL16E.SRL16E_1 
       (.Q({A3,A2,A1,Q}),
        .\Use_E2.BSCANE2_I_i_8 (\Using_FPGA.Native_0 ),
        .config_TDO_1(config_TDO_1));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_mdm_v3_2_17_MB_SRL16E__parameterized0 \Use_Config_SRL16E.SRL16E_2 
       (.Q({A3,A2,A1,Q}),
        .\Use_E2.BSCANE2_I_i_8 (\Using_FPGA.Native_0 ),
        .config_TDO_2(config_TDO_2));
  LUT3 #(
    .INIT(8'hF8)) 
    \Use_E2.BSCANE2_I_i_3 
       (.I0(command[0]),
        .I1(Dbg_TDO_0),
        .I2(\command_1_reg[7]_0 [1]),
        .O(\Use_E2.BSCANE2_I_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hC000C00000008080)) 
    \Use_E2.BSCANE2_I_i_4 
       (.I0(\Use_E2.BSCANE2_I_i_6_n_0 ),
        .I1(command[6]),
        .I2(\Use_E2.BSCANE2_I_i_7_n_0 ),
        .I3(Dbg_TDO_0),
        .I4(command[1]),
        .I5(command[5]),
        .O(\Use_E2.BSCANE2_I_i_4_n_0 ));
  LUT5 #(
    .INIT(32'hF0CA00CA)) 
    \Use_E2.BSCANE2_I_i_6 
       (.I0(Dbg_TDO_0),
        .I1(tdo_reg[7]),
        .I2(command[4]),
        .I3(command[2]),
        .I4(completion_status[0]),
        .O(\Use_E2.BSCANE2_I_i_6_n_0 ));
  LUT6 #(
    .INIT(64'h00001104AAAEBFBF)) 
    \Use_E2.BSCANE2_I_i_7 
       (.I0(command[5]),
        .I1(command[2]),
        .I2(command[1]),
        .I3(command[4]),
        .I4(command[3]),
        .I5(command[7]),
        .O(\Use_E2.BSCANE2_I_i_7_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFF6)) 
    \Use_E2.BSCANE2_I_i_9 
       (.I0(command[5]),
        .I1(command[4]),
        .I2(command[3]),
        .I3(command[1]),
        .I4(command[7]),
        .I5(command[2]),
        .O(\Use_E2.BSCANE2_I_i_9_n_0 ));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_mdm_v3_2_17_MB_SRL16E__parameterized1 \Use_ID_SRL16E.SRL16E_ID_1 
       (.ID_TDO_1(ID_TDO_1),
        .Q({A3,A2,A1,Q}),
        .\Use_E2.BSCANE2_I_i_8 (\Using_FPGA.Native_0 ));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_mdm_v3_2_17_MB_SRL16E__parameterized2 \Use_ID_SRL16E.SRL16E_ID_2 
       (.Dbg_TDO_0(Dbg_TDO_0),
        .ID_TDO_1(ID_TDO_1),
        .Q({\shift_Count_reg_n_0_[4] ,A3,A2,A1,Q}),
        .\Use_E2.BSCANE2_I_i_1_0 (\Use_E2.BSCANE2_I_i_7_n_0 ),
        .\Use_E2.BSCANE2_I_i_1_1 (\Use_E2.BSCANE2_I_i_9_n_0 ),
        .\Use_E2.BSCANE2_I_i_8_0 (\Using_FPGA.Native_0 ),
        .config_TDO_1(config_TDO_1),
        .config_TDO_2(config_TDO_2),
        .sel_n_reg(sel_n_reg_1),
        .sel_n_reg_0(\command_1_reg[7]_0 [0]),
        .sel_n_reg_1(\Use_E2.BSCANE2_I_i_3_n_0 ),
        .sel_n_reg_2({command[0],command[5],command[6]}),
        .sel_n_reg_3(\Use_E2.BSCANE2_I_i_4_n_0 ),
        .tdo(tdo));
  LUT6 #(
    .INIT(64'hFFFFFFFFBAFFBABA)) 
    \Use_Serial_Unified_Completion.completion_block_i_2 
       (.I0(\Use_Serial_Unified_Completion.completion_block_i_3_n_0 ),
        .I1(\Use_Serial_Unified_Completion.sample_1_reg_n_0_[13] ),
        .I2(sample[13]),
        .I3(\Use_Serial_Unified_Completion.sample_1_reg_n_0_[14] ),
        .I4(sample[14]),
        .I5(\Use_Serial_Unified_Completion.completion_block_i_4_n_0 ),
        .O(completion_block0__10));
  LUT4 #(
    .INIT(16'h4F44)) 
    \Use_Serial_Unified_Completion.completion_block_i_3 
       (.I0(\Use_Serial_Unified_Completion.sample_1_reg[15]_0 ),
        .I1(sample[15]),
        .I2(\Use_Serial_Unified_Completion.sample_1_reg_n_0_[10] ),
        .I3(mb_instr_overrun),
        .O(\Use_Serial_Unified_Completion.completion_block_i_3_n_0 ));
  LUT4 #(
    .INIT(16'h4F44)) 
    \Use_Serial_Unified_Completion.completion_block_i_4 
       (.I0(\Use_Serial_Unified_Completion.sample_1_reg_n_0_[11] ),
        .I1(\Use_Serial_Unified_Completion.mb_instr_error_reg_n_0 ),
        .I2(\Use_Serial_Unified_Completion.sample_1_reg_n_0_[12] ),
        .I3(\Use_Serial_Unified_Completion.mb_data_overrun_reg_n_0 ),
        .O(\Use_Serial_Unified_Completion.completion_block_i_4_n_0 ));
  FDCE #(
    .INIT(1'b0)) 
    \Use_Serial_Unified_Completion.completion_block_reg 
       (.C(\Using_FPGA.Native_0 ),
        .CE(1'b1),
        .CLR(AR),
        .D(\Use_BSCAN.FDC_I_n_36 ),
        .Q(\Use_Serial_Unified_Completion.completion_block_reg_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \Use_Serial_Unified_Completion.completion_status[10]_i_1 
       (.I0(\Use_Serial_Unified_Completion.sample_1_reg_n_0_[10] ),
        .I1(sel_n_reg_0),
        .I2(completion_status[11]),
        .O(\Use_Serial_Unified_Completion.completion_status[10]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair32" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Use_Serial_Unified_Completion.completion_status[11]_i_1 
       (.I0(\Use_Serial_Unified_Completion.sample_1_reg_n_0_[11] ),
        .I1(sel_n_reg_0),
        .I2(completion_status[12]),
        .O(\Use_Serial_Unified_Completion.completion_status[11]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair31" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Use_Serial_Unified_Completion.completion_status[12]_i_1 
       (.I0(\Use_Serial_Unified_Completion.sample_1_reg_n_0_[12] ),
        .I1(sel_n_reg_0),
        .I2(completion_status[13]),
        .O(\Use_Serial_Unified_Completion.completion_status[12]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair32" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Use_Serial_Unified_Completion.completion_status[13]_i_1 
       (.I0(\Use_Serial_Unified_Completion.sample_1_reg_n_0_[13] ),
        .I1(sel_n_reg_0),
        .I2(completion_status[14]),
        .O(\Use_Serial_Unified_Completion.completion_status[13]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair31" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Use_Serial_Unified_Completion.completion_status[14]_i_1 
       (.I0(\Use_Serial_Unified_Completion.sample_1_reg_n_0_[14] ),
        .I1(sel_n_reg_0),
        .I2(completion_status[15]),
        .O(\Use_Serial_Unified_Completion.completion_status[14]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'h80)) 
    \Use_Serial_Unified_Completion.completion_status[3]_i_2 
       (.I0(completion_status[2]),
        .I1(completion_status[0]),
        .I2(completion_status[1]),
        .O(\Use_Serial_Unified_Completion.completion_status[3]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair26" *) 
  LUT4 #(
    .INIT(16'h8000)) 
    \Use_Serial_Unified_Completion.completion_status[4]_i_2 
       (.I0(completion_status[3]),
        .I1(completion_status[1]),
        .I2(completion_status[0]),
        .I3(completion_status[2]),
        .O(\Use_Serial_Unified_Completion.completion_status[4]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair26" *) 
  LUT5 #(
    .INIT(32'h80000000)) 
    \Use_Serial_Unified_Completion.completion_status[5]_i_2 
       (.I0(completion_status[4]),
        .I1(completion_status[2]),
        .I2(completion_status[0]),
        .I3(completion_status[1]),
        .I4(completion_status[3]),
        .O(\Use_Serial_Unified_Completion.completion_status[5]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    \Use_Serial_Unified_Completion.completion_status[7]_i_2 
       (.I0(completion_status[5]),
        .I1(completion_status[3]),
        .I2(completion_status[1]),
        .I3(completion_status[0]),
        .I4(completion_status[2]),
        .I5(completion_status[4]),
        .O(\Use_Serial_Unified_Completion.completion_status[7]_i_2_n_0 ));
  LUT3 #(
    .INIT(8'h80)) 
    \Use_Serial_Unified_Completion.completion_status[9]_i_4 
       (.I0(completion_status[7]),
        .I1(\Use_Serial_Unified_Completion.completion_status[7]_i_2_n_0 ),
        .I2(completion_status[6]),
        .O(\Use_Serial_Unified_Completion.completion_status[9]_i_4_n_0 ));
  FDCE #(
    .INIT(1'b0)) 
    \Use_Serial_Unified_Completion.completion_status_reg[0] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(\Use_BSCAN.FDC_I_n_12 ),
        .CLR(AR),
        .D(\Use_BSCAN.FDC_I_n_28 ),
        .Q(completion_status[0]));
  FDCE #(
    .INIT(1'b0)) 
    \Use_Serial_Unified_Completion.completion_status_reg[10] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(\Use_Serial_Unified_Completion.completion_status_reg[10]_0 ),
        .CLR(AR),
        .D(\Use_Serial_Unified_Completion.completion_status[10]_i_1_n_0 ),
        .Q(completion_status[10]));
  FDCE #(
    .INIT(1'b0)) 
    \Use_Serial_Unified_Completion.completion_status_reg[11] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(\Use_Serial_Unified_Completion.completion_status_reg[10]_0 ),
        .CLR(AR),
        .D(\Use_Serial_Unified_Completion.completion_status[11]_i_1_n_0 ),
        .Q(completion_status[11]));
  FDCE #(
    .INIT(1'b0)) 
    \Use_Serial_Unified_Completion.completion_status_reg[12] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(\Use_Serial_Unified_Completion.completion_status_reg[10]_0 ),
        .CLR(AR),
        .D(\Use_Serial_Unified_Completion.completion_status[12]_i_1_n_0 ),
        .Q(completion_status[12]));
  FDCE #(
    .INIT(1'b0)) 
    \Use_Serial_Unified_Completion.completion_status_reg[13] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(\Use_Serial_Unified_Completion.completion_status_reg[10]_0 ),
        .CLR(AR),
        .D(\Use_Serial_Unified_Completion.completion_status[13]_i_1_n_0 ),
        .Q(completion_status[13]));
  FDCE #(
    .INIT(1'b0)) 
    \Use_Serial_Unified_Completion.completion_status_reg[14] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(\Use_Serial_Unified_Completion.completion_status_reg[10]_0 ),
        .CLR(AR),
        .D(\Use_Serial_Unified_Completion.completion_status[14]_i_1_n_0 ),
        .Q(completion_status[14]));
  FDCE #(
    .INIT(1'b0)) 
    \Use_Serial_Unified_Completion.completion_status_reg[15] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(\Use_Serial_Unified_Completion.completion_status_reg[10]_0 ),
        .CLR(AR),
        .D(\Use_Serial_Unified_Completion.completion_status_reg[15]_0 ),
        .Q(completion_status[15]));
  FDCE #(
    .INIT(1'b0)) 
    \Use_Serial_Unified_Completion.completion_status_reg[1] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(\Use_BSCAN.FDC_I_n_12 ),
        .CLR(AR),
        .D(\Use_BSCAN.FDC_I_n_27 ),
        .Q(completion_status[1]));
  FDCE #(
    .INIT(1'b0)) 
    \Use_Serial_Unified_Completion.completion_status_reg[2] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(\Use_BSCAN.FDC_I_n_12 ),
        .CLR(AR),
        .D(\Use_BSCAN.FDC_I_n_26 ),
        .Q(completion_status[2]));
  FDCE #(
    .INIT(1'b0)) 
    \Use_Serial_Unified_Completion.completion_status_reg[3] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(\Use_BSCAN.FDC_I_n_12 ),
        .CLR(AR),
        .D(\Use_BSCAN.FDC_I_n_25 ),
        .Q(completion_status[3]));
  FDCE #(
    .INIT(1'b0)) 
    \Use_Serial_Unified_Completion.completion_status_reg[4] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(\Use_BSCAN.FDC_I_n_12 ),
        .CLR(AR),
        .D(\Use_BSCAN.FDC_I_n_24 ),
        .Q(completion_status[4]));
  FDCE #(
    .INIT(1'b0)) 
    \Use_Serial_Unified_Completion.completion_status_reg[5] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(\Use_BSCAN.FDC_I_n_12 ),
        .CLR(AR),
        .D(\Use_BSCAN.FDC_I_n_23 ),
        .Q(completion_status[5]));
  FDCE #(
    .INIT(1'b0)) 
    \Use_Serial_Unified_Completion.completion_status_reg[6] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(\Use_BSCAN.FDC_I_n_12 ),
        .CLR(AR),
        .D(\Use_BSCAN.FDC_I_n_22 ),
        .Q(completion_status[6]));
  FDCE #(
    .INIT(1'b0)) 
    \Use_Serial_Unified_Completion.completion_status_reg[7] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(\Use_BSCAN.FDC_I_n_12 ),
        .CLR(AR),
        .D(\Use_BSCAN.FDC_I_n_21 ),
        .Q(completion_status[7]));
  FDCE #(
    .INIT(1'b0)) 
    \Use_Serial_Unified_Completion.completion_status_reg[8] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(\Use_BSCAN.FDC_I_n_12 ),
        .CLR(AR),
        .D(\Use_BSCAN.FDC_I_n_20 ),
        .Q(completion_status[8]));
  FDCE #(
    .INIT(1'b0)) 
    \Use_Serial_Unified_Completion.completion_status_reg[9] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(\Use_BSCAN.FDC_I_n_12 ),
        .CLR(AR),
        .D(\Use_BSCAN.FDC_I_n_19 ),
        .Q(completion_status[9]));
  LUT4 #(
    .INIT(16'h0078)) 
    \Use_Serial_Unified_Completion.count[0]__0_i_2 
       (.I0(\Use_Serial_Unified_Completion.count_reg [1]),
        .I1(\Use_Serial_Unified_Completion.count[0]__0_i_4_n_0 ),
        .I2(\Use_Serial_Unified_Completion.count_reg [0]),
        .I3(sel_n_reg_0),
        .O(p_0_in[5]));
  (* SOFT_HLUTNM = "soft_lutpair27" *) 
  LUT4 #(
    .INIT(16'h8000)) 
    \Use_Serial_Unified_Completion.count[0]__0_i_4 
       (.I0(\Use_Serial_Unified_Completion.count_reg [2]),
        .I1(\Use_Serial_Unified_Completion.count_reg [4]),
        .I2(\Use_Serial_Unified_Completion.count_reg[5]_0 ),
        .I3(\Use_Serial_Unified_Completion.count_reg [3]),
        .O(\Use_Serial_Unified_Completion.count[0]__0_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h0000FF80FF00FF00)) 
    \Use_Serial_Unified_Completion.count[0]_i_1 
       (.I0(\Use_Serial_Unified_Completion.count_reg_n_0_[1] ),
        .I1(\Use_UART.fifo_Din_reg[7]_0 ),
        .I2(sync),
        .I3(\Use_Serial_Unified_Completion.count_reg_n_0_[0] ),
        .I4(sel_n_reg_0),
        .I5(mb_instr_overrun143_out),
        .O(\Use_Serial_Unified_Completion.count[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h000000007FFF8000)) 
    \Use_Serial_Unified_Completion.count[1]__0_i_1 
       (.I0(\Use_Serial_Unified_Completion.count_reg [2]),
        .I1(\Use_Serial_Unified_Completion.count_reg [4]),
        .I2(\Use_Serial_Unified_Completion.count_reg[5]_0 ),
        .I3(\Use_Serial_Unified_Completion.count_reg [3]),
        .I4(\Use_Serial_Unified_Completion.count_reg [1]),
        .I5(sel_n_reg_0),
        .O(p_0_in[4]));
  LUT6 #(
    .INIT(64'h00F7FFFF00080000)) 
    \Use_Serial_Unified_Completion.count[1]_i_1 
       (.I0(\Use_UART.fifo_Din_reg[7]_0 ),
        .I1(sync),
        .I2(\Use_Serial_Unified_Completion.count_reg_n_0_[0] ),
        .I3(sel_n_reg_0),
        .I4(mb_instr_overrun143_out),
        .I5(\Use_Serial_Unified_Completion.count_reg_n_0_[1] ),
        .O(\Use_Serial_Unified_Completion.count[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair27" *) 
  LUT5 #(
    .INIT(32'h00007F80)) 
    \Use_Serial_Unified_Completion.count[2]_i_1 
       (.I0(\Use_Serial_Unified_Completion.count_reg [3]),
        .I1(\Use_Serial_Unified_Completion.count_reg[5]_0 ),
        .I2(\Use_Serial_Unified_Completion.count_reg [4]),
        .I3(\Use_Serial_Unified_Completion.count_reg [2]),
        .I4(sel_n_reg_0),
        .O(p_0_in[3]));
  (* SOFT_HLUTNM = "soft_lutpair29" *) 
  LUT4 #(
    .INIT(16'h0078)) 
    \Use_Serial_Unified_Completion.count[3]_i_1 
       (.I0(\Use_Serial_Unified_Completion.count_reg [4]),
        .I1(\Use_Serial_Unified_Completion.count_reg[5]_0 ),
        .I2(\Use_Serial_Unified_Completion.count_reg [3]),
        .I3(sel_n_reg_0),
        .O(p_0_in[2]));
  LUT3 #(
    .INIT(8'h06)) 
    \Use_Serial_Unified_Completion.count[4]_i_1 
       (.I0(\Use_Serial_Unified_Completion.count_reg[5]_0 ),
        .I1(\Use_Serial_Unified_Completion.count_reg [4]),
        .I2(sel_n_reg_0),
        .O(p_0_in[1]));
  FDCE #(
    .INIT(1'b0)) 
    \Use_Serial_Unified_Completion.count_reg[0] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(1'b1),
        .CLR(AR),
        .D(\Use_Serial_Unified_Completion.count[0]_i_1_n_0 ),
        .Q(\Use_Serial_Unified_Completion.count_reg_n_0_[0] ));
  FDCE #(
    .INIT(1'b0)) 
    \Use_Serial_Unified_Completion.count_reg[0]__0 
       (.C(\Using_FPGA.Native_0 ),
        .CE(\Use_Serial_Unified_Completion.count_reg[5]_1 ),
        .CLR(AR),
        .D(p_0_in[5]),
        .Q(\Use_Serial_Unified_Completion.count_reg [0]));
  FDCE #(
    .INIT(1'b0)) 
    \Use_Serial_Unified_Completion.count_reg[1] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(1'b1),
        .CLR(AR),
        .D(\Use_Serial_Unified_Completion.count[1]_i_1_n_0 ),
        .Q(\Use_Serial_Unified_Completion.count_reg_n_0_[1] ));
  FDCE #(
    .INIT(1'b0)) 
    \Use_Serial_Unified_Completion.count_reg[1]__0 
       (.C(\Using_FPGA.Native_0 ),
        .CE(\Use_Serial_Unified_Completion.count_reg[5]_1 ),
        .CLR(AR),
        .D(p_0_in[4]),
        .Q(\Use_Serial_Unified_Completion.count_reg [1]));
  FDCE #(
    .INIT(1'b0)) 
    \Use_Serial_Unified_Completion.count_reg[2] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(\Use_Serial_Unified_Completion.count_reg[5]_1 ),
        .CLR(AR),
        .D(p_0_in[3]),
        .Q(\Use_Serial_Unified_Completion.count_reg [2]));
  FDCE #(
    .INIT(1'b0)) 
    \Use_Serial_Unified_Completion.count_reg[3] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(\Use_Serial_Unified_Completion.count_reg[5]_1 ),
        .CLR(AR),
        .D(p_0_in[2]),
        .Q(\Use_Serial_Unified_Completion.count_reg [3]));
  FDCE #(
    .INIT(1'b0)) 
    \Use_Serial_Unified_Completion.count_reg[4] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(\Use_Serial_Unified_Completion.count_reg[5]_1 ),
        .CLR(AR),
        .D(p_0_in[1]),
        .Q(\Use_Serial_Unified_Completion.count_reg [4]));
  FDCE #(
    .INIT(1'b0)) 
    \Use_Serial_Unified_Completion.count_reg[5] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(\Use_Serial_Unified_Completion.count_reg[5]_1 ),
        .CLR(AR),
        .D(D),
        .Q(\Use_Serial_Unified_Completion.count_reg[5]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair29" *) 
  LUT4 #(
    .INIT(16'h0002)) 
    \Use_Serial_Unified_Completion.mb_data_overrun_i_2 
       (.I0(\Use_Serial_Unified_Completion.mb_data_overrun_i_3_n_0 ),
        .I1(\Use_Serial_Unified_Completion.count_reg[5]_0 ),
        .I2(\Use_Serial_Unified_Completion.count_reg [4]),
        .I3(\Use_Serial_Unified_Completion.count_reg [3]),
        .O(\Use_Serial_Unified_Completion.mb_data_overrun_i_2_n_0 ));
  LUT4 #(
    .INIT(16'h0008)) 
    \Use_Serial_Unified_Completion.mb_data_overrun_i_3 
       (.I0(\Use_UART.fifo_Din_reg[7]_0 ),
        .I1(\Use_Serial_Unified_Completion.count_reg [0]),
        .I2(\Use_Serial_Unified_Completion.count_reg [1]),
        .I3(\Use_Serial_Unified_Completion.count_reg [2]),
        .O(\Use_Serial_Unified_Completion.mb_data_overrun_i_3_n_0 ));
  FDCE #(
    .INIT(1'b0)) 
    \Use_Serial_Unified_Completion.mb_data_overrun_reg 
       (.C(\Using_FPGA.Native_0 ),
        .CE(1'b1),
        .CLR(AR),
        .D(\Use_BSCAN.FDC_I_n_35 ),
        .Q(\Use_Serial_Unified_Completion.mb_data_overrun_reg_n_0 ));
  FDCE #(
    .INIT(1'b0)) 
    \Use_Serial_Unified_Completion.mb_instr_error_reg 
       (.C(\Using_FPGA.Native_0 ),
        .CE(1'b1),
        .CLR(AR),
        .D(\Use_BSCAN.FDC_I_n_34 ),
        .Q(\Use_Serial_Unified_Completion.mb_instr_error_reg_n_0 ));
  FDCE #(
    .INIT(1'b0)) 
    \Use_Serial_Unified_Completion.mb_instr_overrun_reg 
       (.C(\Using_FPGA.Native_0 ),
        .CE(1'b1),
        .CLR(AR),
        .D(\Use_BSCAN.FDC_I_n_33 ),
        .Q(mb_instr_overrun));
  (* SOFT_HLUTNM = "soft_lutpair25" *) 
  LUT5 #(
    .INIT(32'h00000008)) 
    \Use_Serial_Unified_Completion.sample_1[15]_i_3 
       (.I0(command[2]),
        .I1(command[4]),
        .I2(command[0]),
        .I3(command[1]),
        .I4(command[3]),
        .O(\Use_Serial_Unified_Completion.sample_1[15]_i_3_n_0 ));
  FDCE \Use_Serial_Unified_Completion.sample_1_reg[10] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(sample_1),
        .CLR(AR),
        .D(mb_instr_overrun),
        .Q(\Use_Serial_Unified_Completion.sample_1_reg_n_0_[10] ));
  FDCE \Use_Serial_Unified_Completion.sample_1_reg[11] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(sample_1),
        .CLR(AR),
        .D(\Use_Serial_Unified_Completion.mb_instr_error_reg_n_0 ),
        .Q(\Use_Serial_Unified_Completion.sample_1_reg_n_0_[11] ));
  FDCE \Use_Serial_Unified_Completion.sample_1_reg[12] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(sample_1),
        .CLR(AR),
        .D(\Use_Serial_Unified_Completion.mb_data_overrun_reg_n_0 ),
        .Q(\Use_Serial_Unified_Completion.sample_1_reg_n_0_[12] ));
  FDCE \Use_Serial_Unified_Completion.sample_1_reg[13] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(sample_1),
        .CLR(AR),
        .D(sample[13]),
        .Q(\Use_Serial_Unified_Completion.sample_1_reg_n_0_[13] ));
  FDCE \Use_Serial_Unified_Completion.sample_1_reg[14] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(sample_1),
        .CLR(AR),
        .D(sample[14]),
        .Q(\Use_Serial_Unified_Completion.sample_1_reg_n_0_[14] ));
  FDCE \Use_Serial_Unified_Completion.sample_1_reg[15] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(sample_1),
        .CLR(AR),
        .D(sample[15]),
        .Q(\Use_Serial_Unified_Completion.sample_1_reg[15]_0 ));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDCE \Use_Serial_Unified_Completion.sample_reg[13] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(1'b1),
        .CLR(AR),
        .D(\Use_BSCAN.FDC_I_n_31 ),
        .Q(sample[13]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDCE \Use_Serial_Unified_Completion.sample_reg[14] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(1'b1),
        .CLR(AR),
        .D(\Use_BSCAN.FDC_I_n_30 ),
        .Q(sample[14]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDCE \Use_Serial_Unified_Completion.sample_reg[15] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(1'b1),
        .CLR(AR),
        .D(\Use_BSCAN.FDC_I_n_29 ),
        .Q(sample[15]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_mdm_v3_2_17_MB_FDRSE \Use_UART.Ext_BRK_FDRSE 
       (.Ext_BRK(Ext_BRK),
        .S_AXI_ACLK(S_AXI_ACLK),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_3 ),
        .set_Ext_BRK(set_Ext_BRK));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_mdm_v3_2_17_SRL_FIFO \Use_UART.RX_FIFO_I 
       (.Bus_RNW_reg(Bus_RNW_reg),
        .D({\Use_UART.RX_FIFO_I_n_9 ,\Use_UART.RX_FIFO_I_n_10 }),
        .Data_Out({Data_Out[4],Data_Out[5]}),
        .\GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg (\GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg ),
        .Q({fifo_Din[0],fifo_Din[1],fifo_Din[2],fifo_Din[3],fifo_Din[4],fifo_Din[5],fifo_Din[6],fifo_Din[7]}),
        .RX_Buffer_Full(RX_Buffer_Full),
        .RX_Data(RX_Data),
        .S_AXI_ACLK(S_AXI_ACLK),
        .\Use_UART.tdo_reg_reg[4] ({tdo_reg[3],tdo_reg[4]}),
        .\Use_UART.tdo_reg_reg[4]_0 (sel_n_reg_0),
        .\Use_UART.tdo_reg_reg[4]_1 (\Use_UART.tdo_reg[4]_i_2_n_0 ),
        .\Use_UART.tdo_reg_reg[4]_2 (\Use_UART.tdo_reg[0]_i_3_n_0 ),
        .\Using_FPGA.Native (\Using_FPGA.Native_1 ),
        .bus2ip_rdce(bus2ip_rdce),
        .data_Exists_I_reg_0(data_Exists_I_reg),
        .data_Exists_I_reg_1(\Use_UART.fifo_Write_reg_n_0 ));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_mdm_v3_2_17_SRL_FIFO_834 \Use_UART.TX_FIFO_I 
       (.\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[3] ({Data_Out[4],Data_Out[5]}),
        .Bus_RNW_reg(Bus_RNW_reg),
        .D({\Use_UART.TX_FIFO_I_n_3 ,\Use_UART.TX_FIFO_I_n_4 ,\Use_UART.TX_FIFO_I_n_5 ,\Use_UART.TX_FIFO_I_n_6 ,\Use_UART.TX_FIFO_I_n_7 ,\Use_UART.TX_FIFO_I_n_8 }),
        .FIFO_Write(FIFO_Write),
        .\GEN_BKEND_CE_REGISTERS[1].ce_out_i_reg (\GEN_BKEND_CE_REGISTERS[1].ce_out_i_reg ),
        .Interrupt(Interrupt),
        .Interrupt_INST_0_0(data_Exists_I_reg),
        .Q({tdo_reg[0],tdo_reg[1],tdo_reg[2],tdo_reg[5],tdo_reg[6]}),
        .Q_0(Q_0),
        .S_AXI_ACLK(S_AXI_ACLK),
        .S_AXI_WDATA(S_AXI_WDATA),
        .\Use_UART.tdo_reg_reg[7] (sel_n_reg_0),
        .\Use_UART.tdo_reg_reg[7]_0 (\Use_UART.tdo_reg[4]_i_2_n_0 ),
        .\Use_UART.tdo_reg_reg[7]_1 (\Use_UART.tdo_reg[0]_i_3_n_0 ),
        .\Using_FPGA.Native (\Using_FPGA.Native_2 ),
        .data_Exists_I_reg_0(data_Exists_I_reg_0),
        .data_Exists_I_reg_1(\Use_UART.fifo_Read_reg_n_0 ),
        .enable_interrupts(enable_interrupts),
        .out(tx_buffered_2),
        .tx_Buffer_Empty(tx_Buffer_Empty),
        .tx_Buffer_Full(tx_Buffer_Full));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_UART.execute_1_reg 
       (.C(S_AXI_ACLK),
        .CE(1'b1),
        .D(execute),
        .Q(execute_1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_UART.execute_2_reg 
       (.C(S_AXI_ACLK),
        .CE(1'b1),
        .D(execute_1),
        .Q(execute_2),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Use_UART.execute_3_reg 
       (.C(S_AXI_ACLK),
        .CE(1'b1),
        .D(execute_2),
        .Q(execute_3),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h0000000000000002)) 
    \Use_UART.execute_i_1 
       (.I0(command[7]),
        .I1(\Use_UART.execute_i_3_n_0 ),
        .I2(command[0]),
        .I3(command[1]),
        .I4(command[3]),
        .I5(command[2]),
        .O(execute0));
  (* SOFT_HLUTNM = "soft_lutpair33" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \Use_UART.execute_i_3 
       (.I0(command[5]),
        .I1(command[4]),
        .O(\Use_UART.execute_i_3_n_0 ));
  FDCE #(
    .INIT(1'b0)) 
    \Use_UART.execute_reg 
       (.C(CLK),
        .CE(1'b1),
        .CLR(data_cmd_reset),
        .D(execute0),
        .Q(execute));
  FDCE \Use_UART.fifo_Din_reg[0] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(E),
        .CLR(AR),
        .D(Dbg_TDI_0),
        .Q(fifo_Din[0]));
  FDCE \Use_UART.fifo_Din_reg[1] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(E),
        .CLR(AR),
        .D(fifo_Din[0]),
        .Q(fifo_Din[1]));
  FDCE \Use_UART.fifo_Din_reg[2] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(E),
        .CLR(AR),
        .D(fifo_Din[1]),
        .Q(fifo_Din[2]));
  FDCE \Use_UART.fifo_Din_reg[3] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(E),
        .CLR(AR),
        .D(fifo_Din[2]),
        .Q(fifo_Din[3]));
  FDCE \Use_UART.fifo_Din_reg[4] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(E),
        .CLR(AR),
        .D(fifo_Din[3]),
        .Q(fifo_Din[4]));
  FDCE \Use_UART.fifo_Din_reg[5] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(E),
        .CLR(AR),
        .D(fifo_Din[4]),
        .Q(fifo_Din[5]));
  FDCE \Use_UART.fifo_Din_reg[6] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(E),
        .CLR(AR),
        .D(fifo_Din[5]),
        .Q(fifo_Din[6]));
  FDCE \Use_UART.fifo_Din_reg[7] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(E),
        .CLR(AR),
        .D(fifo_Din[6]),
        .Q(fifo_Din[7]));
  LUT6 #(
    .INIT(64'h0000000010000000)) 
    \Use_UART.fifo_Read_i_1 
       (.I0(\Use_UART.execute_i_3_n_0 ),
        .I1(execute_3),
        .I2(execute_2),
        .I3(command[6]),
        .I4(command[7]),
        .I5(\Use_UART.fifo_Write_i_2_n_0 ),
        .O(fifo_Read2_out));
  FDRE #(
    .INIT(1'b0)) 
    \Use_UART.fifo_Read_reg 
       (.C(S_AXI_ACLK),
        .CE(1'b1),
        .D(fifo_Read2_out),
        .Q(\Use_UART.fifo_Read_reg_n_0 ),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h0000000000100000)) 
    \Use_UART.fifo_Write_i_1 
       (.I0(\Use_UART.execute_i_3_n_0 ),
        .I1(execute_3),
        .I2(execute_2),
        .I3(command[6]),
        .I4(command[7]),
        .I5(\Use_UART.fifo_Write_i_2_n_0 ),
        .O(fifo_Write4_out));
  (* SOFT_HLUTNM = "soft_lutpair30" *) 
  LUT4 #(
    .INIT(16'hFFFE)) 
    \Use_UART.fifo_Write_i_2 
       (.I0(command[0]),
        .I1(command[2]),
        .I2(command[3]),
        .I3(command[1]),
        .O(\Use_UART.fifo_Write_i_2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \Use_UART.fifo_Write_reg 
       (.C(S_AXI_ACLK),
        .CE(1'b1),
        .D(fifo_Write4_out),
        .Q(\Use_UART.fifo_Write_reg_n_0 ),
        .R(1'b0));
  LUT6 #(
    .INIT(64'hFFFFFFEF00000000)) 
    \Use_UART.tdo_reg[0]_i_3 
       (.I0(command[0]),
        .I1(\Use_UART.execute_i_3_n_0 ),
        .I2(command[6]),
        .I3(command[2]),
        .I4(\Use_UART.tdo_reg[0]_i_4_n_0 ),
        .I5(sel_n_reg_0),
        .O(\Use_UART.tdo_reg[0]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair30" *) 
  LUT3 #(
    .INIT(8'hFE)) 
    \Use_UART.tdo_reg[0]_i_4 
       (.I0(command[3]),
        .I1(command[1]),
        .I2(command[7]),
        .O(\Use_UART.tdo_reg[0]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000200)) 
    \Use_UART.tdo_reg[4]_i_2 
       (.I0(sel_n_reg_0),
        .I1(command[0]),
        .I2(\Use_UART.execute_i_3_n_0 ),
        .I3(command[6]),
        .I4(command[2]),
        .I5(\Use_UART.tdo_reg[0]_i_4_n_0 ),
        .O(\Use_UART.tdo_reg[4]_i_2_n_0 ));
  FDCE #(
    .INIT(1'b0)) 
    \Use_UART.tdo_reg_reg[0] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(\Use_UART.tdo_reg_reg[7]_0 ),
        .CLR(AR),
        .D(\Use_UART.TX_FIFO_I_n_3 ),
        .Q(tdo_reg[0]));
  FDCE #(
    .INIT(1'b0)) 
    \Use_UART.tdo_reg_reg[1] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(\Use_UART.tdo_reg_reg[7]_0 ),
        .CLR(AR),
        .D(\Use_UART.TX_FIFO_I_n_4 ),
        .Q(tdo_reg[1]));
  FDCE #(
    .INIT(1'b0)) 
    \Use_UART.tdo_reg_reg[2] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(\Use_UART.tdo_reg_reg[7]_0 ),
        .CLR(AR),
        .D(\Use_UART.TX_FIFO_I_n_5 ),
        .Q(tdo_reg[2]));
  FDCE #(
    .INIT(1'b0)) 
    \Use_UART.tdo_reg_reg[3] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(\Use_UART.tdo_reg_reg[7]_0 ),
        .CLR(AR),
        .D(\Use_UART.TX_FIFO_I_n_6 ),
        .Q(tdo_reg[3]));
  FDCE #(
    .INIT(1'b0)) 
    \Use_UART.tdo_reg_reg[4] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(\Use_UART.tdo_reg_reg[7]_0 ),
        .CLR(AR),
        .D(\Use_UART.RX_FIFO_I_n_9 ),
        .Q(tdo_reg[4]));
  FDCE #(
    .INIT(1'b0)) 
    \Use_UART.tdo_reg_reg[5] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(\Use_UART.tdo_reg_reg[7]_0 ),
        .CLR(AR),
        .D(\Use_UART.RX_FIFO_I_n_10 ),
        .Q(tdo_reg[5]));
  FDCE #(
    .INIT(1'b0)) 
    \Use_UART.tdo_reg_reg[6] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(\Use_UART.tdo_reg_reg[7]_0 ),
        .CLR(AR),
        .D(\Use_UART.TX_FIFO_I_n_7 ),
        .Q(tdo_reg[6]));
  FDCE #(
    .INIT(1'b0)) 
    \Use_UART.tdo_reg_reg[7] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(\Use_UART.tdo_reg_reg[7]_0 ),
        .CLR(AR),
        .D(\Use_UART.TX_FIFO_I_n_8 ),
        .Q(tdo_reg[7]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_UART.tx_buffered_1_reg 
       (.C(S_AXI_ACLK),
        .CE(1'b1),
        .D(tx_buffered),
        .Q(tx_buffered_1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_UART.tx_buffered_2_reg 
       (.C(S_AXI_ACLK),
        .CE(1'b1),
        .D(tx_buffered_1),
        .Q(tx_buffered_2),
        .R(1'b0));
  FDCE #(
    .INIT(1'b0)) 
    \Use_UART.tx_buffered_reg 
       (.C(CLK),
        .CE(1'b1),
        .CLR(AR),
        .D(\Use_BSCAN.FDC_I_n_37 ),
        .Q(tx_buffered));
  FDCE #(
    .INIT(1'b0)) 
    \command_1_reg[0] 
       (.C(CLK),
        .CE(command_10),
        .CLR(AR),
        .D(p_0_in_3),
        .Q(command_1[0]));
  FDCE #(
    .INIT(1'b0)) 
    \command_1_reg[1] 
       (.C(CLK),
        .CE(command_10),
        .CLR(AR),
        .D(\tdi_shifter_reg_n_0_[1] ),
        .Q(command_1[1]));
  FDCE #(
    .INIT(1'b0)) 
    \command_1_reg[2] 
       (.C(CLK),
        .CE(command_10),
        .CLR(AR),
        .D(\tdi_shifter_reg_n_0_[2] ),
        .Q(command_1[2]));
  FDCE #(
    .INIT(1'b0)) 
    \command_1_reg[3] 
       (.C(CLK),
        .CE(command_10),
        .CLR(AR),
        .D(\tdi_shifter_reg_n_0_[3] ),
        .Q(command_1[3]));
  FDCE #(
    .INIT(1'b0)) 
    \command_1_reg[4] 
       (.C(CLK),
        .CE(command_10),
        .CLR(AR),
        .D(\tdi_shifter_reg_n_0_[4] ),
        .Q(command_1[4]));
  FDCE #(
    .INIT(1'b0)) 
    \command_1_reg[5] 
       (.C(CLK),
        .CE(command_10),
        .CLR(AR),
        .D(\tdi_shifter_reg_n_0_[5] ),
        .Q(command_1[5]));
  FDCE #(
    .INIT(1'b0)) 
    \command_1_reg[6] 
       (.C(CLK),
        .CE(command_10),
        .CLR(AR),
        .D(\tdi_shifter_reg_n_0_[6] ),
        .Q(command_1[6]));
  FDCE #(
    .INIT(1'b0)) 
    \command_1_reg[7] 
       (.C(CLK),
        .CE(command_10),
        .CLR(AR),
        .D(\tdi_shifter_reg_n_0_[7] ),
        .Q(command_1[7]));
  FDCE #(
    .INIT(1'b0)) 
    \completion_ctrl_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(AR),
        .D(\Use_BSCAN.FDC_I_n_38 ),
        .Q(completion_ctrl));
  LUT5 #(
    .INIT(32'hFEFFFFFF)) 
    sel_n_i_1
       (.I0(\command_1_reg[7]_0 [2]),
        .I1(\command_1_reg[7]_0 [3]),
        .I2(\command_1_reg[7]_0 [1]),
        .I3(\command_1_reg[7]_0 [0]),
        .I4(SEL),
        .O(sel_n0));
  LUT5 #(
    .INIT(32'h0000F044)) 
    sel_n_i_2
       (.I0(\Use_BSCAN.command[0]_i_1_n_0 ),
        .I1(CLK),
        .I2(Scan_Reset),
        .I3(Scan_Reset_Sel),
        .I4(Scan_En),
        .O(sel_with_scan_reset));
  FDPE #(
    .INIT(1'b1)) 
    sel_n_reg
       (.C(\Using_FPGA.Native_0 ),
        .CE(sel_n_reg_0),
        .D(sel_n0),
        .PRE(sel_with_scan_reset),
        .Q(sel_n));
  FDCE #(
    .INIT(1'b0)) 
    set_Ext_BRK_reg
       (.C(CLK),
        .CE(Debug_Rst_i0),
        .CLR(AR),
        .D(\tdi_shifter_reg_n_0_[2] ),
        .Q(set_Ext_BRK));
  LUT3 #(
    .INIT(8'h48)) 
    \shift_Count[1]_i_1 
       (.I0(Q),
        .I1(\Use_UART.fifo_Din_reg[7]_0 ),
        .I2(A1),
        .O(\shift_Count[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair28" *) 
  LUT4 #(
    .INIT(16'h7080)) 
    \shift_Count[2]_i_1 
       (.I0(A1),
        .I1(Q),
        .I2(\Use_UART.fifo_Din_reg[7]_0 ),
        .I3(A2),
        .O(\shift_Count[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair28" *) 
  LUT5 #(
    .INIT(32'h7F008000)) 
    \shift_Count[3]_i_1 
       (.I0(A2),
        .I1(Q),
        .I2(A1),
        .I3(\Use_UART.fifo_Din_reg[7]_0 ),
        .I4(A3),
        .O(\shift_Count[3]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h7FFF000080000000)) 
    \shift_Count[4]_i_1 
       (.I0(A3),
        .I1(A1),
        .I2(Q),
        .I3(A2),
        .I4(\Use_UART.fifo_Din_reg[7]_0 ),
        .I5(\shift_Count_reg_n_0_[4] ),
        .O(\shift_Count[4]_i_1_n_0 ));
  FDCE #(
    .INIT(1'b0)) 
    \shift_Count_reg[0] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(1'b1),
        .CLR(AR),
        .D(\shift_Count_reg[0]_0 ),
        .Q(Q));
  FDCE #(
    .INIT(1'b0)) 
    \shift_Count_reg[1] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(1'b1),
        .CLR(AR),
        .D(\shift_Count[1]_i_1_n_0 ),
        .Q(A1));
  FDCE #(
    .INIT(1'b0)) 
    \shift_Count_reg[2] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(1'b1),
        .CLR(AR),
        .D(\shift_Count[2]_i_1_n_0 ),
        .Q(A2));
  FDCE #(
    .INIT(1'b0)) 
    \shift_Count_reg[3] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(1'b1),
        .CLR(AR),
        .D(\shift_Count[3]_i_1_n_0 ),
        .Q(A3));
  FDCE #(
    .INIT(1'b0)) 
    \shift_Count_reg[4] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(1'b1),
        .CLR(AR),
        .D(\shift_Count[4]_i_1_n_0 ),
        .Q(\shift_Count_reg_n_0_[4] ));
  LUT6 #(
    .INIT(64'h0100000000000000)) 
    \tdi_shifter[0]_i_1 
       (.I0(\command_1_reg[7]_0 [2]),
        .I1(\command_1_reg[7]_0 [3]),
        .I2(\command_1_reg[7]_0 [1]),
        .I3(\command_1_reg[7]_0 [0]),
        .I4(SEL),
        .I5(\Use_UART.fifo_Din_reg[7]_0 ),
        .O(tdi_shifter0));
  FDCE #(
    .INIT(1'b0)) 
    \tdi_shifter_reg[0] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(tdi_shifter0),
        .CLR(AR),
        .D(Dbg_TDI_0),
        .Q(p_0_in_3));
  FDCE #(
    .INIT(1'b0)) 
    \tdi_shifter_reg[1] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(tdi_shifter0),
        .CLR(AR),
        .D(p_0_in_3),
        .Q(\tdi_shifter_reg_n_0_[1] ));
  FDCE #(
    .INIT(1'b0)) 
    \tdi_shifter_reg[2] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(tdi_shifter0),
        .CLR(AR),
        .D(\tdi_shifter_reg_n_0_[1] ),
        .Q(\tdi_shifter_reg_n_0_[2] ));
  FDCE #(
    .INIT(1'b0)) 
    \tdi_shifter_reg[3] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(tdi_shifter0),
        .CLR(AR),
        .D(\tdi_shifter_reg_n_0_[2] ),
        .Q(\tdi_shifter_reg_n_0_[3] ));
  FDCE #(
    .INIT(1'b0)) 
    \tdi_shifter_reg[4] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(tdi_shifter0),
        .CLR(AR),
        .D(\tdi_shifter_reg_n_0_[3] ),
        .Q(\tdi_shifter_reg_n_0_[4] ));
  FDCE #(
    .INIT(1'b0)) 
    \tdi_shifter_reg[5] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(tdi_shifter0),
        .CLR(AR),
        .D(\tdi_shifter_reg_n_0_[4] ),
        .Q(\tdi_shifter_reg_n_0_[5] ));
  FDCE #(
    .INIT(1'b0)) 
    \tdi_shifter_reg[6] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(tdi_shifter0),
        .CLR(AR),
        .D(\tdi_shifter_reg_n_0_[5] ),
        .Q(\tdi_shifter_reg_n_0_[6] ));
  FDCE #(
    .INIT(1'b0)) 
    \tdi_shifter_reg[7] 
       (.C(\Using_FPGA.Native_0 ),
        .CE(tdi_shifter0),
        .CLR(AR),
        .D(\tdi_shifter_reg_n_0_[6] ),
        .Q(\tdi_shifter_reg_n_0_[7] ));
endmodule

module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_BSCANE2
   (\Use_BSCAN.PORT_Selector_reg[0] ,
    DRCK,
    Ext_JTAG_RESET,
    SEL,
    \Use_BSCAN.PORT_Selector_reg[0]_0 ,
    I0,
    Dbg_Update_0,
    \Use_BSCAN.command_reg[5] ,
    \Using_FPGA.Native ,
    \Use_E2.BSCANE2_I_0 ,
    D,
    AR,
    shift_n_reset,
    \shift_Count_reg[0] ,
    \Use_Serial_Unified_Completion.sample_1_reg[15] ,
    tdo,
    mb_data_overrun1__0,
    completion_status137_out,
    \Use_Serial_Unified_Completion.count_reg[5] ,
    Scan_Reset,
    Scan_Reset_Sel,
    Scan_En,
    Q,
    \Use_Serial_Unified_Completion.completion_status_reg[15] );
  output \Use_BSCAN.PORT_Selector_reg[0] ;
  output DRCK;
  output Ext_JTAG_RESET;
  output SEL;
  output \Use_BSCAN.PORT_Selector_reg[0]_0 ;
  output I0;
  output Dbg_Update_0;
  output [0:0]\Use_BSCAN.command_reg[5] ;
  output [0:0]\Using_FPGA.Native ;
  output [0:0]\Use_E2.BSCANE2_I_0 ;
  output [0:0]D;
  output [0:0]AR;
  output shift_n_reset;
  output [0:0]\shift_Count_reg[0] ;
  output [0:0]\Use_Serial_Unified_Completion.sample_1_reg[15] ;
  input tdo;
  input mb_data_overrun1__0;
  input completion_status137_out;
  input [0:0]\Use_Serial_Unified_Completion.count_reg[5] ;
  input Scan_Reset;
  input Scan_Reset_Sel;
  input Scan_En;
  input [0:0]Q;
  input [0:0]\Use_Serial_Unified_Completion.completion_status_reg[15] ;

  wire [0:0]AR;
  wire [0:0]D;
  wire DRCK;
  wire Dbg_Update_0;
  wire Ext_JTAG_RESET;
  wire I0;
  wire [0:0]Q;
  wire SEL;
  wire Scan_En;
  wire Scan_Reset;
  wire Scan_Reset_Sel;
  wire \Use_BSCAN.PORT_Selector_reg[0] ;
  wire \Use_BSCAN.PORT_Selector_reg[0]_0 ;
  wire [0:0]\Use_BSCAN.command_reg[5] ;
  wire [0:0]\Use_E2.BSCANE2_I_0 ;
  wire \Use_E2.BSCANE2_I_n_3 ;
  wire \Use_E2.BSCANE2_I_n_6 ;
  wire \Use_E2.BSCANE2_I_n_8 ;
  wire [0:0]\Use_Serial_Unified_Completion.completion_status_reg[15] ;
  wire [0:0]\Use_Serial_Unified_Completion.count_reg[5] ;
  wire [0:0]\Use_Serial_Unified_Completion.sample_1_reg[15] ;
  wire [0:0]\Using_FPGA.Native ;
  wire completion_status137_out;
  wire mb_data_overrun1__0;
  wire [0:0]\shift_Count_reg[0] ;
  wire shift_n_reset;
  wire tdo;

  (* SOFT_HLUTNM = "soft_lutpair43" *) 
  LUT4 #(
    .INIT(16'h00C5)) 
    \Use_BSCAN.Config_Reg[30]_i_1 
       (.I0(\Use_BSCAN.PORT_Selector_reg[0]_0 ),
        .I1(Scan_Reset),
        .I2(Scan_Reset_Sel),
        .I3(Scan_En),
        .O(shift_n_reset));
  (* SOFT_HLUTNM = "soft_lutpair43" *) 
  LUT4 #(
    .INIT(16'h00C5)) 
    \Use_BSCAN.TDI_Shifter[3]_i_2 
       (.I0(SEL),
        .I1(Scan_Reset),
        .I2(Scan_Reset_Sel),
        .I3(Scan_En),
        .O(AR));
  (* BOX_TYPE = "PRIMITIVE" *) 
  BSCANE2 #(
    .DISABLE_JTAG("FALSE"),
    .JTAG_CHAIN(2)) 
    \Use_E2.BSCANE2_I 
       (.CAPTURE(\Use_BSCAN.PORT_Selector_reg[0] ),
        .DRCK(DRCK),
        .RESET(Ext_JTAG_RESET),
        .RUNTEST(\Use_E2.BSCANE2_I_n_3 ),
        .SEL(SEL),
        .SHIFT(\Use_BSCAN.PORT_Selector_reg[0]_0 ),
        .TCK(\Use_E2.BSCANE2_I_n_6 ),
        .TDI(I0),
        .TDO(tdo),
        .TMS(\Use_E2.BSCANE2_I_n_8 ),
        .UPDATE(Dbg_Update_0));
  (* SOFT_HLUTNM = "soft_lutpair44" *) 
  LUT3 #(
    .INIT(8'hE0)) 
    \Use_Serial_Unified_Completion.completion_status[15]_i_1 
       (.I0(\Use_BSCAN.PORT_Selector_reg[0]_0 ),
        .I1(\Use_BSCAN.PORT_Selector_reg[0] ),
        .I2(completion_status137_out),
        .O(\Using_FPGA.Native ));
  (* SOFT_HLUTNM = "soft_lutpair45" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \Use_Serial_Unified_Completion.completion_status[15]_i_2 
       (.I0(\Use_BSCAN.PORT_Selector_reg[0] ),
        .I1(\Use_Serial_Unified_Completion.completion_status_reg[15] ),
        .O(\Use_Serial_Unified_Completion.sample_1_reg[15] ));
  (* SOFT_HLUTNM = "soft_lutpair44" *) 
  LUT3 #(
    .INIT(8'hA8)) 
    \Use_Serial_Unified_Completion.count[0]__0_i_1 
       (.I0(mb_data_overrun1__0),
        .I1(\Use_BSCAN.PORT_Selector_reg[0]_0 ),
        .I2(\Use_BSCAN.PORT_Selector_reg[0] ),
        .O(\Use_BSCAN.command_reg[5] ));
  (* SOFT_HLUTNM = "soft_lutpair45" *) 
  LUT2 #(
    .INIT(4'h1)) 
    \Use_Serial_Unified_Completion.count[5]_i_1 
       (.I0(\Use_BSCAN.PORT_Selector_reg[0] ),
        .I1(\Use_Serial_Unified_Completion.count_reg[5] ),
        .O(D));
  (* SOFT_HLUTNM = "soft_lutpair46" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \Use_UART.tdo_reg[0]_i_1 
       (.I0(\Use_BSCAN.PORT_Selector_reg[0] ),
        .I1(\Use_BSCAN.PORT_Selector_reg[0]_0 ),
        .O(\Use_E2.BSCANE2_I_0 ));
  (* SOFT_HLUTNM = "soft_lutpair46" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \shift_Count[0]_i_1 
       (.I0(\Use_BSCAN.PORT_Selector_reg[0]_0 ),
        .I1(Q),
        .O(\shift_Count_reg[0] ));
endmodule

module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_BUFG
   (Ext_JTAG_DRCK,
    DRCK);
  output Ext_JTAG_DRCK;
  input DRCK;

  wire DRCK;
  wire Ext_JTAG_DRCK;

  (* BOX_TYPE = "PRIMITIVE" *) 
  BUFG \Using_FPGA.Native 
       (.I(DRCK),
        .O(Ext_JTAG_DRCK));
endmodule

module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FDC_1
   (D_2,
    data_cmd_reset,
    Dbg_Reg_En_0,
    mb_data_overrun1__0,
    \Using_FPGA.Native_0 ,
    E,
    \Using_FPGA.Native_1 ,
    CE,
    Debug_Rst_i0,
    mb_instr_overrun143_out,
    \Use_BSCAN.command_reg[6] ,
    \Use_BSCAN.PORT_Selector_reg[2] ,
    D,
    \Use_Serial_Unified_Completion.sample_reg[15] ,
    \Use_BSCAN.command_reg[6]_0 ,
    \Use_Serial_Unified_Completion.mb_instr_overrun_reg ,
    \Use_Serial_Unified_Completion.mb_instr_error_reg ,
    \Use_Serial_Unified_Completion.mb_data_overrun_reg ,
    \completion_ctrl_reg[0] ,
    \tdi_shifter_reg[0] ,
    \tdi_shifter_reg[0]_0 ,
    CLK,
    sel_n,
    \Use_Serial_Unified_Completion.completion_block_reg ,
    Scan_Reset,
    Scan_Reset_Sel,
    Scan_En,
    Q,
    \Use_UART.tx_buffered_reg ,
    \Use_Serial_Unified_Completion.completion_status_reg[0] ,
    \Use_Serial_Unified_Completion.mb_instr_overrun_reg_0 ,
    \Use_UART.tx_buffered_reg_0 ,
    \command_1_reg[7] ,
    SEL,
    \Use_Serial_Unified_Completion.completion_status_reg[9] ,
    \Use_Serial_Unified_Completion.completion_status_reg[3] ,
    \Use_Serial_Unified_Completion.completion_status_reg[4] ,
    \Use_Serial_Unified_Completion.completion_status_reg[5] ,
    \Use_Serial_Unified_Completion.completion_status_reg[6] ,
    \Use_Serial_Unified_Completion.completion_status_reg[8] ,
    \Use_Serial_Unified_Completion.sample_reg[15]_0 ,
    \Use_Serial_Unified_Completion.sample_1_reg[10] ,
    Dbg_TDO_0,
    \Use_Serial_Unified_Completion.mb_instr_overrun_reg_1 ,
    \Use_Serial_Unified_Completion.mb_instr_error_reg_0 ,
    \Use_Serial_Unified_Completion.mb_data_overrun_reg_0 ,
    completion_block0__10,
    completion_ctrl,
    tx_buffered);
  output D_2;
  output data_cmd_reset;
  output [0:7]Dbg_Reg_En_0;
  output mb_data_overrun1__0;
  output \Using_FPGA.Native_0 ;
  output [0:0]E;
  output \Using_FPGA.Native_1 ;
  output CE;
  output Debug_Rst_i0;
  output mb_instr_overrun143_out;
  output \Use_BSCAN.command_reg[6] ;
  output [0:0]\Use_BSCAN.PORT_Selector_reg[2] ;
  output [9:0]D;
  output [2:0]\Use_Serial_Unified_Completion.sample_reg[15] ;
  output [0:0]\Use_BSCAN.command_reg[6]_0 ;
  output \Use_Serial_Unified_Completion.mb_instr_overrun_reg ;
  output \Use_Serial_Unified_Completion.mb_instr_error_reg ;
  output \Use_Serial_Unified_Completion.mb_data_overrun_reg ;
  output \completion_ctrl_reg[0] ;
  output \tdi_shifter_reg[0] ;
  output \tdi_shifter_reg[0]_0 ;
  input CLK;
  input sel_n;
  input \Use_Serial_Unified_Completion.completion_block_reg ;
  input Scan_Reset;
  input Scan_Reset_Sel;
  input Scan_En;
  input [7:0]Q;
  input \Use_UART.tx_buffered_reg ;
  input \Use_Serial_Unified_Completion.completion_status_reg[0] ;
  input \Use_Serial_Unified_Completion.mb_instr_overrun_reg_0 ;
  input [7:0]\Use_UART.tx_buffered_reg_0 ;
  input [3:0]\command_1_reg[7] ;
  input SEL;
  input [10:0]\Use_Serial_Unified_Completion.completion_status_reg[9] ;
  input \Use_Serial_Unified_Completion.completion_status_reg[3] ;
  input \Use_Serial_Unified_Completion.completion_status_reg[4] ;
  input \Use_Serial_Unified_Completion.completion_status_reg[5] ;
  input \Use_Serial_Unified_Completion.completion_status_reg[6] ;
  input \Use_Serial_Unified_Completion.completion_status_reg[8] ;
  input [5:0]\Use_Serial_Unified_Completion.sample_reg[15]_0 ;
  input \Use_Serial_Unified_Completion.sample_1_reg[10] ;
  input Dbg_TDO_0;
  input \Use_Serial_Unified_Completion.mb_instr_overrun_reg_1 ;
  input \Use_Serial_Unified_Completion.mb_instr_error_reg_0 ;
  input \Use_Serial_Unified_Completion.mb_data_overrun_reg_0 ;
  input completion_block0__10;
  input completion_ctrl;
  input tx_buffered;

  wire CE;
  wire CLK;
  wire [9:0]D;
  wire D_2;
  wire [0:7]Dbg_Reg_En_0;
  wire Dbg_TDO_0;
  wire Debug_Rst_i0;
  wire [0:0]E;
  wire [7:0]Q;
  wire Q_1;
  wire SEL;
  wire Scan_En;
  wire Scan_Reset;
  wire Scan_Reset_Sel;
  wire [0:0]\Use_BSCAN.PORT_Selector_reg[2] ;
  wire \Use_BSCAN.command_reg[6] ;
  wire [0:0]\Use_BSCAN.command_reg[6]_0 ;
  wire \Use_Serial_Unified_Completion.completion_block_reg ;
  wire \Use_Serial_Unified_Completion.completion_status_reg[0] ;
  wire \Use_Serial_Unified_Completion.completion_status_reg[3] ;
  wire \Use_Serial_Unified_Completion.completion_status_reg[4] ;
  wire \Use_Serial_Unified_Completion.completion_status_reg[5] ;
  wire \Use_Serial_Unified_Completion.completion_status_reg[6] ;
  wire \Use_Serial_Unified_Completion.completion_status_reg[8] ;
  wire [10:0]\Use_Serial_Unified_Completion.completion_status_reg[9] ;
  wire \Use_Serial_Unified_Completion.mb_data_overrun_reg ;
  wire \Use_Serial_Unified_Completion.mb_data_overrun_reg_0 ;
  wire \Use_Serial_Unified_Completion.mb_instr_error_reg ;
  wire \Use_Serial_Unified_Completion.mb_instr_error_reg_0 ;
  wire \Use_Serial_Unified_Completion.mb_instr_overrun_reg ;
  wire \Use_Serial_Unified_Completion.mb_instr_overrun_reg_0 ;
  wire \Use_Serial_Unified_Completion.mb_instr_overrun_reg_1 ;
  wire \Use_Serial_Unified_Completion.sample_1[15]_i_2_n_0 ;
  wire \Use_Serial_Unified_Completion.sample_1_reg[10] ;
  wire [2:0]\Use_Serial_Unified_Completion.sample_reg[15] ;
  wire [5:0]\Use_Serial_Unified_Completion.sample_reg[15]_0 ;
  wire \Use_UART.tx_buffered_i_2_n_0 ;
  wire \Use_UART.tx_buffered_reg ;
  wire [7:0]\Use_UART.tx_buffered_reg_0 ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_i_2_n_0 ;
  wire [3:0]\command_1_reg[7] ;
  wire completion_block0__10;
  wire completion_ctrl;
  wire completion_ctrl0;
  wire \completion_ctrl_reg[0] ;
  wire data_cmd_reset;
  wire mb_data_overrun1__0;
  wire mb_instr_overrun143_out;
  wire sel_n;
  wire \tdi_shifter_reg[0] ;
  wire \tdi_shifter_reg[0]_0 ;
  wire tx_buffered;

  (* SOFT_HLUTNM = "soft_lutpair19" *) 
  LUT3 #(
    .INIT(8'h40)) 
    \Dbg_Reg_En_0[0]_INST_0 
       (.I0(\Use_Serial_Unified_Completion.completion_block_reg ),
        .I1(Q_1),
        .I2(Q[7]),
        .O(Dbg_Reg_En_0[0]));
  (* SOFT_HLUTNM = "soft_lutpair18" *) 
  LUT3 #(
    .INIT(8'h40)) 
    \Dbg_Reg_En_0[1]_INST_0 
       (.I0(\Use_Serial_Unified_Completion.completion_block_reg ),
        .I1(Q_1),
        .I2(Q[6]),
        .O(Dbg_Reg_En_0[1]));
  (* SOFT_HLUTNM = "soft_lutpair17" *) 
  LUT3 #(
    .INIT(8'h40)) 
    \Dbg_Reg_En_0[2]_INST_0 
       (.I0(\Use_Serial_Unified_Completion.completion_block_reg ),
        .I1(Q_1),
        .I2(Q[5]),
        .O(Dbg_Reg_En_0[2]));
  (* SOFT_HLUTNM = "soft_lutpair20" *) 
  LUT3 #(
    .INIT(8'h40)) 
    \Dbg_Reg_En_0[3]_INST_0 
       (.I0(\Use_Serial_Unified_Completion.completion_block_reg ),
        .I1(Q_1),
        .I2(Q[4]),
        .O(Dbg_Reg_En_0[3]));
  (* SOFT_HLUTNM = "soft_lutpair20" *) 
  LUT3 #(
    .INIT(8'h40)) 
    \Dbg_Reg_En_0[4]_INST_0 
       (.I0(\Use_Serial_Unified_Completion.completion_block_reg ),
        .I1(Q_1),
        .I2(Q[3]),
        .O(Dbg_Reg_En_0[4]));
  (* SOFT_HLUTNM = "soft_lutpair19" *) 
  LUT3 #(
    .INIT(8'h40)) 
    \Dbg_Reg_En_0[5]_INST_0 
       (.I0(\Use_Serial_Unified_Completion.completion_block_reg ),
        .I1(Q_1),
        .I2(Q[2]),
        .O(Dbg_Reg_En_0[5]));
  (* SOFT_HLUTNM = "soft_lutpair18" *) 
  LUT3 #(
    .INIT(8'h40)) 
    \Dbg_Reg_En_0[6]_INST_0 
       (.I0(\Use_Serial_Unified_Completion.completion_block_reg ),
        .I1(Q_1),
        .I2(Q[1]),
        .O(Dbg_Reg_En_0[6]));
  (* SOFT_HLUTNM = "soft_lutpair17" *) 
  LUT3 #(
    .INIT(8'h40)) 
    \Dbg_Reg_En_0[7]_INST_0 
       (.I0(\Use_Serial_Unified_Completion.completion_block_reg ),
        .I1(Q_1),
        .I2(Q[0]),
        .O(Dbg_Reg_En_0[7]));
  (* SOFT_HLUTNM = "soft_lutpair15" *) 
  LUT2 #(
    .INIT(4'h2)) 
    Dbg_Shift_31_INST_0_i_2
       (.I0(Q_1),
        .I1(\Use_Serial_Unified_Completion.completion_block_reg ),
        .O(\Using_FPGA.Native_0 ));
  LUT6 #(
    .INIT(64'h0002000000000000)) 
    Ext_NM_BRK_i_i_1
       (.I0(\Using_FPGA.Native_0 ),
        .I1(Q[0]),
        .I2(Q[1]),
        .I3(Q[2]),
        .I4(Q[3]),
        .I5(\Use_UART.tx_buffered_reg ),
        .O(Debug_Rst_i0));
  LUT6 #(
    .INIT(64'hDFDFDFDF03000000)) 
    \Use_Serial_Unified_Completion.completion_block_i_1 
       (.I0(\Use_Serial_Unified_Completion.mb_instr_overrun_reg_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(completion_ctrl0),
        .I3(completion_block0__10),
        .I4(completion_ctrl),
        .I5(\Use_Serial_Unified_Completion.completion_block_reg ),
        .O(\completion_ctrl_reg[0] ));
  (* SOFT_HLUTNM = "soft_lutpair16" *) 
  LUT4 #(
    .INIT(16'h888F)) 
    \Use_Serial_Unified_Completion.completion_status[0]_i_1 
       (.I0(\Using_FPGA.Native_1 ),
        .I1(\Use_Serial_Unified_Completion.completion_status_reg[9] [1]),
        .I2(\Use_Serial_Unified_Completion.completion_status_reg[9] [0]),
        .I3(\Use_Serial_Unified_Completion.sample_1[15]_i_2_n_0 ),
        .O(D[0]));
  (* SOFT_HLUTNM = "soft_lutpair13" *) 
  LUT5 #(
    .INIT(32'h00200000)) 
    \Use_Serial_Unified_Completion.completion_status[15]_i_3 
       (.I0(Q_1),
        .I1(Q[2]),
        .I2(Q[1]),
        .I3(Q[0]),
        .I4(\Use_Serial_Unified_Completion.sample_1_reg[10] ),
        .O(\Using_FPGA.Native_1 ));
  (* SOFT_HLUTNM = "soft_lutpair16" *) 
  LUT5 #(
    .INIT(32'hFF060606)) 
    \Use_Serial_Unified_Completion.completion_status[1]_i_1 
       (.I0(\Use_Serial_Unified_Completion.completion_status_reg[9] [1]),
        .I1(\Use_Serial_Unified_Completion.completion_status_reg[9] [0]),
        .I2(\Use_Serial_Unified_Completion.sample_1[15]_i_2_n_0 ),
        .I3(\Using_FPGA.Native_1 ),
        .I4(\Use_Serial_Unified_Completion.completion_status_reg[9] [2]),
        .O(D[1]));
  LUT6 #(
    .INIT(64'hFFFF006A006A006A)) 
    \Use_Serial_Unified_Completion.completion_status[2]_i_1 
       (.I0(\Use_Serial_Unified_Completion.completion_status_reg[9] [2]),
        .I1(\Use_Serial_Unified_Completion.completion_status_reg[9] [1]),
        .I2(\Use_Serial_Unified_Completion.completion_status_reg[9] [0]),
        .I3(\Use_Serial_Unified_Completion.sample_1[15]_i_2_n_0 ),
        .I4(\Using_FPGA.Native_1 ),
        .I5(\Use_Serial_Unified_Completion.completion_status_reg[9] [3]),
        .O(D[2]));
  LUT5 #(
    .INIT(32'hFF060606)) 
    \Use_Serial_Unified_Completion.completion_status[3]_i_1 
       (.I0(\Use_Serial_Unified_Completion.completion_status_reg[9] [3]),
        .I1(\Use_Serial_Unified_Completion.completion_status_reg[3] ),
        .I2(\Use_Serial_Unified_Completion.sample_1[15]_i_2_n_0 ),
        .I3(\Using_FPGA.Native_1 ),
        .I4(\Use_Serial_Unified_Completion.completion_status_reg[9] [4]),
        .O(D[3]));
  LUT5 #(
    .INIT(32'hFF060606)) 
    \Use_Serial_Unified_Completion.completion_status[4]_i_1 
       (.I0(\Use_Serial_Unified_Completion.completion_status_reg[9] [4]),
        .I1(\Use_Serial_Unified_Completion.completion_status_reg[4] ),
        .I2(\Use_Serial_Unified_Completion.sample_1[15]_i_2_n_0 ),
        .I3(\Using_FPGA.Native_1 ),
        .I4(\Use_Serial_Unified_Completion.completion_status_reg[9] [5]),
        .O(D[4]));
  LUT5 #(
    .INIT(32'hFF060606)) 
    \Use_Serial_Unified_Completion.completion_status[5]_i_1 
       (.I0(\Use_Serial_Unified_Completion.completion_status_reg[9] [5]),
        .I1(\Use_Serial_Unified_Completion.completion_status_reg[5] ),
        .I2(\Use_Serial_Unified_Completion.sample_1[15]_i_2_n_0 ),
        .I3(\Using_FPGA.Native_1 ),
        .I4(\Use_Serial_Unified_Completion.completion_status_reg[9] [6]),
        .O(D[5]));
  (* SOFT_HLUTNM = "soft_lutpair14" *) 
  LUT5 #(
    .INIT(32'hFF121212)) 
    \Use_Serial_Unified_Completion.completion_status[6]_i_1 
       (.I0(\Use_Serial_Unified_Completion.completion_status_reg[9] [6]),
        .I1(\Use_Serial_Unified_Completion.sample_1[15]_i_2_n_0 ),
        .I2(\Use_Serial_Unified_Completion.completion_status_reg[6] ),
        .I3(\Using_FPGA.Native_1 ),
        .I4(\Use_Serial_Unified_Completion.completion_status_reg[9] [7]),
        .O(D[6]));
  LUT6 #(
    .INIT(64'hFFFF122212221222)) 
    \Use_Serial_Unified_Completion.completion_status[7]_i_1 
       (.I0(\Use_Serial_Unified_Completion.completion_status_reg[9] [7]),
        .I1(\Use_Serial_Unified_Completion.sample_1[15]_i_2_n_0 ),
        .I2(\Use_Serial_Unified_Completion.completion_status_reg[6] ),
        .I3(\Use_Serial_Unified_Completion.completion_status_reg[9] [6]),
        .I4(\Using_FPGA.Native_1 ),
        .I5(\Use_Serial_Unified_Completion.completion_status_reg[9] [8]),
        .O(D[7]));
  LUT5 #(
    .INIT(32'hFF121212)) 
    \Use_Serial_Unified_Completion.completion_status[8]_i_1 
       (.I0(\Use_Serial_Unified_Completion.completion_status_reg[9] [8]),
        .I1(\Use_Serial_Unified_Completion.sample_1[15]_i_2_n_0 ),
        .I2(\Use_Serial_Unified_Completion.completion_status_reg[8] ),
        .I3(\Using_FPGA.Native_1 ),
        .I4(\Use_Serial_Unified_Completion.completion_status_reg[9] [9]),
        .O(D[8]));
  LUT6 #(
    .INIT(64'h00F100F1FF000000)) 
    \Use_Serial_Unified_Completion.completion_status[9]_i_1 
       (.I0(\Use_Serial_Unified_Completion.completion_block_reg ),
        .I1(Q_1),
        .I2(completion_ctrl0),
        .I3(\Using_FPGA.Native_1 ),
        .I4(\Use_Serial_Unified_Completion.completion_status_reg[0] ),
        .I5(\Use_Serial_Unified_Completion.mb_instr_overrun_reg_0 ),
        .O(E));
  LUT6 #(
    .INIT(64'hFFFF122212221222)) 
    \Use_Serial_Unified_Completion.completion_status[9]_i_2 
       (.I0(\Use_Serial_Unified_Completion.completion_status_reg[9] [9]),
        .I1(\Use_Serial_Unified_Completion.sample_1[15]_i_2_n_0 ),
        .I2(\Use_Serial_Unified_Completion.completion_status_reg[8] ),
        .I3(\Use_Serial_Unified_Completion.completion_status_reg[9] [8]),
        .I4(\Using_FPGA.Native_1 ),
        .I5(\Use_Serial_Unified_Completion.completion_status_reg[9] [10]),
        .O(D[9]));
  (* SOFT_HLUTNM = "soft_lutpair12" *) 
  LUT5 #(
    .INIT(32'h00800000)) 
    \Use_Serial_Unified_Completion.completion_status[9]_i_3 
       (.I0(Q[2]),
        .I1(Q_1),
        .I2(Q[0]),
        .I3(Q[1]),
        .I4(\Use_Serial_Unified_Completion.sample_1_reg[10] ),
        .O(completion_ctrl0));
  LUT6 #(
    .INIT(64'h0200000000000000)) 
    \Use_Serial_Unified_Completion.count[0]__0_i_3 
       (.I0(Q[2]),
        .I1(Q[0]),
        .I2(Q[3]),
        .I3(\Using_FPGA.Native_0 ),
        .I4(Q[1]),
        .I5(\Use_UART.tx_buffered_reg ),
        .O(mb_data_overrun1__0));
  LUT6 #(
    .INIT(64'h0000020000000000)) 
    \Use_Serial_Unified_Completion.count[0]_i_2 
       (.I0(Q[2]),
        .I1(Q[0]),
        .I2(Q[3]),
        .I3(\Using_FPGA.Native_0 ),
        .I4(Q[1]),
        .I5(\Use_UART.tx_buffered_reg ),
        .O(mb_instr_overrun143_out));
  LUT6 #(
    .INIT(64'h053F0F3F05000000)) 
    \Use_Serial_Unified_Completion.mb_data_overrun_i_1 
       (.I0(Dbg_TDO_0),
        .I1(completion_ctrl0),
        .I2(\Use_Serial_Unified_Completion.mb_instr_overrun_reg_0 ),
        .I3(mb_data_overrun1__0),
        .I4(\Use_Serial_Unified_Completion.mb_data_overrun_reg_0 ),
        .I5(\Use_Serial_Unified_Completion.sample_reg[15]_0 [2]),
        .O(\Use_Serial_Unified_Completion.mb_data_overrun_reg ));
  LUT6 #(
    .INIT(64'h00BB033300880000)) 
    \Use_Serial_Unified_Completion.mb_instr_error_i_1 
       (.I0(Dbg_TDO_0),
        .I1(\Use_Serial_Unified_Completion.mb_instr_error_reg_0 ),
        .I2(completion_ctrl0),
        .I3(\Use_Serial_Unified_Completion.mb_instr_overrun_reg_0 ),
        .I4(mb_instr_overrun143_out),
        .I5(\Use_Serial_Unified_Completion.sample_reg[15]_0 [1]),
        .O(\Use_Serial_Unified_Completion.mb_instr_error_reg ));
  LUT6 #(
    .INIT(64'h00BB033300880000)) 
    \Use_Serial_Unified_Completion.mb_instr_overrun_i_1 
       (.I0(Dbg_TDO_0),
        .I1(\Use_Serial_Unified_Completion.mb_instr_overrun_reg_1 ),
        .I2(completion_ctrl0),
        .I3(\Use_Serial_Unified_Completion.mb_instr_overrun_reg_0 ),
        .I4(mb_instr_overrun143_out),
        .I5(\Use_Serial_Unified_Completion.sample_reg[15]_0 [0]),
        .O(\Use_Serial_Unified_Completion.mb_instr_overrun_reg ));
  LUT6 #(
    .INIT(64'h0000000400000000)) 
    \Use_Serial_Unified_Completion.mb_instr_overrun_i_3 
       (.I0(Q[1]),
        .I1(Q_1),
        .I2(\Use_Serial_Unified_Completion.completion_block_reg ),
        .I3(Q[3]),
        .I4(Q[0]),
        .I5(Q[2]),
        .O(\Use_BSCAN.command_reg[6] ));
  (* SOFT_HLUTNM = "soft_lutpair21" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \Use_Serial_Unified_Completion.sample[13]_i_1 
       (.I0(\Use_Serial_Unified_Completion.sample_1[15]_i_2_n_0 ),
        .I1(\Use_Serial_Unified_Completion.sample_reg[15]_0 [3]),
        .O(\Use_Serial_Unified_Completion.sample_reg[15] [0]));
  (* SOFT_HLUTNM = "soft_lutpair21" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \Use_Serial_Unified_Completion.sample[14]_i_1 
       (.I0(\Use_Serial_Unified_Completion.sample_1[15]_i_2_n_0 ),
        .I1(\Use_Serial_Unified_Completion.sample_reg[15]_0 [4]),
        .O(\Use_Serial_Unified_Completion.sample_reg[15] [1]));
  LUT2 #(
    .INIT(4'h8)) 
    \Use_Serial_Unified_Completion.sample[15]_i_1 
       (.I0(\Use_Serial_Unified_Completion.sample_1[15]_i_2_n_0 ),
        .I1(\Use_Serial_Unified_Completion.sample_reg[15]_0 [5]),
        .O(\Use_Serial_Unified_Completion.sample_reg[15] [2]));
  (* SOFT_HLUTNM = "soft_lutpair14" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \Use_Serial_Unified_Completion.sample_1[15]_i_1 
       (.I0(\Use_Serial_Unified_Completion.sample_1[15]_i_2_n_0 ),
        .O(\Use_BSCAN.command_reg[6]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair12" *) 
  LUT5 #(
    .INIT(32'h20000800)) 
    \Use_Serial_Unified_Completion.sample_1[15]_i_2 
       (.I0(\Use_Serial_Unified_Completion.sample_1_reg[10] ),
        .I1(Q[1]),
        .I2(Q[0]),
        .I3(Q_1),
        .I4(Q[2]),
        .O(\Use_Serial_Unified_Completion.sample_1[15]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair15" *) 
  LUT5 #(
    .INIT(32'h0000F0DD)) 
    \Use_UART.execute_i_2 
       (.I0(Q_1),
        .I1(\Use_Serial_Unified_Completion.completion_block_reg ),
        .I2(Scan_Reset),
        .I3(Scan_Reset_Sel),
        .I4(Scan_En),
        .O(data_cmd_reset));
  LUT4 #(
    .INIT(16'hBF80)) 
    \Use_UART.tx_buffered_i_1 
       (.I0(\Use_UART.tx_buffered_reg_0 [7]),
        .I1(\Use_UART.tx_buffered_i_2_n_0 ),
        .I2(\Use_UART.tx_buffered_reg ),
        .I3(tx_buffered),
        .O(\tdi_shifter_reg[0] ));
  LUT6 #(
    .INIT(64'h0000000020000000)) 
    \Use_UART.tx_buffered_i_2 
       (.I0(Q_1),
        .I1(\Use_Serial_Unified_Completion.completion_block_reg ),
        .I2(Q[1]),
        .I3(Q[3]),
        .I4(Q[2]),
        .I5(Q[0]),
        .O(\Use_UART.tx_buffered_i_2_n_0 ));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDC_1" *) 
  FDCE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b1)) 
    \Using_FPGA.Native 
       (.C(CLK),
        .CE(1'b1),
        .CLR(sel_n),
        .D(D_2),
        .Q(Q_1));
  LUT5 #(
    .INIT(32'h00000800)) 
    \Using_FPGA.Native_i_1 
       (.I0(\Using_FPGA.Native_i_2_n_0 ),
        .I1(\Use_UART.tx_buffered_reg_0 [3]),
        .I2(\Use_UART.tx_buffered_reg_0 [2]),
        .I3(\Use_UART.tx_buffered_reg_0 [0]),
        .I4(\Use_UART.tx_buffered_reg_0 [1]),
        .O(CE));
  (* SOFT_HLUTNM = "soft_lutpair13" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \Using_FPGA.Native_i_1__3 
       (.I0(Q_1),
        .O(D_2));
  LUT6 #(
    .INIT(64'h0000002000000000)) 
    \Using_FPGA.Native_i_2 
       (.I0(\Use_UART.tx_buffered_reg_0 [5]),
        .I1(\Use_UART.tx_buffered_reg_0 [4]),
        .I2(\Use_UART.tx_buffered_reg_0 [6]),
        .I3(\Use_UART.tx_buffered_reg_0 [7]),
        .I4(\Use_Serial_Unified_Completion.completion_block_reg ),
        .I5(Q_1),
        .O(\Using_FPGA.Native_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h0000000001000000)) 
    \command_1[0]_i_1 
       (.I0(\command_1_reg[7] [2]),
        .I1(\command_1_reg[7] [3]),
        .I2(\command_1_reg[7] [1]),
        .I3(\command_1_reg[7] [0]),
        .I4(SEL),
        .I5(\Using_FPGA.Native_0 ),
        .O(\Use_BSCAN.PORT_Selector_reg[2] ));
  LUT3 #(
    .INIT(8'hB8)) 
    \completion_ctrl[0]_i_1 
       (.I0(\Use_UART.tx_buffered_reg_0 [7]),
        .I1(completion_ctrl0),
        .I2(completion_ctrl),
        .O(\tdi_shifter_reg[0]_0 ));
endmodule

module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FDRE_1
   (sync,
    \Use_Serial_Unified_Completion.count_reg[1] ,
    \Use_Serial_Unified_Completion.count_reg[1]_0 ,
    E,
    D_2,
    CE,
    \Using_FPGA.Native_0 ,
    \Use_Serial_Unified_Completion.mb_instr_error_reg ,
    \Use_Serial_Unified_Completion.mb_instr_error_reg_0 ,
    \Use_Serial_Unified_Completion.mb_instr_error_reg_1 ,
    \Use_UART.fifo_Din_reg[7] ,
    \Use_UART.fifo_Din_reg[7]_0 ,
    \Use_UART.fifo_Din_reg[7]_1 ,
    \Use_UART.fifo_Din_reg[7]_2 ,
    Q);
  output sync;
  output \Use_Serial_Unified_Completion.count_reg[1] ;
  output \Use_Serial_Unified_Completion.count_reg[1]_0 ;
  output [0:0]E;
  input D_2;
  input CE;
  input \Using_FPGA.Native_0 ;
  input \Use_Serial_Unified_Completion.mb_instr_error_reg ;
  input \Use_Serial_Unified_Completion.mb_instr_error_reg_0 ;
  input \Use_Serial_Unified_Completion.mb_instr_error_reg_1 ;
  input \Use_UART.fifo_Din_reg[7] ;
  input \Use_UART.fifo_Din_reg[7]_0 ;
  input \Use_UART.fifo_Din_reg[7]_1 ;
  input \Use_UART.fifo_Din_reg[7]_2 ;
  input [0:0]Q;

  wire CE;
  wire D_2;
  wire [0:0]E;
  wire [0:0]Q;
  wire \Use_Serial_Unified_Completion.count_reg[1] ;
  wire \Use_Serial_Unified_Completion.count_reg[1]_0 ;
  wire \Use_Serial_Unified_Completion.mb_instr_error_reg ;
  wire \Use_Serial_Unified_Completion.mb_instr_error_reg_0 ;
  wire \Use_Serial_Unified_Completion.mb_instr_error_reg_1 ;
  wire \Use_UART.fifo_Din_reg[7] ;
  wire \Use_UART.fifo_Din_reg[7]_0 ;
  wire \Use_UART.fifo_Din_reg[7]_1 ;
  wire \Use_UART.fifo_Din_reg[7]_2 ;
  wire \Using_FPGA.Native_0 ;
  wire sync;

  LUT6 #(
    .INIT(64'hFFEFFFFF00000000)) 
    Dbg_Shift_31_INST_0
       (.I0(sync),
        .I1(\Use_UART.fifo_Din_reg[7]_1 ),
        .I2(\Use_UART.fifo_Din_reg[7]_2 ),
        .I3(Q),
        .I4(\Use_UART.fifo_Din_reg[7] ),
        .I5(\Use_UART.fifo_Din_reg[7]_0 ),
        .O(E));
  LUT6 #(
    .INIT(64'h2000000000000000)) 
    \Use_Serial_Unified_Completion.mb_instr_error_i_2 
       (.I0(\Use_Serial_Unified_Completion.mb_instr_error_reg ),
        .I1(\Use_Serial_Unified_Completion.mb_instr_error_reg_0 ),
        .I2(sync),
        .I3(\Use_Serial_Unified_Completion.mb_instr_error_reg_1 ),
        .I4(\Use_UART.fifo_Din_reg[7] ),
        .I5(\Use_UART.fifo_Din_reg[7]_0 ),
        .O(\Use_Serial_Unified_Completion.count_reg[1] ));
  LUT6 #(
    .INIT(64'h1000000000000000)) 
    \Use_Serial_Unified_Completion.mb_instr_overrun_i_2 
       (.I0(\Use_Serial_Unified_Completion.mb_instr_error_reg ),
        .I1(\Use_Serial_Unified_Completion.mb_instr_error_reg_0 ),
        .I2(sync),
        .I3(\Use_Serial_Unified_Completion.mb_instr_error_reg_1 ),
        .I4(\Use_UART.fifo_Din_reg[7] ),
        .I5(\Use_UART.fifo_Din_reg[7]_0 ),
        .O(\Use_Serial_Unified_Completion.count_reg[1]_0 ));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDRE_1" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b1)) 
    \Using_FPGA.Native 
       (.C(\Using_FPGA.Native_0 ),
        .CE(CE),
        .D(1'b1),
        .Q(sync),
        .R(D_2));
endmodule

module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_MUXF5
   (mux_0123,
    Q,
    \Using_FPGA.Native_0 );
  output mux_0123;
  input [1:0]Q;
  input [3:0]\Using_FPGA.Native_0 ;

  wire I0;
  wire I1;
  wire [1:0]Q;
  wire [3:0]\Using_FPGA.Native_0 ;
  wire mux_0123;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "MUXF5" *) 
  (* XILINX_TRANSFORM_PINMAP = "S:I2" *) 
  LUT3 #(
    .INIT(8'hCA)) 
    \Using_FPGA.Native 
       (.I0(I0),
        .I1(I1),
        .I2(Q[1]),
        .O(mux_0123));
  (* SOFT_HLUTNM = "soft_lutpair9" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__1 
       (.I0(\Using_FPGA.Native_0 [2]),
        .I1(Q[0]),
        .I2(\Using_FPGA.Native_0 [3]),
        .O(I0));
  (* SOFT_HLUTNM = "soft_lutpair9" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_2 
       (.I0(\Using_FPGA.Native_0 [0]),
        .I1(Q[0]),
        .I2(\Using_FPGA.Native_0 [1]),
        .O(I1));
endmodule

(* ORIG_REF_NAME = "MB_MUXF5" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_MUXF5_867
   (mux_4567,
    Q,
    \Using_FPGA.Native_0 );
  output mux_4567;
  input [1:0]Q;
  input [3:0]\Using_FPGA.Native_0 ;

  wire [1:0]Q;
  wire [3:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_i_1__2_n_0 ;
  wire \Using_FPGA.Native_i_2__0_n_0 ;
  wire mux_4567;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "MUXF5" *) 
  (* XILINX_TRANSFORM_PINMAP = "S:I2" *) 
  LUT3 #(
    .INIT(8'hCA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_i_1__2_n_0 ),
        .I1(\Using_FPGA.Native_i_2__0_n_0 ),
        .I2(Q[1]),
        .O(mux_4567));
  (* SOFT_HLUTNM = "soft_lutpair10" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__2 
       (.I0(\Using_FPGA.Native_0 [2]),
        .I1(Q[0]),
        .I2(\Using_FPGA.Native_0 [3]),
        .O(\Using_FPGA.Native_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair10" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_2__0 
       (.I0(\Using_FPGA.Native_0 [0]),
        .I1(Q[0]),
        .I2(\Using_FPGA.Native_0 [1]),
        .O(\Using_FPGA.Native_i_2__0_n_0 ));
endmodule

module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_MUXF6
   (mux_Out,
    Q,
    mux_0123,
    mux_4567);
  output mux_Out;
  input [0:0]Q;
  input mux_0123;
  input mux_4567;

  wire [0:0]Q;
  wire mux_0123;
  wire mux_4567;
  wire mux_Out;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "MUXF6" *) 
  (* XILINX_TRANSFORM_PINMAP = "S:I2" *) 
  LUT3 #(
    .INIT(8'hCA)) 
    \Using_FPGA.Native 
       (.I0(mux_0123),
        .I1(mux_4567),
        .I2(Q),
        .O(mux_Out));
endmodule

(* C_ADDR_SIZE = "32" *) (* C_AVOID_PRIMITIVES = "0" *) (* C_BSCANID = "76547328" *) 
(* C_DATA_SIZE = "32" *) (* C_DBG_MEM_ACCESS = "0" *) (* C_DBG_REG_ACCESS = "0" *) 
(* C_DEBUG_INTERFACE = "0" *) (* C_EXT_TRIG_RESET_VALUE = "20'b11110001001000110100" *) (* C_FAMILY = "artix7" *) 
(* C_INTERCONNECT = "2" *) (* C_JTAG_CHAIN = "2" *) (* C_LMB_PROTOCOL = "0" *) 
(* C_MB_DBG_PORTS = "1" *) (* C_M_AXIS_DATA_WIDTH = "32" *) (* C_M_AXIS_ID_WIDTH = "7" *) 
(* C_M_AXI_ADDR_WIDTH = "32" *) (* C_M_AXI_DATA_WIDTH = "32" *) (* C_M_AXI_THREAD_ID_WIDTH = "1" *) 
(* C_S_AXI_ACLK_FREQ_HZ = "100000000" *) (* C_S_AXI_ADDR_WIDTH = "4" *) (* C_S_AXI_DATA_WIDTH = "32" *) 
(* C_TRACE_ASYNC_RESET = "0" *) (* C_TRACE_CLK_FREQ_HZ = "200000000" *) (* C_TRACE_CLK_OUT_PHASE = "90" *) 
(* C_TRACE_DATA_WIDTH = "32" *) (* C_TRACE_ID = "110" *) (* C_TRACE_OUTPUT = "0" *) 
(* C_TRACE_PROTOCOL = "1" *) (* C_USE_BSCAN = "0" *) (* C_USE_CONFIG_RESET = "0" *) 
(* C_USE_CROSS_TRIGGER = "0" *) (* C_USE_UART = "1" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MDM
   (Config_Reset,
    Scan_Reset_Sel,
    Scan_Reset,
    Scan_En,
    S_AXI_ACLK,
    S_AXI_ARESETN,
    M_AXI_ACLK,
    M_AXI_ARESETN,
    M_AXIS_ACLK,
    M_AXIS_ARESETN,
    Interrupt,
    Ext_BRK,
    Ext_NM_BRK,
    Debug_SYS_Rst,
    Trig_In_0,
    Trig_Ack_In_0,
    Trig_Out_0,
    Trig_Ack_Out_0,
    Trig_In_1,
    Trig_Ack_In_1,
    Trig_Out_1,
    Trig_Ack_Out_1,
    Trig_In_2,
    Trig_Ack_In_2,
    Trig_Out_2,
    Trig_Ack_Out_2,
    Trig_In_3,
    Trig_Ack_In_3,
    Trig_Out_3,
    Trig_Ack_Out_3,
    S_AXI_AWADDR,
    S_AXI_AWVALID,
    S_AXI_AWREADY,
    S_AXI_WDATA,
    S_AXI_WSTRB,
    S_AXI_WVALID,
    S_AXI_WREADY,
    S_AXI_BRESP,
    S_AXI_BVALID,
    S_AXI_BREADY,
    S_AXI_ARADDR,
    S_AXI_ARVALID,
    S_AXI_ARREADY,
    S_AXI_RDATA,
    S_AXI_RRESP,
    S_AXI_RVALID,
    S_AXI_RREADY,
    M_AXI_AWID,
    M_AXI_AWADDR,
    M_AXI_AWLEN,
    M_AXI_AWSIZE,
    M_AXI_AWBURST,
    M_AXI_AWLOCK,
    M_AXI_AWCACHE,
    M_AXI_AWPROT,
    M_AXI_AWQOS,
    M_AXI_AWVALID,
    M_AXI_AWREADY,
    M_AXI_WDATA,
    M_AXI_WSTRB,
    M_AXI_WLAST,
    M_AXI_WVALID,
    M_AXI_WREADY,
    M_AXI_BRESP,
    M_AXI_BID,
    M_AXI_BVALID,
    M_AXI_BREADY,
    M_AXI_ARID,
    M_AXI_ARADDR,
    M_AXI_ARLEN,
    M_AXI_ARSIZE,
    M_AXI_ARBURST,
    M_AXI_ARLOCK,
    M_AXI_ARCACHE,
    M_AXI_ARPROT,
    M_AXI_ARQOS,
    M_AXI_ARVALID,
    M_AXI_ARREADY,
    M_AXI_RID,
    M_AXI_RDATA,
    M_AXI_RRESP,
    M_AXI_RLAST,
    M_AXI_RVALID,
    M_AXI_RREADY,
    LMB_Data_Addr_0,
    LMB_Data_Read_0,
    LMB_Data_Write_0,
    LMB_Addr_Strobe_0,
    LMB_Read_Strobe_0,
    LMB_Write_Strobe_0,
    LMB_Ready_0,
    LMB_Wait_0,
    LMB_CE_0,
    LMB_UE_0,
    LMB_Byte_Enable_0,
    LMB_Data_Addr_1,
    LMB_Data_Read_1,
    LMB_Data_Write_1,
    LMB_Addr_Strobe_1,
    LMB_Read_Strobe_1,
    LMB_Write_Strobe_1,
    LMB_Ready_1,
    LMB_Wait_1,
    LMB_CE_1,
    LMB_UE_1,
    LMB_Byte_Enable_1,
    LMB_Data_Addr_2,
    LMB_Data_Read_2,
    LMB_Data_Write_2,
    LMB_Addr_Strobe_2,
    LMB_Read_Strobe_2,
    LMB_Write_Strobe_2,
    LMB_Ready_2,
    LMB_Wait_2,
    LMB_CE_2,
    LMB_UE_2,
    LMB_Byte_Enable_2,
    LMB_Data_Addr_3,
    LMB_Data_Read_3,
    LMB_Data_Write_3,
    LMB_Addr_Strobe_3,
    LMB_Read_Strobe_3,
    LMB_Write_Strobe_3,
    LMB_Ready_3,
    LMB_Wait_3,
    LMB_CE_3,
    LMB_UE_3,
    LMB_Byte_Enable_3,
    LMB_Data_Addr_4,
    LMB_Data_Read_4,
    LMB_Data_Write_4,
    LMB_Addr_Strobe_4,
    LMB_Read_Strobe_4,
    LMB_Write_Strobe_4,
    LMB_Ready_4,
    LMB_Wait_4,
    LMB_CE_4,
    LMB_UE_4,
    LMB_Byte_Enable_4,
    LMB_Data_Addr_5,
    LMB_Data_Read_5,
    LMB_Data_Write_5,
    LMB_Addr_Strobe_5,
    LMB_Read_Strobe_5,
    LMB_Write_Strobe_5,
    LMB_Ready_5,
    LMB_Wait_5,
    LMB_CE_5,
    LMB_UE_5,
    LMB_Byte_Enable_5,
    LMB_Data_Addr_6,
    LMB_Data_Read_6,
    LMB_Data_Write_6,
    LMB_Addr_Strobe_6,
    LMB_Read_Strobe_6,
    LMB_Write_Strobe_6,
    LMB_Ready_6,
    LMB_Wait_6,
    LMB_CE_6,
    LMB_UE_6,
    LMB_Byte_Enable_6,
    LMB_Data_Addr_7,
    LMB_Data_Read_7,
    LMB_Data_Write_7,
    LMB_Addr_Strobe_7,
    LMB_Read_Strobe_7,
    LMB_Write_Strobe_7,
    LMB_Ready_7,
    LMB_Wait_7,
    LMB_CE_7,
    LMB_UE_7,
    LMB_Byte_Enable_7,
    LMB_Data_Addr_8,
    LMB_Data_Read_8,
    LMB_Data_Write_8,
    LMB_Addr_Strobe_8,
    LMB_Read_Strobe_8,
    LMB_Write_Strobe_8,
    LMB_Ready_8,
    LMB_Wait_8,
    LMB_CE_8,
    LMB_UE_8,
    LMB_Byte_Enable_8,
    LMB_Data_Addr_9,
    LMB_Data_Read_9,
    LMB_Data_Write_9,
    LMB_Addr_Strobe_9,
    LMB_Read_Strobe_9,
    LMB_Write_Strobe_9,
    LMB_Ready_9,
    LMB_Wait_9,
    LMB_CE_9,
    LMB_UE_9,
    LMB_Byte_Enable_9,
    LMB_Data_Addr_10,
    LMB_Data_Read_10,
    LMB_Data_Write_10,
    LMB_Addr_Strobe_10,
    LMB_Read_Strobe_10,
    LMB_Write_Strobe_10,
    LMB_Ready_10,
    LMB_Wait_10,
    LMB_CE_10,
    LMB_UE_10,
    LMB_Byte_Enable_10,
    LMB_Data_Addr_11,
    LMB_Data_Read_11,
    LMB_Data_Write_11,
    LMB_Addr_Strobe_11,
    LMB_Read_Strobe_11,
    LMB_Write_Strobe_11,
    LMB_Ready_11,
    LMB_Wait_11,
    LMB_CE_11,
    LMB_UE_11,
    LMB_Byte_Enable_11,
    LMB_Data_Addr_12,
    LMB_Data_Read_12,
    LMB_Data_Write_12,
    LMB_Addr_Strobe_12,
    LMB_Read_Strobe_12,
    LMB_Write_Strobe_12,
    LMB_Ready_12,
    LMB_Wait_12,
    LMB_CE_12,
    LMB_UE_12,
    LMB_Byte_Enable_12,
    LMB_Data_Addr_13,
    LMB_Data_Read_13,
    LMB_Data_Write_13,
    LMB_Addr_Strobe_13,
    LMB_Read_Strobe_13,
    LMB_Write_Strobe_13,
    LMB_Ready_13,
    LMB_Wait_13,
    LMB_CE_13,
    LMB_UE_13,
    LMB_Byte_Enable_13,
    LMB_Data_Addr_14,
    LMB_Data_Read_14,
    LMB_Data_Write_14,
    LMB_Addr_Strobe_14,
    LMB_Read_Strobe_14,
    LMB_Write_Strobe_14,
    LMB_Ready_14,
    LMB_Wait_14,
    LMB_CE_14,
    LMB_UE_14,
    LMB_Byte_Enable_14,
    LMB_Data_Addr_15,
    LMB_Data_Read_15,
    LMB_Data_Write_15,
    LMB_Addr_Strobe_15,
    LMB_Read_Strobe_15,
    LMB_Write_Strobe_15,
    LMB_Ready_15,
    LMB_Wait_15,
    LMB_CE_15,
    LMB_UE_15,
    LMB_Byte_Enable_15,
    LMB_Data_Addr_16,
    LMB_Data_Read_16,
    LMB_Data_Write_16,
    LMB_Addr_Strobe_16,
    LMB_Read_Strobe_16,
    LMB_Write_Strobe_16,
    LMB_Ready_16,
    LMB_Wait_16,
    LMB_CE_16,
    LMB_UE_16,
    LMB_Byte_Enable_16,
    LMB_Data_Addr_17,
    LMB_Data_Read_17,
    LMB_Data_Write_17,
    LMB_Addr_Strobe_17,
    LMB_Read_Strobe_17,
    LMB_Write_Strobe_17,
    LMB_Ready_17,
    LMB_Wait_17,
    LMB_CE_17,
    LMB_UE_17,
    LMB_Byte_Enable_17,
    LMB_Data_Addr_18,
    LMB_Data_Read_18,
    LMB_Data_Write_18,
    LMB_Addr_Strobe_18,
    LMB_Read_Strobe_18,
    LMB_Write_Strobe_18,
    LMB_Ready_18,
    LMB_Wait_18,
    LMB_CE_18,
    LMB_UE_18,
    LMB_Byte_Enable_18,
    LMB_Data_Addr_19,
    LMB_Data_Read_19,
    LMB_Data_Write_19,
    LMB_Addr_Strobe_19,
    LMB_Read_Strobe_19,
    LMB_Write_Strobe_19,
    LMB_Ready_19,
    LMB_Wait_19,
    LMB_CE_19,
    LMB_UE_19,
    LMB_Byte_Enable_19,
    LMB_Data_Addr_20,
    LMB_Data_Read_20,
    LMB_Data_Write_20,
    LMB_Addr_Strobe_20,
    LMB_Read_Strobe_20,
    LMB_Write_Strobe_20,
    LMB_Ready_20,
    LMB_Wait_20,
    LMB_CE_20,
    LMB_UE_20,
    LMB_Byte_Enable_20,
    LMB_Data_Addr_21,
    LMB_Data_Read_21,
    LMB_Data_Write_21,
    LMB_Addr_Strobe_21,
    LMB_Read_Strobe_21,
    LMB_Write_Strobe_21,
    LMB_Ready_21,
    LMB_Wait_21,
    LMB_CE_21,
    LMB_UE_21,
    LMB_Byte_Enable_21,
    LMB_Data_Addr_22,
    LMB_Data_Read_22,
    LMB_Data_Write_22,
    LMB_Addr_Strobe_22,
    LMB_Read_Strobe_22,
    LMB_Write_Strobe_22,
    LMB_Ready_22,
    LMB_Wait_22,
    LMB_CE_22,
    LMB_UE_22,
    LMB_Byte_Enable_22,
    LMB_Data_Addr_23,
    LMB_Data_Read_23,
    LMB_Data_Write_23,
    LMB_Addr_Strobe_23,
    LMB_Read_Strobe_23,
    LMB_Write_Strobe_23,
    LMB_Ready_23,
    LMB_Wait_23,
    LMB_CE_23,
    LMB_UE_23,
    LMB_Byte_Enable_23,
    LMB_Data_Addr_24,
    LMB_Data_Read_24,
    LMB_Data_Write_24,
    LMB_Addr_Strobe_24,
    LMB_Read_Strobe_24,
    LMB_Write_Strobe_24,
    LMB_Ready_24,
    LMB_Wait_24,
    LMB_CE_24,
    LMB_UE_24,
    LMB_Byte_Enable_24,
    LMB_Data_Addr_25,
    LMB_Data_Read_25,
    LMB_Data_Write_25,
    LMB_Addr_Strobe_25,
    LMB_Read_Strobe_25,
    LMB_Write_Strobe_25,
    LMB_Ready_25,
    LMB_Wait_25,
    LMB_CE_25,
    LMB_UE_25,
    LMB_Byte_Enable_25,
    LMB_Data_Addr_26,
    LMB_Data_Read_26,
    LMB_Data_Write_26,
    LMB_Addr_Strobe_26,
    LMB_Read_Strobe_26,
    LMB_Write_Strobe_26,
    LMB_Ready_26,
    LMB_Wait_26,
    LMB_CE_26,
    LMB_UE_26,
    LMB_Byte_Enable_26,
    LMB_Data_Addr_27,
    LMB_Data_Read_27,
    LMB_Data_Write_27,
    LMB_Addr_Strobe_27,
    LMB_Read_Strobe_27,
    LMB_Write_Strobe_27,
    LMB_Ready_27,
    LMB_Wait_27,
    LMB_CE_27,
    LMB_UE_27,
    LMB_Byte_Enable_27,
    LMB_Data_Addr_28,
    LMB_Data_Read_28,
    LMB_Data_Write_28,
    LMB_Addr_Strobe_28,
    LMB_Read_Strobe_28,
    LMB_Write_Strobe_28,
    LMB_Ready_28,
    LMB_Wait_28,
    LMB_CE_28,
    LMB_UE_28,
    LMB_Byte_Enable_28,
    LMB_Data_Addr_29,
    LMB_Data_Read_29,
    LMB_Data_Write_29,
    LMB_Addr_Strobe_29,
    LMB_Read_Strobe_29,
    LMB_Write_Strobe_29,
    LMB_Ready_29,
    LMB_Wait_29,
    LMB_CE_29,
    LMB_UE_29,
    LMB_Byte_Enable_29,
    LMB_Data_Addr_30,
    LMB_Data_Read_30,
    LMB_Data_Write_30,
    LMB_Addr_Strobe_30,
    LMB_Read_Strobe_30,
    LMB_Write_Strobe_30,
    LMB_Ready_30,
    LMB_Wait_30,
    LMB_CE_30,
    LMB_UE_30,
    LMB_Byte_Enable_30,
    LMB_Data_Addr_31,
    LMB_Data_Read_31,
    LMB_Data_Write_31,
    LMB_Addr_Strobe_31,
    LMB_Read_Strobe_31,
    LMB_Write_Strobe_31,
    LMB_Ready_31,
    LMB_Wait_31,
    LMB_CE_31,
    LMB_UE_31,
    LMB_Byte_Enable_31,
    M_AXIS_TDATA,
    M_AXIS_TID,
    M_AXIS_TREADY,
    M_AXIS_TVALID,
    TRACE_CLK_OUT,
    TRACE_CLK,
    TRACE_CTL,
    TRACE_DATA,
    Dbg_Disable_0,
    Dbg_Clk_0,
    Dbg_TDI_0,
    Dbg_TDO_0,
    Dbg_Reg_En_0,
    Dbg_Capture_0,
    Dbg_Shift_0,
    Dbg_Update_0,
    Dbg_Rst_0,
    Dbg_Trig_In_0,
    Dbg_Trig_Ack_In_0,
    Dbg_Trig_Out_0,
    Dbg_Trig_Ack_Out_0,
    Dbg_TrClk_0,
    Dbg_TrData_0,
    Dbg_TrReady_0,
    Dbg_TrValid_0,
    Dbg_AWADDR_0,
    Dbg_AWVALID_0,
    Dbg_AWREADY_0,
    Dbg_WDATA_0,
    Dbg_WVALID_0,
    Dbg_WREADY_0,
    Dbg_BRESP_0,
    Dbg_BVALID_0,
    Dbg_BREADY_0,
    Dbg_ARADDR_0,
    Dbg_ARVALID_0,
    Dbg_ARREADY_0,
    Dbg_RDATA_0,
    Dbg_RRESP_0,
    Dbg_RVALID_0,
    Dbg_RREADY_0,
    Dbg_Disable_1,
    Dbg_Clk_1,
    Dbg_TDI_1,
    Dbg_TDO_1,
    Dbg_Reg_En_1,
    Dbg_Capture_1,
    Dbg_Shift_1,
    Dbg_Update_1,
    Dbg_Rst_1,
    Dbg_Trig_In_1,
    Dbg_Trig_Ack_In_1,
    Dbg_Trig_Out_1,
    Dbg_Trig_Ack_Out_1,
    Dbg_TrClk_1,
    Dbg_TrData_1,
    Dbg_TrReady_1,
    Dbg_TrValid_1,
    Dbg_AWADDR_1,
    Dbg_AWVALID_1,
    Dbg_AWREADY_1,
    Dbg_WDATA_1,
    Dbg_WVALID_1,
    Dbg_WREADY_1,
    Dbg_BRESP_1,
    Dbg_BVALID_1,
    Dbg_BREADY_1,
    Dbg_ARADDR_1,
    Dbg_ARVALID_1,
    Dbg_ARREADY_1,
    Dbg_RDATA_1,
    Dbg_RRESP_1,
    Dbg_RVALID_1,
    Dbg_RREADY_1,
    Dbg_Disable_2,
    Dbg_Clk_2,
    Dbg_TDI_2,
    Dbg_TDO_2,
    Dbg_Reg_En_2,
    Dbg_Capture_2,
    Dbg_Shift_2,
    Dbg_Update_2,
    Dbg_Rst_2,
    Dbg_Trig_In_2,
    Dbg_Trig_Ack_In_2,
    Dbg_Trig_Out_2,
    Dbg_Trig_Ack_Out_2,
    Dbg_TrClk_2,
    Dbg_TrData_2,
    Dbg_TrReady_2,
    Dbg_TrValid_2,
    Dbg_AWADDR_2,
    Dbg_AWVALID_2,
    Dbg_AWREADY_2,
    Dbg_WDATA_2,
    Dbg_WVALID_2,
    Dbg_WREADY_2,
    Dbg_BRESP_2,
    Dbg_BVALID_2,
    Dbg_BREADY_2,
    Dbg_ARADDR_2,
    Dbg_ARVALID_2,
    Dbg_ARREADY_2,
    Dbg_RDATA_2,
    Dbg_RRESP_2,
    Dbg_RVALID_2,
    Dbg_RREADY_2,
    Dbg_Disable_3,
    Dbg_Clk_3,
    Dbg_TDI_3,
    Dbg_TDO_3,
    Dbg_Reg_En_3,
    Dbg_Capture_3,
    Dbg_Shift_3,
    Dbg_Update_3,
    Dbg_Rst_3,
    Dbg_Trig_In_3,
    Dbg_Trig_Ack_In_3,
    Dbg_Trig_Out_3,
    Dbg_Trig_Ack_Out_3,
    Dbg_TrClk_3,
    Dbg_TrData_3,
    Dbg_TrReady_3,
    Dbg_TrValid_3,
    Dbg_AWADDR_3,
    Dbg_AWVALID_3,
    Dbg_AWREADY_3,
    Dbg_WDATA_3,
    Dbg_WVALID_3,
    Dbg_WREADY_3,
    Dbg_BRESP_3,
    Dbg_BVALID_3,
    Dbg_BREADY_3,
    Dbg_ARADDR_3,
    Dbg_ARVALID_3,
    Dbg_ARREADY_3,
    Dbg_RDATA_3,
    Dbg_RRESP_3,
    Dbg_RVALID_3,
    Dbg_RREADY_3,
    Dbg_Disable_4,
    Dbg_Clk_4,
    Dbg_TDI_4,
    Dbg_TDO_4,
    Dbg_Reg_En_4,
    Dbg_Capture_4,
    Dbg_Shift_4,
    Dbg_Update_4,
    Dbg_Rst_4,
    Dbg_Trig_In_4,
    Dbg_Trig_Ack_In_4,
    Dbg_Trig_Out_4,
    Dbg_Trig_Ack_Out_4,
    Dbg_TrClk_4,
    Dbg_TrData_4,
    Dbg_TrReady_4,
    Dbg_TrValid_4,
    Dbg_AWADDR_4,
    Dbg_AWVALID_4,
    Dbg_AWREADY_4,
    Dbg_WDATA_4,
    Dbg_WVALID_4,
    Dbg_WREADY_4,
    Dbg_BRESP_4,
    Dbg_BVALID_4,
    Dbg_BREADY_4,
    Dbg_ARADDR_4,
    Dbg_ARVALID_4,
    Dbg_ARREADY_4,
    Dbg_RDATA_4,
    Dbg_RRESP_4,
    Dbg_RVALID_4,
    Dbg_RREADY_4,
    Dbg_Disable_5,
    Dbg_Clk_5,
    Dbg_TDI_5,
    Dbg_TDO_5,
    Dbg_Reg_En_5,
    Dbg_Capture_5,
    Dbg_Shift_5,
    Dbg_Update_5,
    Dbg_Rst_5,
    Dbg_Trig_In_5,
    Dbg_Trig_Ack_In_5,
    Dbg_Trig_Out_5,
    Dbg_Trig_Ack_Out_5,
    Dbg_TrClk_5,
    Dbg_TrData_5,
    Dbg_TrReady_5,
    Dbg_TrValid_5,
    Dbg_AWADDR_5,
    Dbg_AWVALID_5,
    Dbg_AWREADY_5,
    Dbg_WDATA_5,
    Dbg_WVALID_5,
    Dbg_WREADY_5,
    Dbg_BRESP_5,
    Dbg_BVALID_5,
    Dbg_BREADY_5,
    Dbg_ARADDR_5,
    Dbg_ARVALID_5,
    Dbg_ARREADY_5,
    Dbg_RDATA_5,
    Dbg_RRESP_5,
    Dbg_RVALID_5,
    Dbg_RREADY_5,
    Dbg_Disable_6,
    Dbg_Clk_6,
    Dbg_TDI_6,
    Dbg_TDO_6,
    Dbg_Reg_En_6,
    Dbg_Capture_6,
    Dbg_Shift_6,
    Dbg_Update_6,
    Dbg_Rst_6,
    Dbg_Trig_In_6,
    Dbg_Trig_Ack_In_6,
    Dbg_Trig_Out_6,
    Dbg_Trig_Ack_Out_6,
    Dbg_TrClk_6,
    Dbg_TrData_6,
    Dbg_TrReady_6,
    Dbg_TrValid_6,
    Dbg_AWADDR_6,
    Dbg_AWVALID_6,
    Dbg_AWREADY_6,
    Dbg_WDATA_6,
    Dbg_WVALID_6,
    Dbg_WREADY_6,
    Dbg_BRESP_6,
    Dbg_BVALID_6,
    Dbg_BREADY_6,
    Dbg_ARADDR_6,
    Dbg_ARVALID_6,
    Dbg_ARREADY_6,
    Dbg_RDATA_6,
    Dbg_RRESP_6,
    Dbg_RVALID_6,
    Dbg_RREADY_6,
    Dbg_Disable_7,
    Dbg_Clk_7,
    Dbg_TDI_7,
    Dbg_TDO_7,
    Dbg_Reg_En_7,
    Dbg_Capture_7,
    Dbg_Shift_7,
    Dbg_Update_7,
    Dbg_Rst_7,
    Dbg_Trig_In_7,
    Dbg_Trig_Ack_In_7,
    Dbg_Trig_Out_7,
    Dbg_Trig_Ack_Out_7,
    Dbg_TrClk_7,
    Dbg_TrData_7,
    Dbg_TrReady_7,
    Dbg_TrValid_7,
    Dbg_AWADDR_7,
    Dbg_AWVALID_7,
    Dbg_AWREADY_7,
    Dbg_WDATA_7,
    Dbg_WVALID_7,
    Dbg_WREADY_7,
    Dbg_BRESP_7,
    Dbg_BVALID_7,
    Dbg_BREADY_7,
    Dbg_ARADDR_7,
    Dbg_ARVALID_7,
    Dbg_ARREADY_7,
    Dbg_RDATA_7,
    Dbg_RRESP_7,
    Dbg_RVALID_7,
    Dbg_RREADY_7,
    Dbg_Disable_8,
    Dbg_Clk_8,
    Dbg_TDI_8,
    Dbg_TDO_8,
    Dbg_Reg_En_8,
    Dbg_Capture_8,
    Dbg_Shift_8,
    Dbg_Update_8,
    Dbg_Rst_8,
    Dbg_Trig_In_8,
    Dbg_Trig_Ack_In_8,
    Dbg_Trig_Out_8,
    Dbg_Trig_Ack_Out_8,
    Dbg_TrClk_8,
    Dbg_TrData_8,
    Dbg_TrReady_8,
    Dbg_TrValid_8,
    Dbg_AWADDR_8,
    Dbg_AWVALID_8,
    Dbg_AWREADY_8,
    Dbg_WDATA_8,
    Dbg_WVALID_8,
    Dbg_WREADY_8,
    Dbg_BRESP_8,
    Dbg_BVALID_8,
    Dbg_BREADY_8,
    Dbg_ARADDR_8,
    Dbg_ARVALID_8,
    Dbg_ARREADY_8,
    Dbg_RDATA_8,
    Dbg_RRESP_8,
    Dbg_RVALID_8,
    Dbg_RREADY_8,
    Dbg_Disable_9,
    Dbg_Clk_9,
    Dbg_TDI_9,
    Dbg_TDO_9,
    Dbg_Reg_En_9,
    Dbg_Capture_9,
    Dbg_Shift_9,
    Dbg_Update_9,
    Dbg_Rst_9,
    Dbg_Trig_In_9,
    Dbg_Trig_Ack_In_9,
    Dbg_Trig_Out_9,
    Dbg_Trig_Ack_Out_9,
    Dbg_TrClk_9,
    Dbg_TrData_9,
    Dbg_TrReady_9,
    Dbg_TrValid_9,
    Dbg_AWADDR_9,
    Dbg_AWVALID_9,
    Dbg_AWREADY_9,
    Dbg_WDATA_9,
    Dbg_WVALID_9,
    Dbg_WREADY_9,
    Dbg_BRESP_9,
    Dbg_BVALID_9,
    Dbg_BREADY_9,
    Dbg_ARADDR_9,
    Dbg_ARVALID_9,
    Dbg_ARREADY_9,
    Dbg_RDATA_9,
    Dbg_RRESP_9,
    Dbg_RVALID_9,
    Dbg_RREADY_9,
    Dbg_Disable_10,
    Dbg_Clk_10,
    Dbg_TDI_10,
    Dbg_TDO_10,
    Dbg_Reg_En_10,
    Dbg_Capture_10,
    Dbg_Shift_10,
    Dbg_Update_10,
    Dbg_Rst_10,
    Dbg_Trig_In_10,
    Dbg_Trig_Ack_In_10,
    Dbg_Trig_Out_10,
    Dbg_Trig_Ack_Out_10,
    Dbg_TrClk_10,
    Dbg_TrData_10,
    Dbg_TrReady_10,
    Dbg_TrValid_10,
    Dbg_AWADDR_10,
    Dbg_AWVALID_10,
    Dbg_AWREADY_10,
    Dbg_WDATA_10,
    Dbg_WVALID_10,
    Dbg_WREADY_10,
    Dbg_BRESP_10,
    Dbg_BVALID_10,
    Dbg_BREADY_10,
    Dbg_ARADDR_10,
    Dbg_ARVALID_10,
    Dbg_ARREADY_10,
    Dbg_RDATA_10,
    Dbg_RRESP_10,
    Dbg_RVALID_10,
    Dbg_RREADY_10,
    Dbg_Disable_11,
    Dbg_Clk_11,
    Dbg_TDI_11,
    Dbg_TDO_11,
    Dbg_Reg_En_11,
    Dbg_Capture_11,
    Dbg_Shift_11,
    Dbg_Update_11,
    Dbg_Rst_11,
    Dbg_Trig_In_11,
    Dbg_Trig_Ack_In_11,
    Dbg_Trig_Out_11,
    Dbg_Trig_Ack_Out_11,
    Dbg_TrClk_11,
    Dbg_TrData_11,
    Dbg_TrReady_11,
    Dbg_TrValid_11,
    Dbg_AWADDR_11,
    Dbg_AWVALID_11,
    Dbg_AWREADY_11,
    Dbg_WDATA_11,
    Dbg_WVALID_11,
    Dbg_WREADY_11,
    Dbg_BRESP_11,
    Dbg_BVALID_11,
    Dbg_BREADY_11,
    Dbg_ARADDR_11,
    Dbg_ARVALID_11,
    Dbg_ARREADY_11,
    Dbg_RDATA_11,
    Dbg_RRESP_11,
    Dbg_RVALID_11,
    Dbg_RREADY_11,
    Dbg_Disable_12,
    Dbg_Clk_12,
    Dbg_TDI_12,
    Dbg_TDO_12,
    Dbg_Reg_En_12,
    Dbg_Capture_12,
    Dbg_Shift_12,
    Dbg_Update_12,
    Dbg_Rst_12,
    Dbg_Trig_In_12,
    Dbg_Trig_Ack_In_12,
    Dbg_Trig_Out_12,
    Dbg_Trig_Ack_Out_12,
    Dbg_TrClk_12,
    Dbg_TrData_12,
    Dbg_TrReady_12,
    Dbg_TrValid_12,
    Dbg_AWADDR_12,
    Dbg_AWVALID_12,
    Dbg_AWREADY_12,
    Dbg_WDATA_12,
    Dbg_WVALID_12,
    Dbg_WREADY_12,
    Dbg_BRESP_12,
    Dbg_BVALID_12,
    Dbg_BREADY_12,
    Dbg_ARADDR_12,
    Dbg_ARVALID_12,
    Dbg_ARREADY_12,
    Dbg_RDATA_12,
    Dbg_RRESP_12,
    Dbg_RVALID_12,
    Dbg_RREADY_12,
    Dbg_Disable_13,
    Dbg_Clk_13,
    Dbg_TDI_13,
    Dbg_TDO_13,
    Dbg_Reg_En_13,
    Dbg_Capture_13,
    Dbg_Shift_13,
    Dbg_Update_13,
    Dbg_Rst_13,
    Dbg_Trig_In_13,
    Dbg_Trig_Ack_In_13,
    Dbg_Trig_Out_13,
    Dbg_Trig_Ack_Out_13,
    Dbg_TrClk_13,
    Dbg_TrData_13,
    Dbg_TrReady_13,
    Dbg_TrValid_13,
    Dbg_AWADDR_13,
    Dbg_AWVALID_13,
    Dbg_AWREADY_13,
    Dbg_WDATA_13,
    Dbg_WVALID_13,
    Dbg_WREADY_13,
    Dbg_BRESP_13,
    Dbg_BVALID_13,
    Dbg_BREADY_13,
    Dbg_ARADDR_13,
    Dbg_ARVALID_13,
    Dbg_ARREADY_13,
    Dbg_RDATA_13,
    Dbg_RRESP_13,
    Dbg_RVALID_13,
    Dbg_RREADY_13,
    Dbg_Disable_14,
    Dbg_Clk_14,
    Dbg_TDI_14,
    Dbg_TDO_14,
    Dbg_Reg_En_14,
    Dbg_Capture_14,
    Dbg_Shift_14,
    Dbg_Update_14,
    Dbg_Rst_14,
    Dbg_Trig_In_14,
    Dbg_Trig_Ack_In_14,
    Dbg_Trig_Out_14,
    Dbg_Trig_Ack_Out_14,
    Dbg_TrClk_14,
    Dbg_TrData_14,
    Dbg_TrReady_14,
    Dbg_TrValid_14,
    Dbg_AWADDR_14,
    Dbg_AWVALID_14,
    Dbg_AWREADY_14,
    Dbg_WDATA_14,
    Dbg_WVALID_14,
    Dbg_WREADY_14,
    Dbg_BRESP_14,
    Dbg_BVALID_14,
    Dbg_BREADY_14,
    Dbg_ARADDR_14,
    Dbg_ARVALID_14,
    Dbg_ARREADY_14,
    Dbg_RDATA_14,
    Dbg_RRESP_14,
    Dbg_RVALID_14,
    Dbg_RREADY_14,
    Dbg_Disable_15,
    Dbg_Clk_15,
    Dbg_TDI_15,
    Dbg_TDO_15,
    Dbg_Reg_En_15,
    Dbg_Capture_15,
    Dbg_Shift_15,
    Dbg_Update_15,
    Dbg_Rst_15,
    Dbg_Trig_In_15,
    Dbg_Trig_Ack_In_15,
    Dbg_Trig_Out_15,
    Dbg_Trig_Ack_Out_15,
    Dbg_TrClk_15,
    Dbg_TrData_15,
    Dbg_TrReady_15,
    Dbg_TrValid_15,
    Dbg_AWADDR_15,
    Dbg_AWVALID_15,
    Dbg_AWREADY_15,
    Dbg_WDATA_15,
    Dbg_WVALID_15,
    Dbg_WREADY_15,
    Dbg_BRESP_15,
    Dbg_BVALID_15,
    Dbg_BREADY_15,
    Dbg_ARADDR_15,
    Dbg_ARVALID_15,
    Dbg_ARREADY_15,
    Dbg_RDATA_15,
    Dbg_RRESP_15,
    Dbg_RVALID_15,
    Dbg_RREADY_15,
    Dbg_Disable_16,
    Dbg_Clk_16,
    Dbg_TDI_16,
    Dbg_TDO_16,
    Dbg_Reg_En_16,
    Dbg_Capture_16,
    Dbg_Shift_16,
    Dbg_Update_16,
    Dbg_Rst_16,
    Dbg_Trig_In_16,
    Dbg_Trig_Ack_In_16,
    Dbg_Trig_Out_16,
    Dbg_Trig_Ack_Out_16,
    Dbg_TrClk_16,
    Dbg_TrData_16,
    Dbg_TrReady_16,
    Dbg_TrValid_16,
    Dbg_AWADDR_16,
    Dbg_AWVALID_16,
    Dbg_AWREADY_16,
    Dbg_WDATA_16,
    Dbg_WVALID_16,
    Dbg_WREADY_16,
    Dbg_BRESP_16,
    Dbg_BVALID_16,
    Dbg_BREADY_16,
    Dbg_ARADDR_16,
    Dbg_ARVALID_16,
    Dbg_ARREADY_16,
    Dbg_RDATA_16,
    Dbg_RRESP_16,
    Dbg_RVALID_16,
    Dbg_RREADY_16,
    Dbg_Disable_17,
    Dbg_Clk_17,
    Dbg_TDI_17,
    Dbg_TDO_17,
    Dbg_Reg_En_17,
    Dbg_Capture_17,
    Dbg_Shift_17,
    Dbg_Update_17,
    Dbg_Rst_17,
    Dbg_Trig_In_17,
    Dbg_Trig_Ack_In_17,
    Dbg_Trig_Out_17,
    Dbg_Trig_Ack_Out_17,
    Dbg_TrClk_17,
    Dbg_TrData_17,
    Dbg_TrReady_17,
    Dbg_TrValid_17,
    Dbg_AWADDR_17,
    Dbg_AWVALID_17,
    Dbg_AWREADY_17,
    Dbg_WDATA_17,
    Dbg_WVALID_17,
    Dbg_WREADY_17,
    Dbg_BRESP_17,
    Dbg_BVALID_17,
    Dbg_BREADY_17,
    Dbg_ARADDR_17,
    Dbg_ARVALID_17,
    Dbg_ARREADY_17,
    Dbg_RDATA_17,
    Dbg_RRESP_17,
    Dbg_RVALID_17,
    Dbg_RREADY_17,
    Dbg_Disable_18,
    Dbg_Clk_18,
    Dbg_TDI_18,
    Dbg_TDO_18,
    Dbg_Reg_En_18,
    Dbg_Capture_18,
    Dbg_Shift_18,
    Dbg_Update_18,
    Dbg_Rst_18,
    Dbg_Trig_In_18,
    Dbg_Trig_Ack_In_18,
    Dbg_Trig_Out_18,
    Dbg_Trig_Ack_Out_18,
    Dbg_TrClk_18,
    Dbg_TrData_18,
    Dbg_TrReady_18,
    Dbg_TrValid_18,
    Dbg_AWADDR_18,
    Dbg_AWVALID_18,
    Dbg_AWREADY_18,
    Dbg_WDATA_18,
    Dbg_WVALID_18,
    Dbg_WREADY_18,
    Dbg_BRESP_18,
    Dbg_BVALID_18,
    Dbg_BREADY_18,
    Dbg_ARADDR_18,
    Dbg_ARVALID_18,
    Dbg_ARREADY_18,
    Dbg_RDATA_18,
    Dbg_RRESP_18,
    Dbg_RVALID_18,
    Dbg_RREADY_18,
    Dbg_Disable_19,
    Dbg_Clk_19,
    Dbg_TDI_19,
    Dbg_TDO_19,
    Dbg_Reg_En_19,
    Dbg_Capture_19,
    Dbg_Shift_19,
    Dbg_Update_19,
    Dbg_Rst_19,
    Dbg_Trig_In_19,
    Dbg_Trig_Ack_In_19,
    Dbg_Trig_Out_19,
    Dbg_Trig_Ack_Out_19,
    Dbg_TrClk_19,
    Dbg_TrData_19,
    Dbg_TrReady_19,
    Dbg_TrValid_19,
    Dbg_AWADDR_19,
    Dbg_AWVALID_19,
    Dbg_AWREADY_19,
    Dbg_WDATA_19,
    Dbg_WVALID_19,
    Dbg_WREADY_19,
    Dbg_BRESP_19,
    Dbg_BVALID_19,
    Dbg_BREADY_19,
    Dbg_ARADDR_19,
    Dbg_ARVALID_19,
    Dbg_ARREADY_19,
    Dbg_RDATA_19,
    Dbg_RRESP_19,
    Dbg_RVALID_19,
    Dbg_RREADY_19,
    Dbg_Disable_20,
    Dbg_Clk_20,
    Dbg_TDI_20,
    Dbg_TDO_20,
    Dbg_Reg_En_20,
    Dbg_Capture_20,
    Dbg_Shift_20,
    Dbg_Update_20,
    Dbg_Rst_20,
    Dbg_Trig_In_20,
    Dbg_Trig_Ack_In_20,
    Dbg_Trig_Out_20,
    Dbg_Trig_Ack_Out_20,
    Dbg_TrClk_20,
    Dbg_TrData_20,
    Dbg_TrReady_20,
    Dbg_TrValid_20,
    Dbg_AWADDR_20,
    Dbg_AWVALID_20,
    Dbg_AWREADY_20,
    Dbg_WDATA_20,
    Dbg_WVALID_20,
    Dbg_WREADY_20,
    Dbg_BRESP_20,
    Dbg_BVALID_20,
    Dbg_BREADY_20,
    Dbg_ARADDR_20,
    Dbg_ARVALID_20,
    Dbg_ARREADY_20,
    Dbg_RDATA_20,
    Dbg_RRESP_20,
    Dbg_RVALID_20,
    Dbg_RREADY_20,
    Dbg_Disable_21,
    Dbg_Clk_21,
    Dbg_TDI_21,
    Dbg_TDO_21,
    Dbg_Reg_En_21,
    Dbg_Capture_21,
    Dbg_Shift_21,
    Dbg_Update_21,
    Dbg_Rst_21,
    Dbg_Trig_In_21,
    Dbg_Trig_Ack_In_21,
    Dbg_Trig_Out_21,
    Dbg_Trig_Ack_Out_21,
    Dbg_TrClk_21,
    Dbg_TrData_21,
    Dbg_TrReady_21,
    Dbg_TrValid_21,
    Dbg_AWADDR_21,
    Dbg_AWVALID_21,
    Dbg_AWREADY_21,
    Dbg_WDATA_21,
    Dbg_WVALID_21,
    Dbg_WREADY_21,
    Dbg_BRESP_21,
    Dbg_BVALID_21,
    Dbg_BREADY_21,
    Dbg_ARADDR_21,
    Dbg_ARVALID_21,
    Dbg_ARREADY_21,
    Dbg_RDATA_21,
    Dbg_RRESP_21,
    Dbg_RVALID_21,
    Dbg_RREADY_21,
    Dbg_Disable_22,
    Dbg_Clk_22,
    Dbg_TDI_22,
    Dbg_TDO_22,
    Dbg_Reg_En_22,
    Dbg_Capture_22,
    Dbg_Shift_22,
    Dbg_Update_22,
    Dbg_Rst_22,
    Dbg_Trig_In_22,
    Dbg_Trig_Ack_In_22,
    Dbg_Trig_Out_22,
    Dbg_Trig_Ack_Out_22,
    Dbg_TrClk_22,
    Dbg_TrData_22,
    Dbg_TrReady_22,
    Dbg_TrValid_22,
    Dbg_AWADDR_22,
    Dbg_AWVALID_22,
    Dbg_AWREADY_22,
    Dbg_WDATA_22,
    Dbg_WVALID_22,
    Dbg_WREADY_22,
    Dbg_BRESP_22,
    Dbg_BVALID_22,
    Dbg_BREADY_22,
    Dbg_ARADDR_22,
    Dbg_ARVALID_22,
    Dbg_ARREADY_22,
    Dbg_RDATA_22,
    Dbg_RRESP_22,
    Dbg_RVALID_22,
    Dbg_RREADY_22,
    Dbg_Disable_23,
    Dbg_Clk_23,
    Dbg_TDI_23,
    Dbg_TDO_23,
    Dbg_Reg_En_23,
    Dbg_Capture_23,
    Dbg_Shift_23,
    Dbg_Update_23,
    Dbg_Rst_23,
    Dbg_Trig_In_23,
    Dbg_Trig_Ack_In_23,
    Dbg_Trig_Out_23,
    Dbg_Trig_Ack_Out_23,
    Dbg_TrClk_23,
    Dbg_TrData_23,
    Dbg_TrReady_23,
    Dbg_TrValid_23,
    Dbg_AWADDR_23,
    Dbg_AWVALID_23,
    Dbg_AWREADY_23,
    Dbg_WDATA_23,
    Dbg_WVALID_23,
    Dbg_WREADY_23,
    Dbg_BRESP_23,
    Dbg_BVALID_23,
    Dbg_BREADY_23,
    Dbg_ARADDR_23,
    Dbg_ARVALID_23,
    Dbg_ARREADY_23,
    Dbg_RDATA_23,
    Dbg_RRESP_23,
    Dbg_RVALID_23,
    Dbg_RREADY_23,
    Dbg_Disable_24,
    Dbg_Clk_24,
    Dbg_TDI_24,
    Dbg_TDO_24,
    Dbg_Reg_En_24,
    Dbg_Capture_24,
    Dbg_Shift_24,
    Dbg_Update_24,
    Dbg_Rst_24,
    Dbg_Trig_In_24,
    Dbg_Trig_Ack_In_24,
    Dbg_Trig_Out_24,
    Dbg_Trig_Ack_Out_24,
    Dbg_TrClk_24,
    Dbg_TrData_24,
    Dbg_TrReady_24,
    Dbg_TrValid_24,
    Dbg_AWADDR_24,
    Dbg_AWVALID_24,
    Dbg_AWREADY_24,
    Dbg_WDATA_24,
    Dbg_WVALID_24,
    Dbg_WREADY_24,
    Dbg_BRESP_24,
    Dbg_BVALID_24,
    Dbg_BREADY_24,
    Dbg_ARADDR_24,
    Dbg_ARVALID_24,
    Dbg_ARREADY_24,
    Dbg_RDATA_24,
    Dbg_RRESP_24,
    Dbg_RVALID_24,
    Dbg_RREADY_24,
    Dbg_Disable_25,
    Dbg_Clk_25,
    Dbg_TDI_25,
    Dbg_TDO_25,
    Dbg_Reg_En_25,
    Dbg_Capture_25,
    Dbg_Shift_25,
    Dbg_Update_25,
    Dbg_Rst_25,
    Dbg_Trig_In_25,
    Dbg_Trig_Ack_In_25,
    Dbg_Trig_Out_25,
    Dbg_Trig_Ack_Out_25,
    Dbg_TrClk_25,
    Dbg_TrData_25,
    Dbg_TrReady_25,
    Dbg_TrValid_25,
    Dbg_AWADDR_25,
    Dbg_AWVALID_25,
    Dbg_AWREADY_25,
    Dbg_WDATA_25,
    Dbg_WVALID_25,
    Dbg_WREADY_25,
    Dbg_BRESP_25,
    Dbg_BVALID_25,
    Dbg_BREADY_25,
    Dbg_ARADDR_25,
    Dbg_ARVALID_25,
    Dbg_ARREADY_25,
    Dbg_RDATA_25,
    Dbg_RRESP_25,
    Dbg_RVALID_25,
    Dbg_RREADY_25,
    Dbg_Disable_26,
    Dbg_Clk_26,
    Dbg_TDI_26,
    Dbg_TDO_26,
    Dbg_Reg_En_26,
    Dbg_Capture_26,
    Dbg_Shift_26,
    Dbg_Update_26,
    Dbg_Rst_26,
    Dbg_Trig_In_26,
    Dbg_Trig_Ack_In_26,
    Dbg_Trig_Out_26,
    Dbg_Trig_Ack_Out_26,
    Dbg_TrClk_26,
    Dbg_TrData_26,
    Dbg_TrReady_26,
    Dbg_TrValid_26,
    Dbg_AWADDR_26,
    Dbg_AWVALID_26,
    Dbg_AWREADY_26,
    Dbg_WDATA_26,
    Dbg_WVALID_26,
    Dbg_WREADY_26,
    Dbg_BRESP_26,
    Dbg_BVALID_26,
    Dbg_BREADY_26,
    Dbg_ARADDR_26,
    Dbg_ARVALID_26,
    Dbg_ARREADY_26,
    Dbg_RDATA_26,
    Dbg_RRESP_26,
    Dbg_RVALID_26,
    Dbg_RREADY_26,
    Dbg_Disable_27,
    Dbg_Clk_27,
    Dbg_TDI_27,
    Dbg_TDO_27,
    Dbg_Reg_En_27,
    Dbg_Capture_27,
    Dbg_Shift_27,
    Dbg_Update_27,
    Dbg_Rst_27,
    Dbg_Trig_In_27,
    Dbg_Trig_Ack_In_27,
    Dbg_Trig_Out_27,
    Dbg_Trig_Ack_Out_27,
    Dbg_TrClk_27,
    Dbg_TrData_27,
    Dbg_TrReady_27,
    Dbg_TrValid_27,
    Dbg_AWADDR_27,
    Dbg_AWVALID_27,
    Dbg_AWREADY_27,
    Dbg_WDATA_27,
    Dbg_WVALID_27,
    Dbg_WREADY_27,
    Dbg_BRESP_27,
    Dbg_BVALID_27,
    Dbg_BREADY_27,
    Dbg_ARADDR_27,
    Dbg_ARVALID_27,
    Dbg_ARREADY_27,
    Dbg_RDATA_27,
    Dbg_RRESP_27,
    Dbg_RVALID_27,
    Dbg_RREADY_27,
    Dbg_Disable_28,
    Dbg_Clk_28,
    Dbg_TDI_28,
    Dbg_TDO_28,
    Dbg_Reg_En_28,
    Dbg_Capture_28,
    Dbg_Shift_28,
    Dbg_Update_28,
    Dbg_Rst_28,
    Dbg_Trig_In_28,
    Dbg_Trig_Ack_In_28,
    Dbg_Trig_Out_28,
    Dbg_Trig_Ack_Out_28,
    Dbg_TrClk_28,
    Dbg_TrData_28,
    Dbg_TrReady_28,
    Dbg_TrValid_28,
    Dbg_AWADDR_28,
    Dbg_AWVALID_28,
    Dbg_AWREADY_28,
    Dbg_WDATA_28,
    Dbg_WVALID_28,
    Dbg_WREADY_28,
    Dbg_BRESP_28,
    Dbg_BVALID_28,
    Dbg_BREADY_28,
    Dbg_ARADDR_28,
    Dbg_ARVALID_28,
    Dbg_ARREADY_28,
    Dbg_RDATA_28,
    Dbg_RRESP_28,
    Dbg_RVALID_28,
    Dbg_RREADY_28,
    Dbg_Disable_29,
    Dbg_Clk_29,
    Dbg_TDI_29,
    Dbg_TDO_29,
    Dbg_Reg_En_29,
    Dbg_Capture_29,
    Dbg_Shift_29,
    Dbg_Update_29,
    Dbg_Rst_29,
    Dbg_Trig_In_29,
    Dbg_Trig_Ack_In_29,
    Dbg_Trig_Out_29,
    Dbg_Trig_Ack_Out_29,
    Dbg_TrClk_29,
    Dbg_TrData_29,
    Dbg_TrReady_29,
    Dbg_TrValid_29,
    Dbg_AWADDR_29,
    Dbg_AWVALID_29,
    Dbg_AWREADY_29,
    Dbg_WDATA_29,
    Dbg_WVALID_29,
    Dbg_WREADY_29,
    Dbg_BRESP_29,
    Dbg_BVALID_29,
    Dbg_BREADY_29,
    Dbg_ARADDR_29,
    Dbg_ARVALID_29,
    Dbg_ARREADY_29,
    Dbg_RDATA_29,
    Dbg_RRESP_29,
    Dbg_RVALID_29,
    Dbg_RREADY_29,
    Dbg_Disable_30,
    Dbg_Clk_30,
    Dbg_TDI_30,
    Dbg_TDO_30,
    Dbg_Reg_En_30,
    Dbg_Capture_30,
    Dbg_Shift_30,
    Dbg_Update_30,
    Dbg_Rst_30,
    Dbg_Trig_In_30,
    Dbg_Trig_Ack_In_30,
    Dbg_Trig_Out_30,
    Dbg_Trig_Ack_Out_30,
    Dbg_TrClk_30,
    Dbg_TrData_30,
    Dbg_TrReady_30,
    Dbg_TrValid_30,
    Dbg_AWADDR_30,
    Dbg_AWVALID_30,
    Dbg_AWREADY_30,
    Dbg_WDATA_30,
    Dbg_WVALID_30,
    Dbg_WREADY_30,
    Dbg_BRESP_30,
    Dbg_BVALID_30,
    Dbg_BREADY_30,
    Dbg_ARADDR_30,
    Dbg_ARVALID_30,
    Dbg_ARREADY_30,
    Dbg_RDATA_30,
    Dbg_RRESP_30,
    Dbg_RVALID_30,
    Dbg_RREADY_30,
    Dbg_Disable_31,
    Dbg_Clk_31,
    Dbg_TDI_31,
    Dbg_TDO_31,
    Dbg_Reg_En_31,
    Dbg_Capture_31,
    Dbg_Shift_31,
    Dbg_Update_31,
    Dbg_Rst_31,
    Dbg_Trig_In_31,
    Dbg_Trig_Ack_In_31,
    Dbg_Trig_Out_31,
    Dbg_Trig_Ack_Out_31,
    Dbg_TrClk_31,
    Dbg_TrData_31,
    Dbg_TrReady_31,
    Dbg_TrValid_31,
    Dbg_AWADDR_31,
    Dbg_AWVALID_31,
    Dbg_AWREADY_31,
    Dbg_WDATA_31,
    Dbg_WVALID_31,
    Dbg_WREADY_31,
    Dbg_BRESP_31,
    Dbg_BVALID_31,
    Dbg_BREADY_31,
    Dbg_ARADDR_31,
    Dbg_ARVALID_31,
    Dbg_ARREADY_31,
    Dbg_RDATA_31,
    Dbg_RRESP_31,
    Dbg_RVALID_31,
    Dbg_RREADY_31,
    bscan_ext_tdi,
    bscan_ext_reset,
    bscan_ext_shift,
    bscan_ext_update,
    bscan_ext_capture,
    bscan_ext_sel,
    bscan_ext_drck,
    bscan_ext_tdo,
    bscan_ext_tck,
    bscan_ext_tms,
    bscan_ext_bscanid_en,
    Ext_JTAG_DRCK,
    Ext_JTAG_RESET,
    Ext_JTAG_SEL,
    Ext_JTAG_CAPTURE,
    Ext_JTAG_SHIFT,
    Ext_JTAG_UPDATE,
    Ext_JTAG_TDI,
    Ext_JTAG_TDO);
  input Config_Reset;
  input Scan_Reset_Sel;
  input Scan_Reset;
  input Scan_En;
  input S_AXI_ACLK;
  input S_AXI_ARESETN;
  input M_AXI_ACLK;
  input M_AXI_ARESETN;
  input M_AXIS_ACLK;
  input M_AXIS_ARESETN;
  output Interrupt;
  output Ext_BRK;
  output Ext_NM_BRK;
  output Debug_SYS_Rst;
  input Trig_In_0;
  output Trig_Ack_In_0;
  output Trig_Out_0;
  input Trig_Ack_Out_0;
  input Trig_In_1;
  output Trig_Ack_In_1;
  output Trig_Out_1;
  input Trig_Ack_Out_1;
  input Trig_In_2;
  output Trig_Ack_In_2;
  output Trig_Out_2;
  input Trig_Ack_Out_2;
  input Trig_In_3;
  output Trig_Ack_In_3;
  output Trig_Out_3;
  input Trig_Ack_Out_3;
  input [3:0]S_AXI_AWADDR;
  input S_AXI_AWVALID;
  output S_AXI_AWREADY;
  input [31:0]S_AXI_WDATA;
  input [3:0]S_AXI_WSTRB;
  input S_AXI_WVALID;
  output S_AXI_WREADY;
  output [1:0]S_AXI_BRESP;
  output S_AXI_BVALID;
  input S_AXI_BREADY;
  input [3:0]S_AXI_ARADDR;
  input S_AXI_ARVALID;
  output S_AXI_ARREADY;
  output [31:0]S_AXI_RDATA;
  output [1:0]S_AXI_RRESP;
  output S_AXI_RVALID;
  input S_AXI_RREADY;
  output [0:0]M_AXI_AWID;
  output [31:0]M_AXI_AWADDR;
  output [7:0]M_AXI_AWLEN;
  output [2:0]M_AXI_AWSIZE;
  output [1:0]M_AXI_AWBURST;
  output M_AXI_AWLOCK;
  output [3:0]M_AXI_AWCACHE;
  output [2:0]M_AXI_AWPROT;
  output [3:0]M_AXI_AWQOS;
  output M_AXI_AWVALID;
  input M_AXI_AWREADY;
  output [31:0]M_AXI_WDATA;
  output [3:0]M_AXI_WSTRB;
  output M_AXI_WLAST;
  output M_AXI_WVALID;
  input M_AXI_WREADY;
  input [1:0]M_AXI_BRESP;
  input [0:0]M_AXI_BID;
  input M_AXI_BVALID;
  output M_AXI_BREADY;
  output [0:0]M_AXI_ARID;
  output [31:0]M_AXI_ARADDR;
  output [7:0]M_AXI_ARLEN;
  output [2:0]M_AXI_ARSIZE;
  output [1:0]M_AXI_ARBURST;
  output M_AXI_ARLOCK;
  output [3:0]M_AXI_ARCACHE;
  output [2:0]M_AXI_ARPROT;
  output [3:0]M_AXI_ARQOS;
  output M_AXI_ARVALID;
  input M_AXI_ARREADY;
  input [0:0]M_AXI_RID;
  input [31:0]M_AXI_RDATA;
  input [1:0]M_AXI_RRESP;
  input M_AXI_RLAST;
  input M_AXI_RVALID;
  output M_AXI_RREADY;
  output [0:31]LMB_Data_Addr_0;
  input [0:31]LMB_Data_Read_0;
  output [0:31]LMB_Data_Write_0;
  output LMB_Addr_Strobe_0;
  output LMB_Read_Strobe_0;
  output LMB_Write_Strobe_0;
  input LMB_Ready_0;
  input LMB_Wait_0;
  input LMB_CE_0;
  input LMB_UE_0;
  output [0:3]LMB_Byte_Enable_0;
  output [0:31]LMB_Data_Addr_1;
  input [0:31]LMB_Data_Read_1;
  output [0:31]LMB_Data_Write_1;
  output LMB_Addr_Strobe_1;
  output LMB_Read_Strobe_1;
  output LMB_Write_Strobe_1;
  input LMB_Ready_1;
  input LMB_Wait_1;
  input LMB_CE_1;
  input LMB_UE_1;
  output [0:3]LMB_Byte_Enable_1;
  output [0:31]LMB_Data_Addr_2;
  input [0:31]LMB_Data_Read_2;
  output [0:31]LMB_Data_Write_2;
  output LMB_Addr_Strobe_2;
  output LMB_Read_Strobe_2;
  output LMB_Write_Strobe_2;
  input LMB_Ready_2;
  input LMB_Wait_2;
  input LMB_CE_2;
  input LMB_UE_2;
  output [0:3]LMB_Byte_Enable_2;
  output [0:31]LMB_Data_Addr_3;
  input [0:31]LMB_Data_Read_3;
  output [0:31]LMB_Data_Write_3;
  output LMB_Addr_Strobe_3;
  output LMB_Read_Strobe_3;
  output LMB_Write_Strobe_3;
  input LMB_Ready_3;
  input LMB_Wait_3;
  input LMB_CE_3;
  input LMB_UE_3;
  output [0:3]LMB_Byte_Enable_3;
  output [0:31]LMB_Data_Addr_4;
  input [0:31]LMB_Data_Read_4;
  output [0:31]LMB_Data_Write_4;
  output LMB_Addr_Strobe_4;
  output LMB_Read_Strobe_4;
  output LMB_Write_Strobe_4;
  input LMB_Ready_4;
  input LMB_Wait_4;
  input LMB_CE_4;
  input LMB_UE_4;
  output [0:3]LMB_Byte_Enable_4;
  output [0:31]LMB_Data_Addr_5;
  input [0:31]LMB_Data_Read_5;
  output [0:31]LMB_Data_Write_5;
  output LMB_Addr_Strobe_5;
  output LMB_Read_Strobe_5;
  output LMB_Write_Strobe_5;
  input LMB_Ready_5;
  input LMB_Wait_5;
  input LMB_CE_5;
  input LMB_UE_5;
  output [0:3]LMB_Byte_Enable_5;
  output [0:31]LMB_Data_Addr_6;
  input [0:31]LMB_Data_Read_6;
  output [0:31]LMB_Data_Write_6;
  output LMB_Addr_Strobe_6;
  output LMB_Read_Strobe_6;
  output LMB_Write_Strobe_6;
  input LMB_Ready_6;
  input LMB_Wait_6;
  input LMB_CE_6;
  input LMB_UE_6;
  output [0:3]LMB_Byte_Enable_6;
  output [0:31]LMB_Data_Addr_7;
  input [0:31]LMB_Data_Read_7;
  output [0:31]LMB_Data_Write_7;
  output LMB_Addr_Strobe_7;
  output LMB_Read_Strobe_7;
  output LMB_Write_Strobe_7;
  input LMB_Ready_7;
  input LMB_Wait_7;
  input LMB_CE_7;
  input LMB_UE_7;
  output [0:3]LMB_Byte_Enable_7;
  output [0:31]LMB_Data_Addr_8;
  input [0:31]LMB_Data_Read_8;
  output [0:31]LMB_Data_Write_8;
  output LMB_Addr_Strobe_8;
  output LMB_Read_Strobe_8;
  output LMB_Write_Strobe_8;
  input LMB_Ready_8;
  input LMB_Wait_8;
  input LMB_CE_8;
  input LMB_UE_8;
  output [0:3]LMB_Byte_Enable_8;
  output [0:31]LMB_Data_Addr_9;
  input [0:31]LMB_Data_Read_9;
  output [0:31]LMB_Data_Write_9;
  output LMB_Addr_Strobe_9;
  output LMB_Read_Strobe_9;
  output LMB_Write_Strobe_9;
  input LMB_Ready_9;
  input LMB_Wait_9;
  input LMB_CE_9;
  input LMB_UE_9;
  output [0:3]LMB_Byte_Enable_9;
  output [0:31]LMB_Data_Addr_10;
  input [0:31]LMB_Data_Read_10;
  output [0:31]LMB_Data_Write_10;
  output LMB_Addr_Strobe_10;
  output LMB_Read_Strobe_10;
  output LMB_Write_Strobe_10;
  input LMB_Ready_10;
  input LMB_Wait_10;
  input LMB_CE_10;
  input LMB_UE_10;
  output [0:3]LMB_Byte_Enable_10;
  output [0:31]LMB_Data_Addr_11;
  input [0:31]LMB_Data_Read_11;
  output [0:31]LMB_Data_Write_11;
  output LMB_Addr_Strobe_11;
  output LMB_Read_Strobe_11;
  output LMB_Write_Strobe_11;
  input LMB_Ready_11;
  input LMB_Wait_11;
  input LMB_CE_11;
  input LMB_UE_11;
  output [0:3]LMB_Byte_Enable_11;
  output [0:31]LMB_Data_Addr_12;
  input [0:31]LMB_Data_Read_12;
  output [0:31]LMB_Data_Write_12;
  output LMB_Addr_Strobe_12;
  output LMB_Read_Strobe_12;
  output LMB_Write_Strobe_12;
  input LMB_Ready_12;
  input LMB_Wait_12;
  input LMB_CE_12;
  input LMB_UE_12;
  output [0:3]LMB_Byte_Enable_12;
  output [0:31]LMB_Data_Addr_13;
  input [0:31]LMB_Data_Read_13;
  output [0:31]LMB_Data_Write_13;
  output LMB_Addr_Strobe_13;
  output LMB_Read_Strobe_13;
  output LMB_Write_Strobe_13;
  input LMB_Ready_13;
  input LMB_Wait_13;
  input LMB_CE_13;
  input LMB_UE_13;
  output [0:3]LMB_Byte_Enable_13;
  output [0:31]LMB_Data_Addr_14;
  input [0:31]LMB_Data_Read_14;
  output [0:31]LMB_Data_Write_14;
  output LMB_Addr_Strobe_14;
  output LMB_Read_Strobe_14;
  output LMB_Write_Strobe_14;
  input LMB_Ready_14;
  input LMB_Wait_14;
  input LMB_CE_14;
  input LMB_UE_14;
  output [0:3]LMB_Byte_Enable_14;
  output [0:31]LMB_Data_Addr_15;
  input [0:31]LMB_Data_Read_15;
  output [0:31]LMB_Data_Write_15;
  output LMB_Addr_Strobe_15;
  output LMB_Read_Strobe_15;
  output LMB_Write_Strobe_15;
  input LMB_Ready_15;
  input LMB_Wait_15;
  input LMB_CE_15;
  input LMB_UE_15;
  output [0:3]LMB_Byte_Enable_15;
  output [0:31]LMB_Data_Addr_16;
  input [0:31]LMB_Data_Read_16;
  output [0:31]LMB_Data_Write_16;
  output LMB_Addr_Strobe_16;
  output LMB_Read_Strobe_16;
  output LMB_Write_Strobe_16;
  input LMB_Ready_16;
  input LMB_Wait_16;
  input LMB_CE_16;
  input LMB_UE_16;
  output [0:3]LMB_Byte_Enable_16;
  output [0:31]LMB_Data_Addr_17;
  input [0:31]LMB_Data_Read_17;
  output [0:31]LMB_Data_Write_17;
  output LMB_Addr_Strobe_17;
  output LMB_Read_Strobe_17;
  output LMB_Write_Strobe_17;
  input LMB_Ready_17;
  input LMB_Wait_17;
  input LMB_CE_17;
  input LMB_UE_17;
  output [0:3]LMB_Byte_Enable_17;
  output [0:31]LMB_Data_Addr_18;
  input [0:31]LMB_Data_Read_18;
  output [0:31]LMB_Data_Write_18;
  output LMB_Addr_Strobe_18;
  output LMB_Read_Strobe_18;
  output LMB_Write_Strobe_18;
  input LMB_Ready_18;
  input LMB_Wait_18;
  input LMB_CE_18;
  input LMB_UE_18;
  output [0:3]LMB_Byte_Enable_18;
  output [0:31]LMB_Data_Addr_19;
  input [0:31]LMB_Data_Read_19;
  output [0:31]LMB_Data_Write_19;
  output LMB_Addr_Strobe_19;
  output LMB_Read_Strobe_19;
  output LMB_Write_Strobe_19;
  input LMB_Ready_19;
  input LMB_Wait_19;
  input LMB_CE_19;
  input LMB_UE_19;
  output [0:3]LMB_Byte_Enable_19;
  output [0:31]LMB_Data_Addr_20;
  input [0:31]LMB_Data_Read_20;
  output [0:31]LMB_Data_Write_20;
  output LMB_Addr_Strobe_20;
  output LMB_Read_Strobe_20;
  output LMB_Write_Strobe_20;
  input LMB_Ready_20;
  input LMB_Wait_20;
  input LMB_CE_20;
  input LMB_UE_20;
  output [0:3]LMB_Byte_Enable_20;
  output [0:31]LMB_Data_Addr_21;
  input [0:31]LMB_Data_Read_21;
  output [0:31]LMB_Data_Write_21;
  output LMB_Addr_Strobe_21;
  output LMB_Read_Strobe_21;
  output LMB_Write_Strobe_21;
  input LMB_Ready_21;
  input LMB_Wait_21;
  input LMB_CE_21;
  input LMB_UE_21;
  output [0:3]LMB_Byte_Enable_21;
  output [0:31]LMB_Data_Addr_22;
  input [0:31]LMB_Data_Read_22;
  output [0:31]LMB_Data_Write_22;
  output LMB_Addr_Strobe_22;
  output LMB_Read_Strobe_22;
  output LMB_Write_Strobe_22;
  input LMB_Ready_22;
  input LMB_Wait_22;
  input LMB_CE_22;
  input LMB_UE_22;
  output [0:3]LMB_Byte_Enable_22;
  output [0:31]LMB_Data_Addr_23;
  input [0:31]LMB_Data_Read_23;
  output [0:31]LMB_Data_Write_23;
  output LMB_Addr_Strobe_23;
  output LMB_Read_Strobe_23;
  output LMB_Write_Strobe_23;
  input LMB_Ready_23;
  input LMB_Wait_23;
  input LMB_CE_23;
  input LMB_UE_23;
  output [0:3]LMB_Byte_Enable_23;
  output [0:31]LMB_Data_Addr_24;
  input [0:31]LMB_Data_Read_24;
  output [0:31]LMB_Data_Write_24;
  output LMB_Addr_Strobe_24;
  output LMB_Read_Strobe_24;
  output LMB_Write_Strobe_24;
  input LMB_Ready_24;
  input LMB_Wait_24;
  input LMB_CE_24;
  input LMB_UE_24;
  output [0:3]LMB_Byte_Enable_24;
  output [0:31]LMB_Data_Addr_25;
  input [0:31]LMB_Data_Read_25;
  output [0:31]LMB_Data_Write_25;
  output LMB_Addr_Strobe_25;
  output LMB_Read_Strobe_25;
  output LMB_Write_Strobe_25;
  input LMB_Ready_25;
  input LMB_Wait_25;
  input LMB_CE_25;
  input LMB_UE_25;
  output [0:3]LMB_Byte_Enable_25;
  output [0:31]LMB_Data_Addr_26;
  input [0:31]LMB_Data_Read_26;
  output [0:31]LMB_Data_Write_26;
  output LMB_Addr_Strobe_26;
  output LMB_Read_Strobe_26;
  output LMB_Write_Strobe_26;
  input LMB_Ready_26;
  input LMB_Wait_26;
  input LMB_CE_26;
  input LMB_UE_26;
  output [0:3]LMB_Byte_Enable_26;
  output [0:31]LMB_Data_Addr_27;
  input [0:31]LMB_Data_Read_27;
  output [0:31]LMB_Data_Write_27;
  output LMB_Addr_Strobe_27;
  output LMB_Read_Strobe_27;
  output LMB_Write_Strobe_27;
  input LMB_Ready_27;
  input LMB_Wait_27;
  input LMB_CE_27;
  input LMB_UE_27;
  output [0:3]LMB_Byte_Enable_27;
  output [0:31]LMB_Data_Addr_28;
  input [0:31]LMB_Data_Read_28;
  output [0:31]LMB_Data_Write_28;
  output LMB_Addr_Strobe_28;
  output LMB_Read_Strobe_28;
  output LMB_Write_Strobe_28;
  input LMB_Ready_28;
  input LMB_Wait_28;
  input LMB_CE_28;
  input LMB_UE_28;
  output [0:3]LMB_Byte_Enable_28;
  output [0:31]LMB_Data_Addr_29;
  input [0:31]LMB_Data_Read_29;
  output [0:31]LMB_Data_Write_29;
  output LMB_Addr_Strobe_29;
  output LMB_Read_Strobe_29;
  output LMB_Write_Strobe_29;
  input LMB_Ready_29;
  input LMB_Wait_29;
  input LMB_CE_29;
  input LMB_UE_29;
  output [0:3]LMB_Byte_Enable_29;
  output [0:31]LMB_Data_Addr_30;
  input [0:31]LMB_Data_Read_30;
  output [0:31]LMB_Data_Write_30;
  output LMB_Addr_Strobe_30;
  output LMB_Read_Strobe_30;
  output LMB_Write_Strobe_30;
  input LMB_Ready_30;
  input LMB_Wait_30;
  input LMB_CE_30;
  input LMB_UE_30;
  output [0:3]LMB_Byte_Enable_30;
  output [0:31]LMB_Data_Addr_31;
  input [0:31]LMB_Data_Read_31;
  output [0:31]LMB_Data_Write_31;
  output LMB_Addr_Strobe_31;
  output LMB_Read_Strobe_31;
  output LMB_Write_Strobe_31;
  input LMB_Ready_31;
  input LMB_Wait_31;
  input LMB_CE_31;
  input LMB_UE_31;
  output [0:3]LMB_Byte_Enable_31;
  output [31:0]M_AXIS_TDATA;
  output [6:0]M_AXIS_TID;
  input M_AXIS_TREADY;
  output M_AXIS_TVALID;
  output TRACE_CLK_OUT;
  input TRACE_CLK;
  output TRACE_CTL;
  output [31:0]TRACE_DATA;
  output Dbg_Disable_0;
  output Dbg_Clk_0;
  output Dbg_TDI_0;
  input Dbg_TDO_0;
  output [0:7]Dbg_Reg_En_0;
  output Dbg_Capture_0;
  output Dbg_Shift_0;
  output Dbg_Update_0;
  output Dbg_Rst_0;
  input [0:7]Dbg_Trig_In_0;
  output [0:7]Dbg_Trig_Ack_In_0;
  output [0:7]Dbg_Trig_Out_0;
  input [0:7]Dbg_Trig_Ack_Out_0;
  output Dbg_TrClk_0;
  input [0:35]Dbg_TrData_0;
  output Dbg_TrReady_0;
  input Dbg_TrValid_0;
  output [14:2]Dbg_AWADDR_0;
  output Dbg_AWVALID_0;
  input Dbg_AWREADY_0;
  output [31:0]Dbg_WDATA_0;
  output Dbg_WVALID_0;
  input Dbg_WREADY_0;
  input [1:0]Dbg_BRESP_0;
  input Dbg_BVALID_0;
  output Dbg_BREADY_0;
  output [14:2]Dbg_ARADDR_0;
  output Dbg_ARVALID_0;
  input Dbg_ARREADY_0;
  input [31:0]Dbg_RDATA_0;
  input [1:0]Dbg_RRESP_0;
  input Dbg_RVALID_0;
  output Dbg_RREADY_0;
  output Dbg_Disable_1;
  output Dbg_Clk_1;
  output Dbg_TDI_1;
  input Dbg_TDO_1;
  output [0:7]Dbg_Reg_En_1;
  output Dbg_Capture_1;
  output Dbg_Shift_1;
  output Dbg_Update_1;
  output Dbg_Rst_1;
  input [0:7]Dbg_Trig_In_1;
  output [0:7]Dbg_Trig_Ack_In_1;
  output [0:7]Dbg_Trig_Out_1;
  input [0:7]Dbg_Trig_Ack_Out_1;
  output Dbg_TrClk_1;
  input [0:35]Dbg_TrData_1;
  output Dbg_TrReady_1;
  input Dbg_TrValid_1;
  output [14:2]Dbg_AWADDR_1;
  output Dbg_AWVALID_1;
  input Dbg_AWREADY_1;
  output [31:0]Dbg_WDATA_1;
  output Dbg_WVALID_1;
  input Dbg_WREADY_1;
  input [1:0]Dbg_BRESP_1;
  input Dbg_BVALID_1;
  output Dbg_BREADY_1;
  output [14:2]Dbg_ARADDR_1;
  output Dbg_ARVALID_1;
  input Dbg_ARREADY_1;
  input [31:0]Dbg_RDATA_1;
  input [1:0]Dbg_RRESP_1;
  input Dbg_RVALID_1;
  output Dbg_RREADY_1;
  output Dbg_Disable_2;
  output Dbg_Clk_2;
  output Dbg_TDI_2;
  input Dbg_TDO_2;
  output [0:7]Dbg_Reg_En_2;
  output Dbg_Capture_2;
  output Dbg_Shift_2;
  output Dbg_Update_2;
  output Dbg_Rst_2;
  input [0:7]Dbg_Trig_In_2;
  output [0:7]Dbg_Trig_Ack_In_2;
  output [0:7]Dbg_Trig_Out_2;
  input [0:7]Dbg_Trig_Ack_Out_2;
  output Dbg_TrClk_2;
  input [0:35]Dbg_TrData_2;
  output Dbg_TrReady_2;
  input Dbg_TrValid_2;
  output [14:2]Dbg_AWADDR_2;
  output Dbg_AWVALID_2;
  input Dbg_AWREADY_2;
  output [31:0]Dbg_WDATA_2;
  output Dbg_WVALID_2;
  input Dbg_WREADY_2;
  input [1:0]Dbg_BRESP_2;
  input Dbg_BVALID_2;
  output Dbg_BREADY_2;
  output [14:2]Dbg_ARADDR_2;
  output Dbg_ARVALID_2;
  input Dbg_ARREADY_2;
  input [31:0]Dbg_RDATA_2;
  input [1:0]Dbg_RRESP_2;
  input Dbg_RVALID_2;
  output Dbg_RREADY_2;
  output Dbg_Disable_3;
  output Dbg_Clk_3;
  output Dbg_TDI_3;
  input Dbg_TDO_3;
  output [0:7]Dbg_Reg_En_3;
  output Dbg_Capture_3;
  output Dbg_Shift_3;
  output Dbg_Update_3;
  output Dbg_Rst_3;
  input [0:7]Dbg_Trig_In_3;
  output [0:7]Dbg_Trig_Ack_In_3;
  output [0:7]Dbg_Trig_Out_3;
  input [0:7]Dbg_Trig_Ack_Out_3;
  output Dbg_TrClk_3;
  input [0:35]Dbg_TrData_3;
  output Dbg_TrReady_3;
  input Dbg_TrValid_3;
  output [14:2]Dbg_AWADDR_3;
  output Dbg_AWVALID_3;
  input Dbg_AWREADY_3;
  output [31:0]Dbg_WDATA_3;
  output Dbg_WVALID_3;
  input Dbg_WREADY_3;
  input [1:0]Dbg_BRESP_3;
  input Dbg_BVALID_3;
  output Dbg_BREADY_3;
  output [14:2]Dbg_ARADDR_3;
  output Dbg_ARVALID_3;
  input Dbg_ARREADY_3;
  input [31:0]Dbg_RDATA_3;
  input [1:0]Dbg_RRESP_3;
  input Dbg_RVALID_3;
  output Dbg_RREADY_3;
  output Dbg_Disable_4;
  output Dbg_Clk_4;
  output Dbg_TDI_4;
  input Dbg_TDO_4;
  output [0:7]Dbg_Reg_En_4;
  output Dbg_Capture_4;
  output Dbg_Shift_4;
  output Dbg_Update_4;
  output Dbg_Rst_4;
  input [0:7]Dbg_Trig_In_4;
  output [0:7]Dbg_Trig_Ack_In_4;
  output [0:7]Dbg_Trig_Out_4;
  input [0:7]Dbg_Trig_Ack_Out_4;
  output Dbg_TrClk_4;
  input [0:35]Dbg_TrData_4;
  output Dbg_TrReady_4;
  input Dbg_TrValid_4;
  output [14:2]Dbg_AWADDR_4;
  output Dbg_AWVALID_4;
  input Dbg_AWREADY_4;
  output [31:0]Dbg_WDATA_4;
  output Dbg_WVALID_4;
  input Dbg_WREADY_4;
  input [1:0]Dbg_BRESP_4;
  input Dbg_BVALID_4;
  output Dbg_BREADY_4;
  output [14:2]Dbg_ARADDR_4;
  output Dbg_ARVALID_4;
  input Dbg_ARREADY_4;
  input [31:0]Dbg_RDATA_4;
  input [1:0]Dbg_RRESP_4;
  input Dbg_RVALID_4;
  output Dbg_RREADY_4;
  output Dbg_Disable_5;
  output Dbg_Clk_5;
  output Dbg_TDI_5;
  input Dbg_TDO_5;
  output [0:7]Dbg_Reg_En_5;
  output Dbg_Capture_5;
  output Dbg_Shift_5;
  output Dbg_Update_5;
  output Dbg_Rst_5;
  input [0:7]Dbg_Trig_In_5;
  output [0:7]Dbg_Trig_Ack_In_5;
  output [0:7]Dbg_Trig_Out_5;
  input [0:7]Dbg_Trig_Ack_Out_5;
  output Dbg_TrClk_5;
  input [0:35]Dbg_TrData_5;
  output Dbg_TrReady_5;
  input Dbg_TrValid_5;
  output [14:2]Dbg_AWADDR_5;
  output Dbg_AWVALID_5;
  input Dbg_AWREADY_5;
  output [31:0]Dbg_WDATA_5;
  output Dbg_WVALID_5;
  input Dbg_WREADY_5;
  input [1:0]Dbg_BRESP_5;
  input Dbg_BVALID_5;
  output Dbg_BREADY_5;
  output [14:2]Dbg_ARADDR_5;
  output Dbg_ARVALID_5;
  input Dbg_ARREADY_5;
  input [31:0]Dbg_RDATA_5;
  input [1:0]Dbg_RRESP_5;
  input Dbg_RVALID_5;
  output Dbg_RREADY_5;
  output Dbg_Disable_6;
  output Dbg_Clk_6;
  output Dbg_TDI_6;
  input Dbg_TDO_6;
  output [0:7]Dbg_Reg_En_6;
  output Dbg_Capture_6;
  output Dbg_Shift_6;
  output Dbg_Update_6;
  output Dbg_Rst_6;
  input [0:7]Dbg_Trig_In_6;
  output [0:7]Dbg_Trig_Ack_In_6;
  output [0:7]Dbg_Trig_Out_6;
  input [0:7]Dbg_Trig_Ack_Out_6;
  output Dbg_TrClk_6;
  input [0:35]Dbg_TrData_6;
  output Dbg_TrReady_6;
  input Dbg_TrValid_6;
  output [14:2]Dbg_AWADDR_6;
  output Dbg_AWVALID_6;
  input Dbg_AWREADY_6;
  output [31:0]Dbg_WDATA_6;
  output Dbg_WVALID_6;
  input Dbg_WREADY_6;
  input [1:0]Dbg_BRESP_6;
  input Dbg_BVALID_6;
  output Dbg_BREADY_6;
  output [14:2]Dbg_ARADDR_6;
  output Dbg_ARVALID_6;
  input Dbg_ARREADY_6;
  input [31:0]Dbg_RDATA_6;
  input [1:0]Dbg_RRESP_6;
  input Dbg_RVALID_6;
  output Dbg_RREADY_6;
  output Dbg_Disable_7;
  output Dbg_Clk_7;
  output Dbg_TDI_7;
  input Dbg_TDO_7;
  output [0:7]Dbg_Reg_En_7;
  output Dbg_Capture_7;
  output Dbg_Shift_7;
  output Dbg_Update_7;
  output Dbg_Rst_7;
  input [0:7]Dbg_Trig_In_7;
  output [0:7]Dbg_Trig_Ack_In_7;
  output [0:7]Dbg_Trig_Out_7;
  input [0:7]Dbg_Trig_Ack_Out_7;
  output Dbg_TrClk_7;
  input [0:35]Dbg_TrData_7;
  output Dbg_TrReady_7;
  input Dbg_TrValid_7;
  output [14:2]Dbg_AWADDR_7;
  output Dbg_AWVALID_7;
  input Dbg_AWREADY_7;
  output [31:0]Dbg_WDATA_7;
  output Dbg_WVALID_7;
  input Dbg_WREADY_7;
  input [1:0]Dbg_BRESP_7;
  input Dbg_BVALID_7;
  output Dbg_BREADY_7;
  output [14:2]Dbg_ARADDR_7;
  output Dbg_ARVALID_7;
  input Dbg_ARREADY_7;
  input [31:0]Dbg_RDATA_7;
  input [1:0]Dbg_RRESP_7;
  input Dbg_RVALID_7;
  output Dbg_RREADY_7;
  output Dbg_Disable_8;
  output Dbg_Clk_8;
  output Dbg_TDI_8;
  input Dbg_TDO_8;
  output [0:7]Dbg_Reg_En_8;
  output Dbg_Capture_8;
  output Dbg_Shift_8;
  output Dbg_Update_8;
  output Dbg_Rst_8;
  input [0:7]Dbg_Trig_In_8;
  output [0:7]Dbg_Trig_Ack_In_8;
  output [0:7]Dbg_Trig_Out_8;
  input [0:7]Dbg_Trig_Ack_Out_8;
  output Dbg_TrClk_8;
  input [0:35]Dbg_TrData_8;
  output Dbg_TrReady_8;
  input Dbg_TrValid_8;
  output [14:2]Dbg_AWADDR_8;
  output Dbg_AWVALID_8;
  input Dbg_AWREADY_8;
  output [31:0]Dbg_WDATA_8;
  output Dbg_WVALID_8;
  input Dbg_WREADY_8;
  input [1:0]Dbg_BRESP_8;
  input Dbg_BVALID_8;
  output Dbg_BREADY_8;
  output [14:2]Dbg_ARADDR_8;
  output Dbg_ARVALID_8;
  input Dbg_ARREADY_8;
  input [31:0]Dbg_RDATA_8;
  input [1:0]Dbg_RRESP_8;
  input Dbg_RVALID_8;
  output Dbg_RREADY_8;
  output Dbg_Disable_9;
  output Dbg_Clk_9;
  output Dbg_TDI_9;
  input Dbg_TDO_9;
  output [0:7]Dbg_Reg_En_9;
  output Dbg_Capture_9;
  output Dbg_Shift_9;
  output Dbg_Update_9;
  output Dbg_Rst_9;
  input [0:7]Dbg_Trig_In_9;
  output [0:7]Dbg_Trig_Ack_In_9;
  output [0:7]Dbg_Trig_Out_9;
  input [0:7]Dbg_Trig_Ack_Out_9;
  output Dbg_TrClk_9;
  input [0:35]Dbg_TrData_9;
  output Dbg_TrReady_9;
  input Dbg_TrValid_9;
  output [14:2]Dbg_AWADDR_9;
  output Dbg_AWVALID_9;
  input Dbg_AWREADY_9;
  output [31:0]Dbg_WDATA_9;
  output Dbg_WVALID_9;
  input Dbg_WREADY_9;
  input [1:0]Dbg_BRESP_9;
  input Dbg_BVALID_9;
  output Dbg_BREADY_9;
  output [14:2]Dbg_ARADDR_9;
  output Dbg_ARVALID_9;
  input Dbg_ARREADY_9;
  input [31:0]Dbg_RDATA_9;
  input [1:0]Dbg_RRESP_9;
  input Dbg_RVALID_9;
  output Dbg_RREADY_9;
  output Dbg_Disable_10;
  output Dbg_Clk_10;
  output Dbg_TDI_10;
  input Dbg_TDO_10;
  output [0:7]Dbg_Reg_En_10;
  output Dbg_Capture_10;
  output Dbg_Shift_10;
  output Dbg_Update_10;
  output Dbg_Rst_10;
  input [0:7]Dbg_Trig_In_10;
  output [0:7]Dbg_Trig_Ack_In_10;
  output [0:7]Dbg_Trig_Out_10;
  input [0:7]Dbg_Trig_Ack_Out_10;
  output Dbg_TrClk_10;
  input [0:35]Dbg_TrData_10;
  output Dbg_TrReady_10;
  input Dbg_TrValid_10;
  output [14:2]Dbg_AWADDR_10;
  output Dbg_AWVALID_10;
  input Dbg_AWREADY_10;
  output [31:0]Dbg_WDATA_10;
  output Dbg_WVALID_10;
  input Dbg_WREADY_10;
  input [1:0]Dbg_BRESP_10;
  input Dbg_BVALID_10;
  output Dbg_BREADY_10;
  output [14:2]Dbg_ARADDR_10;
  output Dbg_ARVALID_10;
  input Dbg_ARREADY_10;
  input [31:0]Dbg_RDATA_10;
  input [1:0]Dbg_RRESP_10;
  input Dbg_RVALID_10;
  output Dbg_RREADY_10;
  output Dbg_Disable_11;
  output Dbg_Clk_11;
  output Dbg_TDI_11;
  input Dbg_TDO_11;
  output [0:7]Dbg_Reg_En_11;
  output Dbg_Capture_11;
  output Dbg_Shift_11;
  output Dbg_Update_11;
  output Dbg_Rst_11;
  input [0:7]Dbg_Trig_In_11;
  output [0:7]Dbg_Trig_Ack_In_11;
  output [0:7]Dbg_Trig_Out_11;
  input [0:7]Dbg_Trig_Ack_Out_11;
  output Dbg_TrClk_11;
  input [0:35]Dbg_TrData_11;
  output Dbg_TrReady_11;
  input Dbg_TrValid_11;
  output [14:2]Dbg_AWADDR_11;
  output Dbg_AWVALID_11;
  input Dbg_AWREADY_11;
  output [31:0]Dbg_WDATA_11;
  output Dbg_WVALID_11;
  input Dbg_WREADY_11;
  input [1:0]Dbg_BRESP_11;
  input Dbg_BVALID_11;
  output Dbg_BREADY_11;
  output [14:2]Dbg_ARADDR_11;
  output Dbg_ARVALID_11;
  input Dbg_ARREADY_11;
  input [31:0]Dbg_RDATA_11;
  input [1:0]Dbg_RRESP_11;
  input Dbg_RVALID_11;
  output Dbg_RREADY_11;
  output Dbg_Disable_12;
  output Dbg_Clk_12;
  output Dbg_TDI_12;
  input Dbg_TDO_12;
  output [0:7]Dbg_Reg_En_12;
  output Dbg_Capture_12;
  output Dbg_Shift_12;
  output Dbg_Update_12;
  output Dbg_Rst_12;
  input [0:7]Dbg_Trig_In_12;
  output [0:7]Dbg_Trig_Ack_In_12;
  output [0:7]Dbg_Trig_Out_12;
  input [0:7]Dbg_Trig_Ack_Out_12;
  output Dbg_TrClk_12;
  input [0:35]Dbg_TrData_12;
  output Dbg_TrReady_12;
  input Dbg_TrValid_12;
  output [14:2]Dbg_AWADDR_12;
  output Dbg_AWVALID_12;
  input Dbg_AWREADY_12;
  output [31:0]Dbg_WDATA_12;
  output Dbg_WVALID_12;
  input Dbg_WREADY_12;
  input [1:0]Dbg_BRESP_12;
  input Dbg_BVALID_12;
  output Dbg_BREADY_12;
  output [14:2]Dbg_ARADDR_12;
  output Dbg_ARVALID_12;
  input Dbg_ARREADY_12;
  input [31:0]Dbg_RDATA_12;
  input [1:0]Dbg_RRESP_12;
  input Dbg_RVALID_12;
  output Dbg_RREADY_12;
  output Dbg_Disable_13;
  output Dbg_Clk_13;
  output Dbg_TDI_13;
  input Dbg_TDO_13;
  output [0:7]Dbg_Reg_En_13;
  output Dbg_Capture_13;
  output Dbg_Shift_13;
  output Dbg_Update_13;
  output Dbg_Rst_13;
  input [0:7]Dbg_Trig_In_13;
  output [0:7]Dbg_Trig_Ack_In_13;
  output [0:7]Dbg_Trig_Out_13;
  input [0:7]Dbg_Trig_Ack_Out_13;
  output Dbg_TrClk_13;
  input [0:35]Dbg_TrData_13;
  output Dbg_TrReady_13;
  input Dbg_TrValid_13;
  output [14:2]Dbg_AWADDR_13;
  output Dbg_AWVALID_13;
  input Dbg_AWREADY_13;
  output [31:0]Dbg_WDATA_13;
  output Dbg_WVALID_13;
  input Dbg_WREADY_13;
  input [1:0]Dbg_BRESP_13;
  input Dbg_BVALID_13;
  output Dbg_BREADY_13;
  output [14:2]Dbg_ARADDR_13;
  output Dbg_ARVALID_13;
  input Dbg_ARREADY_13;
  input [31:0]Dbg_RDATA_13;
  input [1:0]Dbg_RRESP_13;
  input Dbg_RVALID_13;
  output Dbg_RREADY_13;
  output Dbg_Disable_14;
  output Dbg_Clk_14;
  output Dbg_TDI_14;
  input Dbg_TDO_14;
  output [0:7]Dbg_Reg_En_14;
  output Dbg_Capture_14;
  output Dbg_Shift_14;
  output Dbg_Update_14;
  output Dbg_Rst_14;
  input [0:7]Dbg_Trig_In_14;
  output [0:7]Dbg_Trig_Ack_In_14;
  output [0:7]Dbg_Trig_Out_14;
  input [0:7]Dbg_Trig_Ack_Out_14;
  output Dbg_TrClk_14;
  input [0:35]Dbg_TrData_14;
  output Dbg_TrReady_14;
  input Dbg_TrValid_14;
  output [14:2]Dbg_AWADDR_14;
  output Dbg_AWVALID_14;
  input Dbg_AWREADY_14;
  output [31:0]Dbg_WDATA_14;
  output Dbg_WVALID_14;
  input Dbg_WREADY_14;
  input [1:0]Dbg_BRESP_14;
  input Dbg_BVALID_14;
  output Dbg_BREADY_14;
  output [14:2]Dbg_ARADDR_14;
  output Dbg_ARVALID_14;
  input Dbg_ARREADY_14;
  input [31:0]Dbg_RDATA_14;
  input [1:0]Dbg_RRESP_14;
  input Dbg_RVALID_14;
  output Dbg_RREADY_14;
  output Dbg_Disable_15;
  output Dbg_Clk_15;
  output Dbg_TDI_15;
  input Dbg_TDO_15;
  output [0:7]Dbg_Reg_En_15;
  output Dbg_Capture_15;
  output Dbg_Shift_15;
  output Dbg_Update_15;
  output Dbg_Rst_15;
  input [0:7]Dbg_Trig_In_15;
  output [0:7]Dbg_Trig_Ack_In_15;
  output [0:7]Dbg_Trig_Out_15;
  input [0:7]Dbg_Trig_Ack_Out_15;
  output Dbg_TrClk_15;
  input [0:35]Dbg_TrData_15;
  output Dbg_TrReady_15;
  input Dbg_TrValid_15;
  output [14:2]Dbg_AWADDR_15;
  output Dbg_AWVALID_15;
  input Dbg_AWREADY_15;
  output [31:0]Dbg_WDATA_15;
  output Dbg_WVALID_15;
  input Dbg_WREADY_15;
  input [1:0]Dbg_BRESP_15;
  input Dbg_BVALID_15;
  output Dbg_BREADY_15;
  output [14:2]Dbg_ARADDR_15;
  output Dbg_ARVALID_15;
  input Dbg_ARREADY_15;
  input [31:0]Dbg_RDATA_15;
  input [1:0]Dbg_RRESP_15;
  input Dbg_RVALID_15;
  output Dbg_RREADY_15;
  output Dbg_Disable_16;
  output Dbg_Clk_16;
  output Dbg_TDI_16;
  input Dbg_TDO_16;
  output [0:7]Dbg_Reg_En_16;
  output Dbg_Capture_16;
  output Dbg_Shift_16;
  output Dbg_Update_16;
  output Dbg_Rst_16;
  input [0:7]Dbg_Trig_In_16;
  output [0:7]Dbg_Trig_Ack_In_16;
  output [0:7]Dbg_Trig_Out_16;
  input [0:7]Dbg_Trig_Ack_Out_16;
  output Dbg_TrClk_16;
  input [0:35]Dbg_TrData_16;
  output Dbg_TrReady_16;
  input Dbg_TrValid_16;
  output [14:2]Dbg_AWADDR_16;
  output Dbg_AWVALID_16;
  input Dbg_AWREADY_16;
  output [31:0]Dbg_WDATA_16;
  output Dbg_WVALID_16;
  input Dbg_WREADY_16;
  input [1:0]Dbg_BRESP_16;
  input Dbg_BVALID_16;
  output Dbg_BREADY_16;
  output [14:2]Dbg_ARADDR_16;
  output Dbg_ARVALID_16;
  input Dbg_ARREADY_16;
  input [31:0]Dbg_RDATA_16;
  input [1:0]Dbg_RRESP_16;
  input Dbg_RVALID_16;
  output Dbg_RREADY_16;
  output Dbg_Disable_17;
  output Dbg_Clk_17;
  output Dbg_TDI_17;
  input Dbg_TDO_17;
  output [0:7]Dbg_Reg_En_17;
  output Dbg_Capture_17;
  output Dbg_Shift_17;
  output Dbg_Update_17;
  output Dbg_Rst_17;
  input [0:7]Dbg_Trig_In_17;
  output [0:7]Dbg_Trig_Ack_In_17;
  output [0:7]Dbg_Trig_Out_17;
  input [0:7]Dbg_Trig_Ack_Out_17;
  output Dbg_TrClk_17;
  input [0:35]Dbg_TrData_17;
  output Dbg_TrReady_17;
  input Dbg_TrValid_17;
  output [14:2]Dbg_AWADDR_17;
  output Dbg_AWVALID_17;
  input Dbg_AWREADY_17;
  output [31:0]Dbg_WDATA_17;
  output Dbg_WVALID_17;
  input Dbg_WREADY_17;
  input [1:0]Dbg_BRESP_17;
  input Dbg_BVALID_17;
  output Dbg_BREADY_17;
  output [14:2]Dbg_ARADDR_17;
  output Dbg_ARVALID_17;
  input Dbg_ARREADY_17;
  input [31:0]Dbg_RDATA_17;
  input [1:0]Dbg_RRESP_17;
  input Dbg_RVALID_17;
  output Dbg_RREADY_17;
  output Dbg_Disable_18;
  output Dbg_Clk_18;
  output Dbg_TDI_18;
  input Dbg_TDO_18;
  output [0:7]Dbg_Reg_En_18;
  output Dbg_Capture_18;
  output Dbg_Shift_18;
  output Dbg_Update_18;
  output Dbg_Rst_18;
  input [0:7]Dbg_Trig_In_18;
  output [0:7]Dbg_Trig_Ack_In_18;
  output [0:7]Dbg_Trig_Out_18;
  input [0:7]Dbg_Trig_Ack_Out_18;
  output Dbg_TrClk_18;
  input [0:35]Dbg_TrData_18;
  output Dbg_TrReady_18;
  input Dbg_TrValid_18;
  output [14:2]Dbg_AWADDR_18;
  output Dbg_AWVALID_18;
  input Dbg_AWREADY_18;
  output [31:0]Dbg_WDATA_18;
  output Dbg_WVALID_18;
  input Dbg_WREADY_18;
  input [1:0]Dbg_BRESP_18;
  input Dbg_BVALID_18;
  output Dbg_BREADY_18;
  output [14:2]Dbg_ARADDR_18;
  output Dbg_ARVALID_18;
  input Dbg_ARREADY_18;
  input [31:0]Dbg_RDATA_18;
  input [1:0]Dbg_RRESP_18;
  input Dbg_RVALID_18;
  output Dbg_RREADY_18;
  output Dbg_Disable_19;
  output Dbg_Clk_19;
  output Dbg_TDI_19;
  input Dbg_TDO_19;
  output [0:7]Dbg_Reg_En_19;
  output Dbg_Capture_19;
  output Dbg_Shift_19;
  output Dbg_Update_19;
  output Dbg_Rst_19;
  input [0:7]Dbg_Trig_In_19;
  output [0:7]Dbg_Trig_Ack_In_19;
  output [0:7]Dbg_Trig_Out_19;
  input [0:7]Dbg_Trig_Ack_Out_19;
  output Dbg_TrClk_19;
  input [0:35]Dbg_TrData_19;
  output Dbg_TrReady_19;
  input Dbg_TrValid_19;
  output [14:2]Dbg_AWADDR_19;
  output Dbg_AWVALID_19;
  input Dbg_AWREADY_19;
  output [31:0]Dbg_WDATA_19;
  output Dbg_WVALID_19;
  input Dbg_WREADY_19;
  input [1:0]Dbg_BRESP_19;
  input Dbg_BVALID_19;
  output Dbg_BREADY_19;
  output [14:2]Dbg_ARADDR_19;
  output Dbg_ARVALID_19;
  input Dbg_ARREADY_19;
  input [31:0]Dbg_RDATA_19;
  input [1:0]Dbg_RRESP_19;
  input Dbg_RVALID_19;
  output Dbg_RREADY_19;
  output Dbg_Disable_20;
  output Dbg_Clk_20;
  output Dbg_TDI_20;
  input Dbg_TDO_20;
  output [0:7]Dbg_Reg_En_20;
  output Dbg_Capture_20;
  output Dbg_Shift_20;
  output Dbg_Update_20;
  output Dbg_Rst_20;
  input [0:7]Dbg_Trig_In_20;
  output [0:7]Dbg_Trig_Ack_In_20;
  output [0:7]Dbg_Trig_Out_20;
  input [0:7]Dbg_Trig_Ack_Out_20;
  output Dbg_TrClk_20;
  input [0:35]Dbg_TrData_20;
  output Dbg_TrReady_20;
  input Dbg_TrValid_20;
  output [14:2]Dbg_AWADDR_20;
  output Dbg_AWVALID_20;
  input Dbg_AWREADY_20;
  output [31:0]Dbg_WDATA_20;
  output Dbg_WVALID_20;
  input Dbg_WREADY_20;
  input [1:0]Dbg_BRESP_20;
  input Dbg_BVALID_20;
  output Dbg_BREADY_20;
  output [14:2]Dbg_ARADDR_20;
  output Dbg_ARVALID_20;
  input Dbg_ARREADY_20;
  input [31:0]Dbg_RDATA_20;
  input [1:0]Dbg_RRESP_20;
  input Dbg_RVALID_20;
  output Dbg_RREADY_20;
  output Dbg_Disable_21;
  output Dbg_Clk_21;
  output Dbg_TDI_21;
  input Dbg_TDO_21;
  output [0:7]Dbg_Reg_En_21;
  output Dbg_Capture_21;
  output Dbg_Shift_21;
  output Dbg_Update_21;
  output Dbg_Rst_21;
  input [0:7]Dbg_Trig_In_21;
  output [0:7]Dbg_Trig_Ack_In_21;
  output [0:7]Dbg_Trig_Out_21;
  input [0:7]Dbg_Trig_Ack_Out_21;
  output Dbg_TrClk_21;
  input [0:35]Dbg_TrData_21;
  output Dbg_TrReady_21;
  input Dbg_TrValid_21;
  output [14:2]Dbg_AWADDR_21;
  output Dbg_AWVALID_21;
  input Dbg_AWREADY_21;
  output [31:0]Dbg_WDATA_21;
  output Dbg_WVALID_21;
  input Dbg_WREADY_21;
  input [1:0]Dbg_BRESP_21;
  input Dbg_BVALID_21;
  output Dbg_BREADY_21;
  output [14:2]Dbg_ARADDR_21;
  output Dbg_ARVALID_21;
  input Dbg_ARREADY_21;
  input [31:0]Dbg_RDATA_21;
  input [1:0]Dbg_RRESP_21;
  input Dbg_RVALID_21;
  output Dbg_RREADY_21;
  output Dbg_Disable_22;
  output Dbg_Clk_22;
  output Dbg_TDI_22;
  input Dbg_TDO_22;
  output [0:7]Dbg_Reg_En_22;
  output Dbg_Capture_22;
  output Dbg_Shift_22;
  output Dbg_Update_22;
  output Dbg_Rst_22;
  input [0:7]Dbg_Trig_In_22;
  output [0:7]Dbg_Trig_Ack_In_22;
  output [0:7]Dbg_Trig_Out_22;
  input [0:7]Dbg_Trig_Ack_Out_22;
  output Dbg_TrClk_22;
  input [0:35]Dbg_TrData_22;
  output Dbg_TrReady_22;
  input Dbg_TrValid_22;
  output [14:2]Dbg_AWADDR_22;
  output Dbg_AWVALID_22;
  input Dbg_AWREADY_22;
  output [31:0]Dbg_WDATA_22;
  output Dbg_WVALID_22;
  input Dbg_WREADY_22;
  input [1:0]Dbg_BRESP_22;
  input Dbg_BVALID_22;
  output Dbg_BREADY_22;
  output [14:2]Dbg_ARADDR_22;
  output Dbg_ARVALID_22;
  input Dbg_ARREADY_22;
  input [31:0]Dbg_RDATA_22;
  input [1:0]Dbg_RRESP_22;
  input Dbg_RVALID_22;
  output Dbg_RREADY_22;
  output Dbg_Disable_23;
  output Dbg_Clk_23;
  output Dbg_TDI_23;
  input Dbg_TDO_23;
  output [0:7]Dbg_Reg_En_23;
  output Dbg_Capture_23;
  output Dbg_Shift_23;
  output Dbg_Update_23;
  output Dbg_Rst_23;
  input [0:7]Dbg_Trig_In_23;
  output [0:7]Dbg_Trig_Ack_In_23;
  output [0:7]Dbg_Trig_Out_23;
  input [0:7]Dbg_Trig_Ack_Out_23;
  output Dbg_TrClk_23;
  input [0:35]Dbg_TrData_23;
  output Dbg_TrReady_23;
  input Dbg_TrValid_23;
  output [14:2]Dbg_AWADDR_23;
  output Dbg_AWVALID_23;
  input Dbg_AWREADY_23;
  output [31:0]Dbg_WDATA_23;
  output Dbg_WVALID_23;
  input Dbg_WREADY_23;
  input [1:0]Dbg_BRESP_23;
  input Dbg_BVALID_23;
  output Dbg_BREADY_23;
  output [14:2]Dbg_ARADDR_23;
  output Dbg_ARVALID_23;
  input Dbg_ARREADY_23;
  input [31:0]Dbg_RDATA_23;
  input [1:0]Dbg_RRESP_23;
  input Dbg_RVALID_23;
  output Dbg_RREADY_23;
  output Dbg_Disable_24;
  output Dbg_Clk_24;
  output Dbg_TDI_24;
  input Dbg_TDO_24;
  output [0:7]Dbg_Reg_En_24;
  output Dbg_Capture_24;
  output Dbg_Shift_24;
  output Dbg_Update_24;
  output Dbg_Rst_24;
  input [0:7]Dbg_Trig_In_24;
  output [0:7]Dbg_Trig_Ack_In_24;
  output [0:7]Dbg_Trig_Out_24;
  input [0:7]Dbg_Trig_Ack_Out_24;
  output Dbg_TrClk_24;
  input [0:35]Dbg_TrData_24;
  output Dbg_TrReady_24;
  input Dbg_TrValid_24;
  output [14:2]Dbg_AWADDR_24;
  output Dbg_AWVALID_24;
  input Dbg_AWREADY_24;
  output [31:0]Dbg_WDATA_24;
  output Dbg_WVALID_24;
  input Dbg_WREADY_24;
  input [1:0]Dbg_BRESP_24;
  input Dbg_BVALID_24;
  output Dbg_BREADY_24;
  output [14:2]Dbg_ARADDR_24;
  output Dbg_ARVALID_24;
  input Dbg_ARREADY_24;
  input [31:0]Dbg_RDATA_24;
  input [1:0]Dbg_RRESP_24;
  input Dbg_RVALID_24;
  output Dbg_RREADY_24;
  output Dbg_Disable_25;
  output Dbg_Clk_25;
  output Dbg_TDI_25;
  input Dbg_TDO_25;
  output [0:7]Dbg_Reg_En_25;
  output Dbg_Capture_25;
  output Dbg_Shift_25;
  output Dbg_Update_25;
  output Dbg_Rst_25;
  input [0:7]Dbg_Trig_In_25;
  output [0:7]Dbg_Trig_Ack_In_25;
  output [0:7]Dbg_Trig_Out_25;
  input [0:7]Dbg_Trig_Ack_Out_25;
  output Dbg_TrClk_25;
  input [0:35]Dbg_TrData_25;
  output Dbg_TrReady_25;
  input Dbg_TrValid_25;
  output [14:2]Dbg_AWADDR_25;
  output Dbg_AWVALID_25;
  input Dbg_AWREADY_25;
  output [31:0]Dbg_WDATA_25;
  output Dbg_WVALID_25;
  input Dbg_WREADY_25;
  input [1:0]Dbg_BRESP_25;
  input Dbg_BVALID_25;
  output Dbg_BREADY_25;
  output [14:2]Dbg_ARADDR_25;
  output Dbg_ARVALID_25;
  input Dbg_ARREADY_25;
  input [31:0]Dbg_RDATA_25;
  input [1:0]Dbg_RRESP_25;
  input Dbg_RVALID_25;
  output Dbg_RREADY_25;
  output Dbg_Disable_26;
  output Dbg_Clk_26;
  output Dbg_TDI_26;
  input Dbg_TDO_26;
  output [0:7]Dbg_Reg_En_26;
  output Dbg_Capture_26;
  output Dbg_Shift_26;
  output Dbg_Update_26;
  output Dbg_Rst_26;
  input [0:7]Dbg_Trig_In_26;
  output [0:7]Dbg_Trig_Ack_In_26;
  output [0:7]Dbg_Trig_Out_26;
  input [0:7]Dbg_Trig_Ack_Out_26;
  output Dbg_TrClk_26;
  input [0:35]Dbg_TrData_26;
  output Dbg_TrReady_26;
  input Dbg_TrValid_26;
  output [14:2]Dbg_AWADDR_26;
  output Dbg_AWVALID_26;
  input Dbg_AWREADY_26;
  output [31:0]Dbg_WDATA_26;
  output Dbg_WVALID_26;
  input Dbg_WREADY_26;
  input [1:0]Dbg_BRESP_26;
  input Dbg_BVALID_26;
  output Dbg_BREADY_26;
  output [14:2]Dbg_ARADDR_26;
  output Dbg_ARVALID_26;
  input Dbg_ARREADY_26;
  input [31:0]Dbg_RDATA_26;
  input [1:0]Dbg_RRESP_26;
  input Dbg_RVALID_26;
  output Dbg_RREADY_26;
  output Dbg_Disable_27;
  output Dbg_Clk_27;
  output Dbg_TDI_27;
  input Dbg_TDO_27;
  output [0:7]Dbg_Reg_En_27;
  output Dbg_Capture_27;
  output Dbg_Shift_27;
  output Dbg_Update_27;
  output Dbg_Rst_27;
  input [0:7]Dbg_Trig_In_27;
  output [0:7]Dbg_Trig_Ack_In_27;
  output [0:7]Dbg_Trig_Out_27;
  input [0:7]Dbg_Trig_Ack_Out_27;
  output Dbg_TrClk_27;
  input [0:35]Dbg_TrData_27;
  output Dbg_TrReady_27;
  input Dbg_TrValid_27;
  output [14:2]Dbg_AWADDR_27;
  output Dbg_AWVALID_27;
  input Dbg_AWREADY_27;
  output [31:0]Dbg_WDATA_27;
  output Dbg_WVALID_27;
  input Dbg_WREADY_27;
  input [1:0]Dbg_BRESP_27;
  input Dbg_BVALID_27;
  output Dbg_BREADY_27;
  output [14:2]Dbg_ARADDR_27;
  output Dbg_ARVALID_27;
  input Dbg_ARREADY_27;
  input [31:0]Dbg_RDATA_27;
  input [1:0]Dbg_RRESP_27;
  input Dbg_RVALID_27;
  output Dbg_RREADY_27;
  output Dbg_Disable_28;
  output Dbg_Clk_28;
  output Dbg_TDI_28;
  input Dbg_TDO_28;
  output [0:7]Dbg_Reg_En_28;
  output Dbg_Capture_28;
  output Dbg_Shift_28;
  output Dbg_Update_28;
  output Dbg_Rst_28;
  input [0:7]Dbg_Trig_In_28;
  output [0:7]Dbg_Trig_Ack_In_28;
  output [0:7]Dbg_Trig_Out_28;
  input [0:7]Dbg_Trig_Ack_Out_28;
  output Dbg_TrClk_28;
  input [0:35]Dbg_TrData_28;
  output Dbg_TrReady_28;
  input Dbg_TrValid_28;
  output [14:2]Dbg_AWADDR_28;
  output Dbg_AWVALID_28;
  input Dbg_AWREADY_28;
  output [31:0]Dbg_WDATA_28;
  output Dbg_WVALID_28;
  input Dbg_WREADY_28;
  input [1:0]Dbg_BRESP_28;
  input Dbg_BVALID_28;
  output Dbg_BREADY_28;
  output [14:2]Dbg_ARADDR_28;
  output Dbg_ARVALID_28;
  input Dbg_ARREADY_28;
  input [31:0]Dbg_RDATA_28;
  input [1:0]Dbg_RRESP_28;
  input Dbg_RVALID_28;
  output Dbg_RREADY_28;
  output Dbg_Disable_29;
  output Dbg_Clk_29;
  output Dbg_TDI_29;
  input Dbg_TDO_29;
  output [0:7]Dbg_Reg_En_29;
  output Dbg_Capture_29;
  output Dbg_Shift_29;
  output Dbg_Update_29;
  output Dbg_Rst_29;
  input [0:7]Dbg_Trig_In_29;
  output [0:7]Dbg_Trig_Ack_In_29;
  output [0:7]Dbg_Trig_Out_29;
  input [0:7]Dbg_Trig_Ack_Out_29;
  output Dbg_TrClk_29;
  input [0:35]Dbg_TrData_29;
  output Dbg_TrReady_29;
  input Dbg_TrValid_29;
  output [14:2]Dbg_AWADDR_29;
  output Dbg_AWVALID_29;
  input Dbg_AWREADY_29;
  output [31:0]Dbg_WDATA_29;
  output Dbg_WVALID_29;
  input Dbg_WREADY_29;
  input [1:0]Dbg_BRESP_29;
  input Dbg_BVALID_29;
  output Dbg_BREADY_29;
  output [14:2]Dbg_ARADDR_29;
  output Dbg_ARVALID_29;
  input Dbg_ARREADY_29;
  input [31:0]Dbg_RDATA_29;
  input [1:0]Dbg_RRESP_29;
  input Dbg_RVALID_29;
  output Dbg_RREADY_29;
  output Dbg_Disable_30;
  output Dbg_Clk_30;
  output Dbg_TDI_30;
  input Dbg_TDO_30;
  output [0:7]Dbg_Reg_En_30;
  output Dbg_Capture_30;
  output Dbg_Shift_30;
  output Dbg_Update_30;
  output Dbg_Rst_30;
  input [0:7]Dbg_Trig_In_30;
  output [0:7]Dbg_Trig_Ack_In_30;
  output [0:7]Dbg_Trig_Out_30;
  input [0:7]Dbg_Trig_Ack_Out_30;
  output Dbg_TrClk_30;
  input [0:35]Dbg_TrData_30;
  output Dbg_TrReady_30;
  input Dbg_TrValid_30;
  output [14:2]Dbg_AWADDR_30;
  output Dbg_AWVALID_30;
  input Dbg_AWREADY_30;
  output [31:0]Dbg_WDATA_30;
  output Dbg_WVALID_30;
  input Dbg_WREADY_30;
  input [1:0]Dbg_BRESP_30;
  input Dbg_BVALID_30;
  output Dbg_BREADY_30;
  output [14:2]Dbg_ARADDR_30;
  output Dbg_ARVALID_30;
  input Dbg_ARREADY_30;
  input [31:0]Dbg_RDATA_30;
  input [1:0]Dbg_RRESP_30;
  input Dbg_RVALID_30;
  output Dbg_RREADY_30;
  output Dbg_Disable_31;
  output Dbg_Clk_31;
  output Dbg_TDI_31;
  input Dbg_TDO_31;
  output [0:7]Dbg_Reg_En_31;
  output Dbg_Capture_31;
  output Dbg_Shift_31;
  output Dbg_Update_31;
  output Dbg_Rst_31;
  input [0:7]Dbg_Trig_In_31;
  output [0:7]Dbg_Trig_Ack_In_31;
  output [0:7]Dbg_Trig_Out_31;
  input [0:7]Dbg_Trig_Ack_Out_31;
  output Dbg_TrClk_31;
  input [0:35]Dbg_TrData_31;
  output Dbg_TrReady_31;
  input Dbg_TrValid_31;
  output [14:2]Dbg_AWADDR_31;
  output Dbg_AWVALID_31;
  input Dbg_AWREADY_31;
  output [31:0]Dbg_WDATA_31;
  output Dbg_WVALID_31;
  input Dbg_WREADY_31;
  input [1:0]Dbg_BRESP_31;
  input Dbg_BVALID_31;
  output Dbg_BREADY_31;
  output [14:2]Dbg_ARADDR_31;
  output Dbg_ARVALID_31;
  input Dbg_ARREADY_31;
  input [31:0]Dbg_RDATA_31;
  input [1:0]Dbg_RRESP_31;
  input Dbg_RVALID_31;
  output Dbg_RREADY_31;
  input bscan_ext_tdi;
  input bscan_ext_reset;
  input bscan_ext_shift;
  input bscan_ext_update;
  input bscan_ext_capture;
  input bscan_ext_sel;
  input bscan_ext_drck;
  output bscan_ext_tdo;
  input bscan_ext_tck;
  input bscan_ext_tms;
  input bscan_ext_bscanid_en;
  output Ext_JTAG_DRCK;
  output Ext_JTAG_RESET;
  output Ext_JTAG_SEL;
  output Ext_JTAG_CAPTURE;
  output Ext_JTAG_SHIFT;
  output Ext_JTAG_UPDATE;
  output Ext_JTAG_TDI;
  input Ext_JTAG_TDO;

  wire \<const0> ;
  wire \<const1> ;
  wire DRCK;
  wire Dbg_Disable_0;
  wire [0:7]Dbg_Reg_En_0;
  wire Dbg_Rst_0;
  wire Dbg_Shift_0;
  wire Dbg_TDI_0;
  wire Dbg_TDO_0;
  wire Dbg_Update_0;
  wire Debug_SYS_Rst;
  wire Ext_BRK;
  wire Ext_JTAG_CAPTURE;
  wire Ext_JTAG_DRCK;
  wire Ext_JTAG_RESET;
  wire Ext_JTAG_SEL;
  wire Ext_JTAG_SHIFT;
  wire Ext_JTAG_TDO;
  wire Ext_NM_BRK;
  wire \I_SLAVE_ATTACHMENT/I_DECODER/Bus_RNW_reg ;
  wire \I_SLAVE_ATTACHMENT/I_DECODER/GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg ;
  wire \I_SLAVE_ATTACHMENT/I_DECODER/GEN_BKEND_CE_REGISTERS[1].ce_out_i_reg ;
  wire Interrupt;
  wire \JTAG_CONTROL_I/FIFO_Write ;
  wire [5:5]\JTAG_CONTROL_I/Use_Serial_Unified_Completion.count_reg ;
  wire \JTAG_CONTROL_I/completion_status137_out ;
  wire \JTAG_CONTROL_I/fifo_Data_Present ;
  wire \JTAG_CONTROL_I/mb_data_overrun1__0 ;
  wire \JTAG_CONTROL_I/p_0_in44_in ;
  wire \JTAG_CONTROL_I/sel ;
  wire MDM_Core_I1_n_0;
  wire MDM_Core_I1_n_12;
  wire MDM_Core_I1_n_34;
  wire RX_Buffer_Full;
  wire [0:7]RX_Data;
  wire SEL;
  wire S_AXI_ACLK;
  wire [3:0]S_AXI_ARADDR;
  wire S_AXI_ARESETN;
  wire S_AXI_ARREADY;
  wire S_AXI_ARVALID;
  wire [3:0]S_AXI_AWADDR;
  wire S_AXI_AWVALID;
  wire S_AXI_BREADY;
  wire [1:1]\^S_AXI_BRESP ;
  wire S_AXI_BVALID;
  wire [7:0]\^S_AXI_RDATA ;
  wire S_AXI_RREADY;
  wire [1:1]\^S_AXI_RRESP ;
  wire S_AXI_RVALID;
  wire [31:0]S_AXI_WDATA;
  wire S_AXI_WREADY;
  wire S_AXI_WVALID;
  wire Scan_En;
  wire Scan_Reset;
  wire Scan_Reset_Sel;
  wire TDI;
  wire \Use_AXI_IPIF.AXI_LITE_IPIF_I_n_15 ;
  wire \Use_E2.BSCAN_I_n_13 ;
  wire \Use_E2.BSCAN_I_n_14 ;
  wire \Use_E2.BSCAN_I_n_8 ;
  wire \Use_E2.BSCAN_I_n_9 ;
  wire [3:3]bus2ip_rdce;
  wire [2:2]bus2ip_wrce;
  wire clear_Ext_BRK;
  wire enable_interrupts;
  wire [0:0]p_0_in;
  wire reset_RX_FIFO_i;
  wire reset_TX_FIFO_i;
  wire rx_Data_Present;
  wire sel_n_reset;
  wire shift_n_reset;
  wire tdo;
  wire tx_Buffer_Full;

  assign Dbg_ARADDR_0[14] = \<const0> ;
  assign Dbg_ARADDR_0[13] = \<const0> ;
  assign Dbg_ARADDR_0[12] = \<const0> ;
  assign Dbg_ARADDR_0[11] = \<const0> ;
  assign Dbg_ARADDR_0[10] = \<const0> ;
  assign Dbg_ARADDR_0[9] = \<const0> ;
  assign Dbg_ARADDR_0[8] = \<const0> ;
  assign Dbg_ARADDR_0[7] = \<const0> ;
  assign Dbg_ARADDR_0[6] = \<const0> ;
  assign Dbg_ARADDR_0[5] = \<const0> ;
  assign Dbg_ARADDR_0[4] = \<const0> ;
  assign Dbg_ARADDR_0[3] = \<const0> ;
  assign Dbg_ARADDR_0[2] = \<const0> ;
  assign Dbg_ARADDR_1[14] = \<const0> ;
  assign Dbg_ARADDR_1[13] = \<const0> ;
  assign Dbg_ARADDR_1[12] = \<const0> ;
  assign Dbg_ARADDR_1[11] = \<const0> ;
  assign Dbg_ARADDR_1[10] = \<const0> ;
  assign Dbg_ARADDR_1[9] = \<const0> ;
  assign Dbg_ARADDR_1[8] = \<const0> ;
  assign Dbg_ARADDR_1[7] = \<const0> ;
  assign Dbg_ARADDR_1[6] = \<const0> ;
  assign Dbg_ARADDR_1[5] = \<const0> ;
  assign Dbg_ARADDR_1[4] = \<const0> ;
  assign Dbg_ARADDR_1[3] = \<const0> ;
  assign Dbg_ARADDR_1[2] = \<const0> ;
  assign Dbg_ARADDR_10[14] = \<const0> ;
  assign Dbg_ARADDR_10[13] = \<const0> ;
  assign Dbg_ARADDR_10[12] = \<const0> ;
  assign Dbg_ARADDR_10[11] = \<const0> ;
  assign Dbg_ARADDR_10[10] = \<const0> ;
  assign Dbg_ARADDR_10[9] = \<const0> ;
  assign Dbg_ARADDR_10[8] = \<const0> ;
  assign Dbg_ARADDR_10[7] = \<const0> ;
  assign Dbg_ARADDR_10[6] = \<const0> ;
  assign Dbg_ARADDR_10[5] = \<const0> ;
  assign Dbg_ARADDR_10[4] = \<const0> ;
  assign Dbg_ARADDR_10[3] = \<const0> ;
  assign Dbg_ARADDR_10[2] = \<const0> ;
  assign Dbg_ARADDR_11[14] = \<const0> ;
  assign Dbg_ARADDR_11[13] = \<const0> ;
  assign Dbg_ARADDR_11[12] = \<const0> ;
  assign Dbg_ARADDR_11[11] = \<const0> ;
  assign Dbg_ARADDR_11[10] = \<const0> ;
  assign Dbg_ARADDR_11[9] = \<const0> ;
  assign Dbg_ARADDR_11[8] = \<const0> ;
  assign Dbg_ARADDR_11[7] = \<const0> ;
  assign Dbg_ARADDR_11[6] = \<const0> ;
  assign Dbg_ARADDR_11[5] = \<const0> ;
  assign Dbg_ARADDR_11[4] = \<const0> ;
  assign Dbg_ARADDR_11[3] = \<const0> ;
  assign Dbg_ARADDR_11[2] = \<const0> ;
  assign Dbg_ARADDR_12[14] = \<const0> ;
  assign Dbg_ARADDR_12[13] = \<const0> ;
  assign Dbg_ARADDR_12[12] = \<const0> ;
  assign Dbg_ARADDR_12[11] = \<const0> ;
  assign Dbg_ARADDR_12[10] = \<const0> ;
  assign Dbg_ARADDR_12[9] = \<const0> ;
  assign Dbg_ARADDR_12[8] = \<const0> ;
  assign Dbg_ARADDR_12[7] = \<const0> ;
  assign Dbg_ARADDR_12[6] = \<const0> ;
  assign Dbg_ARADDR_12[5] = \<const0> ;
  assign Dbg_ARADDR_12[4] = \<const0> ;
  assign Dbg_ARADDR_12[3] = \<const0> ;
  assign Dbg_ARADDR_12[2] = \<const0> ;
  assign Dbg_ARADDR_13[14] = \<const0> ;
  assign Dbg_ARADDR_13[13] = \<const0> ;
  assign Dbg_ARADDR_13[12] = \<const0> ;
  assign Dbg_ARADDR_13[11] = \<const0> ;
  assign Dbg_ARADDR_13[10] = \<const0> ;
  assign Dbg_ARADDR_13[9] = \<const0> ;
  assign Dbg_ARADDR_13[8] = \<const0> ;
  assign Dbg_ARADDR_13[7] = \<const0> ;
  assign Dbg_ARADDR_13[6] = \<const0> ;
  assign Dbg_ARADDR_13[5] = \<const0> ;
  assign Dbg_ARADDR_13[4] = \<const0> ;
  assign Dbg_ARADDR_13[3] = \<const0> ;
  assign Dbg_ARADDR_13[2] = \<const0> ;
  assign Dbg_ARADDR_14[14] = \<const0> ;
  assign Dbg_ARADDR_14[13] = \<const0> ;
  assign Dbg_ARADDR_14[12] = \<const0> ;
  assign Dbg_ARADDR_14[11] = \<const0> ;
  assign Dbg_ARADDR_14[10] = \<const0> ;
  assign Dbg_ARADDR_14[9] = \<const0> ;
  assign Dbg_ARADDR_14[8] = \<const0> ;
  assign Dbg_ARADDR_14[7] = \<const0> ;
  assign Dbg_ARADDR_14[6] = \<const0> ;
  assign Dbg_ARADDR_14[5] = \<const0> ;
  assign Dbg_ARADDR_14[4] = \<const0> ;
  assign Dbg_ARADDR_14[3] = \<const0> ;
  assign Dbg_ARADDR_14[2] = \<const0> ;
  assign Dbg_ARADDR_15[14] = \<const0> ;
  assign Dbg_ARADDR_15[13] = \<const0> ;
  assign Dbg_ARADDR_15[12] = \<const0> ;
  assign Dbg_ARADDR_15[11] = \<const0> ;
  assign Dbg_ARADDR_15[10] = \<const0> ;
  assign Dbg_ARADDR_15[9] = \<const0> ;
  assign Dbg_ARADDR_15[8] = \<const0> ;
  assign Dbg_ARADDR_15[7] = \<const0> ;
  assign Dbg_ARADDR_15[6] = \<const0> ;
  assign Dbg_ARADDR_15[5] = \<const0> ;
  assign Dbg_ARADDR_15[4] = \<const0> ;
  assign Dbg_ARADDR_15[3] = \<const0> ;
  assign Dbg_ARADDR_15[2] = \<const0> ;
  assign Dbg_ARADDR_16[14] = \<const0> ;
  assign Dbg_ARADDR_16[13] = \<const0> ;
  assign Dbg_ARADDR_16[12] = \<const0> ;
  assign Dbg_ARADDR_16[11] = \<const0> ;
  assign Dbg_ARADDR_16[10] = \<const0> ;
  assign Dbg_ARADDR_16[9] = \<const0> ;
  assign Dbg_ARADDR_16[8] = \<const0> ;
  assign Dbg_ARADDR_16[7] = \<const0> ;
  assign Dbg_ARADDR_16[6] = \<const0> ;
  assign Dbg_ARADDR_16[5] = \<const0> ;
  assign Dbg_ARADDR_16[4] = \<const0> ;
  assign Dbg_ARADDR_16[3] = \<const0> ;
  assign Dbg_ARADDR_16[2] = \<const0> ;
  assign Dbg_ARADDR_17[14] = \<const0> ;
  assign Dbg_ARADDR_17[13] = \<const0> ;
  assign Dbg_ARADDR_17[12] = \<const0> ;
  assign Dbg_ARADDR_17[11] = \<const0> ;
  assign Dbg_ARADDR_17[10] = \<const0> ;
  assign Dbg_ARADDR_17[9] = \<const0> ;
  assign Dbg_ARADDR_17[8] = \<const0> ;
  assign Dbg_ARADDR_17[7] = \<const0> ;
  assign Dbg_ARADDR_17[6] = \<const0> ;
  assign Dbg_ARADDR_17[5] = \<const0> ;
  assign Dbg_ARADDR_17[4] = \<const0> ;
  assign Dbg_ARADDR_17[3] = \<const0> ;
  assign Dbg_ARADDR_17[2] = \<const0> ;
  assign Dbg_ARADDR_18[14] = \<const0> ;
  assign Dbg_ARADDR_18[13] = \<const0> ;
  assign Dbg_ARADDR_18[12] = \<const0> ;
  assign Dbg_ARADDR_18[11] = \<const0> ;
  assign Dbg_ARADDR_18[10] = \<const0> ;
  assign Dbg_ARADDR_18[9] = \<const0> ;
  assign Dbg_ARADDR_18[8] = \<const0> ;
  assign Dbg_ARADDR_18[7] = \<const0> ;
  assign Dbg_ARADDR_18[6] = \<const0> ;
  assign Dbg_ARADDR_18[5] = \<const0> ;
  assign Dbg_ARADDR_18[4] = \<const0> ;
  assign Dbg_ARADDR_18[3] = \<const0> ;
  assign Dbg_ARADDR_18[2] = \<const0> ;
  assign Dbg_ARADDR_19[14] = \<const0> ;
  assign Dbg_ARADDR_19[13] = \<const0> ;
  assign Dbg_ARADDR_19[12] = \<const0> ;
  assign Dbg_ARADDR_19[11] = \<const0> ;
  assign Dbg_ARADDR_19[10] = \<const0> ;
  assign Dbg_ARADDR_19[9] = \<const0> ;
  assign Dbg_ARADDR_19[8] = \<const0> ;
  assign Dbg_ARADDR_19[7] = \<const0> ;
  assign Dbg_ARADDR_19[6] = \<const0> ;
  assign Dbg_ARADDR_19[5] = \<const0> ;
  assign Dbg_ARADDR_19[4] = \<const0> ;
  assign Dbg_ARADDR_19[3] = \<const0> ;
  assign Dbg_ARADDR_19[2] = \<const0> ;
  assign Dbg_ARADDR_2[14] = \<const0> ;
  assign Dbg_ARADDR_2[13] = \<const0> ;
  assign Dbg_ARADDR_2[12] = \<const0> ;
  assign Dbg_ARADDR_2[11] = \<const0> ;
  assign Dbg_ARADDR_2[10] = \<const0> ;
  assign Dbg_ARADDR_2[9] = \<const0> ;
  assign Dbg_ARADDR_2[8] = \<const0> ;
  assign Dbg_ARADDR_2[7] = \<const0> ;
  assign Dbg_ARADDR_2[6] = \<const0> ;
  assign Dbg_ARADDR_2[5] = \<const0> ;
  assign Dbg_ARADDR_2[4] = \<const0> ;
  assign Dbg_ARADDR_2[3] = \<const0> ;
  assign Dbg_ARADDR_2[2] = \<const0> ;
  assign Dbg_ARADDR_20[14] = \<const0> ;
  assign Dbg_ARADDR_20[13] = \<const0> ;
  assign Dbg_ARADDR_20[12] = \<const0> ;
  assign Dbg_ARADDR_20[11] = \<const0> ;
  assign Dbg_ARADDR_20[10] = \<const0> ;
  assign Dbg_ARADDR_20[9] = \<const0> ;
  assign Dbg_ARADDR_20[8] = \<const0> ;
  assign Dbg_ARADDR_20[7] = \<const0> ;
  assign Dbg_ARADDR_20[6] = \<const0> ;
  assign Dbg_ARADDR_20[5] = \<const0> ;
  assign Dbg_ARADDR_20[4] = \<const0> ;
  assign Dbg_ARADDR_20[3] = \<const0> ;
  assign Dbg_ARADDR_20[2] = \<const0> ;
  assign Dbg_ARADDR_21[14] = \<const0> ;
  assign Dbg_ARADDR_21[13] = \<const0> ;
  assign Dbg_ARADDR_21[12] = \<const0> ;
  assign Dbg_ARADDR_21[11] = \<const0> ;
  assign Dbg_ARADDR_21[10] = \<const0> ;
  assign Dbg_ARADDR_21[9] = \<const0> ;
  assign Dbg_ARADDR_21[8] = \<const0> ;
  assign Dbg_ARADDR_21[7] = \<const0> ;
  assign Dbg_ARADDR_21[6] = \<const0> ;
  assign Dbg_ARADDR_21[5] = \<const0> ;
  assign Dbg_ARADDR_21[4] = \<const0> ;
  assign Dbg_ARADDR_21[3] = \<const0> ;
  assign Dbg_ARADDR_21[2] = \<const0> ;
  assign Dbg_ARADDR_22[14] = \<const0> ;
  assign Dbg_ARADDR_22[13] = \<const0> ;
  assign Dbg_ARADDR_22[12] = \<const0> ;
  assign Dbg_ARADDR_22[11] = \<const0> ;
  assign Dbg_ARADDR_22[10] = \<const0> ;
  assign Dbg_ARADDR_22[9] = \<const0> ;
  assign Dbg_ARADDR_22[8] = \<const0> ;
  assign Dbg_ARADDR_22[7] = \<const0> ;
  assign Dbg_ARADDR_22[6] = \<const0> ;
  assign Dbg_ARADDR_22[5] = \<const0> ;
  assign Dbg_ARADDR_22[4] = \<const0> ;
  assign Dbg_ARADDR_22[3] = \<const0> ;
  assign Dbg_ARADDR_22[2] = \<const0> ;
  assign Dbg_ARADDR_23[14] = \<const0> ;
  assign Dbg_ARADDR_23[13] = \<const0> ;
  assign Dbg_ARADDR_23[12] = \<const0> ;
  assign Dbg_ARADDR_23[11] = \<const0> ;
  assign Dbg_ARADDR_23[10] = \<const0> ;
  assign Dbg_ARADDR_23[9] = \<const0> ;
  assign Dbg_ARADDR_23[8] = \<const0> ;
  assign Dbg_ARADDR_23[7] = \<const0> ;
  assign Dbg_ARADDR_23[6] = \<const0> ;
  assign Dbg_ARADDR_23[5] = \<const0> ;
  assign Dbg_ARADDR_23[4] = \<const0> ;
  assign Dbg_ARADDR_23[3] = \<const0> ;
  assign Dbg_ARADDR_23[2] = \<const0> ;
  assign Dbg_ARADDR_24[14] = \<const0> ;
  assign Dbg_ARADDR_24[13] = \<const0> ;
  assign Dbg_ARADDR_24[12] = \<const0> ;
  assign Dbg_ARADDR_24[11] = \<const0> ;
  assign Dbg_ARADDR_24[10] = \<const0> ;
  assign Dbg_ARADDR_24[9] = \<const0> ;
  assign Dbg_ARADDR_24[8] = \<const0> ;
  assign Dbg_ARADDR_24[7] = \<const0> ;
  assign Dbg_ARADDR_24[6] = \<const0> ;
  assign Dbg_ARADDR_24[5] = \<const0> ;
  assign Dbg_ARADDR_24[4] = \<const0> ;
  assign Dbg_ARADDR_24[3] = \<const0> ;
  assign Dbg_ARADDR_24[2] = \<const0> ;
  assign Dbg_ARADDR_25[14] = \<const0> ;
  assign Dbg_ARADDR_25[13] = \<const0> ;
  assign Dbg_ARADDR_25[12] = \<const0> ;
  assign Dbg_ARADDR_25[11] = \<const0> ;
  assign Dbg_ARADDR_25[10] = \<const0> ;
  assign Dbg_ARADDR_25[9] = \<const0> ;
  assign Dbg_ARADDR_25[8] = \<const0> ;
  assign Dbg_ARADDR_25[7] = \<const0> ;
  assign Dbg_ARADDR_25[6] = \<const0> ;
  assign Dbg_ARADDR_25[5] = \<const0> ;
  assign Dbg_ARADDR_25[4] = \<const0> ;
  assign Dbg_ARADDR_25[3] = \<const0> ;
  assign Dbg_ARADDR_25[2] = \<const0> ;
  assign Dbg_ARADDR_26[14] = \<const0> ;
  assign Dbg_ARADDR_26[13] = \<const0> ;
  assign Dbg_ARADDR_26[12] = \<const0> ;
  assign Dbg_ARADDR_26[11] = \<const0> ;
  assign Dbg_ARADDR_26[10] = \<const0> ;
  assign Dbg_ARADDR_26[9] = \<const0> ;
  assign Dbg_ARADDR_26[8] = \<const0> ;
  assign Dbg_ARADDR_26[7] = \<const0> ;
  assign Dbg_ARADDR_26[6] = \<const0> ;
  assign Dbg_ARADDR_26[5] = \<const0> ;
  assign Dbg_ARADDR_26[4] = \<const0> ;
  assign Dbg_ARADDR_26[3] = \<const0> ;
  assign Dbg_ARADDR_26[2] = \<const0> ;
  assign Dbg_ARADDR_27[14] = \<const0> ;
  assign Dbg_ARADDR_27[13] = \<const0> ;
  assign Dbg_ARADDR_27[12] = \<const0> ;
  assign Dbg_ARADDR_27[11] = \<const0> ;
  assign Dbg_ARADDR_27[10] = \<const0> ;
  assign Dbg_ARADDR_27[9] = \<const0> ;
  assign Dbg_ARADDR_27[8] = \<const0> ;
  assign Dbg_ARADDR_27[7] = \<const0> ;
  assign Dbg_ARADDR_27[6] = \<const0> ;
  assign Dbg_ARADDR_27[5] = \<const0> ;
  assign Dbg_ARADDR_27[4] = \<const0> ;
  assign Dbg_ARADDR_27[3] = \<const0> ;
  assign Dbg_ARADDR_27[2] = \<const0> ;
  assign Dbg_ARADDR_28[14] = \<const0> ;
  assign Dbg_ARADDR_28[13] = \<const0> ;
  assign Dbg_ARADDR_28[12] = \<const0> ;
  assign Dbg_ARADDR_28[11] = \<const0> ;
  assign Dbg_ARADDR_28[10] = \<const0> ;
  assign Dbg_ARADDR_28[9] = \<const0> ;
  assign Dbg_ARADDR_28[8] = \<const0> ;
  assign Dbg_ARADDR_28[7] = \<const0> ;
  assign Dbg_ARADDR_28[6] = \<const0> ;
  assign Dbg_ARADDR_28[5] = \<const0> ;
  assign Dbg_ARADDR_28[4] = \<const0> ;
  assign Dbg_ARADDR_28[3] = \<const0> ;
  assign Dbg_ARADDR_28[2] = \<const0> ;
  assign Dbg_ARADDR_29[14] = \<const0> ;
  assign Dbg_ARADDR_29[13] = \<const0> ;
  assign Dbg_ARADDR_29[12] = \<const0> ;
  assign Dbg_ARADDR_29[11] = \<const0> ;
  assign Dbg_ARADDR_29[10] = \<const0> ;
  assign Dbg_ARADDR_29[9] = \<const0> ;
  assign Dbg_ARADDR_29[8] = \<const0> ;
  assign Dbg_ARADDR_29[7] = \<const0> ;
  assign Dbg_ARADDR_29[6] = \<const0> ;
  assign Dbg_ARADDR_29[5] = \<const0> ;
  assign Dbg_ARADDR_29[4] = \<const0> ;
  assign Dbg_ARADDR_29[3] = \<const0> ;
  assign Dbg_ARADDR_29[2] = \<const0> ;
  assign Dbg_ARADDR_3[14] = \<const0> ;
  assign Dbg_ARADDR_3[13] = \<const0> ;
  assign Dbg_ARADDR_3[12] = \<const0> ;
  assign Dbg_ARADDR_3[11] = \<const0> ;
  assign Dbg_ARADDR_3[10] = \<const0> ;
  assign Dbg_ARADDR_3[9] = \<const0> ;
  assign Dbg_ARADDR_3[8] = \<const0> ;
  assign Dbg_ARADDR_3[7] = \<const0> ;
  assign Dbg_ARADDR_3[6] = \<const0> ;
  assign Dbg_ARADDR_3[5] = \<const0> ;
  assign Dbg_ARADDR_3[4] = \<const0> ;
  assign Dbg_ARADDR_3[3] = \<const0> ;
  assign Dbg_ARADDR_3[2] = \<const0> ;
  assign Dbg_ARADDR_30[14] = \<const0> ;
  assign Dbg_ARADDR_30[13] = \<const0> ;
  assign Dbg_ARADDR_30[12] = \<const0> ;
  assign Dbg_ARADDR_30[11] = \<const0> ;
  assign Dbg_ARADDR_30[10] = \<const0> ;
  assign Dbg_ARADDR_30[9] = \<const0> ;
  assign Dbg_ARADDR_30[8] = \<const0> ;
  assign Dbg_ARADDR_30[7] = \<const0> ;
  assign Dbg_ARADDR_30[6] = \<const0> ;
  assign Dbg_ARADDR_30[5] = \<const0> ;
  assign Dbg_ARADDR_30[4] = \<const0> ;
  assign Dbg_ARADDR_30[3] = \<const0> ;
  assign Dbg_ARADDR_30[2] = \<const0> ;
  assign Dbg_ARADDR_31[14] = \<const0> ;
  assign Dbg_ARADDR_31[13] = \<const0> ;
  assign Dbg_ARADDR_31[12] = \<const0> ;
  assign Dbg_ARADDR_31[11] = \<const0> ;
  assign Dbg_ARADDR_31[10] = \<const0> ;
  assign Dbg_ARADDR_31[9] = \<const0> ;
  assign Dbg_ARADDR_31[8] = \<const0> ;
  assign Dbg_ARADDR_31[7] = \<const0> ;
  assign Dbg_ARADDR_31[6] = \<const0> ;
  assign Dbg_ARADDR_31[5] = \<const0> ;
  assign Dbg_ARADDR_31[4] = \<const0> ;
  assign Dbg_ARADDR_31[3] = \<const0> ;
  assign Dbg_ARADDR_31[2] = \<const0> ;
  assign Dbg_ARADDR_4[14] = \<const0> ;
  assign Dbg_ARADDR_4[13] = \<const0> ;
  assign Dbg_ARADDR_4[12] = \<const0> ;
  assign Dbg_ARADDR_4[11] = \<const0> ;
  assign Dbg_ARADDR_4[10] = \<const0> ;
  assign Dbg_ARADDR_4[9] = \<const0> ;
  assign Dbg_ARADDR_4[8] = \<const0> ;
  assign Dbg_ARADDR_4[7] = \<const0> ;
  assign Dbg_ARADDR_4[6] = \<const0> ;
  assign Dbg_ARADDR_4[5] = \<const0> ;
  assign Dbg_ARADDR_4[4] = \<const0> ;
  assign Dbg_ARADDR_4[3] = \<const0> ;
  assign Dbg_ARADDR_4[2] = \<const0> ;
  assign Dbg_ARADDR_5[14] = \<const0> ;
  assign Dbg_ARADDR_5[13] = \<const0> ;
  assign Dbg_ARADDR_5[12] = \<const0> ;
  assign Dbg_ARADDR_5[11] = \<const0> ;
  assign Dbg_ARADDR_5[10] = \<const0> ;
  assign Dbg_ARADDR_5[9] = \<const0> ;
  assign Dbg_ARADDR_5[8] = \<const0> ;
  assign Dbg_ARADDR_5[7] = \<const0> ;
  assign Dbg_ARADDR_5[6] = \<const0> ;
  assign Dbg_ARADDR_5[5] = \<const0> ;
  assign Dbg_ARADDR_5[4] = \<const0> ;
  assign Dbg_ARADDR_5[3] = \<const0> ;
  assign Dbg_ARADDR_5[2] = \<const0> ;
  assign Dbg_ARADDR_6[14] = \<const0> ;
  assign Dbg_ARADDR_6[13] = \<const0> ;
  assign Dbg_ARADDR_6[12] = \<const0> ;
  assign Dbg_ARADDR_6[11] = \<const0> ;
  assign Dbg_ARADDR_6[10] = \<const0> ;
  assign Dbg_ARADDR_6[9] = \<const0> ;
  assign Dbg_ARADDR_6[8] = \<const0> ;
  assign Dbg_ARADDR_6[7] = \<const0> ;
  assign Dbg_ARADDR_6[6] = \<const0> ;
  assign Dbg_ARADDR_6[5] = \<const0> ;
  assign Dbg_ARADDR_6[4] = \<const0> ;
  assign Dbg_ARADDR_6[3] = \<const0> ;
  assign Dbg_ARADDR_6[2] = \<const0> ;
  assign Dbg_ARADDR_7[14] = \<const0> ;
  assign Dbg_ARADDR_7[13] = \<const0> ;
  assign Dbg_ARADDR_7[12] = \<const0> ;
  assign Dbg_ARADDR_7[11] = \<const0> ;
  assign Dbg_ARADDR_7[10] = \<const0> ;
  assign Dbg_ARADDR_7[9] = \<const0> ;
  assign Dbg_ARADDR_7[8] = \<const0> ;
  assign Dbg_ARADDR_7[7] = \<const0> ;
  assign Dbg_ARADDR_7[6] = \<const0> ;
  assign Dbg_ARADDR_7[5] = \<const0> ;
  assign Dbg_ARADDR_7[4] = \<const0> ;
  assign Dbg_ARADDR_7[3] = \<const0> ;
  assign Dbg_ARADDR_7[2] = \<const0> ;
  assign Dbg_ARADDR_8[14] = \<const0> ;
  assign Dbg_ARADDR_8[13] = \<const0> ;
  assign Dbg_ARADDR_8[12] = \<const0> ;
  assign Dbg_ARADDR_8[11] = \<const0> ;
  assign Dbg_ARADDR_8[10] = \<const0> ;
  assign Dbg_ARADDR_8[9] = \<const0> ;
  assign Dbg_ARADDR_8[8] = \<const0> ;
  assign Dbg_ARADDR_8[7] = \<const0> ;
  assign Dbg_ARADDR_8[6] = \<const0> ;
  assign Dbg_ARADDR_8[5] = \<const0> ;
  assign Dbg_ARADDR_8[4] = \<const0> ;
  assign Dbg_ARADDR_8[3] = \<const0> ;
  assign Dbg_ARADDR_8[2] = \<const0> ;
  assign Dbg_ARADDR_9[14] = \<const0> ;
  assign Dbg_ARADDR_9[13] = \<const0> ;
  assign Dbg_ARADDR_9[12] = \<const0> ;
  assign Dbg_ARADDR_9[11] = \<const0> ;
  assign Dbg_ARADDR_9[10] = \<const0> ;
  assign Dbg_ARADDR_9[9] = \<const0> ;
  assign Dbg_ARADDR_9[8] = \<const0> ;
  assign Dbg_ARADDR_9[7] = \<const0> ;
  assign Dbg_ARADDR_9[6] = \<const0> ;
  assign Dbg_ARADDR_9[5] = \<const0> ;
  assign Dbg_ARADDR_9[4] = \<const0> ;
  assign Dbg_ARADDR_9[3] = \<const0> ;
  assign Dbg_ARADDR_9[2] = \<const0> ;
  assign Dbg_ARVALID_0 = \<const0> ;
  assign Dbg_ARVALID_1 = \<const0> ;
  assign Dbg_ARVALID_10 = \<const0> ;
  assign Dbg_ARVALID_11 = \<const0> ;
  assign Dbg_ARVALID_12 = \<const0> ;
  assign Dbg_ARVALID_13 = \<const0> ;
  assign Dbg_ARVALID_14 = \<const0> ;
  assign Dbg_ARVALID_15 = \<const0> ;
  assign Dbg_ARVALID_16 = \<const0> ;
  assign Dbg_ARVALID_17 = \<const0> ;
  assign Dbg_ARVALID_18 = \<const0> ;
  assign Dbg_ARVALID_19 = \<const0> ;
  assign Dbg_ARVALID_2 = \<const0> ;
  assign Dbg_ARVALID_20 = \<const0> ;
  assign Dbg_ARVALID_21 = \<const0> ;
  assign Dbg_ARVALID_22 = \<const0> ;
  assign Dbg_ARVALID_23 = \<const0> ;
  assign Dbg_ARVALID_24 = \<const0> ;
  assign Dbg_ARVALID_25 = \<const0> ;
  assign Dbg_ARVALID_26 = \<const0> ;
  assign Dbg_ARVALID_27 = \<const0> ;
  assign Dbg_ARVALID_28 = \<const0> ;
  assign Dbg_ARVALID_29 = \<const0> ;
  assign Dbg_ARVALID_3 = \<const0> ;
  assign Dbg_ARVALID_30 = \<const0> ;
  assign Dbg_ARVALID_31 = \<const0> ;
  assign Dbg_ARVALID_4 = \<const0> ;
  assign Dbg_ARVALID_5 = \<const0> ;
  assign Dbg_ARVALID_6 = \<const0> ;
  assign Dbg_ARVALID_7 = \<const0> ;
  assign Dbg_ARVALID_8 = \<const0> ;
  assign Dbg_ARVALID_9 = \<const0> ;
  assign Dbg_AWADDR_0[14] = \<const0> ;
  assign Dbg_AWADDR_0[13] = \<const0> ;
  assign Dbg_AWADDR_0[12] = \<const0> ;
  assign Dbg_AWADDR_0[11] = \<const0> ;
  assign Dbg_AWADDR_0[10] = \<const0> ;
  assign Dbg_AWADDR_0[9] = \<const0> ;
  assign Dbg_AWADDR_0[8] = \<const0> ;
  assign Dbg_AWADDR_0[7] = \<const0> ;
  assign Dbg_AWADDR_0[6] = \<const0> ;
  assign Dbg_AWADDR_0[5] = \<const0> ;
  assign Dbg_AWADDR_0[4] = \<const0> ;
  assign Dbg_AWADDR_0[3] = \<const0> ;
  assign Dbg_AWADDR_0[2] = \<const0> ;
  assign Dbg_AWADDR_1[14] = \<const0> ;
  assign Dbg_AWADDR_1[13] = \<const0> ;
  assign Dbg_AWADDR_1[12] = \<const0> ;
  assign Dbg_AWADDR_1[11] = \<const0> ;
  assign Dbg_AWADDR_1[10] = \<const0> ;
  assign Dbg_AWADDR_1[9] = \<const0> ;
  assign Dbg_AWADDR_1[8] = \<const0> ;
  assign Dbg_AWADDR_1[7] = \<const0> ;
  assign Dbg_AWADDR_1[6] = \<const0> ;
  assign Dbg_AWADDR_1[5] = \<const0> ;
  assign Dbg_AWADDR_1[4] = \<const0> ;
  assign Dbg_AWADDR_1[3] = \<const0> ;
  assign Dbg_AWADDR_1[2] = \<const0> ;
  assign Dbg_AWADDR_10[14] = \<const0> ;
  assign Dbg_AWADDR_10[13] = \<const0> ;
  assign Dbg_AWADDR_10[12] = \<const0> ;
  assign Dbg_AWADDR_10[11] = \<const0> ;
  assign Dbg_AWADDR_10[10] = \<const0> ;
  assign Dbg_AWADDR_10[9] = \<const0> ;
  assign Dbg_AWADDR_10[8] = \<const0> ;
  assign Dbg_AWADDR_10[7] = \<const0> ;
  assign Dbg_AWADDR_10[6] = \<const0> ;
  assign Dbg_AWADDR_10[5] = \<const0> ;
  assign Dbg_AWADDR_10[4] = \<const0> ;
  assign Dbg_AWADDR_10[3] = \<const0> ;
  assign Dbg_AWADDR_10[2] = \<const0> ;
  assign Dbg_AWADDR_11[14] = \<const0> ;
  assign Dbg_AWADDR_11[13] = \<const0> ;
  assign Dbg_AWADDR_11[12] = \<const0> ;
  assign Dbg_AWADDR_11[11] = \<const0> ;
  assign Dbg_AWADDR_11[10] = \<const0> ;
  assign Dbg_AWADDR_11[9] = \<const0> ;
  assign Dbg_AWADDR_11[8] = \<const0> ;
  assign Dbg_AWADDR_11[7] = \<const0> ;
  assign Dbg_AWADDR_11[6] = \<const0> ;
  assign Dbg_AWADDR_11[5] = \<const0> ;
  assign Dbg_AWADDR_11[4] = \<const0> ;
  assign Dbg_AWADDR_11[3] = \<const0> ;
  assign Dbg_AWADDR_11[2] = \<const0> ;
  assign Dbg_AWADDR_12[14] = \<const0> ;
  assign Dbg_AWADDR_12[13] = \<const0> ;
  assign Dbg_AWADDR_12[12] = \<const0> ;
  assign Dbg_AWADDR_12[11] = \<const0> ;
  assign Dbg_AWADDR_12[10] = \<const0> ;
  assign Dbg_AWADDR_12[9] = \<const0> ;
  assign Dbg_AWADDR_12[8] = \<const0> ;
  assign Dbg_AWADDR_12[7] = \<const0> ;
  assign Dbg_AWADDR_12[6] = \<const0> ;
  assign Dbg_AWADDR_12[5] = \<const0> ;
  assign Dbg_AWADDR_12[4] = \<const0> ;
  assign Dbg_AWADDR_12[3] = \<const0> ;
  assign Dbg_AWADDR_12[2] = \<const0> ;
  assign Dbg_AWADDR_13[14] = \<const0> ;
  assign Dbg_AWADDR_13[13] = \<const0> ;
  assign Dbg_AWADDR_13[12] = \<const0> ;
  assign Dbg_AWADDR_13[11] = \<const0> ;
  assign Dbg_AWADDR_13[10] = \<const0> ;
  assign Dbg_AWADDR_13[9] = \<const0> ;
  assign Dbg_AWADDR_13[8] = \<const0> ;
  assign Dbg_AWADDR_13[7] = \<const0> ;
  assign Dbg_AWADDR_13[6] = \<const0> ;
  assign Dbg_AWADDR_13[5] = \<const0> ;
  assign Dbg_AWADDR_13[4] = \<const0> ;
  assign Dbg_AWADDR_13[3] = \<const0> ;
  assign Dbg_AWADDR_13[2] = \<const0> ;
  assign Dbg_AWADDR_14[14] = \<const0> ;
  assign Dbg_AWADDR_14[13] = \<const0> ;
  assign Dbg_AWADDR_14[12] = \<const0> ;
  assign Dbg_AWADDR_14[11] = \<const0> ;
  assign Dbg_AWADDR_14[10] = \<const0> ;
  assign Dbg_AWADDR_14[9] = \<const0> ;
  assign Dbg_AWADDR_14[8] = \<const0> ;
  assign Dbg_AWADDR_14[7] = \<const0> ;
  assign Dbg_AWADDR_14[6] = \<const0> ;
  assign Dbg_AWADDR_14[5] = \<const0> ;
  assign Dbg_AWADDR_14[4] = \<const0> ;
  assign Dbg_AWADDR_14[3] = \<const0> ;
  assign Dbg_AWADDR_14[2] = \<const0> ;
  assign Dbg_AWADDR_15[14] = \<const0> ;
  assign Dbg_AWADDR_15[13] = \<const0> ;
  assign Dbg_AWADDR_15[12] = \<const0> ;
  assign Dbg_AWADDR_15[11] = \<const0> ;
  assign Dbg_AWADDR_15[10] = \<const0> ;
  assign Dbg_AWADDR_15[9] = \<const0> ;
  assign Dbg_AWADDR_15[8] = \<const0> ;
  assign Dbg_AWADDR_15[7] = \<const0> ;
  assign Dbg_AWADDR_15[6] = \<const0> ;
  assign Dbg_AWADDR_15[5] = \<const0> ;
  assign Dbg_AWADDR_15[4] = \<const0> ;
  assign Dbg_AWADDR_15[3] = \<const0> ;
  assign Dbg_AWADDR_15[2] = \<const0> ;
  assign Dbg_AWADDR_16[14] = \<const0> ;
  assign Dbg_AWADDR_16[13] = \<const0> ;
  assign Dbg_AWADDR_16[12] = \<const0> ;
  assign Dbg_AWADDR_16[11] = \<const0> ;
  assign Dbg_AWADDR_16[10] = \<const0> ;
  assign Dbg_AWADDR_16[9] = \<const0> ;
  assign Dbg_AWADDR_16[8] = \<const0> ;
  assign Dbg_AWADDR_16[7] = \<const0> ;
  assign Dbg_AWADDR_16[6] = \<const0> ;
  assign Dbg_AWADDR_16[5] = \<const0> ;
  assign Dbg_AWADDR_16[4] = \<const0> ;
  assign Dbg_AWADDR_16[3] = \<const0> ;
  assign Dbg_AWADDR_16[2] = \<const0> ;
  assign Dbg_AWADDR_17[14] = \<const0> ;
  assign Dbg_AWADDR_17[13] = \<const0> ;
  assign Dbg_AWADDR_17[12] = \<const0> ;
  assign Dbg_AWADDR_17[11] = \<const0> ;
  assign Dbg_AWADDR_17[10] = \<const0> ;
  assign Dbg_AWADDR_17[9] = \<const0> ;
  assign Dbg_AWADDR_17[8] = \<const0> ;
  assign Dbg_AWADDR_17[7] = \<const0> ;
  assign Dbg_AWADDR_17[6] = \<const0> ;
  assign Dbg_AWADDR_17[5] = \<const0> ;
  assign Dbg_AWADDR_17[4] = \<const0> ;
  assign Dbg_AWADDR_17[3] = \<const0> ;
  assign Dbg_AWADDR_17[2] = \<const0> ;
  assign Dbg_AWADDR_18[14] = \<const0> ;
  assign Dbg_AWADDR_18[13] = \<const0> ;
  assign Dbg_AWADDR_18[12] = \<const0> ;
  assign Dbg_AWADDR_18[11] = \<const0> ;
  assign Dbg_AWADDR_18[10] = \<const0> ;
  assign Dbg_AWADDR_18[9] = \<const0> ;
  assign Dbg_AWADDR_18[8] = \<const0> ;
  assign Dbg_AWADDR_18[7] = \<const0> ;
  assign Dbg_AWADDR_18[6] = \<const0> ;
  assign Dbg_AWADDR_18[5] = \<const0> ;
  assign Dbg_AWADDR_18[4] = \<const0> ;
  assign Dbg_AWADDR_18[3] = \<const0> ;
  assign Dbg_AWADDR_18[2] = \<const0> ;
  assign Dbg_AWADDR_19[14] = \<const0> ;
  assign Dbg_AWADDR_19[13] = \<const0> ;
  assign Dbg_AWADDR_19[12] = \<const0> ;
  assign Dbg_AWADDR_19[11] = \<const0> ;
  assign Dbg_AWADDR_19[10] = \<const0> ;
  assign Dbg_AWADDR_19[9] = \<const0> ;
  assign Dbg_AWADDR_19[8] = \<const0> ;
  assign Dbg_AWADDR_19[7] = \<const0> ;
  assign Dbg_AWADDR_19[6] = \<const0> ;
  assign Dbg_AWADDR_19[5] = \<const0> ;
  assign Dbg_AWADDR_19[4] = \<const0> ;
  assign Dbg_AWADDR_19[3] = \<const0> ;
  assign Dbg_AWADDR_19[2] = \<const0> ;
  assign Dbg_AWADDR_2[14] = \<const0> ;
  assign Dbg_AWADDR_2[13] = \<const0> ;
  assign Dbg_AWADDR_2[12] = \<const0> ;
  assign Dbg_AWADDR_2[11] = \<const0> ;
  assign Dbg_AWADDR_2[10] = \<const0> ;
  assign Dbg_AWADDR_2[9] = \<const0> ;
  assign Dbg_AWADDR_2[8] = \<const0> ;
  assign Dbg_AWADDR_2[7] = \<const0> ;
  assign Dbg_AWADDR_2[6] = \<const0> ;
  assign Dbg_AWADDR_2[5] = \<const0> ;
  assign Dbg_AWADDR_2[4] = \<const0> ;
  assign Dbg_AWADDR_2[3] = \<const0> ;
  assign Dbg_AWADDR_2[2] = \<const0> ;
  assign Dbg_AWADDR_20[14] = \<const0> ;
  assign Dbg_AWADDR_20[13] = \<const0> ;
  assign Dbg_AWADDR_20[12] = \<const0> ;
  assign Dbg_AWADDR_20[11] = \<const0> ;
  assign Dbg_AWADDR_20[10] = \<const0> ;
  assign Dbg_AWADDR_20[9] = \<const0> ;
  assign Dbg_AWADDR_20[8] = \<const0> ;
  assign Dbg_AWADDR_20[7] = \<const0> ;
  assign Dbg_AWADDR_20[6] = \<const0> ;
  assign Dbg_AWADDR_20[5] = \<const0> ;
  assign Dbg_AWADDR_20[4] = \<const0> ;
  assign Dbg_AWADDR_20[3] = \<const0> ;
  assign Dbg_AWADDR_20[2] = \<const0> ;
  assign Dbg_AWADDR_21[14] = \<const0> ;
  assign Dbg_AWADDR_21[13] = \<const0> ;
  assign Dbg_AWADDR_21[12] = \<const0> ;
  assign Dbg_AWADDR_21[11] = \<const0> ;
  assign Dbg_AWADDR_21[10] = \<const0> ;
  assign Dbg_AWADDR_21[9] = \<const0> ;
  assign Dbg_AWADDR_21[8] = \<const0> ;
  assign Dbg_AWADDR_21[7] = \<const0> ;
  assign Dbg_AWADDR_21[6] = \<const0> ;
  assign Dbg_AWADDR_21[5] = \<const0> ;
  assign Dbg_AWADDR_21[4] = \<const0> ;
  assign Dbg_AWADDR_21[3] = \<const0> ;
  assign Dbg_AWADDR_21[2] = \<const0> ;
  assign Dbg_AWADDR_22[14] = \<const0> ;
  assign Dbg_AWADDR_22[13] = \<const0> ;
  assign Dbg_AWADDR_22[12] = \<const0> ;
  assign Dbg_AWADDR_22[11] = \<const0> ;
  assign Dbg_AWADDR_22[10] = \<const0> ;
  assign Dbg_AWADDR_22[9] = \<const0> ;
  assign Dbg_AWADDR_22[8] = \<const0> ;
  assign Dbg_AWADDR_22[7] = \<const0> ;
  assign Dbg_AWADDR_22[6] = \<const0> ;
  assign Dbg_AWADDR_22[5] = \<const0> ;
  assign Dbg_AWADDR_22[4] = \<const0> ;
  assign Dbg_AWADDR_22[3] = \<const0> ;
  assign Dbg_AWADDR_22[2] = \<const0> ;
  assign Dbg_AWADDR_23[14] = \<const0> ;
  assign Dbg_AWADDR_23[13] = \<const0> ;
  assign Dbg_AWADDR_23[12] = \<const0> ;
  assign Dbg_AWADDR_23[11] = \<const0> ;
  assign Dbg_AWADDR_23[10] = \<const0> ;
  assign Dbg_AWADDR_23[9] = \<const0> ;
  assign Dbg_AWADDR_23[8] = \<const0> ;
  assign Dbg_AWADDR_23[7] = \<const0> ;
  assign Dbg_AWADDR_23[6] = \<const0> ;
  assign Dbg_AWADDR_23[5] = \<const0> ;
  assign Dbg_AWADDR_23[4] = \<const0> ;
  assign Dbg_AWADDR_23[3] = \<const0> ;
  assign Dbg_AWADDR_23[2] = \<const0> ;
  assign Dbg_AWADDR_24[14] = \<const0> ;
  assign Dbg_AWADDR_24[13] = \<const0> ;
  assign Dbg_AWADDR_24[12] = \<const0> ;
  assign Dbg_AWADDR_24[11] = \<const0> ;
  assign Dbg_AWADDR_24[10] = \<const0> ;
  assign Dbg_AWADDR_24[9] = \<const0> ;
  assign Dbg_AWADDR_24[8] = \<const0> ;
  assign Dbg_AWADDR_24[7] = \<const0> ;
  assign Dbg_AWADDR_24[6] = \<const0> ;
  assign Dbg_AWADDR_24[5] = \<const0> ;
  assign Dbg_AWADDR_24[4] = \<const0> ;
  assign Dbg_AWADDR_24[3] = \<const0> ;
  assign Dbg_AWADDR_24[2] = \<const0> ;
  assign Dbg_AWADDR_25[14] = \<const0> ;
  assign Dbg_AWADDR_25[13] = \<const0> ;
  assign Dbg_AWADDR_25[12] = \<const0> ;
  assign Dbg_AWADDR_25[11] = \<const0> ;
  assign Dbg_AWADDR_25[10] = \<const0> ;
  assign Dbg_AWADDR_25[9] = \<const0> ;
  assign Dbg_AWADDR_25[8] = \<const0> ;
  assign Dbg_AWADDR_25[7] = \<const0> ;
  assign Dbg_AWADDR_25[6] = \<const0> ;
  assign Dbg_AWADDR_25[5] = \<const0> ;
  assign Dbg_AWADDR_25[4] = \<const0> ;
  assign Dbg_AWADDR_25[3] = \<const0> ;
  assign Dbg_AWADDR_25[2] = \<const0> ;
  assign Dbg_AWADDR_26[14] = \<const0> ;
  assign Dbg_AWADDR_26[13] = \<const0> ;
  assign Dbg_AWADDR_26[12] = \<const0> ;
  assign Dbg_AWADDR_26[11] = \<const0> ;
  assign Dbg_AWADDR_26[10] = \<const0> ;
  assign Dbg_AWADDR_26[9] = \<const0> ;
  assign Dbg_AWADDR_26[8] = \<const0> ;
  assign Dbg_AWADDR_26[7] = \<const0> ;
  assign Dbg_AWADDR_26[6] = \<const0> ;
  assign Dbg_AWADDR_26[5] = \<const0> ;
  assign Dbg_AWADDR_26[4] = \<const0> ;
  assign Dbg_AWADDR_26[3] = \<const0> ;
  assign Dbg_AWADDR_26[2] = \<const0> ;
  assign Dbg_AWADDR_27[14] = \<const0> ;
  assign Dbg_AWADDR_27[13] = \<const0> ;
  assign Dbg_AWADDR_27[12] = \<const0> ;
  assign Dbg_AWADDR_27[11] = \<const0> ;
  assign Dbg_AWADDR_27[10] = \<const0> ;
  assign Dbg_AWADDR_27[9] = \<const0> ;
  assign Dbg_AWADDR_27[8] = \<const0> ;
  assign Dbg_AWADDR_27[7] = \<const0> ;
  assign Dbg_AWADDR_27[6] = \<const0> ;
  assign Dbg_AWADDR_27[5] = \<const0> ;
  assign Dbg_AWADDR_27[4] = \<const0> ;
  assign Dbg_AWADDR_27[3] = \<const0> ;
  assign Dbg_AWADDR_27[2] = \<const0> ;
  assign Dbg_AWADDR_28[14] = \<const0> ;
  assign Dbg_AWADDR_28[13] = \<const0> ;
  assign Dbg_AWADDR_28[12] = \<const0> ;
  assign Dbg_AWADDR_28[11] = \<const0> ;
  assign Dbg_AWADDR_28[10] = \<const0> ;
  assign Dbg_AWADDR_28[9] = \<const0> ;
  assign Dbg_AWADDR_28[8] = \<const0> ;
  assign Dbg_AWADDR_28[7] = \<const0> ;
  assign Dbg_AWADDR_28[6] = \<const0> ;
  assign Dbg_AWADDR_28[5] = \<const0> ;
  assign Dbg_AWADDR_28[4] = \<const0> ;
  assign Dbg_AWADDR_28[3] = \<const0> ;
  assign Dbg_AWADDR_28[2] = \<const0> ;
  assign Dbg_AWADDR_29[14] = \<const0> ;
  assign Dbg_AWADDR_29[13] = \<const0> ;
  assign Dbg_AWADDR_29[12] = \<const0> ;
  assign Dbg_AWADDR_29[11] = \<const0> ;
  assign Dbg_AWADDR_29[10] = \<const0> ;
  assign Dbg_AWADDR_29[9] = \<const0> ;
  assign Dbg_AWADDR_29[8] = \<const0> ;
  assign Dbg_AWADDR_29[7] = \<const0> ;
  assign Dbg_AWADDR_29[6] = \<const0> ;
  assign Dbg_AWADDR_29[5] = \<const0> ;
  assign Dbg_AWADDR_29[4] = \<const0> ;
  assign Dbg_AWADDR_29[3] = \<const0> ;
  assign Dbg_AWADDR_29[2] = \<const0> ;
  assign Dbg_AWADDR_3[14] = \<const0> ;
  assign Dbg_AWADDR_3[13] = \<const0> ;
  assign Dbg_AWADDR_3[12] = \<const0> ;
  assign Dbg_AWADDR_3[11] = \<const0> ;
  assign Dbg_AWADDR_3[10] = \<const0> ;
  assign Dbg_AWADDR_3[9] = \<const0> ;
  assign Dbg_AWADDR_3[8] = \<const0> ;
  assign Dbg_AWADDR_3[7] = \<const0> ;
  assign Dbg_AWADDR_3[6] = \<const0> ;
  assign Dbg_AWADDR_3[5] = \<const0> ;
  assign Dbg_AWADDR_3[4] = \<const0> ;
  assign Dbg_AWADDR_3[3] = \<const0> ;
  assign Dbg_AWADDR_3[2] = \<const0> ;
  assign Dbg_AWADDR_30[14] = \<const0> ;
  assign Dbg_AWADDR_30[13] = \<const0> ;
  assign Dbg_AWADDR_30[12] = \<const0> ;
  assign Dbg_AWADDR_30[11] = \<const0> ;
  assign Dbg_AWADDR_30[10] = \<const0> ;
  assign Dbg_AWADDR_30[9] = \<const0> ;
  assign Dbg_AWADDR_30[8] = \<const0> ;
  assign Dbg_AWADDR_30[7] = \<const0> ;
  assign Dbg_AWADDR_30[6] = \<const0> ;
  assign Dbg_AWADDR_30[5] = \<const0> ;
  assign Dbg_AWADDR_30[4] = \<const0> ;
  assign Dbg_AWADDR_30[3] = \<const0> ;
  assign Dbg_AWADDR_30[2] = \<const0> ;
  assign Dbg_AWADDR_31[14] = \<const0> ;
  assign Dbg_AWADDR_31[13] = \<const0> ;
  assign Dbg_AWADDR_31[12] = \<const0> ;
  assign Dbg_AWADDR_31[11] = \<const0> ;
  assign Dbg_AWADDR_31[10] = \<const0> ;
  assign Dbg_AWADDR_31[9] = \<const0> ;
  assign Dbg_AWADDR_31[8] = \<const0> ;
  assign Dbg_AWADDR_31[7] = \<const0> ;
  assign Dbg_AWADDR_31[6] = \<const0> ;
  assign Dbg_AWADDR_31[5] = \<const0> ;
  assign Dbg_AWADDR_31[4] = \<const0> ;
  assign Dbg_AWADDR_31[3] = \<const0> ;
  assign Dbg_AWADDR_31[2] = \<const0> ;
  assign Dbg_AWADDR_4[14] = \<const0> ;
  assign Dbg_AWADDR_4[13] = \<const0> ;
  assign Dbg_AWADDR_4[12] = \<const0> ;
  assign Dbg_AWADDR_4[11] = \<const0> ;
  assign Dbg_AWADDR_4[10] = \<const0> ;
  assign Dbg_AWADDR_4[9] = \<const0> ;
  assign Dbg_AWADDR_4[8] = \<const0> ;
  assign Dbg_AWADDR_4[7] = \<const0> ;
  assign Dbg_AWADDR_4[6] = \<const0> ;
  assign Dbg_AWADDR_4[5] = \<const0> ;
  assign Dbg_AWADDR_4[4] = \<const0> ;
  assign Dbg_AWADDR_4[3] = \<const0> ;
  assign Dbg_AWADDR_4[2] = \<const0> ;
  assign Dbg_AWADDR_5[14] = \<const0> ;
  assign Dbg_AWADDR_5[13] = \<const0> ;
  assign Dbg_AWADDR_5[12] = \<const0> ;
  assign Dbg_AWADDR_5[11] = \<const0> ;
  assign Dbg_AWADDR_5[10] = \<const0> ;
  assign Dbg_AWADDR_5[9] = \<const0> ;
  assign Dbg_AWADDR_5[8] = \<const0> ;
  assign Dbg_AWADDR_5[7] = \<const0> ;
  assign Dbg_AWADDR_5[6] = \<const0> ;
  assign Dbg_AWADDR_5[5] = \<const0> ;
  assign Dbg_AWADDR_5[4] = \<const0> ;
  assign Dbg_AWADDR_5[3] = \<const0> ;
  assign Dbg_AWADDR_5[2] = \<const0> ;
  assign Dbg_AWADDR_6[14] = \<const0> ;
  assign Dbg_AWADDR_6[13] = \<const0> ;
  assign Dbg_AWADDR_6[12] = \<const0> ;
  assign Dbg_AWADDR_6[11] = \<const0> ;
  assign Dbg_AWADDR_6[10] = \<const0> ;
  assign Dbg_AWADDR_6[9] = \<const0> ;
  assign Dbg_AWADDR_6[8] = \<const0> ;
  assign Dbg_AWADDR_6[7] = \<const0> ;
  assign Dbg_AWADDR_6[6] = \<const0> ;
  assign Dbg_AWADDR_6[5] = \<const0> ;
  assign Dbg_AWADDR_6[4] = \<const0> ;
  assign Dbg_AWADDR_6[3] = \<const0> ;
  assign Dbg_AWADDR_6[2] = \<const0> ;
  assign Dbg_AWADDR_7[14] = \<const0> ;
  assign Dbg_AWADDR_7[13] = \<const0> ;
  assign Dbg_AWADDR_7[12] = \<const0> ;
  assign Dbg_AWADDR_7[11] = \<const0> ;
  assign Dbg_AWADDR_7[10] = \<const0> ;
  assign Dbg_AWADDR_7[9] = \<const0> ;
  assign Dbg_AWADDR_7[8] = \<const0> ;
  assign Dbg_AWADDR_7[7] = \<const0> ;
  assign Dbg_AWADDR_7[6] = \<const0> ;
  assign Dbg_AWADDR_7[5] = \<const0> ;
  assign Dbg_AWADDR_7[4] = \<const0> ;
  assign Dbg_AWADDR_7[3] = \<const0> ;
  assign Dbg_AWADDR_7[2] = \<const0> ;
  assign Dbg_AWADDR_8[14] = \<const0> ;
  assign Dbg_AWADDR_8[13] = \<const0> ;
  assign Dbg_AWADDR_8[12] = \<const0> ;
  assign Dbg_AWADDR_8[11] = \<const0> ;
  assign Dbg_AWADDR_8[10] = \<const0> ;
  assign Dbg_AWADDR_8[9] = \<const0> ;
  assign Dbg_AWADDR_8[8] = \<const0> ;
  assign Dbg_AWADDR_8[7] = \<const0> ;
  assign Dbg_AWADDR_8[6] = \<const0> ;
  assign Dbg_AWADDR_8[5] = \<const0> ;
  assign Dbg_AWADDR_8[4] = \<const0> ;
  assign Dbg_AWADDR_8[3] = \<const0> ;
  assign Dbg_AWADDR_8[2] = \<const0> ;
  assign Dbg_AWADDR_9[14] = \<const0> ;
  assign Dbg_AWADDR_9[13] = \<const0> ;
  assign Dbg_AWADDR_9[12] = \<const0> ;
  assign Dbg_AWADDR_9[11] = \<const0> ;
  assign Dbg_AWADDR_9[10] = \<const0> ;
  assign Dbg_AWADDR_9[9] = \<const0> ;
  assign Dbg_AWADDR_9[8] = \<const0> ;
  assign Dbg_AWADDR_9[7] = \<const0> ;
  assign Dbg_AWADDR_9[6] = \<const0> ;
  assign Dbg_AWADDR_9[5] = \<const0> ;
  assign Dbg_AWADDR_9[4] = \<const0> ;
  assign Dbg_AWADDR_9[3] = \<const0> ;
  assign Dbg_AWADDR_9[2] = \<const0> ;
  assign Dbg_AWVALID_0 = \<const0> ;
  assign Dbg_AWVALID_1 = \<const0> ;
  assign Dbg_AWVALID_10 = \<const0> ;
  assign Dbg_AWVALID_11 = \<const0> ;
  assign Dbg_AWVALID_12 = \<const0> ;
  assign Dbg_AWVALID_13 = \<const0> ;
  assign Dbg_AWVALID_14 = \<const0> ;
  assign Dbg_AWVALID_15 = \<const0> ;
  assign Dbg_AWVALID_16 = \<const0> ;
  assign Dbg_AWVALID_17 = \<const0> ;
  assign Dbg_AWVALID_18 = \<const0> ;
  assign Dbg_AWVALID_19 = \<const0> ;
  assign Dbg_AWVALID_2 = \<const0> ;
  assign Dbg_AWVALID_20 = \<const0> ;
  assign Dbg_AWVALID_21 = \<const0> ;
  assign Dbg_AWVALID_22 = \<const0> ;
  assign Dbg_AWVALID_23 = \<const0> ;
  assign Dbg_AWVALID_24 = \<const0> ;
  assign Dbg_AWVALID_25 = \<const0> ;
  assign Dbg_AWVALID_26 = \<const0> ;
  assign Dbg_AWVALID_27 = \<const0> ;
  assign Dbg_AWVALID_28 = \<const0> ;
  assign Dbg_AWVALID_29 = \<const0> ;
  assign Dbg_AWVALID_3 = \<const0> ;
  assign Dbg_AWVALID_30 = \<const0> ;
  assign Dbg_AWVALID_31 = \<const0> ;
  assign Dbg_AWVALID_4 = \<const0> ;
  assign Dbg_AWVALID_5 = \<const0> ;
  assign Dbg_AWVALID_6 = \<const0> ;
  assign Dbg_AWVALID_7 = \<const0> ;
  assign Dbg_AWVALID_8 = \<const0> ;
  assign Dbg_AWVALID_9 = \<const0> ;
  assign Dbg_BREADY_0 = \<const0> ;
  assign Dbg_BREADY_1 = \<const0> ;
  assign Dbg_BREADY_10 = \<const0> ;
  assign Dbg_BREADY_11 = \<const0> ;
  assign Dbg_BREADY_12 = \<const0> ;
  assign Dbg_BREADY_13 = \<const0> ;
  assign Dbg_BREADY_14 = \<const0> ;
  assign Dbg_BREADY_15 = \<const0> ;
  assign Dbg_BREADY_16 = \<const0> ;
  assign Dbg_BREADY_17 = \<const0> ;
  assign Dbg_BREADY_18 = \<const0> ;
  assign Dbg_BREADY_19 = \<const0> ;
  assign Dbg_BREADY_2 = \<const0> ;
  assign Dbg_BREADY_20 = \<const0> ;
  assign Dbg_BREADY_21 = \<const0> ;
  assign Dbg_BREADY_22 = \<const0> ;
  assign Dbg_BREADY_23 = \<const0> ;
  assign Dbg_BREADY_24 = \<const0> ;
  assign Dbg_BREADY_25 = \<const0> ;
  assign Dbg_BREADY_26 = \<const0> ;
  assign Dbg_BREADY_27 = \<const0> ;
  assign Dbg_BREADY_28 = \<const0> ;
  assign Dbg_BREADY_29 = \<const0> ;
  assign Dbg_BREADY_3 = \<const0> ;
  assign Dbg_BREADY_30 = \<const0> ;
  assign Dbg_BREADY_31 = \<const0> ;
  assign Dbg_BREADY_4 = \<const0> ;
  assign Dbg_BREADY_5 = \<const0> ;
  assign Dbg_BREADY_6 = \<const0> ;
  assign Dbg_BREADY_7 = \<const0> ;
  assign Dbg_BREADY_8 = \<const0> ;
  assign Dbg_BREADY_9 = \<const0> ;
  assign Dbg_Capture_0 = Ext_JTAG_CAPTURE;
  assign Dbg_Capture_1 = Ext_JTAG_CAPTURE;
  assign Dbg_Capture_10 = Ext_JTAG_CAPTURE;
  assign Dbg_Capture_11 = Ext_JTAG_CAPTURE;
  assign Dbg_Capture_12 = Ext_JTAG_CAPTURE;
  assign Dbg_Capture_13 = Ext_JTAG_CAPTURE;
  assign Dbg_Capture_14 = Ext_JTAG_CAPTURE;
  assign Dbg_Capture_15 = Ext_JTAG_CAPTURE;
  assign Dbg_Capture_16 = Ext_JTAG_CAPTURE;
  assign Dbg_Capture_17 = Ext_JTAG_CAPTURE;
  assign Dbg_Capture_18 = Ext_JTAG_CAPTURE;
  assign Dbg_Capture_19 = Ext_JTAG_CAPTURE;
  assign Dbg_Capture_2 = Ext_JTAG_CAPTURE;
  assign Dbg_Capture_20 = Ext_JTAG_CAPTURE;
  assign Dbg_Capture_21 = Ext_JTAG_CAPTURE;
  assign Dbg_Capture_22 = Ext_JTAG_CAPTURE;
  assign Dbg_Capture_23 = Ext_JTAG_CAPTURE;
  assign Dbg_Capture_24 = Ext_JTAG_CAPTURE;
  assign Dbg_Capture_25 = Ext_JTAG_CAPTURE;
  assign Dbg_Capture_26 = Ext_JTAG_CAPTURE;
  assign Dbg_Capture_27 = Ext_JTAG_CAPTURE;
  assign Dbg_Capture_28 = Ext_JTAG_CAPTURE;
  assign Dbg_Capture_29 = Ext_JTAG_CAPTURE;
  assign Dbg_Capture_3 = Ext_JTAG_CAPTURE;
  assign Dbg_Capture_30 = Ext_JTAG_CAPTURE;
  assign Dbg_Capture_31 = Ext_JTAG_CAPTURE;
  assign Dbg_Capture_4 = Ext_JTAG_CAPTURE;
  assign Dbg_Capture_5 = Ext_JTAG_CAPTURE;
  assign Dbg_Capture_6 = Ext_JTAG_CAPTURE;
  assign Dbg_Capture_7 = Ext_JTAG_CAPTURE;
  assign Dbg_Capture_8 = Ext_JTAG_CAPTURE;
  assign Dbg_Capture_9 = Ext_JTAG_CAPTURE;
  assign Dbg_Clk_0 = Ext_JTAG_DRCK;
  assign Dbg_Clk_1 = Ext_JTAG_DRCK;
  assign Dbg_Clk_10 = Ext_JTAG_DRCK;
  assign Dbg_Clk_11 = Ext_JTAG_DRCK;
  assign Dbg_Clk_12 = Ext_JTAG_DRCK;
  assign Dbg_Clk_13 = Ext_JTAG_DRCK;
  assign Dbg_Clk_14 = Ext_JTAG_DRCK;
  assign Dbg_Clk_15 = Ext_JTAG_DRCK;
  assign Dbg_Clk_16 = Ext_JTAG_DRCK;
  assign Dbg_Clk_17 = Ext_JTAG_DRCK;
  assign Dbg_Clk_18 = Ext_JTAG_DRCK;
  assign Dbg_Clk_19 = Ext_JTAG_DRCK;
  assign Dbg_Clk_2 = Ext_JTAG_DRCK;
  assign Dbg_Clk_20 = Ext_JTAG_DRCK;
  assign Dbg_Clk_21 = Ext_JTAG_DRCK;
  assign Dbg_Clk_22 = Ext_JTAG_DRCK;
  assign Dbg_Clk_23 = Ext_JTAG_DRCK;
  assign Dbg_Clk_24 = Ext_JTAG_DRCK;
  assign Dbg_Clk_25 = Ext_JTAG_DRCK;
  assign Dbg_Clk_26 = Ext_JTAG_DRCK;
  assign Dbg_Clk_27 = Ext_JTAG_DRCK;
  assign Dbg_Clk_28 = Ext_JTAG_DRCK;
  assign Dbg_Clk_29 = Ext_JTAG_DRCK;
  assign Dbg_Clk_3 = Ext_JTAG_DRCK;
  assign Dbg_Clk_30 = Ext_JTAG_DRCK;
  assign Dbg_Clk_31 = Ext_JTAG_DRCK;
  assign Dbg_Clk_4 = Ext_JTAG_DRCK;
  assign Dbg_Clk_5 = Ext_JTAG_DRCK;
  assign Dbg_Clk_6 = Ext_JTAG_DRCK;
  assign Dbg_Clk_7 = Ext_JTAG_DRCK;
  assign Dbg_Clk_8 = Ext_JTAG_DRCK;
  assign Dbg_Clk_9 = Ext_JTAG_DRCK;
  assign Dbg_Disable_1 = \<const1> ;
  assign Dbg_Disable_10 = \<const1> ;
  assign Dbg_Disable_11 = \<const1> ;
  assign Dbg_Disable_12 = \<const1> ;
  assign Dbg_Disable_13 = \<const1> ;
  assign Dbg_Disable_14 = \<const1> ;
  assign Dbg_Disable_15 = \<const1> ;
  assign Dbg_Disable_16 = \<const1> ;
  assign Dbg_Disable_17 = \<const1> ;
  assign Dbg_Disable_18 = \<const1> ;
  assign Dbg_Disable_19 = \<const1> ;
  assign Dbg_Disable_2 = \<const1> ;
  assign Dbg_Disable_20 = \<const1> ;
  assign Dbg_Disable_21 = \<const1> ;
  assign Dbg_Disable_22 = \<const1> ;
  assign Dbg_Disable_23 = \<const1> ;
  assign Dbg_Disable_24 = \<const1> ;
  assign Dbg_Disable_25 = \<const1> ;
  assign Dbg_Disable_26 = \<const1> ;
  assign Dbg_Disable_27 = \<const1> ;
  assign Dbg_Disable_28 = \<const1> ;
  assign Dbg_Disable_29 = \<const1> ;
  assign Dbg_Disable_3 = \<const1> ;
  assign Dbg_Disable_30 = \<const1> ;
  assign Dbg_Disable_31 = \<const1> ;
  assign Dbg_Disable_4 = \<const1> ;
  assign Dbg_Disable_5 = \<const1> ;
  assign Dbg_Disable_6 = \<const1> ;
  assign Dbg_Disable_7 = \<const1> ;
  assign Dbg_Disable_8 = \<const1> ;
  assign Dbg_Disable_9 = \<const1> ;
  assign Dbg_RREADY_0 = \<const0> ;
  assign Dbg_RREADY_1 = \<const0> ;
  assign Dbg_RREADY_10 = \<const0> ;
  assign Dbg_RREADY_11 = \<const0> ;
  assign Dbg_RREADY_12 = \<const0> ;
  assign Dbg_RREADY_13 = \<const0> ;
  assign Dbg_RREADY_14 = \<const0> ;
  assign Dbg_RREADY_15 = \<const0> ;
  assign Dbg_RREADY_16 = \<const0> ;
  assign Dbg_RREADY_17 = \<const0> ;
  assign Dbg_RREADY_18 = \<const0> ;
  assign Dbg_RREADY_19 = \<const0> ;
  assign Dbg_RREADY_2 = \<const0> ;
  assign Dbg_RREADY_20 = \<const0> ;
  assign Dbg_RREADY_21 = \<const0> ;
  assign Dbg_RREADY_22 = \<const0> ;
  assign Dbg_RREADY_23 = \<const0> ;
  assign Dbg_RREADY_24 = \<const0> ;
  assign Dbg_RREADY_25 = \<const0> ;
  assign Dbg_RREADY_26 = \<const0> ;
  assign Dbg_RREADY_27 = \<const0> ;
  assign Dbg_RREADY_28 = \<const0> ;
  assign Dbg_RREADY_29 = \<const0> ;
  assign Dbg_RREADY_3 = \<const0> ;
  assign Dbg_RREADY_30 = \<const0> ;
  assign Dbg_RREADY_31 = \<const0> ;
  assign Dbg_RREADY_4 = \<const0> ;
  assign Dbg_RREADY_5 = \<const0> ;
  assign Dbg_RREADY_6 = \<const0> ;
  assign Dbg_RREADY_7 = \<const0> ;
  assign Dbg_RREADY_8 = \<const0> ;
  assign Dbg_RREADY_9 = \<const0> ;
  assign Dbg_Reg_En_1[0] = \<const0> ;
  assign Dbg_Reg_En_1[1] = \<const0> ;
  assign Dbg_Reg_En_1[2] = \<const0> ;
  assign Dbg_Reg_En_1[3] = \<const0> ;
  assign Dbg_Reg_En_1[4] = \<const0> ;
  assign Dbg_Reg_En_1[5] = \<const0> ;
  assign Dbg_Reg_En_1[6] = \<const0> ;
  assign Dbg_Reg_En_1[7] = \<const0> ;
  assign Dbg_Reg_En_10[0] = \<const0> ;
  assign Dbg_Reg_En_10[1] = \<const0> ;
  assign Dbg_Reg_En_10[2] = \<const0> ;
  assign Dbg_Reg_En_10[3] = \<const0> ;
  assign Dbg_Reg_En_10[4] = \<const0> ;
  assign Dbg_Reg_En_10[5] = \<const0> ;
  assign Dbg_Reg_En_10[6] = \<const0> ;
  assign Dbg_Reg_En_10[7] = \<const0> ;
  assign Dbg_Reg_En_11[0] = \<const0> ;
  assign Dbg_Reg_En_11[1] = \<const0> ;
  assign Dbg_Reg_En_11[2] = \<const0> ;
  assign Dbg_Reg_En_11[3] = \<const0> ;
  assign Dbg_Reg_En_11[4] = \<const0> ;
  assign Dbg_Reg_En_11[5] = \<const0> ;
  assign Dbg_Reg_En_11[6] = \<const0> ;
  assign Dbg_Reg_En_11[7] = \<const0> ;
  assign Dbg_Reg_En_12[0] = \<const0> ;
  assign Dbg_Reg_En_12[1] = \<const0> ;
  assign Dbg_Reg_En_12[2] = \<const0> ;
  assign Dbg_Reg_En_12[3] = \<const0> ;
  assign Dbg_Reg_En_12[4] = \<const0> ;
  assign Dbg_Reg_En_12[5] = \<const0> ;
  assign Dbg_Reg_En_12[6] = \<const0> ;
  assign Dbg_Reg_En_12[7] = \<const0> ;
  assign Dbg_Reg_En_13[0] = \<const0> ;
  assign Dbg_Reg_En_13[1] = \<const0> ;
  assign Dbg_Reg_En_13[2] = \<const0> ;
  assign Dbg_Reg_En_13[3] = \<const0> ;
  assign Dbg_Reg_En_13[4] = \<const0> ;
  assign Dbg_Reg_En_13[5] = \<const0> ;
  assign Dbg_Reg_En_13[6] = \<const0> ;
  assign Dbg_Reg_En_13[7] = \<const0> ;
  assign Dbg_Reg_En_14[0] = \<const0> ;
  assign Dbg_Reg_En_14[1] = \<const0> ;
  assign Dbg_Reg_En_14[2] = \<const0> ;
  assign Dbg_Reg_En_14[3] = \<const0> ;
  assign Dbg_Reg_En_14[4] = \<const0> ;
  assign Dbg_Reg_En_14[5] = \<const0> ;
  assign Dbg_Reg_En_14[6] = \<const0> ;
  assign Dbg_Reg_En_14[7] = \<const0> ;
  assign Dbg_Reg_En_15[0] = \<const0> ;
  assign Dbg_Reg_En_15[1] = \<const0> ;
  assign Dbg_Reg_En_15[2] = \<const0> ;
  assign Dbg_Reg_En_15[3] = \<const0> ;
  assign Dbg_Reg_En_15[4] = \<const0> ;
  assign Dbg_Reg_En_15[5] = \<const0> ;
  assign Dbg_Reg_En_15[6] = \<const0> ;
  assign Dbg_Reg_En_15[7] = \<const0> ;
  assign Dbg_Reg_En_16[0] = \<const0> ;
  assign Dbg_Reg_En_16[1] = \<const0> ;
  assign Dbg_Reg_En_16[2] = \<const0> ;
  assign Dbg_Reg_En_16[3] = \<const0> ;
  assign Dbg_Reg_En_16[4] = \<const0> ;
  assign Dbg_Reg_En_16[5] = \<const0> ;
  assign Dbg_Reg_En_16[6] = \<const0> ;
  assign Dbg_Reg_En_16[7] = \<const0> ;
  assign Dbg_Reg_En_17[0] = \<const0> ;
  assign Dbg_Reg_En_17[1] = \<const0> ;
  assign Dbg_Reg_En_17[2] = \<const0> ;
  assign Dbg_Reg_En_17[3] = \<const0> ;
  assign Dbg_Reg_En_17[4] = \<const0> ;
  assign Dbg_Reg_En_17[5] = \<const0> ;
  assign Dbg_Reg_En_17[6] = \<const0> ;
  assign Dbg_Reg_En_17[7] = \<const0> ;
  assign Dbg_Reg_En_18[0] = \<const0> ;
  assign Dbg_Reg_En_18[1] = \<const0> ;
  assign Dbg_Reg_En_18[2] = \<const0> ;
  assign Dbg_Reg_En_18[3] = \<const0> ;
  assign Dbg_Reg_En_18[4] = \<const0> ;
  assign Dbg_Reg_En_18[5] = \<const0> ;
  assign Dbg_Reg_En_18[6] = \<const0> ;
  assign Dbg_Reg_En_18[7] = \<const0> ;
  assign Dbg_Reg_En_19[0] = \<const0> ;
  assign Dbg_Reg_En_19[1] = \<const0> ;
  assign Dbg_Reg_En_19[2] = \<const0> ;
  assign Dbg_Reg_En_19[3] = \<const0> ;
  assign Dbg_Reg_En_19[4] = \<const0> ;
  assign Dbg_Reg_En_19[5] = \<const0> ;
  assign Dbg_Reg_En_19[6] = \<const0> ;
  assign Dbg_Reg_En_19[7] = \<const0> ;
  assign Dbg_Reg_En_2[0] = \<const0> ;
  assign Dbg_Reg_En_2[1] = \<const0> ;
  assign Dbg_Reg_En_2[2] = \<const0> ;
  assign Dbg_Reg_En_2[3] = \<const0> ;
  assign Dbg_Reg_En_2[4] = \<const0> ;
  assign Dbg_Reg_En_2[5] = \<const0> ;
  assign Dbg_Reg_En_2[6] = \<const0> ;
  assign Dbg_Reg_En_2[7] = \<const0> ;
  assign Dbg_Reg_En_20[0] = \<const0> ;
  assign Dbg_Reg_En_20[1] = \<const0> ;
  assign Dbg_Reg_En_20[2] = \<const0> ;
  assign Dbg_Reg_En_20[3] = \<const0> ;
  assign Dbg_Reg_En_20[4] = \<const0> ;
  assign Dbg_Reg_En_20[5] = \<const0> ;
  assign Dbg_Reg_En_20[6] = \<const0> ;
  assign Dbg_Reg_En_20[7] = \<const0> ;
  assign Dbg_Reg_En_21[0] = \<const0> ;
  assign Dbg_Reg_En_21[1] = \<const0> ;
  assign Dbg_Reg_En_21[2] = \<const0> ;
  assign Dbg_Reg_En_21[3] = \<const0> ;
  assign Dbg_Reg_En_21[4] = \<const0> ;
  assign Dbg_Reg_En_21[5] = \<const0> ;
  assign Dbg_Reg_En_21[6] = \<const0> ;
  assign Dbg_Reg_En_21[7] = \<const0> ;
  assign Dbg_Reg_En_22[0] = \<const0> ;
  assign Dbg_Reg_En_22[1] = \<const0> ;
  assign Dbg_Reg_En_22[2] = \<const0> ;
  assign Dbg_Reg_En_22[3] = \<const0> ;
  assign Dbg_Reg_En_22[4] = \<const0> ;
  assign Dbg_Reg_En_22[5] = \<const0> ;
  assign Dbg_Reg_En_22[6] = \<const0> ;
  assign Dbg_Reg_En_22[7] = \<const0> ;
  assign Dbg_Reg_En_23[0] = \<const0> ;
  assign Dbg_Reg_En_23[1] = \<const0> ;
  assign Dbg_Reg_En_23[2] = \<const0> ;
  assign Dbg_Reg_En_23[3] = \<const0> ;
  assign Dbg_Reg_En_23[4] = \<const0> ;
  assign Dbg_Reg_En_23[5] = \<const0> ;
  assign Dbg_Reg_En_23[6] = \<const0> ;
  assign Dbg_Reg_En_23[7] = \<const0> ;
  assign Dbg_Reg_En_24[0] = \<const0> ;
  assign Dbg_Reg_En_24[1] = \<const0> ;
  assign Dbg_Reg_En_24[2] = \<const0> ;
  assign Dbg_Reg_En_24[3] = \<const0> ;
  assign Dbg_Reg_En_24[4] = \<const0> ;
  assign Dbg_Reg_En_24[5] = \<const0> ;
  assign Dbg_Reg_En_24[6] = \<const0> ;
  assign Dbg_Reg_En_24[7] = \<const0> ;
  assign Dbg_Reg_En_25[0] = \<const0> ;
  assign Dbg_Reg_En_25[1] = \<const0> ;
  assign Dbg_Reg_En_25[2] = \<const0> ;
  assign Dbg_Reg_En_25[3] = \<const0> ;
  assign Dbg_Reg_En_25[4] = \<const0> ;
  assign Dbg_Reg_En_25[5] = \<const0> ;
  assign Dbg_Reg_En_25[6] = \<const0> ;
  assign Dbg_Reg_En_25[7] = \<const0> ;
  assign Dbg_Reg_En_26[0] = \<const0> ;
  assign Dbg_Reg_En_26[1] = \<const0> ;
  assign Dbg_Reg_En_26[2] = \<const0> ;
  assign Dbg_Reg_En_26[3] = \<const0> ;
  assign Dbg_Reg_En_26[4] = \<const0> ;
  assign Dbg_Reg_En_26[5] = \<const0> ;
  assign Dbg_Reg_En_26[6] = \<const0> ;
  assign Dbg_Reg_En_26[7] = \<const0> ;
  assign Dbg_Reg_En_27[0] = \<const0> ;
  assign Dbg_Reg_En_27[1] = \<const0> ;
  assign Dbg_Reg_En_27[2] = \<const0> ;
  assign Dbg_Reg_En_27[3] = \<const0> ;
  assign Dbg_Reg_En_27[4] = \<const0> ;
  assign Dbg_Reg_En_27[5] = \<const0> ;
  assign Dbg_Reg_En_27[6] = \<const0> ;
  assign Dbg_Reg_En_27[7] = \<const0> ;
  assign Dbg_Reg_En_28[0] = \<const0> ;
  assign Dbg_Reg_En_28[1] = \<const0> ;
  assign Dbg_Reg_En_28[2] = \<const0> ;
  assign Dbg_Reg_En_28[3] = \<const0> ;
  assign Dbg_Reg_En_28[4] = \<const0> ;
  assign Dbg_Reg_En_28[5] = \<const0> ;
  assign Dbg_Reg_En_28[6] = \<const0> ;
  assign Dbg_Reg_En_28[7] = \<const0> ;
  assign Dbg_Reg_En_29[0] = \<const0> ;
  assign Dbg_Reg_En_29[1] = \<const0> ;
  assign Dbg_Reg_En_29[2] = \<const0> ;
  assign Dbg_Reg_En_29[3] = \<const0> ;
  assign Dbg_Reg_En_29[4] = \<const0> ;
  assign Dbg_Reg_En_29[5] = \<const0> ;
  assign Dbg_Reg_En_29[6] = \<const0> ;
  assign Dbg_Reg_En_29[7] = \<const0> ;
  assign Dbg_Reg_En_3[0] = \<const0> ;
  assign Dbg_Reg_En_3[1] = \<const0> ;
  assign Dbg_Reg_En_3[2] = \<const0> ;
  assign Dbg_Reg_En_3[3] = \<const0> ;
  assign Dbg_Reg_En_3[4] = \<const0> ;
  assign Dbg_Reg_En_3[5] = \<const0> ;
  assign Dbg_Reg_En_3[6] = \<const0> ;
  assign Dbg_Reg_En_3[7] = \<const0> ;
  assign Dbg_Reg_En_30[0] = \<const0> ;
  assign Dbg_Reg_En_30[1] = \<const0> ;
  assign Dbg_Reg_En_30[2] = \<const0> ;
  assign Dbg_Reg_En_30[3] = \<const0> ;
  assign Dbg_Reg_En_30[4] = \<const0> ;
  assign Dbg_Reg_En_30[5] = \<const0> ;
  assign Dbg_Reg_En_30[6] = \<const0> ;
  assign Dbg_Reg_En_30[7] = \<const0> ;
  assign Dbg_Reg_En_31[0] = \<const0> ;
  assign Dbg_Reg_En_31[1] = \<const0> ;
  assign Dbg_Reg_En_31[2] = \<const0> ;
  assign Dbg_Reg_En_31[3] = \<const0> ;
  assign Dbg_Reg_En_31[4] = \<const0> ;
  assign Dbg_Reg_En_31[5] = \<const0> ;
  assign Dbg_Reg_En_31[6] = \<const0> ;
  assign Dbg_Reg_En_31[7] = \<const0> ;
  assign Dbg_Reg_En_4[0] = \<const0> ;
  assign Dbg_Reg_En_4[1] = \<const0> ;
  assign Dbg_Reg_En_4[2] = \<const0> ;
  assign Dbg_Reg_En_4[3] = \<const0> ;
  assign Dbg_Reg_En_4[4] = \<const0> ;
  assign Dbg_Reg_En_4[5] = \<const0> ;
  assign Dbg_Reg_En_4[6] = \<const0> ;
  assign Dbg_Reg_En_4[7] = \<const0> ;
  assign Dbg_Reg_En_5[0] = \<const0> ;
  assign Dbg_Reg_En_5[1] = \<const0> ;
  assign Dbg_Reg_En_5[2] = \<const0> ;
  assign Dbg_Reg_En_5[3] = \<const0> ;
  assign Dbg_Reg_En_5[4] = \<const0> ;
  assign Dbg_Reg_En_5[5] = \<const0> ;
  assign Dbg_Reg_En_5[6] = \<const0> ;
  assign Dbg_Reg_En_5[7] = \<const0> ;
  assign Dbg_Reg_En_6[0] = \<const0> ;
  assign Dbg_Reg_En_6[1] = \<const0> ;
  assign Dbg_Reg_En_6[2] = \<const0> ;
  assign Dbg_Reg_En_6[3] = \<const0> ;
  assign Dbg_Reg_En_6[4] = \<const0> ;
  assign Dbg_Reg_En_6[5] = \<const0> ;
  assign Dbg_Reg_En_6[6] = \<const0> ;
  assign Dbg_Reg_En_6[7] = \<const0> ;
  assign Dbg_Reg_En_7[0] = \<const0> ;
  assign Dbg_Reg_En_7[1] = \<const0> ;
  assign Dbg_Reg_En_7[2] = \<const0> ;
  assign Dbg_Reg_En_7[3] = \<const0> ;
  assign Dbg_Reg_En_7[4] = \<const0> ;
  assign Dbg_Reg_En_7[5] = \<const0> ;
  assign Dbg_Reg_En_7[6] = \<const0> ;
  assign Dbg_Reg_En_7[7] = \<const0> ;
  assign Dbg_Reg_En_8[0] = \<const0> ;
  assign Dbg_Reg_En_8[1] = \<const0> ;
  assign Dbg_Reg_En_8[2] = \<const0> ;
  assign Dbg_Reg_En_8[3] = \<const0> ;
  assign Dbg_Reg_En_8[4] = \<const0> ;
  assign Dbg_Reg_En_8[5] = \<const0> ;
  assign Dbg_Reg_En_8[6] = \<const0> ;
  assign Dbg_Reg_En_8[7] = \<const0> ;
  assign Dbg_Reg_En_9[0] = \<const0> ;
  assign Dbg_Reg_En_9[1] = \<const0> ;
  assign Dbg_Reg_En_9[2] = \<const0> ;
  assign Dbg_Reg_En_9[3] = \<const0> ;
  assign Dbg_Reg_En_9[4] = \<const0> ;
  assign Dbg_Reg_En_9[5] = \<const0> ;
  assign Dbg_Reg_En_9[6] = \<const0> ;
  assign Dbg_Reg_En_9[7] = \<const0> ;
  assign Dbg_Rst_1 = \<const0> ;
  assign Dbg_Rst_10 = \<const0> ;
  assign Dbg_Rst_11 = \<const0> ;
  assign Dbg_Rst_12 = \<const0> ;
  assign Dbg_Rst_13 = \<const0> ;
  assign Dbg_Rst_14 = \<const0> ;
  assign Dbg_Rst_15 = \<const0> ;
  assign Dbg_Rst_16 = \<const0> ;
  assign Dbg_Rst_17 = \<const0> ;
  assign Dbg_Rst_18 = \<const0> ;
  assign Dbg_Rst_19 = \<const0> ;
  assign Dbg_Rst_2 = \<const0> ;
  assign Dbg_Rst_20 = \<const0> ;
  assign Dbg_Rst_21 = \<const0> ;
  assign Dbg_Rst_22 = \<const0> ;
  assign Dbg_Rst_23 = \<const0> ;
  assign Dbg_Rst_24 = \<const0> ;
  assign Dbg_Rst_25 = \<const0> ;
  assign Dbg_Rst_26 = \<const0> ;
  assign Dbg_Rst_27 = \<const0> ;
  assign Dbg_Rst_28 = \<const0> ;
  assign Dbg_Rst_29 = \<const0> ;
  assign Dbg_Rst_3 = \<const0> ;
  assign Dbg_Rst_30 = \<const0> ;
  assign Dbg_Rst_31 = \<const0> ;
  assign Dbg_Rst_4 = \<const0> ;
  assign Dbg_Rst_5 = \<const0> ;
  assign Dbg_Rst_6 = \<const0> ;
  assign Dbg_Rst_7 = \<const0> ;
  assign Dbg_Rst_8 = \<const0> ;
  assign Dbg_Rst_9 = \<const0> ;
  assign Dbg_Shift_1 = Dbg_Shift_0;
  assign Dbg_Shift_10 = Dbg_Shift_0;
  assign Dbg_Shift_11 = Dbg_Shift_0;
  assign Dbg_Shift_12 = Dbg_Shift_0;
  assign Dbg_Shift_13 = Dbg_Shift_0;
  assign Dbg_Shift_14 = Dbg_Shift_0;
  assign Dbg_Shift_15 = Dbg_Shift_0;
  assign Dbg_Shift_16 = Dbg_Shift_0;
  assign Dbg_Shift_17 = Dbg_Shift_0;
  assign Dbg_Shift_18 = Dbg_Shift_0;
  assign Dbg_Shift_19 = Dbg_Shift_0;
  assign Dbg_Shift_2 = Dbg_Shift_0;
  assign Dbg_Shift_20 = Dbg_Shift_0;
  assign Dbg_Shift_21 = Dbg_Shift_0;
  assign Dbg_Shift_22 = Dbg_Shift_0;
  assign Dbg_Shift_23 = Dbg_Shift_0;
  assign Dbg_Shift_24 = Dbg_Shift_0;
  assign Dbg_Shift_25 = Dbg_Shift_0;
  assign Dbg_Shift_26 = Dbg_Shift_0;
  assign Dbg_Shift_27 = Dbg_Shift_0;
  assign Dbg_Shift_28 = Dbg_Shift_0;
  assign Dbg_Shift_29 = Dbg_Shift_0;
  assign Dbg_Shift_3 = Dbg_Shift_0;
  assign Dbg_Shift_30 = Dbg_Shift_0;
  assign Dbg_Shift_31 = Dbg_Shift_0;
  assign Dbg_Shift_4 = Dbg_Shift_0;
  assign Dbg_Shift_5 = Dbg_Shift_0;
  assign Dbg_Shift_6 = Dbg_Shift_0;
  assign Dbg_Shift_7 = Dbg_Shift_0;
  assign Dbg_Shift_8 = Dbg_Shift_0;
  assign Dbg_Shift_9 = Dbg_Shift_0;
  assign Dbg_TDI_1 = Dbg_TDI_0;
  assign Dbg_TDI_10 = Dbg_TDI_0;
  assign Dbg_TDI_11 = Dbg_TDI_0;
  assign Dbg_TDI_12 = Dbg_TDI_0;
  assign Dbg_TDI_13 = Dbg_TDI_0;
  assign Dbg_TDI_14 = Dbg_TDI_0;
  assign Dbg_TDI_15 = Dbg_TDI_0;
  assign Dbg_TDI_16 = Dbg_TDI_0;
  assign Dbg_TDI_17 = Dbg_TDI_0;
  assign Dbg_TDI_18 = Dbg_TDI_0;
  assign Dbg_TDI_19 = Dbg_TDI_0;
  assign Dbg_TDI_2 = Dbg_TDI_0;
  assign Dbg_TDI_20 = Dbg_TDI_0;
  assign Dbg_TDI_21 = Dbg_TDI_0;
  assign Dbg_TDI_22 = Dbg_TDI_0;
  assign Dbg_TDI_23 = Dbg_TDI_0;
  assign Dbg_TDI_24 = Dbg_TDI_0;
  assign Dbg_TDI_25 = Dbg_TDI_0;
  assign Dbg_TDI_26 = Dbg_TDI_0;
  assign Dbg_TDI_27 = Dbg_TDI_0;
  assign Dbg_TDI_28 = Dbg_TDI_0;
  assign Dbg_TDI_29 = Dbg_TDI_0;
  assign Dbg_TDI_3 = Dbg_TDI_0;
  assign Dbg_TDI_30 = Dbg_TDI_0;
  assign Dbg_TDI_31 = Dbg_TDI_0;
  assign Dbg_TDI_4 = Dbg_TDI_0;
  assign Dbg_TDI_5 = Dbg_TDI_0;
  assign Dbg_TDI_6 = Dbg_TDI_0;
  assign Dbg_TDI_7 = Dbg_TDI_0;
  assign Dbg_TDI_8 = Dbg_TDI_0;
  assign Dbg_TDI_9 = Dbg_TDI_0;
  assign Dbg_TrClk_0 = \<const0> ;
  assign Dbg_TrClk_1 = \<const0> ;
  assign Dbg_TrClk_10 = \<const0> ;
  assign Dbg_TrClk_11 = \<const0> ;
  assign Dbg_TrClk_12 = \<const0> ;
  assign Dbg_TrClk_13 = \<const0> ;
  assign Dbg_TrClk_14 = \<const0> ;
  assign Dbg_TrClk_15 = \<const0> ;
  assign Dbg_TrClk_16 = \<const0> ;
  assign Dbg_TrClk_17 = \<const0> ;
  assign Dbg_TrClk_18 = \<const0> ;
  assign Dbg_TrClk_19 = \<const0> ;
  assign Dbg_TrClk_2 = \<const0> ;
  assign Dbg_TrClk_20 = \<const0> ;
  assign Dbg_TrClk_21 = \<const0> ;
  assign Dbg_TrClk_22 = \<const0> ;
  assign Dbg_TrClk_23 = \<const0> ;
  assign Dbg_TrClk_24 = \<const0> ;
  assign Dbg_TrClk_25 = \<const0> ;
  assign Dbg_TrClk_26 = \<const0> ;
  assign Dbg_TrClk_27 = \<const0> ;
  assign Dbg_TrClk_28 = \<const0> ;
  assign Dbg_TrClk_29 = \<const0> ;
  assign Dbg_TrClk_3 = \<const0> ;
  assign Dbg_TrClk_30 = \<const0> ;
  assign Dbg_TrClk_31 = \<const0> ;
  assign Dbg_TrClk_4 = \<const0> ;
  assign Dbg_TrClk_5 = \<const0> ;
  assign Dbg_TrClk_6 = \<const0> ;
  assign Dbg_TrClk_7 = \<const0> ;
  assign Dbg_TrClk_8 = \<const0> ;
  assign Dbg_TrClk_9 = \<const0> ;
  assign Dbg_TrReady_0 = \<const0> ;
  assign Dbg_TrReady_1 = \<const0> ;
  assign Dbg_TrReady_10 = \<const0> ;
  assign Dbg_TrReady_11 = \<const0> ;
  assign Dbg_TrReady_12 = \<const0> ;
  assign Dbg_TrReady_13 = \<const0> ;
  assign Dbg_TrReady_14 = \<const0> ;
  assign Dbg_TrReady_15 = \<const0> ;
  assign Dbg_TrReady_16 = \<const0> ;
  assign Dbg_TrReady_17 = \<const0> ;
  assign Dbg_TrReady_18 = \<const0> ;
  assign Dbg_TrReady_19 = \<const0> ;
  assign Dbg_TrReady_2 = \<const0> ;
  assign Dbg_TrReady_20 = \<const0> ;
  assign Dbg_TrReady_21 = \<const0> ;
  assign Dbg_TrReady_22 = \<const0> ;
  assign Dbg_TrReady_23 = \<const0> ;
  assign Dbg_TrReady_24 = \<const0> ;
  assign Dbg_TrReady_25 = \<const0> ;
  assign Dbg_TrReady_26 = \<const0> ;
  assign Dbg_TrReady_27 = \<const0> ;
  assign Dbg_TrReady_28 = \<const0> ;
  assign Dbg_TrReady_29 = \<const0> ;
  assign Dbg_TrReady_3 = \<const0> ;
  assign Dbg_TrReady_30 = \<const0> ;
  assign Dbg_TrReady_31 = \<const0> ;
  assign Dbg_TrReady_4 = \<const0> ;
  assign Dbg_TrReady_5 = \<const0> ;
  assign Dbg_TrReady_6 = \<const0> ;
  assign Dbg_TrReady_7 = \<const0> ;
  assign Dbg_TrReady_8 = \<const0> ;
  assign Dbg_TrReady_9 = \<const0> ;
  assign Dbg_Trig_Ack_In_0[0] = \<const0> ;
  assign Dbg_Trig_Ack_In_0[1] = \<const0> ;
  assign Dbg_Trig_Ack_In_0[2] = \<const0> ;
  assign Dbg_Trig_Ack_In_0[3] = \<const0> ;
  assign Dbg_Trig_Ack_In_0[4] = \<const0> ;
  assign Dbg_Trig_Ack_In_0[5] = \<const0> ;
  assign Dbg_Trig_Ack_In_0[6] = \<const0> ;
  assign Dbg_Trig_Ack_In_0[7] = \<const0> ;
  assign Dbg_Trig_Ack_In_1[0] = \<const0> ;
  assign Dbg_Trig_Ack_In_1[1] = \<const0> ;
  assign Dbg_Trig_Ack_In_1[2] = \<const0> ;
  assign Dbg_Trig_Ack_In_1[3] = \<const0> ;
  assign Dbg_Trig_Ack_In_1[4] = \<const0> ;
  assign Dbg_Trig_Ack_In_1[5] = \<const0> ;
  assign Dbg_Trig_Ack_In_1[6] = \<const0> ;
  assign Dbg_Trig_Ack_In_1[7] = \<const0> ;
  assign Dbg_Trig_Ack_In_10[0] = \<const0> ;
  assign Dbg_Trig_Ack_In_10[1] = \<const0> ;
  assign Dbg_Trig_Ack_In_10[2] = \<const0> ;
  assign Dbg_Trig_Ack_In_10[3] = \<const0> ;
  assign Dbg_Trig_Ack_In_10[4] = \<const0> ;
  assign Dbg_Trig_Ack_In_10[5] = \<const0> ;
  assign Dbg_Trig_Ack_In_10[6] = \<const0> ;
  assign Dbg_Trig_Ack_In_10[7] = \<const0> ;
  assign Dbg_Trig_Ack_In_11[0] = \<const0> ;
  assign Dbg_Trig_Ack_In_11[1] = \<const0> ;
  assign Dbg_Trig_Ack_In_11[2] = \<const0> ;
  assign Dbg_Trig_Ack_In_11[3] = \<const0> ;
  assign Dbg_Trig_Ack_In_11[4] = \<const0> ;
  assign Dbg_Trig_Ack_In_11[5] = \<const0> ;
  assign Dbg_Trig_Ack_In_11[6] = \<const0> ;
  assign Dbg_Trig_Ack_In_11[7] = \<const0> ;
  assign Dbg_Trig_Ack_In_12[0] = \<const0> ;
  assign Dbg_Trig_Ack_In_12[1] = \<const0> ;
  assign Dbg_Trig_Ack_In_12[2] = \<const0> ;
  assign Dbg_Trig_Ack_In_12[3] = \<const0> ;
  assign Dbg_Trig_Ack_In_12[4] = \<const0> ;
  assign Dbg_Trig_Ack_In_12[5] = \<const0> ;
  assign Dbg_Trig_Ack_In_12[6] = \<const0> ;
  assign Dbg_Trig_Ack_In_12[7] = \<const0> ;
  assign Dbg_Trig_Ack_In_13[0] = \<const0> ;
  assign Dbg_Trig_Ack_In_13[1] = \<const0> ;
  assign Dbg_Trig_Ack_In_13[2] = \<const0> ;
  assign Dbg_Trig_Ack_In_13[3] = \<const0> ;
  assign Dbg_Trig_Ack_In_13[4] = \<const0> ;
  assign Dbg_Trig_Ack_In_13[5] = \<const0> ;
  assign Dbg_Trig_Ack_In_13[6] = \<const0> ;
  assign Dbg_Trig_Ack_In_13[7] = \<const0> ;
  assign Dbg_Trig_Ack_In_14[0] = \<const0> ;
  assign Dbg_Trig_Ack_In_14[1] = \<const0> ;
  assign Dbg_Trig_Ack_In_14[2] = \<const0> ;
  assign Dbg_Trig_Ack_In_14[3] = \<const0> ;
  assign Dbg_Trig_Ack_In_14[4] = \<const0> ;
  assign Dbg_Trig_Ack_In_14[5] = \<const0> ;
  assign Dbg_Trig_Ack_In_14[6] = \<const0> ;
  assign Dbg_Trig_Ack_In_14[7] = \<const0> ;
  assign Dbg_Trig_Ack_In_15[0] = \<const0> ;
  assign Dbg_Trig_Ack_In_15[1] = \<const0> ;
  assign Dbg_Trig_Ack_In_15[2] = \<const0> ;
  assign Dbg_Trig_Ack_In_15[3] = \<const0> ;
  assign Dbg_Trig_Ack_In_15[4] = \<const0> ;
  assign Dbg_Trig_Ack_In_15[5] = \<const0> ;
  assign Dbg_Trig_Ack_In_15[6] = \<const0> ;
  assign Dbg_Trig_Ack_In_15[7] = \<const0> ;
  assign Dbg_Trig_Ack_In_16[0] = \<const0> ;
  assign Dbg_Trig_Ack_In_16[1] = \<const0> ;
  assign Dbg_Trig_Ack_In_16[2] = \<const0> ;
  assign Dbg_Trig_Ack_In_16[3] = \<const0> ;
  assign Dbg_Trig_Ack_In_16[4] = \<const0> ;
  assign Dbg_Trig_Ack_In_16[5] = \<const0> ;
  assign Dbg_Trig_Ack_In_16[6] = \<const0> ;
  assign Dbg_Trig_Ack_In_16[7] = \<const0> ;
  assign Dbg_Trig_Ack_In_17[0] = \<const0> ;
  assign Dbg_Trig_Ack_In_17[1] = \<const0> ;
  assign Dbg_Trig_Ack_In_17[2] = \<const0> ;
  assign Dbg_Trig_Ack_In_17[3] = \<const0> ;
  assign Dbg_Trig_Ack_In_17[4] = \<const0> ;
  assign Dbg_Trig_Ack_In_17[5] = \<const0> ;
  assign Dbg_Trig_Ack_In_17[6] = \<const0> ;
  assign Dbg_Trig_Ack_In_17[7] = \<const0> ;
  assign Dbg_Trig_Ack_In_18[0] = \<const0> ;
  assign Dbg_Trig_Ack_In_18[1] = \<const0> ;
  assign Dbg_Trig_Ack_In_18[2] = \<const0> ;
  assign Dbg_Trig_Ack_In_18[3] = \<const0> ;
  assign Dbg_Trig_Ack_In_18[4] = \<const0> ;
  assign Dbg_Trig_Ack_In_18[5] = \<const0> ;
  assign Dbg_Trig_Ack_In_18[6] = \<const0> ;
  assign Dbg_Trig_Ack_In_18[7] = \<const0> ;
  assign Dbg_Trig_Ack_In_19[0] = \<const0> ;
  assign Dbg_Trig_Ack_In_19[1] = \<const0> ;
  assign Dbg_Trig_Ack_In_19[2] = \<const0> ;
  assign Dbg_Trig_Ack_In_19[3] = \<const0> ;
  assign Dbg_Trig_Ack_In_19[4] = \<const0> ;
  assign Dbg_Trig_Ack_In_19[5] = \<const0> ;
  assign Dbg_Trig_Ack_In_19[6] = \<const0> ;
  assign Dbg_Trig_Ack_In_19[7] = \<const0> ;
  assign Dbg_Trig_Ack_In_2[0] = \<const0> ;
  assign Dbg_Trig_Ack_In_2[1] = \<const0> ;
  assign Dbg_Trig_Ack_In_2[2] = \<const0> ;
  assign Dbg_Trig_Ack_In_2[3] = \<const0> ;
  assign Dbg_Trig_Ack_In_2[4] = \<const0> ;
  assign Dbg_Trig_Ack_In_2[5] = \<const0> ;
  assign Dbg_Trig_Ack_In_2[6] = \<const0> ;
  assign Dbg_Trig_Ack_In_2[7] = \<const0> ;
  assign Dbg_Trig_Ack_In_20[0] = \<const0> ;
  assign Dbg_Trig_Ack_In_20[1] = \<const0> ;
  assign Dbg_Trig_Ack_In_20[2] = \<const0> ;
  assign Dbg_Trig_Ack_In_20[3] = \<const0> ;
  assign Dbg_Trig_Ack_In_20[4] = \<const0> ;
  assign Dbg_Trig_Ack_In_20[5] = \<const0> ;
  assign Dbg_Trig_Ack_In_20[6] = \<const0> ;
  assign Dbg_Trig_Ack_In_20[7] = \<const0> ;
  assign Dbg_Trig_Ack_In_21[0] = \<const0> ;
  assign Dbg_Trig_Ack_In_21[1] = \<const0> ;
  assign Dbg_Trig_Ack_In_21[2] = \<const0> ;
  assign Dbg_Trig_Ack_In_21[3] = \<const0> ;
  assign Dbg_Trig_Ack_In_21[4] = \<const0> ;
  assign Dbg_Trig_Ack_In_21[5] = \<const0> ;
  assign Dbg_Trig_Ack_In_21[6] = \<const0> ;
  assign Dbg_Trig_Ack_In_21[7] = \<const0> ;
  assign Dbg_Trig_Ack_In_22[0] = \<const0> ;
  assign Dbg_Trig_Ack_In_22[1] = \<const0> ;
  assign Dbg_Trig_Ack_In_22[2] = \<const0> ;
  assign Dbg_Trig_Ack_In_22[3] = \<const0> ;
  assign Dbg_Trig_Ack_In_22[4] = \<const0> ;
  assign Dbg_Trig_Ack_In_22[5] = \<const0> ;
  assign Dbg_Trig_Ack_In_22[6] = \<const0> ;
  assign Dbg_Trig_Ack_In_22[7] = \<const0> ;
  assign Dbg_Trig_Ack_In_23[0] = \<const0> ;
  assign Dbg_Trig_Ack_In_23[1] = \<const0> ;
  assign Dbg_Trig_Ack_In_23[2] = \<const0> ;
  assign Dbg_Trig_Ack_In_23[3] = \<const0> ;
  assign Dbg_Trig_Ack_In_23[4] = \<const0> ;
  assign Dbg_Trig_Ack_In_23[5] = \<const0> ;
  assign Dbg_Trig_Ack_In_23[6] = \<const0> ;
  assign Dbg_Trig_Ack_In_23[7] = \<const0> ;
  assign Dbg_Trig_Ack_In_24[0] = \<const0> ;
  assign Dbg_Trig_Ack_In_24[1] = \<const0> ;
  assign Dbg_Trig_Ack_In_24[2] = \<const0> ;
  assign Dbg_Trig_Ack_In_24[3] = \<const0> ;
  assign Dbg_Trig_Ack_In_24[4] = \<const0> ;
  assign Dbg_Trig_Ack_In_24[5] = \<const0> ;
  assign Dbg_Trig_Ack_In_24[6] = \<const0> ;
  assign Dbg_Trig_Ack_In_24[7] = \<const0> ;
  assign Dbg_Trig_Ack_In_25[0] = \<const0> ;
  assign Dbg_Trig_Ack_In_25[1] = \<const0> ;
  assign Dbg_Trig_Ack_In_25[2] = \<const0> ;
  assign Dbg_Trig_Ack_In_25[3] = \<const0> ;
  assign Dbg_Trig_Ack_In_25[4] = \<const0> ;
  assign Dbg_Trig_Ack_In_25[5] = \<const0> ;
  assign Dbg_Trig_Ack_In_25[6] = \<const0> ;
  assign Dbg_Trig_Ack_In_25[7] = \<const0> ;
  assign Dbg_Trig_Ack_In_26[0] = \<const0> ;
  assign Dbg_Trig_Ack_In_26[1] = \<const0> ;
  assign Dbg_Trig_Ack_In_26[2] = \<const0> ;
  assign Dbg_Trig_Ack_In_26[3] = \<const0> ;
  assign Dbg_Trig_Ack_In_26[4] = \<const0> ;
  assign Dbg_Trig_Ack_In_26[5] = \<const0> ;
  assign Dbg_Trig_Ack_In_26[6] = \<const0> ;
  assign Dbg_Trig_Ack_In_26[7] = \<const0> ;
  assign Dbg_Trig_Ack_In_27[0] = \<const0> ;
  assign Dbg_Trig_Ack_In_27[1] = \<const0> ;
  assign Dbg_Trig_Ack_In_27[2] = \<const0> ;
  assign Dbg_Trig_Ack_In_27[3] = \<const0> ;
  assign Dbg_Trig_Ack_In_27[4] = \<const0> ;
  assign Dbg_Trig_Ack_In_27[5] = \<const0> ;
  assign Dbg_Trig_Ack_In_27[6] = \<const0> ;
  assign Dbg_Trig_Ack_In_27[7] = \<const0> ;
  assign Dbg_Trig_Ack_In_28[0] = \<const0> ;
  assign Dbg_Trig_Ack_In_28[1] = \<const0> ;
  assign Dbg_Trig_Ack_In_28[2] = \<const0> ;
  assign Dbg_Trig_Ack_In_28[3] = \<const0> ;
  assign Dbg_Trig_Ack_In_28[4] = \<const0> ;
  assign Dbg_Trig_Ack_In_28[5] = \<const0> ;
  assign Dbg_Trig_Ack_In_28[6] = \<const0> ;
  assign Dbg_Trig_Ack_In_28[7] = \<const0> ;
  assign Dbg_Trig_Ack_In_29[0] = \<const0> ;
  assign Dbg_Trig_Ack_In_29[1] = \<const0> ;
  assign Dbg_Trig_Ack_In_29[2] = \<const0> ;
  assign Dbg_Trig_Ack_In_29[3] = \<const0> ;
  assign Dbg_Trig_Ack_In_29[4] = \<const0> ;
  assign Dbg_Trig_Ack_In_29[5] = \<const0> ;
  assign Dbg_Trig_Ack_In_29[6] = \<const0> ;
  assign Dbg_Trig_Ack_In_29[7] = \<const0> ;
  assign Dbg_Trig_Ack_In_3[0] = \<const0> ;
  assign Dbg_Trig_Ack_In_3[1] = \<const0> ;
  assign Dbg_Trig_Ack_In_3[2] = \<const0> ;
  assign Dbg_Trig_Ack_In_3[3] = \<const0> ;
  assign Dbg_Trig_Ack_In_3[4] = \<const0> ;
  assign Dbg_Trig_Ack_In_3[5] = \<const0> ;
  assign Dbg_Trig_Ack_In_3[6] = \<const0> ;
  assign Dbg_Trig_Ack_In_3[7] = \<const0> ;
  assign Dbg_Trig_Ack_In_30[0] = \<const0> ;
  assign Dbg_Trig_Ack_In_30[1] = \<const0> ;
  assign Dbg_Trig_Ack_In_30[2] = \<const0> ;
  assign Dbg_Trig_Ack_In_30[3] = \<const0> ;
  assign Dbg_Trig_Ack_In_30[4] = \<const0> ;
  assign Dbg_Trig_Ack_In_30[5] = \<const0> ;
  assign Dbg_Trig_Ack_In_30[6] = \<const0> ;
  assign Dbg_Trig_Ack_In_30[7] = \<const0> ;
  assign Dbg_Trig_Ack_In_31[0] = \<const0> ;
  assign Dbg_Trig_Ack_In_31[1] = \<const0> ;
  assign Dbg_Trig_Ack_In_31[2] = \<const0> ;
  assign Dbg_Trig_Ack_In_31[3] = \<const0> ;
  assign Dbg_Trig_Ack_In_31[4] = \<const0> ;
  assign Dbg_Trig_Ack_In_31[5] = \<const0> ;
  assign Dbg_Trig_Ack_In_31[6] = \<const0> ;
  assign Dbg_Trig_Ack_In_31[7] = \<const0> ;
  assign Dbg_Trig_Ack_In_4[0] = \<const0> ;
  assign Dbg_Trig_Ack_In_4[1] = \<const0> ;
  assign Dbg_Trig_Ack_In_4[2] = \<const0> ;
  assign Dbg_Trig_Ack_In_4[3] = \<const0> ;
  assign Dbg_Trig_Ack_In_4[4] = \<const0> ;
  assign Dbg_Trig_Ack_In_4[5] = \<const0> ;
  assign Dbg_Trig_Ack_In_4[6] = \<const0> ;
  assign Dbg_Trig_Ack_In_4[7] = \<const0> ;
  assign Dbg_Trig_Ack_In_5[0] = \<const0> ;
  assign Dbg_Trig_Ack_In_5[1] = \<const0> ;
  assign Dbg_Trig_Ack_In_5[2] = \<const0> ;
  assign Dbg_Trig_Ack_In_5[3] = \<const0> ;
  assign Dbg_Trig_Ack_In_5[4] = \<const0> ;
  assign Dbg_Trig_Ack_In_5[5] = \<const0> ;
  assign Dbg_Trig_Ack_In_5[6] = \<const0> ;
  assign Dbg_Trig_Ack_In_5[7] = \<const0> ;
  assign Dbg_Trig_Ack_In_6[0] = \<const0> ;
  assign Dbg_Trig_Ack_In_6[1] = \<const0> ;
  assign Dbg_Trig_Ack_In_6[2] = \<const0> ;
  assign Dbg_Trig_Ack_In_6[3] = \<const0> ;
  assign Dbg_Trig_Ack_In_6[4] = \<const0> ;
  assign Dbg_Trig_Ack_In_6[5] = \<const0> ;
  assign Dbg_Trig_Ack_In_6[6] = \<const0> ;
  assign Dbg_Trig_Ack_In_6[7] = \<const0> ;
  assign Dbg_Trig_Ack_In_7[0] = \<const0> ;
  assign Dbg_Trig_Ack_In_7[1] = \<const0> ;
  assign Dbg_Trig_Ack_In_7[2] = \<const0> ;
  assign Dbg_Trig_Ack_In_7[3] = \<const0> ;
  assign Dbg_Trig_Ack_In_7[4] = \<const0> ;
  assign Dbg_Trig_Ack_In_7[5] = \<const0> ;
  assign Dbg_Trig_Ack_In_7[6] = \<const0> ;
  assign Dbg_Trig_Ack_In_7[7] = \<const0> ;
  assign Dbg_Trig_Ack_In_8[0] = \<const0> ;
  assign Dbg_Trig_Ack_In_8[1] = \<const0> ;
  assign Dbg_Trig_Ack_In_8[2] = \<const0> ;
  assign Dbg_Trig_Ack_In_8[3] = \<const0> ;
  assign Dbg_Trig_Ack_In_8[4] = \<const0> ;
  assign Dbg_Trig_Ack_In_8[5] = \<const0> ;
  assign Dbg_Trig_Ack_In_8[6] = \<const0> ;
  assign Dbg_Trig_Ack_In_8[7] = \<const0> ;
  assign Dbg_Trig_Ack_In_9[0] = \<const0> ;
  assign Dbg_Trig_Ack_In_9[1] = \<const0> ;
  assign Dbg_Trig_Ack_In_9[2] = \<const0> ;
  assign Dbg_Trig_Ack_In_9[3] = \<const0> ;
  assign Dbg_Trig_Ack_In_9[4] = \<const0> ;
  assign Dbg_Trig_Ack_In_9[5] = \<const0> ;
  assign Dbg_Trig_Ack_In_9[6] = \<const0> ;
  assign Dbg_Trig_Ack_In_9[7] = \<const0> ;
  assign Dbg_Trig_Out_0[0] = \<const0> ;
  assign Dbg_Trig_Out_0[1] = \<const0> ;
  assign Dbg_Trig_Out_0[2] = \<const0> ;
  assign Dbg_Trig_Out_0[3] = \<const0> ;
  assign Dbg_Trig_Out_0[4] = \<const0> ;
  assign Dbg_Trig_Out_0[5] = \<const0> ;
  assign Dbg_Trig_Out_0[6] = \<const0> ;
  assign Dbg_Trig_Out_0[7] = \<const0> ;
  assign Dbg_Trig_Out_1[0] = \<const0> ;
  assign Dbg_Trig_Out_1[1] = \<const0> ;
  assign Dbg_Trig_Out_1[2] = \<const0> ;
  assign Dbg_Trig_Out_1[3] = \<const0> ;
  assign Dbg_Trig_Out_1[4] = \<const0> ;
  assign Dbg_Trig_Out_1[5] = \<const0> ;
  assign Dbg_Trig_Out_1[6] = \<const0> ;
  assign Dbg_Trig_Out_1[7] = \<const0> ;
  assign Dbg_Trig_Out_10[0] = \<const0> ;
  assign Dbg_Trig_Out_10[1] = \<const0> ;
  assign Dbg_Trig_Out_10[2] = \<const0> ;
  assign Dbg_Trig_Out_10[3] = \<const0> ;
  assign Dbg_Trig_Out_10[4] = \<const0> ;
  assign Dbg_Trig_Out_10[5] = \<const0> ;
  assign Dbg_Trig_Out_10[6] = \<const0> ;
  assign Dbg_Trig_Out_10[7] = \<const0> ;
  assign Dbg_Trig_Out_11[0] = \<const0> ;
  assign Dbg_Trig_Out_11[1] = \<const0> ;
  assign Dbg_Trig_Out_11[2] = \<const0> ;
  assign Dbg_Trig_Out_11[3] = \<const0> ;
  assign Dbg_Trig_Out_11[4] = \<const0> ;
  assign Dbg_Trig_Out_11[5] = \<const0> ;
  assign Dbg_Trig_Out_11[6] = \<const0> ;
  assign Dbg_Trig_Out_11[7] = \<const0> ;
  assign Dbg_Trig_Out_12[0] = \<const0> ;
  assign Dbg_Trig_Out_12[1] = \<const0> ;
  assign Dbg_Trig_Out_12[2] = \<const0> ;
  assign Dbg_Trig_Out_12[3] = \<const0> ;
  assign Dbg_Trig_Out_12[4] = \<const0> ;
  assign Dbg_Trig_Out_12[5] = \<const0> ;
  assign Dbg_Trig_Out_12[6] = \<const0> ;
  assign Dbg_Trig_Out_12[7] = \<const0> ;
  assign Dbg_Trig_Out_13[0] = \<const0> ;
  assign Dbg_Trig_Out_13[1] = \<const0> ;
  assign Dbg_Trig_Out_13[2] = \<const0> ;
  assign Dbg_Trig_Out_13[3] = \<const0> ;
  assign Dbg_Trig_Out_13[4] = \<const0> ;
  assign Dbg_Trig_Out_13[5] = \<const0> ;
  assign Dbg_Trig_Out_13[6] = \<const0> ;
  assign Dbg_Trig_Out_13[7] = \<const0> ;
  assign Dbg_Trig_Out_14[0] = \<const0> ;
  assign Dbg_Trig_Out_14[1] = \<const0> ;
  assign Dbg_Trig_Out_14[2] = \<const0> ;
  assign Dbg_Trig_Out_14[3] = \<const0> ;
  assign Dbg_Trig_Out_14[4] = \<const0> ;
  assign Dbg_Trig_Out_14[5] = \<const0> ;
  assign Dbg_Trig_Out_14[6] = \<const0> ;
  assign Dbg_Trig_Out_14[7] = \<const0> ;
  assign Dbg_Trig_Out_15[0] = \<const0> ;
  assign Dbg_Trig_Out_15[1] = \<const0> ;
  assign Dbg_Trig_Out_15[2] = \<const0> ;
  assign Dbg_Trig_Out_15[3] = \<const0> ;
  assign Dbg_Trig_Out_15[4] = \<const0> ;
  assign Dbg_Trig_Out_15[5] = \<const0> ;
  assign Dbg_Trig_Out_15[6] = \<const0> ;
  assign Dbg_Trig_Out_15[7] = \<const0> ;
  assign Dbg_Trig_Out_16[0] = \<const0> ;
  assign Dbg_Trig_Out_16[1] = \<const0> ;
  assign Dbg_Trig_Out_16[2] = \<const0> ;
  assign Dbg_Trig_Out_16[3] = \<const0> ;
  assign Dbg_Trig_Out_16[4] = \<const0> ;
  assign Dbg_Trig_Out_16[5] = \<const0> ;
  assign Dbg_Trig_Out_16[6] = \<const0> ;
  assign Dbg_Trig_Out_16[7] = \<const0> ;
  assign Dbg_Trig_Out_17[0] = \<const0> ;
  assign Dbg_Trig_Out_17[1] = \<const0> ;
  assign Dbg_Trig_Out_17[2] = \<const0> ;
  assign Dbg_Trig_Out_17[3] = \<const0> ;
  assign Dbg_Trig_Out_17[4] = \<const0> ;
  assign Dbg_Trig_Out_17[5] = \<const0> ;
  assign Dbg_Trig_Out_17[6] = \<const0> ;
  assign Dbg_Trig_Out_17[7] = \<const0> ;
  assign Dbg_Trig_Out_18[0] = \<const0> ;
  assign Dbg_Trig_Out_18[1] = \<const0> ;
  assign Dbg_Trig_Out_18[2] = \<const0> ;
  assign Dbg_Trig_Out_18[3] = \<const0> ;
  assign Dbg_Trig_Out_18[4] = \<const0> ;
  assign Dbg_Trig_Out_18[5] = \<const0> ;
  assign Dbg_Trig_Out_18[6] = \<const0> ;
  assign Dbg_Trig_Out_18[7] = \<const0> ;
  assign Dbg_Trig_Out_19[0] = \<const0> ;
  assign Dbg_Trig_Out_19[1] = \<const0> ;
  assign Dbg_Trig_Out_19[2] = \<const0> ;
  assign Dbg_Trig_Out_19[3] = \<const0> ;
  assign Dbg_Trig_Out_19[4] = \<const0> ;
  assign Dbg_Trig_Out_19[5] = \<const0> ;
  assign Dbg_Trig_Out_19[6] = \<const0> ;
  assign Dbg_Trig_Out_19[7] = \<const0> ;
  assign Dbg_Trig_Out_2[0] = \<const0> ;
  assign Dbg_Trig_Out_2[1] = \<const0> ;
  assign Dbg_Trig_Out_2[2] = \<const0> ;
  assign Dbg_Trig_Out_2[3] = \<const0> ;
  assign Dbg_Trig_Out_2[4] = \<const0> ;
  assign Dbg_Trig_Out_2[5] = \<const0> ;
  assign Dbg_Trig_Out_2[6] = \<const0> ;
  assign Dbg_Trig_Out_2[7] = \<const0> ;
  assign Dbg_Trig_Out_20[0] = \<const0> ;
  assign Dbg_Trig_Out_20[1] = \<const0> ;
  assign Dbg_Trig_Out_20[2] = \<const0> ;
  assign Dbg_Trig_Out_20[3] = \<const0> ;
  assign Dbg_Trig_Out_20[4] = \<const0> ;
  assign Dbg_Trig_Out_20[5] = \<const0> ;
  assign Dbg_Trig_Out_20[6] = \<const0> ;
  assign Dbg_Trig_Out_20[7] = \<const0> ;
  assign Dbg_Trig_Out_21[0] = \<const0> ;
  assign Dbg_Trig_Out_21[1] = \<const0> ;
  assign Dbg_Trig_Out_21[2] = \<const0> ;
  assign Dbg_Trig_Out_21[3] = \<const0> ;
  assign Dbg_Trig_Out_21[4] = \<const0> ;
  assign Dbg_Trig_Out_21[5] = \<const0> ;
  assign Dbg_Trig_Out_21[6] = \<const0> ;
  assign Dbg_Trig_Out_21[7] = \<const0> ;
  assign Dbg_Trig_Out_22[0] = \<const0> ;
  assign Dbg_Trig_Out_22[1] = \<const0> ;
  assign Dbg_Trig_Out_22[2] = \<const0> ;
  assign Dbg_Trig_Out_22[3] = \<const0> ;
  assign Dbg_Trig_Out_22[4] = \<const0> ;
  assign Dbg_Trig_Out_22[5] = \<const0> ;
  assign Dbg_Trig_Out_22[6] = \<const0> ;
  assign Dbg_Trig_Out_22[7] = \<const0> ;
  assign Dbg_Trig_Out_23[0] = \<const0> ;
  assign Dbg_Trig_Out_23[1] = \<const0> ;
  assign Dbg_Trig_Out_23[2] = \<const0> ;
  assign Dbg_Trig_Out_23[3] = \<const0> ;
  assign Dbg_Trig_Out_23[4] = \<const0> ;
  assign Dbg_Trig_Out_23[5] = \<const0> ;
  assign Dbg_Trig_Out_23[6] = \<const0> ;
  assign Dbg_Trig_Out_23[7] = \<const0> ;
  assign Dbg_Trig_Out_24[0] = \<const0> ;
  assign Dbg_Trig_Out_24[1] = \<const0> ;
  assign Dbg_Trig_Out_24[2] = \<const0> ;
  assign Dbg_Trig_Out_24[3] = \<const0> ;
  assign Dbg_Trig_Out_24[4] = \<const0> ;
  assign Dbg_Trig_Out_24[5] = \<const0> ;
  assign Dbg_Trig_Out_24[6] = \<const0> ;
  assign Dbg_Trig_Out_24[7] = \<const0> ;
  assign Dbg_Trig_Out_25[0] = \<const0> ;
  assign Dbg_Trig_Out_25[1] = \<const0> ;
  assign Dbg_Trig_Out_25[2] = \<const0> ;
  assign Dbg_Trig_Out_25[3] = \<const0> ;
  assign Dbg_Trig_Out_25[4] = \<const0> ;
  assign Dbg_Trig_Out_25[5] = \<const0> ;
  assign Dbg_Trig_Out_25[6] = \<const0> ;
  assign Dbg_Trig_Out_25[7] = \<const0> ;
  assign Dbg_Trig_Out_26[0] = \<const0> ;
  assign Dbg_Trig_Out_26[1] = \<const0> ;
  assign Dbg_Trig_Out_26[2] = \<const0> ;
  assign Dbg_Trig_Out_26[3] = \<const0> ;
  assign Dbg_Trig_Out_26[4] = \<const0> ;
  assign Dbg_Trig_Out_26[5] = \<const0> ;
  assign Dbg_Trig_Out_26[6] = \<const0> ;
  assign Dbg_Trig_Out_26[7] = \<const0> ;
  assign Dbg_Trig_Out_27[0] = \<const0> ;
  assign Dbg_Trig_Out_27[1] = \<const0> ;
  assign Dbg_Trig_Out_27[2] = \<const0> ;
  assign Dbg_Trig_Out_27[3] = \<const0> ;
  assign Dbg_Trig_Out_27[4] = \<const0> ;
  assign Dbg_Trig_Out_27[5] = \<const0> ;
  assign Dbg_Trig_Out_27[6] = \<const0> ;
  assign Dbg_Trig_Out_27[7] = \<const0> ;
  assign Dbg_Trig_Out_28[0] = \<const0> ;
  assign Dbg_Trig_Out_28[1] = \<const0> ;
  assign Dbg_Trig_Out_28[2] = \<const0> ;
  assign Dbg_Trig_Out_28[3] = \<const0> ;
  assign Dbg_Trig_Out_28[4] = \<const0> ;
  assign Dbg_Trig_Out_28[5] = \<const0> ;
  assign Dbg_Trig_Out_28[6] = \<const0> ;
  assign Dbg_Trig_Out_28[7] = \<const0> ;
  assign Dbg_Trig_Out_29[0] = \<const0> ;
  assign Dbg_Trig_Out_29[1] = \<const0> ;
  assign Dbg_Trig_Out_29[2] = \<const0> ;
  assign Dbg_Trig_Out_29[3] = \<const0> ;
  assign Dbg_Trig_Out_29[4] = \<const0> ;
  assign Dbg_Trig_Out_29[5] = \<const0> ;
  assign Dbg_Trig_Out_29[6] = \<const0> ;
  assign Dbg_Trig_Out_29[7] = \<const0> ;
  assign Dbg_Trig_Out_3[0] = \<const0> ;
  assign Dbg_Trig_Out_3[1] = \<const0> ;
  assign Dbg_Trig_Out_3[2] = \<const0> ;
  assign Dbg_Trig_Out_3[3] = \<const0> ;
  assign Dbg_Trig_Out_3[4] = \<const0> ;
  assign Dbg_Trig_Out_3[5] = \<const0> ;
  assign Dbg_Trig_Out_3[6] = \<const0> ;
  assign Dbg_Trig_Out_3[7] = \<const0> ;
  assign Dbg_Trig_Out_30[0] = \<const0> ;
  assign Dbg_Trig_Out_30[1] = \<const0> ;
  assign Dbg_Trig_Out_30[2] = \<const0> ;
  assign Dbg_Trig_Out_30[3] = \<const0> ;
  assign Dbg_Trig_Out_30[4] = \<const0> ;
  assign Dbg_Trig_Out_30[5] = \<const0> ;
  assign Dbg_Trig_Out_30[6] = \<const0> ;
  assign Dbg_Trig_Out_30[7] = \<const0> ;
  assign Dbg_Trig_Out_31[0] = \<const0> ;
  assign Dbg_Trig_Out_31[1] = \<const0> ;
  assign Dbg_Trig_Out_31[2] = \<const0> ;
  assign Dbg_Trig_Out_31[3] = \<const0> ;
  assign Dbg_Trig_Out_31[4] = \<const0> ;
  assign Dbg_Trig_Out_31[5] = \<const0> ;
  assign Dbg_Trig_Out_31[6] = \<const0> ;
  assign Dbg_Trig_Out_31[7] = \<const0> ;
  assign Dbg_Trig_Out_4[0] = \<const0> ;
  assign Dbg_Trig_Out_4[1] = \<const0> ;
  assign Dbg_Trig_Out_4[2] = \<const0> ;
  assign Dbg_Trig_Out_4[3] = \<const0> ;
  assign Dbg_Trig_Out_4[4] = \<const0> ;
  assign Dbg_Trig_Out_4[5] = \<const0> ;
  assign Dbg_Trig_Out_4[6] = \<const0> ;
  assign Dbg_Trig_Out_4[7] = \<const0> ;
  assign Dbg_Trig_Out_5[0] = \<const0> ;
  assign Dbg_Trig_Out_5[1] = \<const0> ;
  assign Dbg_Trig_Out_5[2] = \<const0> ;
  assign Dbg_Trig_Out_5[3] = \<const0> ;
  assign Dbg_Trig_Out_5[4] = \<const0> ;
  assign Dbg_Trig_Out_5[5] = \<const0> ;
  assign Dbg_Trig_Out_5[6] = \<const0> ;
  assign Dbg_Trig_Out_5[7] = \<const0> ;
  assign Dbg_Trig_Out_6[0] = \<const0> ;
  assign Dbg_Trig_Out_6[1] = \<const0> ;
  assign Dbg_Trig_Out_6[2] = \<const0> ;
  assign Dbg_Trig_Out_6[3] = \<const0> ;
  assign Dbg_Trig_Out_6[4] = \<const0> ;
  assign Dbg_Trig_Out_6[5] = \<const0> ;
  assign Dbg_Trig_Out_6[6] = \<const0> ;
  assign Dbg_Trig_Out_6[7] = \<const0> ;
  assign Dbg_Trig_Out_7[0] = \<const0> ;
  assign Dbg_Trig_Out_7[1] = \<const0> ;
  assign Dbg_Trig_Out_7[2] = \<const0> ;
  assign Dbg_Trig_Out_7[3] = \<const0> ;
  assign Dbg_Trig_Out_7[4] = \<const0> ;
  assign Dbg_Trig_Out_7[5] = \<const0> ;
  assign Dbg_Trig_Out_7[6] = \<const0> ;
  assign Dbg_Trig_Out_7[7] = \<const0> ;
  assign Dbg_Trig_Out_8[0] = \<const0> ;
  assign Dbg_Trig_Out_8[1] = \<const0> ;
  assign Dbg_Trig_Out_8[2] = \<const0> ;
  assign Dbg_Trig_Out_8[3] = \<const0> ;
  assign Dbg_Trig_Out_8[4] = \<const0> ;
  assign Dbg_Trig_Out_8[5] = \<const0> ;
  assign Dbg_Trig_Out_8[6] = \<const0> ;
  assign Dbg_Trig_Out_8[7] = \<const0> ;
  assign Dbg_Trig_Out_9[0] = \<const0> ;
  assign Dbg_Trig_Out_9[1] = \<const0> ;
  assign Dbg_Trig_Out_9[2] = \<const0> ;
  assign Dbg_Trig_Out_9[3] = \<const0> ;
  assign Dbg_Trig_Out_9[4] = \<const0> ;
  assign Dbg_Trig_Out_9[5] = \<const0> ;
  assign Dbg_Trig_Out_9[6] = \<const0> ;
  assign Dbg_Trig_Out_9[7] = \<const0> ;
  assign Dbg_Update_1 = Dbg_Update_0;
  assign Dbg_Update_10 = Dbg_Update_0;
  assign Dbg_Update_11 = Dbg_Update_0;
  assign Dbg_Update_12 = Dbg_Update_0;
  assign Dbg_Update_13 = Dbg_Update_0;
  assign Dbg_Update_14 = Dbg_Update_0;
  assign Dbg_Update_15 = Dbg_Update_0;
  assign Dbg_Update_16 = Dbg_Update_0;
  assign Dbg_Update_17 = Dbg_Update_0;
  assign Dbg_Update_18 = Dbg_Update_0;
  assign Dbg_Update_19 = Dbg_Update_0;
  assign Dbg_Update_2 = Dbg_Update_0;
  assign Dbg_Update_20 = Dbg_Update_0;
  assign Dbg_Update_21 = Dbg_Update_0;
  assign Dbg_Update_22 = Dbg_Update_0;
  assign Dbg_Update_23 = Dbg_Update_0;
  assign Dbg_Update_24 = Dbg_Update_0;
  assign Dbg_Update_25 = Dbg_Update_0;
  assign Dbg_Update_26 = Dbg_Update_0;
  assign Dbg_Update_27 = Dbg_Update_0;
  assign Dbg_Update_28 = Dbg_Update_0;
  assign Dbg_Update_29 = Dbg_Update_0;
  assign Dbg_Update_3 = Dbg_Update_0;
  assign Dbg_Update_30 = Dbg_Update_0;
  assign Dbg_Update_31 = Dbg_Update_0;
  assign Dbg_Update_4 = Dbg_Update_0;
  assign Dbg_Update_5 = Dbg_Update_0;
  assign Dbg_Update_6 = Dbg_Update_0;
  assign Dbg_Update_7 = Dbg_Update_0;
  assign Dbg_Update_8 = Dbg_Update_0;
  assign Dbg_Update_9 = Dbg_Update_0;
  assign Dbg_WDATA_0[31] = \<const0> ;
  assign Dbg_WDATA_0[30] = \<const0> ;
  assign Dbg_WDATA_0[29] = \<const0> ;
  assign Dbg_WDATA_0[28] = \<const0> ;
  assign Dbg_WDATA_0[27] = \<const0> ;
  assign Dbg_WDATA_0[26] = \<const0> ;
  assign Dbg_WDATA_0[25] = \<const0> ;
  assign Dbg_WDATA_0[24] = \<const0> ;
  assign Dbg_WDATA_0[23] = \<const0> ;
  assign Dbg_WDATA_0[22] = \<const0> ;
  assign Dbg_WDATA_0[21] = \<const0> ;
  assign Dbg_WDATA_0[20] = \<const0> ;
  assign Dbg_WDATA_0[19] = \<const0> ;
  assign Dbg_WDATA_0[18] = \<const0> ;
  assign Dbg_WDATA_0[17] = \<const0> ;
  assign Dbg_WDATA_0[16] = \<const0> ;
  assign Dbg_WDATA_0[15] = \<const0> ;
  assign Dbg_WDATA_0[14] = \<const0> ;
  assign Dbg_WDATA_0[13] = \<const0> ;
  assign Dbg_WDATA_0[12] = \<const0> ;
  assign Dbg_WDATA_0[11] = \<const0> ;
  assign Dbg_WDATA_0[10] = \<const0> ;
  assign Dbg_WDATA_0[9] = \<const0> ;
  assign Dbg_WDATA_0[8] = \<const0> ;
  assign Dbg_WDATA_0[7] = \<const0> ;
  assign Dbg_WDATA_0[6] = \<const0> ;
  assign Dbg_WDATA_0[5] = \<const0> ;
  assign Dbg_WDATA_0[4] = \<const0> ;
  assign Dbg_WDATA_0[3] = \<const0> ;
  assign Dbg_WDATA_0[2] = \<const0> ;
  assign Dbg_WDATA_0[1] = \<const0> ;
  assign Dbg_WDATA_0[0] = \<const0> ;
  assign Dbg_WDATA_1[31] = \<const0> ;
  assign Dbg_WDATA_1[30] = \<const0> ;
  assign Dbg_WDATA_1[29] = \<const0> ;
  assign Dbg_WDATA_1[28] = \<const0> ;
  assign Dbg_WDATA_1[27] = \<const0> ;
  assign Dbg_WDATA_1[26] = \<const0> ;
  assign Dbg_WDATA_1[25] = \<const0> ;
  assign Dbg_WDATA_1[24] = \<const0> ;
  assign Dbg_WDATA_1[23] = \<const0> ;
  assign Dbg_WDATA_1[22] = \<const0> ;
  assign Dbg_WDATA_1[21] = \<const0> ;
  assign Dbg_WDATA_1[20] = \<const0> ;
  assign Dbg_WDATA_1[19] = \<const0> ;
  assign Dbg_WDATA_1[18] = \<const0> ;
  assign Dbg_WDATA_1[17] = \<const0> ;
  assign Dbg_WDATA_1[16] = \<const0> ;
  assign Dbg_WDATA_1[15] = \<const0> ;
  assign Dbg_WDATA_1[14] = \<const0> ;
  assign Dbg_WDATA_1[13] = \<const0> ;
  assign Dbg_WDATA_1[12] = \<const0> ;
  assign Dbg_WDATA_1[11] = \<const0> ;
  assign Dbg_WDATA_1[10] = \<const0> ;
  assign Dbg_WDATA_1[9] = \<const0> ;
  assign Dbg_WDATA_1[8] = \<const0> ;
  assign Dbg_WDATA_1[7] = \<const0> ;
  assign Dbg_WDATA_1[6] = \<const0> ;
  assign Dbg_WDATA_1[5] = \<const0> ;
  assign Dbg_WDATA_1[4] = \<const0> ;
  assign Dbg_WDATA_1[3] = \<const0> ;
  assign Dbg_WDATA_1[2] = \<const0> ;
  assign Dbg_WDATA_1[1] = \<const0> ;
  assign Dbg_WDATA_1[0] = \<const0> ;
  assign Dbg_WDATA_10[31] = \<const0> ;
  assign Dbg_WDATA_10[30] = \<const0> ;
  assign Dbg_WDATA_10[29] = \<const0> ;
  assign Dbg_WDATA_10[28] = \<const0> ;
  assign Dbg_WDATA_10[27] = \<const0> ;
  assign Dbg_WDATA_10[26] = \<const0> ;
  assign Dbg_WDATA_10[25] = \<const0> ;
  assign Dbg_WDATA_10[24] = \<const0> ;
  assign Dbg_WDATA_10[23] = \<const0> ;
  assign Dbg_WDATA_10[22] = \<const0> ;
  assign Dbg_WDATA_10[21] = \<const0> ;
  assign Dbg_WDATA_10[20] = \<const0> ;
  assign Dbg_WDATA_10[19] = \<const0> ;
  assign Dbg_WDATA_10[18] = \<const0> ;
  assign Dbg_WDATA_10[17] = \<const0> ;
  assign Dbg_WDATA_10[16] = \<const0> ;
  assign Dbg_WDATA_10[15] = \<const0> ;
  assign Dbg_WDATA_10[14] = \<const0> ;
  assign Dbg_WDATA_10[13] = \<const0> ;
  assign Dbg_WDATA_10[12] = \<const0> ;
  assign Dbg_WDATA_10[11] = \<const0> ;
  assign Dbg_WDATA_10[10] = \<const0> ;
  assign Dbg_WDATA_10[9] = \<const0> ;
  assign Dbg_WDATA_10[8] = \<const0> ;
  assign Dbg_WDATA_10[7] = \<const0> ;
  assign Dbg_WDATA_10[6] = \<const0> ;
  assign Dbg_WDATA_10[5] = \<const0> ;
  assign Dbg_WDATA_10[4] = \<const0> ;
  assign Dbg_WDATA_10[3] = \<const0> ;
  assign Dbg_WDATA_10[2] = \<const0> ;
  assign Dbg_WDATA_10[1] = \<const0> ;
  assign Dbg_WDATA_10[0] = \<const0> ;
  assign Dbg_WDATA_11[31] = \<const0> ;
  assign Dbg_WDATA_11[30] = \<const0> ;
  assign Dbg_WDATA_11[29] = \<const0> ;
  assign Dbg_WDATA_11[28] = \<const0> ;
  assign Dbg_WDATA_11[27] = \<const0> ;
  assign Dbg_WDATA_11[26] = \<const0> ;
  assign Dbg_WDATA_11[25] = \<const0> ;
  assign Dbg_WDATA_11[24] = \<const0> ;
  assign Dbg_WDATA_11[23] = \<const0> ;
  assign Dbg_WDATA_11[22] = \<const0> ;
  assign Dbg_WDATA_11[21] = \<const0> ;
  assign Dbg_WDATA_11[20] = \<const0> ;
  assign Dbg_WDATA_11[19] = \<const0> ;
  assign Dbg_WDATA_11[18] = \<const0> ;
  assign Dbg_WDATA_11[17] = \<const0> ;
  assign Dbg_WDATA_11[16] = \<const0> ;
  assign Dbg_WDATA_11[15] = \<const0> ;
  assign Dbg_WDATA_11[14] = \<const0> ;
  assign Dbg_WDATA_11[13] = \<const0> ;
  assign Dbg_WDATA_11[12] = \<const0> ;
  assign Dbg_WDATA_11[11] = \<const0> ;
  assign Dbg_WDATA_11[10] = \<const0> ;
  assign Dbg_WDATA_11[9] = \<const0> ;
  assign Dbg_WDATA_11[8] = \<const0> ;
  assign Dbg_WDATA_11[7] = \<const0> ;
  assign Dbg_WDATA_11[6] = \<const0> ;
  assign Dbg_WDATA_11[5] = \<const0> ;
  assign Dbg_WDATA_11[4] = \<const0> ;
  assign Dbg_WDATA_11[3] = \<const0> ;
  assign Dbg_WDATA_11[2] = \<const0> ;
  assign Dbg_WDATA_11[1] = \<const0> ;
  assign Dbg_WDATA_11[0] = \<const0> ;
  assign Dbg_WDATA_12[31] = \<const0> ;
  assign Dbg_WDATA_12[30] = \<const0> ;
  assign Dbg_WDATA_12[29] = \<const0> ;
  assign Dbg_WDATA_12[28] = \<const0> ;
  assign Dbg_WDATA_12[27] = \<const0> ;
  assign Dbg_WDATA_12[26] = \<const0> ;
  assign Dbg_WDATA_12[25] = \<const0> ;
  assign Dbg_WDATA_12[24] = \<const0> ;
  assign Dbg_WDATA_12[23] = \<const0> ;
  assign Dbg_WDATA_12[22] = \<const0> ;
  assign Dbg_WDATA_12[21] = \<const0> ;
  assign Dbg_WDATA_12[20] = \<const0> ;
  assign Dbg_WDATA_12[19] = \<const0> ;
  assign Dbg_WDATA_12[18] = \<const0> ;
  assign Dbg_WDATA_12[17] = \<const0> ;
  assign Dbg_WDATA_12[16] = \<const0> ;
  assign Dbg_WDATA_12[15] = \<const0> ;
  assign Dbg_WDATA_12[14] = \<const0> ;
  assign Dbg_WDATA_12[13] = \<const0> ;
  assign Dbg_WDATA_12[12] = \<const0> ;
  assign Dbg_WDATA_12[11] = \<const0> ;
  assign Dbg_WDATA_12[10] = \<const0> ;
  assign Dbg_WDATA_12[9] = \<const0> ;
  assign Dbg_WDATA_12[8] = \<const0> ;
  assign Dbg_WDATA_12[7] = \<const0> ;
  assign Dbg_WDATA_12[6] = \<const0> ;
  assign Dbg_WDATA_12[5] = \<const0> ;
  assign Dbg_WDATA_12[4] = \<const0> ;
  assign Dbg_WDATA_12[3] = \<const0> ;
  assign Dbg_WDATA_12[2] = \<const0> ;
  assign Dbg_WDATA_12[1] = \<const0> ;
  assign Dbg_WDATA_12[0] = \<const0> ;
  assign Dbg_WDATA_13[31] = \<const0> ;
  assign Dbg_WDATA_13[30] = \<const0> ;
  assign Dbg_WDATA_13[29] = \<const0> ;
  assign Dbg_WDATA_13[28] = \<const0> ;
  assign Dbg_WDATA_13[27] = \<const0> ;
  assign Dbg_WDATA_13[26] = \<const0> ;
  assign Dbg_WDATA_13[25] = \<const0> ;
  assign Dbg_WDATA_13[24] = \<const0> ;
  assign Dbg_WDATA_13[23] = \<const0> ;
  assign Dbg_WDATA_13[22] = \<const0> ;
  assign Dbg_WDATA_13[21] = \<const0> ;
  assign Dbg_WDATA_13[20] = \<const0> ;
  assign Dbg_WDATA_13[19] = \<const0> ;
  assign Dbg_WDATA_13[18] = \<const0> ;
  assign Dbg_WDATA_13[17] = \<const0> ;
  assign Dbg_WDATA_13[16] = \<const0> ;
  assign Dbg_WDATA_13[15] = \<const0> ;
  assign Dbg_WDATA_13[14] = \<const0> ;
  assign Dbg_WDATA_13[13] = \<const0> ;
  assign Dbg_WDATA_13[12] = \<const0> ;
  assign Dbg_WDATA_13[11] = \<const0> ;
  assign Dbg_WDATA_13[10] = \<const0> ;
  assign Dbg_WDATA_13[9] = \<const0> ;
  assign Dbg_WDATA_13[8] = \<const0> ;
  assign Dbg_WDATA_13[7] = \<const0> ;
  assign Dbg_WDATA_13[6] = \<const0> ;
  assign Dbg_WDATA_13[5] = \<const0> ;
  assign Dbg_WDATA_13[4] = \<const0> ;
  assign Dbg_WDATA_13[3] = \<const0> ;
  assign Dbg_WDATA_13[2] = \<const0> ;
  assign Dbg_WDATA_13[1] = \<const0> ;
  assign Dbg_WDATA_13[0] = \<const0> ;
  assign Dbg_WDATA_14[31] = \<const0> ;
  assign Dbg_WDATA_14[30] = \<const0> ;
  assign Dbg_WDATA_14[29] = \<const0> ;
  assign Dbg_WDATA_14[28] = \<const0> ;
  assign Dbg_WDATA_14[27] = \<const0> ;
  assign Dbg_WDATA_14[26] = \<const0> ;
  assign Dbg_WDATA_14[25] = \<const0> ;
  assign Dbg_WDATA_14[24] = \<const0> ;
  assign Dbg_WDATA_14[23] = \<const0> ;
  assign Dbg_WDATA_14[22] = \<const0> ;
  assign Dbg_WDATA_14[21] = \<const0> ;
  assign Dbg_WDATA_14[20] = \<const0> ;
  assign Dbg_WDATA_14[19] = \<const0> ;
  assign Dbg_WDATA_14[18] = \<const0> ;
  assign Dbg_WDATA_14[17] = \<const0> ;
  assign Dbg_WDATA_14[16] = \<const0> ;
  assign Dbg_WDATA_14[15] = \<const0> ;
  assign Dbg_WDATA_14[14] = \<const0> ;
  assign Dbg_WDATA_14[13] = \<const0> ;
  assign Dbg_WDATA_14[12] = \<const0> ;
  assign Dbg_WDATA_14[11] = \<const0> ;
  assign Dbg_WDATA_14[10] = \<const0> ;
  assign Dbg_WDATA_14[9] = \<const0> ;
  assign Dbg_WDATA_14[8] = \<const0> ;
  assign Dbg_WDATA_14[7] = \<const0> ;
  assign Dbg_WDATA_14[6] = \<const0> ;
  assign Dbg_WDATA_14[5] = \<const0> ;
  assign Dbg_WDATA_14[4] = \<const0> ;
  assign Dbg_WDATA_14[3] = \<const0> ;
  assign Dbg_WDATA_14[2] = \<const0> ;
  assign Dbg_WDATA_14[1] = \<const0> ;
  assign Dbg_WDATA_14[0] = \<const0> ;
  assign Dbg_WDATA_15[31] = \<const0> ;
  assign Dbg_WDATA_15[30] = \<const0> ;
  assign Dbg_WDATA_15[29] = \<const0> ;
  assign Dbg_WDATA_15[28] = \<const0> ;
  assign Dbg_WDATA_15[27] = \<const0> ;
  assign Dbg_WDATA_15[26] = \<const0> ;
  assign Dbg_WDATA_15[25] = \<const0> ;
  assign Dbg_WDATA_15[24] = \<const0> ;
  assign Dbg_WDATA_15[23] = \<const0> ;
  assign Dbg_WDATA_15[22] = \<const0> ;
  assign Dbg_WDATA_15[21] = \<const0> ;
  assign Dbg_WDATA_15[20] = \<const0> ;
  assign Dbg_WDATA_15[19] = \<const0> ;
  assign Dbg_WDATA_15[18] = \<const0> ;
  assign Dbg_WDATA_15[17] = \<const0> ;
  assign Dbg_WDATA_15[16] = \<const0> ;
  assign Dbg_WDATA_15[15] = \<const0> ;
  assign Dbg_WDATA_15[14] = \<const0> ;
  assign Dbg_WDATA_15[13] = \<const0> ;
  assign Dbg_WDATA_15[12] = \<const0> ;
  assign Dbg_WDATA_15[11] = \<const0> ;
  assign Dbg_WDATA_15[10] = \<const0> ;
  assign Dbg_WDATA_15[9] = \<const0> ;
  assign Dbg_WDATA_15[8] = \<const0> ;
  assign Dbg_WDATA_15[7] = \<const0> ;
  assign Dbg_WDATA_15[6] = \<const0> ;
  assign Dbg_WDATA_15[5] = \<const0> ;
  assign Dbg_WDATA_15[4] = \<const0> ;
  assign Dbg_WDATA_15[3] = \<const0> ;
  assign Dbg_WDATA_15[2] = \<const0> ;
  assign Dbg_WDATA_15[1] = \<const0> ;
  assign Dbg_WDATA_15[0] = \<const0> ;
  assign Dbg_WDATA_16[31] = \<const0> ;
  assign Dbg_WDATA_16[30] = \<const0> ;
  assign Dbg_WDATA_16[29] = \<const0> ;
  assign Dbg_WDATA_16[28] = \<const0> ;
  assign Dbg_WDATA_16[27] = \<const0> ;
  assign Dbg_WDATA_16[26] = \<const0> ;
  assign Dbg_WDATA_16[25] = \<const0> ;
  assign Dbg_WDATA_16[24] = \<const0> ;
  assign Dbg_WDATA_16[23] = \<const0> ;
  assign Dbg_WDATA_16[22] = \<const0> ;
  assign Dbg_WDATA_16[21] = \<const0> ;
  assign Dbg_WDATA_16[20] = \<const0> ;
  assign Dbg_WDATA_16[19] = \<const0> ;
  assign Dbg_WDATA_16[18] = \<const0> ;
  assign Dbg_WDATA_16[17] = \<const0> ;
  assign Dbg_WDATA_16[16] = \<const0> ;
  assign Dbg_WDATA_16[15] = \<const0> ;
  assign Dbg_WDATA_16[14] = \<const0> ;
  assign Dbg_WDATA_16[13] = \<const0> ;
  assign Dbg_WDATA_16[12] = \<const0> ;
  assign Dbg_WDATA_16[11] = \<const0> ;
  assign Dbg_WDATA_16[10] = \<const0> ;
  assign Dbg_WDATA_16[9] = \<const0> ;
  assign Dbg_WDATA_16[8] = \<const0> ;
  assign Dbg_WDATA_16[7] = \<const0> ;
  assign Dbg_WDATA_16[6] = \<const0> ;
  assign Dbg_WDATA_16[5] = \<const0> ;
  assign Dbg_WDATA_16[4] = \<const0> ;
  assign Dbg_WDATA_16[3] = \<const0> ;
  assign Dbg_WDATA_16[2] = \<const0> ;
  assign Dbg_WDATA_16[1] = \<const0> ;
  assign Dbg_WDATA_16[0] = \<const0> ;
  assign Dbg_WDATA_17[31] = \<const0> ;
  assign Dbg_WDATA_17[30] = \<const0> ;
  assign Dbg_WDATA_17[29] = \<const0> ;
  assign Dbg_WDATA_17[28] = \<const0> ;
  assign Dbg_WDATA_17[27] = \<const0> ;
  assign Dbg_WDATA_17[26] = \<const0> ;
  assign Dbg_WDATA_17[25] = \<const0> ;
  assign Dbg_WDATA_17[24] = \<const0> ;
  assign Dbg_WDATA_17[23] = \<const0> ;
  assign Dbg_WDATA_17[22] = \<const0> ;
  assign Dbg_WDATA_17[21] = \<const0> ;
  assign Dbg_WDATA_17[20] = \<const0> ;
  assign Dbg_WDATA_17[19] = \<const0> ;
  assign Dbg_WDATA_17[18] = \<const0> ;
  assign Dbg_WDATA_17[17] = \<const0> ;
  assign Dbg_WDATA_17[16] = \<const0> ;
  assign Dbg_WDATA_17[15] = \<const0> ;
  assign Dbg_WDATA_17[14] = \<const0> ;
  assign Dbg_WDATA_17[13] = \<const0> ;
  assign Dbg_WDATA_17[12] = \<const0> ;
  assign Dbg_WDATA_17[11] = \<const0> ;
  assign Dbg_WDATA_17[10] = \<const0> ;
  assign Dbg_WDATA_17[9] = \<const0> ;
  assign Dbg_WDATA_17[8] = \<const0> ;
  assign Dbg_WDATA_17[7] = \<const0> ;
  assign Dbg_WDATA_17[6] = \<const0> ;
  assign Dbg_WDATA_17[5] = \<const0> ;
  assign Dbg_WDATA_17[4] = \<const0> ;
  assign Dbg_WDATA_17[3] = \<const0> ;
  assign Dbg_WDATA_17[2] = \<const0> ;
  assign Dbg_WDATA_17[1] = \<const0> ;
  assign Dbg_WDATA_17[0] = \<const0> ;
  assign Dbg_WDATA_18[31] = \<const0> ;
  assign Dbg_WDATA_18[30] = \<const0> ;
  assign Dbg_WDATA_18[29] = \<const0> ;
  assign Dbg_WDATA_18[28] = \<const0> ;
  assign Dbg_WDATA_18[27] = \<const0> ;
  assign Dbg_WDATA_18[26] = \<const0> ;
  assign Dbg_WDATA_18[25] = \<const0> ;
  assign Dbg_WDATA_18[24] = \<const0> ;
  assign Dbg_WDATA_18[23] = \<const0> ;
  assign Dbg_WDATA_18[22] = \<const0> ;
  assign Dbg_WDATA_18[21] = \<const0> ;
  assign Dbg_WDATA_18[20] = \<const0> ;
  assign Dbg_WDATA_18[19] = \<const0> ;
  assign Dbg_WDATA_18[18] = \<const0> ;
  assign Dbg_WDATA_18[17] = \<const0> ;
  assign Dbg_WDATA_18[16] = \<const0> ;
  assign Dbg_WDATA_18[15] = \<const0> ;
  assign Dbg_WDATA_18[14] = \<const0> ;
  assign Dbg_WDATA_18[13] = \<const0> ;
  assign Dbg_WDATA_18[12] = \<const0> ;
  assign Dbg_WDATA_18[11] = \<const0> ;
  assign Dbg_WDATA_18[10] = \<const0> ;
  assign Dbg_WDATA_18[9] = \<const0> ;
  assign Dbg_WDATA_18[8] = \<const0> ;
  assign Dbg_WDATA_18[7] = \<const0> ;
  assign Dbg_WDATA_18[6] = \<const0> ;
  assign Dbg_WDATA_18[5] = \<const0> ;
  assign Dbg_WDATA_18[4] = \<const0> ;
  assign Dbg_WDATA_18[3] = \<const0> ;
  assign Dbg_WDATA_18[2] = \<const0> ;
  assign Dbg_WDATA_18[1] = \<const0> ;
  assign Dbg_WDATA_18[0] = \<const0> ;
  assign Dbg_WDATA_19[31] = \<const0> ;
  assign Dbg_WDATA_19[30] = \<const0> ;
  assign Dbg_WDATA_19[29] = \<const0> ;
  assign Dbg_WDATA_19[28] = \<const0> ;
  assign Dbg_WDATA_19[27] = \<const0> ;
  assign Dbg_WDATA_19[26] = \<const0> ;
  assign Dbg_WDATA_19[25] = \<const0> ;
  assign Dbg_WDATA_19[24] = \<const0> ;
  assign Dbg_WDATA_19[23] = \<const0> ;
  assign Dbg_WDATA_19[22] = \<const0> ;
  assign Dbg_WDATA_19[21] = \<const0> ;
  assign Dbg_WDATA_19[20] = \<const0> ;
  assign Dbg_WDATA_19[19] = \<const0> ;
  assign Dbg_WDATA_19[18] = \<const0> ;
  assign Dbg_WDATA_19[17] = \<const0> ;
  assign Dbg_WDATA_19[16] = \<const0> ;
  assign Dbg_WDATA_19[15] = \<const0> ;
  assign Dbg_WDATA_19[14] = \<const0> ;
  assign Dbg_WDATA_19[13] = \<const0> ;
  assign Dbg_WDATA_19[12] = \<const0> ;
  assign Dbg_WDATA_19[11] = \<const0> ;
  assign Dbg_WDATA_19[10] = \<const0> ;
  assign Dbg_WDATA_19[9] = \<const0> ;
  assign Dbg_WDATA_19[8] = \<const0> ;
  assign Dbg_WDATA_19[7] = \<const0> ;
  assign Dbg_WDATA_19[6] = \<const0> ;
  assign Dbg_WDATA_19[5] = \<const0> ;
  assign Dbg_WDATA_19[4] = \<const0> ;
  assign Dbg_WDATA_19[3] = \<const0> ;
  assign Dbg_WDATA_19[2] = \<const0> ;
  assign Dbg_WDATA_19[1] = \<const0> ;
  assign Dbg_WDATA_19[0] = \<const0> ;
  assign Dbg_WDATA_2[31] = \<const0> ;
  assign Dbg_WDATA_2[30] = \<const0> ;
  assign Dbg_WDATA_2[29] = \<const0> ;
  assign Dbg_WDATA_2[28] = \<const0> ;
  assign Dbg_WDATA_2[27] = \<const0> ;
  assign Dbg_WDATA_2[26] = \<const0> ;
  assign Dbg_WDATA_2[25] = \<const0> ;
  assign Dbg_WDATA_2[24] = \<const0> ;
  assign Dbg_WDATA_2[23] = \<const0> ;
  assign Dbg_WDATA_2[22] = \<const0> ;
  assign Dbg_WDATA_2[21] = \<const0> ;
  assign Dbg_WDATA_2[20] = \<const0> ;
  assign Dbg_WDATA_2[19] = \<const0> ;
  assign Dbg_WDATA_2[18] = \<const0> ;
  assign Dbg_WDATA_2[17] = \<const0> ;
  assign Dbg_WDATA_2[16] = \<const0> ;
  assign Dbg_WDATA_2[15] = \<const0> ;
  assign Dbg_WDATA_2[14] = \<const0> ;
  assign Dbg_WDATA_2[13] = \<const0> ;
  assign Dbg_WDATA_2[12] = \<const0> ;
  assign Dbg_WDATA_2[11] = \<const0> ;
  assign Dbg_WDATA_2[10] = \<const0> ;
  assign Dbg_WDATA_2[9] = \<const0> ;
  assign Dbg_WDATA_2[8] = \<const0> ;
  assign Dbg_WDATA_2[7] = \<const0> ;
  assign Dbg_WDATA_2[6] = \<const0> ;
  assign Dbg_WDATA_2[5] = \<const0> ;
  assign Dbg_WDATA_2[4] = \<const0> ;
  assign Dbg_WDATA_2[3] = \<const0> ;
  assign Dbg_WDATA_2[2] = \<const0> ;
  assign Dbg_WDATA_2[1] = \<const0> ;
  assign Dbg_WDATA_2[0] = \<const0> ;
  assign Dbg_WDATA_20[31] = \<const0> ;
  assign Dbg_WDATA_20[30] = \<const0> ;
  assign Dbg_WDATA_20[29] = \<const0> ;
  assign Dbg_WDATA_20[28] = \<const0> ;
  assign Dbg_WDATA_20[27] = \<const0> ;
  assign Dbg_WDATA_20[26] = \<const0> ;
  assign Dbg_WDATA_20[25] = \<const0> ;
  assign Dbg_WDATA_20[24] = \<const0> ;
  assign Dbg_WDATA_20[23] = \<const0> ;
  assign Dbg_WDATA_20[22] = \<const0> ;
  assign Dbg_WDATA_20[21] = \<const0> ;
  assign Dbg_WDATA_20[20] = \<const0> ;
  assign Dbg_WDATA_20[19] = \<const0> ;
  assign Dbg_WDATA_20[18] = \<const0> ;
  assign Dbg_WDATA_20[17] = \<const0> ;
  assign Dbg_WDATA_20[16] = \<const0> ;
  assign Dbg_WDATA_20[15] = \<const0> ;
  assign Dbg_WDATA_20[14] = \<const0> ;
  assign Dbg_WDATA_20[13] = \<const0> ;
  assign Dbg_WDATA_20[12] = \<const0> ;
  assign Dbg_WDATA_20[11] = \<const0> ;
  assign Dbg_WDATA_20[10] = \<const0> ;
  assign Dbg_WDATA_20[9] = \<const0> ;
  assign Dbg_WDATA_20[8] = \<const0> ;
  assign Dbg_WDATA_20[7] = \<const0> ;
  assign Dbg_WDATA_20[6] = \<const0> ;
  assign Dbg_WDATA_20[5] = \<const0> ;
  assign Dbg_WDATA_20[4] = \<const0> ;
  assign Dbg_WDATA_20[3] = \<const0> ;
  assign Dbg_WDATA_20[2] = \<const0> ;
  assign Dbg_WDATA_20[1] = \<const0> ;
  assign Dbg_WDATA_20[0] = \<const0> ;
  assign Dbg_WDATA_21[31] = \<const0> ;
  assign Dbg_WDATA_21[30] = \<const0> ;
  assign Dbg_WDATA_21[29] = \<const0> ;
  assign Dbg_WDATA_21[28] = \<const0> ;
  assign Dbg_WDATA_21[27] = \<const0> ;
  assign Dbg_WDATA_21[26] = \<const0> ;
  assign Dbg_WDATA_21[25] = \<const0> ;
  assign Dbg_WDATA_21[24] = \<const0> ;
  assign Dbg_WDATA_21[23] = \<const0> ;
  assign Dbg_WDATA_21[22] = \<const0> ;
  assign Dbg_WDATA_21[21] = \<const0> ;
  assign Dbg_WDATA_21[20] = \<const0> ;
  assign Dbg_WDATA_21[19] = \<const0> ;
  assign Dbg_WDATA_21[18] = \<const0> ;
  assign Dbg_WDATA_21[17] = \<const0> ;
  assign Dbg_WDATA_21[16] = \<const0> ;
  assign Dbg_WDATA_21[15] = \<const0> ;
  assign Dbg_WDATA_21[14] = \<const0> ;
  assign Dbg_WDATA_21[13] = \<const0> ;
  assign Dbg_WDATA_21[12] = \<const0> ;
  assign Dbg_WDATA_21[11] = \<const0> ;
  assign Dbg_WDATA_21[10] = \<const0> ;
  assign Dbg_WDATA_21[9] = \<const0> ;
  assign Dbg_WDATA_21[8] = \<const0> ;
  assign Dbg_WDATA_21[7] = \<const0> ;
  assign Dbg_WDATA_21[6] = \<const0> ;
  assign Dbg_WDATA_21[5] = \<const0> ;
  assign Dbg_WDATA_21[4] = \<const0> ;
  assign Dbg_WDATA_21[3] = \<const0> ;
  assign Dbg_WDATA_21[2] = \<const0> ;
  assign Dbg_WDATA_21[1] = \<const0> ;
  assign Dbg_WDATA_21[0] = \<const0> ;
  assign Dbg_WDATA_22[31] = \<const0> ;
  assign Dbg_WDATA_22[30] = \<const0> ;
  assign Dbg_WDATA_22[29] = \<const0> ;
  assign Dbg_WDATA_22[28] = \<const0> ;
  assign Dbg_WDATA_22[27] = \<const0> ;
  assign Dbg_WDATA_22[26] = \<const0> ;
  assign Dbg_WDATA_22[25] = \<const0> ;
  assign Dbg_WDATA_22[24] = \<const0> ;
  assign Dbg_WDATA_22[23] = \<const0> ;
  assign Dbg_WDATA_22[22] = \<const0> ;
  assign Dbg_WDATA_22[21] = \<const0> ;
  assign Dbg_WDATA_22[20] = \<const0> ;
  assign Dbg_WDATA_22[19] = \<const0> ;
  assign Dbg_WDATA_22[18] = \<const0> ;
  assign Dbg_WDATA_22[17] = \<const0> ;
  assign Dbg_WDATA_22[16] = \<const0> ;
  assign Dbg_WDATA_22[15] = \<const0> ;
  assign Dbg_WDATA_22[14] = \<const0> ;
  assign Dbg_WDATA_22[13] = \<const0> ;
  assign Dbg_WDATA_22[12] = \<const0> ;
  assign Dbg_WDATA_22[11] = \<const0> ;
  assign Dbg_WDATA_22[10] = \<const0> ;
  assign Dbg_WDATA_22[9] = \<const0> ;
  assign Dbg_WDATA_22[8] = \<const0> ;
  assign Dbg_WDATA_22[7] = \<const0> ;
  assign Dbg_WDATA_22[6] = \<const0> ;
  assign Dbg_WDATA_22[5] = \<const0> ;
  assign Dbg_WDATA_22[4] = \<const0> ;
  assign Dbg_WDATA_22[3] = \<const0> ;
  assign Dbg_WDATA_22[2] = \<const0> ;
  assign Dbg_WDATA_22[1] = \<const0> ;
  assign Dbg_WDATA_22[0] = \<const0> ;
  assign Dbg_WDATA_23[31] = \<const0> ;
  assign Dbg_WDATA_23[30] = \<const0> ;
  assign Dbg_WDATA_23[29] = \<const0> ;
  assign Dbg_WDATA_23[28] = \<const0> ;
  assign Dbg_WDATA_23[27] = \<const0> ;
  assign Dbg_WDATA_23[26] = \<const0> ;
  assign Dbg_WDATA_23[25] = \<const0> ;
  assign Dbg_WDATA_23[24] = \<const0> ;
  assign Dbg_WDATA_23[23] = \<const0> ;
  assign Dbg_WDATA_23[22] = \<const0> ;
  assign Dbg_WDATA_23[21] = \<const0> ;
  assign Dbg_WDATA_23[20] = \<const0> ;
  assign Dbg_WDATA_23[19] = \<const0> ;
  assign Dbg_WDATA_23[18] = \<const0> ;
  assign Dbg_WDATA_23[17] = \<const0> ;
  assign Dbg_WDATA_23[16] = \<const0> ;
  assign Dbg_WDATA_23[15] = \<const0> ;
  assign Dbg_WDATA_23[14] = \<const0> ;
  assign Dbg_WDATA_23[13] = \<const0> ;
  assign Dbg_WDATA_23[12] = \<const0> ;
  assign Dbg_WDATA_23[11] = \<const0> ;
  assign Dbg_WDATA_23[10] = \<const0> ;
  assign Dbg_WDATA_23[9] = \<const0> ;
  assign Dbg_WDATA_23[8] = \<const0> ;
  assign Dbg_WDATA_23[7] = \<const0> ;
  assign Dbg_WDATA_23[6] = \<const0> ;
  assign Dbg_WDATA_23[5] = \<const0> ;
  assign Dbg_WDATA_23[4] = \<const0> ;
  assign Dbg_WDATA_23[3] = \<const0> ;
  assign Dbg_WDATA_23[2] = \<const0> ;
  assign Dbg_WDATA_23[1] = \<const0> ;
  assign Dbg_WDATA_23[0] = \<const0> ;
  assign Dbg_WDATA_24[31] = \<const0> ;
  assign Dbg_WDATA_24[30] = \<const0> ;
  assign Dbg_WDATA_24[29] = \<const0> ;
  assign Dbg_WDATA_24[28] = \<const0> ;
  assign Dbg_WDATA_24[27] = \<const0> ;
  assign Dbg_WDATA_24[26] = \<const0> ;
  assign Dbg_WDATA_24[25] = \<const0> ;
  assign Dbg_WDATA_24[24] = \<const0> ;
  assign Dbg_WDATA_24[23] = \<const0> ;
  assign Dbg_WDATA_24[22] = \<const0> ;
  assign Dbg_WDATA_24[21] = \<const0> ;
  assign Dbg_WDATA_24[20] = \<const0> ;
  assign Dbg_WDATA_24[19] = \<const0> ;
  assign Dbg_WDATA_24[18] = \<const0> ;
  assign Dbg_WDATA_24[17] = \<const0> ;
  assign Dbg_WDATA_24[16] = \<const0> ;
  assign Dbg_WDATA_24[15] = \<const0> ;
  assign Dbg_WDATA_24[14] = \<const0> ;
  assign Dbg_WDATA_24[13] = \<const0> ;
  assign Dbg_WDATA_24[12] = \<const0> ;
  assign Dbg_WDATA_24[11] = \<const0> ;
  assign Dbg_WDATA_24[10] = \<const0> ;
  assign Dbg_WDATA_24[9] = \<const0> ;
  assign Dbg_WDATA_24[8] = \<const0> ;
  assign Dbg_WDATA_24[7] = \<const0> ;
  assign Dbg_WDATA_24[6] = \<const0> ;
  assign Dbg_WDATA_24[5] = \<const0> ;
  assign Dbg_WDATA_24[4] = \<const0> ;
  assign Dbg_WDATA_24[3] = \<const0> ;
  assign Dbg_WDATA_24[2] = \<const0> ;
  assign Dbg_WDATA_24[1] = \<const0> ;
  assign Dbg_WDATA_24[0] = \<const0> ;
  assign Dbg_WDATA_25[31] = \<const0> ;
  assign Dbg_WDATA_25[30] = \<const0> ;
  assign Dbg_WDATA_25[29] = \<const0> ;
  assign Dbg_WDATA_25[28] = \<const0> ;
  assign Dbg_WDATA_25[27] = \<const0> ;
  assign Dbg_WDATA_25[26] = \<const0> ;
  assign Dbg_WDATA_25[25] = \<const0> ;
  assign Dbg_WDATA_25[24] = \<const0> ;
  assign Dbg_WDATA_25[23] = \<const0> ;
  assign Dbg_WDATA_25[22] = \<const0> ;
  assign Dbg_WDATA_25[21] = \<const0> ;
  assign Dbg_WDATA_25[20] = \<const0> ;
  assign Dbg_WDATA_25[19] = \<const0> ;
  assign Dbg_WDATA_25[18] = \<const0> ;
  assign Dbg_WDATA_25[17] = \<const0> ;
  assign Dbg_WDATA_25[16] = \<const0> ;
  assign Dbg_WDATA_25[15] = \<const0> ;
  assign Dbg_WDATA_25[14] = \<const0> ;
  assign Dbg_WDATA_25[13] = \<const0> ;
  assign Dbg_WDATA_25[12] = \<const0> ;
  assign Dbg_WDATA_25[11] = \<const0> ;
  assign Dbg_WDATA_25[10] = \<const0> ;
  assign Dbg_WDATA_25[9] = \<const0> ;
  assign Dbg_WDATA_25[8] = \<const0> ;
  assign Dbg_WDATA_25[7] = \<const0> ;
  assign Dbg_WDATA_25[6] = \<const0> ;
  assign Dbg_WDATA_25[5] = \<const0> ;
  assign Dbg_WDATA_25[4] = \<const0> ;
  assign Dbg_WDATA_25[3] = \<const0> ;
  assign Dbg_WDATA_25[2] = \<const0> ;
  assign Dbg_WDATA_25[1] = \<const0> ;
  assign Dbg_WDATA_25[0] = \<const0> ;
  assign Dbg_WDATA_26[31] = \<const0> ;
  assign Dbg_WDATA_26[30] = \<const0> ;
  assign Dbg_WDATA_26[29] = \<const0> ;
  assign Dbg_WDATA_26[28] = \<const0> ;
  assign Dbg_WDATA_26[27] = \<const0> ;
  assign Dbg_WDATA_26[26] = \<const0> ;
  assign Dbg_WDATA_26[25] = \<const0> ;
  assign Dbg_WDATA_26[24] = \<const0> ;
  assign Dbg_WDATA_26[23] = \<const0> ;
  assign Dbg_WDATA_26[22] = \<const0> ;
  assign Dbg_WDATA_26[21] = \<const0> ;
  assign Dbg_WDATA_26[20] = \<const0> ;
  assign Dbg_WDATA_26[19] = \<const0> ;
  assign Dbg_WDATA_26[18] = \<const0> ;
  assign Dbg_WDATA_26[17] = \<const0> ;
  assign Dbg_WDATA_26[16] = \<const0> ;
  assign Dbg_WDATA_26[15] = \<const0> ;
  assign Dbg_WDATA_26[14] = \<const0> ;
  assign Dbg_WDATA_26[13] = \<const0> ;
  assign Dbg_WDATA_26[12] = \<const0> ;
  assign Dbg_WDATA_26[11] = \<const0> ;
  assign Dbg_WDATA_26[10] = \<const0> ;
  assign Dbg_WDATA_26[9] = \<const0> ;
  assign Dbg_WDATA_26[8] = \<const0> ;
  assign Dbg_WDATA_26[7] = \<const0> ;
  assign Dbg_WDATA_26[6] = \<const0> ;
  assign Dbg_WDATA_26[5] = \<const0> ;
  assign Dbg_WDATA_26[4] = \<const0> ;
  assign Dbg_WDATA_26[3] = \<const0> ;
  assign Dbg_WDATA_26[2] = \<const0> ;
  assign Dbg_WDATA_26[1] = \<const0> ;
  assign Dbg_WDATA_26[0] = \<const0> ;
  assign Dbg_WDATA_27[31] = \<const0> ;
  assign Dbg_WDATA_27[30] = \<const0> ;
  assign Dbg_WDATA_27[29] = \<const0> ;
  assign Dbg_WDATA_27[28] = \<const0> ;
  assign Dbg_WDATA_27[27] = \<const0> ;
  assign Dbg_WDATA_27[26] = \<const0> ;
  assign Dbg_WDATA_27[25] = \<const0> ;
  assign Dbg_WDATA_27[24] = \<const0> ;
  assign Dbg_WDATA_27[23] = \<const0> ;
  assign Dbg_WDATA_27[22] = \<const0> ;
  assign Dbg_WDATA_27[21] = \<const0> ;
  assign Dbg_WDATA_27[20] = \<const0> ;
  assign Dbg_WDATA_27[19] = \<const0> ;
  assign Dbg_WDATA_27[18] = \<const0> ;
  assign Dbg_WDATA_27[17] = \<const0> ;
  assign Dbg_WDATA_27[16] = \<const0> ;
  assign Dbg_WDATA_27[15] = \<const0> ;
  assign Dbg_WDATA_27[14] = \<const0> ;
  assign Dbg_WDATA_27[13] = \<const0> ;
  assign Dbg_WDATA_27[12] = \<const0> ;
  assign Dbg_WDATA_27[11] = \<const0> ;
  assign Dbg_WDATA_27[10] = \<const0> ;
  assign Dbg_WDATA_27[9] = \<const0> ;
  assign Dbg_WDATA_27[8] = \<const0> ;
  assign Dbg_WDATA_27[7] = \<const0> ;
  assign Dbg_WDATA_27[6] = \<const0> ;
  assign Dbg_WDATA_27[5] = \<const0> ;
  assign Dbg_WDATA_27[4] = \<const0> ;
  assign Dbg_WDATA_27[3] = \<const0> ;
  assign Dbg_WDATA_27[2] = \<const0> ;
  assign Dbg_WDATA_27[1] = \<const0> ;
  assign Dbg_WDATA_27[0] = \<const0> ;
  assign Dbg_WDATA_28[31] = \<const0> ;
  assign Dbg_WDATA_28[30] = \<const0> ;
  assign Dbg_WDATA_28[29] = \<const0> ;
  assign Dbg_WDATA_28[28] = \<const0> ;
  assign Dbg_WDATA_28[27] = \<const0> ;
  assign Dbg_WDATA_28[26] = \<const0> ;
  assign Dbg_WDATA_28[25] = \<const0> ;
  assign Dbg_WDATA_28[24] = \<const0> ;
  assign Dbg_WDATA_28[23] = \<const0> ;
  assign Dbg_WDATA_28[22] = \<const0> ;
  assign Dbg_WDATA_28[21] = \<const0> ;
  assign Dbg_WDATA_28[20] = \<const0> ;
  assign Dbg_WDATA_28[19] = \<const0> ;
  assign Dbg_WDATA_28[18] = \<const0> ;
  assign Dbg_WDATA_28[17] = \<const0> ;
  assign Dbg_WDATA_28[16] = \<const0> ;
  assign Dbg_WDATA_28[15] = \<const0> ;
  assign Dbg_WDATA_28[14] = \<const0> ;
  assign Dbg_WDATA_28[13] = \<const0> ;
  assign Dbg_WDATA_28[12] = \<const0> ;
  assign Dbg_WDATA_28[11] = \<const0> ;
  assign Dbg_WDATA_28[10] = \<const0> ;
  assign Dbg_WDATA_28[9] = \<const0> ;
  assign Dbg_WDATA_28[8] = \<const0> ;
  assign Dbg_WDATA_28[7] = \<const0> ;
  assign Dbg_WDATA_28[6] = \<const0> ;
  assign Dbg_WDATA_28[5] = \<const0> ;
  assign Dbg_WDATA_28[4] = \<const0> ;
  assign Dbg_WDATA_28[3] = \<const0> ;
  assign Dbg_WDATA_28[2] = \<const0> ;
  assign Dbg_WDATA_28[1] = \<const0> ;
  assign Dbg_WDATA_28[0] = \<const0> ;
  assign Dbg_WDATA_29[31] = \<const0> ;
  assign Dbg_WDATA_29[30] = \<const0> ;
  assign Dbg_WDATA_29[29] = \<const0> ;
  assign Dbg_WDATA_29[28] = \<const0> ;
  assign Dbg_WDATA_29[27] = \<const0> ;
  assign Dbg_WDATA_29[26] = \<const0> ;
  assign Dbg_WDATA_29[25] = \<const0> ;
  assign Dbg_WDATA_29[24] = \<const0> ;
  assign Dbg_WDATA_29[23] = \<const0> ;
  assign Dbg_WDATA_29[22] = \<const0> ;
  assign Dbg_WDATA_29[21] = \<const0> ;
  assign Dbg_WDATA_29[20] = \<const0> ;
  assign Dbg_WDATA_29[19] = \<const0> ;
  assign Dbg_WDATA_29[18] = \<const0> ;
  assign Dbg_WDATA_29[17] = \<const0> ;
  assign Dbg_WDATA_29[16] = \<const0> ;
  assign Dbg_WDATA_29[15] = \<const0> ;
  assign Dbg_WDATA_29[14] = \<const0> ;
  assign Dbg_WDATA_29[13] = \<const0> ;
  assign Dbg_WDATA_29[12] = \<const0> ;
  assign Dbg_WDATA_29[11] = \<const0> ;
  assign Dbg_WDATA_29[10] = \<const0> ;
  assign Dbg_WDATA_29[9] = \<const0> ;
  assign Dbg_WDATA_29[8] = \<const0> ;
  assign Dbg_WDATA_29[7] = \<const0> ;
  assign Dbg_WDATA_29[6] = \<const0> ;
  assign Dbg_WDATA_29[5] = \<const0> ;
  assign Dbg_WDATA_29[4] = \<const0> ;
  assign Dbg_WDATA_29[3] = \<const0> ;
  assign Dbg_WDATA_29[2] = \<const0> ;
  assign Dbg_WDATA_29[1] = \<const0> ;
  assign Dbg_WDATA_29[0] = \<const0> ;
  assign Dbg_WDATA_3[31] = \<const0> ;
  assign Dbg_WDATA_3[30] = \<const0> ;
  assign Dbg_WDATA_3[29] = \<const0> ;
  assign Dbg_WDATA_3[28] = \<const0> ;
  assign Dbg_WDATA_3[27] = \<const0> ;
  assign Dbg_WDATA_3[26] = \<const0> ;
  assign Dbg_WDATA_3[25] = \<const0> ;
  assign Dbg_WDATA_3[24] = \<const0> ;
  assign Dbg_WDATA_3[23] = \<const0> ;
  assign Dbg_WDATA_3[22] = \<const0> ;
  assign Dbg_WDATA_3[21] = \<const0> ;
  assign Dbg_WDATA_3[20] = \<const0> ;
  assign Dbg_WDATA_3[19] = \<const0> ;
  assign Dbg_WDATA_3[18] = \<const0> ;
  assign Dbg_WDATA_3[17] = \<const0> ;
  assign Dbg_WDATA_3[16] = \<const0> ;
  assign Dbg_WDATA_3[15] = \<const0> ;
  assign Dbg_WDATA_3[14] = \<const0> ;
  assign Dbg_WDATA_3[13] = \<const0> ;
  assign Dbg_WDATA_3[12] = \<const0> ;
  assign Dbg_WDATA_3[11] = \<const0> ;
  assign Dbg_WDATA_3[10] = \<const0> ;
  assign Dbg_WDATA_3[9] = \<const0> ;
  assign Dbg_WDATA_3[8] = \<const0> ;
  assign Dbg_WDATA_3[7] = \<const0> ;
  assign Dbg_WDATA_3[6] = \<const0> ;
  assign Dbg_WDATA_3[5] = \<const0> ;
  assign Dbg_WDATA_3[4] = \<const0> ;
  assign Dbg_WDATA_3[3] = \<const0> ;
  assign Dbg_WDATA_3[2] = \<const0> ;
  assign Dbg_WDATA_3[1] = \<const0> ;
  assign Dbg_WDATA_3[0] = \<const0> ;
  assign Dbg_WDATA_30[31] = \<const0> ;
  assign Dbg_WDATA_30[30] = \<const0> ;
  assign Dbg_WDATA_30[29] = \<const0> ;
  assign Dbg_WDATA_30[28] = \<const0> ;
  assign Dbg_WDATA_30[27] = \<const0> ;
  assign Dbg_WDATA_30[26] = \<const0> ;
  assign Dbg_WDATA_30[25] = \<const0> ;
  assign Dbg_WDATA_30[24] = \<const0> ;
  assign Dbg_WDATA_30[23] = \<const0> ;
  assign Dbg_WDATA_30[22] = \<const0> ;
  assign Dbg_WDATA_30[21] = \<const0> ;
  assign Dbg_WDATA_30[20] = \<const0> ;
  assign Dbg_WDATA_30[19] = \<const0> ;
  assign Dbg_WDATA_30[18] = \<const0> ;
  assign Dbg_WDATA_30[17] = \<const0> ;
  assign Dbg_WDATA_30[16] = \<const0> ;
  assign Dbg_WDATA_30[15] = \<const0> ;
  assign Dbg_WDATA_30[14] = \<const0> ;
  assign Dbg_WDATA_30[13] = \<const0> ;
  assign Dbg_WDATA_30[12] = \<const0> ;
  assign Dbg_WDATA_30[11] = \<const0> ;
  assign Dbg_WDATA_30[10] = \<const0> ;
  assign Dbg_WDATA_30[9] = \<const0> ;
  assign Dbg_WDATA_30[8] = \<const0> ;
  assign Dbg_WDATA_30[7] = \<const0> ;
  assign Dbg_WDATA_30[6] = \<const0> ;
  assign Dbg_WDATA_30[5] = \<const0> ;
  assign Dbg_WDATA_30[4] = \<const0> ;
  assign Dbg_WDATA_30[3] = \<const0> ;
  assign Dbg_WDATA_30[2] = \<const0> ;
  assign Dbg_WDATA_30[1] = \<const0> ;
  assign Dbg_WDATA_30[0] = \<const0> ;
  assign Dbg_WDATA_31[31] = \<const0> ;
  assign Dbg_WDATA_31[30] = \<const0> ;
  assign Dbg_WDATA_31[29] = \<const0> ;
  assign Dbg_WDATA_31[28] = \<const0> ;
  assign Dbg_WDATA_31[27] = \<const0> ;
  assign Dbg_WDATA_31[26] = \<const0> ;
  assign Dbg_WDATA_31[25] = \<const0> ;
  assign Dbg_WDATA_31[24] = \<const0> ;
  assign Dbg_WDATA_31[23] = \<const0> ;
  assign Dbg_WDATA_31[22] = \<const0> ;
  assign Dbg_WDATA_31[21] = \<const0> ;
  assign Dbg_WDATA_31[20] = \<const0> ;
  assign Dbg_WDATA_31[19] = \<const0> ;
  assign Dbg_WDATA_31[18] = \<const0> ;
  assign Dbg_WDATA_31[17] = \<const0> ;
  assign Dbg_WDATA_31[16] = \<const0> ;
  assign Dbg_WDATA_31[15] = \<const0> ;
  assign Dbg_WDATA_31[14] = \<const0> ;
  assign Dbg_WDATA_31[13] = \<const0> ;
  assign Dbg_WDATA_31[12] = \<const0> ;
  assign Dbg_WDATA_31[11] = \<const0> ;
  assign Dbg_WDATA_31[10] = \<const0> ;
  assign Dbg_WDATA_31[9] = \<const0> ;
  assign Dbg_WDATA_31[8] = \<const0> ;
  assign Dbg_WDATA_31[7] = \<const0> ;
  assign Dbg_WDATA_31[6] = \<const0> ;
  assign Dbg_WDATA_31[5] = \<const0> ;
  assign Dbg_WDATA_31[4] = \<const0> ;
  assign Dbg_WDATA_31[3] = \<const0> ;
  assign Dbg_WDATA_31[2] = \<const0> ;
  assign Dbg_WDATA_31[1] = \<const0> ;
  assign Dbg_WDATA_31[0] = \<const0> ;
  assign Dbg_WDATA_4[31] = \<const0> ;
  assign Dbg_WDATA_4[30] = \<const0> ;
  assign Dbg_WDATA_4[29] = \<const0> ;
  assign Dbg_WDATA_4[28] = \<const0> ;
  assign Dbg_WDATA_4[27] = \<const0> ;
  assign Dbg_WDATA_4[26] = \<const0> ;
  assign Dbg_WDATA_4[25] = \<const0> ;
  assign Dbg_WDATA_4[24] = \<const0> ;
  assign Dbg_WDATA_4[23] = \<const0> ;
  assign Dbg_WDATA_4[22] = \<const0> ;
  assign Dbg_WDATA_4[21] = \<const0> ;
  assign Dbg_WDATA_4[20] = \<const0> ;
  assign Dbg_WDATA_4[19] = \<const0> ;
  assign Dbg_WDATA_4[18] = \<const0> ;
  assign Dbg_WDATA_4[17] = \<const0> ;
  assign Dbg_WDATA_4[16] = \<const0> ;
  assign Dbg_WDATA_4[15] = \<const0> ;
  assign Dbg_WDATA_4[14] = \<const0> ;
  assign Dbg_WDATA_4[13] = \<const0> ;
  assign Dbg_WDATA_4[12] = \<const0> ;
  assign Dbg_WDATA_4[11] = \<const0> ;
  assign Dbg_WDATA_4[10] = \<const0> ;
  assign Dbg_WDATA_4[9] = \<const0> ;
  assign Dbg_WDATA_4[8] = \<const0> ;
  assign Dbg_WDATA_4[7] = \<const0> ;
  assign Dbg_WDATA_4[6] = \<const0> ;
  assign Dbg_WDATA_4[5] = \<const0> ;
  assign Dbg_WDATA_4[4] = \<const0> ;
  assign Dbg_WDATA_4[3] = \<const0> ;
  assign Dbg_WDATA_4[2] = \<const0> ;
  assign Dbg_WDATA_4[1] = \<const0> ;
  assign Dbg_WDATA_4[0] = \<const0> ;
  assign Dbg_WDATA_5[31] = \<const0> ;
  assign Dbg_WDATA_5[30] = \<const0> ;
  assign Dbg_WDATA_5[29] = \<const0> ;
  assign Dbg_WDATA_5[28] = \<const0> ;
  assign Dbg_WDATA_5[27] = \<const0> ;
  assign Dbg_WDATA_5[26] = \<const0> ;
  assign Dbg_WDATA_5[25] = \<const0> ;
  assign Dbg_WDATA_5[24] = \<const0> ;
  assign Dbg_WDATA_5[23] = \<const0> ;
  assign Dbg_WDATA_5[22] = \<const0> ;
  assign Dbg_WDATA_5[21] = \<const0> ;
  assign Dbg_WDATA_5[20] = \<const0> ;
  assign Dbg_WDATA_5[19] = \<const0> ;
  assign Dbg_WDATA_5[18] = \<const0> ;
  assign Dbg_WDATA_5[17] = \<const0> ;
  assign Dbg_WDATA_5[16] = \<const0> ;
  assign Dbg_WDATA_5[15] = \<const0> ;
  assign Dbg_WDATA_5[14] = \<const0> ;
  assign Dbg_WDATA_5[13] = \<const0> ;
  assign Dbg_WDATA_5[12] = \<const0> ;
  assign Dbg_WDATA_5[11] = \<const0> ;
  assign Dbg_WDATA_5[10] = \<const0> ;
  assign Dbg_WDATA_5[9] = \<const0> ;
  assign Dbg_WDATA_5[8] = \<const0> ;
  assign Dbg_WDATA_5[7] = \<const0> ;
  assign Dbg_WDATA_5[6] = \<const0> ;
  assign Dbg_WDATA_5[5] = \<const0> ;
  assign Dbg_WDATA_5[4] = \<const0> ;
  assign Dbg_WDATA_5[3] = \<const0> ;
  assign Dbg_WDATA_5[2] = \<const0> ;
  assign Dbg_WDATA_5[1] = \<const0> ;
  assign Dbg_WDATA_5[0] = \<const0> ;
  assign Dbg_WDATA_6[31] = \<const0> ;
  assign Dbg_WDATA_6[30] = \<const0> ;
  assign Dbg_WDATA_6[29] = \<const0> ;
  assign Dbg_WDATA_6[28] = \<const0> ;
  assign Dbg_WDATA_6[27] = \<const0> ;
  assign Dbg_WDATA_6[26] = \<const0> ;
  assign Dbg_WDATA_6[25] = \<const0> ;
  assign Dbg_WDATA_6[24] = \<const0> ;
  assign Dbg_WDATA_6[23] = \<const0> ;
  assign Dbg_WDATA_6[22] = \<const0> ;
  assign Dbg_WDATA_6[21] = \<const0> ;
  assign Dbg_WDATA_6[20] = \<const0> ;
  assign Dbg_WDATA_6[19] = \<const0> ;
  assign Dbg_WDATA_6[18] = \<const0> ;
  assign Dbg_WDATA_6[17] = \<const0> ;
  assign Dbg_WDATA_6[16] = \<const0> ;
  assign Dbg_WDATA_6[15] = \<const0> ;
  assign Dbg_WDATA_6[14] = \<const0> ;
  assign Dbg_WDATA_6[13] = \<const0> ;
  assign Dbg_WDATA_6[12] = \<const0> ;
  assign Dbg_WDATA_6[11] = \<const0> ;
  assign Dbg_WDATA_6[10] = \<const0> ;
  assign Dbg_WDATA_6[9] = \<const0> ;
  assign Dbg_WDATA_6[8] = \<const0> ;
  assign Dbg_WDATA_6[7] = \<const0> ;
  assign Dbg_WDATA_6[6] = \<const0> ;
  assign Dbg_WDATA_6[5] = \<const0> ;
  assign Dbg_WDATA_6[4] = \<const0> ;
  assign Dbg_WDATA_6[3] = \<const0> ;
  assign Dbg_WDATA_6[2] = \<const0> ;
  assign Dbg_WDATA_6[1] = \<const0> ;
  assign Dbg_WDATA_6[0] = \<const0> ;
  assign Dbg_WDATA_7[31] = \<const0> ;
  assign Dbg_WDATA_7[30] = \<const0> ;
  assign Dbg_WDATA_7[29] = \<const0> ;
  assign Dbg_WDATA_7[28] = \<const0> ;
  assign Dbg_WDATA_7[27] = \<const0> ;
  assign Dbg_WDATA_7[26] = \<const0> ;
  assign Dbg_WDATA_7[25] = \<const0> ;
  assign Dbg_WDATA_7[24] = \<const0> ;
  assign Dbg_WDATA_7[23] = \<const0> ;
  assign Dbg_WDATA_7[22] = \<const0> ;
  assign Dbg_WDATA_7[21] = \<const0> ;
  assign Dbg_WDATA_7[20] = \<const0> ;
  assign Dbg_WDATA_7[19] = \<const0> ;
  assign Dbg_WDATA_7[18] = \<const0> ;
  assign Dbg_WDATA_7[17] = \<const0> ;
  assign Dbg_WDATA_7[16] = \<const0> ;
  assign Dbg_WDATA_7[15] = \<const0> ;
  assign Dbg_WDATA_7[14] = \<const0> ;
  assign Dbg_WDATA_7[13] = \<const0> ;
  assign Dbg_WDATA_7[12] = \<const0> ;
  assign Dbg_WDATA_7[11] = \<const0> ;
  assign Dbg_WDATA_7[10] = \<const0> ;
  assign Dbg_WDATA_7[9] = \<const0> ;
  assign Dbg_WDATA_7[8] = \<const0> ;
  assign Dbg_WDATA_7[7] = \<const0> ;
  assign Dbg_WDATA_7[6] = \<const0> ;
  assign Dbg_WDATA_7[5] = \<const0> ;
  assign Dbg_WDATA_7[4] = \<const0> ;
  assign Dbg_WDATA_7[3] = \<const0> ;
  assign Dbg_WDATA_7[2] = \<const0> ;
  assign Dbg_WDATA_7[1] = \<const0> ;
  assign Dbg_WDATA_7[0] = \<const0> ;
  assign Dbg_WDATA_8[31] = \<const0> ;
  assign Dbg_WDATA_8[30] = \<const0> ;
  assign Dbg_WDATA_8[29] = \<const0> ;
  assign Dbg_WDATA_8[28] = \<const0> ;
  assign Dbg_WDATA_8[27] = \<const0> ;
  assign Dbg_WDATA_8[26] = \<const0> ;
  assign Dbg_WDATA_8[25] = \<const0> ;
  assign Dbg_WDATA_8[24] = \<const0> ;
  assign Dbg_WDATA_8[23] = \<const0> ;
  assign Dbg_WDATA_8[22] = \<const0> ;
  assign Dbg_WDATA_8[21] = \<const0> ;
  assign Dbg_WDATA_8[20] = \<const0> ;
  assign Dbg_WDATA_8[19] = \<const0> ;
  assign Dbg_WDATA_8[18] = \<const0> ;
  assign Dbg_WDATA_8[17] = \<const0> ;
  assign Dbg_WDATA_8[16] = \<const0> ;
  assign Dbg_WDATA_8[15] = \<const0> ;
  assign Dbg_WDATA_8[14] = \<const0> ;
  assign Dbg_WDATA_8[13] = \<const0> ;
  assign Dbg_WDATA_8[12] = \<const0> ;
  assign Dbg_WDATA_8[11] = \<const0> ;
  assign Dbg_WDATA_8[10] = \<const0> ;
  assign Dbg_WDATA_8[9] = \<const0> ;
  assign Dbg_WDATA_8[8] = \<const0> ;
  assign Dbg_WDATA_8[7] = \<const0> ;
  assign Dbg_WDATA_8[6] = \<const0> ;
  assign Dbg_WDATA_8[5] = \<const0> ;
  assign Dbg_WDATA_8[4] = \<const0> ;
  assign Dbg_WDATA_8[3] = \<const0> ;
  assign Dbg_WDATA_8[2] = \<const0> ;
  assign Dbg_WDATA_8[1] = \<const0> ;
  assign Dbg_WDATA_8[0] = \<const0> ;
  assign Dbg_WDATA_9[31] = \<const0> ;
  assign Dbg_WDATA_9[30] = \<const0> ;
  assign Dbg_WDATA_9[29] = \<const0> ;
  assign Dbg_WDATA_9[28] = \<const0> ;
  assign Dbg_WDATA_9[27] = \<const0> ;
  assign Dbg_WDATA_9[26] = \<const0> ;
  assign Dbg_WDATA_9[25] = \<const0> ;
  assign Dbg_WDATA_9[24] = \<const0> ;
  assign Dbg_WDATA_9[23] = \<const0> ;
  assign Dbg_WDATA_9[22] = \<const0> ;
  assign Dbg_WDATA_9[21] = \<const0> ;
  assign Dbg_WDATA_9[20] = \<const0> ;
  assign Dbg_WDATA_9[19] = \<const0> ;
  assign Dbg_WDATA_9[18] = \<const0> ;
  assign Dbg_WDATA_9[17] = \<const0> ;
  assign Dbg_WDATA_9[16] = \<const0> ;
  assign Dbg_WDATA_9[15] = \<const0> ;
  assign Dbg_WDATA_9[14] = \<const0> ;
  assign Dbg_WDATA_9[13] = \<const0> ;
  assign Dbg_WDATA_9[12] = \<const0> ;
  assign Dbg_WDATA_9[11] = \<const0> ;
  assign Dbg_WDATA_9[10] = \<const0> ;
  assign Dbg_WDATA_9[9] = \<const0> ;
  assign Dbg_WDATA_9[8] = \<const0> ;
  assign Dbg_WDATA_9[7] = \<const0> ;
  assign Dbg_WDATA_9[6] = \<const0> ;
  assign Dbg_WDATA_9[5] = \<const0> ;
  assign Dbg_WDATA_9[4] = \<const0> ;
  assign Dbg_WDATA_9[3] = \<const0> ;
  assign Dbg_WDATA_9[2] = \<const0> ;
  assign Dbg_WDATA_9[1] = \<const0> ;
  assign Dbg_WDATA_9[0] = \<const0> ;
  assign Dbg_WVALID_0 = \<const0> ;
  assign Dbg_WVALID_1 = \<const0> ;
  assign Dbg_WVALID_10 = \<const0> ;
  assign Dbg_WVALID_11 = \<const0> ;
  assign Dbg_WVALID_12 = \<const0> ;
  assign Dbg_WVALID_13 = \<const0> ;
  assign Dbg_WVALID_14 = \<const0> ;
  assign Dbg_WVALID_15 = \<const0> ;
  assign Dbg_WVALID_16 = \<const0> ;
  assign Dbg_WVALID_17 = \<const0> ;
  assign Dbg_WVALID_18 = \<const0> ;
  assign Dbg_WVALID_19 = \<const0> ;
  assign Dbg_WVALID_2 = \<const0> ;
  assign Dbg_WVALID_20 = \<const0> ;
  assign Dbg_WVALID_21 = \<const0> ;
  assign Dbg_WVALID_22 = \<const0> ;
  assign Dbg_WVALID_23 = \<const0> ;
  assign Dbg_WVALID_24 = \<const0> ;
  assign Dbg_WVALID_25 = \<const0> ;
  assign Dbg_WVALID_26 = \<const0> ;
  assign Dbg_WVALID_27 = \<const0> ;
  assign Dbg_WVALID_28 = \<const0> ;
  assign Dbg_WVALID_29 = \<const0> ;
  assign Dbg_WVALID_3 = \<const0> ;
  assign Dbg_WVALID_30 = \<const0> ;
  assign Dbg_WVALID_31 = \<const0> ;
  assign Dbg_WVALID_4 = \<const0> ;
  assign Dbg_WVALID_5 = \<const0> ;
  assign Dbg_WVALID_6 = \<const0> ;
  assign Dbg_WVALID_7 = \<const0> ;
  assign Dbg_WVALID_8 = \<const0> ;
  assign Dbg_WVALID_9 = \<const0> ;
  assign Ext_JTAG_TDI = Dbg_TDI_0;
  assign Ext_JTAG_UPDATE = Dbg_Update_0;
  assign LMB_Addr_Strobe_0 = \<const0> ;
  assign LMB_Addr_Strobe_1 = \<const0> ;
  assign LMB_Addr_Strobe_10 = \<const0> ;
  assign LMB_Addr_Strobe_11 = \<const0> ;
  assign LMB_Addr_Strobe_12 = \<const0> ;
  assign LMB_Addr_Strobe_13 = \<const0> ;
  assign LMB_Addr_Strobe_14 = \<const0> ;
  assign LMB_Addr_Strobe_15 = \<const0> ;
  assign LMB_Addr_Strobe_16 = \<const0> ;
  assign LMB_Addr_Strobe_17 = \<const0> ;
  assign LMB_Addr_Strobe_18 = \<const0> ;
  assign LMB_Addr_Strobe_19 = \<const0> ;
  assign LMB_Addr_Strobe_2 = \<const0> ;
  assign LMB_Addr_Strobe_20 = \<const0> ;
  assign LMB_Addr_Strobe_21 = \<const0> ;
  assign LMB_Addr_Strobe_22 = \<const0> ;
  assign LMB_Addr_Strobe_23 = \<const0> ;
  assign LMB_Addr_Strobe_24 = \<const0> ;
  assign LMB_Addr_Strobe_25 = \<const0> ;
  assign LMB_Addr_Strobe_26 = \<const0> ;
  assign LMB_Addr_Strobe_27 = \<const0> ;
  assign LMB_Addr_Strobe_28 = \<const0> ;
  assign LMB_Addr_Strobe_29 = \<const0> ;
  assign LMB_Addr_Strobe_3 = \<const0> ;
  assign LMB_Addr_Strobe_30 = \<const0> ;
  assign LMB_Addr_Strobe_31 = \<const0> ;
  assign LMB_Addr_Strobe_4 = \<const0> ;
  assign LMB_Addr_Strobe_5 = \<const0> ;
  assign LMB_Addr_Strobe_6 = \<const0> ;
  assign LMB_Addr_Strobe_7 = \<const0> ;
  assign LMB_Addr_Strobe_8 = \<const0> ;
  assign LMB_Addr_Strobe_9 = \<const0> ;
  assign LMB_Byte_Enable_0[0] = \<const0> ;
  assign LMB_Byte_Enable_0[1] = \<const0> ;
  assign LMB_Byte_Enable_0[2] = \<const0> ;
  assign LMB_Byte_Enable_0[3] = \<const0> ;
  assign LMB_Byte_Enable_1[0] = \<const0> ;
  assign LMB_Byte_Enable_1[1] = \<const0> ;
  assign LMB_Byte_Enable_1[2] = \<const0> ;
  assign LMB_Byte_Enable_1[3] = \<const0> ;
  assign LMB_Byte_Enable_10[0] = \<const0> ;
  assign LMB_Byte_Enable_10[1] = \<const0> ;
  assign LMB_Byte_Enable_10[2] = \<const0> ;
  assign LMB_Byte_Enable_10[3] = \<const0> ;
  assign LMB_Byte_Enable_11[0] = \<const0> ;
  assign LMB_Byte_Enable_11[1] = \<const0> ;
  assign LMB_Byte_Enable_11[2] = \<const0> ;
  assign LMB_Byte_Enable_11[3] = \<const0> ;
  assign LMB_Byte_Enable_12[0] = \<const0> ;
  assign LMB_Byte_Enable_12[1] = \<const0> ;
  assign LMB_Byte_Enable_12[2] = \<const0> ;
  assign LMB_Byte_Enable_12[3] = \<const0> ;
  assign LMB_Byte_Enable_13[0] = \<const0> ;
  assign LMB_Byte_Enable_13[1] = \<const0> ;
  assign LMB_Byte_Enable_13[2] = \<const0> ;
  assign LMB_Byte_Enable_13[3] = \<const0> ;
  assign LMB_Byte_Enable_14[0] = \<const0> ;
  assign LMB_Byte_Enable_14[1] = \<const0> ;
  assign LMB_Byte_Enable_14[2] = \<const0> ;
  assign LMB_Byte_Enable_14[3] = \<const0> ;
  assign LMB_Byte_Enable_15[0] = \<const0> ;
  assign LMB_Byte_Enable_15[1] = \<const0> ;
  assign LMB_Byte_Enable_15[2] = \<const0> ;
  assign LMB_Byte_Enable_15[3] = \<const0> ;
  assign LMB_Byte_Enable_16[0] = \<const0> ;
  assign LMB_Byte_Enable_16[1] = \<const0> ;
  assign LMB_Byte_Enable_16[2] = \<const0> ;
  assign LMB_Byte_Enable_16[3] = \<const0> ;
  assign LMB_Byte_Enable_17[0] = \<const0> ;
  assign LMB_Byte_Enable_17[1] = \<const0> ;
  assign LMB_Byte_Enable_17[2] = \<const0> ;
  assign LMB_Byte_Enable_17[3] = \<const0> ;
  assign LMB_Byte_Enable_18[0] = \<const0> ;
  assign LMB_Byte_Enable_18[1] = \<const0> ;
  assign LMB_Byte_Enable_18[2] = \<const0> ;
  assign LMB_Byte_Enable_18[3] = \<const0> ;
  assign LMB_Byte_Enable_19[0] = \<const0> ;
  assign LMB_Byte_Enable_19[1] = \<const0> ;
  assign LMB_Byte_Enable_19[2] = \<const0> ;
  assign LMB_Byte_Enable_19[3] = \<const0> ;
  assign LMB_Byte_Enable_2[0] = \<const0> ;
  assign LMB_Byte_Enable_2[1] = \<const0> ;
  assign LMB_Byte_Enable_2[2] = \<const0> ;
  assign LMB_Byte_Enable_2[3] = \<const0> ;
  assign LMB_Byte_Enable_20[0] = \<const0> ;
  assign LMB_Byte_Enable_20[1] = \<const0> ;
  assign LMB_Byte_Enable_20[2] = \<const0> ;
  assign LMB_Byte_Enable_20[3] = \<const0> ;
  assign LMB_Byte_Enable_21[0] = \<const0> ;
  assign LMB_Byte_Enable_21[1] = \<const0> ;
  assign LMB_Byte_Enable_21[2] = \<const0> ;
  assign LMB_Byte_Enable_21[3] = \<const0> ;
  assign LMB_Byte_Enable_22[0] = \<const0> ;
  assign LMB_Byte_Enable_22[1] = \<const0> ;
  assign LMB_Byte_Enable_22[2] = \<const0> ;
  assign LMB_Byte_Enable_22[3] = \<const0> ;
  assign LMB_Byte_Enable_23[0] = \<const0> ;
  assign LMB_Byte_Enable_23[1] = \<const0> ;
  assign LMB_Byte_Enable_23[2] = \<const0> ;
  assign LMB_Byte_Enable_23[3] = \<const0> ;
  assign LMB_Byte_Enable_24[0] = \<const0> ;
  assign LMB_Byte_Enable_24[1] = \<const0> ;
  assign LMB_Byte_Enable_24[2] = \<const0> ;
  assign LMB_Byte_Enable_24[3] = \<const0> ;
  assign LMB_Byte_Enable_25[0] = \<const0> ;
  assign LMB_Byte_Enable_25[1] = \<const0> ;
  assign LMB_Byte_Enable_25[2] = \<const0> ;
  assign LMB_Byte_Enable_25[3] = \<const0> ;
  assign LMB_Byte_Enable_26[0] = \<const0> ;
  assign LMB_Byte_Enable_26[1] = \<const0> ;
  assign LMB_Byte_Enable_26[2] = \<const0> ;
  assign LMB_Byte_Enable_26[3] = \<const0> ;
  assign LMB_Byte_Enable_27[0] = \<const0> ;
  assign LMB_Byte_Enable_27[1] = \<const0> ;
  assign LMB_Byte_Enable_27[2] = \<const0> ;
  assign LMB_Byte_Enable_27[3] = \<const0> ;
  assign LMB_Byte_Enable_28[0] = \<const0> ;
  assign LMB_Byte_Enable_28[1] = \<const0> ;
  assign LMB_Byte_Enable_28[2] = \<const0> ;
  assign LMB_Byte_Enable_28[3] = \<const0> ;
  assign LMB_Byte_Enable_29[0] = \<const0> ;
  assign LMB_Byte_Enable_29[1] = \<const0> ;
  assign LMB_Byte_Enable_29[2] = \<const0> ;
  assign LMB_Byte_Enable_29[3] = \<const0> ;
  assign LMB_Byte_Enable_3[0] = \<const0> ;
  assign LMB_Byte_Enable_3[1] = \<const0> ;
  assign LMB_Byte_Enable_3[2] = \<const0> ;
  assign LMB_Byte_Enable_3[3] = \<const0> ;
  assign LMB_Byte_Enable_30[0] = \<const0> ;
  assign LMB_Byte_Enable_30[1] = \<const0> ;
  assign LMB_Byte_Enable_30[2] = \<const0> ;
  assign LMB_Byte_Enable_30[3] = \<const0> ;
  assign LMB_Byte_Enable_31[0] = \<const0> ;
  assign LMB_Byte_Enable_31[1] = \<const0> ;
  assign LMB_Byte_Enable_31[2] = \<const0> ;
  assign LMB_Byte_Enable_31[3] = \<const0> ;
  assign LMB_Byte_Enable_4[0] = \<const0> ;
  assign LMB_Byte_Enable_4[1] = \<const0> ;
  assign LMB_Byte_Enable_4[2] = \<const0> ;
  assign LMB_Byte_Enable_4[3] = \<const0> ;
  assign LMB_Byte_Enable_5[0] = \<const0> ;
  assign LMB_Byte_Enable_5[1] = \<const0> ;
  assign LMB_Byte_Enable_5[2] = \<const0> ;
  assign LMB_Byte_Enable_5[3] = \<const0> ;
  assign LMB_Byte_Enable_6[0] = \<const0> ;
  assign LMB_Byte_Enable_6[1] = \<const0> ;
  assign LMB_Byte_Enable_6[2] = \<const0> ;
  assign LMB_Byte_Enable_6[3] = \<const0> ;
  assign LMB_Byte_Enable_7[0] = \<const0> ;
  assign LMB_Byte_Enable_7[1] = \<const0> ;
  assign LMB_Byte_Enable_7[2] = \<const0> ;
  assign LMB_Byte_Enable_7[3] = \<const0> ;
  assign LMB_Byte_Enable_8[0] = \<const0> ;
  assign LMB_Byte_Enable_8[1] = \<const0> ;
  assign LMB_Byte_Enable_8[2] = \<const0> ;
  assign LMB_Byte_Enable_8[3] = \<const0> ;
  assign LMB_Byte_Enable_9[0] = \<const0> ;
  assign LMB_Byte_Enable_9[1] = \<const0> ;
  assign LMB_Byte_Enable_9[2] = \<const0> ;
  assign LMB_Byte_Enable_9[3] = \<const0> ;
  assign LMB_Data_Addr_0[0] = \<const0> ;
  assign LMB_Data_Addr_0[1] = \<const0> ;
  assign LMB_Data_Addr_0[2] = \<const0> ;
  assign LMB_Data_Addr_0[3] = \<const0> ;
  assign LMB_Data_Addr_0[4] = \<const0> ;
  assign LMB_Data_Addr_0[5] = \<const0> ;
  assign LMB_Data_Addr_0[6] = \<const0> ;
  assign LMB_Data_Addr_0[7] = \<const0> ;
  assign LMB_Data_Addr_0[8] = \<const0> ;
  assign LMB_Data_Addr_0[9] = \<const0> ;
  assign LMB_Data_Addr_0[10] = \<const0> ;
  assign LMB_Data_Addr_0[11] = \<const0> ;
  assign LMB_Data_Addr_0[12] = \<const0> ;
  assign LMB_Data_Addr_0[13] = \<const0> ;
  assign LMB_Data_Addr_0[14] = \<const0> ;
  assign LMB_Data_Addr_0[15] = \<const0> ;
  assign LMB_Data_Addr_0[16] = \<const0> ;
  assign LMB_Data_Addr_0[17] = \<const0> ;
  assign LMB_Data_Addr_0[18] = \<const0> ;
  assign LMB_Data_Addr_0[19] = \<const0> ;
  assign LMB_Data_Addr_0[20] = \<const0> ;
  assign LMB_Data_Addr_0[21] = \<const0> ;
  assign LMB_Data_Addr_0[22] = \<const0> ;
  assign LMB_Data_Addr_0[23] = \<const0> ;
  assign LMB_Data_Addr_0[24] = \<const0> ;
  assign LMB_Data_Addr_0[25] = \<const0> ;
  assign LMB_Data_Addr_0[26] = \<const0> ;
  assign LMB_Data_Addr_0[27] = \<const0> ;
  assign LMB_Data_Addr_0[28] = \<const0> ;
  assign LMB_Data_Addr_0[29] = \<const0> ;
  assign LMB_Data_Addr_0[30] = \<const0> ;
  assign LMB_Data_Addr_0[31] = \<const0> ;
  assign LMB_Data_Addr_1[0] = \<const0> ;
  assign LMB_Data_Addr_1[1] = \<const0> ;
  assign LMB_Data_Addr_1[2] = \<const0> ;
  assign LMB_Data_Addr_1[3] = \<const0> ;
  assign LMB_Data_Addr_1[4] = \<const0> ;
  assign LMB_Data_Addr_1[5] = \<const0> ;
  assign LMB_Data_Addr_1[6] = \<const0> ;
  assign LMB_Data_Addr_1[7] = \<const0> ;
  assign LMB_Data_Addr_1[8] = \<const0> ;
  assign LMB_Data_Addr_1[9] = \<const0> ;
  assign LMB_Data_Addr_1[10] = \<const0> ;
  assign LMB_Data_Addr_1[11] = \<const0> ;
  assign LMB_Data_Addr_1[12] = \<const0> ;
  assign LMB_Data_Addr_1[13] = \<const0> ;
  assign LMB_Data_Addr_1[14] = \<const0> ;
  assign LMB_Data_Addr_1[15] = \<const0> ;
  assign LMB_Data_Addr_1[16] = \<const0> ;
  assign LMB_Data_Addr_1[17] = \<const0> ;
  assign LMB_Data_Addr_1[18] = \<const0> ;
  assign LMB_Data_Addr_1[19] = \<const0> ;
  assign LMB_Data_Addr_1[20] = \<const0> ;
  assign LMB_Data_Addr_1[21] = \<const0> ;
  assign LMB_Data_Addr_1[22] = \<const0> ;
  assign LMB_Data_Addr_1[23] = \<const0> ;
  assign LMB_Data_Addr_1[24] = \<const0> ;
  assign LMB_Data_Addr_1[25] = \<const0> ;
  assign LMB_Data_Addr_1[26] = \<const0> ;
  assign LMB_Data_Addr_1[27] = \<const0> ;
  assign LMB_Data_Addr_1[28] = \<const0> ;
  assign LMB_Data_Addr_1[29] = \<const0> ;
  assign LMB_Data_Addr_1[30] = \<const0> ;
  assign LMB_Data_Addr_1[31] = \<const0> ;
  assign LMB_Data_Addr_10[0] = \<const0> ;
  assign LMB_Data_Addr_10[1] = \<const0> ;
  assign LMB_Data_Addr_10[2] = \<const0> ;
  assign LMB_Data_Addr_10[3] = \<const0> ;
  assign LMB_Data_Addr_10[4] = \<const0> ;
  assign LMB_Data_Addr_10[5] = \<const0> ;
  assign LMB_Data_Addr_10[6] = \<const0> ;
  assign LMB_Data_Addr_10[7] = \<const0> ;
  assign LMB_Data_Addr_10[8] = \<const0> ;
  assign LMB_Data_Addr_10[9] = \<const0> ;
  assign LMB_Data_Addr_10[10] = \<const0> ;
  assign LMB_Data_Addr_10[11] = \<const0> ;
  assign LMB_Data_Addr_10[12] = \<const0> ;
  assign LMB_Data_Addr_10[13] = \<const0> ;
  assign LMB_Data_Addr_10[14] = \<const0> ;
  assign LMB_Data_Addr_10[15] = \<const0> ;
  assign LMB_Data_Addr_10[16] = \<const0> ;
  assign LMB_Data_Addr_10[17] = \<const0> ;
  assign LMB_Data_Addr_10[18] = \<const0> ;
  assign LMB_Data_Addr_10[19] = \<const0> ;
  assign LMB_Data_Addr_10[20] = \<const0> ;
  assign LMB_Data_Addr_10[21] = \<const0> ;
  assign LMB_Data_Addr_10[22] = \<const0> ;
  assign LMB_Data_Addr_10[23] = \<const0> ;
  assign LMB_Data_Addr_10[24] = \<const0> ;
  assign LMB_Data_Addr_10[25] = \<const0> ;
  assign LMB_Data_Addr_10[26] = \<const0> ;
  assign LMB_Data_Addr_10[27] = \<const0> ;
  assign LMB_Data_Addr_10[28] = \<const0> ;
  assign LMB_Data_Addr_10[29] = \<const0> ;
  assign LMB_Data_Addr_10[30] = \<const0> ;
  assign LMB_Data_Addr_10[31] = \<const0> ;
  assign LMB_Data_Addr_11[0] = \<const0> ;
  assign LMB_Data_Addr_11[1] = \<const0> ;
  assign LMB_Data_Addr_11[2] = \<const0> ;
  assign LMB_Data_Addr_11[3] = \<const0> ;
  assign LMB_Data_Addr_11[4] = \<const0> ;
  assign LMB_Data_Addr_11[5] = \<const0> ;
  assign LMB_Data_Addr_11[6] = \<const0> ;
  assign LMB_Data_Addr_11[7] = \<const0> ;
  assign LMB_Data_Addr_11[8] = \<const0> ;
  assign LMB_Data_Addr_11[9] = \<const0> ;
  assign LMB_Data_Addr_11[10] = \<const0> ;
  assign LMB_Data_Addr_11[11] = \<const0> ;
  assign LMB_Data_Addr_11[12] = \<const0> ;
  assign LMB_Data_Addr_11[13] = \<const0> ;
  assign LMB_Data_Addr_11[14] = \<const0> ;
  assign LMB_Data_Addr_11[15] = \<const0> ;
  assign LMB_Data_Addr_11[16] = \<const0> ;
  assign LMB_Data_Addr_11[17] = \<const0> ;
  assign LMB_Data_Addr_11[18] = \<const0> ;
  assign LMB_Data_Addr_11[19] = \<const0> ;
  assign LMB_Data_Addr_11[20] = \<const0> ;
  assign LMB_Data_Addr_11[21] = \<const0> ;
  assign LMB_Data_Addr_11[22] = \<const0> ;
  assign LMB_Data_Addr_11[23] = \<const0> ;
  assign LMB_Data_Addr_11[24] = \<const0> ;
  assign LMB_Data_Addr_11[25] = \<const0> ;
  assign LMB_Data_Addr_11[26] = \<const0> ;
  assign LMB_Data_Addr_11[27] = \<const0> ;
  assign LMB_Data_Addr_11[28] = \<const0> ;
  assign LMB_Data_Addr_11[29] = \<const0> ;
  assign LMB_Data_Addr_11[30] = \<const0> ;
  assign LMB_Data_Addr_11[31] = \<const0> ;
  assign LMB_Data_Addr_12[0] = \<const0> ;
  assign LMB_Data_Addr_12[1] = \<const0> ;
  assign LMB_Data_Addr_12[2] = \<const0> ;
  assign LMB_Data_Addr_12[3] = \<const0> ;
  assign LMB_Data_Addr_12[4] = \<const0> ;
  assign LMB_Data_Addr_12[5] = \<const0> ;
  assign LMB_Data_Addr_12[6] = \<const0> ;
  assign LMB_Data_Addr_12[7] = \<const0> ;
  assign LMB_Data_Addr_12[8] = \<const0> ;
  assign LMB_Data_Addr_12[9] = \<const0> ;
  assign LMB_Data_Addr_12[10] = \<const0> ;
  assign LMB_Data_Addr_12[11] = \<const0> ;
  assign LMB_Data_Addr_12[12] = \<const0> ;
  assign LMB_Data_Addr_12[13] = \<const0> ;
  assign LMB_Data_Addr_12[14] = \<const0> ;
  assign LMB_Data_Addr_12[15] = \<const0> ;
  assign LMB_Data_Addr_12[16] = \<const0> ;
  assign LMB_Data_Addr_12[17] = \<const0> ;
  assign LMB_Data_Addr_12[18] = \<const0> ;
  assign LMB_Data_Addr_12[19] = \<const0> ;
  assign LMB_Data_Addr_12[20] = \<const0> ;
  assign LMB_Data_Addr_12[21] = \<const0> ;
  assign LMB_Data_Addr_12[22] = \<const0> ;
  assign LMB_Data_Addr_12[23] = \<const0> ;
  assign LMB_Data_Addr_12[24] = \<const0> ;
  assign LMB_Data_Addr_12[25] = \<const0> ;
  assign LMB_Data_Addr_12[26] = \<const0> ;
  assign LMB_Data_Addr_12[27] = \<const0> ;
  assign LMB_Data_Addr_12[28] = \<const0> ;
  assign LMB_Data_Addr_12[29] = \<const0> ;
  assign LMB_Data_Addr_12[30] = \<const0> ;
  assign LMB_Data_Addr_12[31] = \<const0> ;
  assign LMB_Data_Addr_13[0] = \<const0> ;
  assign LMB_Data_Addr_13[1] = \<const0> ;
  assign LMB_Data_Addr_13[2] = \<const0> ;
  assign LMB_Data_Addr_13[3] = \<const0> ;
  assign LMB_Data_Addr_13[4] = \<const0> ;
  assign LMB_Data_Addr_13[5] = \<const0> ;
  assign LMB_Data_Addr_13[6] = \<const0> ;
  assign LMB_Data_Addr_13[7] = \<const0> ;
  assign LMB_Data_Addr_13[8] = \<const0> ;
  assign LMB_Data_Addr_13[9] = \<const0> ;
  assign LMB_Data_Addr_13[10] = \<const0> ;
  assign LMB_Data_Addr_13[11] = \<const0> ;
  assign LMB_Data_Addr_13[12] = \<const0> ;
  assign LMB_Data_Addr_13[13] = \<const0> ;
  assign LMB_Data_Addr_13[14] = \<const0> ;
  assign LMB_Data_Addr_13[15] = \<const0> ;
  assign LMB_Data_Addr_13[16] = \<const0> ;
  assign LMB_Data_Addr_13[17] = \<const0> ;
  assign LMB_Data_Addr_13[18] = \<const0> ;
  assign LMB_Data_Addr_13[19] = \<const0> ;
  assign LMB_Data_Addr_13[20] = \<const0> ;
  assign LMB_Data_Addr_13[21] = \<const0> ;
  assign LMB_Data_Addr_13[22] = \<const0> ;
  assign LMB_Data_Addr_13[23] = \<const0> ;
  assign LMB_Data_Addr_13[24] = \<const0> ;
  assign LMB_Data_Addr_13[25] = \<const0> ;
  assign LMB_Data_Addr_13[26] = \<const0> ;
  assign LMB_Data_Addr_13[27] = \<const0> ;
  assign LMB_Data_Addr_13[28] = \<const0> ;
  assign LMB_Data_Addr_13[29] = \<const0> ;
  assign LMB_Data_Addr_13[30] = \<const0> ;
  assign LMB_Data_Addr_13[31] = \<const0> ;
  assign LMB_Data_Addr_14[0] = \<const0> ;
  assign LMB_Data_Addr_14[1] = \<const0> ;
  assign LMB_Data_Addr_14[2] = \<const0> ;
  assign LMB_Data_Addr_14[3] = \<const0> ;
  assign LMB_Data_Addr_14[4] = \<const0> ;
  assign LMB_Data_Addr_14[5] = \<const0> ;
  assign LMB_Data_Addr_14[6] = \<const0> ;
  assign LMB_Data_Addr_14[7] = \<const0> ;
  assign LMB_Data_Addr_14[8] = \<const0> ;
  assign LMB_Data_Addr_14[9] = \<const0> ;
  assign LMB_Data_Addr_14[10] = \<const0> ;
  assign LMB_Data_Addr_14[11] = \<const0> ;
  assign LMB_Data_Addr_14[12] = \<const0> ;
  assign LMB_Data_Addr_14[13] = \<const0> ;
  assign LMB_Data_Addr_14[14] = \<const0> ;
  assign LMB_Data_Addr_14[15] = \<const0> ;
  assign LMB_Data_Addr_14[16] = \<const0> ;
  assign LMB_Data_Addr_14[17] = \<const0> ;
  assign LMB_Data_Addr_14[18] = \<const0> ;
  assign LMB_Data_Addr_14[19] = \<const0> ;
  assign LMB_Data_Addr_14[20] = \<const0> ;
  assign LMB_Data_Addr_14[21] = \<const0> ;
  assign LMB_Data_Addr_14[22] = \<const0> ;
  assign LMB_Data_Addr_14[23] = \<const0> ;
  assign LMB_Data_Addr_14[24] = \<const0> ;
  assign LMB_Data_Addr_14[25] = \<const0> ;
  assign LMB_Data_Addr_14[26] = \<const0> ;
  assign LMB_Data_Addr_14[27] = \<const0> ;
  assign LMB_Data_Addr_14[28] = \<const0> ;
  assign LMB_Data_Addr_14[29] = \<const0> ;
  assign LMB_Data_Addr_14[30] = \<const0> ;
  assign LMB_Data_Addr_14[31] = \<const0> ;
  assign LMB_Data_Addr_15[0] = \<const0> ;
  assign LMB_Data_Addr_15[1] = \<const0> ;
  assign LMB_Data_Addr_15[2] = \<const0> ;
  assign LMB_Data_Addr_15[3] = \<const0> ;
  assign LMB_Data_Addr_15[4] = \<const0> ;
  assign LMB_Data_Addr_15[5] = \<const0> ;
  assign LMB_Data_Addr_15[6] = \<const0> ;
  assign LMB_Data_Addr_15[7] = \<const0> ;
  assign LMB_Data_Addr_15[8] = \<const0> ;
  assign LMB_Data_Addr_15[9] = \<const0> ;
  assign LMB_Data_Addr_15[10] = \<const0> ;
  assign LMB_Data_Addr_15[11] = \<const0> ;
  assign LMB_Data_Addr_15[12] = \<const0> ;
  assign LMB_Data_Addr_15[13] = \<const0> ;
  assign LMB_Data_Addr_15[14] = \<const0> ;
  assign LMB_Data_Addr_15[15] = \<const0> ;
  assign LMB_Data_Addr_15[16] = \<const0> ;
  assign LMB_Data_Addr_15[17] = \<const0> ;
  assign LMB_Data_Addr_15[18] = \<const0> ;
  assign LMB_Data_Addr_15[19] = \<const0> ;
  assign LMB_Data_Addr_15[20] = \<const0> ;
  assign LMB_Data_Addr_15[21] = \<const0> ;
  assign LMB_Data_Addr_15[22] = \<const0> ;
  assign LMB_Data_Addr_15[23] = \<const0> ;
  assign LMB_Data_Addr_15[24] = \<const0> ;
  assign LMB_Data_Addr_15[25] = \<const0> ;
  assign LMB_Data_Addr_15[26] = \<const0> ;
  assign LMB_Data_Addr_15[27] = \<const0> ;
  assign LMB_Data_Addr_15[28] = \<const0> ;
  assign LMB_Data_Addr_15[29] = \<const0> ;
  assign LMB_Data_Addr_15[30] = \<const0> ;
  assign LMB_Data_Addr_15[31] = \<const0> ;
  assign LMB_Data_Addr_16[0] = \<const0> ;
  assign LMB_Data_Addr_16[1] = \<const0> ;
  assign LMB_Data_Addr_16[2] = \<const0> ;
  assign LMB_Data_Addr_16[3] = \<const0> ;
  assign LMB_Data_Addr_16[4] = \<const0> ;
  assign LMB_Data_Addr_16[5] = \<const0> ;
  assign LMB_Data_Addr_16[6] = \<const0> ;
  assign LMB_Data_Addr_16[7] = \<const0> ;
  assign LMB_Data_Addr_16[8] = \<const0> ;
  assign LMB_Data_Addr_16[9] = \<const0> ;
  assign LMB_Data_Addr_16[10] = \<const0> ;
  assign LMB_Data_Addr_16[11] = \<const0> ;
  assign LMB_Data_Addr_16[12] = \<const0> ;
  assign LMB_Data_Addr_16[13] = \<const0> ;
  assign LMB_Data_Addr_16[14] = \<const0> ;
  assign LMB_Data_Addr_16[15] = \<const0> ;
  assign LMB_Data_Addr_16[16] = \<const0> ;
  assign LMB_Data_Addr_16[17] = \<const0> ;
  assign LMB_Data_Addr_16[18] = \<const0> ;
  assign LMB_Data_Addr_16[19] = \<const0> ;
  assign LMB_Data_Addr_16[20] = \<const0> ;
  assign LMB_Data_Addr_16[21] = \<const0> ;
  assign LMB_Data_Addr_16[22] = \<const0> ;
  assign LMB_Data_Addr_16[23] = \<const0> ;
  assign LMB_Data_Addr_16[24] = \<const0> ;
  assign LMB_Data_Addr_16[25] = \<const0> ;
  assign LMB_Data_Addr_16[26] = \<const0> ;
  assign LMB_Data_Addr_16[27] = \<const0> ;
  assign LMB_Data_Addr_16[28] = \<const0> ;
  assign LMB_Data_Addr_16[29] = \<const0> ;
  assign LMB_Data_Addr_16[30] = \<const0> ;
  assign LMB_Data_Addr_16[31] = \<const0> ;
  assign LMB_Data_Addr_17[0] = \<const0> ;
  assign LMB_Data_Addr_17[1] = \<const0> ;
  assign LMB_Data_Addr_17[2] = \<const0> ;
  assign LMB_Data_Addr_17[3] = \<const0> ;
  assign LMB_Data_Addr_17[4] = \<const0> ;
  assign LMB_Data_Addr_17[5] = \<const0> ;
  assign LMB_Data_Addr_17[6] = \<const0> ;
  assign LMB_Data_Addr_17[7] = \<const0> ;
  assign LMB_Data_Addr_17[8] = \<const0> ;
  assign LMB_Data_Addr_17[9] = \<const0> ;
  assign LMB_Data_Addr_17[10] = \<const0> ;
  assign LMB_Data_Addr_17[11] = \<const0> ;
  assign LMB_Data_Addr_17[12] = \<const0> ;
  assign LMB_Data_Addr_17[13] = \<const0> ;
  assign LMB_Data_Addr_17[14] = \<const0> ;
  assign LMB_Data_Addr_17[15] = \<const0> ;
  assign LMB_Data_Addr_17[16] = \<const0> ;
  assign LMB_Data_Addr_17[17] = \<const0> ;
  assign LMB_Data_Addr_17[18] = \<const0> ;
  assign LMB_Data_Addr_17[19] = \<const0> ;
  assign LMB_Data_Addr_17[20] = \<const0> ;
  assign LMB_Data_Addr_17[21] = \<const0> ;
  assign LMB_Data_Addr_17[22] = \<const0> ;
  assign LMB_Data_Addr_17[23] = \<const0> ;
  assign LMB_Data_Addr_17[24] = \<const0> ;
  assign LMB_Data_Addr_17[25] = \<const0> ;
  assign LMB_Data_Addr_17[26] = \<const0> ;
  assign LMB_Data_Addr_17[27] = \<const0> ;
  assign LMB_Data_Addr_17[28] = \<const0> ;
  assign LMB_Data_Addr_17[29] = \<const0> ;
  assign LMB_Data_Addr_17[30] = \<const0> ;
  assign LMB_Data_Addr_17[31] = \<const0> ;
  assign LMB_Data_Addr_18[0] = \<const0> ;
  assign LMB_Data_Addr_18[1] = \<const0> ;
  assign LMB_Data_Addr_18[2] = \<const0> ;
  assign LMB_Data_Addr_18[3] = \<const0> ;
  assign LMB_Data_Addr_18[4] = \<const0> ;
  assign LMB_Data_Addr_18[5] = \<const0> ;
  assign LMB_Data_Addr_18[6] = \<const0> ;
  assign LMB_Data_Addr_18[7] = \<const0> ;
  assign LMB_Data_Addr_18[8] = \<const0> ;
  assign LMB_Data_Addr_18[9] = \<const0> ;
  assign LMB_Data_Addr_18[10] = \<const0> ;
  assign LMB_Data_Addr_18[11] = \<const0> ;
  assign LMB_Data_Addr_18[12] = \<const0> ;
  assign LMB_Data_Addr_18[13] = \<const0> ;
  assign LMB_Data_Addr_18[14] = \<const0> ;
  assign LMB_Data_Addr_18[15] = \<const0> ;
  assign LMB_Data_Addr_18[16] = \<const0> ;
  assign LMB_Data_Addr_18[17] = \<const0> ;
  assign LMB_Data_Addr_18[18] = \<const0> ;
  assign LMB_Data_Addr_18[19] = \<const0> ;
  assign LMB_Data_Addr_18[20] = \<const0> ;
  assign LMB_Data_Addr_18[21] = \<const0> ;
  assign LMB_Data_Addr_18[22] = \<const0> ;
  assign LMB_Data_Addr_18[23] = \<const0> ;
  assign LMB_Data_Addr_18[24] = \<const0> ;
  assign LMB_Data_Addr_18[25] = \<const0> ;
  assign LMB_Data_Addr_18[26] = \<const0> ;
  assign LMB_Data_Addr_18[27] = \<const0> ;
  assign LMB_Data_Addr_18[28] = \<const0> ;
  assign LMB_Data_Addr_18[29] = \<const0> ;
  assign LMB_Data_Addr_18[30] = \<const0> ;
  assign LMB_Data_Addr_18[31] = \<const0> ;
  assign LMB_Data_Addr_19[0] = \<const0> ;
  assign LMB_Data_Addr_19[1] = \<const0> ;
  assign LMB_Data_Addr_19[2] = \<const0> ;
  assign LMB_Data_Addr_19[3] = \<const0> ;
  assign LMB_Data_Addr_19[4] = \<const0> ;
  assign LMB_Data_Addr_19[5] = \<const0> ;
  assign LMB_Data_Addr_19[6] = \<const0> ;
  assign LMB_Data_Addr_19[7] = \<const0> ;
  assign LMB_Data_Addr_19[8] = \<const0> ;
  assign LMB_Data_Addr_19[9] = \<const0> ;
  assign LMB_Data_Addr_19[10] = \<const0> ;
  assign LMB_Data_Addr_19[11] = \<const0> ;
  assign LMB_Data_Addr_19[12] = \<const0> ;
  assign LMB_Data_Addr_19[13] = \<const0> ;
  assign LMB_Data_Addr_19[14] = \<const0> ;
  assign LMB_Data_Addr_19[15] = \<const0> ;
  assign LMB_Data_Addr_19[16] = \<const0> ;
  assign LMB_Data_Addr_19[17] = \<const0> ;
  assign LMB_Data_Addr_19[18] = \<const0> ;
  assign LMB_Data_Addr_19[19] = \<const0> ;
  assign LMB_Data_Addr_19[20] = \<const0> ;
  assign LMB_Data_Addr_19[21] = \<const0> ;
  assign LMB_Data_Addr_19[22] = \<const0> ;
  assign LMB_Data_Addr_19[23] = \<const0> ;
  assign LMB_Data_Addr_19[24] = \<const0> ;
  assign LMB_Data_Addr_19[25] = \<const0> ;
  assign LMB_Data_Addr_19[26] = \<const0> ;
  assign LMB_Data_Addr_19[27] = \<const0> ;
  assign LMB_Data_Addr_19[28] = \<const0> ;
  assign LMB_Data_Addr_19[29] = \<const0> ;
  assign LMB_Data_Addr_19[30] = \<const0> ;
  assign LMB_Data_Addr_19[31] = \<const0> ;
  assign LMB_Data_Addr_2[0] = \<const0> ;
  assign LMB_Data_Addr_2[1] = \<const0> ;
  assign LMB_Data_Addr_2[2] = \<const0> ;
  assign LMB_Data_Addr_2[3] = \<const0> ;
  assign LMB_Data_Addr_2[4] = \<const0> ;
  assign LMB_Data_Addr_2[5] = \<const0> ;
  assign LMB_Data_Addr_2[6] = \<const0> ;
  assign LMB_Data_Addr_2[7] = \<const0> ;
  assign LMB_Data_Addr_2[8] = \<const0> ;
  assign LMB_Data_Addr_2[9] = \<const0> ;
  assign LMB_Data_Addr_2[10] = \<const0> ;
  assign LMB_Data_Addr_2[11] = \<const0> ;
  assign LMB_Data_Addr_2[12] = \<const0> ;
  assign LMB_Data_Addr_2[13] = \<const0> ;
  assign LMB_Data_Addr_2[14] = \<const0> ;
  assign LMB_Data_Addr_2[15] = \<const0> ;
  assign LMB_Data_Addr_2[16] = \<const0> ;
  assign LMB_Data_Addr_2[17] = \<const0> ;
  assign LMB_Data_Addr_2[18] = \<const0> ;
  assign LMB_Data_Addr_2[19] = \<const0> ;
  assign LMB_Data_Addr_2[20] = \<const0> ;
  assign LMB_Data_Addr_2[21] = \<const0> ;
  assign LMB_Data_Addr_2[22] = \<const0> ;
  assign LMB_Data_Addr_2[23] = \<const0> ;
  assign LMB_Data_Addr_2[24] = \<const0> ;
  assign LMB_Data_Addr_2[25] = \<const0> ;
  assign LMB_Data_Addr_2[26] = \<const0> ;
  assign LMB_Data_Addr_2[27] = \<const0> ;
  assign LMB_Data_Addr_2[28] = \<const0> ;
  assign LMB_Data_Addr_2[29] = \<const0> ;
  assign LMB_Data_Addr_2[30] = \<const0> ;
  assign LMB_Data_Addr_2[31] = \<const0> ;
  assign LMB_Data_Addr_20[0] = \<const0> ;
  assign LMB_Data_Addr_20[1] = \<const0> ;
  assign LMB_Data_Addr_20[2] = \<const0> ;
  assign LMB_Data_Addr_20[3] = \<const0> ;
  assign LMB_Data_Addr_20[4] = \<const0> ;
  assign LMB_Data_Addr_20[5] = \<const0> ;
  assign LMB_Data_Addr_20[6] = \<const0> ;
  assign LMB_Data_Addr_20[7] = \<const0> ;
  assign LMB_Data_Addr_20[8] = \<const0> ;
  assign LMB_Data_Addr_20[9] = \<const0> ;
  assign LMB_Data_Addr_20[10] = \<const0> ;
  assign LMB_Data_Addr_20[11] = \<const0> ;
  assign LMB_Data_Addr_20[12] = \<const0> ;
  assign LMB_Data_Addr_20[13] = \<const0> ;
  assign LMB_Data_Addr_20[14] = \<const0> ;
  assign LMB_Data_Addr_20[15] = \<const0> ;
  assign LMB_Data_Addr_20[16] = \<const0> ;
  assign LMB_Data_Addr_20[17] = \<const0> ;
  assign LMB_Data_Addr_20[18] = \<const0> ;
  assign LMB_Data_Addr_20[19] = \<const0> ;
  assign LMB_Data_Addr_20[20] = \<const0> ;
  assign LMB_Data_Addr_20[21] = \<const0> ;
  assign LMB_Data_Addr_20[22] = \<const0> ;
  assign LMB_Data_Addr_20[23] = \<const0> ;
  assign LMB_Data_Addr_20[24] = \<const0> ;
  assign LMB_Data_Addr_20[25] = \<const0> ;
  assign LMB_Data_Addr_20[26] = \<const0> ;
  assign LMB_Data_Addr_20[27] = \<const0> ;
  assign LMB_Data_Addr_20[28] = \<const0> ;
  assign LMB_Data_Addr_20[29] = \<const0> ;
  assign LMB_Data_Addr_20[30] = \<const0> ;
  assign LMB_Data_Addr_20[31] = \<const0> ;
  assign LMB_Data_Addr_21[0] = \<const0> ;
  assign LMB_Data_Addr_21[1] = \<const0> ;
  assign LMB_Data_Addr_21[2] = \<const0> ;
  assign LMB_Data_Addr_21[3] = \<const0> ;
  assign LMB_Data_Addr_21[4] = \<const0> ;
  assign LMB_Data_Addr_21[5] = \<const0> ;
  assign LMB_Data_Addr_21[6] = \<const0> ;
  assign LMB_Data_Addr_21[7] = \<const0> ;
  assign LMB_Data_Addr_21[8] = \<const0> ;
  assign LMB_Data_Addr_21[9] = \<const0> ;
  assign LMB_Data_Addr_21[10] = \<const0> ;
  assign LMB_Data_Addr_21[11] = \<const0> ;
  assign LMB_Data_Addr_21[12] = \<const0> ;
  assign LMB_Data_Addr_21[13] = \<const0> ;
  assign LMB_Data_Addr_21[14] = \<const0> ;
  assign LMB_Data_Addr_21[15] = \<const0> ;
  assign LMB_Data_Addr_21[16] = \<const0> ;
  assign LMB_Data_Addr_21[17] = \<const0> ;
  assign LMB_Data_Addr_21[18] = \<const0> ;
  assign LMB_Data_Addr_21[19] = \<const0> ;
  assign LMB_Data_Addr_21[20] = \<const0> ;
  assign LMB_Data_Addr_21[21] = \<const0> ;
  assign LMB_Data_Addr_21[22] = \<const0> ;
  assign LMB_Data_Addr_21[23] = \<const0> ;
  assign LMB_Data_Addr_21[24] = \<const0> ;
  assign LMB_Data_Addr_21[25] = \<const0> ;
  assign LMB_Data_Addr_21[26] = \<const0> ;
  assign LMB_Data_Addr_21[27] = \<const0> ;
  assign LMB_Data_Addr_21[28] = \<const0> ;
  assign LMB_Data_Addr_21[29] = \<const0> ;
  assign LMB_Data_Addr_21[30] = \<const0> ;
  assign LMB_Data_Addr_21[31] = \<const0> ;
  assign LMB_Data_Addr_22[0] = \<const0> ;
  assign LMB_Data_Addr_22[1] = \<const0> ;
  assign LMB_Data_Addr_22[2] = \<const0> ;
  assign LMB_Data_Addr_22[3] = \<const0> ;
  assign LMB_Data_Addr_22[4] = \<const0> ;
  assign LMB_Data_Addr_22[5] = \<const0> ;
  assign LMB_Data_Addr_22[6] = \<const0> ;
  assign LMB_Data_Addr_22[7] = \<const0> ;
  assign LMB_Data_Addr_22[8] = \<const0> ;
  assign LMB_Data_Addr_22[9] = \<const0> ;
  assign LMB_Data_Addr_22[10] = \<const0> ;
  assign LMB_Data_Addr_22[11] = \<const0> ;
  assign LMB_Data_Addr_22[12] = \<const0> ;
  assign LMB_Data_Addr_22[13] = \<const0> ;
  assign LMB_Data_Addr_22[14] = \<const0> ;
  assign LMB_Data_Addr_22[15] = \<const0> ;
  assign LMB_Data_Addr_22[16] = \<const0> ;
  assign LMB_Data_Addr_22[17] = \<const0> ;
  assign LMB_Data_Addr_22[18] = \<const0> ;
  assign LMB_Data_Addr_22[19] = \<const0> ;
  assign LMB_Data_Addr_22[20] = \<const0> ;
  assign LMB_Data_Addr_22[21] = \<const0> ;
  assign LMB_Data_Addr_22[22] = \<const0> ;
  assign LMB_Data_Addr_22[23] = \<const0> ;
  assign LMB_Data_Addr_22[24] = \<const0> ;
  assign LMB_Data_Addr_22[25] = \<const0> ;
  assign LMB_Data_Addr_22[26] = \<const0> ;
  assign LMB_Data_Addr_22[27] = \<const0> ;
  assign LMB_Data_Addr_22[28] = \<const0> ;
  assign LMB_Data_Addr_22[29] = \<const0> ;
  assign LMB_Data_Addr_22[30] = \<const0> ;
  assign LMB_Data_Addr_22[31] = \<const0> ;
  assign LMB_Data_Addr_23[0] = \<const0> ;
  assign LMB_Data_Addr_23[1] = \<const0> ;
  assign LMB_Data_Addr_23[2] = \<const0> ;
  assign LMB_Data_Addr_23[3] = \<const0> ;
  assign LMB_Data_Addr_23[4] = \<const0> ;
  assign LMB_Data_Addr_23[5] = \<const0> ;
  assign LMB_Data_Addr_23[6] = \<const0> ;
  assign LMB_Data_Addr_23[7] = \<const0> ;
  assign LMB_Data_Addr_23[8] = \<const0> ;
  assign LMB_Data_Addr_23[9] = \<const0> ;
  assign LMB_Data_Addr_23[10] = \<const0> ;
  assign LMB_Data_Addr_23[11] = \<const0> ;
  assign LMB_Data_Addr_23[12] = \<const0> ;
  assign LMB_Data_Addr_23[13] = \<const0> ;
  assign LMB_Data_Addr_23[14] = \<const0> ;
  assign LMB_Data_Addr_23[15] = \<const0> ;
  assign LMB_Data_Addr_23[16] = \<const0> ;
  assign LMB_Data_Addr_23[17] = \<const0> ;
  assign LMB_Data_Addr_23[18] = \<const0> ;
  assign LMB_Data_Addr_23[19] = \<const0> ;
  assign LMB_Data_Addr_23[20] = \<const0> ;
  assign LMB_Data_Addr_23[21] = \<const0> ;
  assign LMB_Data_Addr_23[22] = \<const0> ;
  assign LMB_Data_Addr_23[23] = \<const0> ;
  assign LMB_Data_Addr_23[24] = \<const0> ;
  assign LMB_Data_Addr_23[25] = \<const0> ;
  assign LMB_Data_Addr_23[26] = \<const0> ;
  assign LMB_Data_Addr_23[27] = \<const0> ;
  assign LMB_Data_Addr_23[28] = \<const0> ;
  assign LMB_Data_Addr_23[29] = \<const0> ;
  assign LMB_Data_Addr_23[30] = \<const0> ;
  assign LMB_Data_Addr_23[31] = \<const0> ;
  assign LMB_Data_Addr_24[0] = \<const0> ;
  assign LMB_Data_Addr_24[1] = \<const0> ;
  assign LMB_Data_Addr_24[2] = \<const0> ;
  assign LMB_Data_Addr_24[3] = \<const0> ;
  assign LMB_Data_Addr_24[4] = \<const0> ;
  assign LMB_Data_Addr_24[5] = \<const0> ;
  assign LMB_Data_Addr_24[6] = \<const0> ;
  assign LMB_Data_Addr_24[7] = \<const0> ;
  assign LMB_Data_Addr_24[8] = \<const0> ;
  assign LMB_Data_Addr_24[9] = \<const0> ;
  assign LMB_Data_Addr_24[10] = \<const0> ;
  assign LMB_Data_Addr_24[11] = \<const0> ;
  assign LMB_Data_Addr_24[12] = \<const0> ;
  assign LMB_Data_Addr_24[13] = \<const0> ;
  assign LMB_Data_Addr_24[14] = \<const0> ;
  assign LMB_Data_Addr_24[15] = \<const0> ;
  assign LMB_Data_Addr_24[16] = \<const0> ;
  assign LMB_Data_Addr_24[17] = \<const0> ;
  assign LMB_Data_Addr_24[18] = \<const0> ;
  assign LMB_Data_Addr_24[19] = \<const0> ;
  assign LMB_Data_Addr_24[20] = \<const0> ;
  assign LMB_Data_Addr_24[21] = \<const0> ;
  assign LMB_Data_Addr_24[22] = \<const0> ;
  assign LMB_Data_Addr_24[23] = \<const0> ;
  assign LMB_Data_Addr_24[24] = \<const0> ;
  assign LMB_Data_Addr_24[25] = \<const0> ;
  assign LMB_Data_Addr_24[26] = \<const0> ;
  assign LMB_Data_Addr_24[27] = \<const0> ;
  assign LMB_Data_Addr_24[28] = \<const0> ;
  assign LMB_Data_Addr_24[29] = \<const0> ;
  assign LMB_Data_Addr_24[30] = \<const0> ;
  assign LMB_Data_Addr_24[31] = \<const0> ;
  assign LMB_Data_Addr_25[0] = \<const0> ;
  assign LMB_Data_Addr_25[1] = \<const0> ;
  assign LMB_Data_Addr_25[2] = \<const0> ;
  assign LMB_Data_Addr_25[3] = \<const0> ;
  assign LMB_Data_Addr_25[4] = \<const0> ;
  assign LMB_Data_Addr_25[5] = \<const0> ;
  assign LMB_Data_Addr_25[6] = \<const0> ;
  assign LMB_Data_Addr_25[7] = \<const0> ;
  assign LMB_Data_Addr_25[8] = \<const0> ;
  assign LMB_Data_Addr_25[9] = \<const0> ;
  assign LMB_Data_Addr_25[10] = \<const0> ;
  assign LMB_Data_Addr_25[11] = \<const0> ;
  assign LMB_Data_Addr_25[12] = \<const0> ;
  assign LMB_Data_Addr_25[13] = \<const0> ;
  assign LMB_Data_Addr_25[14] = \<const0> ;
  assign LMB_Data_Addr_25[15] = \<const0> ;
  assign LMB_Data_Addr_25[16] = \<const0> ;
  assign LMB_Data_Addr_25[17] = \<const0> ;
  assign LMB_Data_Addr_25[18] = \<const0> ;
  assign LMB_Data_Addr_25[19] = \<const0> ;
  assign LMB_Data_Addr_25[20] = \<const0> ;
  assign LMB_Data_Addr_25[21] = \<const0> ;
  assign LMB_Data_Addr_25[22] = \<const0> ;
  assign LMB_Data_Addr_25[23] = \<const0> ;
  assign LMB_Data_Addr_25[24] = \<const0> ;
  assign LMB_Data_Addr_25[25] = \<const0> ;
  assign LMB_Data_Addr_25[26] = \<const0> ;
  assign LMB_Data_Addr_25[27] = \<const0> ;
  assign LMB_Data_Addr_25[28] = \<const0> ;
  assign LMB_Data_Addr_25[29] = \<const0> ;
  assign LMB_Data_Addr_25[30] = \<const0> ;
  assign LMB_Data_Addr_25[31] = \<const0> ;
  assign LMB_Data_Addr_26[0] = \<const0> ;
  assign LMB_Data_Addr_26[1] = \<const0> ;
  assign LMB_Data_Addr_26[2] = \<const0> ;
  assign LMB_Data_Addr_26[3] = \<const0> ;
  assign LMB_Data_Addr_26[4] = \<const0> ;
  assign LMB_Data_Addr_26[5] = \<const0> ;
  assign LMB_Data_Addr_26[6] = \<const0> ;
  assign LMB_Data_Addr_26[7] = \<const0> ;
  assign LMB_Data_Addr_26[8] = \<const0> ;
  assign LMB_Data_Addr_26[9] = \<const0> ;
  assign LMB_Data_Addr_26[10] = \<const0> ;
  assign LMB_Data_Addr_26[11] = \<const0> ;
  assign LMB_Data_Addr_26[12] = \<const0> ;
  assign LMB_Data_Addr_26[13] = \<const0> ;
  assign LMB_Data_Addr_26[14] = \<const0> ;
  assign LMB_Data_Addr_26[15] = \<const0> ;
  assign LMB_Data_Addr_26[16] = \<const0> ;
  assign LMB_Data_Addr_26[17] = \<const0> ;
  assign LMB_Data_Addr_26[18] = \<const0> ;
  assign LMB_Data_Addr_26[19] = \<const0> ;
  assign LMB_Data_Addr_26[20] = \<const0> ;
  assign LMB_Data_Addr_26[21] = \<const0> ;
  assign LMB_Data_Addr_26[22] = \<const0> ;
  assign LMB_Data_Addr_26[23] = \<const0> ;
  assign LMB_Data_Addr_26[24] = \<const0> ;
  assign LMB_Data_Addr_26[25] = \<const0> ;
  assign LMB_Data_Addr_26[26] = \<const0> ;
  assign LMB_Data_Addr_26[27] = \<const0> ;
  assign LMB_Data_Addr_26[28] = \<const0> ;
  assign LMB_Data_Addr_26[29] = \<const0> ;
  assign LMB_Data_Addr_26[30] = \<const0> ;
  assign LMB_Data_Addr_26[31] = \<const0> ;
  assign LMB_Data_Addr_27[0] = \<const0> ;
  assign LMB_Data_Addr_27[1] = \<const0> ;
  assign LMB_Data_Addr_27[2] = \<const0> ;
  assign LMB_Data_Addr_27[3] = \<const0> ;
  assign LMB_Data_Addr_27[4] = \<const0> ;
  assign LMB_Data_Addr_27[5] = \<const0> ;
  assign LMB_Data_Addr_27[6] = \<const0> ;
  assign LMB_Data_Addr_27[7] = \<const0> ;
  assign LMB_Data_Addr_27[8] = \<const0> ;
  assign LMB_Data_Addr_27[9] = \<const0> ;
  assign LMB_Data_Addr_27[10] = \<const0> ;
  assign LMB_Data_Addr_27[11] = \<const0> ;
  assign LMB_Data_Addr_27[12] = \<const0> ;
  assign LMB_Data_Addr_27[13] = \<const0> ;
  assign LMB_Data_Addr_27[14] = \<const0> ;
  assign LMB_Data_Addr_27[15] = \<const0> ;
  assign LMB_Data_Addr_27[16] = \<const0> ;
  assign LMB_Data_Addr_27[17] = \<const0> ;
  assign LMB_Data_Addr_27[18] = \<const0> ;
  assign LMB_Data_Addr_27[19] = \<const0> ;
  assign LMB_Data_Addr_27[20] = \<const0> ;
  assign LMB_Data_Addr_27[21] = \<const0> ;
  assign LMB_Data_Addr_27[22] = \<const0> ;
  assign LMB_Data_Addr_27[23] = \<const0> ;
  assign LMB_Data_Addr_27[24] = \<const0> ;
  assign LMB_Data_Addr_27[25] = \<const0> ;
  assign LMB_Data_Addr_27[26] = \<const0> ;
  assign LMB_Data_Addr_27[27] = \<const0> ;
  assign LMB_Data_Addr_27[28] = \<const0> ;
  assign LMB_Data_Addr_27[29] = \<const0> ;
  assign LMB_Data_Addr_27[30] = \<const0> ;
  assign LMB_Data_Addr_27[31] = \<const0> ;
  assign LMB_Data_Addr_28[0] = \<const0> ;
  assign LMB_Data_Addr_28[1] = \<const0> ;
  assign LMB_Data_Addr_28[2] = \<const0> ;
  assign LMB_Data_Addr_28[3] = \<const0> ;
  assign LMB_Data_Addr_28[4] = \<const0> ;
  assign LMB_Data_Addr_28[5] = \<const0> ;
  assign LMB_Data_Addr_28[6] = \<const0> ;
  assign LMB_Data_Addr_28[7] = \<const0> ;
  assign LMB_Data_Addr_28[8] = \<const0> ;
  assign LMB_Data_Addr_28[9] = \<const0> ;
  assign LMB_Data_Addr_28[10] = \<const0> ;
  assign LMB_Data_Addr_28[11] = \<const0> ;
  assign LMB_Data_Addr_28[12] = \<const0> ;
  assign LMB_Data_Addr_28[13] = \<const0> ;
  assign LMB_Data_Addr_28[14] = \<const0> ;
  assign LMB_Data_Addr_28[15] = \<const0> ;
  assign LMB_Data_Addr_28[16] = \<const0> ;
  assign LMB_Data_Addr_28[17] = \<const0> ;
  assign LMB_Data_Addr_28[18] = \<const0> ;
  assign LMB_Data_Addr_28[19] = \<const0> ;
  assign LMB_Data_Addr_28[20] = \<const0> ;
  assign LMB_Data_Addr_28[21] = \<const0> ;
  assign LMB_Data_Addr_28[22] = \<const0> ;
  assign LMB_Data_Addr_28[23] = \<const0> ;
  assign LMB_Data_Addr_28[24] = \<const0> ;
  assign LMB_Data_Addr_28[25] = \<const0> ;
  assign LMB_Data_Addr_28[26] = \<const0> ;
  assign LMB_Data_Addr_28[27] = \<const0> ;
  assign LMB_Data_Addr_28[28] = \<const0> ;
  assign LMB_Data_Addr_28[29] = \<const0> ;
  assign LMB_Data_Addr_28[30] = \<const0> ;
  assign LMB_Data_Addr_28[31] = \<const0> ;
  assign LMB_Data_Addr_29[0] = \<const0> ;
  assign LMB_Data_Addr_29[1] = \<const0> ;
  assign LMB_Data_Addr_29[2] = \<const0> ;
  assign LMB_Data_Addr_29[3] = \<const0> ;
  assign LMB_Data_Addr_29[4] = \<const0> ;
  assign LMB_Data_Addr_29[5] = \<const0> ;
  assign LMB_Data_Addr_29[6] = \<const0> ;
  assign LMB_Data_Addr_29[7] = \<const0> ;
  assign LMB_Data_Addr_29[8] = \<const0> ;
  assign LMB_Data_Addr_29[9] = \<const0> ;
  assign LMB_Data_Addr_29[10] = \<const0> ;
  assign LMB_Data_Addr_29[11] = \<const0> ;
  assign LMB_Data_Addr_29[12] = \<const0> ;
  assign LMB_Data_Addr_29[13] = \<const0> ;
  assign LMB_Data_Addr_29[14] = \<const0> ;
  assign LMB_Data_Addr_29[15] = \<const0> ;
  assign LMB_Data_Addr_29[16] = \<const0> ;
  assign LMB_Data_Addr_29[17] = \<const0> ;
  assign LMB_Data_Addr_29[18] = \<const0> ;
  assign LMB_Data_Addr_29[19] = \<const0> ;
  assign LMB_Data_Addr_29[20] = \<const0> ;
  assign LMB_Data_Addr_29[21] = \<const0> ;
  assign LMB_Data_Addr_29[22] = \<const0> ;
  assign LMB_Data_Addr_29[23] = \<const0> ;
  assign LMB_Data_Addr_29[24] = \<const0> ;
  assign LMB_Data_Addr_29[25] = \<const0> ;
  assign LMB_Data_Addr_29[26] = \<const0> ;
  assign LMB_Data_Addr_29[27] = \<const0> ;
  assign LMB_Data_Addr_29[28] = \<const0> ;
  assign LMB_Data_Addr_29[29] = \<const0> ;
  assign LMB_Data_Addr_29[30] = \<const0> ;
  assign LMB_Data_Addr_29[31] = \<const0> ;
  assign LMB_Data_Addr_3[0] = \<const0> ;
  assign LMB_Data_Addr_3[1] = \<const0> ;
  assign LMB_Data_Addr_3[2] = \<const0> ;
  assign LMB_Data_Addr_3[3] = \<const0> ;
  assign LMB_Data_Addr_3[4] = \<const0> ;
  assign LMB_Data_Addr_3[5] = \<const0> ;
  assign LMB_Data_Addr_3[6] = \<const0> ;
  assign LMB_Data_Addr_3[7] = \<const0> ;
  assign LMB_Data_Addr_3[8] = \<const0> ;
  assign LMB_Data_Addr_3[9] = \<const0> ;
  assign LMB_Data_Addr_3[10] = \<const0> ;
  assign LMB_Data_Addr_3[11] = \<const0> ;
  assign LMB_Data_Addr_3[12] = \<const0> ;
  assign LMB_Data_Addr_3[13] = \<const0> ;
  assign LMB_Data_Addr_3[14] = \<const0> ;
  assign LMB_Data_Addr_3[15] = \<const0> ;
  assign LMB_Data_Addr_3[16] = \<const0> ;
  assign LMB_Data_Addr_3[17] = \<const0> ;
  assign LMB_Data_Addr_3[18] = \<const0> ;
  assign LMB_Data_Addr_3[19] = \<const0> ;
  assign LMB_Data_Addr_3[20] = \<const0> ;
  assign LMB_Data_Addr_3[21] = \<const0> ;
  assign LMB_Data_Addr_3[22] = \<const0> ;
  assign LMB_Data_Addr_3[23] = \<const0> ;
  assign LMB_Data_Addr_3[24] = \<const0> ;
  assign LMB_Data_Addr_3[25] = \<const0> ;
  assign LMB_Data_Addr_3[26] = \<const0> ;
  assign LMB_Data_Addr_3[27] = \<const0> ;
  assign LMB_Data_Addr_3[28] = \<const0> ;
  assign LMB_Data_Addr_3[29] = \<const0> ;
  assign LMB_Data_Addr_3[30] = \<const0> ;
  assign LMB_Data_Addr_3[31] = \<const0> ;
  assign LMB_Data_Addr_30[0] = \<const0> ;
  assign LMB_Data_Addr_30[1] = \<const0> ;
  assign LMB_Data_Addr_30[2] = \<const0> ;
  assign LMB_Data_Addr_30[3] = \<const0> ;
  assign LMB_Data_Addr_30[4] = \<const0> ;
  assign LMB_Data_Addr_30[5] = \<const0> ;
  assign LMB_Data_Addr_30[6] = \<const0> ;
  assign LMB_Data_Addr_30[7] = \<const0> ;
  assign LMB_Data_Addr_30[8] = \<const0> ;
  assign LMB_Data_Addr_30[9] = \<const0> ;
  assign LMB_Data_Addr_30[10] = \<const0> ;
  assign LMB_Data_Addr_30[11] = \<const0> ;
  assign LMB_Data_Addr_30[12] = \<const0> ;
  assign LMB_Data_Addr_30[13] = \<const0> ;
  assign LMB_Data_Addr_30[14] = \<const0> ;
  assign LMB_Data_Addr_30[15] = \<const0> ;
  assign LMB_Data_Addr_30[16] = \<const0> ;
  assign LMB_Data_Addr_30[17] = \<const0> ;
  assign LMB_Data_Addr_30[18] = \<const0> ;
  assign LMB_Data_Addr_30[19] = \<const0> ;
  assign LMB_Data_Addr_30[20] = \<const0> ;
  assign LMB_Data_Addr_30[21] = \<const0> ;
  assign LMB_Data_Addr_30[22] = \<const0> ;
  assign LMB_Data_Addr_30[23] = \<const0> ;
  assign LMB_Data_Addr_30[24] = \<const0> ;
  assign LMB_Data_Addr_30[25] = \<const0> ;
  assign LMB_Data_Addr_30[26] = \<const0> ;
  assign LMB_Data_Addr_30[27] = \<const0> ;
  assign LMB_Data_Addr_30[28] = \<const0> ;
  assign LMB_Data_Addr_30[29] = \<const0> ;
  assign LMB_Data_Addr_30[30] = \<const0> ;
  assign LMB_Data_Addr_30[31] = \<const0> ;
  assign LMB_Data_Addr_31[0] = \<const0> ;
  assign LMB_Data_Addr_31[1] = \<const0> ;
  assign LMB_Data_Addr_31[2] = \<const0> ;
  assign LMB_Data_Addr_31[3] = \<const0> ;
  assign LMB_Data_Addr_31[4] = \<const0> ;
  assign LMB_Data_Addr_31[5] = \<const0> ;
  assign LMB_Data_Addr_31[6] = \<const0> ;
  assign LMB_Data_Addr_31[7] = \<const0> ;
  assign LMB_Data_Addr_31[8] = \<const0> ;
  assign LMB_Data_Addr_31[9] = \<const0> ;
  assign LMB_Data_Addr_31[10] = \<const0> ;
  assign LMB_Data_Addr_31[11] = \<const0> ;
  assign LMB_Data_Addr_31[12] = \<const0> ;
  assign LMB_Data_Addr_31[13] = \<const0> ;
  assign LMB_Data_Addr_31[14] = \<const0> ;
  assign LMB_Data_Addr_31[15] = \<const0> ;
  assign LMB_Data_Addr_31[16] = \<const0> ;
  assign LMB_Data_Addr_31[17] = \<const0> ;
  assign LMB_Data_Addr_31[18] = \<const0> ;
  assign LMB_Data_Addr_31[19] = \<const0> ;
  assign LMB_Data_Addr_31[20] = \<const0> ;
  assign LMB_Data_Addr_31[21] = \<const0> ;
  assign LMB_Data_Addr_31[22] = \<const0> ;
  assign LMB_Data_Addr_31[23] = \<const0> ;
  assign LMB_Data_Addr_31[24] = \<const0> ;
  assign LMB_Data_Addr_31[25] = \<const0> ;
  assign LMB_Data_Addr_31[26] = \<const0> ;
  assign LMB_Data_Addr_31[27] = \<const0> ;
  assign LMB_Data_Addr_31[28] = \<const0> ;
  assign LMB_Data_Addr_31[29] = \<const0> ;
  assign LMB_Data_Addr_31[30] = \<const0> ;
  assign LMB_Data_Addr_31[31] = \<const0> ;
  assign LMB_Data_Addr_4[0] = \<const0> ;
  assign LMB_Data_Addr_4[1] = \<const0> ;
  assign LMB_Data_Addr_4[2] = \<const0> ;
  assign LMB_Data_Addr_4[3] = \<const0> ;
  assign LMB_Data_Addr_4[4] = \<const0> ;
  assign LMB_Data_Addr_4[5] = \<const0> ;
  assign LMB_Data_Addr_4[6] = \<const0> ;
  assign LMB_Data_Addr_4[7] = \<const0> ;
  assign LMB_Data_Addr_4[8] = \<const0> ;
  assign LMB_Data_Addr_4[9] = \<const0> ;
  assign LMB_Data_Addr_4[10] = \<const0> ;
  assign LMB_Data_Addr_4[11] = \<const0> ;
  assign LMB_Data_Addr_4[12] = \<const0> ;
  assign LMB_Data_Addr_4[13] = \<const0> ;
  assign LMB_Data_Addr_4[14] = \<const0> ;
  assign LMB_Data_Addr_4[15] = \<const0> ;
  assign LMB_Data_Addr_4[16] = \<const0> ;
  assign LMB_Data_Addr_4[17] = \<const0> ;
  assign LMB_Data_Addr_4[18] = \<const0> ;
  assign LMB_Data_Addr_4[19] = \<const0> ;
  assign LMB_Data_Addr_4[20] = \<const0> ;
  assign LMB_Data_Addr_4[21] = \<const0> ;
  assign LMB_Data_Addr_4[22] = \<const0> ;
  assign LMB_Data_Addr_4[23] = \<const0> ;
  assign LMB_Data_Addr_4[24] = \<const0> ;
  assign LMB_Data_Addr_4[25] = \<const0> ;
  assign LMB_Data_Addr_4[26] = \<const0> ;
  assign LMB_Data_Addr_4[27] = \<const0> ;
  assign LMB_Data_Addr_4[28] = \<const0> ;
  assign LMB_Data_Addr_4[29] = \<const0> ;
  assign LMB_Data_Addr_4[30] = \<const0> ;
  assign LMB_Data_Addr_4[31] = \<const0> ;
  assign LMB_Data_Addr_5[0] = \<const0> ;
  assign LMB_Data_Addr_5[1] = \<const0> ;
  assign LMB_Data_Addr_5[2] = \<const0> ;
  assign LMB_Data_Addr_5[3] = \<const0> ;
  assign LMB_Data_Addr_5[4] = \<const0> ;
  assign LMB_Data_Addr_5[5] = \<const0> ;
  assign LMB_Data_Addr_5[6] = \<const0> ;
  assign LMB_Data_Addr_5[7] = \<const0> ;
  assign LMB_Data_Addr_5[8] = \<const0> ;
  assign LMB_Data_Addr_5[9] = \<const0> ;
  assign LMB_Data_Addr_5[10] = \<const0> ;
  assign LMB_Data_Addr_5[11] = \<const0> ;
  assign LMB_Data_Addr_5[12] = \<const0> ;
  assign LMB_Data_Addr_5[13] = \<const0> ;
  assign LMB_Data_Addr_5[14] = \<const0> ;
  assign LMB_Data_Addr_5[15] = \<const0> ;
  assign LMB_Data_Addr_5[16] = \<const0> ;
  assign LMB_Data_Addr_5[17] = \<const0> ;
  assign LMB_Data_Addr_5[18] = \<const0> ;
  assign LMB_Data_Addr_5[19] = \<const0> ;
  assign LMB_Data_Addr_5[20] = \<const0> ;
  assign LMB_Data_Addr_5[21] = \<const0> ;
  assign LMB_Data_Addr_5[22] = \<const0> ;
  assign LMB_Data_Addr_5[23] = \<const0> ;
  assign LMB_Data_Addr_5[24] = \<const0> ;
  assign LMB_Data_Addr_5[25] = \<const0> ;
  assign LMB_Data_Addr_5[26] = \<const0> ;
  assign LMB_Data_Addr_5[27] = \<const0> ;
  assign LMB_Data_Addr_5[28] = \<const0> ;
  assign LMB_Data_Addr_5[29] = \<const0> ;
  assign LMB_Data_Addr_5[30] = \<const0> ;
  assign LMB_Data_Addr_5[31] = \<const0> ;
  assign LMB_Data_Addr_6[0] = \<const0> ;
  assign LMB_Data_Addr_6[1] = \<const0> ;
  assign LMB_Data_Addr_6[2] = \<const0> ;
  assign LMB_Data_Addr_6[3] = \<const0> ;
  assign LMB_Data_Addr_6[4] = \<const0> ;
  assign LMB_Data_Addr_6[5] = \<const0> ;
  assign LMB_Data_Addr_6[6] = \<const0> ;
  assign LMB_Data_Addr_6[7] = \<const0> ;
  assign LMB_Data_Addr_6[8] = \<const0> ;
  assign LMB_Data_Addr_6[9] = \<const0> ;
  assign LMB_Data_Addr_6[10] = \<const0> ;
  assign LMB_Data_Addr_6[11] = \<const0> ;
  assign LMB_Data_Addr_6[12] = \<const0> ;
  assign LMB_Data_Addr_6[13] = \<const0> ;
  assign LMB_Data_Addr_6[14] = \<const0> ;
  assign LMB_Data_Addr_6[15] = \<const0> ;
  assign LMB_Data_Addr_6[16] = \<const0> ;
  assign LMB_Data_Addr_6[17] = \<const0> ;
  assign LMB_Data_Addr_6[18] = \<const0> ;
  assign LMB_Data_Addr_6[19] = \<const0> ;
  assign LMB_Data_Addr_6[20] = \<const0> ;
  assign LMB_Data_Addr_6[21] = \<const0> ;
  assign LMB_Data_Addr_6[22] = \<const0> ;
  assign LMB_Data_Addr_6[23] = \<const0> ;
  assign LMB_Data_Addr_6[24] = \<const0> ;
  assign LMB_Data_Addr_6[25] = \<const0> ;
  assign LMB_Data_Addr_6[26] = \<const0> ;
  assign LMB_Data_Addr_6[27] = \<const0> ;
  assign LMB_Data_Addr_6[28] = \<const0> ;
  assign LMB_Data_Addr_6[29] = \<const0> ;
  assign LMB_Data_Addr_6[30] = \<const0> ;
  assign LMB_Data_Addr_6[31] = \<const0> ;
  assign LMB_Data_Addr_7[0] = \<const0> ;
  assign LMB_Data_Addr_7[1] = \<const0> ;
  assign LMB_Data_Addr_7[2] = \<const0> ;
  assign LMB_Data_Addr_7[3] = \<const0> ;
  assign LMB_Data_Addr_7[4] = \<const0> ;
  assign LMB_Data_Addr_7[5] = \<const0> ;
  assign LMB_Data_Addr_7[6] = \<const0> ;
  assign LMB_Data_Addr_7[7] = \<const0> ;
  assign LMB_Data_Addr_7[8] = \<const0> ;
  assign LMB_Data_Addr_7[9] = \<const0> ;
  assign LMB_Data_Addr_7[10] = \<const0> ;
  assign LMB_Data_Addr_7[11] = \<const0> ;
  assign LMB_Data_Addr_7[12] = \<const0> ;
  assign LMB_Data_Addr_7[13] = \<const0> ;
  assign LMB_Data_Addr_7[14] = \<const0> ;
  assign LMB_Data_Addr_7[15] = \<const0> ;
  assign LMB_Data_Addr_7[16] = \<const0> ;
  assign LMB_Data_Addr_7[17] = \<const0> ;
  assign LMB_Data_Addr_7[18] = \<const0> ;
  assign LMB_Data_Addr_7[19] = \<const0> ;
  assign LMB_Data_Addr_7[20] = \<const0> ;
  assign LMB_Data_Addr_7[21] = \<const0> ;
  assign LMB_Data_Addr_7[22] = \<const0> ;
  assign LMB_Data_Addr_7[23] = \<const0> ;
  assign LMB_Data_Addr_7[24] = \<const0> ;
  assign LMB_Data_Addr_7[25] = \<const0> ;
  assign LMB_Data_Addr_7[26] = \<const0> ;
  assign LMB_Data_Addr_7[27] = \<const0> ;
  assign LMB_Data_Addr_7[28] = \<const0> ;
  assign LMB_Data_Addr_7[29] = \<const0> ;
  assign LMB_Data_Addr_7[30] = \<const0> ;
  assign LMB_Data_Addr_7[31] = \<const0> ;
  assign LMB_Data_Addr_8[0] = \<const0> ;
  assign LMB_Data_Addr_8[1] = \<const0> ;
  assign LMB_Data_Addr_8[2] = \<const0> ;
  assign LMB_Data_Addr_8[3] = \<const0> ;
  assign LMB_Data_Addr_8[4] = \<const0> ;
  assign LMB_Data_Addr_8[5] = \<const0> ;
  assign LMB_Data_Addr_8[6] = \<const0> ;
  assign LMB_Data_Addr_8[7] = \<const0> ;
  assign LMB_Data_Addr_8[8] = \<const0> ;
  assign LMB_Data_Addr_8[9] = \<const0> ;
  assign LMB_Data_Addr_8[10] = \<const0> ;
  assign LMB_Data_Addr_8[11] = \<const0> ;
  assign LMB_Data_Addr_8[12] = \<const0> ;
  assign LMB_Data_Addr_8[13] = \<const0> ;
  assign LMB_Data_Addr_8[14] = \<const0> ;
  assign LMB_Data_Addr_8[15] = \<const0> ;
  assign LMB_Data_Addr_8[16] = \<const0> ;
  assign LMB_Data_Addr_8[17] = \<const0> ;
  assign LMB_Data_Addr_8[18] = \<const0> ;
  assign LMB_Data_Addr_8[19] = \<const0> ;
  assign LMB_Data_Addr_8[20] = \<const0> ;
  assign LMB_Data_Addr_8[21] = \<const0> ;
  assign LMB_Data_Addr_8[22] = \<const0> ;
  assign LMB_Data_Addr_8[23] = \<const0> ;
  assign LMB_Data_Addr_8[24] = \<const0> ;
  assign LMB_Data_Addr_8[25] = \<const0> ;
  assign LMB_Data_Addr_8[26] = \<const0> ;
  assign LMB_Data_Addr_8[27] = \<const0> ;
  assign LMB_Data_Addr_8[28] = \<const0> ;
  assign LMB_Data_Addr_8[29] = \<const0> ;
  assign LMB_Data_Addr_8[30] = \<const0> ;
  assign LMB_Data_Addr_8[31] = \<const0> ;
  assign LMB_Data_Addr_9[0] = \<const0> ;
  assign LMB_Data_Addr_9[1] = \<const0> ;
  assign LMB_Data_Addr_9[2] = \<const0> ;
  assign LMB_Data_Addr_9[3] = \<const0> ;
  assign LMB_Data_Addr_9[4] = \<const0> ;
  assign LMB_Data_Addr_9[5] = \<const0> ;
  assign LMB_Data_Addr_9[6] = \<const0> ;
  assign LMB_Data_Addr_9[7] = \<const0> ;
  assign LMB_Data_Addr_9[8] = \<const0> ;
  assign LMB_Data_Addr_9[9] = \<const0> ;
  assign LMB_Data_Addr_9[10] = \<const0> ;
  assign LMB_Data_Addr_9[11] = \<const0> ;
  assign LMB_Data_Addr_9[12] = \<const0> ;
  assign LMB_Data_Addr_9[13] = \<const0> ;
  assign LMB_Data_Addr_9[14] = \<const0> ;
  assign LMB_Data_Addr_9[15] = \<const0> ;
  assign LMB_Data_Addr_9[16] = \<const0> ;
  assign LMB_Data_Addr_9[17] = \<const0> ;
  assign LMB_Data_Addr_9[18] = \<const0> ;
  assign LMB_Data_Addr_9[19] = \<const0> ;
  assign LMB_Data_Addr_9[20] = \<const0> ;
  assign LMB_Data_Addr_9[21] = \<const0> ;
  assign LMB_Data_Addr_9[22] = \<const0> ;
  assign LMB_Data_Addr_9[23] = \<const0> ;
  assign LMB_Data_Addr_9[24] = \<const0> ;
  assign LMB_Data_Addr_9[25] = \<const0> ;
  assign LMB_Data_Addr_9[26] = \<const0> ;
  assign LMB_Data_Addr_9[27] = \<const0> ;
  assign LMB_Data_Addr_9[28] = \<const0> ;
  assign LMB_Data_Addr_9[29] = \<const0> ;
  assign LMB_Data_Addr_9[30] = \<const0> ;
  assign LMB_Data_Addr_9[31] = \<const0> ;
  assign LMB_Data_Write_0[0] = \<const0> ;
  assign LMB_Data_Write_0[1] = \<const0> ;
  assign LMB_Data_Write_0[2] = \<const0> ;
  assign LMB_Data_Write_0[3] = \<const0> ;
  assign LMB_Data_Write_0[4] = \<const0> ;
  assign LMB_Data_Write_0[5] = \<const0> ;
  assign LMB_Data_Write_0[6] = \<const0> ;
  assign LMB_Data_Write_0[7] = \<const0> ;
  assign LMB_Data_Write_0[8] = \<const0> ;
  assign LMB_Data_Write_0[9] = \<const0> ;
  assign LMB_Data_Write_0[10] = \<const0> ;
  assign LMB_Data_Write_0[11] = \<const0> ;
  assign LMB_Data_Write_0[12] = \<const0> ;
  assign LMB_Data_Write_0[13] = \<const0> ;
  assign LMB_Data_Write_0[14] = \<const0> ;
  assign LMB_Data_Write_0[15] = \<const0> ;
  assign LMB_Data_Write_0[16] = \<const0> ;
  assign LMB_Data_Write_0[17] = \<const0> ;
  assign LMB_Data_Write_0[18] = \<const0> ;
  assign LMB_Data_Write_0[19] = \<const0> ;
  assign LMB_Data_Write_0[20] = \<const0> ;
  assign LMB_Data_Write_0[21] = \<const0> ;
  assign LMB_Data_Write_0[22] = \<const0> ;
  assign LMB_Data_Write_0[23] = \<const0> ;
  assign LMB_Data_Write_0[24] = \<const0> ;
  assign LMB_Data_Write_0[25] = \<const0> ;
  assign LMB_Data_Write_0[26] = \<const0> ;
  assign LMB_Data_Write_0[27] = \<const0> ;
  assign LMB_Data_Write_0[28] = \<const0> ;
  assign LMB_Data_Write_0[29] = \<const0> ;
  assign LMB_Data_Write_0[30] = \<const0> ;
  assign LMB_Data_Write_0[31] = \<const0> ;
  assign LMB_Data_Write_1[0] = \<const0> ;
  assign LMB_Data_Write_1[1] = \<const0> ;
  assign LMB_Data_Write_1[2] = \<const0> ;
  assign LMB_Data_Write_1[3] = \<const0> ;
  assign LMB_Data_Write_1[4] = \<const0> ;
  assign LMB_Data_Write_1[5] = \<const0> ;
  assign LMB_Data_Write_1[6] = \<const0> ;
  assign LMB_Data_Write_1[7] = \<const0> ;
  assign LMB_Data_Write_1[8] = \<const0> ;
  assign LMB_Data_Write_1[9] = \<const0> ;
  assign LMB_Data_Write_1[10] = \<const0> ;
  assign LMB_Data_Write_1[11] = \<const0> ;
  assign LMB_Data_Write_1[12] = \<const0> ;
  assign LMB_Data_Write_1[13] = \<const0> ;
  assign LMB_Data_Write_1[14] = \<const0> ;
  assign LMB_Data_Write_1[15] = \<const0> ;
  assign LMB_Data_Write_1[16] = \<const0> ;
  assign LMB_Data_Write_1[17] = \<const0> ;
  assign LMB_Data_Write_1[18] = \<const0> ;
  assign LMB_Data_Write_1[19] = \<const0> ;
  assign LMB_Data_Write_1[20] = \<const0> ;
  assign LMB_Data_Write_1[21] = \<const0> ;
  assign LMB_Data_Write_1[22] = \<const0> ;
  assign LMB_Data_Write_1[23] = \<const0> ;
  assign LMB_Data_Write_1[24] = \<const0> ;
  assign LMB_Data_Write_1[25] = \<const0> ;
  assign LMB_Data_Write_1[26] = \<const0> ;
  assign LMB_Data_Write_1[27] = \<const0> ;
  assign LMB_Data_Write_1[28] = \<const0> ;
  assign LMB_Data_Write_1[29] = \<const0> ;
  assign LMB_Data_Write_1[30] = \<const0> ;
  assign LMB_Data_Write_1[31] = \<const0> ;
  assign LMB_Data_Write_10[0] = \<const0> ;
  assign LMB_Data_Write_10[1] = \<const0> ;
  assign LMB_Data_Write_10[2] = \<const0> ;
  assign LMB_Data_Write_10[3] = \<const0> ;
  assign LMB_Data_Write_10[4] = \<const0> ;
  assign LMB_Data_Write_10[5] = \<const0> ;
  assign LMB_Data_Write_10[6] = \<const0> ;
  assign LMB_Data_Write_10[7] = \<const0> ;
  assign LMB_Data_Write_10[8] = \<const0> ;
  assign LMB_Data_Write_10[9] = \<const0> ;
  assign LMB_Data_Write_10[10] = \<const0> ;
  assign LMB_Data_Write_10[11] = \<const0> ;
  assign LMB_Data_Write_10[12] = \<const0> ;
  assign LMB_Data_Write_10[13] = \<const0> ;
  assign LMB_Data_Write_10[14] = \<const0> ;
  assign LMB_Data_Write_10[15] = \<const0> ;
  assign LMB_Data_Write_10[16] = \<const0> ;
  assign LMB_Data_Write_10[17] = \<const0> ;
  assign LMB_Data_Write_10[18] = \<const0> ;
  assign LMB_Data_Write_10[19] = \<const0> ;
  assign LMB_Data_Write_10[20] = \<const0> ;
  assign LMB_Data_Write_10[21] = \<const0> ;
  assign LMB_Data_Write_10[22] = \<const0> ;
  assign LMB_Data_Write_10[23] = \<const0> ;
  assign LMB_Data_Write_10[24] = \<const0> ;
  assign LMB_Data_Write_10[25] = \<const0> ;
  assign LMB_Data_Write_10[26] = \<const0> ;
  assign LMB_Data_Write_10[27] = \<const0> ;
  assign LMB_Data_Write_10[28] = \<const0> ;
  assign LMB_Data_Write_10[29] = \<const0> ;
  assign LMB_Data_Write_10[30] = \<const0> ;
  assign LMB_Data_Write_10[31] = \<const0> ;
  assign LMB_Data_Write_11[0] = \<const0> ;
  assign LMB_Data_Write_11[1] = \<const0> ;
  assign LMB_Data_Write_11[2] = \<const0> ;
  assign LMB_Data_Write_11[3] = \<const0> ;
  assign LMB_Data_Write_11[4] = \<const0> ;
  assign LMB_Data_Write_11[5] = \<const0> ;
  assign LMB_Data_Write_11[6] = \<const0> ;
  assign LMB_Data_Write_11[7] = \<const0> ;
  assign LMB_Data_Write_11[8] = \<const0> ;
  assign LMB_Data_Write_11[9] = \<const0> ;
  assign LMB_Data_Write_11[10] = \<const0> ;
  assign LMB_Data_Write_11[11] = \<const0> ;
  assign LMB_Data_Write_11[12] = \<const0> ;
  assign LMB_Data_Write_11[13] = \<const0> ;
  assign LMB_Data_Write_11[14] = \<const0> ;
  assign LMB_Data_Write_11[15] = \<const0> ;
  assign LMB_Data_Write_11[16] = \<const0> ;
  assign LMB_Data_Write_11[17] = \<const0> ;
  assign LMB_Data_Write_11[18] = \<const0> ;
  assign LMB_Data_Write_11[19] = \<const0> ;
  assign LMB_Data_Write_11[20] = \<const0> ;
  assign LMB_Data_Write_11[21] = \<const0> ;
  assign LMB_Data_Write_11[22] = \<const0> ;
  assign LMB_Data_Write_11[23] = \<const0> ;
  assign LMB_Data_Write_11[24] = \<const0> ;
  assign LMB_Data_Write_11[25] = \<const0> ;
  assign LMB_Data_Write_11[26] = \<const0> ;
  assign LMB_Data_Write_11[27] = \<const0> ;
  assign LMB_Data_Write_11[28] = \<const0> ;
  assign LMB_Data_Write_11[29] = \<const0> ;
  assign LMB_Data_Write_11[30] = \<const0> ;
  assign LMB_Data_Write_11[31] = \<const0> ;
  assign LMB_Data_Write_12[0] = \<const0> ;
  assign LMB_Data_Write_12[1] = \<const0> ;
  assign LMB_Data_Write_12[2] = \<const0> ;
  assign LMB_Data_Write_12[3] = \<const0> ;
  assign LMB_Data_Write_12[4] = \<const0> ;
  assign LMB_Data_Write_12[5] = \<const0> ;
  assign LMB_Data_Write_12[6] = \<const0> ;
  assign LMB_Data_Write_12[7] = \<const0> ;
  assign LMB_Data_Write_12[8] = \<const0> ;
  assign LMB_Data_Write_12[9] = \<const0> ;
  assign LMB_Data_Write_12[10] = \<const0> ;
  assign LMB_Data_Write_12[11] = \<const0> ;
  assign LMB_Data_Write_12[12] = \<const0> ;
  assign LMB_Data_Write_12[13] = \<const0> ;
  assign LMB_Data_Write_12[14] = \<const0> ;
  assign LMB_Data_Write_12[15] = \<const0> ;
  assign LMB_Data_Write_12[16] = \<const0> ;
  assign LMB_Data_Write_12[17] = \<const0> ;
  assign LMB_Data_Write_12[18] = \<const0> ;
  assign LMB_Data_Write_12[19] = \<const0> ;
  assign LMB_Data_Write_12[20] = \<const0> ;
  assign LMB_Data_Write_12[21] = \<const0> ;
  assign LMB_Data_Write_12[22] = \<const0> ;
  assign LMB_Data_Write_12[23] = \<const0> ;
  assign LMB_Data_Write_12[24] = \<const0> ;
  assign LMB_Data_Write_12[25] = \<const0> ;
  assign LMB_Data_Write_12[26] = \<const0> ;
  assign LMB_Data_Write_12[27] = \<const0> ;
  assign LMB_Data_Write_12[28] = \<const0> ;
  assign LMB_Data_Write_12[29] = \<const0> ;
  assign LMB_Data_Write_12[30] = \<const0> ;
  assign LMB_Data_Write_12[31] = \<const0> ;
  assign LMB_Data_Write_13[0] = \<const0> ;
  assign LMB_Data_Write_13[1] = \<const0> ;
  assign LMB_Data_Write_13[2] = \<const0> ;
  assign LMB_Data_Write_13[3] = \<const0> ;
  assign LMB_Data_Write_13[4] = \<const0> ;
  assign LMB_Data_Write_13[5] = \<const0> ;
  assign LMB_Data_Write_13[6] = \<const0> ;
  assign LMB_Data_Write_13[7] = \<const0> ;
  assign LMB_Data_Write_13[8] = \<const0> ;
  assign LMB_Data_Write_13[9] = \<const0> ;
  assign LMB_Data_Write_13[10] = \<const0> ;
  assign LMB_Data_Write_13[11] = \<const0> ;
  assign LMB_Data_Write_13[12] = \<const0> ;
  assign LMB_Data_Write_13[13] = \<const0> ;
  assign LMB_Data_Write_13[14] = \<const0> ;
  assign LMB_Data_Write_13[15] = \<const0> ;
  assign LMB_Data_Write_13[16] = \<const0> ;
  assign LMB_Data_Write_13[17] = \<const0> ;
  assign LMB_Data_Write_13[18] = \<const0> ;
  assign LMB_Data_Write_13[19] = \<const0> ;
  assign LMB_Data_Write_13[20] = \<const0> ;
  assign LMB_Data_Write_13[21] = \<const0> ;
  assign LMB_Data_Write_13[22] = \<const0> ;
  assign LMB_Data_Write_13[23] = \<const0> ;
  assign LMB_Data_Write_13[24] = \<const0> ;
  assign LMB_Data_Write_13[25] = \<const0> ;
  assign LMB_Data_Write_13[26] = \<const0> ;
  assign LMB_Data_Write_13[27] = \<const0> ;
  assign LMB_Data_Write_13[28] = \<const0> ;
  assign LMB_Data_Write_13[29] = \<const0> ;
  assign LMB_Data_Write_13[30] = \<const0> ;
  assign LMB_Data_Write_13[31] = \<const0> ;
  assign LMB_Data_Write_14[0] = \<const0> ;
  assign LMB_Data_Write_14[1] = \<const0> ;
  assign LMB_Data_Write_14[2] = \<const0> ;
  assign LMB_Data_Write_14[3] = \<const0> ;
  assign LMB_Data_Write_14[4] = \<const0> ;
  assign LMB_Data_Write_14[5] = \<const0> ;
  assign LMB_Data_Write_14[6] = \<const0> ;
  assign LMB_Data_Write_14[7] = \<const0> ;
  assign LMB_Data_Write_14[8] = \<const0> ;
  assign LMB_Data_Write_14[9] = \<const0> ;
  assign LMB_Data_Write_14[10] = \<const0> ;
  assign LMB_Data_Write_14[11] = \<const0> ;
  assign LMB_Data_Write_14[12] = \<const0> ;
  assign LMB_Data_Write_14[13] = \<const0> ;
  assign LMB_Data_Write_14[14] = \<const0> ;
  assign LMB_Data_Write_14[15] = \<const0> ;
  assign LMB_Data_Write_14[16] = \<const0> ;
  assign LMB_Data_Write_14[17] = \<const0> ;
  assign LMB_Data_Write_14[18] = \<const0> ;
  assign LMB_Data_Write_14[19] = \<const0> ;
  assign LMB_Data_Write_14[20] = \<const0> ;
  assign LMB_Data_Write_14[21] = \<const0> ;
  assign LMB_Data_Write_14[22] = \<const0> ;
  assign LMB_Data_Write_14[23] = \<const0> ;
  assign LMB_Data_Write_14[24] = \<const0> ;
  assign LMB_Data_Write_14[25] = \<const0> ;
  assign LMB_Data_Write_14[26] = \<const0> ;
  assign LMB_Data_Write_14[27] = \<const0> ;
  assign LMB_Data_Write_14[28] = \<const0> ;
  assign LMB_Data_Write_14[29] = \<const0> ;
  assign LMB_Data_Write_14[30] = \<const0> ;
  assign LMB_Data_Write_14[31] = \<const0> ;
  assign LMB_Data_Write_15[0] = \<const0> ;
  assign LMB_Data_Write_15[1] = \<const0> ;
  assign LMB_Data_Write_15[2] = \<const0> ;
  assign LMB_Data_Write_15[3] = \<const0> ;
  assign LMB_Data_Write_15[4] = \<const0> ;
  assign LMB_Data_Write_15[5] = \<const0> ;
  assign LMB_Data_Write_15[6] = \<const0> ;
  assign LMB_Data_Write_15[7] = \<const0> ;
  assign LMB_Data_Write_15[8] = \<const0> ;
  assign LMB_Data_Write_15[9] = \<const0> ;
  assign LMB_Data_Write_15[10] = \<const0> ;
  assign LMB_Data_Write_15[11] = \<const0> ;
  assign LMB_Data_Write_15[12] = \<const0> ;
  assign LMB_Data_Write_15[13] = \<const0> ;
  assign LMB_Data_Write_15[14] = \<const0> ;
  assign LMB_Data_Write_15[15] = \<const0> ;
  assign LMB_Data_Write_15[16] = \<const0> ;
  assign LMB_Data_Write_15[17] = \<const0> ;
  assign LMB_Data_Write_15[18] = \<const0> ;
  assign LMB_Data_Write_15[19] = \<const0> ;
  assign LMB_Data_Write_15[20] = \<const0> ;
  assign LMB_Data_Write_15[21] = \<const0> ;
  assign LMB_Data_Write_15[22] = \<const0> ;
  assign LMB_Data_Write_15[23] = \<const0> ;
  assign LMB_Data_Write_15[24] = \<const0> ;
  assign LMB_Data_Write_15[25] = \<const0> ;
  assign LMB_Data_Write_15[26] = \<const0> ;
  assign LMB_Data_Write_15[27] = \<const0> ;
  assign LMB_Data_Write_15[28] = \<const0> ;
  assign LMB_Data_Write_15[29] = \<const0> ;
  assign LMB_Data_Write_15[30] = \<const0> ;
  assign LMB_Data_Write_15[31] = \<const0> ;
  assign LMB_Data_Write_16[0] = \<const0> ;
  assign LMB_Data_Write_16[1] = \<const0> ;
  assign LMB_Data_Write_16[2] = \<const0> ;
  assign LMB_Data_Write_16[3] = \<const0> ;
  assign LMB_Data_Write_16[4] = \<const0> ;
  assign LMB_Data_Write_16[5] = \<const0> ;
  assign LMB_Data_Write_16[6] = \<const0> ;
  assign LMB_Data_Write_16[7] = \<const0> ;
  assign LMB_Data_Write_16[8] = \<const0> ;
  assign LMB_Data_Write_16[9] = \<const0> ;
  assign LMB_Data_Write_16[10] = \<const0> ;
  assign LMB_Data_Write_16[11] = \<const0> ;
  assign LMB_Data_Write_16[12] = \<const0> ;
  assign LMB_Data_Write_16[13] = \<const0> ;
  assign LMB_Data_Write_16[14] = \<const0> ;
  assign LMB_Data_Write_16[15] = \<const0> ;
  assign LMB_Data_Write_16[16] = \<const0> ;
  assign LMB_Data_Write_16[17] = \<const0> ;
  assign LMB_Data_Write_16[18] = \<const0> ;
  assign LMB_Data_Write_16[19] = \<const0> ;
  assign LMB_Data_Write_16[20] = \<const0> ;
  assign LMB_Data_Write_16[21] = \<const0> ;
  assign LMB_Data_Write_16[22] = \<const0> ;
  assign LMB_Data_Write_16[23] = \<const0> ;
  assign LMB_Data_Write_16[24] = \<const0> ;
  assign LMB_Data_Write_16[25] = \<const0> ;
  assign LMB_Data_Write_16[26] = \<const0> ;
  assign LMB_Data_Write_16[27] = \<const0> ;
  assign LMB_Data_Write_16[28] = \<const0> ;
  assign LMB_Data_Write_16[29] = \<const0> ;
  assign LMB_Data_Write_16[30] = \<const0> ;
  assign LMB_Data_Write_16[31] = \<const0> ;
  assign LMB_Data_Write_17[0] = \<const0> ;
  assign LMB_Data_Write_17[1] = \<const0> ;
  assign LMB_Data_Write_17[2] = \<const0> ;
  assign LMB_Data_Write_17[3] = \<const0> ;
  assign LMB_Data_Write_17[4] = \<const0> ;
  assign LMB_Data_Write_17[5] = \<const0> ;
  assign LMB_Data_Write_17[6] = \<const0> ;
  assign LMB_Data_Write_17[7] = \<const0> ;
  assign LMB_Data_Write_17[8] = \<const0> ;
  assign LMB_Data_Write_17[9] = \<const0> ;
  assign LMB_Data_Write_17[10] = \<const0> ;
  assign LMB_Data_Write_17[11] = \<const0> ;
  assign LMB_Data_Write_17[12] = \<const0> ;
  assign LMB_Data_Write_17[13] = \<const0> ;
  assign LMB_Data_Write_17[14] = \<const0> ;
  assign LMB_Data_Write_17[15] = \<const0> ;
  assign LMB_Data_Write_17[16] = \<const0> ;
  assign LMB_Data_Write_17[17] = \<const0> ;
  assign LMB_Data_Write_17[18] = \<const0> ;
  assign LMB_Data_Write_17[19] = \<const0> ;
  assign LMB_Data_Write_17[20] = \<const0> ;
  assign LMB_Data_Write_17[21] = \<const0> ;
  assign LMB_Data_Write_17[22] = \<const0> ;
  assign LMB_Data_Write_17[23] = \<const0> ;
  assign LMB_Data_Write_17[24] = \<const0> ;
  assign LMB_Data_Write_17[25] = \<const0> ;
  assign LMB_Data_Write_17[26] = \<const0> ;
  assign LMB_Data_Write_17[27] = \<const0> ;
  assign LMB_Data_Write_17[28] = \<const0> ;
  assign LMB_Data_Write_17[29] = \<const0> ;
  assign LMB_Data_Write_17[30] = \<const0> ;
  assign LMB_Data_Write_17[31] = \<const0> ;
  assign LMB_Data_Write_18[0] = \<const0> ;
  assign LMB_Data_Write_18[1] = \<const0> ;
  assign LMB_Data_Write_18[2] = \<const0> ;
  assign LMB_Data_Write_18[3] = \<const0> ;
  assign LMB_Data_Write_18[4] = \<const0> ;
  assign LMB_Data_Write_18[5] = \<const0> ;
  assign LMB_Data_Write_18[6] = \<const0> ;
  assign LMB_Data_Write_18[7] = \<const0> ;
  assign LMB_Data_Write_18[8] = \<const0> ;
  assign LMB_Data_Write_18[9] = \<const0> ;
  assign LMB_Data_Write_18[10] = \<const0> ;
  assign LMB_Data_Write_18[11] = \<const0> ;
  assign LMB_Data_Write_18[12] = \<const0> ;
  assign LMB_Data_Write_18[13] = \<const0> ;
  assign LMB_Data_Write_18[14] = \<const0> ;
  assign LMB_Data_Write_18[15] = \<const0> ;
  assign LMB_Data_Write_18[16] = \<const0> ;
  assign LMB_Data_Write_18[17] = \<const0> ;
  assign LMB_Data_Write_18[18] = \<const0> ;
  assign LMB_Data_Write_18[19] = \<const0> ;
  assign LMB_Data_Write_18[20] = \<const0> ;
  assign LMB_Data_Write_18[21] = \<const0> ;
  assign LMB_Data_Write_18[22] = \<const0> ;
  assign LMB_Data_Write_18[23] = \<const0> ;
  assign LMB_Data_Write_18[24] = \<const0> ;
  assign LMB_Data_Write_18[25] = \<const0> ;
  assign LMB_Data_Write_18[26] = \<const0> ;
  assign LMB_Data_Write_18[27] = \<const0> ;
  assign LMB_Data_Write_18[28] = \<const0> ;
  assign LMB_Data_Write_18[29] = \<const0> ;
  assign LMB_Data_Write_18[30] = \<const0> ;
  assign LMB_Data_Write_18[31] = \<const0> ;
  assign LMB_Data_Write_19[0] = \<const0> ;
  assign LMB_Data_Write_19[1] = \<const0> ;
  assign LMB_Data_Write_19[2] = \<const0> ;
  assign LMB_Data_Write_19[3] = \<const0> ;
  assign LMB_Data_Write_19[4] = \<const0> ;
  assign LMB_Data_Write_19[5] = \<const0> ;
  assign LMB_Data_Write_19[6] = \<const0> ;
  assign LMB_Data_Write_19[7] = \<const0> ;
  assign LMB_Data_Write_19[8] = \<const0> ;
  assign LMB_Data_Write_19[9] = \<const0> ;
  assign LMB_Data_Write_19[10] = \<const0> ;
  assign LMB_Data_Write_19[11] = \<const0> ;
  assign LMB_Data_Write_19[12] = \<const0> ;
  assign LMB_Data_Write_19[13] = \<const0> ;
  assign LMB_Data_Write_19[14] = \<const0> ;
  assign LMB_Data_Write_19[15] = \<const0> ;
  assign LMB_Data_Write_19[16] = \<const0> ;
  assign LMB_Data_Write_19[17] = \<const0> ;
  assign LMB_Data_Write_19[18] = \<const0> ;
  assign LMB_Data_Write_19[19] = \<const0> ;
  assign LMB_Data_Write_19[20] = \<const0> ;
  assign LMB_Data_Write_19[21] = \<const0> ;
  assign LMB_Data_Write_19[22] = \<const0> ;
  assign LMB_Data_Write_19[23] = \<const0> ;
  assign LMB_Data_Write_19[24] = \<const0> ;
  assign LMB_Data_Write_19[25] = \<const0> ;
  assign LMB_Data_Write_19[26] = \<const0> ;
  assign LMB_Data_Write_19[27] = \<const0> ;
  assign LMB_Data_Write_19[28] = \<const0> ;
  assign LMB_Data_Write_19[29] = \<const0> ;
  assign LMB_Data_Write_19[30] = \<const0> ;
  assign LMB_Data_Write_19[31] = \<const0> ;
  assign LMB_Data_Write_2[0] = \<const0> ;
  assign LMB_Data_Write_2[1] = \<const0> ;
  assign LMB_Data_Write_2[2] = \<const0> ;
  assign LMB_Data_Write_2[3] = \<const0> ;
  assign LMB_Data_Write_2[4] = \<const0> ;
  assign LMB_Data_Write_2[5] = \<const0> ;
  assign LMB_Data_Write_2[6] = \<const0> ;
  assign LMB_Data_Write_2[7] = \<const0> ;
  assign LMB_Data_Write_2[8] = \<const0> ;
  assign LMB_Data_Write_2[9] = \<const0> ;
  assign LMB_Data_Write_2[10] = \<const0> ;
  assign LMB_Data_Write_2[11] = \<const0> ;
  assign LMB_Data_Write_2[12] = \<const0> ;
  assign LMB_Data_Write_2[13] = \<const0> ;
  assign LMB_Data_Write_2[14] = \<const0> ;
  assign LMB_Data_Write_2[15] = \<const0> ;
  assign LMB_Data_Write_2[16] = \<const0> ;
  assign LMB_Data_Write_2[17] = \<const0> ;
  assign LMB_Data_Write_2[18] = \<const0> ;
  assign LMB_Data_Write_2[19] = \<const0> ;
  assign LMB_Data_Write_2[20] = \<const0> ;
  assign LMB_Data_Write_2[21] = \<const0> ;
  assign LMB_Data_Write_2[22] = \<const0> ;
  assign LMB_Data_Write_2[23] = \<const0> ;
  assign LMB_Data_Write_2[24] = \<const0> ;
  assign LMB_Data_Write_2[25] = \<const0> ;
  assign LMB_Data_Write_2[26] = \<const0> ;
  assign LMB_Data_Write_2[27] = \<const0> ;
  assign LMB_Data_Write_2[28] = \<const0> ;
  assign LMB_Data_Write_2[29] = \<const0> ;
  assign LMB_Data_Write_2[30] = \<const0> ;
  assign LMB_Data_Write_2[31] = \<const0> ;
  assign LMB_Data_Write_20[0] = \<const0> ;
  assign LMB_Data_Write_20[1] = \<const0> ;
  assign LMB_Data_Write_20[2] = \<const0> ;
  assign LMB_Data_Write_20[3] = \<const0> ;
  assign LMB_Data_Write_20[4] = \<const0> ;
  assign LMB_Data_Write_20[5] = \<const0> ;
  assign LMB_Data_Write_20[6] = \<const0> ;
  assign LMB_Data_Write_20[7] = \<const0> ;
  assign LMB_Data_Write_20[8] = \<const0> ;
  assign LMB_Data_Write_20[9] = \<const0> ;
  assign LMB_Data_Write_20[10] = \<const0> ;
  assign LMB_Data_Write_20[11] = \<const0> ;
  assign LMB_Data_Write_20[12] = \<const0> ;
  assign LMB_Data_Write_20[13] = \<const0> ;
  assign LMB_Data_Write_20[14] = \<const0> ;
  assign LMB_Data_Write_20[15] = \<const0> ;
  assign LMB_Data_Write_20[16] = \<const0> ;
  assign LMB_Data_Write_20[17] = \<const0> ;
  assign LMB_Data_Write_20[18] = \<const0> ;
  assign LMB_Data_Write_20[19] = \<const0> ;
  assign LMB_Data_Write_20[20] = \<const0> ;
  assign LMB_Data_Write_20[21] = \<const0> ;
  assign LMB_Data_Write_20[22] = \<const0> ;
  assign LMB_Data_Write_20[23] = \<const0> ;
  assign LMB_Data_Write_20[24] = \<const0> ;
  assign LMB_Data_Write_20[25] = \<const0> ;
  assign LMB_Data_Write_20[26] = \<const0> ;
  assign LMB_Data_Write_20[27] = \<const0> ;
  assign LMB_Data_Write_20[28] = \<const0> ;
  assign LMB_Data_Write_20[29] = \<const0> ;
  assign LMB_Data_Write_20[30] = \<const0> ;
  assign LMB_Data_Write_20[31] = \<const0> ;
  assign LMB_Data_Write_21[0] = \<const0> ;
  assign LMB_Data_Write_21[1] = \<const0> ;
  assign LMB_Data_Write_21[2] = \<const0> ;
  assign LMB_Data_Write_21[3] = \<const0> ;
  assign LMB_Data_Write_21[4] = \<const0> ;
  assign LMB_Data_Write_21[5] = \<const0> ;
  assign LMB_Data_Write_21[6] = \<const0> ;
  assign LMB_Data_Write_21[7] = \<const0> ;
  assign LMB_Data_Write_21[8] = \<const0> ;
  assign LMB_Data_Write_21[9] = \<const0> ;
  assign LMB_Data_Write_21[10] = \<const0> ;
  assign LMB_Data_Write_21[11] = \<const0> ;
  assign LMB_Data_Write_21[12] = \<const0> ;
  assign LMB_Data_Write_21[13] = \<const0> ;
  assign LMB_Data_Write_21[14] = \<const0> ;
  assign LMB_Data_Write_21[15] = \<const0> ;
  assign LMB_Data_Write_21[16] = \<const0> ;
  assign LMB_Data_Write_21[17] = \<const0> ;
  assign LMB_Data_Write_21[18] = \<const0> ;
  assign LMB_Data_Write_21[19] = \<const0> ;
  assign LMB_Data_Write_21[20] = \<const0> ;
  assign LMB_Data_Write_21[21] = \<const0> ;
  assign LMB_Data_Write_21[22] = \<const0> ;
  assign LMB_Data_Write_21[23] = \<const0> ;
  assign LMB_Data_Write_21[24] = \<const0> ;
  assign LMB_Data_Write_21[25] = \<const0> ;
  assign LMB_Data_Write_21[26] = \<const0> ;
  assign LMB_Data_Write_21[27] = \<const0> ;
  assign LMB_Data_Write_21[28] = \<const0> ;
  assign LMB_Data_Write_21[29] = \<const0> ;
  assign LMB_Data_Write_21[30] = \<const0> ;
  assign LMB_Data_Write_21[31] = \<const0> ;
  assign LMB_Data_Write_22[0] = \<const0> ;
  assign LMB_Data_Write_22[1] = \<const0> ;
  assign LMB_Data_Write_22[2] = \<const0> ;
  assign LMB_Data_Write_22[3] = \<const0> ;
  assign LMB_Data_Write_22[4] = \<const0> ;
  assign LMB_Data_Write_22[5] = \<const0> ;
  assign LMB_Data_Write_22[6] = \<const0> ;
  assign LMB_Data_Write_22[7] = \<const0> ;
  assign LMB_Data_Write_22[8] = \<const0> ;
  assign LMB_Data_Write_22[9] = \<const0> ;
  assign LMB_Data_Write_22[10] = \<const0> ;
  assign LMB_Data_Write_22[11] = \<const0> ;
  assign LMB_Data_Write_22[12] = \<const0> ;
  assign LMB_Data_Write_22[13] = \<const0> ;
  assign LMB_Data_Write_22[14] = \<const0> ;
  assign LMB_Data_Write_22[15] = \<const0> ;
  assign LMB_Data_Write_22[16] = \<const0> ;
  assign LMB_Data_Write_22[17] = \<const0> ;
  assign LMB_Data_Write_22[18] = \<const0> ;
  assign LMB_Data_Write_22[19] = \<const0> ;
  assign LMB_Data_Write_22[20] = \<const0> ;
  assign LMB_Data_Write_22[21] = \<const0> ;
  assign LMB_Data_Write_22[22] = \<const0> ;
  assign LMB_Data_Write_22[23] = \<const0> ;
  assign LMB_Data_Write_22[24] = \<const0> ;
  assign LMB_Data_Write_22[25] = \<const0> ;
  assign LMB_Data_Write_22[26] = \<const0> ;
  assign LMB_Data_Write_22[27] = \<const0> ;
  assign LMB_Data_Write_22[28] = \<const0> ;
  assign LMB_Data_Write_22[29] = \<const0> ;
  assign LMB_Data_Write_22[30] = \<const0> ;
  assign LMB_Data_Write_22[31] = \<const0> ;
  assign LMB_Data_Write_23[0] = \<const0> ;
  assign LMB_Data_Write_23[1] = \<const0> ;
  assign LMB_Data_Write_23[2] = \<const0> ;
  assign LMB_Data_Write_23[3] = \<const0> ;
  assign LMB_Data_Write_23[4] = \<const0> ;
  assign LMB_Data_Write_23[5] = \<const0> ;
  assign LMB_Data_Write_23[6] = \<const0> ;
  assign LMB_Data_Write_23[7] = \<const0> ;
  assign LMB_Data_Write_23[8] = \<const0> ;
  assign LMB_Data_Write_23[9] = \<const0> ;
  assign LMB_Data_Write_23[10] = \<const0> ;
  assign LMB_Data_Write_23[11] = \<const0> ;
  assign LMB_Data_Write_23[12] = \<const0> ;
  assign LMB_Data_Write_23[13] = \<const0> ;
  assign LMB_Data_Write_23[14] = \<const0> ;
  assign LMB_Data_Write_23[15] = \<const0> ;
  assign LMB_Data_Write_23[16] = \<const0> ;
  assign LMB_Data_Write_23[17] = \<const0> ;
  assign LMB_Data_Write_23[18] = \<const0> ;
  assign LMB_Data_Write_23[19] = \<const0> ;
  assign LMB_Data_Write_23[20] = \<const0> ;
  assign LMB_Data_Write_23[21] = \<const0> ;
  assign LMB_Data_Write_23[22] = \<const0> ;
  assign LMB_Data_Write_23[23] = \<const0> ;
  assign LMB_Data_Write_23[24] = \<const0> ;
  assign LMB_Data_Write_23[25] = \<const0> ;
  assign LMB_Data_Write_23[26] = \<const0> ;
  assign LMB_Data_Write_23[27] = \<const0> ;
  assign LMB_Data_Write_23[28] = \<const0> ;
  assign LMB_Data_Write_23[29] = \<const0> ;
  assign LMB_Data_Write_23[30] = \<const0> ;
  assign LMB_Data_Write_23[31] = \<const0> ;
  assign LMB_Data_Write_24[0] = \<const0> ;
  assign LMB_Data_Write_24[1] = \<const0> ;
  assign LMB_Data_Write_24[2] = \<const0> ;
  assign LMB_Data_Write_24[3] = \<const0> ;
  assign LMB_Data_Write_24[4] = \<const0> ;
  assign LMB_Data_Write_24[5] = \<const0> ;
  assign LMB_Data_Write_24[6] = \<const0> ;
  assign LMB_Data_Write_24[7] = \<const0> ;
  assign LMB_Data_Write_24[8] = \<const0> ;
  assign LMB_Data_Write_24[9] = \<const0> ;
  assign LMB_Data_Write_24[10] = \<const0> ;
  assign LMB_Data_Write_24[11] = \<const0> ;
  assign LMB_Data_Write_24[12] = \<const0> ;
  assign LMB_Data_Write_24[13] = \<const0> ;
  assign LMB_Data_Write_24[14] = \<const0> ;
  assign LMB_Data_Write_24[15] = \<const0> ;
  assign LMB_Data_Write_24[16] = \<const0> ;
  assign LMB_Data_Write_24[17] = \<const0> ;
  assign LMB_Data_Write_24[18] = \<const0> ;
  assign LMB_Data_Write_24[19] = \<const0> ;
  assign LMB_Data_Write_24[20] = \<const0> ;
  assign LMB_Data_Write_24[21] = \<const0> ;
  assign LMB_Data_Write_24[22] = \<const0> ;
  assign LMB_Data_Write_24[23] = \<const0> ;
  assign LMB_Data_Write_24[24] = \<const0> ;
  assign LMB_Data_Write_24[25] = \<const0> ;
  assign LMB_Data_Write_24[26] = \<const0> ;
  assign LMB_Data_Write_24[27] = \<const0> ;
  assign LMB_Data_Write_24[28] = \<const0> ;
  assign LMB_Data_Write_24[29] = \<const0> ;
  assign LMB_Data_Write_24[30] = \<const0> ;
  assign LMB_Data_Write_24[31] = \<const0> ;
  assign LMB_Data_Write_25[0] = \<const0> ;
  assign LMB_Data_Write_25[1] = \<const0> ;
  assign LMB_Data_Write_25[2] = \<const0> ;
  assign LMB_Data_Write_25[3] = \<const0> ;
  assign LMB_Data_Write_25[4] = \<const0> ;
  assign LMB_Data_Write_25[5] = \<const0> ;
  assign LMB_Data_Write_25[6] = \<const0> ;
  assign LMB_Data_Write_25[7] = \<const0> ;
  assign LMB_Data_Write_25[8] = \<const0> ;
  assign LMB_Data_Write_25[9] = \<const0> ;
  assign LMB_Data_Write_25[10] = \<const0> ;
  assign LMB_Data_Write_25[11] = \<const0> ;
  assign LMB_Data_Write_25[12] = \<const0> ;
  assign LMB_Data_Write_25[13] = \<const0> ;
  assign LMB_Data_Write_25[14] = \<const0> ;
  assign LMB_Data_Write_25[15] = \<const0> ;
  assign LMB_Data_Write_25[16] = \<const0> ;
  assign LMB_Data_Write_25[17] = \<const0> ;
  assign LMB_Data_Write_25[18] = \<const0> ;
  assign LMB_Data_Write_25[19] = \<const0> ;
  assign LMB_Data_Write_25[20] = \<const0> ;
  assign LMB_Data_Write_25[21] = \<const0> ;
  assign LMB_Data_Write_25[22] = \<const0> ;
  assign LMB_Data_Write_25[23] = \<const0> ;
  assign LMB_Data_Write_25[24] = \<const0> ;
  assign LMB_Data_Write_25[25] = \<const0> ;
  assign LMB_Data_Write_25[26] = \<const0> ;
  assign LMB_Data_Write_25[27] = \<const0> ;
  assign LMB_Data_Write_25[28] = \<const0> ;
  assign LMB_Data_Write_25[29] = \<const0> ;
  assign LMB_Data_Write_25[30] = \<const0> ;
  assign LMB_Data_Write_25[31] = \<const0> ;
  assign LMB_Data_Write_26[0] = \<const0> ;
  assign LMB_Data_Write_26[1] = \<const0> ;
  assign LMB_Data_Write_26[2] = \<const0> ;
  assign LMB_Data_Write_26[3] = \<const0> ;
  assign LMB_Data_Write_26[4] = \<const0> ;
  assign LMB_Data_Write_26[5] = \<const0> ;
  assign LMB_Data_Write_26[6] = \<const0> ;
  assign LMB_Data_Write_26[7] = \<const0> ;
  assign LMB_Data_Write_26[8] = \<const0> ;
  assign LMB_Data_Write_26[9] = \<const0> ;
  assign LMB_Data_Write_26[10] = \<const0> ;
  assign LMB_Data_Write_26[11] = \<const0> ;
  assign LMB_Data_Write_26[12] = \<const0> ;
  assign LMB_Data_Write_26[13] = \<const0> ;
  assign LMB_Data_Write_26[14] = \<const0> ;
  assign LMB_Data_Write_26[15] = \<const0> ;
  assign LMB_Data_Write_26[16] = \<const0> ;
  assign LMB_Data_Write_26[17] = \<const0> ;
  assign LMB_Data_Write_26[18] = \<const0> ;
  assign LMB_Data_Write_26[19] = \<const0> ;
  assign LMB_Data_Write_26[20] = \<const0> ;
  assign LMB_Data_Write_26[21] = \<const0> ;
  assign LMB_Data_Write_26[22] = \<const0> ;
  assign LMB_Data_Write_26[23] = \<const0> ;
  assign LMB_Data_Write_26[24] = \<const0> ;
  assign LMB_Data_Write_26[25] = \<const0> ;
  assign LMB_Data_Write_26[26] = \<const0> ;
  assign LMB_Data_Write_26[27] = \<const0> ;
  assign LMB_Data_Write_26[28] = \<const0> ;
  assign LMB_Data_Write_26[29] = \<const0> ;
  assign LMB_Data_Write_26[30] = \<const0> ;
  assign LMB_Data_Write_26[31] = \<const0> ;
  assign LMB_Data_Write_27[0] = \<const0> ;
  assign LMB_Data_Write_27[1] = \<const0> ;
  assign LMB_Data_Write_27[2] = \<const0> ;
  assign LMB_Data_Write_27[3] = \<const0> ;
  assign LMB_Data_Write_27[4] = \<const0> ;
  assign LMB_Data_Write_27[5] = \<const0> ;
  assign LMB_Data_Write_27[6] = \<const0> ;
  assign LMB_Data_Write_27[7] = \<const0> ;
  assign LMB_Data_Write_27[8] = \<const0> ;
  assign LMB_Data_Write_27[9] = \<const0> ;
  assign LMB_Data_Write_27[10] = \<const0> ;
  assign LMB_Data_Write_27[11] = \<const0> ;
  assign LMB_Data_Write_27[12] = \<const0> ;
  assign LMB_Data_Write_27[13] = \<const0> ;
  assign LMB_Data_Write_27[14] = \<const0> ;
  assign LMB_Data_Write_27[15] = \<const0> ;
  assign LMB_Data_Write_27[16] = \<const0> ;
  assign LMB_Data_Write_27[17] = \<const0> ;
  assign LMB_Data_Write_27[18] = \<const0> ;
  assign LMB_Data_Write_27[19] = \<const0> ;
  assign LMB_Data_Write_27[20] = \<const0> ;
  assign LMB_Data_Write_27[21] = \<const0> ;
  assign LMB_Data_Write_27[22] = \<const0> ;
  assign LMB_Data_Write_27[23] = \<const0> ;
  assign LMB_Data_Write_27[24] = \<const0> ;
  assign LMB_Data_Write_27[25] = \<const0> ;
  assign LMB_Data_Write_27[26] = \<const0> ;
  assign LMB_Data_Write_27[27] = \<const0> ;
  assign LMB_Data_Write_27[28] = \<const0> ;
  assign LMB_Data_Write_27[29] = \<const0> ;
  assign LMB_Data_Write_27[30] = \<const0> ;
  assign LMB_Data_Write_27[31] = \<const0> ;
  assign LMB_Data_Write_28[0] = \<const0> ;
  assign LMB_Data_Write_28[1] = \<const0> ;
  assign LMB_Data_Write_28[2] = \<const0> ;
  assign LMB_Data_Write_28[3] = \<const0> ;
  assign LMB_Data_Write_28[4] = \<const0> ;
  assign LMB_Data_Write_28[5] = \<const0> ;
  assign LMB_Data_Write_28[6] = \<const0> ;
  assign LMB_Data_Write_28[7] = \<const0> ;
  assign LMB_Data_Write_28[8] = \<const0> ;
  assign LMB_Data_Write_28[9] = \<const0> ;
  assign LMB_Data_Write_28[10] = \<const0> ;
  assign LMB_Data_Write_28[11] = \<const0> ;
  assign LMB_Data_Write_28[12] = \<const0> ;
  assign LMB_Data_Write_28[13] = \<const0> ;
  assign LMB_Data_Write_28[14] = \<const0> ;
  assign LMB_Data_Write_28[15] = \<const0> ;
  assign LMB_Data_Write_28[16] = \<const0> ;
  assign LMB_Data_Write_28[17] = \<const0> ;
  assign LMB_Data_Write_28[18] = \<const0> ;
  assign LMB_Data_Write_28[19] = \<const0> ;
  assign LMB_Data_Write_28[20] = \<const0> ;
  assign LMB_Data_Write_28[21] = \<const0> ;
  assign LMB_Data_Write_28[22] = \<const0> ;
  assign LMB_Data_Write_28[23] = \<const0> ;
  assign LMB_Data_Write_28[24] = \<const0> ;
  assign LMB_Data_Write_28[25] = \<const0> ;
  assign LMB_Data_Write_28[26] = \<const0> ;
  assign LMB_Data_Write_28[27] = \<const0> ;
  assign LMB_Data_Write_28[28] = \<const0> ;
  assign LMB_Data_Write_28[29] = \<const0> ;
  assign LMB_Data_Write_28[30] = \<const0> ;
  assign LMB_Data_Write_28[31] = \<const0> ;
  assign LMB_Data_Write_29[0] = \<const0> ;
  assign LMB_Data_Write_29[1] = \<const0> ;
  assign LMB_Data_Write_29[2] = \<const0> ;
  assign LMB_Data_Write_29[3] = \<const0> ;
  assign LMB_Data_Write_29[4] = \<const0> ;
  assign LMB_Data_Write_29[5] = \<const0> ;
  assign LMB_Data_Write_29[6] = \<const0> ;
  assign LMB_Data_Write_29[7] = \<const0> ;
  assign LMB_Data_Write_29[8] = \<const0> ;
  assign LMB_Data_Write_29[9] = \<const0> ;
  assign LMB_Data_Write_29[10] = \<const0> ;
  assign LMB_Data_Write_29[11] = \<const0> ;
  assign LMB_Data_Write_29[12] = \<const0> ;
  assign LMB_Data_Write_29[13] = \<const0> ;
  assign LMB_Data_Write_29[14] = \<const0> ;
  assign LMB_Data_Write_29[15] = \<const0> ;
  assign LMB_Data_Write_29[16] = \<const0> ;
  assign LMB_Data_Write_29[17] = \<const0> ;
  assign LMB_Data_Write_29[18] = \<const0> ;
  assign LMB_Data_Write_29[19] = \<const0> ;
  assign LMB_Data_Write_29[20] = \<const0> ;
  assign LMB_Data_Write_29[21] = \<const0> ;
  assign LMB_Data_Write_29[22] = \<const0> ;
  assign LMB_Data_Write_29[23] = \<const0> ;
  assign LMB_Data_Write_29[24] = \<const0> ;
  assign LMB_Data_Write_29[25] = \<const0> ;
  assign LMB_Data_Write_29[26] = \<const0> ;
  assign LMB_Data_Write_29[27] = \<const0> ;
  assign LMB_Data_Write_29[28] = \<const0> ;
  assign LMB_Data_Write_29[29] = \<const0> ;
  assign LMB_Data_Write_29[30] = \<const0> ;
  assign LMB_Data_Write_29[31] = \<const0> ;
  assign LMB_Data_Write_3[0] = \<const0> ;
  assign LMB_Data_Write_3[1] = \<const0> ;
  assign LMB_Data_Write_3[2] = \<const0> ;
  assign LMB_Data_Write_3[3] = \<const0> ;
  assign LMB_Data_Write_3[4] = \<const0> ;
  assign LMB_Data_Write_3[5] = \<const0> ;
  assign LMB_Data_Write_3[6] = \<const0> ;
  assign LMB_Data_Write_3[7] = \<const0> ;
  assign LMB_Data_Write_3[8] = \<const0> ;
  assign LMB_Data_Write_3[9] = \<const0> ;
  assign LMB_Data_Write_3[10] = \<const0> ;
  assign LMB_Data_Write_3[11] = \<const0> ;
  assign LMB_Data_Write_3[12] = \<const0> ;
  assign LMB_Data_Write_3[13] = \<const0> ;
  assign LMB_Data_Write_3[14] = \<const0> ;
  assign LMB_Data_Write_3[15] = \<const0> ;
  assign LMB_Data_Write_3[16] = \<const0> ;
  assign LMB_Data_Write_3[17] = \<const0> ;
  assign LMB_Data_Write_3[18] = \<const0> ;
  assign LMB_Data_Write_3[19] = \<const0> ;
  assign LMB_Data_Write_3[20] = \<const0> ;
  assign LMB_Data_Write_3[21] = \<const0> ;
  assign LMB_Data_Write_3[22] = \<const0> ;
  assign LMB_Data_Write_3[23] = \<const0> ;
  assign LMB_Data_Write_3[24] = \<const0> ;
  assign LMB_Data_Write_3[25] = \<const0> ;
  assign LMB_Data_Write_3[26] = \<const0> ;
  assign LMB_Data_Write_3[27] = \<const0> ;
  assign LMB_Data_Write_3[28] = \<const0> ;
  assign LMB_Data_Write_3[29] = \<const0> ;
  assign LMB_Data_Write_3[30] = \<const0> ;
  assign LMB_Data_Write_3[31] = \<const0> ;
  assign LMB_Data_Write_30[0] = \<const0> ;
  assign LMB_Data_Write_30[1] = \<const0> ;
  assign LMB_Data_Write_30[2] = \<const0> ;
  assign LMB_Data_Write_30[3] = \<const0> ;
  assign LMB_Data_Write_30[4] = \<const0> ;
  assign LMB_Data_Write_30[5] = \<const0> ;
  assign LMB_Data_Write_30[6] = \<const0> ;
  assign LMB_Data_Write_30[7] = \<const0> ;
  assign LMB_Data_Write_30[8] = \<const0> ;
  assign LMB_Data_Write_30[9] = \<const0> ;
  assign LMB_Data_Write_30[10] = \<const0> ;
  assign LMB_Data_Write_30[11] = \<const0> ;
  assign LMB_Data_Write_30[12] = \<const0> ;
  assign LMB_Data_Write_30[13] = \<const0> ;
  assign LMB_Data_Write_30[14] = \<const0> ;
  assign LMB_Data_Write_30[15] = \<const0> ;
  assign LMB_Data_Write_30[16] = \<const0> ;
  assign LMB_Data_Write_30[17] = \<const0> ;
  assign LMB_Data_Write_30[18] = \<const0> ;
  assign LMB_Data_Write_30[19] = \<const0> ;
  assign LMB_Data_Write_30[20] = \<const0> ;
  assign LMB_Data_Write_30[21] = \<const0> ;
  assign LMB_Data_Write_30[22] = \<const0> ;
  assign LMB_Data_Write_30[23] = \<const0> ;
  assign LMB_Data_Write_30[24] = \<const0> ;
  assign LMB_Data_Write_30[25] = \<const0> ;
  assign LMB_Data_Write_30[26] = \<const0> ;
  assign LMB_Data_Write_30[27] = \<const0> ;
  assign LMB_Data_Write_30[28] = \<const0> ;
  assign LMB_Data_Write_30[29] = \<const0> ;
  assign LMB_Data_Write_30[30] = \<const0> ;
  assign LMB_Data_Write_30[31] = \<const0> ;
  assign LMB_Data_Write_31[0] = \<const0> ;
  assign LMB_Data_Write_31[1] = \<const0> ;
  assign LMB_Data_Write_31[2] = \<const0> ;
  assign LMB_Data_Write_31[3] = \<const0> ;
  assign LMB_Data_Write_31[4] = \<const0> ;
  assign LMB_Data_Write_31[5] = \<const0> ;
  assign LMB_Data_Write_31[6] = \<const0> ;
  assign LMB_Data_Write_31[7] = \<const0> ;
  assign LMB_Data_Write_31[8] = \<const0> ;
  assign LMB_Data_Write_31[9] = \<const0> ;
  assign LMB_Data_Write_31[10] = \<const0> ;
  assign LMB_Data_Write_31[11] = \<const0> ;
  assign LMB_Data_Write_31[12] = \<const0> ;
  assign LMB_Data_Write_31[13] = \<const0> ;
  assign LMB_Data_Write_31[14] = \<const0> ;
  assign LMB_Data_Write_31[15] = \<const0> ;
  assign LMB_Data_Write_31[16] = \<const0> ;
  assign LMB_Data_Write_31[17] = \<const0> ;
  assign LMB_Data_Write_31[18] = \<const0> ;
  assign LMB_Data_Write_31[19] = \<const0> ;
  assign LMB_Data_Write_31[20] = \<const0> ;
  assign LMB_Data_Write_31[21] = \<const0> ;
  assign LMB_Data_Write_31[22] = \<const0> ;
  assign LMB_Data_Write_31[23] = \<const0> ;
  assign LMB_Data_Write_31[24] = \<const0> ;
  assign LMB_Data_Write_31[25] = \<const0> ;
  assign LMB_Data_Write_31[26] = \<const0> ;
  assign LMB_Data_Write_31[27] = \<const0> ;
  assign LMB_Data_Write_31[28] = \<const0> ;
  assign LMB_Data_Write_31[29] = \<const0> ;
  assign LMB_Data_Write_31[30] = \<const0> ;
  assign LMB_Data_Write_31[31] = \<const0> ;
  assign LMB_Data_Write_4[0] = \<const0> ;
  assign LMB_Data_Write_4[1] = \<const0> ;
  assign LMB_Data_Write_4[2] = \<const0> ;
  assign LMB_Data_Write_4[3] = \<const0> ;
  assign LMB_Data_Write_4[4] = \<const0> ;
  assign LMB_Data_Write_4[5] = \<const0> ;
  assign LMB_Data_Write_4[6] = \<const0> ;
  assign LMB_Data_Write_4[7] = \<const0> ;
  assign LMB_Data_Write_4[8] = \<const0> ;
  assign LMB_Data_Write_4[9] = \<const0> ;
  assign LMB_Data_Write_4[10] = \<const0> ;
  assign LMB_Data_Write_4[11] = \<const0> ;
  assign LMB_Data_Write_4[12] = \<const0> ;
  assign LMB_Data_Write_4[13] = \<const0> ;
  assign LMB_Data_Write_4[14] = \<const0> ;
  assign LMB_Data_Write_4[15] = \<const0> ;
  assign LMB_Data_Write_4[16] = \<const0> ;
  assign LMB_Data_Write_4[17] = \<const0> ;
  assign LMB_Data_Write_4[18] = \<const0> ;
  assign LMB_Data_Write_4[19] = \<const0> ;
  assign LMB_Data_Write_4[20] = \<const0> ;
  assign LMB_Data_Write_4[21] = \<const0> ;
  assign LMB_Data_Write_4[22] = \<const0> ;
  assign LMB_Data_Write_4[23] = \<const0> ;
  assign LMB_Data_Write_4[24] = \<const0> ;
  assign LMB_Data_Write_4[25] = \<const0> ;
  assign LMB_Data_Write_4[26] = \<const0> ;
  assign LMB_Data_Write_4[27] = \<const0> ;
  assign LMB_Data_Write_4[28] = \<const0> ;
  assign LMB_Data_Write_4[29] = \<const0> ;
  assign LMB_Data_Write_4[30] = \<const0> ;
  assign LMB_Data_Write_4[31] = \<const0> ;
  assign LMB_Data_Write_5[0] = \<const0> ;
  assign LMB_Data_Write_5[1] = \<const0> ;
  assign LMB_Data_Write_5[2] = \<const0> ;
  assign LMB_Data_Write_5[3] = \<const0> ;
  assign LMB_Data_Write_5[4] = \<const0> ;
  assign LMB_Data_Write_5[5] = \<const0> ;
  assign LMB_Data_Write_5[6] = \<const0> ;
  assign LMB_Data_Write_5[7] = \<const0> ;
  assign LMB_Data_Write_5[8] = \<const0> ;
  assign LMB_Data_Write_5[9] = \<const0> ;
  assign LMB_Data_Write_5[10] = \<const0> ;
  assign LMB_Data_Write_5[11] = \<const0> ;
  assign LMB_Data_Write_5[12] = \<const0> ;
  assign LMB_Data_Write_5[13] = \<const0> ;
  assign LMB_Data_Write_5[14] = \<const0> ;
  assign LMB_Data_Write_5[15] = \<const0> ;
  assign LMB_Data_Write_5[16] = \<const0> ;
  assign LMB_Data_Write_5[17] = \<const0> ;
  assign LMB_Data_Write_5[18] = \<const0> ;
  assign LMB_Data_Write_5[19] = \<const0> ;
  assign LMB_Data_Write_5[20] = \<const0> ;
  assign LMB_Data_Write_5[21] = \<const0> ;
  assign LMB_Data_Write_5[22] = \<const0> ;
  assign LMB_Data_Write_5[23] = \<const0> ;
  assign LMB_Data_Write_5[24] = \<const0> ;
  assign LMB_Data_Write_5[25] = \<const0> ;
  assign LMB_Data_Write_5[26] = \<const0> ;
  assign LMB_Data_Write_5[27] = \<const0> ;
  assign LMB_Data_Write_5[28] = \<const0> ;
  assign LMB_Data_Write_5[29] = \<const0> ;
  assign LMB_Data_Write_5[30] = \<const0> ;
  assign LMB_Data_Write_5[31] = \<const0> ;
  assign LMB_Data_Write_6[0] = \<const0> ;
  assign LMB_Data_Write_6[1] = \<const0> ;
  assign LMB_Data_Write_6[2] = \<const0> ;
  assign LMB_Data_Write_6[3] = \<const0> ;
  assign LMB_Data_Write_6[4] = \<const0> ;
  assign LMB_Data_Write_6[5] = \<const0> ;
  assign LMB_Data_Write_6[6] = \<const0> ;
  assign LMB_Data_Write_6[7] = \<const0> ;
  assign LMB_Data_Write_6[8] = \<const0> ;
  assign LMB_Data_Write_6[9] = \<const0> ;
  assign LMB_Data_Write_6[10] = \<const0> ;
  assign LMB_Data_Write_6[11] = \<const0> ;
  assign LMB_Data_Write_6[12] = \<const0> ;
  assign LMB_Data_Write_6[13] = \<const0> ;
  assign LMB_Data_Write_6[14] = \<const0> ;
  assign LMB_Data_Write_6[15] = \<const0> ;
  assign LMB_Data_Write_6[16] = \<const0> ;
  assign LMB_Data_Write_6[17] = \<const0> ;
  assign LMB_Data_Write_6[18] = \<const0> ;
  assign LMB_Data_Write_6[19] = \<const0> ;
  assign LMB_Data_Write_6[20] = \<const0> ;
  assign LMB_Data_Write_6[21] = \<const0> ;
  assign LMB_Data_Write_6[22] = \<const0> ;
  assign LMB_Data_Write_6[23] = \<const0> ;
  assign LMB_Data_Write_6[24] = \<const0> ;
  assign LMB_Data_Write_6[25] = \<const0> ;
  assign LMB_Data_Write_6[26] = \<const0> ;
  assign LMB_Data_Write_6[27] = \<const0> ;
  assign LMB_Data_Write_6[28] = \<const0> ;
  assign LMB_Data_Write_6[29] = \<const0> ;
  assign LMB_Data_Write_6[30] = \<const0> ;
  assign LMB_Data_Write_6[31] = \<const0> ;
  assign LMB_Data_Write_7[0] = \<const0> ;
  assign LMB_Data_Write_7[1] = \<const0> ;
  assign LMB_Data_Write_7[2] = \<const0> ;
  assign LMB_Data_Write_7[3] = \<const0> ;
  assign LMB_Data_Write_7[4] = \<const0> ;
  assign LMB_Data_Write_7[5] = \<const0> ;
  assign LMB_Data_Write_7[6] = \<const0> ;
  assign LMB_Data_Write_7[7] = \<const0> ;
  assign LMB_Data_Write_7[8] = \<const0> ;
  assign LMB_Data_Write_7[9] = \<const0> ;
  assign LMB_Data_Write_7[10] = \<const0> ;
  assign LMB_Data_Write_7[11] = \<const0> ;
  assign LMB_Data_Write_7[12] = \<const0> ;
  assign LMB_Data_Write_7[13] = \<const0> ;
  assign LMB_Data_Write_7[14] = \<const0> ;
  assign LMB_Data_Write_7[15] = \<const0> ;
  assign LMB_Data_Write_7[16] = \<const0> ;
  assign LMB_Data_Write_7[17] = \<const0> ;
  assign LMB_Data_Write_7[18] = \<const0> ;
  assign LMB_Data_Write_7[19] = \<const0> ;
  assign LMB_Data_Write_7[20] = \<const0> ;
  assign LMB_Data_Write_7[21] = \<const0> ;
  assign LMB_Data_Write_7[22] = \<const0> ;
  assign LMB_Data_Write_7[23] = \<const0> ;
  assign LMB_Data_Write_7[24] = \<const0> ;
  assign LMB_Data_Write_7[25] = \<const0> ;
  assign LMB_Data_Write_7[26] = \<const0> ;
  assign LMB_Data_Write_7[27] = \<const0> ;
  assign LMB_Data_Write_7[28] = \<const0> ;
  assign LMB_Data_Write_7[29] = \<const0> ;
  assign LMB_Data_Write_7[30] = \<const0> ;
  assign LMB_Data_Write_7[31] = \<const0> ;
  assign LMB_Data_Write_8[0] = \<const0> ;
  assign LMB_Data_Write_8[1] = \<const0> ;
  assign LMB_Data_Write_8[2] = \<const0> ;
  assign LMB_Data_Write_8[3] = \<const0> ;
  assign LMB_Data_Write_8[4] = \<const0> ;
  assign LMB_Data_Write_8[5] = \<const0> ;
  assign LMB_Data_Write_8[6] = \<const0> ;
  assign LMB_Data_Write_8[7] = \<const0> ;
  assign LMB_Data_Write_8[8] = \<const0> ;
  assign LMB_Data_Write_8[9] = \<const0> ;
  assign LMB_Data_Write_8[10] = \<const0> ;
  assign LMB_Data_Write_8[11] = \<const0> ;
  assign LMB_Data_Write_8[12] = \<const0> ;
  assign LMB_Data_Write_8[13] = \<const0> ;
  assign LMB_Data_Write_8[14] = \<const0> ;
  assign LMB_Data_Write_8[15] = \<const0> ;
  assign LMB_Data_Write_8[16] = \<const0> ;
  assign LMB_Data_Write_8[17] = \<const0> ;
  assign LMB_Data_Write_8[18] = \<const0> ;
  assign LMB_Data_Write_8[19] = \<const0> ;
  assign LMB_Data_Write_8[20] = \<const0> ;
  assign LMB_Data_Write_8[21] = \<const0> ;
  assign LMB_Data_Write_8[22] = \<const0> ;
  assign LMB_Data_Write_8[23] = \<const0> ;
  assign LMB_Data_Write_8[24] = \<const0> ;
  assign LMB_Data_Write_8[25] = \<const0> ;
  assign LMB_Data_Write_8[26] = \<const0> ;
  assign LMB_Data_Write_8[27] = \<const0> ;
  assign LMB_Data_Write_8[28] = \<const0> ;
  assign LMB_Data_Write_8[29] = \<const0> ;
  assign LMB_Data_Write_8[30] = \<const0> ;
  assign LMB_Data_Write_8[31] = \<const0> ;
  assign LMB_Data_Write_9[0] = \<const0> ;
  assign LMB_Data_Write_9[1] = \<const0> ;
  assign LMB_Data_Write_9[2] = \<const0> ;
  assign LMB_Data_Write_9[3] = \<const0> ;
  assign LMB_Data_Write_9[4] = \<const0> ;
  assign LMB_Data_Write_9[5] = \<const0> ;
  assign LMB_Data_Write_9[6] = \<const0> ;
  assign LMB_Data_Write_9[7] = \<const0> ;
  assign LMB_Data_Write_9[8] = \<const0> ;
  assign LMB_Data_Write_9[9] = \<const0> ;
  assign LMB_Data_Write_9[10] = \<const0> ;
  assign LMB_Data_Write_9[11] = \<const0> ;
  assign LMB_Data_Write_9[12] = \<const0> ;
  assign LMB_Data_Write_9[13] = \<const0> ;
  assign LMB_Data_Write_9[14] = \<const0> ;
  assign LMB_Data_Write_9[15] = \<const0> ;
  assign LMB_Data_Write_9[16] = \<const0> ;
  assign LMB_Data_Write_9[17] = \<const0> ;
  assign LMB_Data_Write_9[18] = \<const0> ;
  assign LMB_Data_Write_9[19] = \<const0> ;
  assign LMB_Data_Write_9[20] = \<const0> ;
  assign LMB_Data_Write_9[21] = \<const0> ;
  assign LMB_Data_Write_9[22] = \<const0> ;
  assign LMB_Data_Write_9[23] = \<const0> ;
  assign LMB_Data_Write_9[24] = \<const0> ;
  assign LMB_Data_Write_9[25] = \<const0> ;
  assign LMB_Data_Write_9[26] = \<const0> ;
  assign LMB_Data_Write_9[27] = \<const0> ;
  assign LMB_Data_Write_9[28] = \<const0> ;
  assign LMB_Data_Write_9[29] = \<const0> ;
  assign LMB_Data_Write_9[30] = \<const0> ;
  assign LMB_Data_Write_9[31] = \<const0> ;
  assign LMB_Read_Strobe_0 = \<const0> ;
  assign LMB_Read_Strobe_1 = \<const0> ;
  assign LMB_Read_Strobe_10 = \<const0> ;
  assign LMB_Read_Strobe_11 = \<const0> ;
  assign LMB_Read_Strobe_12 = \<const0> ;
  assign LMB_Read_Strobe_13 = \<const0> ;
  assign LMB_Read_Strobe_14 = \<const0> ;
  assign LMB_Read_Strobe_15 = \<const0> ;
  assign LMB_Read_Strobe_16 = \<const0> ;
  assign LMB_Read_Strobe_17 = \<const0> ;
  assign LMB_Read_Strobe_18 = \<const0> ;
  assign LMB_Read_Strobe_19 = \<const0> ;
  assign LMB_Read_Strobe_2 = \<const0> ;
  assign LMB_Read_Strobe_20 = \<const0> ;
  assign LMB_Read_Strobe_21 = \<const0> ;
  assign LMB_Read_Strobe_22 = \<const0> ;
  assign LMB_Read_Strobe_23 = \<const0> ;
  assign LMB_Read_Strobe_24 = \<const0> ;
  assign LMB_Read_Strobe_25 = \<const0> ;
  assign LMB_Read_Strobe_26 = \<const0> ;
  assign LMB_Read_Strobe_27 = \<const0> ;
  assign LMB_Read_Strobe_28 = \<const0> ;
  assign LMB_Read_Strobe_29 = \<const0> ;
  assign LMB_Read_Strobe_3 = \<const0> ;
  assign LMB_Read_Strobe_30 = \<const0> ;
  assign LMB_Read_Strobe_31 = \<const0> ;
  assign LMB_Read_Strobe_4 = \<const0> ;
  assign LMB_Read_Strobe_5 = \<const0> ;
  assign LMB_Read_Strobe_6 = \<const0> ;
  assign LMB_Read_Strobe_7 = \<const0> ;
  assign LMB_Read_Strobe_8 = \<const0> ;
  assign LMB_Read_Strobe_9 = \<const0> ;
  assign LMB_Write_Strobe_0 = \<const0> ;
  assign LMB_Write_Strobe_1 = \<const0> ;
  assign LMB_Write_Strobe_10 = \<const0> ;
  assign LMB_Write_Strobe_11 = \<const0> ;
  assign LMB_Write_Strobe_12 = \<const0> ;
  assign LMB_Write_Strobe_13 = \<const0> ;
  assign LMB_Write_Strobe_14 = \<const0> ;
  assign LMB_Write_Strobe_15 = \<const0> ;
  assign LMB_Write_Strobe_16 = \<const0> ;
  assign LMB_Write_Strobe_17 = \<const0> ;
  assign LMB_Write_Strobe_18 = \<const0> ;
  assign LMB_Write_Strobe_19 = \<const0> ;
  assign LMB_Write_Strobe_2 = \<const0> ;
  assign LMB_Write_Strobe_20 = \<const0> ;
  assign LMB_Write_Strobe_21 = \<const0> ;
  assign LMB_Write_Strobe_22 = \<const0> ;
  assign LMB_Write_Strobe_23 = \<const0> ;
  assign LMB_Write_Strobe_24 = \<const0> ;
  assign LMB_Write_Strobe_25 = \<const0> ;
  assign LMB_Write_Strobe_26 = \<const0> ;
  assign LMB_Write_Strobe_27 = \<const0> ;
  assign LMB_Write_Strobe_28 = \<const0> ;
  assign LMB_Write_Strobe_29 = \<const0> ;
  assign LMB_Write_Strobe_3 = \<const0> ;
  assign LMB_Write_Strobe_30 = \<const0> ;
  assign LMB_Write_Strobe_31 = \<const0> ;
  assign LMB_Write_Strobe_4 = \<const0> ;
  assign LMB_Write_Strobe_5 = \<const0> ;
  assign LMB_Write_Strobe_6 = \<const0> ;
  assign LMB_Write_Strobe_7 = \<const0> ;
  assign LMB_Write_Strobe_8 = \<const0> ;
  assign LMB_Write_Strobe_9 = \<const0> ;
  assign M_AXIS_TDATA[31] = \<const0> ;
  assign M_AXIS_TDATA[30] = \<const0> ;
  assign M_AXIS_TDATA[29] = \<const0> ;
  assign M_AXIS_TDATA[28] = \<const0> ;
  assign M_AXIS_TDATA[27] = \<const0> ;
  assign M_AXIS_TDATA[26] = \<const0> ;
  assign M_AXIS_TDATA[25] = \<const0> ;
  assign M_AXIS_TDATA[24] = \<const0> ;
  assign M_AXIS_TDATA[23] = \<const0> ;
  assign M_AXIS_TDATA[22] = \<const0> ;
  assign M_AXIS_TDATA[21] = \<const0> ;
  assign M_AXIS_TDATA[20] = \<const0> ;
  assign M_AXIS_TDATA[19] = \<const0> ;
  assign M_AXIS_TDATA[18] = \<const0> ;
  assign M_AXIS_TDATA[17] = \<const0> ;
  assign M_AXIS_TDATA[16] = \<const0> ;
  assign M_AXIS_TDATA[15] = \<const0> ;
  assign M_AXIS_TDATA[14] = \<const0> ;
  assign M_AXIS_TDATA[13] = \<const0> ;
  assign M_AXIS_TDATA[12] = \<const0> ;
  assign M_AXIS_TDATA[11] = \<const0> ;
  assign M_AXIS_TDATA[10] = \<const0> ;
  assign M_AXIS_TDATA[9] = \<const0> ;
  assign M_AXIS_TDATA[8] = \<const0> ;
  assign M_AXIS_TDATA[7] = \<const0> ;
  assign M_AXIS_TDATA[6] = \<const0> ;
  assign M_AXIS_TDATA[5] = \<const0> ;
  assign M_AXIS_TDATA[4] = \<const0> ;
  assign M_AXIS_TDATA[3] = \<const0> ;
  assign M_AXIS_TDATA[2] = \<const0> ;
  assign M_AXIS_TDATA[1] = \<const0> ;
  assign M_AXIS_TDATA[0] = \<const0> ;
  assign M_AXIS_TID[6] = \<const0> ;
  assign M_AXIS_TID[5] = \<const0> ;
  assign M_AXIS_TID[4] = \<const0> ;
  assign M_AXIS_TID[3] = \<const0> ;
  assign M_AXIS_TID[2] = \<const0> ;
  assign M_AXIS_TID[1] = \<const0> ;
  assign M_AXIS_TID[0] = \<const0> ;
  assign M_AXIS_TVALID = \<const0> ;
  assign M_AXI_ARADDR[31] = \<const0> ;
  assign M_AXI_ARADDR[30] = \<const0> ;
  assign M_AXI_ARADDR[29] = \<const0> ;
  assign M_AXI_ARADDR[28] = \<const0> ;
  assign M_AXI_ARADDR[27] = \<const0> ;
  assign M_AXI_ARADDR[26] = \<const0> ;
  assign M_AXI_ARADDR[25] = \<const0> ;
  assign M_AXI_ARADDR[24] = \<const0> ;
  assign M_AXI_ARADDR[23] = \<const0> ;
  assign M_AXI_ARADDR[22] = \<const0> ;
  assign M_AXI_ARADDR[21] = \<const0> ;
  assign M_AXI_ARADDR[20] = \<const0> ;
  assign M_AXI_ARADDR[19] = \<const0> ;
  assign M_AXI_ARADDR[18] = \<const0> ;
  assign M_AXI_ARADDR[17] = \<const0> ;
  assign M_AXI_ARADDR[16] = \<const0> ;
  assign M_AXI_ARADDR[15] = \<const0> ;
  assign M_AXI_ARADDR[14] = \<const0> ;
  assign M_AXI_ARADDR[13] = \<const0> ;
  assign M_AXI_ARADDR[12] = \<const0> ;
  assign M_AXI_ARADDR[11] = \<const0> ;
  assign M_AXI_ARADDR[10] = \<const0> ;
  assign M_AXI_ARADDR[9] = \<const0> ;
  assign M_AXI_ARADDR[8] = \<const0> ;
  assign M_AXI_ARADDR[7] = \<const0> ;
  assign M_AXI_ARADDR[6] = \<const0> ;
  assign M_AXI_ARADDR[5] = \<const0> ;
  assign M_AXI_ARADDR[4] = \<const0> ;
  assign M_AXI_ARADDR[3] = \<const0> ;
  assign M_AXI_ARADDR[2] = \<const0> ;
  assign M_AXI_ARADDR[1] = \<const0> ;
  assign M_AXI_ARADDR[0] = \<const0> ;
  assign M_AXI_ARBURST[1] = \<const0> ;
  assign M_AXI_ARBURST[0] = \<const0> ;
  assign M_AXI_ARCACHE[3] = \<const0> ;
  assign M_AXI_ARCACHE[2] = \<const0> ;
  assign M_AXI_ARCACHE[1] = \<const0> ;
  assign M_AXI_ARCACHE[0] = \<const0> ;
  assign M_AXI_ARID[0] = \<const0> ;
  assign M_AXI_ARLEN[7] = \<const0> ;
  assign M_AXI_ARLEN[6] = \<const0> ;
  assign M_AXI_ARLEN[5] = \<const0> ;
  assign M_AXI_ARLEN[4] = \<const0> ;
  assign M_AXI_ARLEN[3] = \<const0> ;
  assign M_AXI_ARLEN[2] = \<const0> ;
  assign M_AXI_ARLEN[1] = \<const0> ;
  assign M_AXI_ARLEN[0] = \<const0> ;
  assign M_AXI_ARLOCK = \<const0> ;
  assign M_AXI_ARPROT[2] = \<const0> ;
  assign M_AXI_ARPROT[1] = \<const0> ;
  assign M_AXI_ARPROT[0] = \<const0> ;
  assign M_AXI_ARQOS[3] = \<const0> ;
  assign M_AXI_ARQOS[2] = \<const0> ;
  assign M_AXI_ARQOS[1] = \<const0> ;
  assign M_AXI_ARQOS[0] = \<const0> ;
  assign M_AXI_ARSIZE[2] = \<const0> ;
  assign M_AXI_ARSIZE[1] = \<const0> ;
  assign M_AXI_ARSIZE[0] = \<const0> ;
  assign M_AXI_ARVALID = \<const0> ;
  assign M_AXI_AWADDR[31] = \<const0> ;
  assign M_AXI_AWADDR[30] = \<const0> ;
  assign M_AXI_AWADDR[29] = \<const0> ;
  assign M_AXI_AWADDR[28] = \<const0> ;
  assign M_AXI_AWADDR[27] = \<const0> ;
  assign M_AXI_AWADDR[26] = \<const0> ;
  assign M_AXI_AWADDR[25] = \<const0> ;
  assign M_AXI_AWADDR[24] = \<const0> ;
  assign M_AXI_AWADDR[23] = \<const0> ;
  assign M_AXI_AWADDR[22] = \<const0> ;
  assign M_AXI_AWADDR[21] = \<const0> ;
  assign M_AXI_AWADDR[20] = \<const0> ;
  assign M_AXI_AWADDR[19] = \<const0> ;
  assign M_AXI_AWADDR[18] = \<const0> ;
  assign M_AXI_AWADDR[17] = \<const0> ;
  assign M_AXI_AWADDR[16] = \<const0> ;
  assign M_AXI_AWADDR[15] = \<const0> ;
  assign M_AXI_AWADDR[14] = \<const0> ;
  assign M_AXI_AWADDR[13] = \<const0> ;
  assign M_AXI_AWADDR[12] = \<const0> ;
  assign M_AXI_AWADDR[11] = \<const0> ;
  assign M_AXI_AWADDR[10] = \<const0> ;
  assign M_AXI_AWADDR[9] = \<const0> ;
  assign M_AXI_AWADDR[8] = \<const0> ;
  assign M_AXI_AWADDR[7] = \<const0> ;
  assign M_AXI_AWADDR[6] = \<const0> ;
  assign M_AXI_AWADDR[5] = \<const0> ;
  assign M_AXI_AWADDR[4] = \<const0> ;
  assign M_AXI_AWADDR[3] = \<const0> ;
  assign M_AXI_AWADDR[2] = \<const0> ;
  assign M_AXI_AWADDR[1] = \<const0> ;
  assign M_AXI_AWADDR[0] = \<const0> ;
  assign M_AXI_AWBURST[1] = \<const0> ;
  assign M_AXI_AWBURST[0] = \<const0> ;
  assign M_AXI_AWCACHE[3] = \<const0> ;
  assign M_AXI_AWCACHE[2] = \<const0> ;
  assign M_AXI_AWCACHE[1] = \<const0> ;
  assign M_AXI_AWCACHE[0] = \<const0> ;
  assign M_AXI_AWID[0] = \<const0> ;
  assign M_AXI_AWLEN[7] = \<const0> ;
  assign M_AXI_AWLEN[6] = \<const0> ;
  assign M_AXI_AWLEN[5] = \<const0> ;
  assign M_AXI_AWLEN[4] = \<const0> ;
  assign M_AXI_AWLEN[3] = \<const0> ;
  assign M_AXI_AWLEN[2] = \<const0> ;
  assign M_AXI_AWLEN[1] = \<const0> ;
  assign M_AXI_AWLEN[0] = \<const0> ;
  assign M_AXI_AWLOCK = \<const0> ;
  assign M_AXI_AWPROT[2] = \<const0> ;
  assign M_AXI_AWPROT[1] = \<const0> ;
  assign M_AXI_AWPROT[0] = \<const0> ;
  assign M_AXI_AWQOS[3] = \<const0> ;
  assign M_AXI_AWQOS[2] = \<const0> ;
  assign M_AXI_AWQOS[1] = \<const0> ;
  assign M_AXI_AWQOS[0] = \<const0> ;
  assign M_AXI_AWSIZE[2] = \<const0> ;
  assign M_AXI_AWSIZE[1] = \<const0> ;
  assign M_AXI_AWSIZE[0] = \<const0> ;
  assign M_AXI_AWVALID = \<const0> ;
  assign M_AXI_BREADY = \<const0> ;
  assign M_AXI_RREADY = \<const0> ;
  assign M_AXI_WDATA[31] = \<const0> ;
  assign M_AXI_WDATA[30] = \<const0> ;
  assign M_AXI_WDATA[29] = \<const0> ;
  assign M_AXI_WDATA[28] = \<const0> ;
  assign M_AXI_WDATA[27] = \<const0> ;
  assign M_AXI_WDATA[26] = \<const0> ;
  assign M_AXI_WDATA[25] = \<const0> ;
  assign M_AXI_WDATA[24] = \<const0> ;
  assign M_AXI_WDATA[23] = \<const0> ;
  assign M_AXI_WDATA[22] = \<const0> ;
  assign M_AXI_WDATA[21] = \<const0> ;
  assign M_AXI_WDATA[20] = \<const0> ;
  assign M_AXI_WDATA[19] = \<const0> ;
  assign M_AXI_WDATA[18] = \<const0> ;
  assign M_AXI_WDATA[17] = \<const0> ;
  assign M_AXI_WDATA[16] = \<const0> ;
  assign M_AXI_WDATA[15] = \<const0> ;
  assign M_AXI_WDATA[14] = \<const0> ;
  assign M_AXI_WDATA[13] = \<const0> ;
  assign M_AXI_WDATA[12] = \<const0> ;
  assign M_AXI_WDATA[11] = \<const0> ;
  assign M_AXI_WDATA[10] = \<const0> ;
  assign M_AXI_WDATA[9] = \<const0> ;
  assign M_AXI_WDATA[8] = \<const0> ;
  assign M_AXI_WDATA[7] = \<const0> ;
  assign M_AXI_WDATA[6] = \<const0> ;
  assign M_AXI_WDATA[5] = \<const0> ;
  assign M_AXI_WDATA[4] = \<const0> ;
  assign M_AXI_WDATA[3] = \<const0> ;
  assign M_AXI_WDATA[2] = \<const0> ;
  assign M_AXI_WDATA[1] = \<const0> ;
  assign M_AXI_WDATA[0] = \<const0> ;
  assign M_AXI_WLAST = \<const0> ;
  assign M_AXI_WSTRB[3] = \<const0> ;
  assign M_AXI_WSTRB[2] = \<const0> ;
  assign M_AXI_WSTRB[1] = \<const0> ;
  assign M_AXI_WSTRB[0] = \<const0> ;
  assign M_AXI_WVALID = \<const0> ;
  assign S_AXI_AWREADY = S_AXI_WREADY;
  assign S_AXI_BRESP[1] = \^S_AXI_BRESP [1];
  assign S_AXI_BRESP[0] = \<const0> ;
  assign S_AXI_RDATA[31] = \<const0> ;
  assign S_AXI_RDATA[30] = \<const0> ;
  assign S_AXI_RDATA[29] = \<const0> ;
  assign S_AXI_RDATA[28] = \<const0> ;
  assign S_AXI_RDATA[27] = \<const0> ;
  assign S_AXI_RDATA[26] = \<const0> ;
  assign S_AXI_RDATA[25] = \<const0> ;
  assign S_AXI_RDATA[24] = \<const0> ;
  assign S_AXI_RDATA[23] = \<const0> ;
  assign S_AXI_RDATA[22] = \<const0> ;
  assign S_AXI_RDATA[21] = \<const0> ;
  assign S_AXI_RDATA[20] = \<const0> ;
  assign S_AXI_RDATA[19] = \<const0> ;
  assign S_AXI_RDATA[18] = \<const0> ;
  assign S_AXI_RDATA[17] = \<const0> ;
  assign S_AXI_RDATA[16] = \<const0> ;
  assign S_AXI_RDATA[15] = \<const0> ;
  assign S_AXI_RDATA[14] = \<const0> ;
  assign S_AXI_RDATA[13] = \<const0> ;
  assign S_AXI_RDATA[12] = \<const0> ;
  assign S_AXI_RDATA[11] = \<const0> ;
  assign S_AXI_RDATA[10] = \<const0> ;
  assign S_AXI_RDATA[9] = \<const0> ;
  assign S_AXI_RDATA[8] = \<const0> ;
  assign S_AXI_RDATA[7:0] = \^S_AXI_RDATA [7:0];
  assign S_AXI_RRESP[1] = \^S_AXI_RRESP [1];
  assign S_AXI_RRESP[0] = \<const0> ;
  assign TRACE_CLK_OUT = \<const0> ;
  assign TRACE_CTL = \<const1> ;
  assign TRACE_DATA[31] = \<const0> ;
  assign TRACE_DATA[30] = \<const0> ;
  assign TRACE_DATA[29] = \<const0> ;
  assign TRACE_DATA[28] = \<const0> ;
  assign TRACE_DATA[27] = \<const0> ;
  assign TRACE_DATA[26] = \<const0> ;
  assign TRACE_DATA[25] = \<const0> ;
  assign TRACE_DATA[24] = \<const0> ;
  assign TRACE_DATA[23] = \<const0> ;
  assign TRACE_DATA[22] = \<const0> ;
  assign TRACE_DATA[21] = \<const0> ;
  assign TRACE_DATA[20] = \<const0> ;
  assign TRACE_DATA[19] = \<const0> ;
  assign TRACE_DATA[18] = \<const0> ;
  assign TRACE_DATA[17] = \<const0> ;
  assign TRACE_DATA[16] = \<const0> ;
  assign TRACE_DATA[15] = \<const0> ;
  assign TRACE_DATA[14] = \<const0> ;
  assign TRACE_DATA[13] = \<const0> ;
  assign TRACE_DATA[12] = \<const0> ;
  assign TRACE_DATA[11] = \<const0> ;
  assign TRACE_DATA[10] = \<const0> ;
  assign TRACE_DATA[9] = \<const0> ;
  assign TRACE_DATA[8] = \<const0> ;
  assign TRACE_DATA[7] = \<const0> ;
  assign TRACE_DATA[6] = \<const0> ;
  assign TRACE_DATA[5] = \<const0> ;
  assign TRACE_DATA[4] = \<const0> ;
  assign TRACE_DATA[3] = \<const0> ;
  assign TRACE_DATA[2] = \<const0> ;
  assign TRACE_DATA[1] = \<const0> ;
  assign TRACE_DATA[0] = \<const0> ;
  assign Trig_Ack_In_0 = \<const0> ;
  assign Trig_Ack_In_1 = \<const0> ;
  assign Trig_Ack_In_2 = \<const0> ;
  assign Trig_Ack_In_3 = \<const0> ;
  assign Trig_Out_0 = \<const0> ;
  assign Trig_Out_1 = \<const0> ;
  assign Trig_Out_2 = \<const0> ;
  assign Trig_Out_3 = \<const0> ;
  assign bscan_ext_tdo = \<const0> ;
  GND GND
       (.G(\<const0> ));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MDM_Core MDM_Core_I1
       (.\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N (MDM_Core_I1_n_12),
        .AR(sel_n_reset),
        .Bus_RNW_reg(\I_SLAVE_ATTACHMENT/I_DECODER/Bus_RNW_reg ),
        .CLK(Dbg_Update_0),
        .D(p_0_in),
        .Dbg_Disable_0(Dbg_Disable_0),
        .Dbg_Reg_En_0(Dbg_Reg_En_0),
        .Dbg_Rst_0(Dbg_Rst_0),
        .Dbg_TDI_0(Dbg_TDI_0),
        .Dbg_TDO_0(Dbg_TDO_0),
        .Debug_SYS_Rst(Debug_SYS_Rst),
        .E(Dbg_Shift_0),
        .Ext_BRK(Ext_BRK),
        .Ext_JTAG_SEL(Ext_JTAG_SEL),
        .Ext_JTAG_TDO(Ext_JTAG_TDO),
        .Ext_NM_BRK(Ext_NM_BRK),
        .FIFO_Write(\JTAG_CONTROL_I/FIFO_Write ),
        .\GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg (\I_SLAVE_ATTACHMENT/I_DECODER/GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg ),
        .\GEN_BKEND_CE_REGISTERS[1].ce_out_i_reg (\I_SLAVE_ATTACHMENT/I_DECODER/GEN_BKEND_CE_REGISTERS[1].ce_out_i_reg ),
        .Interrupt(Interrupt),
        .Q(MDM_Core_I1_n_0),
        .RX_Buffer_Full(RX_Buffer_Full),
        .RX_Data(RX_Data),
        .SEL(SEL),
        .S_AXI_ACLK(S_AXI_ACLK),
        .S_AXI_ARESETN(S_AXI_ARESETN),
        .S_AXI_WDATA(S_AXI_WDATA[7:0]),
        .Scan_En(Scan_En),
        .Scan_Reset(Scan_Reset),
        .Scan_Reset_Sel(Scan_Reset_Sel),
        .\Use_Serial_Unified_Completion.completion_status_reg[10] (\Use_E2.BSCAN_I_n_8 ),
        .\Use_Serial_Unified_Completion.completion_status_reg[15] (\Use_E2.BSCAN_I_n_14 ),
        .\Use_Serial_Unified_Completion.count_reg[5] (\JTAG_CONTROL_I/Use_Serial_Unified_Completion.count_reg ),
        .\Use_Serial_Unified_Completion.count_reg[5]_0 (\JTAG_CONTROL_I/sel ),
        .\Use_Serial_Unified_Completion.sample_1_reg[15] (MDM_Core_I1_n_34),
        .\Use_UART.fifo_Din_reg[7] (Ext_JTAG_SHIFT),
        .\Use_UART.tdo_reg_reg[7] (\Use_E2.BSCAN_I_n_9 ),
        .\Use_Uart.enable_interrupts_reg_0 (\Use_AXI_IPIF.AXI_LITE_IPIF_I_n_15 ),
        .\Using_FPGA.Native (Ext_JTAG_DRCK),
        .bus2ip_rdce(bus2ip_rdce),
        .bus2ip_wrce(bus2ip_wrce),
        .clear_Ext_BRK(clear_Ext_BRK),
        .completion_status137_out(\JTAG_CONTROL_I/completion_status137_out ),
        .enable_interrupts(enable_interrupts),
        .fifo_Data_Present(\JTAG_CONTROL_I/fifo_Data_Present ),
        .mb_data_overrun1__0(\JTAG_CONTROL_I/mb_data_overrun1__0 ),
        .out(\JTAG_CONTROL_I/p_0_in44_in ),
        .reset_RX_FIFO_i(reset_RX_FIFO_i),
        .reset_TX_FIFO_i(reset_TX_FIFO_i),
        .rx_Data_Present(rx_Data_Present),
        .sel_n_reg(Ext_JTAG_CAPTURE),
        .\shift_Count_reg[0] (\Use_E2.BSCAN_I_n_13 ),
        .shift_n_reset(shift_n_reset),
        .tdo(tdo),
        .tx_Buffer_Full(tx_Buffer_Full));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_BUFG \No_Dbg_Reg_Access.BUFG_DRCK 
       (.DRCK(DRCK),
        .Ext_JTAG_DRCK(Ext_JTAG_DRCK));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_axi_lite_ipif \Use_AXI_IPIF.AXI_LITE_IPIF_I 
       (.\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[4] (\Use_AXI_IPIF.AXI_LITE_IPIF_I_n_15 ),
        .Bus_RNW_reg(\I_SLAVE_ATTACHMENT/I_DECODER/Bus_RNW_reg ),
        .FIFO_Write(\JTAG_CONTROL_I/FIFO_Write ),
        .\GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg (\I_SLAVE_ATTACHMENT/I_DECODER/GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg ),
        .\GEN_BKEND_CE_REGISTERS[1].ce_out_i_reg (\I_SLAVE_ATTACHMENT/I_DECODER/GEN_BKEND_CE_REGISTERS[1].ce_out_i_reg ),
        .\GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2] (S_AXI_WREADY),
        .\GEN_BKEND_CE_REGISTERS[3].ce_out_i_reg[3] (S_AXI_ARREADY),
        .RX_Buffer_Full(RX_Buffer_Full),
        .RX_Data(RX_Data),
        .S_AXI_ACLK(S_AXI_ACLK),
        .S_AXI_ARADDR(S_AXI_ARADDR[3:2]),
        .S_AXI_ARESETN(S_AXI_ARESETN),
        .S_AXI_ARVALID(S_AXI_ARVALID),
        .S_AXI_AWADDR(S_AXI_AWADDR[3:2]),
        .S_AXI_AWVALID(S_AXI_AWVALID),
        .S_AXI_BREADY(S_AXI_BREADY),
        .S_AXI_BRESP(\^S_AXI_BRESP ),
        .S_AXI_BVALID(S_AXI_BVALID),
        .S_AXI_RDATA(\^S_AXI_RDATA ),
        .S_AXI_RREADY(S_AXI_RREADY),
        .S_AXI_RRESP(\^S_AXI_RRESP ),
        .S_AXI_RVALID(S_AXI_RVALID),
        .S_AXI_WDATA({S_AXI_WDATA[4],S_AXI_WDATA[2:0]}),
        .S_AXI_WVALID(S_AXI_WVALID),
        .bus2ip_rdce(bus2ip_rdce),
        .bus2ip_wrce(bus2ip_wrce),
        .clear_Ext_BRK(clear_Ext_BRK),
        .enable_interrupts(enable_interrupts),
        .fifo_Data_Present(\JTAG_CONTROL_I/fifo_Data_Present ),
        .out(\JTAG_CONTROL_I/p_0_in44_in ),
        .reset_RX_FIFO_i(reset_RX_FIFO_i),
        .reset_TX_FIFO_i(reset_TX_FIFO_i),
        .rst_reg(MDM_Core_I1_n_12),
        .rx_Data_Present(rx_Data_Present),
        .tx_Buffer_Full(tx_Buffer_Full));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_BSCANE2 \Use_E2.BSCAN_I 
       (.AR(sel_n_reset),
        .D(p_0_in),
        .DRCK(DRCK),
        .Dbg_Update_0(Dbg_Update_0),
        .Ext_JTAG_RESET(Ext_JTAG_RESET),
        .I0(TDI),
        .Q(MDM_Core_I1_n_0),
        .SEL(SEL),
        .Scan_En(Scan_En),
        .Scan_Reset(Scan_Reset),
        .Scan_Reset_Sel(Scan_Reset_Sel),
        .\Use_BSCAN.PORT_Selector_reg[0] (Ext_JTAG_CAPTURE),
        .\Use_BSCAN.PORT_Selector_reg[0]_0 (Ext_JTAG_SHIFT),
        .\Use_BSCAN.command_reg[5] (\JTAG_CONTROL_I/sel ),
        .\Use_E2.BSCANE2_I_0 (\Use_E2.BSCAN_I_n_9 ),
        .\Use_Serial_Unified_Completion.completion_status_reg[15] (MDM_Core_I1_n_34),
        .\Use_Serial_Unified_Completion.count_reg[5] (\JTAG_CONTROL_I/Use_Serial_Unified_Completion.count_reg ),
        .\Use_Serial_Unified_Completion.sample_1_reg[15] (\Use_E2.BSCAN_I_n_14 ),
        .\Using_FPGA.Native (\Use_E2.BSCAN_I_n_8 ),
        .completion_status137_out(\JTAG_CONTROL_I/completion_status137_out ),
        .mb_data_overrun1__0(\JTAG_CONTROL_I/mb_data_overrun1__0 ),
        .\shift_Count_reg[0] (\Use_E2.BSCAN_I_n_13 ),
        .shift_n_reset(shift_n_reset),
        .tdo(tdo));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_mdm_v3_2_17_MB_LUT1 \Use_E2.LUT1_I 
       (.Dbg_TDI_0(Dbg_TDI_0),
        .I0(TDI));
  VCC VCC
       (.P(\<const1> ));
endmodule

module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MDM_Core
   (Q,
    rx_Data_Present,
    RX_Data,
    fifo_Data_Present,
    out,
    \ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ,
    Ext_NM_BRK,
    Debug_SYS_Rst,
    Dbg_Rst_0,
    Dbg_Disable_0,
    Ext_BRK,
    enable_interrupts,
    Dbg_Reg_En_0,
    mb_data_overrun1__0,
    completion_status137_out,
    E,
    Ext_JTAG_SEL,
    tdo,
    tx_Buffer_Full,
    RX_Buffer_Full,
    \Use_Serial_Unified_Completion.sample_1_reg[15] ,
    \Use_Serial_Unified_Completion.count_reg[5] ,
    Interrupt,
    bus2ip_wrce,
    S_AXI_ACLK,
    CLK,
    \Using_FPGA.Native ,
    S_AXI_WDATA,
    reset_RX_FIFO_i,
    reset_TX_FIFO_i,
    sel_n_reg,
    clear_Ext_BRK,
    \Use_Uart.enable_interrupts_reg_0 ,
    shift_n_reset,
    Scan_Reset,
    Scan_Reset_Sel,
    Scan_En,
    \Use_UART.fifo_Din_reg[7] ,
    SEL,
    Ext_JTAG_TDO,
    Dbg_TDO_0,
    FIFO_Write,
    Bus_RNW_reg,
    \GEN_BKEND_CE_REGISTERS[1].ce_out_i_reg ,
    bus2ip_rdce,
    S_AXI_ARESETN,
    D,
    \GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg ,
    Dbg_TDI_0,
    \shift_Count_reg[0] ,
    \Use_UART.tdo_reg_reg[7] ,
    \Use_Serial_Unified_Completion.completion_status_reg[10] ,
    \Use_Serial_Unified_Completion.completion_status_reg[15] ,
    AR,
    \Use_Serial_Unified_Completion.count_reg[5]_0 );
  output [0:0]Q;
  output rx_Data_Present;
  output [0:7]RX_Data;
  output fifo_Data_Present;
  output out;
  output \ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ;
  output Ext_NM_BRK;
  output Debug_SYS_Rst;
  output Dbg_Rst_0;
  output Dbg_Disable_0;
  output Ext_BRK;
  output enable_interrupts;
  output [0:7]Dbg_Reg_En_0;
  output mb_data_overrun1__0;
  output completion_status137_out;
  output [0:0]E;
  output Ext_JTAG_SEL;
  output tdo;
  output tx_Buffer_Full;
  output RX_Buffer_Full;
  output [0:0]\Use_Serial_Unified_Completion.sample_1_reg[15] ;
  output [0:0]\Use_Serial_Unified_Completion.count_reg[5] ;
  output Interrupt;
  input [0:0]bus2ip_wrce;
  input S_AXI_ACLK;
  input CLK;
  input \Using_FPGA.Native ;
  input [7:0]S_AXI_WDATA;
  input reset_RX_FIFO_i;
  input reset_TX_FIFO_i;
  input sel_n_reg;
  input clear_Ext_BRK;
  input \Use_Uart.enable_interrupts_reg_0 ;
  input shift_n_reset;
  input Scan_Reset;
  input Scan_Reset_Sel;
  input Scan_En;
  input \Use_UART.fifo_Din_reg[7] ;
  input SEL;
  input Ext_JTAG_TDO;
  input Dbg_TDO_0;
  input FIFO_Write;
  input Bus_RNW_reg;
  input \GEN_BKEND_CE_REGISTERS[1].ce_out_i_reg ;
  input [0:0]bus2ip_rdce;
  input S_AXI_ARESETN;
  input [0:0]D;
  input \GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg ;
  input Dbg_TDI_0;
  input [0:0]\shift_Count_reg[0] ;
  input [0:0]\Use_UART.tdo_reg_reg[7] ;
  input [0:0]\Use_Serial_Unified_Completion.completion_status_reg[10] ;
  input [0:0]\Use_Serial_Unified_Completion.completion_status_reg[15] ;
  input [0:0]AR;
  input [0:0]\Use_Serial_Unified_Completion.count_reg[5]_0 ;

  wire \ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ;
  wire [0:0]AR;
  wire Bus_RNW_reg;
  wire CLK;
  wire [0:0]Config_Reg;
  wire [0:0]D;
  wire Dbg_Disable_0;
  wire [0:7]Dbg_Reg_En_0;
  wire Dbg_Rst_0;
  wire Dbg_TDI_0;
  wire Dbg_TDO_0;
  wire Debug_SYS_Rst;
  wire [0:0]E;
  wire Ext_BRK;
  wire Ext_JTAG_SEL;
  wire Ext_JTAG_TDO;
  wire Ext_NM_BRK;
  wire FIFO_Write;
  wire \GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg ;
  wire \GEN_BKEND_CE_REGISTERS[1].ce_out_i_reg ;
  wire Interrupt;
  wire MDM_SEL;
  wire [3:0]PORT_Selector;
  wire [3:0]PORT_Selector_1;
  wire [0:0]Q;
  wire Q_0;
  wire RX_Buffer_Full;
  wire [0:7]RX_Data;
  wire SEL;
  wire S_AXI_ACLK;
  wire S_AXI_ARESETN;
  wire [7:0]S_AXI_WDATA;
  wire Scan_En;
  wire Scan_Reset;
  wire Scan_Reset_Sel;
  wire [3:0]TDI_Shifter;
  wire TDI_Shifter0;
  wire \Use_BSCAN.Config_Reg_reg[11]_MDM_Core_I1_Use_BSCAN.Config_Reg_reg_c_12_n_0 ;
  wire \Use_BSCAN.Config_Reg_reg[12]_srl13_MDM_Core_I1_Use_BSCAN.Config_Reg_reg_c_11_n_0 ;
  wire \Use_BSCAN.Config_Reg_reg[27]_MDM_Core_I1_Use_BSCAN.Config_Reg_reg_c_1_n_0 ;
  wire \Use_BSCAN.Config_Reg_reg[28]_srl2_MDM_Core_I1_Use_BSCAN.Config_Reg_reg_c_0_n_0 ;
  wire \Use_BSCAN.Config_Reg_reg[4]_MDM_Core_I1_Use_BSCAN.Config_Reg_reg_c_3_n_0 ;
  wire \Use_BSCAN.Config_Reg_reg[5]_srl4_MDM_Core_I1_Use_BSCAN.Config_Reg_reg_c_2_n_0 ;
  wire \Use_BSCAN.Config_Reg_reg_c_0_n_0 ;
  wire \Use_BSCAN.Config_Reg_reg_c_10_n_0 ;
  wire \Use_BSCAN.Config_Reg_reg_c_11_n_0 ;
  wire \Use_BSCAN.Config_Reg_reg_c_12_n_0 ;
  wire \Use_BSCAN.Config_Reg_reg_c_1_n_0 ;
  wire \Use_BSCAN.Config_Reg_reg_c_2_n_0 ;
  wire \Use_BSCAN.Config_Reg_reg_c_3_n_0 ;
  wire \Use_BSCAN.Config_Reg_reg_c_4_n_0 ;
  wire \Use_BSCAN.Config_Reg_reg_c_5_n_0 ;
  wire \Use_BSCAN.Config_Reg_reg_c_6_n_0 ;
  wire \Use_BSCAN.Config_Reg_reg_c_7_n_0 ;
  wire \Use_BSCAN.Config_Reg_reg_c_8_n_0 ;
  wire \Use_BSCAN.Config_Reg_reg_c_9_n_0 ;
  wire \Use_BSCAN.Config_Reg_reg_c_n_0 ;
  wire \Use_BSCAN.Config_Reg_reg_gate__0_n_0 ;
  wire \Use_BSCAN.Config_Reg_reg_gate__1_n_0 ;
  wire \Use_BSCAN.Config_Reg_reg_gate_n_0 ;
  wire \Use_BSCAN.Config_Reg_reg_n_0_[10] ;
  wire \Use_BSCAN.Config_Reg_reg_n_0_[1] ;
  wire \Use_BSCAN.Config_Reg_reg_n_0_[25] ;
  wire \Use_BSCAN.Config_Reg_reg_n_0_[26] ;
  wire \Use_BSCAN.Config_Reg_reg_n_0_[2] ;
  wire \Use_BSCAN.Config_Reg_reg_n_0_[30] ;
  wire \Use_BSCAN.Config_Reg_reg_n_0_[3] ;
  wire \Use_BSCAN.Config_Reg_reg_n_0_[9] ;
  wire \Use_E2.BSCANE2_I_i_2_n_0 ;
  wire [0:0]\Use_Serial_Unified_Completion.completion_status_reg[10] ;
  wire [0:0]\Use_Serial_Unified_Completion.completion_status_reg[15] ;
  wire [0:0]\Use_Serial_Unified_Completion.count_reg[5] ;
  wire [0:0]\Use_Serial_Unified_Completion.count_reg[5]_0 ;
  wire [0:0]\Use_Serial_Unified_Completion.sample_1_reg[15] ;
  wire \Use_UART.fifo_Din_reg[7] ;
  wire [0:0]\Use_UART.tdo_reg_reg[7] ;
  wire \Use_Uart.clear_Ext_BRK_reg_n_0 ;
  wire \Use_Uart.enable_interrupts_reg_0 ;
  wire \Use_Uart.reset_RX_FIFO_i_reg_n_0 ;
  wire \Use_Uart.reset_TX_FIFO_i_reg_n_0 ;
  wire \Using_FPGA.Native ;
  wire [0:0]bus2ip_rdce;
  wire [0:0]bus2ip_wrce;
  wire clear_Ext_BRK;
  wire completion_status137_out;
  wire config_with_scan_reset;
  wire enable_interrupts;
  wire fifo_Data_Present;
  wire mb_data_overrun1__0;
  wire out;
  wire reset_RX_FIFO_i;
  wire reset_TX_FIFO_i;
  wire rx_Data_Present;
  wire sel_n_reg;
  wire [0:0]\shift_Count_reg[0] ;
  wire shift_n_reset;
  wire tdo;
  wire tx_Buffer_Empty;
  wire tx_Buffer_Full;

  LUT5 #(
    .INIT(32'h00000008)) 
    Ext_JTAG_SEL_INST_0
       (.I0(SEL),
        .I1(PORT_Selector[1]),
        .I2(PORT_Selector[0]),
        .I3(PORT_Selector[3]),
        .I4(PORT_Selector[2]),
        .O(Ext_JTAG_SEL));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_JTAG_CONTROL JTAG_CONTROL_I
       (.AR(config_with_scan_reset),
        .Bus_RNW_reg(Bus_RNW_reg),
        .CLK(CLK),
        .D(D),
        .Dbg_Reg_En_0(Dbg_Reg_En_0),
        .Dbg_Rst_0(Dbg_Rst_0),
        .Dbg_TDI_0(Dbg_TDI_0),
        .Dbg_TDO_0(Dbg_TDO_0),
        .Debug_SYS_Rst(Debug_SYS_Rst),
        .E(E),
        .Ext_BRK(Ext_BRK),
        .Ext_NM_BRK(Ext_NM_BRK),
        .FIFO_Write(FIFO_Write),
        .\GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg (\GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg ),
        .\GEN_BKEND_CE_REGISTERS[1].ce_out_i_reg (\GEN_BKEND_CE_REGISTERS[1].ce_out_i_reg ),
        .Interrupt(Interrupt),
        .Q(Q),
        .Q_0(Q_0),
        .RX_Buffer_Full(RX_Buffer_Full),
        .RX_Data(RX_Data),
        .SEL(SEL),
        .S_AXI_ACLK(S_AXI_ACLK),
        .S_AXI_WDATA(S_AXI_WDATA),
        .Scan_En(Scan_En),
        .Scan_Reset(Scan_Reset),
        .Scan_Reset_Sel(Scan_Reset_Sel),
        .\Use_Serial_Unified_Completion.completion_status_reg[10]_0 (\Use_Serial_Unified_Completion.completion_status_reg[10] ),
        .\Use_Serial_Unified_Completion.completion_status_reg[15]_0 (\Use_Serial_Unified_Completion.completion_status_reg[15] ),
        .\Use_Serial_Unified_Completion.count_reg[5]_0 (\Use_Serial_Unified_Completion.count_reg[5] ),
        .\Use_Serial_Unified_Completion.count_reg[5]_1 (\Use_Serial_Unified_Completion.count_reg[5]_0 ),
        .\Use_Serial_Unified_Completion.sample_1_reg[15]_0 (\Use_Serial_Unified_Completion.sample_1_reg[15] ),
        .\Use_UART.fifo_Din_reg[7]_0 (\Use_UART.fifo_Din_reg[7] ),
        .\Use_UART.tdo_reg_reg[7]_0 (\Use_UART.tdo_reg_reg[7] ),
        .\Using_FPGA.Native (completion_status137_out),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Use_Uart.reset_RX_FIFO_i_reg_n_0 ),
        .\Using_FPGA.Native_2 (\Use_Uart.reset_TX_FIFO_i_reg_n_0 ),
        .\Using_FPGA.Native_3 (\Use_Uart.clear_Ext_BRK_reg_n_0 ),
        .bus2ip_rdce(bus2ip_rdce),
        .\command_1_reg[7]_0 (PORT_Selector),
        .data_Exists_I_reg(rx_Data_Present),
        .data_Exists_I_reg_0(fifo_Data_Present),
        .enable_interrupts(enable_interrupts),
        .mb_data_overrun1__0(mb_data_overrun1__0),
        .out(out),
        .sel_n_reg_0(sel_n_reg),
        .sel_n_reg_1(\Use_E2.BSCANE2_I_i_2_n_0 ),
        .\shift_Count_reg[0]_0 (\shift_Count_reg[0] ),
        .tdo(tdo),
        .tx_Buffer_Empty(tx_Buffer_Empty),
        .tx_Buffer_Full(tx_Buffer_Full));
  (* SHREG_EXTRACT = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Use_BSCAN.Config_Reg_reg[0] 
       (.C(\Using_FPGA.Native ),
        .CE(1'b1),
        .CLR(shift_n_reset),
        .D(\Use_BSCAN.Config_Reg_reg_n_0_[1] ),
        .Q(Config_Reg));
  FDCE \Use_BSCAN.Config_Reg_reg[10] 
       (.C(\Using_FPGA.Native ),
        .CE(1'b1),
        .CLR(shift_n_reset),
        .D(\Use_BSCAN.Config_Reg_reg_gate__0_n_0 ),
        .Q(\Use_BSCAN.Config_Reg_reg_n_0_[10] ));
  FDRE \Use_BSCAN.Config_Reg_reg[11]_MDM_Core_I1_Use_BSCAN.Config_Reg_reg_c_12 
       (.C(\Using_FPGA.Native ),
        .CE(1'b1),
        .D(\Use_BSCAN.Config_Reg_reg[12]_srl13_MDM_Core_I1_Use_BSCAN.Config_Reg_reg_c_11_n_0 ),
        .Q(\Use_BSCAN.Config_Reg_reg[11]_MDM_Core_I1_Use_BSCAN.Config_Reg_reg_c_12_n_0 ),
        .R(1'b0));
  (* srl_bus_name = "inst/mdm_0/U0/\MDM_Core_I1/Use_BSCAN.Config_Reg_reg " *) 
  (* srl_name = "inst/mdm_0/U0/\MDM_Core_I1/Use_BSCAN.Config_Reg_reg[12]_srl13_MDM_Core_I1_Use_BSCAN.Config_Reg_reg_c_11 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \Use_BSCAN.Config_Reg_reg[12]_srl13_MDM_Core_I1_Use_BSCAN.Config_Reg_reg_c_11 
       (.A0(1'b0),
        .A1(1'b0),
        .A2(1'b1),
        .A3(1'b1),
        .CE(1'b1),
        .CLK(\Using_FPGA.Native ),
        .D(\Use_BSCAN.Config_Reg_reg_n_0_[25] ),
        .Q(\Use_BSCAN.Config_Reg_reg[12]_srl13_MDM_Core_I1_Use_BSCAN.Config_Reg_reg_c_11_n_0 ));
  (* SHREG_EXTRACT = "yes" *) 
  FDPE #(
    .INIT(1'b1)) 
    \Use_BSCAN.Config_Reg_reg[1] 
       (.C(\Using_FPGA.Native ),
        .CE(1'b1),
        .D(\Use_BSCAN.Config_Reg_reg_n_0_[2] ),
        .PRE(shift_n_reset),
        .Q(\Use_BSCAN.Config_Reg_reg_n_0_[1] ));
  (* SHREG_EXTRACT = "yes" *) 
  FDPE #(
    .INIT(1'b1)) 
    \Use_BSCAN.Config_Reg_reg[25] 
       (.C(\Using_FPGA.Native ),
        .CE(1'b1),
        .D(\Use_BSCAN.Config_Reg_reg_n_0_[26] ),
        .PRE(shift_n_reset),
        .Q(\Use_BSCAN.Config_Reg_reg_n_0_[25] ));
  FDCE \Use_BSCAN.Config_Reg_reg[26] 
       (.C(\Using_FPGA.Native ),
        .CE(1'b1),
        .CLR(shift_n_reset),
        .D(\Use_BSCAN.Config_Reg_reg_gate_n_0 ),
        .Q(\Use_BSCAN.Config_Reg_reg_n_0_[26] ));
  FDRE \Use_BSCAN.Config_Reg_reg[27]_MDM_Core_I1_Use_BSCAN.Config_Reg_reg_c_1 
       (.C(\Using_FPGA.Native ),
        .CE(1'b1),
        .D(\Use_BSCAN.Config_Reg_reg[28]_srl2_MDM_Core_I1_Use_BSCAN.Config_Reg_reg_c_0_n_0 ),
        .Q(\Use_BSCAN.Config_Reg_reg[27]_MDM_Core_I1_Use_BSCAN.Config_Reg_reg_c_1_n_0 ),
        .R(1'b0));
  (* srl_bus_name = "inst/mdm_0/U0/\MDM_Core_I1/Use_BSCAN.Config_Reg_reg " *) 
  (* srl_name = "inst/mdm_0/U0/\MDM_Core_I1/Use_BSCAN.Config_Reg_reg[28]_srl2_MDM_Core_I1_Use_BSCAN.Config_Reg_reg_c_0 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \Use_BSCAN.Config_Reg_reg[28]_srl2_MDM_Core_I1_Use_BSCAN.Config_Reg_reg_c_0 
       (.A0(1'b1),
        .A1(1'b0),
        .A2(1'b0),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(\Using_FPGA.Native ),
        .D(\Use_BSCAN.Config_Reg_reg_n_0_[30] ),
        .Q(\Use_BSCAN.Config_Reg_reg[28]_srl2_MDM_Core_I1_Use_BSCAN.Config_Reg_reg_c_0_n_0 ));
  (* SHREG_EXTRACT = "yes" *) 
  FDPE #(
    .INIT(1'b1)) 
    \Use_BSCAN.Config_Reg_reg[2] 
       (.C(\Using_FPGA.Native ),
        .CE(1'b1),
        .D(\Use_BSCAN.Config_Reg_reg_n_0_[3] ),
        .PRE(shift_n_reset),
        .Q(\Use_BSCAN.Config_Reg_reg_n_0_[2] ));
  (* SHREG_EXTRACT = "yes" *) 
  FDPE #(
    .INIT(1'b1)) 
    \Use_BSCAN.Config_Reg_reg[30] 
       (.C(\Using_FPGA.Native ),
        .CE(1'b1),
        .D(1'b0),
        .PRE(shift_n_reset),
        .Q(\Use_BSCAN.Config_Reg_reg_n_0_[30] ));
  FDCE \Use_BSCAN.Config_Reg_reg[3] 
       (.C(\Using_FPGA.Native ),
        .CE(1'b1),
        .CLR(shift_n_reset),
        .D(\Use_BSCAN.Config_Reg_reg_gate__1_n_0 ),
        .Q(\Use_BSCAN.Config_Reg_reg_n_0_[3] ));
  FDRE \Use_BSCAN.Config_Reg_reg[4]_MDM_Core_I1_Use_BSCAN.Config_Reg_reg_c_3 
       (.C(\Using_FPGA.Native ),
        .CE(1'b1),
        .D(\Use_BSCAN.Config_Reg_reg[5]_srl4_MDM_Core_I1_Use_BSCAN.Config_Reg_reg_c_2_n_0 ),
        .Q(\Use_BSCAN.Config_Reg_reg[4]_MDM_Core_I1_Use_BSCAN.Config_Reg_reg_c_3_n_0 ),
        .R(1'b0));
  (* srl_bus_name = "inst/mdm_0/U0/\MDM_Core_I1/Use_BSCAN.Config_Reg_reg " *) 
  (* srl_name = "inst/mdm_0/U0/\MDM_Core_I1/Use_BSCAN.Config_Reg_reg[5]_srl4_MDM_Core_I1_Use_BSCAN.Config_Reg_reg_c_2 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \Use_BSCAN.Config_Reg_reg[5]_srl4_MDM_Core_I1_Use_BSCAN.Config_Reg_reg_c_2 
       (.A0(1'b1),
        .A1(1'b1),
        .A2(1'b0),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(\Using_FPGA.Native ),
        .D(\Use_BSCAN.Config_Reg_reg_n_0_[9] ),
        .Q(\Use_BSCAN.Config_Reg_reg[5]_srl4_MDM_Core_I1_Use_BSCAN.Config_Reg_reg_c_2_n_0 ));
  (* SHREG_EXTRACT = "yes" *) 
  FDPE #(
    .INIT(1'b1)) 
    \Use_BSCAN.Config_Reg_reg[9] 
       (.C(\Using_FPGA.Native ),
        .CE(1'b1),
        .D(\Use_BSCAN.Config_Reg_reg_n_0_[10] ),
        .PRE(shift_n_reset),
        .Q(\Use_BSCAN.Config_Reg_reg_n_0_[9] ));
  FDCE \Use_BSCAN.Config_Reg_reg_c 
       (.C(\Using_FPGA.Native ),
        .CE(1'b1),
        .CLR(shift_n_reset),
        .D(1'b1),
        .Q(\Use_BSCAN.Config_Reg_reg_c_n_0 ));
  FDCE \Use_BSCAN.Config_Reg_reg_c_0 
       (.C(\Using_FPGA.Native ),
        .CE(1'b1),
        .CLR(shift_n_reset),
        .D(\Use_BSCAN.Config_Reg_reg_c_n_0 ),
        .Q(\Use_BSCAN.Config_Reg_reg_c_0_n_0 ));
  FDCE \Use_BSCAN.Config_Reg_reg_c_1 
       (.C(\Using_FPGA.Native ),
        .CE(1'b1),
        .CLR(shift_n_reset),
        .D(\Use_BSCAN.Config_Reg_reg_c_0_n_0 ),
        .Q(\Use_BSCAN.Config_Reg_reg_c_1_n_0 ));
  FDCE \Use_BSCAN.Config_Reg_reg_c_10 
       (.C(\Using_FPGA.Native ),
        .CE(1'b1),
        .CLR(shift_n_reset),
        .D(\Use_BSCAN.Config_Reg_reg_c_9_n_0 ),
        .Q(\Use_BSCAN.Config_Reg_reg_c_10_n_0 ));
  FDCE \Use_BSCAN.Config_Reg_reg_c_11 
       (.C(\Using_FPGA.Native ),
        .CE(1'b1),
        .CLR(shift_n_reset),
        .D(\Use_BSCAN.Config_Reg_reg_c_10_n_0 ),
        .Q(\Use_BSCAN.Config_Reg_reg_c_11_n_0 ));
  FDCE \Use_BSCAN.Config_Reg_reg_c_12 
       (.C(\Using_FPGA.Native ),
        .CE(1'b1),
        .CLR(shift_n_reset),
        .D(\Use_BSCAN.Config_Reg_reg_c_11_n_0 ),
        .Q(\Use_BSCAN.Config_Reg_reg_c_12_n_0 ));
  FDCE \Use_BSCAN.Config_Reg_reg_c_2 
       (.C(\Using_FPGA.Native ),
        .CE(1'b1),
        .CLR(shift_n_reset),
        .D(\Use_BSCAN.Config_Reg_reg_c_1_n_0 ),
        .Q(\Use_BSCAN.Config_Reg_reg_c_2_n_0 ));
  FDCE \Use_BSCAN.Config_Reg_reg_c_3 
       (.C(\Using_FPGA.Native ),
        .CE(1'b1),
        .CLR(shift_n_reset),
        .D(\Use_BSCAN.Config_Reg_reg_c_2_n_0 ),
        .Q(\Use_BSCAN.Config_Reg_reg_c_3_n_0 ));
  FDCE \Use_BSCAN.Config_Reg_reg_c_4 
       (.C(\Using_FPGA.Native ),
        .CE(1'b1),
        .CLR(shift_n_reset),
        .D(\Use_BSCAN.Config_Reg_reg_c_3_n_0 ),
        .Q(\Use_BSCAN.Config_Reg_reg_c_4_n_0 ));
  FDCE \Use_BSCAN.Config_Reg_reg_c_5 
       (.C(\Using_FPGA.Native ),
        .CE(1'b1),
        .CLR(shift_n_reset),
        .D(\Use_BSCAN.Config_Reg_reg_c_4_n_0 ),
        .Q(\Use_BSCAN.Config_Reg_reg_c_5_n_0 ));
  FDCE \Use_BSCAN.Config_Reg_reg_c_6 
       (.C(\Using_FPGA.Native ),
        .CE(1'b1),
        .CLR(shift_n_reset),
        .D(\Use_BSCAN.Config_Reg_reg_c_5_n_0 ),
        .Q(\Use_BSCAN.Config_Reg_reg_c_6_n_0 ));
  FDCE \Use_BSCAN.Config_Reg_reg_c_7 
       (.C(\Using_FPGA.Native ),
        .CE(1'b1),
        .CLR(shift_n_reset),
        .D(\Use_BSCAN.Config_Reg_reg_c_6_n_0 ),
        .Q(\Use_BSCAN.Config_Reg_reg_c_7_n_0 ));
  FDCE \Use_BSCAN.Config_Reg_reg_c_8 
       (.C(\Using_FPGA.Native ),
        .CE(1'b1),
        .CLR(shift_n_reset),
        .D(\Use_BSCAN.Config_Reg_reg_c_7_n_0 ),
        .Q(\Use_BSCAN.Config_Reg_reg_c_8_n_0 ));
  FDCE \Use_BSCAN.Config_Reg_reg_c_9 
       (.C(\Using_FPGA.Native ),
        .CE(1'b1),
        .CLR(shift_n_reset),
        .D(\Use_BSCAN.Config_Reg_reg_c_8_n_0 ),
        .Q(\Use_BSCAN.Config_Reg_reg_c_9_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \Use_BSCAN.Config_Reg_reg_gate 
       (.I0(\Use_BSCAN.Config_Reg_reg[27]_MDM_Core_I1_Use_BSCAN.Config_Reg_reg_c_1_n_0 ),
        .I1(\Use_BSCAN.Config_Reg_reg_c_1_n_0 ),
        .O(\Use_BSCAN.Config_Reg_reg_gate_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \Use_BSCAN.Config_Reg_reg_gate__0 
       (.I0(\Use_BSCAN.Config_Reg_reg[11]_MDM_Core_I1_Use_BSCAN.Config_Reg_reg_c_12_n_0 ),
        .I1(\Use_BSCAN.Config_Reg_reg_c_12_n_0 ),
        .O(\Use_BSCAN.Config_Reg_reg_gate__0_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \Use_BSCAN.Config_Reg_reg_gate__1 
       (.I0(\Use_BSCAN.Config_Reg_reg[4]_MDM_Core_I1_Use_BSCAN.Config_Reg_reg_c_3_n_0 ),
        .I1(\Use_BSCAN.Config_Reg_reg_c_3_n_0 ),
        .O(\Use_BSCAN.Config_Reg_reg_gate__1_n_0 ));
  LUT5 #(
    .INIT(32'h00000002)) 
    \Use_BSCAN.PORT_Selector_1[3]_i_1 
       (.I0(SEL),
        .I1(PORT_Selector[0]),
        .I2(PORT_Selector[1]),
        .I3(PORT_Selector[3]),
        .I4(PORT_Selector[2]),
        .O(MDM_SEL));
  FDCE #(
    .INIT(1'b0)) 
    \Use_BSCAN.PORT_Selector_1_reg[0] 
       (.C(CLK),
        .CE(MDM_SEL),
        .CLR(AR),
        .D(TDI_Shifter[0]),
        .Q(PORT_Selector_1[0]));
  FDCE #(
    .INIT(1'b0)) 
    \Use_BSCAN.PORT_Selector_1_reg[1] 
       (.C(CLK),
        .CE(MDM_SEL),
        .CLR(AR),
        .D(TDI_Shifter[1]),
        .Q(PORT_Selector_1[1]));
  FDCE #(
    .INIT(1'b0)) 
    \Use_BSCAN.PORT_Selector_1_reg[2] 
       (.C(CLK),
        .CE(MDM_SEL),
        .CLR(AR),
        .D(TDI_Shifter[2]),
        .Q(PORT_Selector_1[2]));
  FDCE #(
    .INIT(1'b0)) 
    \Use_BSCAN.PORT_Selector_1_reg[3] 
       (.C(CLK),
        .CE(MDM_SEL),
        .CLR(AR),
        .D(TDI_Shifter[3]),
        .Q(PORT_Selector_1[3]));
  FDCE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b1)) 
    \Use_BSCAN.PORT_Selector_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(AR),
        .D(PORT_Selector_1[0]),
        .Q(PORT_Selector[0]));
  FDCE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b1)) 
    \Use_BSCAN.PORT_Selector_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(AR),
        .D(PORT_Selector_1[1]),
        .Q(PORT_Selector[1]));
  FDCE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b1)) 
    \Use_BSCAN.PORT_Selector_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(AR),
        .D(PORT_Selector_1[2]),
        .Q(PORT_Selector[2]));
  FDCE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b1)) 
    \Use_BSCAN.PORT_Selector_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(AR),
        .D(PORT_Selector_1[3]),
        .Q(PORT_Selector[3]));
  LUT6 #(
    .INIT(64'h0001000000000000)) 
    \Use_BSCAN.TDI_Shifter[3]_i_1 
       (.I0(PORT_Selector[2]),
        .I1(PORT_Selector[3]),
        .I2(PORT_Selector[1]),
        .I3(PORT_Selector[0]),
        .I4(SEL),
        .I5(\Use_UART.fifo_Din_reg[7] ),
        .O(TDI_Shifter0));
  FDCE #(
    .INIT(1'b0)) 
    \Use_BSCAN.TDI_Shifter_reg[0] 
       (.C(\Using_FPGA.Native ),
        .CE(TDI_Shifter0),
        .CLR(AR),
        .D(TDI_Shifter[1]),
        .Q(TDI_Shifter[0]));
  FDCE #(
    .INIT(1'b0)) 
    \Use_BSCAN.TDI_Shifter_reg[1] 
       (.C(\Using_FPGA.Native ),
        .CE(TDI_Shifter0),
        .CLR(AR),
        .D(TDI_Shifter[2]),
        .Q(TDI_Shifter[1]));
  FDCE #(
    .INIT(1'b0)) 
    \Use_BSCAN.TDI_Shifter_reg[2] 
       (.C(\Using_FPGA.Native ),
        .CE(TDI_Shifter0),
        .CLR(AR),
        .D(TDI_Shifter[3]),
        .Q(TDI_Shifter[2]));
  FDCE #(
    .INIT(1'b0)) 
    \Use_BSCAN.TDI_Shifter_reg[3] 
       (.C(\Using_FPGA.Native ),
        .CE(TDI_Shifter0),
        .CLR(AR),
        .D(Dbg_TDI_0),
        .Q(TDI_Shifter[3]));
  FDPE #(
    .INIT(1'b1)) 
    \Use_BSCAN.jtag_disable_reg 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .PRE(config_with_scan_reset),
        .Q(Dbg_Disable_0));
  LUT6 #(
    .INIT(64'hFEFEFEFEEEFFEEEE)) 
    \Use_E2.BSCANE2_I_i_2 
       (.I0(PORT_Selector[2]),
        .I1(PORT_Selector[3]),
        .I2(Ext_JTAG_TDO),
        .I3(PORT_Selector[0]),
        .I4(Config_Reg),
        .I5(PORT_Selector[1]),
        .O(\Use_E2.BSCANE2_I_i_2_n_0 ));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_mdm_v3_2_17_MB_FDRE \Use_Uart.TX_Buffer_Empty_FDRE 
       (.Q_0(Q_0),
        .S_AXI_ACLK(S_AXI_ACLK),
        .bus2ip_wrce(bus2ip_wrce),
        .tx_Buffer_Empty(tx_Buffer_Empty));
  FDRE \Use_Uart.clear_Ext_BRK_reg 
       (.C(S_AXI_ACLK),
        .CE(1'b1),
        .D(clear_Ext_BRK),
        .Q(\Use_Uart.clear_Ext_BRK_reg_n_0 ),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDRE \Use_Uart.enable_interrupts_reg 
       (.C(S_AXI_ACLK),
        .CE(1'b1),
        .D(\Use_Uart.enable_interrupts_reg_0 ),
        .Q(enable_interrupts),
        .R(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  LUT1 #(
    .INIT(2'h1)) 
    \Use_Uart.reset_RX_FIFO_i_i_1 
       (.I0(S_AXI_ARESETN),
        .O(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDSE \Use_Uart.reset_RX_FIFO_i_reg 
       (.C(S_AXI_ACLK),
        .CE(1'b1),
        .D(reset_RX_FIFO_i),
        .Q(\Use_Uart.reset_RX_FIFO_i_reg_n_0 ),
        .S(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
  FDSE \Use_Uart.reset_TX_FIFO_i_reg 
       (.C(S_AXI_ACLK),
        .CE(1'b1),
        .D(reset_TX_FIFO_i),
        .Q(\Use_Uart.reset_TX_FIFO_i_reg_n_0 ),
        .S(\ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N ));
endmodule

module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_UART_Receive
   (out,
    \not_First.Clk_En_Out_i_reg ,
    \TMR_No.rx_data_exists_i_reg_0 ,
    \TMR_No.new_rx_data_write_reg_0 ,
    \TMR_No.frame_error_reg ,
    Q,
    en_16x_baud,
    Clk,
    Rst,
    UART_Rx,
    \TMR_No.RX_Data_reg[0]_0 ,
    \TMR_No.RX_Data_reg[0]_1 ,
    \TMR_No.RX_Data_reg[0]_2 ,
    \TMR_No.RX_Data_reg[0]_3 ,
    \TMR_No.RX_Data_reg[0]_4 ,
    \TMR_No.RX_Data_reg[0]_5 ,
    SR,
    D);
  output out;
  output \not_First.Clk_En_Out_i_reg ;
  output [0:0]\TMR_No.rx_data_exists_i_reg_0 ;
  output \TMR_No.new_rx_data_write_reg_0 ;
  output \TMR_No.frame_error_reg ;
  output [7:0]Q;
  input en_16x_baud;
  input Clk;
  input Rst;
  input UART_Rx;
  input \TMR_No.RX_Data_reg[0]_0 ;
  input \TMR_No.RX_Data_reg[0]_1 ;
  input \TMR_No.RX_Data_reg[0]_2 ;
  input \TMR_No.RX_Data_reg[0]_3 ;
  input \TMR_No.RX_Data_reg[0]_4 ;
  input \TMR_No.RX_Data_reg[0]_5 ;
  input [0:0]SR;
  input [1:0]D;

  wire Clk;
  wire [1:0]D;
  wire D_0;
  wire [7:0]Q;
  wire RX_Data0;
  wire Rst;
  wire [0:0]SR;
  wire \TMR_No.Convert_Serial_To_Parallel[2].serial_to_parallel_reg ;
  wire \TMR_No.Convert_Serial_To_Parallel[3].serial_to_parallel_reg ;
  wire \TMR_No.Convert_Serial_To_Parallel[4].serial_to_parallel_reg ;
  wire \TMR_No.Convert_Serial_To_Parallel[5].serial_to_parallel_reg ;
  wire \TMR_No.Convert_Serial_To_Parallel[6].serial_to_parallel_reg ;
  wire \TMR_No.Convert_Serial_To_Parallel[7].serial_to_parallel_reg ;
  wire \TMR_No.Convert_Serial_To_Parallel[8].serial_to_parallel_reg ;
  wire \TMR_No.Delay_16_n_1 ;
  wire \TMR_No.Delay_16_n_2 ;
  wire \TMR_No.RX_Data_reg[0]_0 ;
  wire \TMR_No.RX_Data_reg[0]_1 ;
  wire \TMR_No.RX_Data_reg[0]_2 ;
  wire \TMR_No.RX_Data_reg[0]_3 ;
  wire \TMR_No.RX_Data_reg[0]_4 ;
  wire \TMR_No.RX_Data_reg[0]_5 ;
  wire \TMR_No.frame_error_reg ;
  wire \TMR_No.new_rx_data_write_reg0__0 ;
  wire \TMR_No.new_rx_data_write_reg_0 ;
  wire \TMR_No.previous_RX_i_1_n_0 ;
  wire \TMR_No.running_reg_n_0 ;
  wire \TMR_No.rx_data_exists_i_i_1_n_0 ;
  wire [0:0]\TMR_No.rx_data_exists_i_reg_0 ;
  wire \TMR_No.start_Edge_Detected_i_1_n_0 ;
  wire \TMR_No.start_Edge_Detected_reg_n_0 ;
  wire \TMR_No.stop_Bit_Position_reg_n_0 ;
  wire UART_Rx;
  wire en_16x_baud;
  wire mid_Start_Bit;
  (* RTL_KEEP = "true" *) wire [0:8]new_rx_data;
  (* RTL_KEEP = "true" *) wire new_rx_data_write;
  wire previous_RX;
  wire rx_1;
  wire [7:0]rx_data_i;
  (* RTL_KEEP = "true" *) wire rx_frame_error_i;
  (* RTL_KEEP = "true" *) wire rx_parity_error_i;
  wire sample_Point;

  assign \not_First.Clk_En_Out_i_reg  = rx_frame_error_i;
  assign out = new_rx_data_write;
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_iomodule_v3_1_5_MB_FDSE \TMR_No.Convert_Serial_To_Parallel[1].First_Bit.First_Bit_I 
       (.Clk(Clk),
        .D_0(D_0),
        .en_16x_baud(en_16x_baud),
        .in0(new_rx_data[1]),
        .mid_Start_Bit(mid_Start_Bit));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_iomodule_v3_1_5_MB_FDRE_868 \TMR_No.Convert_Serial_To_Parallel[2].Rest_Bits.Others_I 
       (.Clk(Clk),
        .\TMR_No.Convert_Serial_To_Parallel[2].serial_to_parallel_reg (\TMR_No.Convert_Serial_To_Parallel[2].serial_to_parallel_reg ),
        .en_16x_baud(en_16x_baud),
        .in0(new_rx_data[2]),
        .mid_Start_Bit(mid_Start_Bit));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_iomodule_v3_1_5_MB_FDRE_869 \TMR_No.Convert_Serial_To_Parallel[3].Rest_Bits.Others_I 
       (.Clk(Clk),
        .\TMR_No.Convert_Serial_To_Parallel[3].serial_to_parallel_reg (\TMR_No.Convert_Serial_To_Parallel[3].serial_to_parallel_reg ),
        .en_16x_baud(en_16x_baud),
        .in0(new_rx_data[3]),
        .mid_Start_Bit(mid_Start_Bit));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_iomodule_v3_1_5_MB_FDRE_870 \TMR_No.Convert_Serial_To_Parallel[4].Rest_Bits.Others_I 
       (.Clk(Clk),
        .\TMR_No.Convert_Serial_To_Parallel[4].serial_to_parallel_reg (\TMR_No.Convert_Serial_To_Parallel[4].serial_to_parallel_reg ),
        .en_16x_baud(en_16x_baud),
        .in0(new_rx_data[4]),
        .mid_Start_Bit(mid_Start_Bit));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_iomodule_v3_1_5_MB_FDRE_871 \TMR_No.Convert_Serial_To_Parallel[5].Rest_Bits.Others_I 
       (.Clk(Clk),
        .\TMR_No.Convert_Serial_To_Parallel[5].serial_to_parallel_reg (\TMR_No.Convert_Serial_To_Parallel[5].serial_to_parallel_reg ),
        .en_16x_baud(en_16x_baud),
        .in0(new_rx_data[5]),
        .mid_Start_Bit(mid_Start_Bit));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_iomodule_v3_1_5_MB_FDRE_872 \TMR_No.Convert_Serial_To_Parallel[6].Rest_Bits.Others_I 
       (.Clk(Clk),
        .\TMR_No.Convert_Serial_To_Parallel[6].serial_to_parallel_reg (\TMR_No.Convert_Serial_To_Parallel[6].serial_to_parallel_reg ),
        .en_16x_baud(en_16x_baud),
        .in0(new_rx_data[6]),
        .mid_Start_Bit(mid_Start_Bit));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_iomodule_v3_1_5_MB_FDRE_873 \TMR_No.Convert_Serial_To_Parallel[7].Rest_Bits.Others_I 
       (.Clk(Clk),
        .\TMR_No.Convert_Serial_To_Parallel[7].serial_to_parallel_reg (\TMR_No.Convert_Serial_To_Parallel[7].serial_to_parallel_reg ),
        .en_16x_baud(en_16x_baud),
        .in0(new_rx_data[7]),
        .mid_Start_Bit(mid_Start_Bit));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_iomodule_v3_1_5_MB_FDRE_874 \TMR_No.Convert_Serial_To_Parallel[8].Rest_Bits.Others_I 
       (.Clk(Clk),
        .\TMR_No.Convert_Serial_To_Parallel[8].serial_to_parallel_reg (\TMR_No.Convert_Serial_To_Parallel[8].serial_to_parallel_reg ),
        .en_16x_baud(en_16x_baud),
        .in0(new_rx_data[8]),
        .mid_Start_Bit(mid_Start_Bit));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_XIL_SRL16E__parameterized1 \TMR_No.Delay_16 
       (.Clk(Clk),
        .D_0(D_0),
        .\TMR_No.Convert_Serial_To_Parallel[2].serial_to_parallel_reg (\TMR_No.Convert_Serial_To_Parallel[2].serial_to_parallel_reg ),
        .\TMR_No.Convert_Serial_To_Parallel[3].serial_to_parallel_reg (\TMR_No.Convert_Serial_To_Parallel[3].serial_to_parallel_reg ),
        .\TMR_No.Convert_Serial_To_Parallel[4].serial_to_parallel_reg (\TMR_No.Convert_Serial_To_Parallel[4].serial_to_parallel_reg ),
        .\TMR_No.Convert_Serial_To_Parallel[5].serial_to_parallel_reg (\TMR_No.Convert_Serial_To_Parallel[5].serial_to_parallel_reg ),
        .\TMR_No.Convert_Serial_To_Parallel[6].serial_to_parallel_reg (\TMR_No.Convert_Serial_To_Parallel[6].serial_to_parallel_reg ),
        .\TMR_No.Convert_Serial_To_Parallel[7].serial_to_parallel_reg (\TMR_No.Convert_Serial_To_Parallel[7].serial_to_parallel_reg ),
        .\TMR_No.Convert_Serial_To_Parallel[8].serial_to_parallel_reg (\TMR_No.Convert_Serial_To_Parallel[8].serial_to_parallel_reg ),
        .\TMR_No.running_reg (\TMR_No.start_Edge_Detected_reg_n_0 ),
        .\TMR_No.running_reg_0 (\TMR_No.running_reg_n_0 ),
        .\TMR_No.stop_Bit_Position_reg (\TMR_No.Delay_16_n_2 ),
        .\TMR_No.stop_Bit_Position_reg_0 (\TMR_No.stop_Bit_Position_reg_n_0 ),
        .\Using_FPGA.Native (\TMR_No.Delay_16_n_1 ),
        .en_16x_baud(en_16x_baud),
        .mid_Start_Bit(mid_Start_Bit),
        .out({new_rx_data[0],new_rx_data[1],new_rx_data[2],new_rx_data[3],new_rx_data[4],new_rx_data[5],new_rx_data[6],new_rx_data[7],new_rx_data[8]}),
        .sample_Point(sample_Point));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_XIL_SRL16E__parameterized1_875 \TMR_No.Mid_Start_Bit_SRL16 
       (.Clk(Clk),
        .\Using_FPGA.Native (\TMR_No.start_Edge_Detected_reg_n_0 ),
        .en_16x_baud(en_16x_baud),
        .mid_Start_Bit(mid_Start_Bit));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFEFF)) 
    \TMR_No.RX_Data[7]_i_1 
       (.I0(\TMR_No.RX_Data_reg[0]_0 ),
        .I1(\TMR_No.RX_Data_reg[0]_1 ),
        .I2(\TMR_No.RX_Data_reg[0]_2 ),
        .I3(\TMR_No.RX_Data_reg[0]_3 ),
        .I4(\TMR_No.RX_Data_reg[0]_4 ),
        .I5(\TMR_No.RX_Data_reg[0]_5 ),
        .O(RX_Data0));
  FDRE \TMR_No.RX_Data_reg[0] 
       (.C(Clk),
        .CE(1'b1),
        .D(rx_data_i[0]),
        .Q(Q[0]),
        .R(RX_Data0));
  FDRE \TMR_No.RX_Data_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(rx_data_i[1]),
        .Q(Q[1]),
        .R(RX_Data0));
  FDRE \TMR_No.RX_Data_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(rx_data_i[2]),
        .Q(Q[2]),
        .R(RX_Data0));
  FDRE \TMR_No.RX_Data_reg[3] 
       (.C(Clk),
        .CE(1'b1),
        .D(rx_data_i[3]),
        .Q(Q[3]),
        .R(RX_Data0));
  FDRE \TMR_No.RX_Data_reg[4] 
       (.C(Clk),
        .CE(1'b1),
        .D(rx_data_i[4]),
        .Q(Q[4]),
        .R(RX_Data0));
  FDRE \TMR_No.RX_Data_reg[5] 
       (.C(Clk),
        .CE(1'b1),
        .D(rx_data_i[5]),
        .Q(Q[5]),
        .R(RX_Data0));
  FDRE \TMR_No.RX_Data_reg[6] 
       (.C(Clk),
        .CE(1'b1),
        .D(rx_data_i[6]),
        .Q(Q[6]),
        .R(RX_Data0));
  FDRE \TMR_No.RX_Data_reg[7] 
       (.C(Clk),
        .CE(1'b1),
        .D(rx_data_i[7]),
        .Q(Q[7]),
        .R(RX_Data0));
  LUT3 #(
    .INIT(8'hEA)) 
    \TMR_No.frame_error_i_1 
       (.I0(rx_frame_error_i),
        .I1(SR),
        .I2(D[1]),
        .O(\TMR_No.frame_error_reg ));
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDRE \TMR_No.new_rx_data_write_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\TMR_No.new_rx_data_write_reg0__0 ),
        .Q(new_rx_data_write),
        .R(Rst));
  LUT4 #(
    .INIT(16'h8000)) 
    \TMR_No.new_rx_data_write_reg0 
       (.I0(\TMR_No.stop_Bit_Position_reg_n_0 ),
        .I1(sample_Point),
        .I2(new_rx_data[0]),
        .I3(en_16x_baud),
        .O(\TMR_No.new_rx_data_write_reg0__0 ));
  LUT4 #(
    .INIT(16'hF888)) 
    \TMR_No.overrun_error_i_1 
       (.I0(new_rx_data_write),
        .I1(\TMR_No.rx_data_exists_i_reg_0 ),
        .I2(SR),
        .I3(D[0]),
        .O(\TMR_No.new_rx_data_write_reg_0 ));
  (* SOFT_HLUTNM = "soft_lutpair7" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \TMR_No.previous_RX_i_1 
       (.I0(new_rx_data[0]),
        .I1(en_16x_baud),
        .I2(previous_RX),
        .O(\TMR_No.previous_RX_i_1_n_0 ));
  FDRE \TMR_No.previous_RX_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\TMR_No.previous_RX_i_1_n_0 ),
        .Q(previous_RX),
        .R(Rst));
  FDRE \TMR_No.running_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\TMR_No.Delay_16_n_2 ),
        .Q(\TMR_No.running_reg_n_0 ),
        .R(Rst));
  FDSE \TMR_No.rx_1_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(UART_Rx),
        .Q(rx_1),
        .S(Rst));
  FDSE \TMR_No.rx_2_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(rx_1),
        .Q(new_rx_data[0]),
        .S(Rst));
  LUT4 #(
    .INIT(16'h00A8)) 
    \TMR_No.rx_data_exists_i_i_1 
       (.I0(RX_Data0),
        .I1(new_rx_data_write),
        .I2(\TMR_No.rx_data_exists_i_reg_0 ),
        .I3(Rst),
        .O(\TMR_No.rx_data_exists_i_i_1_n_0 ));
  FDRE \TMR_No.rx_data_exists_i_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\TMR_No.rx_data_exists_i_i_1_n_0 ),
        .Q(\TMR_No.rx_data_exists_i_reg_0 ),
        .R(1'b0));
  FDRE \TMR_No.rx_data_i_reg[0] 
       (.C(Clk),
        .CE(new_rx_data_write),
        .D(new_rx_data[8]),
        .Q(rx_data_i[0]),
        .R(Rst));
  FDRE \TMR_No.rx_data_i_reg[1] 
       (.C(Clk),
        .CE(new_rx_data_write),
        .D(new_rx_data[7]),
        .Q(rx_data_i[1]),
        .R(Rst));
  FDRE \TMR_No.rx_data_i_reg[2] 
       (.C(Clk),
        .CE(new_rx_data_write),
        .D(new_rx_data[6]),
        .Q(rx_data_i[2]),
        .R(Rst));
  FDRE \TMR_No.rx_data_i_reg[3] 
       (.C(Clk),
        .CE(new_rx_data_write),
        .D(new_rx_data[5]),
        .Q(rx_data_i[3]),
        .R(Rst));
  FDRE \TMR_No.rx_data_i_reg[4] 
       (.C(Clk),
        .CE(new_rx_data_write),
        .D(new_rx_data[4]),
        .Q(rx_data_i[4]),
        .R(Rst));
  FDRE \TMR_No.rx_data_i_reg[5] 
       (.C(Clk),
        .CE(new_rx_data_write),
        .D(new_rx_data[3]),
        .Q(rx_data_i[5]),
        .R(Rst));
  FDRE \TMR_No.rx_data_i_reg[6] 
       (.C(Clk),
        .CE(new_rx_data_write),
        .D(new_rx_data[2]),
        .Q(rx_data_i[6]),
        .R(Rst));
  FDRE \TMR_No.rx_data_i_reg[7] 
       (.C(Clk),
        .CE(new_rx_data_write),
        .D(new_rx_data[1]),
        .Q(rx_data_i[7]),
        .R(Rst));
  (* SOFT_HLUTNM = "soft_lutpair7" *) 
  LUT5 #(
    .INIT(32'h02FF0200)) 
    \TMR_No.start_Edge_Detected_i_1 
       (.I0(previous_RX),
        .I1(new_rx_data[0]),
        .I2(\TMR_No.running_reg_n_0 ),
        .I3(en_16x_baud),
        .I4(\TMR_No.start_Edge_Detected_reg_n_0 ),
        .O(\TMR_No.start_Edge_Detected_i_1_n_0 ));
  FDRE \TMR_No.start_Edge_Detected_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\TMR_No.start_Edge_Detected_i_1_n_0 ),
        .Q(\TMR_No.start_Edge_Detected_reg_n_0 ),
        .R(Rst));
  FDRE \TMR_No.stop_Bit_Position_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\TMR_No.Delay_16_n_1 ),
        .Q(\TMR_No.stop_Bit_Position_reg_n_0 ),
        .R(Rst));
  LUT1 #(
    .INIT(2'h2)) 
    i_0
       (.I0(1'b0),
        .O(rx_parity_error_i));
  LUT4 #(
    .INIT(16'h0080)) 
    in00
       (.I0(en_16x_baud),
        .I1(sample_Point),
        .I2(\TMR_No.stop_Bit_Position_reg_n_0 ),
        .I3(new_rx_data[0]),
        .O(rx_frame_error_i));
endmodule

module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_UART_Transmit
   (UART_Tx,
    tx_data_transmitted,
    \TMR_No.tx_buffer_empty_i_reg_0 ,
    en_16x_baud,
    Clk,
    Rst,
    E,
    D);
  output UART_Tx;
  output tx_data_transmitted;
  output [0:0]\TMR_No.tx_buffer_empty_i_reg_0 ;
  input en_16x_baud;
  input Clk;
  input Rst;
  input [0:0]E;
  input [7:0]D;

  wire CI;
  wire Clk;
  wire [7:0]D;
  wire DI;
  wire [0:0]E;
  wire O;
  wire Rst;
  wire S;
  wire \TMR_No.Counter[0].XORCY_I_n_0 ;
  wire \TMR_No.Counter[1].XORCY_I_n_0 ;
  wire \TMR_No.Counter[2].h_Cnt_reg ;
  wire \TMR_No.FDRE_I_n_3 ;
  wire \TMR_No.fifo_DOut_reg_n_0_[1] ;
  wire \TMR_No.fifo_DOut_reg_n_0_[2] ;
  wire \TMR_No.fifo_DOut_reg_n_0_[3] ;
  wire \TMR_No.fifo_DOut_reg_n_0_[4] ;
  wire \TMR_No.fifo_DOut_reg_n_0_[5] ;
  wire \TMR_No.fifo_DOut_reg_n_0_[6] ;
  wire \TMR_No.fifo_DOut_reg_n_0_[7] ;
  wire \TMR_No.mux_sel_reg_n_0_[0] ;
  wire \TMR_No.mux_sel_reg_n_0_[2] ;
  wire \TMR_No.tx_buffer_empty_i_i_1_n_0 ;
  wire [0:0]\TMR_No.tx_buffer_empty_i_reg_0 ;
  wire \TMR_No.tx_i_i_1_n_0 ;
  wire cnt_cy_1;
  wire cnt_cy_2;
  wire data_is_sent0;
  wire div16;
  wire en_16x_baud;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire mux_0123;
  wire mux_4567;
  wire mux_Out;
  wire p_0_in;
  wire serial_Data;
  wire tx_DataBits;
  wire tx_DataBits0;
  wire tx_Data_Enable;
  wire tx_Start;
  (* RTL_KEEP = "true" *) wire tx_buffer_empty_i;
  wire tx_data_transmitted;
  (* RTL_KEEP = "true" *) wire tx_i;

  assign UART_Tx = tx_i;
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_iomodule_v3_1_5_MB_XORCY \TMR_No.Counter[0].XORCY_I 
       (.D(\TMR_No.Counter[0].XORCY_I_n_0 ),
        .Q(\TMR_No.mux_sel_reg_n_0_[0] ),
        .cnt_cy_2(cnt_cy_2),
        .lopt(lopt_1),
        .lopt_1(lopt_2));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_iomodule_v3_1_5_MB_MUXCY \TMR_No.Counter[1].Used_MuxCY.MUXCY_L_I 
       (.Q(DI),
        .S(S),
        .cnt_cy_1(cnt_cy_1),
        .cnt_cy_2(cnt_cy_2),
        .lopt(lopt));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_iomodule_v3_1_5_MB_XORCY_864 \TMR_No.Counter[1].XORCY_I 
       (.D(\TMR_No.Counter[1].XORCY_I_n_0 ),
        .Q(DI),
        .S(S),
        .cnt_cy_1(cnt_cy_1));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_iomodule_v3_1_5_MB_MUXCY_865 \TMR_No.Counter[2].Used_MuxCY.MUXCY_L_I 
       (.CI(CI),
        .Q(\TMR_No.mux_sel_reg_n_0_[2] ),
        .\TMR_No.Counter[2].h_Cnt_reg (\TMR_No.Counter[2].h_Cnt_reg ),
        .cnt_cy_1(cnt_cy_1),
        .lopt(lopt),
        .lopt_1(DI),
        .lopt_2(S),
        .lopt_3(lopt_1),
        .lopt_4(lopt_2));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_iomodule_v3_1_5_MB_XORCY_866 \TMR_No.Counter[2].XORCY_I 
       (.CI(CI),
        .D(O),
        .Q(\TMR_No.mux_sel_reg_n_0_[2] ),
        .\TMR_No.Counter[2].h_Cnt_reg (\TMR_No.Counter[2].h_Cnt_reg ),
        .tx_DataBits(tx_DataBits));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_XIL_SRL16E \TMR_No.DIV16_SRL16E 
       (.Clk(Clk),
        .div16(div16),
        .en_16x_baud(en_16x_baud));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_iomodule_v3_1_5_MB_FDRE \TMR_No.FDRE_I 
       (.Clk(Clk),
        .Q({\TMR_No.mux_sel_reg_n_0_[0] ,DI,\TMR_No.mux_sel_reg_n_0_[2] }),
        .\TMR_No.tx_DataBits_reg (\TMR_No.FDRE_I_n_3 ),
        .data_is_sent0(data_is_sent0),
        .div16(div16),
        .en_16x_baud(en_16x_baud),
        .out(tx_buffer_empty_i),
        .tx_DataBits(tx_DataBits),
        .tx_DataBits0(tx_DataBits0),
        .tx_Data_Enable(tx_Data_Enable),
        .tx_Start(tx_Start),
        .tx_data_transmitted(tx_data_transmitted));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_MUXF6 \TMR_No.MUXF6_I 
       (.Q(\TMR_No.mux_sel_reg_n_0_[0] ),
        .mux_0123(mux_0123),
        .mux_4567(mux_4567),
        .mux_Out(mux_Out));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_MUXF5 \TMR_No.MUX_F5_1 
       (.Q({DI,\TMR_No.mux_sel_reg_n_0_[2] }),
        .\Using_FPGA.Native_0 ({p_0_in,\TMR_No.fifo_DOut_reg_n_0_[1] ,\TMR_No.fifo_DOut_reg_n_0_[2] ,\TMR_No.fifo_DOut_reg_n_0_[3] }),
        .mux_0123(mux_0123));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_MUXF5_867 \TMR_No.MUX_F5_2 
       (.Q({DI,\TMR_No.mux_sel_reg_n_0_[2] }),
        .\Using_FPGA.Native_0 ({\TMR_No.fifo_DOut_reg_n_0_[4] ,\TMR_No.fifo_DOut_reg_n_0_[5] ,\TMR_No.fifo_DOut_reg_n_0_[6] ,\TMR_No.fifo_DOut_reg_n_0_[7] }),
        .mux_4567(mux_4567));
  FDRE \TMR_No.data_is_sent_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(data_is_sent0),
        .Q(tx_data_transmitted),
        .R(Rst));
  FDRE \TMR_No.fifo_DOut_reg[0] 
       (.C(Clk),
        .CE(E),
        .D(D[7]),
        .Q(p_0_in),
        .R(Rst));
  FDRE \TMR_No.fifo_DOut_reg[1] 
       (.C(Clk),
        .CE(E),
        .D(D[6]),
        .Q(\TMR_No.fifo_DOut_reg_n_0_[1] ),
        .R(Rst));
  FDRE \TMR_No.fifo_DOut_reg[2] 
       (.C(Clk),
        .CE(E),
        .D(D[5]),
        .Q(\TMR_No.fifo_DOut_reg_n_0_[2] ),
        .R(Rst));
  FDRE \TMR_No.fifo_DOut_reg[3] 
       (.C(Clk),
        .CE(E),
        .D(D[4]),
        .Q(\TMR_No.fifo_DOut_reg_n_0_[3] ),
        .R(Rst));
  FDRE \TMR_No.fifo_DOut_reg[4] 
       (.C(Clk),
        .CE(E),
        .D(D[3]),
        .Q(\TMR_No.fifo_DOut_reg_n_0_[4] ),
        .R(Rst));
  FDRE \TMR_No.fifo_DOut_reg[5] 
       (.C(Clk),
        .CE(E),
        .D(D[2]),
        .Q(\TMR_No.fifo_DOut_reg_n_0_[5] ),
        .R(Rst));
  FDRE \TMR_No.fifo_DOut_reg[6] 
       (.C(Clk),
        .CE(E),
        .D(D[1]),
        .Q(\TMR_No.fifo_DOut_reg_n_0_[6] ),
        .R(Rst));
  FDRE \TMR_No.fifo_DOut_reg[7] 
       (.C(Clk),
        .CE(E),
        .D(D[0]),
        .Q(\TMR_No.fifo_DOut_reg_n_0_[7] ),
        .R(Rst));
  FDSE \TMR_No.mux_sel_reg[0] 
       (.C(Clk),
        .CE(tx_Data_Enable),
        .D(\TMR_No.Counter[0].XORCY_I_n_0 ),
        .Q(\TMR_No.mux_sel_reg_n_0_[0] ),
        .S(Rst));
  FDSE \TMR_No.mux_sel_reg[1] 
       (.C(Clk),
        .CE(tx_Data_Enable),
        .D(\TMR_No.Counter[1].XORCY_I_n_0 ),
        .Q(DI),
        .S(Rst));
  FDSE \TMR_No.mux_sel_reg[2] 
       (.C(Clk),
        .CE(tx_Data_Enable),
        .D(O),
        .Q(\TMR_No.mux_sel_reg_n_0_[2] ),
        .S(Rst));
  FDRE \TMR_No.serial_Data_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(mux_Out),
        .Q(serial_Data),
        .R(Rst));
  FDRE \TMR_No.tx_DataBits_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(tx_DataBits0),
        .Q(tx_DataBits),
        .R(Rst));
  FDRE \TMR_No.tx_Start_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\TMR_No.FDRE_I_n_3 ),
        .Q(tx_Start),
        .R(Rst));
  LUT4 #(
    .INIT(16'hFFF4)) 
    \TMR_No.tx_buffer_empty_i_i_1 
       (.I0(E),
        .I1(tx_buffer_empty_i),
        .I2(Rst),
        .I3(tx_data_transmitted),
        .O(\TMR_No.tx_buffer_empty_i_i_1_n_0 ));
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDRE \TMR_No.tx_buffer_empty_i_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\TMR_No.tx_buffer_empty_i_i_1_n_0 ),
        .Q(tx_buffer_empty_i),
        .R(1'b0));
  LUT3 #(
    .INIT(8'h45)) 
    \TMR_No.tx_i_i_1 
       (.I0(tx_Start),
        .I1(serial_Data),
        .I2(tx_DataBits),
        .O(\TMR_No.tx_i_i_1_n_0 ));
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDSE \TMR_No.tx_i_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\TMR_No.tx_i_i_1_n_0 ),
        .Q(tx_i),
        .S(Rst));
  LUT1 #(
    .INIT(2'h1)) 
    \UART_Status[3]_i_1 
       (.I0(tx_buffer_empty_i),
        .O(\TMR_No.tx_buffer_empty_i_reg_0 ));
endmodule

module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Uart_Control_Status
   (D,
    SR,
    UART_Interrupt,
    Q,
    Rst,
    \TMR_No.overrun_error_reg_0 ,
    Clk,
    \TMR_No.frame_error_reg_0 ,
    \UART_Status_reg[6]_0 ,
    \UART_Status_reg[6]_1 ,
    \UART_Status_reg[6]_2 ,
    \UART_Status_reg[6]_3 ,
    \UART_Status_reg[6]_4 ,
    \UART_Status_reg[6]_5 ,
    out,
    tx_data_transmitted,
    \UART_Status_reg[3]_0 ,
    \TMR_No.error_interrupt_reg_0 );
  output [1:0]D;
  output [0:0]SR;
  output UART_Interrupt;
  output [3:0]Q;
  input Rst;
  input \TMR_No.overrun_error_reg_0 ;
  input Clk;
  input \TMR_No.frame_error_reg_0 ;
  input \UART_Status_reg[6]_0 ;
  input \UART_Status_reg[6]_1 ;
  input \UART_Status_reg[6]_2 ;
  input \UART_Status_reg[6]_3 ;
  input \UART_Status_reg[6]_4 ;
  input \UART_Status_reg[6]_5 ;
  input out;
  input tx_data_transmitted;
  input [1:0]\UART_Status_reg[3]_0 ;
  input \TMR_No.error_interrupt_reg_0 ;

  wire Clk;
  wire [1:0]D;
  wire [3:0]Q;
  wire Rst;
  wire [0:0]SR;
  wire \TMR_No.error_interrupt_i_1_n_0 ;
  wire \TMR_No.error_interrupt_reg_0 ;
  wire \TMR_No.frame_error_reg_0 ;
  wire \TMR_No.overrun_error_reg_0 ;
  wire UART_Error_Interrupt;
  wire UART_Interrupt;
  wire [1:0]\UART_Status_reg[3]_0 ;
  wire \UART_Status_reg[6]_0 ;
  wire \UART_Status_reg[6]_1 ;
  wire \UART_Status_reg[6]_2 ;
  wire \UART_Status_reg[6]_3 ;
  wire \UART_Status_reg[6]_4 ;
  wire \UART_Status_reg[6]_5 ;
  wire out;
  wire tx_data_transmitted;

  (* SOFT_HLUTNM = "soft_lutpair1" *) 
  LUT3 #(
    .INIT(8'hEA)) 
    \TMR_No.error_interrupt_i_1 
       (.I0(\TMR_No.error_interrupt_reg_0 ),
        .I1(out),
        .I2(\UART_Status_reg[3]_0 [0]),
        .O(\TMR_No.error_interrupt_i_1_n_0 ));
  FDRE \TMR_No.error_interrupt_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\TMR_No.error_interrupt_i_1_n_0 ),
        .Q(UART_Error_Interrupt),
        .R(Rst));
  FDRE \TMR_No.frame_error_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\TMR_No.frame_error_reg_0 ),
        .Q(D[1]),
        .R(Rst));
  FDRE \TMR_No.overrun_error_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\TMR_No.overrun_error_reg_0 ),
        .Q(D[0]),
        .R(Rst));
  (* SOFT_HLUTNM = "soft_lutpair1" *) 
  LUT3 #(
    .INIT(8'hFE)) 
    UART_Interrupt_INST_0
       (.I0(UART_Error_Interrupt),
        .I1(out),
        .I2(tx_data_transmitted),
        .O(UART_Interrupt));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFBFFFF)) 
    \UART_Status[6]_i_1 
       (.I0(\UART_Status_reg[6]_0 ),
        .I1(\UART_Status_reg[6]_1 ),
        .I2(\UART_Status_reg[6]_2 ),
        .I3(\UART_Status_reg[6]_3 ),
        .I4(\UART_Status_reg[6]_4 ),
        .I5(\UART_Status_reg[6]_5 ),
        .O(SR));
  FDRE \UART_Status_reg[0] 
       (.C(Clk),
        .CE(1'b1),
        .D(\UART_Status_reg[3]_0 [0]),
        .Q(Q[0]),
        .R(SR));
  FDRE \UART_Status_reg[3] 
       (.C(Clk),
        .CE(1'b1),
        .D(\UART_Status_reg[3]_0 [1]),
        .Q(Q[1]),
        .R(SR));
  FDRE \UART_Status_reg[5] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[0]),
        .Q(Q[2]),
        .R(SR));
  FDRE \UART_Status_reg[6] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[1]),
        .Q(Q[3]),
        .R(SR));
endmodule

module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_XIL_SRL16E
   (div16,
    en_16x_baud,
    Clk);
  output div16;
  input en_16x_baud;
  input Clk;

  wire Clk;
  wire div16;
  wire en_16x_baud;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_name = "inst/iomodule_0/U0/\IOModule_Core_I1/Using_UART_TX.UART_TX_I1/TMR_No.DIV16_SRL16E/Use_unisim.XIL_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0001),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.XIL_SRL16E_I1 
       (.A0(1'b1),
        .A1(1'b1),
        .A2(1'b1),
        .A3(1'b1),
        .CE(en_16x_baud),
        .CLK(Clk),
        .D(div16),
        .Q(div16));
endmodule

(* ORIG_REF_NAME = "XIL_SRL16E" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_XIL_SRL16E_877
   (loop_Bit,
    Clk_En_I_2,
    Clk);
  output loop_Bit;
  input Clk_En_I_2;
  input Clk;

  wire Clk;
  wire Clk_En_I_2;
  wire loop_Bit;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/iomodule_0/U0/\IOModule_Core_I1/Using_UART.No_Dynamic_BaudRate.UART_FIT_I/Implement_FIT.Using_SRL16s.SRL16s " *) 
  (* srl_name = "inst/iomodule_0/U0/\IOModule_Core_I1/Using_UART.No_Dynamic_BaudRate.UART_FIT_I/Implement_FIT.Using_SRL16s.SRL16s[2].Divide_I/One_SRL16.SRL16E_I/Use_unisim.XIL_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0001),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.XIL_SRL16E_I1 
       (.A0(1'b0),
        .A1(1'b1),
        .A2(1'b0),
        .A3(1'b0),
        .CE(Clk_En_I_2),
        .CLK(Clk),
        .D(loop_Bit),
        .Q(loop_Bit));
endmodule

(* ORIG_REF_NAME = "XIL_SRL16E" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_XIL_SRL16E_878
   (Clk_En_I_2,
    Clk);
  output Clk_En_I_2;
  input Clk;

  wire Clk;
  wire Clk_En_I_2;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/iomodule_0/U0/\IOModule_Core_I1/Using_UART.No_Dynamic_BaudRate.UART_FIT_I/Implement_FIT.Using_SRL16s.SRL16s " *) 
  (* srl_name = "inst/iomodule_0/U0/\IOModule_Core_I1/Using_UART.No_Dynamic_BaudRate.UART_FIT_I/Implement_FIT.Using_SRL16s.SRL16s[1].Divide_I/One_SRL16.SRL16E_I/Use_unisim.XIL_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0001),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.XIL_SRL16E_I1 
       (.A0(1'b0),
        .A1(1'b1),
        .A2(1'b1),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(Clk),
        .D(Clk_En_I_2),
        .Q(Clk_En_I_2));
endmodule

(* ORIG_REF_NAME = "XIL_SRL16E" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_XIL_SRL16E__parameterized1
   (sample_Point,
    \Using_FPGA.Native ,
    \TMR_No.stop_Bit_Position_reg ,
    \TMR_No.Convert_Serial_To_Parallel[8].serial_to_parallel_reg ,
    \TMR_No.Convert_Serial_To_Parallel[7].serial_to_parallel_reg ,
    \TMR_No.Convert_Serial_To_Parallel[6].serial_to_parallel_reg ,
    \TMR_No.Convert_Serial_To_Parallel[5].serial_to_parallel_reg ,
    \TMR_No.Convert_Serial_To_Parallel[4].serial_to_parallel_reg ,
    \TMR_No.Convert_Serial_To_Parallel[3].serial_to_parallel_reg ,
    \TMR_No.Convert_Serial_To_Parallel[2].serial_to_parallel_reg ,
    D_0,
    en_16x_baud,
    Clk,
    out,
    \TMR_No.stop_Bit_Position_reg_0 ,
    \TMR_No.running_reg ,
    \TMR_No.running_reg_0 ,
    mid_Start_Bit);
  output sample_Point;
  output \Using_FPGA.Native ;
  output \TMR_No.stop_Bit_Position_reg ;
  output \TMR_No.Convert_Serial_To_Parallel[8].serial_to_parallel_reg ;
  output \TMR_No.Convert_Serial_To_Parallel[7].serial_to_parallel_reg ;
  output \TMR_No.Convert_Serial_To_Parallel[6].serial_to_parallel_reg ;
  output \TMR_No.Convert_Serial_To_Parallel[5].serial_to_parallel_reg ;
  output \TMR_No.Convert_Serial_To_Parallel[4].serial_to_parallel_reg ;
  output \TMR_No.Convert_Serial_To_Parallel[3].serial_to_parallel_reg ;
  output \TMR_No.Convert_Serial_To_Parallel[2].serial_to_parallel_reg ;
  output D_0;
  input en_16x_baud;
  input Clk;
  input [8:0]out;
  input \TMR_No.stop_Bit_Position_reg_0 ;
  input \TMR_No.running_reg ;
  input \TMR_No.running_reg_0 ;
  input mid_Start_Bit;

  wire Clk;
  wire D_0;
  wire \TMR_No.Convert_Serial_To_Parallel[2].serial_to_parallel_reg ;
  wire \TMR_No.Convert_Serial_To_Parallel[3].serial_to_parallel_reg ;
  wire \TMR_No.Convert_Serial_To_Parallel[4].serial_to_parallel_reg ;
  wire \TMR_No.Convert_Serial_To_Parallel[5].serial_to_parallel_reg ;
  wire \TMR_No.Convert_Serial_To_Parallel[6].serial_to_parallel_reg ;
  wire \TMR_No.Convert_Serial_To_Parallel[7].serial_to_parallel_reg ;
  wire \TMR_No.Convert_Serial_To_Parallel[8].serial_to_parallel_reg ;
  wire \TMR_No.running_reg ;
  wire \TMR_No.running_reg_0 ;
  wire \TMR_No.stop_Bit_Position_reg ;
  wire \TMR_No.stop_Bit_Position_reg_0 ;
  wire \Use_unisim.XIL_SRL16E_I1_i_1_n_0 ;
  wire \Using_FPGA.Native ;
  wire en_16x_baud;
  wire mid_Start_Bit;
  wire [8:0]out;
  wire sample_Point;

  LUT5 #(
    .INIT(32'hF7FFF000)) 
    \TMR_No.running_i_1 
       (.I0(sample_Point),
        .I1(\TMR_No.stop_Bit_Position_reg_0 ),
        .I2(\TMR_No.running_reg ),
        .I3(en_16x_baud),
        .I4(\TMR_No.running_reg_0 ),
        .O(\TMR_No.stop_Bit_Position_reg ));
  (* SOFT_HLUTNM = "soft_lutpair2" *) 
  LUT4 #(
    .INIT(16'h2CCC)) 
    \TMR_No.stop_Bit_Position_i_1 
       (.I0(out[0]),
        .I1(\TMR_No.stop_Bit_Position_reg_0 ),
        .I2(sample_Point),
        .I3(en_16x_baud),
        .O(\Using_FPGA.Native ));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_name = "inst/iomodule_0/U0/\IOModule_Core_I1/Using_UART_RX.UART_RX_I1/TMR_No.Delay_16/Use_unisim.XIL_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.XIL_SRL16E_I1 
       (.A0(1'b1),
        .A1(1'b1),
        .A2(1'b1),
        .A3(1'b1),
        .CE(en_16x_baud),
        .CLK(Clk),
        .D(\Use_unisim.XIL_SRL16E_I1_i_1_n_0 ),
        .Q(sample_Point));
  (* SOFT_HLUTNM = "soft_lutpair6" *) 
  LUT3 #(
    .INIT(8'h0E)) 
    \Use_unisim.XIL_SRL16E_I1_i_1 
       (.I0(sample_Point),
        .I1(mid_Start_Bit),
        .I2(\TMR_No.stop_Bit_Position_reg_0 ),
        .O(\Use_unisim.XIL_SRL16E_I1_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair5" *) 
  LUT4 #(
    .INIT(16'hBA8A)) 
    \Using_FPGA.Native_i_1__10 
       (.I0(out[6]),
        .I1(\TMR_No.stop_Bit_Position_reg_0 ),
        .I2(sample_Point),
        .I3(out[7]),
        .O(\TMR_No.Convert_Serial_To_Parallel[2].serial_to_parallel_reg ));
  (* SOFT_HLUTNM = "soft_lutpair6" *) 
  LUT4 #(
    .INIT(16'hBA8A)) 
    \Using_FPGA.Native_i_1__11 
       (.I0(out[7]),
        .I1(\TMR_No.stop_Bit_Position_reg_0 ),
        .I2(sample_Point),
        .I3(out[8]),
        .O(D_0));
  (* SOFT_HLUTNM = "soft_lutpair2" *) 
  LUT4 #(
    .INIT(16'hBA8A)) 
    \Using_FPGA.Native_i_1__4 
       (.I0(out[0]),
        .I1(\TMR_No.stop_Bit_Position_reg_0 ),
        .I2(sample_Point),
        .I3(out[1]),
        .O(\TMR_No.Convert_Serial_To_Parallel[8].serial_to_parallel_reg ));
  (* SOFT_HLUTNM = "soft_lutpair3" *) 
  LUT4 #(
    .INIT(16'hBA8A)) 
    \Using_FPGA.Native_i_1__5 
       (.I0(out[1]),
        .I1(\TMR_No.stop_Bit_Position_reg_0 ),
        .I2(sample_Point),
        .I3(out[2]),
        .O(\TMR_No.Convert_Serial_To_Parallel[7].serial_to_parallel_reg ));
  (* SOFT_HLUTNM = "soft_lutpair3" *) 
  LUT4 #(
    .INIT(16'hBA8A)) 
    \Using_FPGA.Native_i_1__6 
       (.I0(out[2]),
        .I1(\TMR_No.stop_Bit_Position_reg_0 ),
        .I2(sample_Point),
        .I3(out[3]),
        .O(\TMR_No.Convert_Serial_To_Parallel[6].serial_to_parallel_reg ));
  (* SOFT_HLUTNM = "soft_lutpair4" *) 
  LUT4 #(
    .INIT(16'hBA8A)) 
    \Using_FPGA.Native_i_1__7 
       (.I0(out[3]),
        .I1(\TMR_No.stop_Bit_Position_reg_0 ),
        .I2(sample_Point),
        .I3(out[4]),
        .O(\TMR_No.Convert_Serial_To_Parallel[5].serial_to_parallel_reg ));
  (* SOFT_HLUTNM = "soft_lutpair4" *) 
  LUT4 #(
    .INIT(16'hBA8A)) 
    \Using_FPGA.Native_i_1__8 
       (.I0(out[4]),
        .I1(\TMR_No.stop_Bit_Position_reg_0 ),
        .I2(sample_Point),
        .I3(out[5]),
        .O(\TMR_No.Convert_Serial_To_Parallel[4].serial_to_parallel_reg ));
  (* SOFT_HLUTNM = "soft_lutpair5" *) 
  LUT4 #(
    .INIT(16'hBA8A)) 
    \Using_FPGA.Native_i_1__9 
       (.I0(out[5]),
        .I1(\TMR_No.stop_Bit_Position_reg_0 ),
        .I2(sample_Point),
        .I3(out[6]),
        .O(\TMR_No.Convert_Serial_To_Parallel[3].serial_to_parallel_reg ));
endmodule

(* ORIG_REF_NAME = "XIL_SRL16E" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_XIL_SRL16E__parameterized1_875
   (mid_Start_Bit,
    en_16x_baud,
    \Using_FPGA.Native ,
    Clk);
  output mid_Start_Bit;
  input en_16x_baud;
  input \Using_FPGA.Native ;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native ;
  wire en_16x_baud;
  wire mid_Start_Bit;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_name = "inst/iomodule_0/U0/\IOModule_Core_I1/Using_UART_RX.UART_RX_I1/TMR_No.Mid_Start_Bit_SRL16/Use_unisim.XIL_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.XIL_SRL16E_I1 
       (.A0(1'b0),
        .A1(1'b1),
        .A2(1'b1),
        .A3(1'b0),
        .CE(en_16x_baud),
        .CLK(Clk),
        .D(\Using_FPGA.Native ),
        .Q(mid_Start_Bit));
endmodule

(* ORIG_REF_NAME = "XIL_SRL16E" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_XIL_SRL16E__parameterized1_876
   (loop_Bit,
    Clk_En_I_1,
    shift,
    Clk,
    lopt);
  output loop_Bit;
  input Clk_En_I_1;
  input shift;
  input Clk;
  input lopt;

  wire Clk;
  wire Clk_En_I_1;
  wire loop_Bit;
  wire lopt;
  wire shift;
  wire \NLW_Use_unisim.XIL_SRL16CE_I1Use_unisim.XIL_SRL16E_I1_Q31_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "MLO" *) 
  (* srl_bus_name = "inst/iomodule_0/U0/\IOModule_Core_I1/Using_UART.No_Dynamic_BaudRate.UART_FIT_I/Implement_FIT.Using_SRL16s.SRL16s " *) 
  (* srl_name = "inst/iomodule_0/U0/\IOModule_Core_I1/Using_UART.No_Dynamic_BaudRate.UART_FIT_I/Implement_FIT.Using_SRL16s.SRL16s[3].Divide_I/Two_SRL16.SRL16E_2/Use_unisim.XIL_SRL16E_I1 " *) 
  SRLC32E #(
    .INIT(32'h00000001),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.XIL_SRL16CE_I1Use_unisim.XIL_SRL16E_I1 
       (.A({1'b1,1'b1,1'b1,1'b1,1'b0}),
        .CE(Clk_En_I_1),
        .CLK(Clk),
        .D(lopt),
        .Q(loop_Bit),
        .Q31(\NLW_Use_unisim.XIL_SRL16CE_I1Use_unisim.XIL_SRL16E_I1_Q31_UNCONNECTED ));
endmodule

module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_XIL_SRLC16E
   (shift,
    Clk_En_I_1,
    loop_Bit,
    Clk);
  output shift;
  input Clk_En_I_1;
  input loop_Bit;
  input Clk;

  wire Clk;
  wire Clk_En_I_1;
  wire loop_Bit;
  wire shift;

endmodule

module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_address_decoder
   (\GEN_BKEND_CE_REGISTERS[1].ce_out_i_reg[1]_0 ,
    \GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg[0]_0 ,
    Bus_RNW_reg_reg_0,
    D,
    \GEN_BKEND_CE_REGISTERS[3].ce_out_i_reg[3]_0 ,
    \GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2]_0 ,
    FIFO_Write,
    ip2bus_error,
    bus2ip_wrce,
    clear_Ext_BRK,
    reset_RX_FIFO_i,
    reset_TX_FIFO_i,
    \GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2]_1 ,
    bus2ip_rdce,
    \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[4] ,
    \FSM_onehot_state_reg[3] ,
    \FSM_onehot_state_reg[2] ,
    \FSM_onehot_state_reg[2]_0 ,
    start2,
    S_AXI_ACLK,
    Q,
    state1__2,
    S_AXI_AWVALID,
    S_AXI_WVALID,
    S_AXI_ARVALID,
    out,
    tx_Buffer_Full,
    rx_Data_Present,
    S_AXI_WDATA,
    RX_Data,
    RX_Buffer_Full,
    fifo_Data_Present,
    enable_interrupts,
    S_AXI_ARESETN,
    S_AXI_RREADY,
    S_AXI_RVALID,
    S_AXI_BREADY,
    S_AXI_BVALID,
    S_AXI_BRESP,
    bus2ip_rnw_i,
    \GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2]_2 ,
    \GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2]_3 );
  output \GEN_BKEND_CE_REGISTERS[1].ce_out_i_reg[1]_0 ;
  output \GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg[0]_0 ;
  output Bus_RNW_reg_reg_0;
  output [2:0]D;
  output \GEN_BKEND_CE_REGISTERS[3].ce_out_i_reg[3]_0 ;
  output \GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2]_0 ;
  output FIFO_Write;
  output ip2bus_error;
  output [0:0]bus2ip_wrce;
  output clear_Ext_BRK;
  output reset_RX_FIFO_i;
  output reset_TX_FIFO_i;
  output [7:0]\GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2]_1 ;
  output [0:0]bus2ip_rdce;
  output \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[4] ;
  output \FSM_onehot_state_reg[3] ;
  output \FSM_onehot_state_reg[2] ;
  output \FSM_onehot_state_reg[2]_0 ;
  input start2;
  input S_AXI_ACLK;
  input [3:0]Q;
  input state1__2;
  input S_AXI_AWVALID;
  input S_AXI_WVALID;
  input S_AXI_ARVALID;
  input out;
  input tx_Buffer_Full;
  input rx_Data_Present;
  input [3:0]S_AXI_WDATA;
  input [0:7]RX_Data;
  input RX_Buffer_Full;
  input fifo_Data_Present;
  input enable_interrupts;
  input S_AXI_ARESETN;
  input S_AXI_RREADY;
  input S_AXI_RVALID;
  input S_AXI_BREADY;
  input S_AXI_BVALID;
  input [0:0]S_AXI_BRESP;
  input bus2ip_rnw_i;
  input \GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2]_2 ;
  input \GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2]_3 ;

  wire \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[4] ;
  wire Bus_RNW_reg_i_1_n_0;
  wire Bus_RNW_reg_reg_0;
  wire [2:0]D;
  wire FIFO_Write;
  wire \FSM_onehot_state_reg[2] ;
  wire \FSM_onehot_state_reg[2]_0 ;
  wire \FSM_onehot_state_reg[3] ;
  wire \GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg[0]_0 ;
  wire \GEN_BKEND_CE_REGISTERS[1].ce_out_i_reg[1]_0 ;
  wire \GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg ;
  wire \GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2]_0 ;
  wire [7:0]\GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2]_1 ;
  wire \GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2]_2 ;
  wire \GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2]_3 ;
  wire \GEN_BKEND_CE_REGISTERS[3].ce_out_i_reg ;
  wire \GEN_BKEND_CE_REGISTERS[3].ce_out_i_reg[3]_0 ;
  wire [3:0]Q;
  wire RX_Buffer_Full;
  wire [0:7]RX_Data;
  wire S_AXI_ACLK;
  wire S_AXI_ARESETN;
  wire S_AXI_ARVALID;
  wire S_AXI_AWVALID;
  wire S_AXI_BREADY;
  wire [0:0]S_AXI_BRESP;
  wire S_AXI_BVALID;
  wire S_AXI_RREADY;
  wire S_AXI_RVALID;
  wire [3:0]S_AXI_WDATA;
  wire S_AXI_WVALID;
  wire [0:0]bus2ip_rdce;
  wire bus2ip_rnw_i;
  wire [0:0]bus2ip_wrce;
  wire ce_expnd_i_0;
  wire ce_expnd_i_1;
  wire ce_expnd_i_2;
  wire ce_expnd_i_3;
  wire clear_Ext_BRK;
  wire cs_ce_clr;
  wire enable_interrupts;
  wire fifo_Data_Present;
  wire ip2bus_error;
  wire out;
  wire reset_RX_FIFO_i;
  wire reset_TX_FIFO_i;
  wire rx_Data_Present;
  wire start2;
  wire state1__2;
  wire tx_Buffer_Full;

  (* SOFT_HLUTNM = "soft_lutpair40" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    Bus_RNW_reg_i_1
       (.I0(bus2ip_rnw_i),
        .I1(start2),
        .I2(Bus_RNW_reg_reg_0),
        .O(Bus_RNW_reg_i_1_n_0));
  FDRE Bus_RNW_reg_reg
       (.C(S_AXI_ACLK),
        .CE(1'b1),
        .D(Bus_RNW_reg_i_1_n_0),
        .Q(Bus_RNW_reg_reg_0),
        .R(1'b0));
  LUT6 #(
    .INIT(64'hF888FFFFF888F888)) 
    \FSM_onehot_state[0]_i_1 
       (.I0(Q[3]),
        .I1(\GEN_BKEND_CE_REGISTERS[3].ce_out_i_reg[3]_0 ),
        .I2(Q[2]),
        .I3(\GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2]_0 ),
        .I4(state1__2),
        .I5(Q[0]),
        .O(D[0]));
  LUT6 #(
    .INIT(64'h0080FFFF00800080)) 
    \FSM_onehot_state[2]_i_1 
       (.I0(S_AXI_AWVALID),
        .I1(S_AXI_WVALID),
        .I2(Q[1]),
        .I3(S_AXI_ARVALID),
        .I4(\GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2]_0 ),
        .I5(Q[2]),
        .O(D[1]));
  LUT4 #(
    .INIT(16'hF444)) 
    \FSM_onehot_state[3]_i_1 
       (.I0(\GEN_BKEND_CE_REGISTERS[3].ce_out_i_reg[3]_0 ),
        .I1(Q[3]),
        .I2(S_AXI_ARVALID),
        .I3(Q[1]),
        .O(D[2]));
  FDRE \GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg[0] 
       (.C(S_AXI_ACLK),
        .CE(start2),
        .D(ce_expnd_i_3),
        .Q(\GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg[0]_0 ),
        .R(cs_ce_clr));
  (* SOFT_HLUTNM = "soft_lutpair41" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \GEN_BKEND_CE_REGISTERS[1].ce_out_i[1]_i_1 
       (.I0(\GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2]_3 ),
        .I1(\GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2]_2 ),
        .O(ce_expnd_i_2));
  FDRE \GEN_BKEND_CE_REGISTERS[1].ce_out_i_reg[1] 
       (.C(S_AXI_ACLK),
        .CE(start2),
        .D(ce_expnd_i_2),
        .Q(\GEN_BKEND_CE_REGISTERS[1].ce_out_i_reg[1]_0 ),
        .R(cs_ce_clr));
  FDRE \GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2] 
       (.C(S_AXI_ACLK),
        .CE(start2),
        .D(ce_expnd_i_1),
        .Q(\GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg ),
        .R(cs_ce_clr));
  LUT5 #(
    .INIT(32'hFFFEFFFF)) 
    \GEN_BKEND_CE_REGISTERS[3].ce_out_i[3]_i_1 
       (.I0(\GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg ),
        .I1(\GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg[0]_0 ),
        .I2(\GEN_BKEND_CE_REGISTERS[1].ce_out_i_reg[1]_0 ),
        .I3(\GEN_BKEND_CE_REGISTERS[3].ce_out_i_reg ),
        .I4(S_AXI_ARESETN),
        .O(cs_ce_clr));
  (* SOFT_HLUTNM = "soft_lutpair41" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \GEN_BKEND_CE_REGISTERS[3].ce_out_i[3]_i_2 
       (.I0(\GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2]_2 ),
        .I1(\GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2]_3 ),
        .O(ce_expnd_i_0));
  FDRE \GEN_BKEND_CE_REGISTERS[3].ce_out_i_reg[3] 
       (.C(S_AXI_ACLK),
        .CE(start2),
        .D(ce_expnd_i_0),
        .Q(\GEN_BKEND_CE_REGISTERS[3].ce_out_i_reg ),
        .R(cs_ce_clr));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_pselect_f \MEM_DECODE_GEN[0].PER_CE_GEN[0].MULTIPLE_CES_THIS_CS_GEN.CE_I 
       (.\GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg[0] (\GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2]_3 ),
        .\GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg[0]_0 (\GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2]_2 ),
        .ce_expnd_i_3(ce_expnd_i_3));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_pselect_f__parameterized1 \MEM_DECODE_GEN[0].PER_CE_GEN[2].MULTIPLE_CES_THIS_CS_GEN.CE_I 
       (.\GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2] (\GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2]_2 ),
        .\GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2]_0 (\GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2]_3 ),
        .ce_expnd_i_1(ce_expnd_i_1));
  (* SOFT_HLUTNM = "soft_lutpair35" *) 
  LUT5 #(
    .INIT(32'hFF00FE00)) 
    S_AXI_ARREADY_INST_0
       (.I0(\GEN_BKEND_CE_REGISTERS[3].ce_out_i_reg ),
        .I1(\GEN_BKEND_CE_REGISTERS[1].ce_out_i_reg[1]_0 ),
        .I2(\GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg[0]_0 ),
        .I3(Bus_RNW_reg_reg_0),
        .I4(\GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg ),
        .O(\GEN_BKEND_CE_REGISTERS[3].ce_out_i_reg[3]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair35" *) 
  LUT5 #(
    .INIT(32'h00FF00FE)) 
    S_AXI_WREADY_INST_0
       (.I0(\GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg ),
        .I1(\GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg[0]_0 ),
        .I2(\GEN_BKEND_CE_REGISTERS[1].ce_out_i_reg[1]_0 ),
        .I3(Bus_RNW_reg_reg_0),
        .I4(\GEN_BKEND_CE_REGISTERS[3].ce_out_i_reg ),
        .O(\GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair38" *) 
  LUT3 #(
    .INIT(8'h40)) 
    \Use_Uart.clear_Ext_BRK_i_1 
       (.I0(Bus_RNW_reg_reg_0),
        .I1(\GEN_BKEND_CE_REGISTERS[3].ce_out_i_reg ),
        .I2(S_AXI_WDATA[2]),
        .O(clear_Ext_BRK));
  (* SOFT_HLUTNM = "soft_lutpair38" *) 
  LUT4 #(
    .INIT(16'hFB08)) 
    \Use_Uart.enable_interrupts_i_1 
       (.I0(S_AXI_WDATA[3]),
        .I1(\GEN_BKEND_CE_REGISTERS[3].ce_out_i_reg ),
        .I2(Bus_RNW_reg_reg_0),
        .I3(enable_interrupts),
        .O(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[4] ));
  (* SOFT_HLUTNM = "soft_lutpair39" *) 
  LUT3 #(
    .INIT(8'h40)) 
    \Use_Uart.reset_RX_FIFO_i_i_2 
       (.I0(Bus_RNW_reg_reg_0),
        .I1(\GEN_BKEND_CE_REGISTERS[3].ce_out_i_reg ),
        .I2(S_AXI_WDATA[1]),
        .O(reset_RX_FIFO_i));
  (* SOFT_HLUTNM = "soft_lutpair40" *) 
  LUT3 #(
    .INIT(8'h40)) 
    \Use_Uart.reset_TX_FIFO_i_i_1 
       (.I0(Bus_RNW_reg_reg_0),
        .I1(\GEN_BKEND_CE_REGISTERS[3].ce_out_i_reg ),
        .I2(S_AXI_WDATA[0]),
        .O(reset_TX_FIFO_i));
  (* SOFT_HLUTNM = "soft_lutpair39" *) 
  LUT3 #(
    .INIT(8'h40)) 
    \Using_FPGA.Native_I1_i_3 
       (.I0(Bus_RNW_reg_reg_0),
        .I1(\GEN_BKEND_CE_REGISTERS[1].ce_out_i_reg[1]_0 ),
        .I2(out),
        .O(FIFO_Write));
  (* SOFT_HLUTNM = "soft_lutpair34" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \Using_FPGA.Native_I1_i_3__0 
       (.I0(\GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg[0]_0 ),
        .I1(Bus_RNW_reg_reg_0),
        .O(bus2ip_rdce));
  (* SOFT_HLUTNM = "soft_lutpair36" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \Using_FPGA.Native_i_1__1 
       (.I0(\GEN_BKEND_CE_REGISTERS[1].ce_out_i_reg[1]_0 ),
        .I1(Bus_RNW_reg_reg_0),
        .O(bus2ip_wrce));
  LUT3 #(
    .INIT(8'hB8)) 
    \s_axi_bresp_i[1]_i_1 
       (.I0(ip2bus_error),
        .I1(Q[2]),
        .I2(S_AXI_BRESP),
        .O(\FSM_onehot_state_reg[2]_0 ));
  LUT4 #(
    .INIT(16'h8F88)) 
    s_axi_bvalid_i_i_1
       (.I0(\GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2]_0 ),
        .I1(Q[2]),
        .I2(S_AXI_BREADY),
        .I3(S_AXI_BVALID),
        .O(\FSM_onehot_state_reg[2] ));
  LUT5 #(
    .INIT(32'hAA00C000)) 
    \s_axi_rdata_i[0]_i_1 
       (.I0(rx_Data_Present),
        .I1(RX_Data[7]),
        .I2(\GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg[0]_0 ),
        .I3(Bus_RNW_reg_reg_0),
        .I4(\GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg ),
        .O(\GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2]_1 [0]));
  (* SOFT_HLUTNM = "soft_lutpair34" *) 
  LUT5 #(
    .INIT(32'hAA00C000)) 
    \s_axi_rdata_i[1]_i_1 
       (.I0(RX_Buffer_Full),
        .I1(RX_Data[6]),
        .I2(\GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg[0]_0 ),
        .I3(Bus_RNW_reg_reg_0),
        .I4(\GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg ),
        .O(\GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2]_1 [1]));
  LUT5 #(
    .INIT(32'h5500C000)) 
    \s_axi_rdata_i[2]_i_1 
       (.I0(fifo_Data_Present),
        .I1(RX_Data[5]),
        .I2(\GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg[0]_0 ),
        .I3(Bus_RNW_reg_reg_0),
        .I4(\GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg ),
        .O(\GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2]_1 [2]));
  LUT5 #(
    .INIT(32'hAA00C000)) 
    \s_axi_rdata_i[3]_i_1 
       (.I0(tx_Buffer_Full),
        .I1(RX_Data[4]),
        .I2(\GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg[0]_0 ),
        .I3(Bus_RNW_reg_reg_0),
        .I4(\GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg ),
        .O(\GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2]_1 [3]));
  LUT5 #(
    .INIT(32'hAA00C000)) 
    \s_axi_rdata_i[4]_i_1 
       (.I0(enable_interrupts),
        .I1(RX_Data[3]),
        .I2(\GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg[0]_0 ),
        .I3(Bus_RNW_reg_reg_0),
        .I4(\GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg ),
        .O(\GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2]_1 [4]));
  (* SOFT_HLUTNM = "soft_lutpair37" *) 
  LUT4 #(
    .INIT(16'h4000)) 
    \s_axi_rdata_i[5]_i_1 
       (.I0(\GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg ),
        .I1(Bus_RNW_reg_reg_0),
        .I2(\GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg[0]_0 ),
        .I3(RX_Data[2]),
        .O(\GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2]_1 [5]));
  LUT4 #(
    .INIT(16'h4000)) 
    \s_axi_rdata_i[6]_i_1 
       (.I0(\GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg ),
        .I1(Bus_RNW_reg_reg_0),
        .I2(\GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg[0]_0 ),
        .I3(RX_Data[1]),
        .O(\GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2]_1 [6]));
  (* SOFT_HLUTNM = "soft_lutpair37" *) 
  LUT4 #(
    .INIT(16'h4000)) 
    \s_axi_rdata_i[7]_i_1 
       (.I0(\GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg ),
        .I1(Bus_RNW_reg_reg_0),
        .I2(\GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg[0]_0 ),
        .I3(RX_Data[0]),
        .O(\GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2]_1 [7]));
  (* SOFT_HLUTNM = "soft_lutpair36" *) 
  LUT5 #(
    .INIT(32'h0F008888)) 
    \s_axi_rresp_i[1]_i_1 
       (.I0(tx_Buffer_Full),
        .I1(\GEN_BKEND_CE_REGISTERS[1].ce_out_i_reg[1]_0 ),
        .I2(rx_Data_Present),
        .I3(\GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg[0]_0 ),
        .I4(Bus_RNW_reg_reg_0),
        .O(ip2bus_error));
  LUT4 #(
    .INIT(16'h8F88)) 
    s_axi_rvalid_i_i_1
       (.I0(\GEN_BKEND_CE_REGISTERS[3].ce_out_i_reg[3]_0 ),
        .I1(Q[3]),
        .I2(S_AXI_RREADY),
        .I3(S_AXI_RVALID),
        .O(\FSM_onehot_state_reg[3] ));
endmodule

module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_axi_lite_ipif
   (\GEN_BKEND_CE_REGISTERS[1].ce_out_i_reg ,
    \GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg ,
    S_AXI_RRESP,
    Bus_RNW_reg,
    S_AXI_RVALID,
    S_AXI_BVALID,
    S_AXI_BRESP,
    \GEN_BKEND_CE_REGISTERS[3].ce_out_i_reg[3] ,
    \GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2] ,
    FIFO_Write,
    bus2ip_wrce,
    clear_Ext_BRK,
    reset_RX_FIFO_i,
    reset_TX_FIFO_i,
    bus2ip_rdce,
    \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[4] ,
    S_AXI_RDATA,
    rst_reg,
    S_AXI_ACLK,
    S_AXI_AWVALID,
    S_AXI_WVALID,
    S_AXI_ARVALID,
    out,
    tx_Buffer_Full,
    rx_Data_Present,
    S_AXI_WDATA,
    RX_Data,
    RX_Buffer_Full,
    fifo_Data_Present,
    enable_interrupts,
    S_AXI_RREADY,
    S_AXI_BREADY,
    S_AXI_ARESETN,
    S_AXI_ARADDR,
    S_AXI_AWADDR);
  output \GEN_BKEND_CE_REGISTERS[1].ce_out_i_reg ;
  output \GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg ;
  output [0:0]S_AXI_RRESP;
  output Bus_RNW_reg;
  output S_AXI_RVALID;
  output S_AXI_BVALID;
  output [0:0]S_AXI_BRESP;
  output \GEN_BKEND_CE_REGISTERS[3].ce_out_i_reg[3] ;
  output \GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2] ;
  output FIFO_Write;
  output [0:0]bus2ip_wrce;
  output clear_Ext_BRK;
  output reset_RX_FIFO_i;
  output reset_TX_FIFO_i;
  output [0:0]bus2ip_rdce;
  output \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[4] ;
  output [7:0]S_AXI_RDATA;
  input rst_reg;
  input S_AXI_ACLK;
  input S_AXI_AWVALID;
  input S_AXI_WVALID;
  input S_AXI_ARVALID;
  input out;
  input tx_Buffer_Full;
  input rx_Data_Present;
  input [3:0]S_AXI_WDATA;
  input [0:7]RX_Data;
  input RX_Buffer_Full;
  input fifo_Data_Present;
  input enable_interrupts;
  input S_AXI_RREADY;
  input S_AXI_BREADY;
  input S_AXI_ARESETN;
  input [1:0]S_AXI_ARADDR;
  input [1:0]S_AXI_AWADDR;

  wire \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[4] ;
  wire Bus_RNW_reg;
  wire FIFO_Write;
  wire \GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg ;
  wire \GEN_BKEND_CE_REGISTERS[1].ce_out_i_reg ;
  wire \GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2] ;
  wire \GEN_BKEND_CE_REGISTERS[3].ce_out_i_reg[3] ;
  wire RX_Buffer_Full;
  wire [0:7]RX_Data;
  wire S_AXI_ACLK;
  wire [1:0]S_AXI_ARADDR;
  wire S_AXI_ARESETN;
  wire S_AXI_ARVALID;
  wire [1:0]S_AXI_AWADDR;
  wire S_AXI_AWVALID;
  wire S_AXI_BREADY;
  wire [0:0]S_AXI_BRESP;
  wire S_AXI_BVALID;
  wire [7:0]S_AXI_RDATA;
  wire S_AXI_RREADY;
  wire [0:0]S_AXI_RRESP;
  wire S_AXI_RVALID;
  wire [3:0]S_AXI_WDATA;
  wire S_AXI_WVALID;
  wire [0:0]bus2ip_rdce;
  wire [0:0]bus2ip_wrce;
  wire clear_Ext_BRK;
  wire enable_interrupts;
  wire fifo_Data_Present;
  wire out;
  wire reset_RX_FIFO_i;
  wire reset_TX_FIFO_i;
  wire rst_reg;
  wire rx_Data_Present;
  wire tx_Buffer_Full;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_slave_attachment I_SLAVE_ATTACHMENT
       (.\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[4] (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[4] ),
        .Bus_RNW_reg_reg(Bus_RNW_reg),
        .FIFO_Write(FIFO_Write),
        .\GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg[0] (\GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg ),
        .\GEN_BKEND_CE_REGISTERS[1].ce_out_i_reg[1] (\GEN_BKEND_CE_REGISTERS[1].ce_out_i_reg ),
        .\GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2] (\GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2] ),
        .\GEN_BKEND_CE_REGISTERS[3].ce_out_i_reg[3] (\GEN_BKEND_CE_REGISTERS[3].ce_out_i_reg[3] ),
        .RX_Buffer_Full(RX_Buffer_Full),
        .RX_Data(RX_Data),
        .S_AXI_ACLK(S_AXI_ACLK),
        .S_AXI_ARADDR(S_AXI_ARADDR),
        .S_AXI_ARESETN(S_AXI_ARESETN),
        .S_AXI_ARVALID(S_AXI_ARVALID),
        .S_AXI_AWADDR(S_AXI_AWADDR),
        .S_AXI_AWVALID(S_AXI_AWVALID),
        .S_AXI_BREADY(S_AXI_BREADY),
        .S_AXI_BRESP(S_AXI_BRESP),
        .S_AXI_BVALID(S_AXI_BVALID),
        .S_AXI_RDATA(S_AXI_RDATA),
        .S_AXI_RREADY(S_AXI_RREADY),
        .S_AXI_RRESP(S_AXI_RRESP),
        .S_AXI_RVALID(S_AXI_RVALID),
        .S_AXI_WDATA(S_AXI_WDATA),
        .S_AXI_WVALID(S_AXI_WVALID),
        .bus2ip_rdce(bus2ip_rdce),
        .bus2ip_wrce(bus2ip_wrce),
        .clear_Ext_BRK(clear_Ext_BRK),
        .enable_interrupts(enable_interrupts),
        .fifo_Data_Present(fifo_Data_Present),
        .out(out),
        .reset_RX_FIFO_i(reset_RX_FIFO_i),
        .reset_TX_FIFO_i(reset_TX_FIFO_i),
        .rst_reg_0(rst_reg),
        .rx_Data_Present(rx_Data_Present),
        .tx_Buffer_Full(tx_Buffer_Full));
endmodule

(* HW_HANDOFF = "debug_cpu_microblaze_mcs_0_0.hwdef" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_bd_6665
   (Clk,
    Reset,
    UART_rxd,
    UART_txd);
  (* X_INTERFACE_INFO = "xilinx.com:signal:clock:1.0 CLK.CLK CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME CLK.CLK, ASSOCIATED_ASYNC_RESET Reset, CLK_DOMAIN debug_cpu_sys_clock, FREQ_HZ 100000000, INSERT_VIP 0, PHASE 0.000" *) input Clk;
  (* X_INTERFACE_INFO = "xilinx.com:signal:reset:1.0 RST.RESET RST" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME RST.RESET, INSERT_VIP 0, POLARITY ACTIVE_LOW" *) input Reset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:uart:1.0 UART RxD" *) input UART_rxd;
  (* X_INTERFACE_INFO = "xilinx.com:interface:uart:1.0 UART TxD" *) output UART_txd;

  wire Clk;
  wire Dbg_Wakeup;
  wire Debug_SYS_Rst;
  wire IO_Rst;
  wire LMB_Rst1;
  wire MB_Reset;
  wire Reset;
  wire UART_rxd;
  wire UART_txd;
  wire [1:0]Wakeup;
  wire [0:31]dlmb_ABUS;
  wire dlmb_ADDRSTROBE;
  wire [0:3]dlmb_BE;
  wire dlmb_CE;
  wire [0:31]dlmb_READDBUS;
  wire dlmb_READSTROBE;
  wire dlmb_READY;
  wire dlmb_UE;
  wire dlmb_WAIT;
  wire [0:31]dlmb_WRITEDBUS;
  wire dlmb_WRITESTROBE;
  wire [0:31]dlmb_port_ADDR;
  wire dlmb_port_CLK;
  wire [0:31]dlmb_port_DIN;
  wire [31:0]dlmb_port_DOUT;
  wire dlmb_port_EN;
  wire dlmb_port_RST;
  wire [0:3]dlmb_port_WE;
  wire [0:31]dlmb_sl_0_ABUS;
  wire dlmb_sl_0_ADDRSTROBE;
  wire [0:3]dlmb_sl_0_BE;
  wire dlmb_sl_0_CE;
  wire [0:31]dlmb_sl_0_READDBUS;
  wire dlmb_sl_0_READSTROBE;
  wire dlmb_sl_0_READY;
  wire dlmb_sl_0_UE;
  wire dlmb_sl_0_WAIT;
  wire [0:31]dlmb_sl_0_WRITEDBUS;
  wire dlmb_sl_0_WRITESTROBE;
  wire dlmb_sl_1_CE;
  wire [0:31]dlmb_sl_1_READDBUS;
  wire dlmb_sl_1_READY;
  wire dlmb_sl_1_UE;
  wire dlmb_sl_1_WAIT;
  wire [0:31]ilmb_ABUS;
  wire ilmb_ADDRSTROBE;
  wire ilmb_CE;
  wire [0:31]ilmb_READDBUS;
  wire ilmb_READSTROBE;
  wire ilmb_READY;
  wire ilmb_UE;
  wire ilmb_WAIT;
  wire [0:31]ilmb_port_ADDR;
  wire ilmb_port_CLK;
  wire [0:31]ilmb_port_DIN;
  wire [31:0]ilmb_port_DOUT;
  wire ilmb_port_EN;
  wire ilmb_port_RST;
  wire [0:3]ilmb_port_WE;
  wire [0:31]ilmb_sl_0_ABUS;
  wire ilmb_sl_0_ADDRSTROBE;
  wire [0:3]ilmb_sl_0_BE;
  wire ilmb_sl_0_CE;
  wire [0:31]ilmb_sl_0_READDBUS;
  wire ilmb_sl_0_READSTROBE;
  wire ilmb_sl_0_READY;
  wire ilmb_sl_0_UE;
  wire ilmb_sl_0_WAIT;
  wire [0:31]ilmb_sl_0_WRITEDBUS;
  wire ilmb_sl_0_WRITESTROBE;
  wire mdm_0_ARESETN;
  wire [3:0]mdm_0_s_axi_ARADDR;
  wire mdm_0_s_axi_ARREADY;
  wire mdm_0_s_axi_ARVALID;
  wire [3:0]mdm_0_s_axi_AWADDR;
  wire mdm_0_s_axi_AWREADY;
  wire mdm_0_s_axi_AWVALID;
  wire mdm_0_s_axi_BREADY;
  wire [1:0]mdm_0_s_axi_BRESP;
  wire mdm_0_s_axi_BVALID;
  wire [31:0]mdm_0_s_axi_RDATA;
  wire mdm_0_s_axi_RREADY;
  wire [1:0]mdm_0_s_axi_RRESP;
  wire mdm_0_s_axi_RVALID;
  wire [31:0]mdm_0_s_axi_WDATA;
  wire mdm_0_s_axi_WREADY;
  wire [3:0]mdm_0_s_axi_WSTRB;
  wire mdm_0_s_axi_WVALID;
  wire microblaze_I_mdm_bus_CAPTURE;
  wire microblaze_I_mdm_bus_CLK;
  wire microblaze_I_mdm_bus_DISABLE;
  wire [0:7]microblaze_I_mdm_bus_REG_EN;
  wire microblaze_I_mdm_bus_RST;
  wire microblaze_I_mdm_bus_SHIFT;
  wire microblaze_I_mdm_bus_TDI;
  wire microblaze_I_mdm_bus_TDO;
  wire microblaze_I_mdm_bus_UPDATE;
  wire NLW_dlmb_LMB_Rst_UNCONNECTED;
  wire NLW_ilmb_LMB_Rst_UNCONNECTED;
  wire NLW_lmb_bram_I_rsta_busy_UNCONNECTED;
  wire NLW_lmb_bram_I_rstb_busy_UNCONNECTED;
  wire NLW_mdm_0_Interrupt_UNCONNECTED;
  wire NLW_microblaze_I_Dbg_Continue_UNCONNECTED;
  wire NLW_microblaze_I_Hibernate_UNCONNECTED;
  wire NLW_microblaze_I_MB_Halted_UNCONNECTED;
  wire NLW_microblaze_I_Pause_Ack_UNCONNECTED;
  wire NLW_microblaze_I_Sleep_UNCONNECTED;
  wire NLW_microblaze_I_Suspend_UNCONNECTED;
  wire [0:1]NLW_microblaze_I_Interrupt_Ack_UNCONNECTED;
  wire [31:4]NLW_microblaze_I_M_AXI_DP_ARADDR_UNCONNECTED;
  wire [2:0]NLW_microblaze_I_M_AXI_DP_ARPROT_UNCONNECTED;
  wire [31:4]NLW_microblaze_I_M_AXI_DP_AWADDR_UNCONNECTED;
  wire [2:0]NLW_microblaze_I_M_AXI_DP_AWPROT_UNCONNECTED;
  wire [0:0]NLW_rst_0_interconnect_aresetn_UNCONNECTED;

  (* CHECK_LICENSE_TYPE = "bd_6665_dlmb_0,lmb_v10,{}" *) 
  (* downgradeipidentifiedwarnings = "yes" *) 
  (* x_core_info = "lmb_v10,Vivado 2019.2.1" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_bd_6665_dlmb_0 dlmb
       (.LMB_ABus(dlmb_sl_0_ABUS),
        .LMB_AddrStrobe(dlmb_sl_0_ADDRSTROBE),
        .LMB_BE(dlmb_sl_0_BE),
        .LMB_CE(dlmb_CE),
        .LMB_Clk(Clk),
        .LMB_ReadDBus(dlmb_READDBUS),
        .LMB_ReadStrobe(dlmb_sl_0_READSTROBE),
        .LMB_Ready(dlmb_READY),
        .LMB_Rst(NLW_dlmb_LMB_Rst_UNCONNECTED),
        .LMB_UE(dlmb_UE),
        .LMB_Wait(dlmb_WAIT),
        .LMB_WriteDBus(dlmb_sl_0_WRITEDBUS),
        .LMB_WriteStrobe(dlmb_sl_0_WRITESTROBE),
        .M_ABus(dlmb_ABUS),
        .M_AddrStrobe(dlmb_ADDRSTROBE),
        .M_BE(dlmb_BE),
        .M_DBus(dlmb_WRITEDBUS),
        .M_ReadStrobe(dlmb_READSTROBE),
        .M_WriteStrobe(dlmb_WRITESTROBE),
        .SYS_Rst(LMB_Rst1),
        .Sl_CE({dlmb_sl_0_CE,dlmb_sl_1_CE}),
        .Sl_DBus({dlmb_sl_0_READDBUS,dlmb_sl_1_READDBUS}),
        .Sl_Ready({dlmb_sl_0_READY,dlmb_sl_1_READY}),
        .Sl_UE({dlmb_sl_0_UE,dlmb_sl_1_UE}),
        .Sl_Wait({dlmb_sl_0_WAIT,dlmb_sl_1_WAIT}));
  (* BMM_INFO_ADDRESS_SPACE = "byte  0x00000000 32 > bd_6665 lmb_bram_I" *) 
  (* CHECK_LICENSE_TYPE = "bd_6665_dlmb_cntlr_0,lmb_bram_if_cntlr,{}" *) 
  (* downgradeipidentifiedwarnings = "yes" *) 
  (* x_core_info = "lmb_bram_if_cntlr,Vivado 2019.2.1" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_bd_6665_dlmb_cntlr_0 dlmb_cntlr
       (.BRAM_Addr_A(dlmb_port_ADDR),
        .BRAM_Clk_A(dlmb_port_CLK),
        .BRAM_Din_A({dlmb_port_DOUT[31],dlmb_port_DOUT[30],dlmb_port_DOUT[29],dlmb_port_DOUT[28],dlmb_port_DOUT[27],dlmb_port_DOUT[26],dlmb_port_DOUT[25],dlmb_port_DOUT[24],dlmb_port_DOUT[23],dlmb_port_DOUT[22],dlmb_port_DOUT[21],dlmb_port_DOUT[20],dlmb_port_DOUT[19],dlmb_port_DOUT[18],dlmb_port_DOUT[17],dlmb_port_DOUT[16],dlmb_port_DOUT[15],dlmb_port_DOUT[14],dlmb_port_DOUT[13],dlmb_port_DOUT[12],dlmb_port_DOUT[11],dlmb_port_DOUT[10],dlmb_port_DOUT[9],dlmb_port_DOUT[8],dlmb_port_DOUT[7],dlmb_port_DOUT[6],dlmb_port_DOUT[5],dlmb_port_DOUT[4],dlmb_port_DOUT[3],dlmb_port_DOUT[2],dlmb_port_DOUT[1],dlmb_port_DOUT[0]}),
        .BRAM_Dout_A(dlmb_port_DIN),
        .BRAM_EN_A(dlmb_port_EN),
        .BRAM_Rst_A(dlmb_port_RST),
        .BRAM_WEN_A(dlmb_port_WE),
        .LMB_ABus(dlmb_sl_0_ABUS),
        .LMB_AddrStrobe(dlmb_sl_0_ADDRSTROBE),
        .LMB_BE(dlmb_sl_0_BE),
        .LMB_Clk(Clk),
        .LMB_ReadStrobe(dlmb_sl_0_READSTROBE),
        .LMB_Rst(LMB_Rst1),
        .LMB_WriteDBus(dlmb_sl_0_WRITEDBUS),
        .LMB_WriteStrobe(dlmb_sl_0_WRITESTROBE),
        .Sl_CE(dlmb_sl_0_CE),
        .Sl_DBus(dlmb_sl_0_READDBUS),
        .Sl_Ready(dlmb_sl_0_READY),
        .Sl_UE(dlmb_sl_0_UE),
        .Sl_Wait(dlmb_sl_0_WAIT));
  (* CHECK_LICENSE_TYPE = "bd_6665_ilmb_0,lmb_v10,{}" *) 
  (* downgradeipidentifiedwarnings = "yes" *) 
  (* x_core_info = "lmb_v10,Vivado 2019.2.1" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_bd_6665_ilmb_0 ilmb
       (.LMB_ABus(ilmb_sl_0_ABUS),
        .LMB_AddrStrobe(ilmb_sl_0_ADDRSTROBE),
        .LMB_BE(ilmb_sl_0_BE),
        .LMB_CE(ilmb_CE),
        .LMB_Clk(Clk),
        .LMB_ReadDBus(ilmb_READDBUS),
        .LMB_ReadStrobe(ilmb_sl_0_READSTROBE),
        .LMB_Ready(ilmb_READY),
        .LMB_Rst(NLW_ilmb_LMB_Rst_UNCONNECTED),
        .LMB_UE(ilmb_UE),
        .LMB_Wait(ilmb_WAIT),
        .LMB_WriteDBus(ilmb_sl_0_WRITEDBUS),
        .LMB_WriteStrobe(ilmb_sl_0_WRITESTROBE),
        .M_ABus(ilmb_ABUS),
        .M_AddrStrobe(ilmb_ADDRSTROBE),
        .M_BE({1'b0,1'b0,1'b0,1'b0}),
        .M_DBus({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .M_ReadStrobe(ilmb_READSTROBE),
        .M_WriteStrobe(1'b0),
        .SYS_Rst(LMB_Rst1),
        .Sl_CE(ilmb_sl_0_CE),
        .Sl_DBus(ilmb_sl_0_READDBUS),
        .Sl_Ready(ilmb_sl_0_READY),
        .Sl_UE(ilmb_sl_0_UE),
        .Sl_Wait(ilmb_sl_0_WAIT));
  (* CHECK_LICENSE_TYPE = "bd_6665_ilmb_cntlr_0,lmb_bram_if_cntlr,{}" *) 
  (* downgradeipidentifiedwarnings = "yes" *) 
  (* x_core_info = "lmb_bram_if_cntlr,Vivado 2019.2.1" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_bd_6665_ilmb_cntlr_0 ilmb_cntlr
       (.BRAM_Addr_A(ilmb_port_ADDR),
        .BRAM_Clk_A(ilmb_port_CLK),
        .BRAM_Din_A({ilmb_port_DOUT[31],ilmb_port_DOUT[30],ilmb_port_DOUT[29],ilmb_port_DOUT[28],ilmb_port_DOUT[27],ilmb_port_DOUT[26],ilmb_port_DOUT[25],ilmb_port_DOUT[24],ilmb_port_DOUT[23],ilmb_port_DOUT[22],ilmb_port_DOUT[21],ilmb_port_DOUT[20],ilmb_port_DOUT[19],ilmb_port_DOUT[18],ilmb_port_DOUT[17],ilmb_port_DOUT[16],ilmb_port_DOUT[15],ilmb_port_DOUT[14],ilmb_port_DOUT[13],ilmb_port_DOUT[12],ilmb_port_DOUT[11],ilmb_port_DOUT[10],ilmb_port_DOUT[9],ilmb_port_DOUT[8],ilmb_port_DOUT[7],ilmb_port_DOUT[6],ilmb_port_DOUT[5],ilmb_port_DOUT[4],ilmb_port_DOUT[3],ilmb_port_DOUT[2],ilmb_port_DOUT[1],ilmb_port_DOUT[0]}),
        .BRAM_Dout_A(ilmb_port_DIN),
        .BRAM_EN_A(ilmb_port_EN),
        .BRAM_Rst_A(ilmb_port_RST),
        .BRAM_WEN_A(ilmb_port_WE),
        .LMB_ABus(ilmb_sl_0_ABUS),
        .LMB_AddrStrobe(ilmb_sl_0_ADDRSTROBE),
        .LMB_BE(ilmb_sl_0_BE),
        .LMB_Clk(Clk),
        .LMB_ReadStrobe(ilmb_sl_0_READSTROBE),
        .LMB_Rst(LMB_Rst1),
        .LMB_WriteDBus(ilmb_sl_0_WRITEDBUS),
        .LMB_WriteStrobe(ilmb_sl_0_WRITESTROBE),
        .Sl_CE(ilmb_sl_0_CE),
        .Sl_DBus(ilmb_sl_0_READDBUS),
        .Sl_Ready(ilmb_sl_0_READY),
        .Sl_UE(ilmb_sl_0_UE),
        .Sl_Wait(ilmb_sl_0_WAIT));
  (* CHECK_LICENSE_TYPE = "bd_6665_iomodule_0_0,iomodule,{}" *) 
  (* downgradeipidentifiedwarnings = "yes" *) 
  (* x_core_info = "iomodule,Vivado 2019.2.1" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_bd_6665_iomodule_0_0 iomodule_0
       (.Clk(Clk),
        .LMB_ABus(dlmb_sl_0_ABUS),
        .LMB_AddrStrobe(dlmb_sl_0_ADDRSTROBE),
        .LMB_BE(dlmb_sl_0_BE),
        .LMB_ReadStrobe(dlmb_sl_0_READSTROBE),
        .LMB_WriteDBus(dlmb_sl_0_WRITEDBUS),
        .LMB_WriteStrobe(dlmb_sl_0_WRITESTROBE),
        .Rst(IO_Rst),
        .Sl_CE(dlmb_sl_1_CE),
        .Sl_DBus(dlmb_sl_1_READDBUS),
        .Sl_Ready(dlmb_sl_1_READY),
        .Sl_UE(dlmb_sl_1_UE),
        .Sl_Wait(dlmb_sl_1_WAIT),
        .UART_Rx(UART_rxd),
        .UART_Tx(UART_txd));
  (* CHECK_LICENSE_TYPE = "bd_6665_lmb_bram_I_0,blk_mem_gen_v8_4_4,{}" *) 
  (* downgradeipidentifiedwarnings = "yes" *) 
  (* x_core_info = "blk_mem_gen_v8_4_4,Vivado 2019.2.1" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_bd_6665_lmb_bram_I_0 lmb_bram_I
       (.addra({dlmb_port_ADDR[0],dlmb_port_ADDR[1],dlmb_port_ADDR[2],dlmb_port_ADDR[3],dlmb_port_ADDR[4],dlmb_port_ADDR[5],dlmb_port_ADDR[6],dlmb_port_ADDR[7],dlmb_port_ADDR[8],dlmb_port_ADDR[9],dlmb_port_ADDR[10],dlmb_port_ADDR[11],dlmb_port_ADDR[12],dlmb_port_ADDR[13],dlmb_port_ADDR[14],dlmb_port_ADDR[15],dlmb_port_ADDR[16],dlmb_port_ADDR[17],dlmb_port_ADDR[18],dlmb_port_ADDR[19],dlmb_port_ADDR[20],dlmb_port_ADDR[21],dlmb_port_ADDR[22],dlmb_port_ADDR[23],dlmb_port_ADDR[24],dlmb_port_ADDR[25],dlmb_port_ADDR[26],dlmb_port_ADDR[27],dlmb_port_ADDR[28],dlmb_port_ADDR[29],dlmb_port_ADDR[30],dlmb_port_ADDR[31]}),
        .addrb({ilmb_port_ADDR[0],ilmb_port_ADDR[1],ilmb_port_ADDR[2],ilmb_port_ADDR[3],ilmb_port_ADDR[4],ilmb_port_ADDR[5],ilmb_port_ADDR[6],ilmb_port_ADDR[7],ilmb_port_ADDR[8],ilmb_port_ADDR[9],ilmb_port_ADDR[10],ilmb_port_ADDR[11],ilmb_port_ADDR[12],ilmb_port_ADDR[13],ilmb_port_ADDR[14],ilmb_port_ADDR[15],ilmb_port_ADDR[16],ilmb_port_ADDR[17],ilmb_port_ADDR[18],ilmb_port_ADDR[19],ilmb_port_ADDR[20],ilmb_port_ADDR[21],ilmb_port_ADDR[22],ilmb_port_ADDR[23],ilmb_port_ADDR[24],ilmb_port_ADDR[25],ilmb_port_ADDR[26],ilmb_port_ADDR[27],ilmb_port_ADDR[28],ilmb_port_ADDR[29],ilmb_port_ADDR[30],ilmb_port_ADDR[31]}),
        .clka(dlmb_port_CLK),
        .clkb(ilmb_port_CLK),
        .dina({dlmb_port_DIN[0],dlmb_port_DIN[1],dlmb_port_DIN[2],dlmb_port_DIN[3],dlmb_port_DIN[4],dlmb_port_DIN[5],dlmb_port_DIN[6],dlmb_port_DIN[7],dlmb_port_DIN[8],dlmb_port_DIN[9],dlmb_port_DIN[10],dlmb_port_DIN[11],dlmb_port_DIN[12],dlmb_port_DIN[13],dlmb_port_DIN[14],dlmb_port_DIN[15],dlmb_port_DIN[16],dlmb_port_DIN[17],dlmb_port_DIN[18],dlmb_port_DIN[19],dlmb_port_DIN[20],dlmb_port_DIN[21],dlmb_port_DIN[22],dlmb_port_DIN[23],dlmb_port_DIN[24],dlmb_port_DIN[25],dlmb_port_DIN[26],dlmb_port_DIN[27],dlmb_port_DIN[28],dlmb_port_DIN[29],dlmb_port_DIN[30],dlmb_port_DIN[31]}),
        .dinb({ilmb_port_DIN[0],ilmb_port_DIN[1],ilmb_port_DIN[2],ilmb_port_DIN[3],ilmb_port_DIN[4],ilmb_port_DIN[5],ilmb_port_DIN[6],ilmb_port_DIN[7],ilmb_port_DIN[8],ilmb_port_DIN[9],ilmb_port_DIN[10],ilmb_port_DIN[11],ilmb_port_DIN[12],ilmb_port_DIN[13],ilmb_port_DIN[14],ilmb_port_DIN[15],ilmb_port_DIN[16],ilmb_port_DIN[17],ilmb_port_DIN[18],ilmb_port_DIN[19],ilmb_port_DIN[20],ilmb_port_DIN[21],ilmb_port_DIN[22],ilmb_port_DIN[23],ilmb_port_DIN[24],ilmb_port_DIN[25],ilmb_port_DIN[26],ilmb_port_DIN[27],ilmb_port_DIN[28],ilmb_port_DIN[29],ilmb_port_DIN[30],ilmb_port_DIN[31]}),
        .douta(dlmb_port_DOUT),
        .doutb(ilmb_port_DOUT),
        .ena(dlmb_port_EN),
        .enb(ilmb_port_EN),
        .rsta(dlmb_port_RST),
        .rsta_busy(NLW_lmb_bram_I_rsta_busy_UNCONNECTED),
        .rstb(ilmb_port_RST),
        .rstb_busy(NLW_lmb_bram_I_rstb_busy_UNCONNECTED),
        .wea({dlmb_port_WE[0],dlmb_port_WE[1],dlmb_port_WE[2],dlmb_port_WE[3]}),
        .web({ilmb_port_WE[0],ilmb_port_WE[1],ilmb_port_WE[2],ilmb_port_WE[3]}));
  (* CHECK_LICENSE_TYPE = "bd_6665_mdm_0_0,MDM,{}" *) 
  (* downgradeipidentifiedwarnings = "yes" *) 
  (* x_core_info = "MDM,Vivado 2019.2.1" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_bd_6665_mdm_0_0 mdm_0
       (.Dbg_Capture_0(microblaze_I_mdm_bus_CAPTURE),
        .Dbg_Clk_0(microblaze_I_mdm_bus_CLK),
        .Dbg_Disable_0(microblaze_I_mdm_bus_DISABLE),
        .Dbg_Reg_En_0(microblaze_I_mdm_bus_REG_EN),
        .Dbg_Rst_0(microblaze_I_mdm_bus_RST),
        .Dbg_Shift_0(microblaze_I_mdm_bus_SHIFT),
        .Dbg_TDI_0(microblaze_I_mdm_bus_TDI),
        .Dbg_TDO_0(microblaze_I_mdm_bus_TDO),
        .Dbg_Update_0(microblaze_I_mdm_bus_UPDATE),
        .Debug_SYS_Rst(Debug_SYS_Rst),
        .Interrupt(NLW_mdm_0_Interrupt_UNCONNECTED),
        .S_AXI_ACLK(Clk),
        .S_AXI_ARADDR(mdm_0_s_axi_ARADDR),
        .S_AXI_ARESETN(mdm_0_ARESETN),
        .S_AXI_ARREADY(mdm_0_s_axi_ARREADY),
        .S_AXI_ARVALID(mdm_0_s_axi_ARVALID),
        .S_AXI_AWADDR(mdm_0_s_axi_AWADDR),
        .S_AXI_AWREADY(mdm_0_s_axi_AWREADY),
        .S_AXI_AWVALID(mdm_0_s_axi_AWVALID),
        .S_AXI_BREADY(mdm_0_s_axi_BREADY),
        .S_AXI_BRESP(mdm_0_s_axi_BRESP),
        .S_AXI_BVALID(mdm_0_s_axi_BVALID),
        .S_AXI_RDATA(mdm_0_s_axi_RDATA),
        .S_AXI_RREADY(mdm_0_s_axi_RREADY),
        .S_AXI_RRESP(mdm_0_s_axi_RRESP),
        .S_AXI_RVALID(mdm_0_s_axi_RVALID),
        .S_AXI_WDATA(mdm_0_s_axi_WDATA),
        .S_AXI_WREADY(mdm_0_s_axi_WREADY),
        .S_AXI_WSTRB(mdm_0_s_axi_WSTRB),
        .S_AXI_WVALID(mdm_0_s_axi_WVALID));
  (* BMM_INFO_PROCESSOR = "microblaze-le > bd_6665 dlmb_cntlr" *) 
  (* CHECK_LICENSE_TYPE = "bd_6665_microblaze_I_0,MicroBlaze,{}" *) 
  (* downgradeipidentifiedwarnings = "yes" *) 
  (* x_core_info = "MicroBlaze,Vivado 2019.2.1" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_bd_6665_microblaze_I_0 microblaze_I
       (.Byte_Enable(dlmb_BE),
        .Clk(Clk),
        .DCE(dlmb_CE),
        .DReady(dlmb_READY),
        .DUE(dlmb_UE),
        .DWait(dlmb_WAIT),
        .D_AS(dlmb_ADDRSTROBE),
        .Data_Addr(dlmb_ABUS),
        .Data_Read(dlmb_READDBUS),
        .Data_Write(dlmb_WRITEDBUS),
        .Dbg_Capture(microblaze_I_mdm_bus_CAPTURE),
        .Dbg_Clk(microblaze_I_mdm_bus_CLK),
        .Dbg_Continue(NLW_microblaze_I_Dbg_Continue_UNCONNECTED),
        .Dbg_Disable(microblaze_I_mdm_bus_DISABLE),
        .Dbg_Reg_En(microblaze_I_mdm_bus_REG_EN),
        .Dbg_Shift(microblaze_I_mdm_bus_SHIFT),
        .Dbg_Stop(1'b0),
        .Dbg_TDI(microblaze_I_mdm_bus_TDI),
        .Dbg_TDO(microblaze_I_mdm_bus_TDO),
        .Dbg_Update(microblaze_I_mdm_bus_UPDATE),
        .Dbg_Wakeup(Dbg_Wakeup),
        .Debug_Rst(microblaze_I_mdm_bus_RST),
        .Ext_BRK(1'b0),
        .Ext_NM_BRK(1'b0),
        .Hibernate(NLW_microblaze_I_Hibernate_UNCONNECTED),
        .ICE(ilmb_CE),
        .IFetch(ilmb_READSTROBE),
        .IReady(ilmb_READY),
        .IUE(ilmb_UE),
        .IWAIT(ilmb_WAIT),
        .I_AS(ilmb_ADDRSTROBE),
        .Instr(ilmb_READDBUS),
        .Instr_Addr(ilmb_ABUS),
        .Interrupt(1'b0),
        .Interrupt_Ack(NLW_microblaze_I_Interrupt_Ack_UNCONNECTED[0:1]),
        .Interrupt_Address({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .MB_Halted(NLW_microblaze_I_MB_Halted_UNCONNECTED),
        .M_AXI_DP_ARADDR({NLW_microblaze_I_M_AXI_DP_ARADDR_UNCONNECTED[31:4],mdm_0_s_axi_ARADDR}),
        .M_AXI_DP_ARPROT(NLW_microblaze_I_M_AXI_DP_ARPROT_UNCONNECTED[2:0]),
        .M_AXI_DP_ARREADY(mdm_0_s_axi_ARREADY),
        .M_AXI_DP_ARVALID(mdm_0_s_axi_ARVALID),
        .M_AXI_DP_AWADDR({NLW_microblaze_I_M_AXI_DP_AWADDR_UNCONNECTED[31:4],mdm_0_s_axi_AWADDR}),
        .M_AXI_DP_AWPROT(NLW_microblaze_I_M_AXI_DP_AWPROT_UNCONNECTED[2:0]),
        .M_AXI_DP_AWREADY(mdm_0_s_axi_AWREADY),
        .M_AXI_DP_AWVALID(mdm_0_s_axi_AWVALID),
        .M_AXI_DP_BREADY(mdm_0_s_axi_BREADY),
        .M_AXI_DP_BRESP(mdm_0_s_axi_BRESP),
        .M_AXI_DP_BVALID(mdm_0_s_axi_BVALID),
        .M_AXI_DP_RDATA(mdm_0_s_axi_RDATA),
        .M_AXI_DP_RREADY(mdm_0_s_axi_RREADY),
        .M_AXI_DP_RRESP(mdm_0_s_axi_RRESP),
        .M_AXI_DP_RVALID(mdm_0_s_axi_RVALID),
        .M_AXI_DP_WDATA(mdm_0_s_axi_WDATA),
        .M_AXI_DP_WREADY(mdm_0_s_axi_WREADY),
        .M_AXI_DP_WSTRB(mdm_0_s_axi_WSTRB),
        .M_AXI_DP_WVALID(mdm_0_s_axi_WVALID),
        .Non_Secure({1'b0,1'b0,1'b0,1'b0}),
        .Pause(1'b0),
        .Pause_Ack(NLW_microblaze_I_Pause_Ack_UNCONNECTED),
        .Read_Strobe(dlmb_READSTROBE),
        .Reset(MB_Reset),
        .Reset_Mode({1'b0,1'b0}),
        .Sleep(NLW_microblaze_I_Sleep_UNCONNECTED),
        .Suspend(NLW_microblaze_I_Suspend_UNCONNECTED),
        .Wakeup({Wakeup[1],Wakeup[0]}),
        .Write_Strobe(dlmb_WRITESTROBE));
  (* CHECK_LICENSE_TYPE = "bd_6665_rst_0_0,proc_sys_reset,{}" *) 
  (* downgradeipidentifiedwarnings = "yes" *) 
  (* x_core_info = "proc_sys_reset,Vivado 2019.2.1" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_bd_6665_rst_0_0 rst_0
       (.aux_reset_in(1'b1),
        .bus_struct_reset(LMB_Rst1),
        .dcm_locked(1'b1),
        .ext_reset_in(Reset),
        .interconnect_aresetn(NLW_rst_0_interconnect_aresetn_UNCONNECTED[0]),
        .mb_debug_sys_rst(Debug_SYS_Rst),
        .mb_reset(MB_Reset),
        .peripheral_aresetn(mdm_0_ARESETN),
        .peripheral_reset(IO_Rst),
        .slowest_sync_clk(Clk));
  (* CHECK_LICENSE_TYPE = "bd_6665_xlconcat_0_0,xlconcat_v2_1_3_xlconcat,{}" *) 
  (* downgradeipidentifiedwarnings = "yes" *) 
  (* x_core_info = "xlconcat_v2_1_3_xlconcat,Vivado 2019.2.1" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_bd_6665_xlconcat_0_0 xlconcat_0
       (.In0(Dbg_Wakeup),
        .In1(Dbg_Wakeup),
        .dout(Wakeup));
endmodule

(* CHECK_LICENSE_TYPE = "bd_6665_dlmb_0,lmb_v10,{}" *) (* DowngradeIPIdentifiedWarnings = "yes" *) (* X_CORE_INFO = "lmb_v10,Vivado 2019.2.1" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_bd_6665_dlmb_0
   (LMB_Clk,
    SYS_Rst,
    LMB_Rst,
    M_ABus,
    M_ReadStrobe,
    M_WriteStrobe,
    M_AddrStrobe,
    M_DBus,
    M_BE,
    Sl_DBus,
    Sl_Ready,
    Sl_Wait,
    Sl_UE,
    Sl_CE,
    LMB_ABus,
    LMB_ReadStrobe,
    LMB_WriteStrobe,
    LMB_AddrStrobe,
    LMB_ReadDBus,
    LMB_WriteDBus,
    LMB_Ready,
    LMB_Wait,
    LMB_UE,
    LMB_CE,
    LMB_BE);
  (* X_INTERFACE_INFO = "xilinx.com:signal:clock:1.0 CLK.LMB_Clk CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME CLK.LMB_Clk, ASSOCIATED_BUSIF LMB_Sl_0:LMB_Sl_1:LMB_Sl_2:LMB_Sl_3:LMB_Sl_4:LMB_Sl_5:LMB_Sl_6:LMB_Sl_7:LMB_Sl_8:LMB_Sl_9:LMB_Sl_10:LMB_Sl_11:LMB_Sl_12:LMB_Sl_13:LMB_Sl_14:LMB_Sl_15:LMB_M, ASSOCIATED_RESET SYS_Rst, FREQ_HZ 100000000, PHASE 0.000, CLK_DOMAIN debug_cpu_sys_clock, INSERT_VIP 0" *) input LMB_Clk;
  (* X_INTERFACE_INFO = "xilinx.com:signal:reset:1.0 RST.SYS_Rst RST" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME RST.SYS_Rst, POLARITY ACTIVE_HIGH, TYPE INTERCONNECT, INSERT_VIP 0" *) input SYS_Rst;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 LMB_Sl_0 RST, xilinx.com:interface:lmb:1.0 LMB_Sl_1 RST, xilinx.com:interface:lmb:1.0 LMB_M RST" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME LMB_Sl_0, ADDR_WIDTH 32, DATA_WIDTH 32, READ_WRITE_MODE READ_WRITE, PROTOCOL STANDARD, XIL_INTERFACENAME LMB_Sl_1, ADDR_WIDTH 32, DATA_WIDTH 32, READ_WRITE_MODE READ_WRITE, PROTOCOL STANDARD, XIL_INTERFACENAME LMB_M, ADDR_WIDTH 32, DATA_WIDTH 32, READ_WRITE_MODE READ_WRITE, PROTOCOL STANDARD" *) output LMB_Rst;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 LMB_M ABUS" *) input [0:31]M_ABus;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 LMB_M READSTROBE" *) input M_ReadStrobe;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 LMB_M WRITESTROBE" *) input M_WriteStrobe;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 LMB_M ADDRSTROBE" *) input M_AddrStrobe;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 LMB_M WRITEDBUS" *) input [0:31]M_DBus;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 LMB_M BE" *) input [0:3]M_BE;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 LMB_Sl_0 READDBUS [0:31] [0:31], xilinx.com:interface:lmb:1.0 LMB_Sl_1 READDBUS [0:31] [32:63]" *) input [0:63]Sl_DBus;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 LMB_Sl_0 READY [0:0] [0:0], xilinx.com:interface:lmb:1.0 LMB_Sl_1 READY [0:0] [1:1]" *) input [0:1]Sl_Ready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 LMB_Sl_0 WAIT [0:0] [0:0], xilinx.com:interface:lmb:1.0 LMB_Sl_1 WAIT [0:0] [1:1]" *) input [0:1]Sl_Wait;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 LMB_Sl_0 UE [0:0] [0:0], xilinx.com:interface:lmb:1.0 LMB_Sl_1 UE [0:0] [1:1]" *) input [0:1]Sl_UE;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 LMB_Sl_0 CE [0:0] [0:0], xilinx.com:interface:lmb:1.0 LMB_Sl_1 CE [0:0] [1:1]" *) input [0:1]Sl_CE;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 LMB_Sl_0 ABUS, xilinx.com:interface:lmb:1.0 LMB_Sl_1 ABUS" *) output [0:31]LMB_ABus;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 LMB_Sl_0 READSTROBE, xilinx.com:interface:lmb:1.0 LMB_Sl_1 READSTROBE" *) output LMB_ReadStrobe;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 LMB_Sl_0 WRITESTROBE, xilinx.com:interface:lmb:1.0 LMB_Sl_1 WRITESTROBE" *) output LMB_WriteStrobe;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 LMB_Sl_0 ADDRSTROBE, xilinx.com:interface:lmb:1.0 LMB_Sl_1 ADDRSTROBE" *) output LMB_AddrStrobe;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 LMB_M READDBUS" *) output [0:31]LMB_ReadDBus;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 LMB_Sl_0 WRITEDBUS, xilinx.com:interface:lmb:1.0 LMB_Sl_1 WRITEDBUS" *) output [0:31]LMB_WriteDBus;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 LMB_M READY" *) output LMB_Ready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 LMB_M WAIT" *) output LMB_Wait;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 LMB_M UE" *) output LMB_UE;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 LMB_M CE" *) output LMB_CE;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 LMB_Sl_0 BE, xilinx.com:interface:lmb:1.0 LMB_Sl_1 BE" *) output [0:3]LMB_BE;

  wire [0:31]LMB_ABus;
  wire LMB_AddrStrobe;
  wire [0:3]LMB_BE;
  wire LMB_CE;
  wire LMB_Clk;
  wire [0:31]LMB_ReadDBus;
  wire LMB_ReadStrobe;
  wire LMB_Ready;
  wire LMB_Rst;
  wire LMB_UE;
  wire LMB_Wait;
  wire [0:31]LMB_WriteDBus;
  wire LMB_WriteStrobe;
  wire [0:31]M_ABus;
  wire M_AddrStrobe;
  wire [0:3]M_BE;
  wire [0:31]M_DBus;
  wire M_ReadStrobe;
  wire M_WriteStrobe;
  wire SYS_Rst;
  wire [0:1]Sl_CE;
  wire [0:63]Sl_DBus;
  wire [0:1]Sl_Ready;
  wire [0:1]Sl_UE;
  wire [0:1]Sl_Wait;

  (* C_EXT_RESET_HIGH = "1" *) 
  (* C_LMB_AWIDTH = "32" *) 
  (* C_LMB_DWIDTH = "32" *) 
  (* C_LMB_NUM_SLAVES = "2" *) 
  (* C_LMB_PROTOCOL = "0" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_lmb_v10 U0
       (.LMB_ABus(LMB_ABus),
        .LMB_AddrStrobe(LMB_AddrStrobe),
        .LMB_BE(LMB_BE),
        .LMB_CE(LMB_CE),
        .LMB_Clk(LMB_Clk),
        .LMB_ReadDBus(LMB_ReadDBus),
        .LMB_ReadStrobe(LMB_ReadStrobe),
        .LMB_Ready(LMB_Ready),
        .LMB_Rst(LMB_Rst),
        .LMB_UE(LMB_UE),
        .LMB_Wait(LMB_Wait),
        .LMB_WriteDBus(LMB_WriteDBus),
        .LMB_WriteStrobe(LMB_WriteStrobe),
        .M_ABus(M_ABus),
        .M_AddrStrobe(M_AddrStrobe),
        .M_BE(M_BE),
        .M_DBus(M_DBus),
        .M_ReadStrobe(M_ReadStrobe),
        .M_WriteStrobe(M_WriteStrobe),
        .SYS_Rst(SYS_Rst),
        .Sl_CE(Sl_CE),
        .Sl_DBus(Sl_DBus),
        .Sl_Ready(Sl_Ready),
        .Sl_UE(Sl_UE),
        .Sl_Wait(Sl_Wait));
endmodule

(* CHECK_LICENSE_TYPE = "bd_6665_dlmb_cntlr_0,lmb_bram_if_cntlr,{}" *) (* DowngradeIPIdentifiedWarnings = "yes" *) (* X_CORE_INFO = "lmb_bram_if_cntlr,Vivado 2019.2.1" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_bd_6665_dlmb_cntlr_0
   (LMB_Clk,
    LMB_Rst,
    LMB_ABus,
    LMB_WriteDBus,
    LMB_AddrStrobe,
    LMB_ReadStrobe,
    LMB_WriteStrobe,
    LMB_BE,
    Sl_DBus,
    Sl_Ready,
    Sl_Wait,
    Sl_UE,
    Sl_CE,
    BRAM_Rst_A,
    BRAM_Clk_A,
    BRAM_Addr_A,
    BRAM_EN_A,
    BRAM_WEN_A,
    BRAM_Dout_A,
    BRAM_Din_A);
  (* X_INTERFACE_INFO = "xilinx.com:signal:clock:1.0 CLK.LMB_Clk CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME CLK.LMB_Clk, ASSOCIATED_BUSIF SLMB:SLMB1:SLMB2:SLMB3, ASSOCIATED_RESET LMB_Rst, FREQ_HZ 100000000, PHASE 0.000, CLK_DOMAIN debug_cpu_sys_clock, INSERT_VIP 0" *) input LMB_Clk;
  (* X_INTERFACE_INFO = "xilinx.com:signal:reset:1.0 RST.LMB_Rst RST" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME RST.LMB_Rst, POLARITY ACTIVE_HIGH, TYPE INTERCONNECT, INSERT_VIP 0" *) input LMB_Rst;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 SLMB ABUS" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME SLMB, ADDR_WIDTH 32, DATA_WIDTH 32, READ_WRITE_MODE READ_WRITE, PROTOCOL STANDARD" *) input [0:31]LMB_ABus;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 SLMB WRITEDBUS" *) input [0:31]LMB_WriteDBus;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 SLMB ADDRSTROBE" *) input LMB_AddrStrobe;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 SLMB READSTROBE" *) input LMB_ReadStrobe;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 SLMB WRITESTROBE" *) input LMB_WriteStrobe;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 SLMB BE" *) input [0:3]LMB_BE;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 SLMB READDBUS" *) output [0:31]Sl_DBus;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 SLMB READY" *) output Sl_Ready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 SLMB WAIT" *) output Sl_Wait;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 SLMB UE" *) output Sl_UE;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 SLMB CE" *) output Sl_CE;
  (* X_INTERFACE_INFO = "xilinx.com:interface:bram:1.0 BRAM_PORT RST" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME BRAM_PORT, MEM_SIZE 65536, MASTER_TYPE BRAM_CTRL, MEM_WIDTH 32, MEM_ECC NONE, READ_LATENCY 1" *) output BRAM_Rst_A;
  (* X_INTERFACE_INFO = "xilinx.com:interface:bram:1.0 BRAM_PORT CLK" *) output BRAM_Clk_A;
  (* X_INTERFACE_INFO = "xilinx.com:interface:bram:1.0 BRAM_PORT ADDR" *) output [0:31]BRAM_Addr_A;
  (* X_INTERFACE_INFO = "xilinx.com:interface:bram:1.0 BRAM_PORT EN" *) output BRAM_EN_A;
  (* X_INTERFACE_INFO = "xilinx.com:interface:bram:1.0 BRAM_PORT WE" *) output [0:3]BRAM_WEN_A;
  (* X_INTERFACE_INFO = "xilinx.com:interface:bram:1.0 BRAM_PORT DIN" *) output [0:31]BRAM_Dout_A;
  (* X_INTERFACE_INFO = "xilinx.com:interface:bram:1.0 BRAM_PORT DOUT" *) input [0:31]BRAM_Din_A;

  wire \<const0> ;
  wire [0:31]BRAM_Din_A;
  wire [0:3]BRAM_WEN_A;
  wire [0:31]LMB_ABus;
  wire LMB_AddrStrobe;
  wire [0:3]LMB_BE;
  wire LMB_Clk;
  wire LMB_Rst;
  wire [0:31]LMB_WriteDBus;
  wire LMB_WriteStrobe;
  wire Sl_Ready;

  assign BRAM_Addr_A[0:31] = LMB_ABus;
  assign BRAM_Clk_A = LMB_Clk;
  assign BRAM_Dout_A[0:31] = LMB_WriteDBus;
  assign BRAM_EN_A = LMB_AddrStrobe;
  assign BRAM_Rst_A = \<const0> ;
  assign Sl_CE = \<const0> ;
  assign Sl_DBus[0:31] = BRAM_Din_A;
  assign Sl_UE = \<const0> ;
  assign Sl_Wait = \<const0> ;
  GND GND
       (.G(\<const0> ));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_lmb_bram_if_cntlr U0
       (.BRAM_WEN_A(BRAM_WEN_A),
        .LMB_ABus({LMB_ABus[0],LMB_ABus[1]}),
        .LMB_AddrStrobe(LMB_AddrStrobe),
        .LMB_BE(LMB_BE),
        .LMB_Clk(LMB_Clk),
        .LMB_Rst(LMB_Rst),
        .LMB_WriteStrobe(LMB_WriteStrobe),
        .Sl_Ready(Sl_Ready));
endmodule

(* CHECK_LICENSE_TYPE = "bd_6665_ilmb_0,lmb_v10,{}" *) (* DowngradeIPIdentifiedWarnings = "yes" *) (* X_CORE_INFO = "lmb_v10,Vivado 2019.2.1" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_bd_6665_ilmb_0
   (LMB_Clk,
    SYS_Rst,
    LMB_Rst,
    M_ABus,
    M_ReadStrobe,
    M_WriteStrobe,
    M_AddrStrobe,
    M_DBus,
    M_BE,
    Sl_DBus,
    Sl_Ready,
    Sl_Wait,
    Sl_UE,
    Sl_CE,
    LMB_ABus,
    LMB_ReadStrobe,
    LMB_WriteStrobe,
    LMB_AddrStrobe,
    LMB_ReadDBus,
    LMB_WriteDBus,
    LMB_Ready,
    LMB_Wait,
    LMB_UE,
    LMB_CE,
    LMB_BE);
  (* X_INTERFACE_INFO = "xilinx.com:signal:clock:1.0 CLK.LMB_Clk CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME CLK.LMB_Clk, ASSOCIATED_BUSIF LMB_Sl_0:LMB_Sl_1:LMB_Sl_2:LMB_Sl_3:LMB_Sl_4:LMB_Sl_5:LMB_Sl_6:LMB_Sl_7:LMB_Sl_8:LMB_Sl_9:LMB_Sl_10:LMB_Sl_11:LMB_Sl_12:LMB_Sl_13:LMB_Sl_14:LMB_Sl_15:LMB_M, ASSOCIATED_RESET SYS_Rst, FREQ_HZ 100000000, PHASE 0.000, CLK_DOMAIN debug_cpu_sys_clock, INSERT_VIP 0" *) input LMB_Clk;
  (* X_INTERFACE_INFO = "xilinx.com:signal:reset:1.0 RST.SYS_Rst RST" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME RST.SYS_Rst, POLARITY ACTIVE_HIGH, TYPE INTERCONNECT, INSERT_VIP 0" *) input SYS_Rst;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 LMB_Sl_0 RST, xilinx.com:interface:lmb:1.0 LMB_M RST" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME LMB_Sl_0, ADDR_WIDTH 32, DATA_WIDTH 32, READ_WRITE_MODE READ_WRITE, PROTOCOL STANDARD, XIL_INTERFACENAME LMB_M, ADDR_WIDTH 32, DATA_WIDTH 32, READ_WRITE_MODE READ_ONLY, PROTOCOL STANDARD" *) output LMB_Rst;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 LMB_M ABUS" *) input [0:31]M_ABus;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 LMB_M READSTROBE" *) input M_ReadStrobe;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 LMB_M WRITESTROBE" *) input M_WriteStrobe;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 LMB_M ADDRSTROBE" *) input M_AddrStrobe;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 LMB_M WRITEDBUS" *) input [0:31]M_DBus;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 LMB_M BE" *) input [0:3]M_BE;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 LMB_Sl_0 READDBUS" *) input [0:31]Sl_DBus;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 LMB_Sl_0 READY" *) input [0:0]Sl_Ready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 LMB_Sl_0 WAIT" *) input [0:0]Sl_Wait;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 LMB_Sl_0 UE" *) input [0:0]Sl_UE;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 LMB_Sl_0 CE" *) input [0:0]Sl_CE;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 LMB_Sl_0 ABUS" *) output [0:31]LMB_ABus;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 LMB_Sl_0 READSTROBE" *) output LMB_ReadStrobe;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 LMB_Sl_0 WRITESTROBE" *) output LMB_WriteStrobe;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 LMB_Sl_0 ADDRSTROBE" *) output LMB_AddrStrobe;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 LMB_M READDBUS" *) output [0:31]LMB_ReadDBus;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 LMB_Sl_0 WRITEDBUS" *) output [0:31]LMB_WriteDBus;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 LMB_M READY" *) output LMB_Ready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 LMB_M WAIT" *) output LMB_Wait;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 LMB_M UE" *) output LMB_UE;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 LMB_M CE" *) output LMB_CE;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 LMB_Sl_0 BE" *) output [0:3]LMB_BE;

  wire [0:31]LMB_ABus;
  wire LMB_AddrStrobe;
  wire [0:3]LMB_BE;
  wire LMB_CE;
  wire LMB_Clk;
  wire [0:31]LMB_ReadDBus;
  wire LMB_ReadStrobe;
  wire LMB_Ready;
  wire LMB_Rst;
  wire LMB_UE;
  wire LMB_Wait;
  wire [0:31]LMB_WriteDBus;
  wire LMB_WriteStrobe;
  wire [0:31]M_ABus;
  wire M_AddrStrobe;
  wire [0:3]M_BE;
  wire [0:31]M_DBus;
  wire M_ReadStrobe;
  wire M_WriteStrobe;
  wire SYS_Rst;
  wire [0:0]Sl_CE;
  wire [0:31]Sl_DBus;
  wire [0:0]Sl_Ready;
  wire [0:0]Sl_UE;
  wire [0:0]Sl_Wait;

  (* C_EXT_RESET_HIGH = "1" *) 
  (* C_LMB_AWIDTH = "32" *) 
  (* C_LMB_DWIDTH = "32" *) 
  (* C_LMB_NUM_SLAVES = "1" *) 
  (* C_LMB_PROTOCOL = "0" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_lmb_v10__parameterized1 U0
       (.LMB_ABus(LMB_ABus),
        .LMB_AddrStrobe(LMB_AddrStrobe),
        .LMB_BE(LMB_BE),
        .LMB_CE(LMB_CE),
        .LMB_Clk(LMB_Clk),
        .LMB_ReadDBus(LMB_ReadDBus),
        .LMB_ReadStrobe(LMB_ReadStrobe),
        .LMB_Ready(LMB_Ready),
        .LMB_Rst(LMB_Rst),
        .LMB_UE(LMB_UE),
        .LMB_Wait(LMB_Wait),
        .LMB_WriteDBus(LMB_WriteDBus),
        .LMB_WriteStrobe(LMB_WriteStrobe),
        .M_ABus(M_ABus),
        .M_AddrStrobe(M_AddrStrobe),
        .M_BE(M_BE),
        .M_DBus(M_DBus),
        .M_ReadStrobe(M_ReadStrobe),
        .M_WriteStrobe(M_WriteStrobe),
        .SYS_Rst(SYS_Rst),
        .Sl_CE(Sl_CE),
        .Sl_DBus(Sl_DBus),
        .Sl_Ready(Sl_Ready),
        .Sl_UE(Sl_UE),
        .Sl_Wait(Sl_Wait));
endmodule

(* CHECK_LICENSE_TYPE = "bd_6665_ilmb_cntlr_0,lmb_bram_if_cntlr,{}" *) (* DowngradeIPIdentifiedWarnings = "yes" *) (* X_CORE_INFO = "lmb_bram_if_cntlr,Vivado 2019.2.1" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_bd_6665_ilmb_cntlr_0
   (LMB_Clk,
    LMB_Rst,
    LMB_ABus,
    LMB_WriteDBus,
    LMB_AddrStrobe,
    LMB_ReadStrobe,
    LMB_WriteStrobe,
    LMB_BE,
    Sl_DBus,
    Sl_Ready,
    Sl_Wait,
    Sl_UE,
    Sl_CE,
    BRAM_Rst_A,
    BRAM_Clk_A,
    BRAM_Addr_A,
    BRAM_EN_A,
    BRAM_WEN_A,
    BRAM_Dout_A,
    BRAM_Din_A);
  (* X_INTERFACE_INFO = "xilinx.com:signal:clock:1.0 CLK.LMB_Clk CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME CLK.LMB_Clk, ASSOCIATED_BUSIF SLMB:SLMB1:SLMB2:SLMB3, ASSOCIATED_RESET LMB_Rst, FREQ_HZ 100000000, PHASE 0.000, CLK_DOMAIN debug_cpu_sys_clock, INSERT_VIP 0" *) input LMB_Clk;
  (* X_INTERFACE_INFO = "xilinx.com:signal:reset:1.0 RST.LMB_Rst RST" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME RST.LMB_Rst, POLARITY ACTIVE_HIGH, TYPE INTERCONNECT, INSERT_VIP 0" *) input LMB_Rst;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 SLMB ABUS" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME SLMB, ADDR_WIDTH 32, DATA_WIDTH 32, READ_WRITE_MODE READ_WRITE, PROTOCOL STANDARD" *) input [0:31]LMB_ABus;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 SLMB WRITEDBUS" *) input [0:31]LMB_WriteDBus;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 SLMB ADDRSTROBE" *) input LMB_AddrStrobe;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 SLMB READSTROBE" *) input LMB_ReadStrobe;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 SLMB WRITESTROBE" *) input LMB_WriteStrobe;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 SLMB BE" *) input [0:3]LMB_BE;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 SLMB READDBUS" *) output [0:31]Sl_DBus;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 SLMB READY" *) output Sl_Ready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 SLMB WAIT" *) output Sl_Wait;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 SLMB UE" *) output Sl_UE;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 SLMB CE" *) output Sl_CE;
  (* X_INTERFACE_INFO = "xilinx.com:interface:bram:1.0 BRAM_PORT RST" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME BRAM_PORT, MEM_SIZE 65536, MASTER_TYPE BRAM_CTRL, MEM_WIDTH 32, MEM_ECC NONE, READ_LATENCY 1" *) output BRAM_Rst_A;
  (* X_INTERFACE_INFO = "xilinx.com:interface:bram:1.0 BRAM_PORT CLK" *) output BRAM_Clk_A;
  (* X_INTERFACE_INFO = "xilinx.com:interface:bram:1.0 BRAM_PORT ADDR" *) output [0:31]BRAM_Addr_A;
  (* X_INTERFACE_INFO = "xilinx.com:interface:bram:1.0 BRAM_PORT EN" *) output BRAM_EN_A;
  (* X_INTERFACE_INFO = "xilinx.com:interface:bram:1.0 BRAM_PORT WE" *) output [0:3]BRAM_WEN_A;
  (* X_INTERFACE_INFO = "xilinx.com:interface:bram:1.0 BRAM_PORT DIN" *) output [0:31]BRAM_Dout_A;
  (* X_INTERFACE_INFO = "xilinx.com:interface:bram:1.0 BRAM_PORT DOUT" *) input [0:31]BRAM_Din_A;

  wire \<const0> ;
  wire [0:31]BRAM_Din_A;
  wire [0:3]BRAM_WEN_A;
  wire [0:31]LMB_ABus;
  wire LMB_AddrStrobe;
  wire [0:3]LMB_BE;
  wire LMB_Clk;
  wire LMB_Rst;
  wire [0:31]LMB_WriteDBus;
  wire LMB_WriteStrobe;
  wire Sl_Ready;

  assign BRAM_Addr_A[0:31] = LMB_ABus;
  assign BRAM_Clk_A = LMB_Clk;
  assign BRAM_Dout_A[0:31] = LMB_WriteDBus;
  assign BRAM_EN_A = LMB_AddrStrobe;
  assign BRAM_Rst_A = \<const0> ;
  assign Sl_CE = \<const0> ;
  assign Sl_DBus[0:31] = BRAM_Din_A;
  assign Sl_UE = \<const0> ;
  assign Sl_Wait = \<const0> ;
  GND GND
       (.G(\<const0> ));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_lmb_bram_if_cntlr__parameterized1 U0
       (.BRAM_WEN_A(BRAM_WEN_A),
        .LMB_ABus(LMB_ABus[0]),
        .LMB_AddrStrobe(LMB_AddrStrobe),
        .LMB_BE(LMB_BE),
        .LMB_Clk(LMB_Clk),
        .LMB_Rst(LMB_Rst),
        .LMB_WriteStrobe(LMB_WriteStrobe),
        .Sl_Ready(Sl_Ready));
endmodule

(* CHECK_LICENSE_TYPE = "bd_6665_iomodule_0_0,iomodule,{}" *) (* DowngradeIPIdentifiedWarnings = "yes" *) (* X_CORE_INFO = "iomodule,Vivado 2019.2.1" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_bd_6665_iomodule_0_0
   (Clk,
    Rst,
    UART_Rx,
    UART_Tx,
    LMB_ABus,
    LMB_WriteDBus,
    LMB_AddrStrobe,
    LMB_ReadStrobe,
    LMB_WriteStrobe,
    LMB_BE,
    Sl_DBus,
    Sl_Ready,
    Sl_Wait,
    Sl_UE,
    Sl_CE);
  (* X_INTERFACE_INFO = "xilinx.com:signal:clock:1.0 CLK.CLK CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME CLK.CLK, ASSOCIATED_BUSIF SLMB, ASSOCIATED_RESET Rst:TMR_Rst, FREQ_HZ 100000000, PHASE 0.000, CLK_DOMAIN debug_cpu_sys_clock, INSERT_VIP 0" *) input Clk;
  (* X_INTERFACE_INFO = "xilinx.com:signal:reset:1.0 RST.Rst RST" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME RST.Rst, POLARITY ACTIVE_HIGH, TYPE PERIPHERAL, INSERT_VIP 0" *) input Rst;
  (* X_INTERFACE_INFO = "xilinx.com:interface:uart:1.0 UART RxD" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME UART, BOARD.ASSOCIATED_PARAM UART_BOARD_INTERFACE" *) input UART_Rx;
  (* X_INTERFACE_INFO = "xilinx.com:interface:uart:1.0 UART TxD" *) output UART_Tx;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 SLMB ABUS" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME SLMB, ADDR_WIDTH 32, DATA_WIDTH 32, READ_WRITE_MODE READ_WRITE, PROTOCOL STANDARD" *) input [0:31]LMB_ABus;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 SLMB WRITEDBUS" *) input [0:31]LMB_WriteDBus;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 SLMB ADDRSTROBE" *) input LMB_AddrStrobe;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 SLMB READSTROBE" *) input LMB_ReadStrobe;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 SLMB WRITESTROBE" *) input LMB_WriteStrobe;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 SLMB BE" *) input [0:3]LMB_BE;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 SLMB READDBUS" *) output [0:31]Sl_DBus;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 SLMB READY" *) output Sl_Ready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 SLMB WAIT" *) output Sl_Wait;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 SLMB UE" *) output Sl_UE;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 SLMB CE" *) output Sl_CE;

  wire Clk;
  wire [0:31]LMB_ABus;
  wire LMB_AddrStrobe;
  wire [0:3]LMB_BE;
  wire LMB_ReadStrobe;
  wire [0:31]LMB_WriteDBus;
  wire LMB_WriteStrobe;
  wire Rst;
  wire Sl_CE;
  wire [0:31]Sl_DBus;
  wire Sl_Ready;
  wire Sl_UE;
  wire Sl_Wait;
  wire UART_Rx;
  wire UART_Tx;
  wire NLW_U0_FIT1_Interrupt_UNCONNECTED;
  wire NLW_U0_FIT1_Toggle_UNCONNECTED;
  wire NLW_U0_FIT2_Interrupt_UNCONNECTED;
  wire NLW_U0_FIT2_Toggle_UNCONNECTED;
  wire NLW_U0_FIT3_Interrupt_UNCONNECTED;
  wire NLW_U0_FIT3_Toggle_UNCONNECTED;
  wire NLW_U0_FIT4_Interrupt_UNCONNECTED;
  wire NLW_U0_FIT4_Toggle_UNCONNECTED;
  wire NLW_U0_GPI1_Interrupt_UNCONNECTED;
  wire NLW_U0_GPI2_Interrupt_UNCONNECTED;
  wire NLW_U0_GPI3_Interrupt_UNCONNECTED;
  wire NLW_U0_GPI4_Interrupt_UNCONNECTED;
  wire NLW_U0_INTC_IRQ_UNCONNECTED;
  wire NLW_U0_INTC_IRQ_OUT_UNCONNECTED;
  wire NLW_U0_IO_Addr_Strobe_UNCONNECTED;
  wire NLW_U0_IO_Read_Strobe_UNCONNECTED;
  wire NLW_U0_IO_Write_Strobe_UNCONNECTED;
  wire NLW_U0_PIT1_Interrupt_UNCONNECTED;
  wire NLW_U0_PIT1_Toggle_UNCONNECTED;
  wire NLW_U0_PIT2_Interrupt_UNCONNECTED;
  wire NLW_U0_PIT2_Toggle_UNCONNECTED;
  wire NLW_U0_PIT3_Interrupt_UNCONNECTED;
  wire NLW_U0_PIT3_Toggle_UNCONNECTED;
  wire NLW_U0_PIT4_Interrupt_UNCONNECTED;
  wire NLW_U0_PIT4_Toggle_UNCONNECTED;
  wire NLW_U0_UART_Interrupt_UNCONNECTED;
  wire [31:0]NLW_U0_GPO1_UNCONNECTED;
  wire [31:0]NLW_U0_GPO2_UNCONNECTED;
  wire [31:0]NLW_U0_GPO3_UNCONNECTED;
  wire [31:0]NLW_U0_GPO4_UNCONNECTED;
  wire [31:0]NLW_U0_INTC_Interrupt_Address_UNCONNECTED;
  wire [31:0]NLW_U0_IO_Address_UNCONNECTED;
  wire [3:0]NLW_U0_IO_Byte_Enable_UNCONNECTED;
  wire [31:0]NLW_U0_IO_Write_Data_UNCONNECTED;
  wire [1023:0]NLW_U0_ToVote_UNCONNECTED;

  (* C_AVOID_PRIMITIVES = "0" *) 
  (* C_BASEADDR = "64'b0000000000000000000000000000000010000000000000000000000000000000" *) 
  (* C_FAMILY = "artix7" *) 
  (* C_FIT1_INTERRUPT = "0" *) 
  (* C_FIT1_No_CLOCKS = "6216" *) 
  (* C_FIT2_INTERRUPT = "0" *) 
  (* C_FIT2_No_CLOCKS = "6216" *) 
  (* C_FIT3_INTERRUPT = "0" *) 
  (* C_FIT3_No_CLOCKS = "6216" *) 
  (* C_FIT4_INTERRUPT = "0" *) 
  (* C_FIT4_No_CLOCKS = "6216" *) 
  (* C_FREQ = "100000000" *) 
  (* C_GPI1_INTERRUPT = "0" *) 
  (* C_GPI1_SIZE = "32" *) 
  (* C_GPI2_INTERRUPT = "0" *) 
  (* C_GPI2_SIZE = "32" *) 
  (* C_GPI3_INTERRUPT = "0" *) 
  (* C_GPI3_SIZE = "32" *) 
  (* C_GPI4_INTERRUPT = "0" *) 
  (* C_GPI4_SIZE = "32" *) 
  (* C_GPO1_INIT = "0" *) 
  (* C_GPO1_SIZE = "32" *) 
  (* C_GPO2_INIT = "0" *) 
  (* C_GPO2_SIZE = "32" *) 
  (* C_GPO3_INIT = "0" *) 
  (* C_GPO3_SIZE = "32" *) 
  (* C_GPO4_INIT = "0" *) 
  (* C_GPO4_SIZE = "32" *) 
  (* C_HIGHADDR = "64'b0000000000000000000000000000000010000000000000001111111111111111" *) 
  (* C_INSTANCE = "iomodule" *) 
  (* C_INTC_ADDR_WIDTH = "16" *) 
  (* C_INTC_ASYNC_INTR = "16'b1111111111111111" *) 
  (* C_INTC_BASE_VECTORS = "64'b0000000000000000000000000000000000000000000000000000000000000000" *) 
  (* C_INTC_HAS_FAST = "1" *) 
  (* C_INTC_INTR_SIZE = "1" *) 
  (* C_INTC_LEVEL_EDGE = "16'b0000000000000000" *) 
  (* C_INTC_NUM_SYNC_FF = "2" *) 
  (* C_INTC_POSITIVE = "16'b1111111111111111" *) 
  (* C_INTC_USE_EXT_INTR = "0" *) 
  (* C_IO_BASEADDR = "64'b0000000000000000000000000000000011000000000000000000000000000000" *) 
  (* C_IO_HIGHADDR = "64'b0000000000000000000000000000000011111111111111111111111111111111" *) 
  (* C_IO_MASK = "64'b0000000000000000000000000000000011000000000000000000000000000000" *) 
  (* C_LMB_AWIDTH = "32" *) 
  (* C_LMB_DWIDTH = "32" *) 
  (* C_LMB_PROTOCOL = "0" *) 
  (* C_MASK = "64'b0000000000000000000000000000000011000000000000000000000000000000" *) 
  (* C_PIT1_INTERRUPT = "0" *) 
  (* C_PIT1_PRESCALER = "0" *) 
  (* C_PIT1_READABLE = "1" *) 
  (* C_PIT1_SIZE = "32" *) 
  (* C_PIT2_INTERRUPT = "0" *) 
  (* C_PIT2_PRESCALER = "0" *) 
  (* C_PIT2_READABLE = "1" *) 
  (* C_PIT2_SIZE = "32" *) 
  (* C_PIT3_INTERRUPT = "0" *) 
  (* C_PIT3_PRESCALER = "0" *) 
  (* C_PIT3_READABLE = "1" *) 
  (* C_PIT3_SIZE = "32" *) 
  (* C_PIT4_INTERRUPT = "0" *) 
  (* C_PIT4_PRESCALER = "0" *) 
  (* C_PIT4_READABLE = "1" *) 
  (* C_PIT4_SIZE = "32" *) 
  (* C_TMR = "0" *) 
  (* C_UART_BAUDRATE = "9600" *) 
  (* C_UART_DATA_BITS = "8" *) 
  (* C_UART_ERROR_INTERRUPT = "0" *) 
  (* C_UART_ODD_PARITY = "0" *) 
  (* C_UART_PROG_BAUDRATE = "0" *) 
  (* C_UART_RX_INTERRUPT = "0" *) 
  (* C_UART_TX_INTERRUPT = "0" *) 
  (* C_UART_USE_PARITY = "0" *) 
  (* C_USE_CONFIG_RESET = "0" *) 
  (* C_USE_FIT1 = "0" *) 
  (* C_USE_FIT2 = "0" *) 
  (* C_USE_FIT3 = "0" *) 
  (* C_USE_FIT4 = "0" *) 
  (* C_USE_GPI1 = "0" *) 
  (* C_USE_GPI2 = "0" *) 
  (* C_USE_GPI3 = "0" *) 
  (* C_USE_GPI4 = "0" *) 
  (* C_USE_GPO1 = "0" *) 
  (* C_USE_GPO2 = "0" *) 
  (* C_USE_GPO3 = "0" *) 
  (* C_USE_GPO4 = "0" *) 
  (* C_USE_IO_BUS = "0" *) 
  (* C_USE_PIT1 = "0" *) 
  (* C_USE_PIT2 = "0" *) 
  (* C_USE_PIT3 = "0" *) 
  (* C_USE_PIT4 = "0" *) 
  (* C_USE_TMR_DISABLE = "0" *) 
  (* C_USE_UART_RX = "1" *) 
  (* C_USE_UART_TX = "1" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_iomodule U0
       (.Clk(Clk),
        .Config_Reset(1'b0),
        .FIT1_Interrupt(NLW_U0_FIT1_Interrupt_UNCONNECTED),
        .FIT1_Toggle(NLW_U0_FIT1_Toggle_UNCONNECTED),
        .FIT2_Interrupt(NLW_U0_FIT2_Interrupt_UNCONNECTED),
        .FIT2_Toggle(NLW_U0_FIT2_Toggle_UNCONNECTED),
        .FIT3_Interrupt(NLW_U0_FIT3_Interrupt_UNCONNECTED),
        .FIT3_Toggle(NLW_U0_FIT3_Toggle_UNCONNECTED),
        .FIT4_Interrupt(NLW_U0_FIT4_Interrupt_UNCONNECTED),
        .FIT4_Toggle(NLW_U0_FIT4_Toggle_UNCONNECTED),
        .FromAVote({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .FromBVote({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .GPI1({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .GPI1_Interrupt(NLW_U0_GPI1_Interrupt_UNCONNECTED),
        .GPI2({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .GPI2_Interrupt(NLW_U0_GPI2_Interrupt_UNCONNECTED),
        .GPI3({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .GPI3_Interrupt(NLW_U0_GPI3_Interrupt_UNCONNECTED),
        .GPI4({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .GPI4_Interrupt(NLW_U0_GPI4_Interrupt_UNCONNECTED),
        .GPO1(NLW_U0_GPO1_UNCONNECTED[31:0]),
        .GPO2(NLW_U0_GPO2_UNCONNECTED[31:0]),
        .GPO3(NLW_U0_GPO3_UNCONNECTED[31:0]),
        .GPO4(NLW_U0_GPO4_UNCONNECTED[31:0]),
        .INTC_IRQ(NLW_U0_INTC_IRQ_UNCONNECTED),
        .INTC_IRQ_OUT(NLW_U0_INTC_IRQ_OUT_UNCONNECTED),
        .INTC_Interrupt(1'b0),
        .INTC_Interrupt_Address(NLW_U0_INTC_Interrupt_Address_UNCONNECTED[31:0]),
        .INTC_Processor_Ack({1'b0,1'b0}),
        .IO_Addr_Strobe(NLW_U0_IO_Addr_Strobe_UNCONNECTED),
        .IO_Address(NLW_U0_IO_Address_UNCONNECTED[31:0]),
        .IO_Byte_Enable(NLW_U0_IO_Byte_Enable_UNCONNECTED[3:0]),
        .IO_Read_Data({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .IO_Read_Strobe(NLW_U0_IO_Read_Strobe_UNCONNECTED),
        .IO_Ready(1'b0),
        .IO_Write_Data(NLW_U0_IO_Write_Data_UNCONNECTED[31:0]),
        .IO_Write_Strobe(NLW_U0_IO_Write_Strobe_UNCONNECTED),
        .LMB_ABus(LMB_ABus),
        .LMB_AddrStrobe(LMB_AddrStrobe),
        .LMB_BE(LMB_BE),
        .LMB_ReadStrobe(LMB_ReadStrobe),
        .LMB_WriteDBus(LMB_WriteDBus),
        .LMB_WriteStrobe(LMB_WriteStrobe),
        .PIT1_Enable(1'b0),
        .PIT1_Interrupt(NLW_U0_PIT1_Interrupt_UNCONNECTED),
        .PIT1_Toggle(NLW_U0_PIT1_Toggle_UNCONNECTED),
        .PIT2_Enable(1'b0),
        .PIT2_Interrupt(NLW_U0_PIT2_Interrupt_UNCONNECTED),
        .PIT2_Toggle(NLW_U0_PIT2_Toggle_UNCONNECTED),
        .PIT3_Enable(1'b0),
        .PIT3_Interrupt(NLW_U0_PIT3_Interrupt_UNCONNECTED),
        .PIT3_Toggle(NLW_U0_PIT3_Toggle_UNCONNECTED),
        .PIT4_Enable(1'b0),
        .PIT4_Interrupt(NLW_U0_PIT4_Interrupt_UNCONNECTED),
        .PIT4_Toggle(NLW_U0_PIT4_Toggle_UNCONNECTED),
        .Rst(Rst),
        .Sl_CE(Sl_CE),
        .Sl_DBus(Sl_DBus),
        .Sl_Ready(Sl_Ready),
        .Sl_UE(Sl_UE),
        .Sl_Wait(Sl_Wait),
        .TMR_Disable(1'b0),
        .TMR_Rst(1'b0),
        .ToVote(NLW_U0_ToVote_UNCONNECTED[1023:0]),
        .UART_Interrupt(NLW_U0_UART_Interrupt_UNCONNECTED),
        .UART_Rx(UART_Rx),
        .UART_Tx(UART_Tx));
endmodule

(* CHECK_LICENSE_TYPE = "bd_6665_lmb_bram_I_0,blk_mem_gen_v8_4_4,{}" *) (* DowngradeIPIdentifiedWarnings = "yes" *) (* X_CORE_INFO = "blk_mem_gen_v8_4_4,Vivado 2019.2.1" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_bd_6665_lmb_bram_I_0
   (clka,
    rsta,
    ena,
    wea,
    addra,
    dina,
    douta,
    clkb,
    rstb,
    enb,
    web,
    addrb,
    dinb,
    doutb,
    rsta_busy,
    rstb_busy);
  (* X_INTERFACE_INFO = "xilinx.com:interface:bram:1.0 BRAM_PORTA CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME BRAM_PORTA, MEM_SIZE 65536, MEM_WIDTH 32, MEM_ECC NONE, MASTER_TYPE BRAM_CTRL, READ_WRITE_MODE READ_WRITE, READ_LATENCY 1" *) input clka;
  (* X_INTERFACE_INFO = "xilinx.com:interface:bram:1.0 BRAM_PORTA RST" *) input rsta;
  (* X_INTERFACE_INFO = "xilinx.com:interface:bram:1.0 BRAM_PORTA EN" *) input ena;
  (* X_INTERFACE_INFO = "xilinx.com:interface:bram:1.0 BRAM_PORTA WE" *) input [3:0]wea;
  (* X_INTERFACE_INFO = "xilinx.com:interface:bram:1.0 BRAM_PORTA ADDR" *) input [31:0]addra;
  (* X_INTERFACE_INFO = "xilinx.com:interface:bram:1.0 BRAM_PORTA DIN" *) input [31:0]dina;
  (* X_INTERFACE_INFO = "xilinx.com:interface:bram:1.0 BRAM_PORTA DOUT" *) output [31:0]douta;
  (* X_INTERFACE_INFO = "xilinx.com:interface:bram:1.0 BRAM_PORTB CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME BRAM_PORTB, MEM_SIZE 65536, MEM_WIDTH 32, MEM_ECC NONE, MASTER_TYPE BRAM_CTRL, READ_WRITE_MODE READ_WRITE, READ_LATENCY 1" *) input clkb;
  (* X_INTERFACE_INFO = "xilinx.com:interface:bram:1.0 BRAM_PORTB RST" *) input rstb;
  (* X_INTERFACE_INFO = "xilinx.com:interface:bram:1.0 BRAM_PORTB EN" *) input enb;
  (* X_INTERFACE_INFO = "xilinx.com:interface:bram:1.0 BRAM_PORTB WE" *) input [3:0]web;
  (* X_INTERFACE_INFO = "xilinx.com:interface:bram:1.0 BRAM_PORTB ADDR" *) input [31:0]addrb;
  (* X_INTERFACE_INFO = "xilinx.com:interface:bram:1.0 BRAM_PORTB DIN" *) input [31:0]dinb;
  (* X_INTERFACE_INFO = "xilinx.com:interface:bram:1.0 BRAM_PORTB DOUT" *) output [31:0]doutb;
  output rsta_busy;
  output rstb_busy;

  wire [31:0]addra;
  wire [31:0]addrb;
  wire clka;
  wire clkb;
  wire [31:0]dina;
  wire [31:0]dinb;
  wire [31:0]douta;
  wire [31:0]doutb;
  wire ena;
  wire enb;
  wire rsta;
  wire rsta_busy;
  wire rstb;
  wire rstb_busy;
  wire [3:0]wea;
  wire [3:0]web;
  wire NLW_U0_dbiterr_UNCONNECTED;
  wire NLW_U0_s_axi_arready_UNCONNECTED;
  wire NLW_U0_s_axi_awready_UNCONNECTED;
  wire NLW_U0_s_axi_bvalid_UNCONNECTED;
  wire NLW_U0_s_axi_dbiterr_UNCONNECTED;
  wire NLW_U0_s_axi_rlast_UNCONNECTED;
  wire NLW_U0_s_axi_rvalid_UNCONNECTED;
  wire NLW_U0_s_axi_sbiterr_UNCONNECTED;
  wire NLW_U0_s_axi_wready_UNCONNECTED;
  wire NLW_U0_sbiterr_UNCONNECTED;
  wire [31:0]NLW_U0_rdaddrecc_UNCONNECTED;
  wire [3:0]NLW_U0_s_axi_bid_UNCONNECTED;
  wire [1:0]NLW_U0_s_axi_bresp_UNCONNECTED;
  wire [31:0]NLW_U0_s_axi_rdaddrecc_UNCONNECTED;
  wire [31:0]NLW_U0_s_axi_rdata_UNCONNECTED;
  wire [3:0]NLW_U0_s_axi_rid_UNCONNECTED;
  wire [1:0]NLW_U0_s_axi_rresp_UNCONNECTED;

  (* C_ADDRA_WIDTH = "32" *) 
  (* C_ADDRB_WIDTH = "32" *) 
  (* C_ALGORITHM = "1" *) 
  (* C_AXI_ID_WIDTH = "4" *) 
  (* C_AXI_SLAVE_TYPE = "0" *) 
  (* C_AXI_TYPE = "1" *) 
  (* C_BYTE_SIZE = "8" *) 
  (* C_COMMON_CLK = "0" *) 
  (* C_COUNT_18K_BRAM = "0" *) 
  (* C_COUNT_36K_BRAM = "16" *) 
  (* C_CTRL_ECC_ALGO = "NONE" *) 
  (* C_DEFAULT_DATA = "0" *) 
  (* C_DISABLE_WARN_BHV_COLL = "0" *) 
  (* C_DISABLE_WARN_BHV_RANGE = "0" *) 
  (* C_ELABORATION_DIR = "./" *) 
  (* C_ENABLE_32BIT_ADDRESS = "1" *) 
  (* C_EN_DEEPSLEEP_PIN = "0" *) 
  (* C_EN_ECC_PIPE = "0" *) 
  (* C_EN_RDADDRA_CHG = "0" *) 
  (* C_EN_RDADDRB_CHG = "0" *) 
  (* C_EN_SAFETY_CKT = "1" *) 
  (* C_EN_SHUTDOWN_PIN = "0" *) 
  (* C_EN_SLEEP_PIN = "0" *) 
  (* C_EST_POWER_SUMMARY = "Estimated Power for IP     :     20.388 mW" *) 
  (* C_FAMILY = "artix7" *) 
  (* C_HAS_AXI_ID = "0" *) 
  (* C_HAS_ENA = "1" *) 
  (* C_HAS_ENB = "1" *) 
  (* C_HAS_INJECTERR = "0" *) 
  (* C_HAS_MEM_OUTPUT_REGS_A = "0" *) 
  (* C_HAS_MEM_OUTPUT_REGS_B = "0" *) 
  (* C_HAS_MUX_OUTPUT_REGS_A = "0" *) 
  (* C_HAS_MUX_OUTPUT_REGS_B = "0" *) 
  (* C_HAS_REGCEA = "0" *) 
  (* C_HAS_REGCEB = "0" *) 
  (* C_HAS_RSTA = "1" *) 
  (* C_HAS_RSTB = "1" *) 
  (* C_HAS_SOFTECC_INPUT_REGS_A = "0" *) 
  (* C_HAS_SOFTECC_OUTPUT_REGS_B = "0" *) 
  (* C_INITA_VAL = "0" *) 
  (* C_INITB_VAL = "0" *) 
  (* C_INIT_FILE = "bd_6665_lmb_bram_I_0.mem" *) 
  (* C_INIT_FILE_NAME = "no_coe_file_loaded" *) 
  (* C_INTERFACE_TYPE = "0" *) 
  (* C_LOAD_INIT_FILE = "0" *) 
  (* C_MEM_TYPE = "2" *) 
  (* C_MUX_PIPELINE_STAGES = "0" *) 
  (* C_PRIM_TYPE = "1" *) 
  (* C_READ_DEPTH_A = "16384" *) 
  (* C_READ_DEPTH_B = "16384" *) 
  (* C_READ_LATENCY_A = "1" *) 
  (* C_READ_LATENCY_B = "1" *) 
  (* C_READ_WIDTH_A = "32" *) 
  (* C_READ_WIDTH_B = "32" *) 
  (* C_RSTRAM_A = "0" *) 
  (* C_RSTRAM_B = "0" *) 
  (* C_RST_PRIORITY_A = "CE" *) 
  (* C_RST_PRIORITY_B = "CE" *) 
  (* C_SIM_COLLISION_CHECK = "ALL" *) 
  (* C_USE_BRAM_BLOCK = "1" *) 
  (* C_USE_BYTE_WEA = "1" *) 
  (* C_USE_BYTE_WEB = "1" *) 
  (* C_USE_DEFAULT_DATA = "0" *) 
  (* C_USE_ECC = "0" *) 
  (* C_USE_SOFTECC = "0" *) 
  (* C_USE_URAM = "0" *) 
  (* C_WEA_WIDTH = "4" *) 
  (* C_WEB_WIDTH = "4" *) 
  (* C_WRITE_DEPTH_A = "16384" *) 
  (* C_WRITE_DEPTH_B = "16384" *) 
  (* C_WRITE_MODE_A = "WRITE_FIRST" *) 
  (* C_WRITE_MODE_B = "WRITE_FIRST" *) 
  (* C_WRITE_WIDTH_A = "32" *) 
  (* C_WRITE_WIDTH_B = "32" *) 
  (* C_XDEVICEFAMILY = "artix7" *) 
  (* downgradeipidentifiedwarnings = "yes" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_blk_mem_gen_v8_4_4 U0
       (.addra({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,addra[15:2],1'b0,1'b0}),
        .addrb({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,addrb[15:2],1'b0,1'b0}),
        .clka(clka),
        .clkb(clkb),
        .dbiterr(NLW_U0_dbiterr_UNCONNECTED),
        .deepsleep(1'b0),
        .dina(dina),
        .dinb(dinb),
        .douta(douta),
        .doutb(doutb),
        .eccpipece(1'b0),
        .ena(ena),
        .enb(enb),
        .injectdbiterr(1'b0),
        .injectsbiterr(1'b0),
        .rdaddrecc(NLW_U0_rdaddrecc_UNCONNECTED[31:0]),
        .regcea(1'b0),
        .regceb(1'b0),
        .rsta(rsta),
        .rsta_busy(rsta_busy),
        .rstb(rstb),
        .rstb_busy(rstb_busy),
        .s_aclk(1'b0),
        .s_aresetn(1'b0),
        .s_axi_araddr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arburst({1'b0,1'b0}),
        .s_axi_arid({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arlen({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arready(NLW_U0_s_axi_arready_UNCONNECTED),
        .s_axi_arsize({1'b0,1'b0,1'b0}),
        .s_axi_arvalid(1'b0),
        .s_axi_awaddr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awburst({1'b0,1'b0}),
        .s_axi_awid({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awlen({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awready(NLW_U0_s_axi_awready_UNCONNECTED),
        .s_axi_awsize({1'b0,1'b0,1'b0}),
        .s_axi_awvalid(1'b0),
        .s_axi_bid(NLW_U0_s_axi_bid_UNCONNECTED[3:0]),
        .s_axi_bready(1'b0),
        .s_axi_bresp(NLW_U0_s_axi_bresp_UNCONNECTED[1:0]),
        .s_axi_bvalid(NLW_U0_s_axi_bvalid_UNCONNECTED),
        .s_axi_dbiterr(NLW_U0_s_axi_dbiterr_UNCONNECTED),
        .s_axi_injectdbiterr(1'b0),
        .s_axi_injectsbiterr(1'b0),
        .s_axi_rdaddrecc(NLW_U0_s_axi_rdaddrecc_UNCONNECTED[31:0]),
        .s_axi_rdata(NLW_U0_s_axi_rdata_UNCONNECTED[31:0]),
        .s_axi_rid(NLW_U0_s_axi_rid_UNCONNECTED[3:0]),
        .s_axi_rlast(NLW_U0_s_axi_rlast_UNCONNECTED),
        .s_axi_rready(1'b0),
        .s_axi_rresp(NLW_U0_s_axi_rresp_UNCONNECTED[1:0]),
        .s_axi_rvalid(NLW_U0_s_axi_rvalid_UNCONNECTED),
        .s_axi_sbiterr(NLW_U0_s_axi_sbiterr_UNCONNECTED),
        .s_axi_wdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_wlast(1'b0),
        .s_axi_wready(NLW_U0_s_axi_wready_UNCONNECTED),
        .s_axi_wstrb({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_wvalid(1'b0),
        .sbiterr(NLW_U0_sbiterr_UNCONNECTED),
        .shutdown(1'b0),
        .sleep(1'b0),
        .wea(wea),
        .web(web));
endmodule

(* CHECK_LICENSE_TYPE = "bd_6665_mdm_0_0,MDM,{}" *) (* DowngradeIPIdentifiedWarnings = "yes" *) (* X_CORE_INFO = "MDM,Vivado 2019.2.1" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_bd_6665_mdm_0_0
   (S_AXI_ACLK,
    S_AXI_ARESETN,
    Interrupt,
    Debug_SYS_Rst,
    S_AXI_AWADDR,
    S_AXI_AWVALID,
    S_AXI_AWREADY,
    S_AXI_WDATA,
    S_AXI_WSTRB,
    S_AXI_WVALID,
    S_AXI_WREADY,
    S_AXI_BRESP,
    S_AXI_BVALID,
    S_AXI_BREADY,
    S_AXI_ARADDR,
    S_AXI_ARVALID,
    S_AXI_ARREADY,
    S_AXI_RDATA,
    S_AXI_RRESP,
    S_AXI_RVALID,
    S_AXI_RREADY,
    Dbg_Clk_0,
    Dbg_TDI_0,
    Dbg_TDO_0,
    Dbg_Reg_En_0,
    Dbg_Capture_0,
    Dbg_Shift_0,
    Dbg_Update_0,
    Dbg_Rst_0,
    Dbg_Disable_0);
  (* X_INTERFACE_INFO = "xilinx.com:signal:clock:1.0 CLK.S_AXI_ACLK CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME CLK.S_AXI_ACLK, ASSOCIATED_BUSIF S_AXI:MBDEBUG_AXI_0:MBDEBUG_AXI_1:MBDEBUG_AXI_2:MBDEBUG_AXI_3:MBDEBUG_AXI_4:MBDEBUG_AXI_5:MBDEBUG_AXI_6:MBDEBUG_AXI_7:MBDEBUG_AXI_8:MBDEBUG_AXI_9:MBDEBUG_AXI_10:MBDEBUG_AXI_11:MBDEBUG_AXI_12:MBDEBUG_AXI_13:MBDEBUG_AXI_14:MBDEBUG_AXI_15:MBDEBUG_AXI_16:MBDEBUG_AXI_17:MBDEBUG_AXI_18:MBDEBUG_AXI_19:MBDEBUG_AXI_20:MBDEBUG_AXI_21:MBDEBUG_AXI_22:MBDEBUG_AXI_23:MBDEBUG_AXI_24:MBDEBUG_AXI_25:MBDEBUG_AXI_26:MBDEBUG_AXI_27:MBDEBUG_AXI_28:MBDEBUG_AXI_29:MBDEBUG_AXI_30:MBDEBUG_AXI_31, ASSOCIATED_RESET S_AXI_ARESETN, FREQ_HZ 100000000, PHASE 0.000, CLK_DOMAIN debug_cpu_sys_clock, INSERT_VIP 0" *) input S_AXI_ACLK;
  (* X_INTERFACE_INFO = "xilinx.com:signal:reset:1.0 RST.S_AXI_ARESETN RST" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME RST.S_AXI_ARESETN, POLARITY ACTIVE_LOW, INSERT_VIP 0" *) input S_AXI_ARESETN;
  (* X_INTERFACE_INFO = "xilinx.com:signal:interrupt:1.0 INTERRUPT.INTERRUPT INTERRUPT" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME INTERRUPT.INTERRUPT, SENSITIVITY EDGE_RISING, SUGGESTED_PRIORITY HIGH, PortWidth 1" *) output Interrupt;
  (* X_INTERFACE_INFO = "xilinx.com:signal:reset:1.0 RST.Debug_SYS_Rst RST" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME RST.Debug_SYS_Rst, POLARITY ACTIVE_HIGH, INSERT_VIP 0" *) output Debug_SYS_Rst;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI AWADDR" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME S_AXI, DATA_WIDTH 32, PROTOCOL AXI4LITE, FREQ_HZ 100000000, ID_WIDTH 0, ADDR_WIDTH 4, AWUSER_WIDTH 0, ARUSER_WIDTH 0, WUSER_WIDTH 0, RUSER_WIDTH 0, BUSER_WIDTH 0, READ_WRITE_MODE READ_WRITE, HAS_BURST 0, HAS_LOCK 0, HAS_PROT 0, HAS_CACHE 0, HAS_QOS 0, HAS_REGION 0, HAS_WSTRB 1, HAS_BRESP 1, HAS_RRESP 1, SUPPORTS_NARROW_BURST 0, NUM_READ_OUTSTANDING 1, NUM_WRITE_OUTSTANDING 1, MAX_BURST_LENGTH 1, PHASE 0.000, CLK_DOMAIN debug_cpu_sys_clock, NUM_READ_THREADS 1, NUM_WRITE_THREADS 1, RUSER_BITS_PER_BYTE 0, WUSER_BITS_PER_BYTE 0, INSERT_VIP 0" *) input [3:0]S_AXI_AWADDR;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI AWVALID" *) input S_AXI_AWVALID;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI AWREADY" *) output S_AXI_AWREADY;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI WDATA" *) input [31:0]S_AXI_WDATA;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI WSTRB" *) input [3:0]S_AXI_WSTRB;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI WVALID" *) input S_AXI_WVALID;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI WREADY" *) output S_AXI_WREADY;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI BRESP" *) output [1:0]S_AXI_BRESP;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI BVALID" *) output S_AXI_BVALID;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI BREADY" *) input S_AXI_BREADY;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI ARADDR" *) input [3:0]S_AXI_ARADDR;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI ARVALID" *) input S_AXI_ARVALID;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI ARREADY" *) output S_AXI_ARREADY;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI RDATA" *) output [31:0]S_AXI_RDATA;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI RRESP" *) output [1:0]S_AXI_RRESP;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI RVALID" *) output S_AXI_RVALID;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI RREADY" *) input S_AXI_RREADY;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbdebug:3.0 MBDEBUG_0 CLK" *) output Dbg_Clk_0;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbdebug:3.0 MBDEBUG_0 TDI" *) output Dbg_TDI_0;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbdebug:3.0 MBDEBUG_0 TDO" *) input Dbg_TDO_0;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbdebug:3.0 MBDEBUG_0 REG_EN" *) output [0:7]Dbg_Reg_En_0;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbdebug:3.0 MBDEBUG_0 CAPTURE" *) output Dbg_Capture_0;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbdebug:3.0 MBDEBUG_0 SHIFT" *) output Dbg_Shift_0;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbdebug:3.0 MBDEBUG_0 UPDATE" *) output Dbg_Update_0;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbdebug:3.0 MBDEBUG_0 RST" *) output Dbg_Rst_0;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbdebug:3.0 MBDEBUG_0 DISABLE" *) output Dbg_Disable_0;

  wire Dbg_Capture_0;
  wire Dbg_Clk_0;
  wire Dbg_Disable_0;
  wire [0:7]Dbg_Reg_En_0;
  wire Dbg_Rst_0;
  wire Dbg_Shift_0;
  wire Dbg_TDI_0;
  wire Dbg_TDO_0;
  wire Dbg_Update_0;
  wire Debug_SYS_Rst;
  wire Interrupt;
  wire S_AXI_ACLK;
  wire [3:0]S_AXI_ARADDR;
  wire S_AXI_ARESETN;
  wire S_AXI_ARREADY;
  wire S_AXI_ARVALID;
  wire [3:0]S_AXI_AWADDR;
  wire S_AXI_AWREADY;
  wire S_AXI_AWVALID;
  wire S_AXI_BREADY;
  wire [1:0]S_AXI_BRESP;
  wire S_AXI_BVALID;
  wire [31:0]S_AXI_RDATA;
  wire S_AXI_RREADY;
  wire [1:0]S_AXI_RRESP;
  wire S_AXI_RVALID;
  wire [31:0]S_AXI_WDATA;
  wire S_AXI_WREADY;
  wire [3:0]S_AXI_WSTRB;
  wire S_AXI_WVALID;
  wire NLW_U0_Dbg_ARVALID_0_UNCONNECTED;
  wire NLW_U0_Dbg_ARVALID_1_UNCONNECTED;
  wire NLW_U0_Dbg_ARVALID_10_UNCONNECTED;
  wire NLW_U0_Dbg_ARVALID_11_UNCONNECTED;
  wire NLW_U0_Dbg_ARVALID_12_UNCONNECTED;
  wire NLW_U0_Dbg_ARVALID_13_UNCONNECTED;
  wire NLW_U0_Dbg_ARVALID_14_UNCONNECTED;
  wire NLW_U0_Dbg_ARVALID_15_UNCONNECTED;
  wire NLW_U0_Dbg_ARVALID_16_UNCONNECTED;
  wire NLW_U0_Dbg_ARVALID_17_UNCONNECTED;
  wire NLW_U0_Dbg_ARVALID_18_UNCONNECTED;
  wire NLW_U0_Dbg_ARVALID_19_UNCONNECTED;
  wire NLW_U0_Dbg_ARVALID_2_UNCONNECTED;
  wire NLW_U0_Dbg_ARVALID_20_UNCONNECTED;
  wire NLW_U0_Dbg_ARVALID_21_UNCONNECTED;
  wire NLW_U0_Dbg_ARVALID_22_UNCONNECTED;
  wire NLW_U0_Dbg_ARVALID_23_UNCONNECTED;
  wire NLW_U0_Dbg_ARVALID_24_UNCONNECTED;
  wire NLW_U0_Dbg_ARVALID_25_UNCONNECTED;
  wire NLW_U0_Dbg_ARVALID_26_UNCONNECTED;
  wire NLW_U0_Dbg_ARVALID_27_UNCONNECTED;
  wire NLW_U0_Dbg_ARVALID_28_UNCONNECTED;
  wire NLW_U0_Dbg_ARVALID_29_UNCONNECTED;
  wire NLW_U0_Dbg_ARVALID_3_UNCONNECTED;
  wire NLW_U0_Dbg_ARVALID_30_UNCONNECTED;
  wire NLW_U0_Dbg_ARVALID_31_UNCONNECTED;
  wire NLW_U0_Dbg_ARVALID_4_UNCONNECTED;
  wire NLW_U0_Dbg_ARVALID_5_UNCONNECTED;
  wire NLW_U0_Dbg_ARVALID_6_UNCONNECTED;
  wire NLW_U0_Dbg_ARVALID_7_UNCONNECTED;
  wire NLW_U0_Dbg_ARVALID_8_UNCONNECTED;
  wire NLW_U0_Dbg_ARVALID_9_UNCONNECTED;
  wire NLW_U0_Dbg_AWVALID_0_UNCONNECTED;
  wire NLW_U0_Dbg_AWVALID_1_UNCONNECTED;
  wire NLW_U0_Dbg_AWVALID_10_UNCONNECTED;
  wire NLW_U0_Dbg_AWVALID_11_UNCONNECTED;
  wire NLW_U0_Dbg_AWVALID_12_UNCONNECTED;
  wire NLW_U0_Dbg_AWVALID_13_UNCONNECTED;
  wire NLW_U0_Dbg_AWVALID_14_UNCONNECTED;
  wire NLW_U0_Dbg_AWVALID_15_UNCONNECTED;
  wire NLW_U0_Dbg_AWVALID_16_UNCONNECTED;
  wire NLW_U0_Dbg_AWVALID_17_UNCONNECTED;
  wire NLW_U0_Dbg_AWVALID_18_UNCONNECTED;
  wire NLW_U0_Dbg_AWVALID_19_UNCONNECTED;
  wire NLW_U0_Dbg_AWVALID_2_UNCONNECTED;
  wire NLW_U0_Dbg_AWVALID_20_UNCONNECTED;
  wire NLW_U0_Dbg_AWVALID_21_UNCONNECTED;
  wire NLW_U0_Dbg_AWVALID_22_UNCONNECTED;
  wire NLW_U0_Dbg_AWVALID_23_UNCONNECTED;
  wire NLW_U0_Dbg_AWVALID_24_UNCONNECTED;
  wire NLW_U0_Dbg_AWVALID_25_UNCONNECTED;
  wire NLW_U0_Dbg_AWVALID_26_UNCONNECTED;
  wire NLW_U0_Dbg_AWVALID_27_UNCONNECTED;
  wire NLW_U0_Dbg_AWVALID_28_UNCONNECTED;
  wire NLW_U0_Dbg_AWVALID_29_UNCONNECTED;
  wire NLW_U0_Dbg_AWVALID_3_UNCONNECTED;
  wire NLW_U0_Dbg_AWVALID_30_UNCONNECTED;
  wire NLW_U0_Dbg_AWVALID_31_UNCONNECTED;
  wire NLW_U0_Dbg_AWVALID_4_UNCONNECTED;
  wire NLW_U0_Dbg_AWVALID_5_UNCONNECTED;
  wire NLW_U0_Dbg_AWVALID_6_UNCONNECTED;
  wire NLW_U0_Dbg_AWVALID_7_UNCONNECTED;
  wire NLW_U0_Dbg_AWVALID_8_UNCONNECTED;
  wire NLW_U0_Dbg_AWVALID_9_UNCONNECTED;
  wire NLW_U0_Dbg_BREADY_0_UNCONNECTED;
  wire NLW_U0_Dbg_BREADY_1_UNCONNECTED;
  wire NLW_U0_Dbg_BREADY_10_UNCONNECTED;
  wire NLW_U0_Dbg_BREADY_11_UNCONNECTED;
  wire NLW_U0_Dbg_BREADY_12_UNCONNECTED;
  wire NLW_U0_Dbg_BREADY_13_UNCONNECTED;
  wire NLW_U0_Dbg_BREADY_14_UNCONNECTED;
  wire NLW_U0_Dbg_BREADY_15_UNCONNECTED;
  wire NLW_U0_Dbg_BREADY_16_UNCONNECTED;
  wire NLW_U0_Dbg_BREADY_17_UNCONNECTED;
  wire NLW_U0_Dbg_BREADY_18_UNCONNECTED;
  wire NLW_U0_Dbg_BREADY_19_UNCONNECTED;
  wire NLW_U0_Dbg_BREADY_2_UNCONNECTED;
  wire NLW_U0_Dbg_BREADY_20_UNCONNECTED;
  wire NLW_U0_Dbg_BREADY_21_UNCONNECTED;
  wire NLW_U0_Dbg_BREADY_22_UNCONNECTED;
  wire NLW_U0_Dbg_BREADY_23_UNCONNECTED;
  wire NLW_U0_Dbg_BREADY_24_UNCONNECTED;
  wire NLW_U0_Dbg_BREADY_25_UNCONNECTED;
  wire NLW_U0_Dbg_BREADY_26_UNCONNECTED;
  wire NLW_U0_Dbg_BREADY_27_UNCONNECTED;
  wire NLW_U0_Dbg_BREADY_28_UNCONNECTED;
  wire NLW_U0_Dbg_BREADY_29_UNCONNECTED;
  wire NLW_U0_Dbg_BREADY_3_UNCONNECTED;
  wire NLW_U0_Dbg_BREADY_30_UNCONNECTED;
  wire NLW_U0_Dbg_BREADY_31_UNCONNECTED;
  wire NLW_U0_Dbg_BREADY_4_UNCONNECTED;
  wire NLW_U0_Dbg_BREADY_5_UNCONNECTED;
  wire NLW_U0_Dbg_BREADY_6_UNCONNECTED;
  wire NLW_U0_Dbg_BREADY_7_UNCONNECTED;
  wire NLW_U0_Dbg_BREADY_8_UNCONNECTED;
  wire NLW_U0_Dbg_BREADY_9_UNCONNECTED;
  wire NLW_U0_Dbg_Capture_1_UNCONNECTED;
  wire NLW_U0_Dbg_Capture_10_UNCONNECTED;
  wire NLW_U0_Dbg_Capture_11_UNCONNECTED;
  wire NLW_U0_Dbg_Capture_12_UNCONNECTED;
  wire NLW_U0_Dbg_Capture_13_UNCONNECTED;
  wire NLW_U0_Dbg_Capture_14_UNCONNECTED;
  wire NLW_U0_Dbg_Capture_15_UNCONNECTED;
  wire NLW_U0_Dbg_Capture_16_UNCONNECTED;
  wire NLW_U0_Dbg_Capture_17_UNCONNECTED;
  wire NLW_U0_Dbg_Capture_18_UNCONNECTED;
  wire NLW_U0_Dbg_Capture_19_UNCONNECTED;
  wire NLW_U0_Dbg_Capture_2_UNCONNECTED;
  wire NLW_U0_Dbg_Capture_20_UNCONNECTED;
  wire NLW_U0_Dbg_Capture_21_UNCONNECTED;
  wire NLW_U0_Dbg_Capture_22_UNCONNECTED;
  wire NLW_U0_Dbg_Capture_23_UNCONNECTED;
  wire NLW_U0_Dbg_Capture_24_UNCONNECTED;
  wire NLW_U0_Dbg_Capture_25_UNCONNECTED;
  wire NLW_U0_Dbg_Capture_26_UNCONNECTED;
  wire NLW_U0_Dbg_Capture_27_UNCONNECTED;
  wire NLW_U0_Dbg_Capture_28_UNCONNECTED;
  wire NLW_U0_Dbg_Capture_29_UNCONNECTED;
  wire NLW_U0_Dbg_Capture_3_UNCONNECTED;
  wire NLW_U0_Dbg_Capture_30_UNCONNECTED;
  wire NLW_U0_Dbg_Capture_31_UNCONNECTED;
  wire NLW_U0_Dbg_Capture_4_UNCONNECTED;
  wire NLW_U0_Dbg_Capture_5_UNCONNECTED;
  wire NLW_U0_Dbg_Capture_6_UNCONNECTED;
  wire NLW_U0_Dbg_Capture_7_UNCONNECTED;
  wire NLW_U0_Dbg_Capture_8_UNCONNECTED;
  wire NLW_U0_Dbg_Capture_9_UNCONNECTED;
  wire NLW_U0_Dbg_Clk_1_UNCONNECTED;
  wire NLW_U0_Dbg_Clk_10_UNCONNECTED;
  wire NLW_U0_Dbg_Clk_11_UNCONNECTED;
  wire NLW_U0_Dbg_Clk_12_UNCONNECTED;
  wire NLW_U0_Dbg_Clk_13_UNCONNECTED;
  wire NLW_U0_Dbg_Clk_14_UNCONNECTED;
  wire NLW_U0_Dbg_Clk_15_UNCONNECTED;
  wire NLW_U0_Dbg_Clk_16_UNCONNECTED;
  wire NLW_U0_Dbg_Clk_17_UNCONNECTED;
  wire NLW_U0_Dbg_Clk_18_UNCONNECTED;
  wire NLW_U0_Dbg_Clk_19_UNCONNECTED;
  wire NLW_U0_Dbg_Clk_2_UNCONNECTED;
  wire NLW_U0_Dbg_Clk_20_UNCONNECTED;
  wire NLW_U0_Dbg_Clk_21_UNCONNECTED;
  wire NLW_U0_Dbg_Clk_22_UNCONNECTED;
  wire NLW_U0_Dbg_Clk_23_UNCONNECTED;
  wire NLW_U0_Dbg_Clk_24_UNCONNECTED;
  wire NLW_U0_Dbg_Clk_25_UNCONNECTED;
  wire NLW_U0_Dbg_Clk_26_UNCONNECTED;
  wire NLW_U0_Dbg_Clk_27_UNCONNECTED;
  wire NLW_U0_Dbg_Clk_28_UNCONNECTED;
  wire NLW_U0_Dbg_Clk_29_UNCONNECTED;
  wire NLW_U0_Dbg_Clk_3_UNCONNECTED;
  wire NLW_U0_Dbg_Clk_30_UNCONNECTED;
  wire NLW_U0_Dbg_Clk_31_UNCONNECTED;
  wire NLW_U0_Dbg_Clk_4_UNCONNECTED;
  wire NLW_U0_Dbg_Clk_5_UNCONNECTED;
  wire NLW_U0_Dbg_Clk_6_UNCONNECTED;
  wire NLW_U0_Dbg_Clk_7_UNCONNECTED;
  wire NLW_U0_Dbg_Clk_8_UNCONNECTED;
  wire NLW_U0_Dbg_Clk_9_UNCONNECTED;
  wire NLW_U0_Dbg_Disable_1_UNCONNECTED;
  wire NLW_U0_Dbg_Disable_10_UNCONNECTED;
  wire NLW_U0_Dbg_Disable_11_UNCONNECTED;
  wire NLW_U0_Dbg_Disable_12_UNCONNECTED;
  wire NLW_U0_Dbg_Disable_13_UNCONNECTED;
  wire NLW_U0_Dbg_Disable_14_UNCONNECTED;
  wire NLW_U0_Dbg_Disable_15_UNCONNECTED;
  wire NLW_U0_Dbg_Disable_16_UNCONNECTED;
  wire NLW_U0_Dbg_Disable_17_UNCONNECTED;
  wire NLW_U0_Dbg_Disable_18_UNCONNECTED;
  wire NLW_U0_Dbg_Disable_19_UNCONNECTED;
  wire NLW_U0_Dbg_Disable_2_UNCONNECTED;
  wire NLW_U0_Dbg_Disable_20_UNCONNECTED;
  wire NLW_U0_Dbg_Disable_21_UNCONNECTED;
  wire NLW_U0_Dbg_Disable_22_UNCONNECTED;
  wire NLW_U0_Dbg_Disable_23_UNCONNECTED;
  wire NLW_U0_Dbg_Disable_24_UNCONNECTED;
  wire NLW_U0_Dbg_Disable_25_UNCONNECTED;
  wire NLW_U0_Dbg_Disable_26_UNCONNECTED;
  wire NLW_U0_Dbg_Disable_27_UNCONNECTED;
  wire NLW_U0_Dbg_Disable_28_UNCONNECTED;
  wire NLW_U0_Dbg_Disable_29_UNCONNECTED;
  wire NLW_U0_Dbg_Disable_3_UNCONNECTED;
  wire NLW_U0_Dbg_Disable_30_UNCONNECTED;
  wire NLW_U0_Dbg_Disable_31_UNCONNECTED;
  wire NLW_U0_Dbg_Disable_4_UNCONNECTED;
  wire NLW_U0_Dbg_Disable_5_UNCONNECTED;
  wire NLW_U0_Dbg_Disable_6_UNCONNECTED;
  wire NLW_U0_Dbg_Disable_7_UNCONNECTED;
  wire NLW_U0_Dbg_Disable_8_UNCONNECTED;
  wire NLW_U0_Dbg_Disable_9_UNCONNECTED;
  wire NLW_U0_Dbg_RREADY_0_UNCONNECTED;
  wire NLW_U0_Dbg_RREADY_1_UNCONNECTED;
  wire NLW_U0_Dbg_RREADY_10_UNCONNECTED;
  wire NLW_U0_Dbg_RREADY_11_UNCONNECTED;
  wire NLW_U0_Dbg_RREADY_12_UNCONNECTED;
  wire NLW_U0_Dbg_RREADY_13_UNCONNECTED;
  wire NLW_U0_Dbg_RREADY_14_UNCONNECTED;
  wire NLW_U0_Dbg_RREADY_15_UNCONNECTED;
  wire NLW_U0_Dbg_RREADY_16_UNCONNECTED;
  wire NLW_U0_Dbg_RREADY_17_UNCONNECTED;
  wire NLW_U0_Dbg_RREADY_18_UNCONNECTED;
  wire NLW_U0_Dbg_RREADY_19_UNCONNECTED;
  wire NLW_U0_Dbg_RREADY_2_UNCONNECTED;
  wire NLW_U0_Dbg_RREADY_20_UNCONNECTED;
  wire NLW_U0_Dbg_RREADY_21_UNCONNECTED;
  wire NLW_U0_Dbg_RREADY_22_UNCONNECTED;
  wire NLW_U0_Dbg_RREADY_23_UNCONNECTED;
  wire NLW_U0_Dbg_RREADY_24_UNCONNECTED;
  wire NLW_U0_Dbg_RREADY_25_UNCONNECTED;
  wire NLW_U0_Dbg_RREADY_26_UNCONNECTED;
  wire NLW_U0_Dbg_RREADY_27_UNCONNECTED;
  wire NLW_U0_Dbg_RREADY_28_UNCONNECTED;
  wire NLW_U0_Dbg_RREADY_29_UNCONNECTED;
  wire NLW_U0_Dbg_RREADY_3_UNCONNECTED;
  wire NLW_U0_Dbg_RREADY_30_UNCONNECTED;
  wire NLW_U0_Dbg_RREADY_31_UNCONNECTED;
  wire NLW_U0_Dbg_RREADY_4_UNCONNECTED;
  wire NLW_U0_Dbg_RREADY_5_UNCONNECTED;
  wire NLW_U0_Dbg_RREADY_6_UNCONNECTED;
  wire NLW_U0_Dbg_RREADY_7_UNCONNECTED;
  wire NLW_U0_Dbg_RREADY_8_UNCONNECTED;
  wire NLW_U0_Dbg_RREADY_9_UNCONNECTED;
  wire NLW_U0_Dbg_Rst_1_UNCONNECTED;
  wire NLW_U0_Dbg_Rst_10_UNCONNECTED;
  wire NLW_U0_Dbg_Rst_11_UNCONNECTED;
  wire NLW_U0_Dbg_Rst_12_UNCONNECTED;
  wire NLW_U0_Dbg_Rst_13_UNCONNECTED;
  wire NLW_U0_Dbg_Rst_14_UNCONNECTED;
  wire NLW_U0_Dbg_Rst_15_UNCONNECTED;
  wire NLW_U0_Dbg_Rst_16_UNCONNECTED;
  wire NLW_U0_Dbg_Rst_17_UNCONNECTED;
  wire NLW_U0_Dbg_Rst_18_UNCONNECTED;
  wire NLW_U0_Dbg_Rst_19_UNCONNECTED;
  wire NLW_U0_Dbg_Rst_2_UNCONNECTED;
  wire NLW_U0_Dbg_Rst_20_UNCONNECTED;
  wire NLW_U0_Dbg_Rst_21_UNCONNECTED;
  wire NLW_U0_Dbg_Rst_22_UNCONNECTED;
  wire NLW_U0_Dbg_Rst_23_UNCONNECTED;
  wire NLW_U0_Dbg_Rst_24_UNCONNECTED;
  wire NLW_U0_Dbg_Rst_25_UNCONNECTED;
  wire NLW_U0_Dbg_Rst_26_UNCONNECTED;
  wire NLW_U0_Dbg_Rst_27_UNCONNECTED;
  wire NLW_U0_Dbg_Rst_28_UNCONNECTED;
  wire NLW_U0_Dbg_Rst_29_UNCONNECTED;
  wire NLW_U0_Dbg_Rst_3_UNCONNECTED;
  wire NLW_U0_Dbg_Rst_30_UNCONNECTED;
  wire NLW_U0_Dbg_Rst_31_UNCONNECTED;
  wire NLW_U0_Dbg_Rst_4_UNCONNECTED;
  wire NLW_U0_Dbg_Rst_5_UNCONNECTED;
  wire NLW_U0_Dbg_Rst_6_UNCONNECTED;
  wire NLW_U0_Dbg_Rst_7_UNCONNECTED;
  wire NLW_U0_Dbg_Rst_8_UNCONNECTED;
  wire NLW_U0_Dbg_Rst_9_UNCONNECTED;
  wire NLW_U0_Dbg_Shift_1_UNCONNECTED;
  wire NLW_U0_Dbg_Shift_10_UNCONNECTED;
  wire NLW_U0_Dbg_Shift_11_UNCONNECTED;
  wire NLW_U0_Dbg_Shift_12_UNCONNECTED;
  wire NLW_U0_Dbg_Shift_13_UNCONNECTED;
  wire NLW_U0_Dbg_Shift_14_UNCONNECTED;
  wire NLW_U0_Dbg_Shift_15_UNCONNECTED;
  wire NLW_U0_Dbg_Shift_16_UNCONNECTED;
  wire NLW_U0_Dbg_Shift_17_UNCONNECTED;
  wire NLW_U0_Dbg_Shift_18_UNCONNECTED;
  wire NLW_U0_Dbg_Shift_19_UNCONNECTED;
  wire NLW_U0_Dbg_Shift_2_UNCONNECTED;
  wire NLW_U0_Dbg_Shift_20_UNCONNECTED;
  wire NLW_U0_Dbg_Shift_21_UNCONNECTED;
  wire NLW_U0_Dbg_Shift_22_UNCONNECTED;
  wire NLW_U0_Dbg_Shift_23_UNCONNECTED;
  wire NLW_U0_Dbg_Shift_24_UNCONNECTED;
  wire NLW_U0_Dbg_Shift_25_UNCONNECTED;
  wire NLW_U0_Dbg_Shift_26_UNCONNECTED;
  wire NLW_U0_Dbg_Shift_27_UNCONNECTED;
  wire NLW_U0_Dbg_Shift_28_UNCONNECTED;
  wire NLW_U0_Dbg_Shift_29_UNCONNECTED;
  wire NLW_U0_Dbg_Shift_3_UNCONNECTED;
  wire NLW_U0_Dbg_Shift_30_UNCONNECTED;
  wire NLW_U0_Dbg_Shift_31_UNCONNECTED;
  wire NLW_U0_Dbg_Shift_4_UNCONNECTED;
  wire NLW_U0_Dbg_Shift_5_UNCONNECTED;
  wire NLW_U0_Dbg_Shift_6_UNCONNECTED;
  wire NLW_U0_Dbg_Shift_7_UNCONNECTED;
  wire NLW_U0_Dbg_Shift_8_UNCONNECTED;
  wire NLW_U0_Dbg_Shift_9_UNCONNECTED;
  wire NLW_U0_Dbg_TDI_1_UNCONNECTED;
  wire NLW_U0_Dbg_TDI_10_UNCONNECTED;
  wire NLW_U0_Dbg_TDI_11_UNCONNECTED;
  wire NLW_U0_Dbg_TDI_12_UNCONNECTED;
  wire NLW_U0_Dbg_TDI_13_UNCONNECTED;
  wire NLW_U0_Dbg_TDI_14_UNCONNECTED;
  wire NLW_U0_Dbg_TDI_15_UNCONNECTED;
  wire NLW_U0_Dbg_TDI_16_UNCONNECTED;
  wire NLW_U0_Dbg_TDI_17_UNCONNECTED;
  wire NLW_U0_Dbg_TDI_18_UNCONNECTED;
  wire NLW_U0_Dbg_TDI_19_UNCONNECTED;
  wire NLW_U0_Dbg_TDI_2_UNCONNECTED;
  wire NLW_U0_Dbg_TDI_20_UNCONNECTED;
  wire NLW_U0_Dbg_TDI_21_UNCONNECTED;
  wire NLW_U0_Dbg_TDI_22_UNCONNECTED;
  wire NLW_U0_Dbg_TDI_23_UNCONNECTED;
  wire NLW_U0_Dbg_TDI_24_UNCONNECTED;
  wire NLW_U0_Dbg_TDI_25_UNCONNECTED;
  wire NLW_U0_Dbg_TDI_26_UNCONNECTED;
  wire NLW_U0_Dbg_TDI_27_UNCONNECTED;
  wire NLW_U0_Dbg_TDI_28_UNCONNECTED;
  wire NLW_U0_Dbg_TDI_29_UNCONNECTED;
  wire NLW_U0_Dbg_TDI_3_UNCONNECTED;
  wire NLW_U0_Dbg_TDI_30_UNCONNECTED;
  wire NLW_U0_Dbg_TDI_31_UNCONNECTED;
  wire NLW_U0_Dbg_TDI_4_UNCONNECTED;
  wire NLW_U0_Dbg_TDI_5_UNCONNECTED;
  wire NLW_U0_Dbg_TDI_6_UNCONNECTED;
  wire NLW_U0_Dbg_TDI_7_UNCONNECTED;
  wire NLW_U0_Dbg_TDI_8_UNCONNECTED;
  wire NLW_U0_Dbg_TDI_9_UNCONNECTED;
  wire NLW_U0_Dbg_TrClk_0_UNCONNECTED;
  wire NLW_U0_Dbg_TrClk_1_UNCONNECTED;
  wire NLW_U0_Dbg_TrClk_10_UNCONNECTED;
  wire NLW_U0_Dbg_TrClk_11_UNCONNECTED;
  wire NLW_U0_Dbg_TrClk_12_UNCONNECTED;
  wire NLW_U0_Dbg_TrClk_13_UNCONNECTED;
  wire NLW_U0_Dbg_TrClk_14_UNCONNECTED;
  wire NLW_U0_Dbg_TrClk_15_UNCONNECTED;
  wire NLW_U0_Dbg_TrClk_16_UNCONNECTED;
  wire NLW_U0_Dbg_TrClk_17_UNCONNECTED;
  wire NLW_U0_Dbg_TrClk_18_UNCONNECTED;
  wire NLW_U0_Dbg_TrClk_19_UNCONNECTED;
  wire NLW_U0_Dbg_TrClk_2_UNCONNECTED;
  wire NLW_U0_Dbg_TrClk_20_UNCONNECTED;
  wire NLW_U0_Dbg_TrClk_21_UNCONNECTED;
  wire NLW_U0_Dbg_TrClk_22_UNCONNECTED;
  wire NLW_U0_Dbg_TrClk_23_UNCONNECTED;
  wire NLW_U0_Dbg_TrClk_24_UNCONNECTED;
  wire NLW_U0_Dbg_TrClk_25_UNCONNECTED;
  wire NLW_U0_Dbg_TrClk_26_UNCONNECTED;
  wire NLW_U0_Dbg_TrClk_27_UNCONNECTED;
  wire NLW_U0_Dbg_TrClk_28_UNCONNECTED;
  wire NLW_U0_Dbg_TrClk_29_UNCONNECTED;
  wire NLW_U0_Dbg_TrClk_3_UNCONNECTED;
  wire NLW_U0_Dbg_TrClk_30_UNCONNECTED;
  wire NLW_U0_Dbg_TrClk_31_UNCONNECTED;
  wire NLW_U0_Dbg_TrClk_4_UNCONNECTED;
  wire NLW_U0_Dbg_TrClk_5_UNCONNECTED;
  wire NLW_U0_Dbg_TrClk_6_UNCONNECTED;
  wire NLW_U0_Dbg_TrClk_7_UNCONNECTED;
  wire NLW_U0_Dbg_TrClk_8_UNCONNECTED;
  wire NLW_U0_Dbg_TrClk_9_UNCONNECTED;
  wire NLW_U0_Dbg_TrReady_0_UNCONNECTED;
  wire NLW_U0_Dbg_TrReady_1_UNCONNECTED;
  wire NLW_U0_Dbg_TrReady_10_UNCONNECTED;
  wire NLW_U0_Dbg_TrReady_11_UNCONNECTED;
  wire NLW_U0_Dbg_TrReady_12_UNCONNECTED;
  wire NLW_U0_Dbg_TrReady_13_UNCONNECTED;
  wire NLW_U0_Dbg_TrReady_14_UNCONNECTED;
  wire NLW_U0_Dbg_TrReady_15_UNCONNECTED;
  wire NLW_U0_Dbg_TrReady_16_UNCONNECTED;
  wire NLW_U0_Dbg_TrReady_17_UNCONNECTED;
  wire NLW_U0_Dbg_TrReady_18_UNCONNECTED;
  wire NLW_U0_Dbg_TrReady_19_UNCONNECTED;
  wire NLW_U0_Dbg_TrReady_2_UNCONNECTED;
  wire NLW_U0_Dbg_TrReady_20_UNCONNECTED;
  wire NLW_U0_Dbg_TrReady_21_UNCONNECTED;
  wire NLW_U0_Dbg_TrReady_22_UNCONNECTED;
  wire NLW_U0_Dbg_TrReady_23_UNCONNECTED;
  wire NLW_U0_Dbg_TrReady_24_UNCONNECTED;
  wire NLW_U0_Dbg_TrReady_25_UNCONNECTED;
  wire NLW_U0_Dbg_TrReady_26_UNCONNECTED;
  wire NLW_U0_Dbg_TrReady_27_UNCONNECTED;
  wire NLW_U0_Dbg_TrReady_28_UNCONNECTED;
  wire NLW_U0_Dbg_TrReady_29_UNCONNECTED;
  wire NLW_U0_Dbg_TrReady_3_UNCONNECTED;
  wire NLW_U0_Dbg_TrReady_30_UNCONNECTED;
  wire NLW_U0_Dbg_TrReady_31_UNCONNECTED;
  wire NLW_U0_Dbg_TrReady_4_UNCONNECTED;
  wire NLW_U0_Dbg_TrReady_5_UNCONNECTED;
  wire NLW_U0_Dbg_TrReady_6_UNCONNECTED;
  wire NLW_U0_Dbg_TrReady_7_UNCONNECTED;
  wire NLW_U0_Dbg_TrReady_8_UNCONNECTED;
  wire NLW_U0_Dbg_TrReady_9_UNCONNECTED;
  wire NLW_U0_Dbg_Update_1_UNCONNECTED;
  wire NLW_U0_Dbg_Update_10_UNCONNECTED;
  wire NLW_U0_Dbg_Update_11_UNCONNECTED;
  wire NLW_U0_Dbg_Update_12_UNCONNECTED;
  wire NLW_U0_Dbg_Update_13_UNCONNECTED;
  wire NLW_U0_Dbg_Update_14_UNCONNECTED;
  wire NLW_U0_Dbg_Update_15_UNCONNECTED;
  wire NLW_U0_Dbg_Update_16_UNCONNECTED;
  wire NLW_U0_Dbg_Update_17_UNCONNECTED;
  wire NLW_U0_Dbg_Update_18_UNCONNECTED;
  wire NLW_U0_Dbg_Update_19_UNCONNECTED;
  wire NLW_U0_Dbg_Update_2_UNCONNECTED;
  wire NLW_U0_Dbg_Update_20_UNCONNECTED;
  wire NLW_U0_Dbg_Update_21_UNCONNECTED;
  wire NLW_U0_Dbg_Update_22_UNCONNECTED;
  wire NLW_U0_Dbg_Update_23_UNCONNECTED;
  wire NLW_U0_Dbg_Update_24_UNCONNECTED;
  wire NLW_U0_Dbg_Update_25_UNCONNECTED;
  wire NLW_U0_Dbg_Update_26_UNCONNECTED;
  wire NLW_U0_Dbg_Update_27_UNCONNECTED;
  wire NLW_U0_Dbg_Update_28_UNCONNECTED;
  wire NLW_U0_Dbg_Update_29_UNCONNECTED;
  wire NLW_U0_Dbg_Update_3_UNCONNECTED;
  wire NLW_U0_Dbg_Update_30_UNCONNECTED;
  wire NLW_U0_Dbg_Update_31_UNCONNECTED;
  wire NLW_U0_Dbg_Update_4_UNCONNECTED;
  wire NLW_U0_Dbg_Update_5_UNCONNECTED;
  wire NLW_U0_Dbg_Update_6_UNCONNECTED;
  wire NLW_U0_Dbg_Update_7_UNCONNECTED;
  wire NLW_U0_Dbg_Update_8_UNCONNECTED;
  wire NLW_U0_Dbg_Update_9_UNCONNECTED;
  wire NLW_U0_Dbg_WVALID_0_UNCONNECTED;
  wire NLW_U0_Dbg_WVALID_1_UNCONNECTED;
  wire NLW_U0_Dbg_WVALID_10_UNCONNECTED;
  wire NLW_U0_Dbg_WVALID_11_UNCONNECTED;
  wire NLW_U0_Dbg_WVALID_12_UNCONNECTED;
  wire NLW_U0_Dbg_WVALID_13_UNCONNECTED;
  wire NLW_U0_Dbg_WVALID_14_UNCONNECTED;
  wire NLW_U0_Dbg_WVALID_15_UNCONNECTED;
  wire NLW_U0_Dbg_WVALID_16_UNCONNECTED;
  wire NLW_U0_Dbg_WVALID_17_UNCONNECTED;
  wire NLW_U0_Dbg_WVALID_18_UNCONNECTED;
  wire NLW_U0_Dbg_WVALID_19_UNCONNECTED;
  wire NLW_U0_Dbg_WVALID_2_UNCONNECTED;
  wire NLW_U0_Dbg_WVALID_20_UNCONNECTED;
  wire NLW_U0_Dbg_WVALID_21_UNCONNECTED;
  wire NLW_U0_Dbg_WVALID_22_UNCONNECTED;
  wire NLW_U0_Dbg_WVALID_23_UNCONNECTED;
  wire NLW_U0_Dbg_WVALID_24_UNCONNECTED;
  wire NLW_U0_Dbg_WVALID_25_UNCONNECTED;
  wire NLW_U0_Dbg_WVALID_26_UNCONNECTED;
  wire NLW_U0_Dbg_WVALID_27_UNCONNECTED;
  wire NLW_U0_Dbg_WVALID_28_UNCONNECTED;
  wire NLW_U0_Dbg_WVALID_29_UNCONNECTED;
  wire NLW_U0_Dbg_WVALID_3_UNCONNECTED;
  wire NLW_U0_Dbg_WVALID_30_UNCONNECTED;
  wire NLW_U0_Dbg_WVALID_31_UNCONNECTED;
  wire NLW_U0_Dbg_WVALID_4_UNCONNECTED;
  wire NLW_U0_Dbg_WVALID_5_UNCONNECTED;
  wire NLW_U0_Dbg_WVALID_6_UNCONNECTED;
  wire NLW_U0_Dbg_WVALID_7_UNCONNECTED;
  wire NLW_U0_Dbg_WVALID_8_UNCONNECTED;
  wire NLW_U0_Dbg_WVALID_9_UNCONNECTED;
  wire NLW_U0_Ext_BRK_UNCONNECTED;
  wire NLW_U0_Ext_JTAG_CAPTURE_UNCONNECTED;
  wire NLW_U0_Ext_JTAG_DRCK_UNCONNECTED;
  wire NLW_U0_Ext_JTAG_RESET_UNCONNECTED;
  wire NLW_U0_Ext_JTAG_SEL_UNCONNECTED;
  wire NLW_U0_Ext_JTAG_SHIFT_UNCONNECTED;
  wire NLW_U0_Ext_JTAG_TDI_UNCONNECTED;
  wire NLW_U0_Ext_JTAG_UPDATE_UNCONNECTED;
  wire NLW_U0_Ext_NM_BRK_UNCONNECTED;
  wire NLW_U0_LMB_Addr_Strobe_0_UNCONNECTED;
  wire NLW_U0_LMB_Addr_Strobe_1_UNCONNECTED;
  wire NLW_U0_LMB_Addr_Strobe_10_UNCONNECTED;
  wire NLW_U0_LMB_Addr_Strobe_11_UNCONNECTED;
  wire NLW_U0_LMB_Addr_Strobe_12_UNCONNECTED;
  wire NLW_U0_LMB_Addr_Strobe_13_UNCONNECTED;
  wire NLW_U0_LMB_Addr_Strobe_14_UNCONNECTED;
  wire NLW_U0_LMB_Addr_Strobe_15_UNCONNECTED;
  wire NLW_U0_LMB_Addr_Strobe_16_UNCONNECTED;
  wire NLW_U0_LMB_Addr_Strobe_17_UNCONNECTED;
  wire NLW_U0_LMB_Addr_Strobe_18_UNCONNECTED;
  wire NLW_U0_LMB_Addr_Strobe_19_UNCONNECTED;
  wire NLW_U0_LMB_Addr_Strobe_2_UNCONNECTED;
  wire NLW_U0_LMB_Addr_Strobe_20_UNCONNECTED;
  wire NLW_U0_LMB_Addr_Strobe_21_UNCONNECTED;
  wire NLW_U0_LMB_Addr_Strobe_22_UNCONNECTED;
  wire NLW_U0_LMB_Addr_Strobe_23_UNCONNECTED;
  wire NLW_U0_LMB_Addr_Strobe_24_UNCONNECTED;
  wire NLW_U0_LMB_Addr_Strobe_25_UNCONNECTED;
  wire NLW_U0_LMB_Addr_Strobe_26_UNCONNECTED;
  wire NLW_U0_LMB_Addr_Strobe_27_UNCONNECTED;
  wire NLW_U0_LMB_Addr_Strobe_28_UNCONNECTED;
  wire NLW_U0_LMB_Addr_Strobe_29_UNCONNECTED;
  wire NLW_U0_LMB_Addr_Strobe_3_UNCONNECTED;
  wire NLW_U0_LMB_Addr_Strobe_30_UNCONNECTED;
  wire NLW_U0_LMB_Addr_Strobe_31_UNCONNECTED;
  wire NLW_U0_LMB_Addr_Strobe_4_UNCONNECTED;
  wire NLW_U0_LMB_Addr_Strobe_5_UNCONNECTED;
  wire NLW_U0_LMB_Addr_Strobe_6_UNCONNECTED;
  wire NLW_U0_LMB_Addr_Strobe_7_UNCONNECTED;
  wire NLW_U0_LMB_Addr_Strobe_8_UNCONNECTED;
  wire NLW_U0_LMB_Addr_Strobe_9_UNCONNECTED;
  wire NLW_U0_LMB_Read_Strobe_0_UNCONNECTED;
  wire NLW_U0_LMB_Read_Strobe_1_UNCONNECTED;
  wire NLW_U0_LMB_Read_Strobe_10_UNCONNECTED;
  wire NLW_U0_LMB_Read_Strobe_11_UNCONNECTED;
  wire NLW_U0_LMB_Read_Strobe_12_UNCONNECTED;
  wire NLW_U0_LMB_Read_Strobe_13_UNCONNECTED;
  wire NLW_U0_LMB_Read_Strobe_14_UNCONNECTED;
  wire NLW_U0_LMB_Read_Strobe_15_UNCONNECTED;
  wire NLW_U0_LMB_Read_Strobe_16_UNCONNECTED;
  wire NLW_U0_LMB_Read_Strobe_17_UNCONNECTED;
  wire NLW_U0_LMB_Read_Strobe_18_UNCONNECTED;
  wire NLW_U0_LMB_Read_Strobe_19_UNCONNECTED;
  wire NLW_U0_LMB_Read_Strobe_2_UNCONNECTED;
  wire NLW_U0_LMB_Read_Strobe_20_UNCONNECTED;
  wire NLW_U0_LMB_Read_Strobe_21_UNCONNECTED;
  wire NLW_U0_LMB_Read_Strobe_22_UNCONNECTED;
  wire NLW_U0_LMB_Read_Strobe_23_UNCONNECTED;
  wire NLW_U0_LMB_Read_Strobe_24_UNCONNECTED;
  wire NLW_U0_LMB_Read_Strobe_25_UNCONNECTED;
  wire NLW_U0_LMB_Read_Strobe_26_UNCONNECTED;
  wire NLW_U0_LMB_Read_Strobe_27_UNCONNECTED;
  wire NLW_U0_LMB_Read_Strobe_28_UNCONNECTED;
  wire NLW_U0_LMB_Read_Strobe_29_UNCONNECTED;
  wire NLW_U0_LMB_Read_Strobe_3_UNCONNECTED;
  wire NLW_U0_LMB_Read_Strobe_30_UNCONNECTED;
  wire NLW_U0_LMB_Read_Strobe_31_UNCONNECTED;
  wire NLW_U0_LMB_Read_Strobe_4_UNCONNECTED;
  wire NLW_U0_LMB_Read_Strobe_5_UNCONNECTED;
  wire NLW_U0_LMB_Read_Strobe_6_UNCONNECTED;
  wire NLW_U0_LMB_Read_Strobe_7_UNCONNECTED;
  wire NLW_U0_LMB_Read_Strobe_8_UNCONNECTED;
  wire NLW_U0_LMB_Read_Strobe_9_UNCONNECTED;
  wire NLW_U0_LMB_Write_Strobe_0_UNCONNECTED;
  wire NLW_U0_LMB_Write_Strobe_1_UNCONNECTED;
  wire NLW_U0_LMB_Write_Strobe_10_UNCONNECTED;
  wire NLW_U0_LMB_Write_Strobe_11_UNCONNECTED;
  wire NLW_U0_LMB_Write_Strobe_12_UNCONNECTED;
  wire NLW_U0_LMB_Write_Strobe_13_UNCONNECTED;
  wire NLW_U0_LMB_Write_Strobe_14_UNCONNECTED;
  wire NLW_U0_LMB_Write_Strobe_15_UNCONNECTED;
  wire NLW_U0_LMB_Write_Strobe_16_UNCONNECTED;
  wire NLW_U0_LMB_Write_Strobe_17_UNCONNECTED;
  wire NLW_U0_LMB_Write_Strobe_18_UNCONNECTED;
  wire NLW_U0_LMB_Write_Strobe_19_UNCONNECTED;
  wire NLW_U0_LMB_Write_Strobe_2_UNCONNECTED;
  wire NLW_U0_LMB_Write_Strobe_20_UNCONNECTED;
  wire NLW_U0_LMB_Write_Strobe_21_UNCONNECTED;
  wire NLW_U0_LMB_Write_Strobe_22_UNCONNECTED;
  wire NLW_U0_LMB_Write_Strobe_23_UNCONNECTED;
  wire NLW_U0_LMB_Write_Strobe_24_UNCONNECTED;
  wire NLW_U0_LMB_Write_Strobe_25_UNCONNECTED;
  wire NLW_U0_LMB_Write_Strobe_26_UNCONNECTED;
  wire NLW_U0_LMB_Write_Strobe_27_UNCONNECTED;
  wire NLW_U0_LMB_Write_Strobe_28_UNCONNECTED;
  wire NLW_U0_LMB_Write_Strobe_29_UNCONNECTED;
  wire NLW_U0_LMB_Write_Strobe_3_UNCONNECTED;
  wire NLW_U0_LMB_Write_Strobe_30_UNCONNECTED;
  wire NLW_U0_LMB_Write_Strobe_31_UNCONNECTED;
  wire NLW_U0_LMB_Write_Strobe_4_UNCONNECTED;
  wire NLW_U0_LMB_Write_Strobe_5_UNCONNECTED;
  wire NLW_U0_LMB_Write_Strobe_6_UNCONNECTED;
  wire NLW_U0_LMB_Write_Strobe_7_UNCONNECTED;
  wire NLW_U0_LMB_Write_Strobe_8_UNCONNECTED;
  wire NLW_U0_LMB_Write_Strobe_9_UNCONNECTED;
  wire NLW_U0_M_AXIS_TVALID_UNCONNECTED;
  wire NLW_U0_M_AXI_ARLOCK_UNCONNECTED;
  wire NLW_U0_M_AXI_ARVALID_UNCONNECTED;
  wire NLW_U0_M_AXI_AWLOCK_UNCONNECTED;
  wire NLW_U0_M_AXI_AWVALID_UNCONNECTED;
  wire NLW_U0_M_AXI_BREADY_UNCONNECTED;
  wire NLW_U0_M_AXI_RREADY_UNCONNECTED;
  wire NLW_U0_M_AXI_WLAST_UNCONNECTED;
  wire NLW_U0_M_AXI_WVALID_UNCONNECTED;
  wire NLW_U0_TRACE_CLK_OUT_UNCONNECTED;
  wire NLW_U0_TRACE_CTL_UNCONNECTED;
  wire NLW_U0_Trig_Ack_In_0_UNCONNECTED;
  wire NLW_U0_Trig_Ack_In_1_UNCONNECTED;
  wire NLW_U0_Trig_Ack_In_2_UNCONNECTED;
  wire NLW_U0_Trig_Ack_In_3_UNCONNECTED;
  wire NLW_U0_Trig_Out_0_UNCONNECTED;
  wire NLW_U0_Trig_Out_1_UNCONNECTED;
  wire NLW_U0_Trig_Out_2_UNCONNECTED;
  wire NLW_U0_Trig_Out_3_UNCONNECTED;
  wire NLW_U0_bscan_ext_tdo_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_ARADDR_0_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_ARADDR_1_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_ARADDR_10_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_ARADDR_11_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_ARADDR_12_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_ARADDR_13_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_ARADDR_14_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_ARADDR_15_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_ARADDR_16_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_ARADDR_17_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_ARADDR_18_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_ARADDR_19_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_ARADDR_2_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_ARADDR_20_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_ARADDR_21_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_ARADDR_22_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_ARADDR_23_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_ARADDR_24_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_ARADDR_25_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_ARADDR_26_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_ARADDR_27_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_ARADDR_28_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_ARADDR_29_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_ARADDR_3_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_ARADDR_30_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_ARADDR_31_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_ARADDR_4_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_ARADDR_5_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_ARADDR_6_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_ARADDR_7_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_ARADDR_8_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_ARADDR_9_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_AWADDR_0_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_AWADDR_1_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_AWADDR_10_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_AWADDR_11_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_AWADDR_12_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_AWADDR_13_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_AWADDR_14_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_AWADDR_15_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_AWADDR_16_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_AWADDR_17_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_AWADDR_18_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_AWADDR_19_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_AWADDR_2_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_AWADDR_20_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_AWADDR_21_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_AWADDR_22_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_AWADDR_23_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_AWADDR_24_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_AWADDR_25_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_AWADDR_26_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_AWADDR_27_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_AWADDR_28_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_AWADDR_29_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_AWADDR_3_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_AWADDR_30_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_AWADDR_31_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_AWADDR_4_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_AWADDR_5_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_AWADDR_6_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_AWADDR_7_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_AWADDR_8_UNCONNECTED;
  wire [14:2]NLW_U0_Dbg_AWADDR_9_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Reg_En_1_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Reg_En_10_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Reg_En_11_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Reg_En_12_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Reg_En_13_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Reg_En_14_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Reg_En_15_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Reg_En_16_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Reg_En_17_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Reg_En_18_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Reg_En_19_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Reg_En_2_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Reg_En_20_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Reg_En_21_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Reg_En_22_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Reg_En_23_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Reg_En_24_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Reg_En_25_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Reg_En_26_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Reg_En_27_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Reg_En_28_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Reg_En_29_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Reg_En_3_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Reg_En_30_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Reg_En_31_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Reg_En_4_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Reg_En_5_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Reg_En_6_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Reg_En_7_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Reg_En_8_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Reg_En_9_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Ack_In_0_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Ack_In_1_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Ack_In_10_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Ack_In_11_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Ack_In_12_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Ack_In_13_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Ack_In_14_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Ack_In_15_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Ack_In_16_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Ack_In_17_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Ack_In_18_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Ack_In_19_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Ack_In_2_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Ack_In_20_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Ack_In_21_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Ack_In_22_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Ack_In_23_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Ack_In_24_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Ack_In_25_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Ack_In_26_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Ack_In_27_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Ack_In_28_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Ack_In_29_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Ack_In_3_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Ack_In_30_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Ack_In_31_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Ack_In_4_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Ack_In_5_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Ack_In_6_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Ack_In_7_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Ack_In_8_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Ack_In_9_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Out_0_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Out_1_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Out_10_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Out_11_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Out_12_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Out_13_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Out_14_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Out_15_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Out_16_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Out_17_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Out_18_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Out_19_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Out_2_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Out_20_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Out_21_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Out_22_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Out_23_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Out_24_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Out_25_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Out_26_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Out_27_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Out_28_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Out_29_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Out_3_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Out_30_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Out_31_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Out_4_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Out_5_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Out_6_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Out_7_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Out_8_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Out_9_UNCONNECTED;
  wire [31:0]NLW_U0_Dbg_WDATA_0_UNCONNECTED;
  wire [31:0]NLW_U0_Dbg_WDATA_1_UNCONNECTED;
  wire [31:0]NLW_U0_Dbg_WDATA_10_UNCONNECTED;
  wire [31:0]NLW_U0_Dbg_WDATA_11_UNCONNECTED;
  wire [31:0]NLW_U0_Dbg_WDATA_12_UNCONNECTED;
  wire [31:0]NLW_U0_Dbg_WDATA_13_UNCONNECTED;
  wire [31:0]NLW_U0_Dbg_WDATA_14_UNCONNECTED;
  wire [31:0]NLW_U0_Dbg_WDATA_15_UNCONNECTED;
  wire [31:0]NLW_U0_Dbg_WDATA_16_UNCONNECTED;
  wire [31:0]NLW_U0_Dbg_WDATA_17_UNCONNECTED;
  wire [31:0]NLW_U0_Dbg_WDATA_18_UNCONNECTED;
  wire [31:0]NLW_U0_Dbg_WDATA_19_UNCONNECTED;
  wire [31:0]NLW_U0_Dbg_WDATA_2_UNCONNECTED;
  wire [31:0]NLW_U0_Dbg_WDATA_20_UNCONNECTED;
  wire [31:0]NLW_U0_Dbg_WDATA_21_UNCONNECTED;
  wire [31:0]NLW_U0_Dbg_WDATA_22_UNCONNECTED;
  wire [31:0]NLW_U0_Dbg_WDATA_23_UNCONNECTED;
  wire [31:0]NLW_U0_Dbg_WDATA_24_UNCONNECTED;
  wire [31:0]NLW_U0_Dbg_WDATA_25_UNCONNECTED;
  wire [31:0]NLW_U0_Dbg_WDATA_26_UNCONNECTED;
  wire [31:0]NLW_U0_Dbg_WDATA_27_UNCONNECTED;
  wire [31:0]NLW_U0_Dbg_WDATA_28_UNCONNECTED;
  wire [31:0]NLW_U0_Dbg_WDATA_29_UNCONNECTED;
  wire [31:0]NLW_U0_Dbg_WDATA_3_UNCONNECTED;
  wire [31:0]NLW_U0_Dbg_WDATA_30_UNCONNECTED;
  wire [31:0]NLW_U0_Dbg_WDATA_31_UNCONNECTED;
  wire [31:0]NLW_U0_Dbg_WDATA_4_UNCONNECTED;
  wire [31:0]NLW_U0_Dbg_WDATA_5_UNCONNECTED;
  wire [31:0]NLW_U0_Dbg_WDATA_6_UNCONNECTED;
  wire [31:0]NLW_U0_Dbg_WDATA_7_UNCONNECTED;
  wire [31:0]NLW_U0_Dbg_WDATA_8_UNCONNECTED;
  wire [31:0]NLW_U0_Dbg_WDATA_9_UNCONNECTED;
  wire [0:3]NLW_U0_LMB_Byte_Enable_0_UNCONNECTED;
  wire [0:3]NLW_U0_LMB_Byte_Enable_1_UNCONNECTED;
  wire [0:3]NLW_U0_LMB_Byte_Enable_10_UNCONNECTED;
  wire [0:3]NLW_U0_LMB_Byte_Enable_11_UNCONNECTED;
  wire [0:3]NLW_U0_LMB_Byte_Enable_12_UNCONNECTED;
  wire [0:3]NLW_U0_LMB_Byte_Enable_13_UNCONNECTED;
  wire [0:3]NLW_U0_LMB_Byte_Enable_14_UNCONNECTED;
  wire [0:3]NLW_U0_LMB_Byte_Enable_15_UNCONNECTED;
  wire [0:3]NLW_U0_LMB_Byte_Enable_16_UNCONNECTED;
  wire [0:3]NLW_U0_LMB_Byte_Enable_17_UNCONNECTED;
  wire [0:3]NLW_U0_LMB_Byte_Enable_18_UNCONNECTED;
  wire [0:3]NLW_U0_LMB_Byte_Enable_19_UNCONNECTED;
  wire [0:3]NLW_U0_LMB_Byte_Enable_2_UNCONNECTED;
  wire [0:3]NLW_U0_LMB_Byte_Enable_20_UNCONNECTED;
  wire [0:3]NLW_U0_LMB_Byte_Enable_21_UNCONNECTED;
  wire [0:3]NLW_U0_LMB_Byte_Enable_22_UNCONNECTED;
  wire [0:3]NLW_U0_LMB_Byte_Enable_23_UNCONNECTED;
  wire [0:3]NLW_U0_LMB_Byte_Enable_24_UNCONNECTED;
  wire [0:3]NLW_U0_LMB_Byte_Enable_25_UNCONNECTED;
  wire [0:3]NLW_U0_LMB_Byte_Enable_26_UNCONNECTED;
  wire [0:3]NLW_U0_LMB_Byte_Enable_27_UNCONNECTED;
  wire [0:3]NLW_U0_LMB_Byte_Enable_28_UNCONNECTED;
  wire [0:3]NLW_U0_LMB_Byte_Enable_29_UNCONNECTED;
  wire [0:3]NLW_U0_LMB_Byte_Enable_3_UNCONNECTED;
  wire [0:3]NLW_U0_LMB_Byte_Enable_30_UNCONNECTED;
  wire [0:3]NLW_U0_LMB_Byte_Enable_31_UNCONNECTED;
  wire [0:3]NLW_U0_LMB_Byte_Enable_4_UNCONNECTED;
  wire [0:3]NLW_U0_LMB_Byte_Enable_5_UNCONNECTED;
  wire [0:3]NLW_U0_LMB_Byte_Enable_6_UNCONNECTED;
  wire [0:3]NLW_U0_LMB_Byte_Enable_7_UNCONNECTED;
  wire [0:3]NLW_U0_LMB_Byte_Enable_8_UNCONNECTED;
  wire [0:3]NLW_U0_LMB_Byte_Enable_9_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Addr_0_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Addr_1_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Addr_10_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Addr_11_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Addr_12_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Addr_13_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Addr_14_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Addr_15_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Addr_16_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Addr_17_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Addr_18_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Addr_19_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Addr_2_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Addr_20_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Addr_21_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Addr_22_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Addr_23_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Addr_24_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Addr_25_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Addr_26_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Addr_27_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Addr_28_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Addr_29_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Addr_3_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Addr_30_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Addr_31_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Addr_4_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Addr_5_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Addr_6_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Addr_7_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Addr_8_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Addr_9_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Write_0_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Write_1_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Write_10_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Write_11_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Write_12_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Write_13_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Write_14_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Write_15_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Write_16_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Write_17_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Write_18_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Write_19_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Write_2_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Write_20_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Write_21_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Write_22_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Write_23_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Write_24_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Write_25_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Write_26_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Write_27_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Write_28_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Write_29_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Write_3_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Write_30_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Write_31_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Write_4_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Write_5_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Write_6_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Write_7_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Write_8_UNCONNECTED;
  wire [0:31]NLW_U0_LMB_Data_Write_9_UNCONNECTED;
  wire [31:0]NLW_U0_M_AXIS_TDATA_UNCONNECTED;
  wire [6:0]NLW_U0_M_AXIS_TID_UNCONNECTED;
  wire [31:0]NLW_U0_M_AXI_ARADDR_UNCONNECTED;
  wire [1:0]NLW_U0_M_AXI_ARBURST_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_ARCACHE_UNCONNECTED;
  wire [0:0]NLW_U0_M_AXI_ARID_UNCONNECTED;
  wire [7:0]NLW_U0_M_AXI_ARLEN_UNCONNECTED;
  wire [2:0]NLW_U0_M_AXI_ARPROT_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_ARQOS_UNCONNECTED;
  wire [2:0]NLW_U0_M_AXI_ARSIZE_UNCONNECTED;
  wire [31:0]NLW_U0_M_AXI_AWADDR_UNCONNECTED;
  wire [1:0]NLW_U0_M_AXI_AWBURST_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_AWCACHE_UNCONNECTED;
  wire [0:0]NLW_U0_M_AXI_AWID_UNCONNECTED;
  wire [7:0]NLW_U0_M_AXI_AWLEN_UNCONNECTED;
  wire [2:0]NLW_U0_M_AXI_AWPROT_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_AWQOS_UNCONNECTED;
  wire [2:0]NLW_U0_M_AXI_AWSIZE_UNCONNECTED;
  wire [31:0]NLW_U0_M_AXI_WDATA_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_WSTRB_UNCONNECTED;
  wire [31:0]NLW_U0_TRACE_DATA_UNCONNECTED;

  (* C_ADDR_SIZE = "32" *) 
  (* C_AVOID_PRIMITIVES = "0" *) 
  (* C_BSCANID = "76547328" *) 
  (* C_DATA_SIZE = "32" *) 
  (* C_DBG_MEM_ACCESS = "0" *) 
  (* C_DBG_REG_ACCESS = "0" *) 
  (* C_DEBUG_INTERFACE = "0" *) 
  (* C_EXT_TRIG_RESET_VALUE = "20'b11110001001000110100" *) 
  (* C_FAMILY = "artix7" *) 
  (* C_INTERCONNECT = "2" *) 
  (* C_JTAG_CHAIN = "2" *) 
  (* C_LMB_PROTOCOL = "0" *) 
  (* C_MB_DBG_PORTS = "1" *) 
  (* C_M_AXIS_DATA_WIDTH = "32" *) 
  (* C_M_AXIS_ID_WIDTH = "7" *) 
  (* C_M_AXI_ADDR_WIDTH = "32" *) 
  (* C_M_AXI_DATA_WIDTH = "32" *) 
  (* C_M_AXI_THREAD_ID_WIDTH = "1" *) 
  (* C_S_AXI_ACLK_FREQ_HZ = "100000000" *) 
  (* C_S_AXI_ADDR_WIDTH = "4" *) 
  (* C_S_AXI_DATA_WIDTH = "32" *) 
  (* C_TRACE_ASYNC_RESET = "0" *) 
  (* C_TRACE_CLK_FREQ_HZ = "200000000" *) 
  (* C_TRACE_CLK_OUT_PHASE = "90" *) 
  (* C_TRACE_DATA_WIDTH = "32" *) 
  (* C_TRACE_ID = "110" *) 
  (* C_TRACE_OUTPUT = "0" *) 
  (* C_TRACE_PROTOCOL = "1" *) 
  (* C_USE_BSCAN = "0" *) 
  (* C_USE_CONFIG_RESET = "0" *) 
  (* C_USE_CROSS_TRIGGER = "0" *) 
  (* C_USE_UART = "1" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MDM U0
       (.Config_Reset(1'b0),
        .Dbg_ARADDR_0(NLW_U0_Dbg_ARADDR_0_UNCONNECTED[14:2]),
        .Dbg_ARADDR_1(NLW_U0_Dbg_ARADDR_1_UNCONNECTED[14:2]),
        .Dbg_ARADDR_10(NLW_U0_Dbg_ARADDR_10_UNCONNECTED[14:2]),
        .Dbg_ARADDR_11(NLW_U0_Dbg_ARADDR_11_UNCONNECTED[14:2]),
        .Dbg_ARADDR_12(NLW_U0_Dbg_ARADDR_12_UNCONNECTED[14:2]),
        .Dbg_ARADDR_13(NLW_U0_Dbg_ARADDR_13_UNCONNECTED[14:2]),
        .Dbg_ARADDR_14(NLW_U0_Dbg_ARADDR_14_UNCONNECTED[14:2]),
        .Dbg_ARADDR_15(NLW_U0_Dbg_ARADDR_15_UNCONNECTED[14:2]),
        .Dbg_ARADDR_16(NLW_U0_Dbg_ARADDR_16_UNCONNECTED[14:2]),
        .Dbg_ARADDR_17(NLW_U0_Dbg_ARADDR_17_UNCONNECTED[14:2]),
        .Dbg_ARADDR_18(NLW_U0_Dbg_ARADDR_18_UNCONNECTED[14:2]),
        .Dbg_ARADDR_19(NLW_U0_Dbg_ARADDR_19_UNCONNECTED[14:2]),
        .Dbg_ARADDR_2(NLW_U0_Dbg_ARADDR_2_UNCONNECTED[14:2]),
        .Dbg_ARADDR_20(NLW_U0_Dbg_ARADDR_20_UNCONNECTED[14:2]),
        .Dbg_ARADDR_21(NLW_U0_Dbg_ARADDR_21_UNCONNECTED[14:2]),
        .Dbg_ARADDR_22(NLW_U0_Dbg_ARADDR_22_UNCONNECTED[14:2]),
        .Dbg_ARADDR_23(NLW_U0_Dbg_ARADDR_23_UNCONNECTED[14:2]),
        .Dbg_ARADDR_24(NLW_U0_Dbg_ARADDR_24_UNCONNECTED[14:2]),
        .Dbg_ARADDR_25(NLW_U0_Dbg_ARADDR_25_UNCONNECTED[14:2]),
        .Dbg_ARADDR_26(NLW_U0_Dbg_ARADDR_26_UNCONNECTED[14:2]),
        .Dbg_ARADDR_27(NLW_U0_Dbg_ARADDR_27_UNCONNECTED[14:2]),
        .Dbg_ARADDR_28(NLW_U0_Dbg_ARADDR_28_UNCONNECTED[14:2]),
        .Dbg_ARADDR_29(NLW_U0_Dbg_ARADDR_29_UNCONNECTED[14:2]),
        .Dbg_ARADDR_3(NLW_U0_Dbg_ARADDR_3_UNCONNECTED[14:2]),
        .Dbg_ARADDR_30(NLW_U0_Dbg_ARADDR_30_UNCONNECTED[14:2]),
        .Dbg_ARADDR_31(NLW_U0_Dbg_ARADDR_31_UNCONNECTED[14:2]),
        .Dbg_ARADDR_4(NLW_U0_Dbg_ARADDR_4_UNCONNECTED[14:2]),
        .Dbg_ARADDR_5(NLW_U0_Dbg_ARADDR_5_UNCONNECTED[14:2]),
        .Dbg_ARADDR_6(NLW_U0_Dbg_ARADDR_6_UNCONNECTED[14:2]),
        .Dbg_ARADDR_7(NLW_U0_Dbg_ARADDR_7_UNCONNECTED[14:2]),
        .Dbg_ARADDR_8(NLW_U0_Dbg_ARADDR_8_UNCONNECTED[14:2]),
        .Dbg_ARADDR_9(NLW_U0_Dbg_ARADDR_9_UNCONNECTED[14:2]),
        .Dbg_ARREADY_0(1'b0),
        .Dbg_ARREADY_1(1'b0),
        .Dbg_ARREADY_10(1'b0),
        .Dbg_ARREADY_11(1'b0),
        .Dbg_ARREADY_12(1'b0),
        .Dbg_ARREADY_13(1'b0),
        .Dbg_ARREADY_14(1'b0),
        .Dbg_ARREADY_15(1'b0),
        .Dbg_ARREADY_16(1'b0),
        .Dbg_ARREADY_17(1'b0),
        .Dbg_ARREADY_18(1'b0),
        .Dbg_ARREADY_19(1'b0),
        .Dbg_ARREADY_2(1'b0),
        .Dbg_ARREADY_20(1'b0),
        .Dbg_ARREADY_21(1'b0),
        .Dbg_ARREADY_22(1'b0),
        .Dbg_ARREADY_23(1'b0),
        .Dbg_ARREADY_24(1'b0),
        .Dbg_ARREADY_25(1'b0),
        .Dbg_ARREADY_26(1'b0),
        .Dbg_ARREADY_27(1'b0),
        .Dbg_ARREADY_28(1'b0),
        .Dbg_ARREADY_29(1'b0),
        .Dbg_ARREADY_3(1'b0),
        .Dbg_ARREADY_30(1'b0),
        .Dbg_ARREADY_31(1'b0),
        .Dbg_ARREADY_4(1'b0),
        .Dbg_ARREADY_5(1'b0),
        .Dbg_ARREADY_6(1'b0),
        .Dbg_ARREADY_7(1'b0),
        .Dbg_ARREADY_8(1'b0),
        .Dbg_ARREADY_9(1'b0),
        .Dbg_ARVALID_0(NLW_U0_Dbg_ARVALID_0_UNCONNECTED),
        .Dbg_ARVALID_1(NLW_U0_Dbg_ARVALID_1_UNCONNECTED),
        .Dbg_ARVALID_10(NLW_U0_Dbg_ARVALID_10_UNCONNECTED),
        .Dbg_ARVALID_11(NLW_U0_Dbg_ARVALID_11_UNCONNECTED),
        .Dbg_ARVALID_12(NLW_U0_Dbg_ARVALID_12_UNCONNECTED),
        .Dbg_ARVALID_13(NLW_U0_Dbg_ARVALID_13_UNCONNECTED),
        .Dbg_ARVALID_14(NLW_U0_Dbg_ARVALID_14_UNCONNECTED),
        .Dbg_ARVALID_15(NLW_U0_Dbg_ARVALID_15_UNCONNECTED),
        .Dbg_ARVALID_16(NLW_U0_Dbg_ARVALID_16_UNCONNECTED),
        .Dbg_ARVALID_17(NLW_U0_Dbg_ARVALID_17_UNCONNECTED),
        .Dbg_ARVALID_18(NLW_U0_Dbg_ARVALID_18_UNCONNECTED),
        .Dbg_ARVALID_19(NLW_U0_Dbg_ARVALID_19_UNCONNECTED),
        .Dbg_ARVALID_2(NLW_U0_Dbg_ARVALID_2_UNCONNECTED),
        .Dbg_ARVALID_20(NLW_U0_Dbg_ARVALID_20_UNCONNECTED),
        .Dbg_ARVALID_21(NLW_U0_Dbg_ARVALID_21_UNCONNECTED),
        .Dbg_ARVALID_22(NLW_U0_Dbg_ARVALID_22_UNCONNECTED),
        .Dbg_ARVALID_23(NLW_U0_Dbg_ARVALID_23_UNCONNECTED),
        .Dbg_ARVALID_24(NLW_U0_Dbg_ARVALID_24_UNCONNECTED),
        .Dbg_ARVALID_25(NLW_U0_Dbg_ARVALID_25_UNCONNECTED),
        .Dbg_ARVALID_26(NLW_U0_Dbg_ARVALID_26_UNCONNECTED),
        .Dbg_ARVALID_27(NLW_U0_Dbg_ARVALID_27_UNCONNECTED),
        .Dbg_ARVALID_28(NLW_U0_Dbg_ARVALID_28_UNCONNECTED),
        .Dbg_ARVALID_29(NLW_U0_Dbg_ARVALID_29_UNCONNECTED),
        .Dbg_ARVALID_3(NLW_U0_Dbg_ARVALID_3_UNCONNECTED),
        .Dbg_ARVALID_30(NLW_U0_Dbg_ARVALID_30_UNCONNECTED),
        .Dbg_ARVALID_31(NLW_U0_Dbg_ARVALID_31_UNCONNECTED),
        .Dbg_ARVALID_4(NLW_U0_Dbg_ARVALID_4_UNCONNECTED),
        .Dbg_ARVALID_5(NLW_U0_Dbg_ARVALID_5_UNCONNECTED),
        .Dbg_ARVALID_6(NLW_U0_Dbg_ARVALID_6_UNCONNECTED),
        .Dbg_ARVALID_7(NLW_U0_Dbg_ARVALID_7_UNCONNECTED),
        .Dbg_ARVALID_8(NLW_U0_Dbg_ARVALID_8_UNCONNECTED),
        .Dbg_ARVALID_9(NLW_U0_Dbg_ARVALID_9_UNCONNECTED),
        .Dbg_AWADDR_0(NLW_U0_Dbg_AWADDR_0_UNCONNECTED[14:2]),
        .Dbg_AWADDR_1(NLW_U0_Dbg_AWADDR_1_UNCONNECTED[14:2]),
        .Dbg_AWADDR_10(NLW_U0_Dbg_AWADDR_10_UNCONNECTED[14:2]),
        .Dbg_AWADDR_11(NLW_U0_Dbg_AWADDR_11_UNCONNECTED[14:2]),
        .Dbg_AWADDR_12(NLW_U0_Dbg_AWADDR_12_UNCONNECTED[14:2]),
        .Dbg_AWADDR_13(NLW_U0_Dbg_AWADDR_13_UNCONNECTED[14:2]),
        .Dbg_AWADDR_14(NLW_U0_Dbg_AWADDR_14_UNCONNECTED[14:2]),
        .Dbg_AWADDR_15(NLW_U0_Dbg_AWADDR_15_UNCONNECTED[14:2]),
        .Dbg_AWADDR_16(NLW_U0_Dbg_AWADDR_16_UNCONNECTED[14:2]),
        .Dbg_AWADDR_17(NLW_U0_Dbg_AWADDR_17_UNCONNECTED[14:2]),
        .Dbg_AWADDR_18(NLW_U0_Dbg_AWADDR_18_UNCONNECTED[14:2]),
        .Dbg_AWADDR_19(NLW_U0_Dbg_AWADDR_19_UNCONNECTED[14:2]),
        .Dbg_AWADDR_2(NLW_U0_Dbg_AWADDR_2_UNCONNECTED[14:2]),
        .Dbg_AWADDR_20(NLW_U0_Dbg_AWADDR_20_UNCONNECTED[14:2]),
        .Dbg_AWADDR_21(NLW_U0_Dbg_AWADDR_21_UNCONNECTED[14:2]),
        .Dbg_AWADDR_22(NLW_U0_Dbg_AWADDR_22_UNCONNECTED[14:2]),
        .Dbg_AWADDR_23(NLW_U0_Dbg_AWADDR_23_UNCONNECTED[14:2]),
        .Dbg_AWADDR_24(NLW_U0_Dbg_AWADDR_24_UNCONNECTED[14:2]),
        .Dbg_AWADDR_25(NLW_U0_Dbg_AWADDR_25_UNCONNECTED[14:2]),
        .Dbg_AWADDR_26(NLW_U0_Dbg_AWADDR_26_UNCONNECTED[14:2]),
        .Dbg_AWADDR_27(NLW_U0_Dbg_AWADDR_27_UNCONNECTED[14:2]),
        .Dbg_AWADDR_28(NLW_U0_Dbg_AWADDR_28_UNCONNECTED[14:2]),
        .Dbg_AWADDR_29(NLW_U0_Dbg_AWADDR_29_UNCONNECTED[14:2]),
        .Dbg_AWADDR_3(NLW_U0_Dbg_AWADDR_3_UNCONNECTED[14:2]),
        .Dbg_AWADDR_30(NLW_U0_Dbg_AWADDR_30_UNCONNECTED[14:2]),
        .Dbg_AWADDR_31(NLW_U0_Dbg_AWADDR_31_UNCONNECTED[14:2]),
        .Dbg_AWADDR_4(NLW_U0_Dbg_AWADDR_4_UNCONNECTED[14:2]),
        .Dbg_AWADDR_5(NLW_U0_Dbg_AWADDR_5_UNCONNECTED[14:2]),
        .Dbg_AWADDR_6(NLW_U0_Dbg_AWADDR_6_UNCONNECTED[14:2]),
        .Dbg_AWADDR_7(NLW_U0_Dbg_AWADDR_7_UNCONNECTED[14:2]),
        .Dbg_AWADDR_8(NLW_U0_Dbg_AWADDR_8_UNCONNECTED[14:2]),
        .Dbg_AWADDR_9(NLW_U0_Dbg_AWADDR_9_UNCONNECTED[14:2]),
        .Dbg_AWREADY_0(1'b0),
        .Dbg_AWREADY_1(1'b0),
        .Dbg_AWREADY_10(1'b0),
        .Dbg_AWREADY_11(1'b0),
        .Dbg_AWREADY_12(1'b0),
        .Dbg_AWREADY_13(1'b0),
        .Dbg_AWREADY_14(1'b0),
        .Dbg_AWREADY_15(1'b0),
        .Dbg_AWREADY_16(1'b0),
        .Dbg_AWREADY_17(1'b0),
        .Dbg_AWREADY_18(1'b0),
        .Dbg_AWREADY_19(1'b0),
        .Dbg_AWREADY_2(1'b0),
        .Dbg_AWREADY_20(1'b0),
        .Dbg_AWREADY_21(1'b0),
        .Dbg_AWREADY_22(1'b0),
        .Dbg_AWREADY_23(1'b0),
        .Dbg_AWREADY_24(1'b0),
        .Dbg_AWREADY_25(1'b0),
        .Dbg_AWREADY_26(1'b0),
        .Dbg_AWREADY_27(1'b0),
        .Dbg_AWREADY_28(1'b0),
        .Dbg_AWREADY_29(1'b0),
        .Dbg_AWREADY_3(1'b0),
        .Dbg_AWREADY_30(1'b0),
        .Dbg_AWREADY_31(1'b0),
        .Dbg_AWREADY_4(1'b0),
        .Dbg_AWREADY_5(1'b0),
        .Dbg_AWREADY_6(1'b0),
        .Dbg_AWREADY_7(1'b0),
        .Dbg_AWREADY_8(1'b0),
        .Dbg_AWREADY_9(1'b0),
        .Dbg_AWVALID_0(NLW_U0_Dbg_AWVALID_0_UNCONNECTED),
        .Dbg_AWVALID_1(NLW_U0_Dbg_AWVALID_1_UNCONNECTED),
        .Dbg_AWVALID_10(NLW_U0_Dbg_AWVALID_10_UNCONNECTED),
        .Dbg_AWVALID_11(NLW_U0_Dbg_AWVALID_11_UNCONNECTED),
        .Dbg_AWVALID_12(NLW_U0_Dbg_AWVALID_12_UNCONNECTED),
        .Dbg_AWVALID_13(NLW_U0_Dbg_AWVALID_13_UNCONNECTED),
        .Dbg_AWVALID_14(NLW_U0_Dbg_AWVALID_14_UNCONNECTED),
        .Dbg_AWVALID_15(NLW_U0_Dbg_AWVALID_15_UNCONNECTED),
        .Dbg_AWVALID_16(NLW_U0_Dbg_AWVALID_16_UNCONNECTED),
        .Dbg_AWVALID_17(NLW_U0_Dbg_AWVALID_17_UNCONNECTED),
        .Dbg_AWVALID_18(NLW_U0_Dbg_AWVALID_18_UNCONNECTED),
        .Dbg_AWVALID_19(NLW_U0_Dbg_AWVALID_19_UNCONNECTED),
        .Dbg_AWVALID_2(NLW_U0_Dbg_AWVALID_2_UNCONNECTED),
        .Dbg_AWVALID_20(NLW_U0_Dbg_AWVALID_20_UNCONNECTED),
        .Dbg_AWVALID_21(NLW_U0_Dbg_AWVALID_21_UNCONNECTED),
        .Dbg_AWVALID_22(NLW_U0_Dbg_AWVALID_22_UNCONNECTED),
        .Dbg_AWVALID_23(NLW_U0_Dbg_AWVALID_23_UNCONNECTED),
        .Dbg_AWVALID_24(NLW_U0_Dbg_AWVALID_24_UNCONNECTED),
        .Dbg_AWVALID_25(NLW_U0_Dbg_AWVALID_25_UNCONNECTED),
        .Dbg_AWVALID_26(NLW_U0_Dbg_AWVALID_26_UNCONNECTED),
        .Dbg_AWVALID_27(NLW_U0_Dbg_AWVALID_27_UNCONNECTED),
        .Dbg_AWVALID_28(NLW_U0_Dbg_AWVALID_28_UNCONNECTED),
        .Dbg_AWVALID_29(NLW_U0_Dbg_AWVALID_29_UNCONNECTED),
        .Dbg_AWVALID_3(NLW_U0_Dbg_AWVALID_3_UNCONNECTED),
        .Dbg_AWVALID_30(NLW_U0_Dbg_AWVALID_30_UNCONNECTED),
        .Dbg_AWVALID_31(NLW_U0_Dbg_AWVALID_31_UNCONNECTED),
        .Dbg_AWVALID_4(NLW_U0_Dbg_AWVALID_4_UNCONNECTED),
        .Dbg_AWVALID_5(NLW_U0_Dbg_AWVALID_5_UNCONNECTED),
        .Dbg_AWVALID_6(NLW_U0_Dbg_AWVALID_6_UNCONNECTED),
        .Dbg_AWVALID_7(NLW_U0_Dbg_AWVALID_7_UNCONNECTED),
        .Dbg_AWVALID_8(NLW_U0_Dbg_AWVALID_8_UNCONNECTED),
        .Dbg_AWVALID_9(NLW_U0_Dbg_AWVALID_9_UNCONNECTED),
        .Dbg_BREADY_0(NLW_U0_Dbg_BREADY_0_UNCONNECTED),
        .Dbg_BREADY_1(NLW_U0_Dbg_BREADY_1_UNCONNECTED),
        .Dbg_BREADY_10(NLW_U0_Dbg_BREADY_10_UNCONNECTED),
        .Dbg_BREADY_11(NLW_U0_Dbg_BREADY_11_UNCONNECTED),
        .Dbg_BREADY_12(NLW_U0_Dbg_BREADY_12_UNCONNECTED),
        .Dbg_BREADY_13(NLW_U0_Dbg_BREADY_13_UNCONNECTED),
        .Dbg_BREADY_14(NLW_U0_Dbg_BREADY_14_UNCONNECTED),
        .Dbg_BREADY_15(NLW_U0_Dbg_BREADY_15_UNCONNECTED),
        .Dbg_BREADY_16(NLW_U0_Dbg_BREADY_16_UNCONNECTED),
        .Dbg_BREADY_17(NLW_U0_Dbg_BREADY_17_UNCONNECTED),
        .Dbg_BREADY_18(NLW_U0_Dbg_BREADY_18_UNCONNECTED),
        .Dbg_BREADY_19(NLW_U0_Dbg_BREADY_19_UNCONNECTED),
        .Dbg_BREADY_2(NLW_U0_Dbg_BREADY_2_UNCONNECTED),
        .Dbg_BREADY_20(NLW_U0_Dbg_BREADY_20_UNCONNECTED),
        .Dbg_BREADY_21(NLW_U0_Dbg_BREADY_21_UNCONNECTED),
        .Dbg_BREADY_22(NLW_U0_Dbg_BREADY_22_UNCONNECTED),
        .Dbg_BREADY_23(NLW_U0_Dbg_BREADY_23_UNCONNECTED),
        .Dbg_BREADY_24(NLW_U0_Dbg_BREADY_24_UNCONNECTED),
        .Dbg_BREADY_25(NLW_U0_Dbg_BREADY_25_UNCONNECTED),
        .Dbg_BREADY_26(NLW_U0_Dbg_BREADY_26_UNCONNECTED),
        .Dbg_BREADY_27(NLW_U0_Dbg_BREADY_27_UNCONNECTED),
        .Dbg_BREADY_28(NLW_U0_Dbg_BREADY_28_UNCONNECTED),
        .Dbg_BREADY_29(NLW_U0_Dbg_BREADY_29_UNCONNECTED),
        .Dbg_BREADY_3(NLW_U0_Dbg_BREADY_3_UNCONNECTED),
        .Dbg_BREADY_30(NLW_U0_Dbg_BREADY_30_UNCONNECTED),
        .Dbg_BREADY_31(NLW_U0_Dbg_BREADY_31_UNCONNECTED),
        .Dbg_BREADY_4(NLW_U0_Dbg_BREADY_4_UNCONNECTED),
        .Dbg_BREADY_5(NLW_U0_Dbg_BREADY_5_UNCONNECTED),
        .Dbg_BREADY_6(NLW_U0_Dbg_BREADY_6_UNCONNECTED),
        .Dbg_BREADY_7(NLW_U0_Dbg_BREADY_7_UNCONNECTED),
        .Dbg_BREADY_8(NLW_U0_Dbg_BREADY_8_UNCONNECTED),
        .Dbg_BREADY_9(NLW_U0_Dbg_BREADY_9_UNCONNECTED),
        .Dbg_BRESP_0({1'b0,1'b0}),
        .Dbg_BRESP_1({1'b0,1'b0}),
        .Dbg_BRESP_10({1'b0,1'b0}),
        .Dbg_BRESP_11({1'b0,1'b0}),
        .Dbg_BRESP_12({1'b0,1'b0}),
        .Dbg_BRESP_13({1'b0,1'b0}),
        .Dbg_BRESP_14({1'b0,1'b0}),
        .Dbg_BRESP_15({1'b0,1'b0}),
        .Dbg_BRESP_16({1'b0,1'b0}),
        .Dbg_BRESP_17({1'b0,1'b0}),
        .Dbg_BRESP_18({1'b0,1'b0}),
        .Dbg_BRESP_19({1'b0,1'b0}),
        .Dbg_BRESP_2({1'b0,1'b0}),
        .Dbg_BRESP_20({1'b0,1'b0}),
        .Dbg_BRESP_21({1'b0,1'b0}),
        .Dbg_BRESP_22({1'b0,1'b0}),
        .Dbg_BRESP_23({1'b0,1'b0}),
        .Dbg_BRESP_24({1'b0,1'b0}),
        .Dbg_BRESP_25({1'b0,1'b0}),
        .Dbg_BRESP_26({1'b0,1'b0}),
        .Dbg_BRESP_27({1'b0,1'b0}),
        .Dbg_BRESP_28({1'b0,1'b0}),
        .Dbg_BRESP_29({1'b0,1'b0}),
        .Dbg_BRESP_3({1'b0,1'b0}),
        .Dbg_BRESP_30({1'b0,1'b0}),
        .Dbg_BRESP_31({1'b0,1'b0}),
        .Dbg_BRESP_4({1'b0,1'b0}),
        .Dbg_BRESP_5({1'b0,1'b0}),
        .Dbg_BRESP_6({1'b0,1'b0}),
        .Dbg_BRESP_7({1'b0,1'b0}),
        .Dbg_BRESP_8({1'b0,1'b0}),
        .Dbg_BRESP_9({1'b0,1'b0}),
        .Dbg_BVALID_0(1'b0),
        .Dbg_BVALID_1(1'b0),
        .Dbg_BVALID_10(1'b0),
        .Dbg_BVALID_11(1'b0),
        .Dbg_BVALID_12(1'b0),
        .Dbg_BVALID_13(1'b0),
        .Dbg_BVALID_14(1'b0),
        .Dbg_BVALID_15(1'b0),
        .Dbg_BVALID_16(1'b0),
        .Dbg_BVALID_17(1'b0),
        .Dbg_BVALID_18(1'b0),
        .Dbg_BVALID_19(1'b0),
        .Dbg_BVALID_2(1'b0),
        .Dbg_BVALID_20(1'b0),
        .Dbg_BVALID_21(1'b0),
        .Dbg_BVALID_22(1'b0),
        .Dbg_BVALID_23(1'b0),
        .Dbg_BVALID_24(1'b0),
        .Dbg_BVALID_25(1'b0),
        .Dbg_BVALID_26(1'b0),
        .Dbg_BVALID_27(1'b0),
        .Dbg_BVALID_28(1'b0),
        .Dbg_BVALID_29(1'b0),
        .Dbg_BVALID_3(1'b0),
        .Dbg_BVALID_30(1'b0),
        .Dbg_BVALID_31(1'b0),
        .Dbg_BVALID_4(1'b0),
        .Dbg_BVALID_5(1'b0),
        .Dbg_BVALID_6(1'b0),
        .Dbg_BVALID_7(1'b0),
        .Dbg_BVALID_8(1'b0),
        .Dbg_BVALID_9(1'b0),
        .Dbg_Capture_0(Dbg_Capture_0),
        .Dbg_Capture_1(NLW_U0_Dbg_Capture_1_UNCONNECTED),
        .Dbg_Capture_10(NLW_U0_Dbg_Capture_10_UNCONNECTED),
        .Dbg_Capture_11(NLW_U0_Dbg_Capture_11_UNCONNECTED),
        .Dbg_Capture_12(NLW_U0_Dbg_Capture_12_UNCONNECTED),
        .Dbg_Capture_13(NLW_U0_Dbg_Capture_13_UNCONNECTED),
        .Dbg_Capture_14(NLW_U0_Dbg_Capture_14_UNCONNECTED),
        .Dbg_Capture_15(NLW_U0_Dbg_Capture_15_UNCONNECTED),
        .Dbg_Capture_16(NLW_U0_Dbg_Capture_16_UNCONNECTED),
        .Dbg_Capture_17(NLW_U0_Dbg_Capture_17_UNCONNECTED),
        .Dbg_Capture_18(NLW_U0_Dbg_Capture_18_UNCONNECTED),
        .Dbg_Capture_19(NLW_U0_Dbg_Capture_19_UNCONNECTED),
        .Dbg_Capture_2(NLW_U0_Dbg_Capture_2_UNCONNECTED),
        .Dbg_Capture_20(NLW_U0_Dbg_Capture_20_UNCONNECTED),
        .Dbg_Capture_21(NLW_U0_Dbg_Capture_21_UNCONNECTED),
        .Dbg_Capture_22(NLW_U0_Dbg_Capture_22_UNCONNECTED),
        .Dbg_Capture_23(NLW_U0_Dbg_Capture_23_UNCONNECTED),
        .Dbg_Capture_24(NLW_U0_Dbg_Capture_24_UNCONNECTED),
        .Dbg_Capture_25(NLW_U0_Dbg_Capture_25_UNCONNECTED),
        .Dbg_Capture_26(NLW_U0_Dbg_Capture_26_UNCONNECTED),
        .Dbg_Capture_27(NLW_U0_Dbg_Capture_27_UNCONNECTED),
        .Dbg_Capture_28(NLW_U0_Dbg_Capture_28_UNCONNECTED),
        .Dbg_Capture_29(NLW_U0_Dbg_Capture_29_UNCONNECTED),
        .Dbg_Capture_3(NLW_U0_Dbg_Capture_3_UNCONNECTED),
        .Dbg_Capture_30(NLW_U0_Dbg_Capture_30_UNCONNECTED),
        .Dbg_Capture_31(NLW_U0_Dbg_Capture_31_UNCONNECTED),
        .Dbg_Capture_4(NLW_U0_Dbg_Capture_4_UNCONNECTED),
        .Dbg_Capture_5(NLW_U0_Dbg_Capture_5_UNCONNECTED),
        .Dbg_Capture_6(NLW_U0_Dbg_Capture_6_UNCONNECTED),
        .Dbg_Capture_7(NLW_U0_Dbg_Capture_7_UNCONNECTED),
        .Dbg_Capture_8(NLW_U0_Dbg_Capture_8_UNCONNECTED),
        .Dbg_Capture_9(NLW_U0_Dbg_Capture_9_UNCONNECTED),
        .Dbg_Clk_0(Dbg_Clk_0),
        .Dbg_Clk_1(NLW_U0_Dbg_Clk_1_UNCONNECTED),
        .Dbg_Clk_10(NLW_U0_Dbg_Clk_10_UNCONNECTED),
        .Dbg_Clk_11(NLW_U0_Dbg_Clk_11_UNCONNECTED),
        .Dbg_Clk_12(NLW_U0_Dbg_Clk_12_UNCONNECTED),
        .Dbg_Clk_13(NLW_U0_Dbg_Clk_13_UNCONNECTED),
        .Dbg_Clk_14(NLW_U0_Dbg_Clk_14_UNCONNECTED),
        .Dbg_Clk_15(NLW_U0_Dbg_Clk_15_UNCONNECTED),
        .Dbg_Clk_16(NLW_U0_Dbg_Clk_16_UNCONNECTED),
        .Dbg_Clk_17(NLW_U0_Dbg_Clk_17_UNCONNECTED),
        .Dbg_Clk_18(NLW_U0_Dbg_Clk_18_UNCONNECTED),
        .Dbg_Clk_19(NLW_U0_Dbg_Clk_19_UNCONNECTED),
        .Dbg_Clk_2(NLW_U0_Dbg_Clk_2_UNCONNECTED),
        .Dbg_Clk_20(NLW_U0_Dbg_Clk_20_UNCONNECTED),
        .Dbg_Clk_21(NLW_U0_Dbg_Clk_21_UNCONNECTED),
        .Dbg_Clk_22(NLW_U0_Dbg_Clk_22_UNCONNECTED),
        .Dbg_Clk_23(NLW_U0_Dbg_Clk_23_UNCONNECTED),
        .Dbg_Clk_24(NLW_U0_Dbg_Clk_24_UNCONNECTED),
        .Dbg_Clk_25(NLW_U0_Dbg_Clk_25_UNCONNECTED),
        .Dbg_Clk_26(NLW_U0_Dbg_Clk_26_UNCONNECTED),
        .Dbg_Clk_27(NLW_U0_Dbg_Clk_27_UNCONNECTED),
        .Dbg_Clk_28(NLW_U0_Dbg_Clk_28_UNCONNECTED),
        .Dbg_Clk_29(NLW_U0_Dbg_Clk_29_UNCONNECTED),
        .Dbg_Clk_3(NLW_U0_Dbg_Clk_3_UNCONNECTED),
        .Dbg_Clk_30(NLW_U0_Dbg_Clk_30_UNCONNECTED),
        .Dbg_Clk_31(NLW_U0_Dbg_Clk_31_UNCONNECTED),
        .Dbg_Clk_4(NLW_U0_Dbg_Clk_4_UNCONNECTED),
        .Dbg_Clk_5(NLW_U0_Dbg_Clk_5_UNCONNECTED),
        .Dbg_Clk_6(NLW_U0_Dbg_Clk_6_UNCONNECTED),
        .Dbg_Clk_7(NLW_U0_Dbg_Clk_7_UNCONNECTED),
        .Dbg_Clk_8(NLW_U0_Dbg_Clk_8_UNCONNECTED),
        .Dbg_Clk_9(NLW_U0_Dbg_Clk_9_UNCONNECTED),
        .Dbg_Disable_0(Dbg_Disable_0),
        .Dbg_Disable_1(NLW_U0_Dbg_Disable_1_UNCONNECTED),
        .Dbg_Disable_10(NLW_U0_Dbg_Disable_10_UNCONNECTED),
        .Dbg_Disable_11(NLW_U0_Dbg_Disable_11_UNCONNECTED),
        .Dbg_Disable_12(NLW_U0_Dbg_Disable_12_UNCONNECTED),
        .Dbg_Disable_13(NLW_U0_Dbg_Disable_13_UNCONNECTED),
        .Dbg_Disable_14(NLW_U0_Dbg_Disable_14_UNCONNECTED),
        .Dbg_Disable_15(NLW_U0_Dbg_Disable_15_UNCONNECTED),
        .Dbg_Disable_16(NLW_U0_Dbg_Disable_16_UNCONNECTED),
        .Dbg_Disable_17(NLW_U0_Dbg_Disable_17_UNCONNECTED),
        .Dbg_Disable_18(NLW_U0_Dbg_Disable_18_UNCONNECTED),
        .Dbg_Disable_19(NLW_U0_Dbg_Disable_19_UNCONNECTED),
        .Dbg_Disable_2(NLW_U0_Dbg_Disable_2_UNCONNECTED),
        .Dbg_Disable_20(NLW_U0_Dbg_Disable_20_UNCONNECTED),
        .Dbg_Disable_21(NLW_U0_Dbg_Disable_21_UNCONNECTED),
        .Dbg_Disable_22(NLW_U0_Dbg_Disable_22_UNCONNECTED),
        .Dbg_Disable_23(NLW_U0_Dbg_Disable_23_UNCONNECTED),
        .Dbg_Disable_24(NLW_U0_Dbg_Disable_24_UNCONNECTED),
        .Dbg_Disable_25(NLW_U0_Dbg_Disable_25_UNCONNECTED),
        .Dbg_Disable_26(NLW_U0_Dbg_Disable_26_UNCONNECTED),
        .Dbg_Disable_27(NLW_U0_Dbg_Disable_27_UNCONNECTED),
        .Dbg_Disable_28(NLW_U0_Dbg_Disable_28_UNCONNECTED),
        .Dbg_Disable_29(NLW_U0_Dbg_Disable_29_UNCONNECTED),
        .Dbg_Disable_3(NLW_U0_Dbg_Disable_3_UNCONNECTED),
        .Dbg_Disable_30(NLW_U0_Dbg_Disable_30_UNCONNECTED),
        .Dbg_Disable_31(NLW_U0_Dbg_Disable_31_UNCONNECTED),
        .Dbg_Disable_4(NLW_U0_Dbg_Disable_4_UNCONNECTED),
        .Dbg_Disable_5(NLW_U0_Dbg_Disable_5_UNCONNECTED),
        .Dbg_Disable_6(NLW_U0_Dbg_Disable_6_UNCONNECTED),
        .Dbg_Disable_7(NLW_U0_Dbg_Disable_7_UNCONNECTED),
        .Dbg_Disable_8(NLW_U0_Dbg_Disable_8_UNCONNECTED),
        .Dbg_Disable_9(NLW_U0_Dbg_Disable_9_UNCONNECTED),
        .Dbg_RDATA_0({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_RDATA_1({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_RDATA_10({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_RDATA_11({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_RDATA_12({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_RDATA_13({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_RDATA_14({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_RDATA_15({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_RDATA_16({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_RDATA_17({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_RDATA_18({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_RDATA_19({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_RDATA_2({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_RDATA_20({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_RDATA_21({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_RDATA_22({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_RDATA_23({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_RDATA_24({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_RDATA_25({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_RDATA_26({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_RDATA_27({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_RDATA_28({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_RDATA_29({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_RDATA_3({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_RDATA_30({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_RDATA_31({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_RDATA_4({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_RDATA_5({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_RDATA_6({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_RDATA_7({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_RDATA_8({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_RDATA_9({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_RREADY_0(NLW_U0_Dbg_RREADY_0_UNCONNECTED),
        .Dbg_RREADY_1(NLW_U0_Dbg_RREADY_1_UNCONNECTED),
        .Dbg_RREADY_10(NLW_U0_Dbg_RREADY_10_UNCONNECTED),
        .Dbg_RREADY_11(NLW_U0_Dbg_RREADY_11_UNCONNECTED),
        .Dbg_RREADY_12(NLW_U0_Dbg_RREADY_12_UNCONNECTED),
        .Dbg_RREADY_13(NLW_U0_Dbg_RREADY_13_UNCONNECTED),
        .Dbg_RREADY_14(NLW_U0_Dbg_RREADY_14_UNCONNECTED),
        .Dbg_RREADY_15(NLW_U0_Dbg_RREADY_15_UNCONNECTED),
        .Dbg_RREADY_16(NLW_U0_Dbg_RREADY_16_UNCONNECTED),
        .Dbg_RREADY_17(NLW_U0_Dbg_RREADY_17_UNCONNECTED),
        .Dbg_RREADY_18(NLW_U0_Dbg_RREADY_18_UNCONNECTED),
        .Dbg_RREADY_19(NLW_U0_Dbg_RREADY_19_UNCONNECTED),
        .Dbg_RREADY_2(NLW_U0_Dbg_RREADY_2_UNCONNECTED),
        .Dbg_RREADY_20(NLW_U0_Dbg_RREADY_20_UNCONNECTED),
        .Dbg_RREADY_21(NLW_U0_Dbg_RREADY_21_UNCONNECTED),
        .Dbg_RREADY_22(NLW_U0_Dbg_RREADY_22_UNCONNECTED),
        .Dbg_RREADY_23(NLW_U0_Dbg_RREADY_23_UNCONNECTED),
        .Dbg_RREADY_24(NLW_U0_Dbg_RREADY_24_UNCONNECTED),
        .Dbg_RREADY_25(NLW_U0_Dbg_RREADY_25_UNCONNECTED),
        .Dbg_RREADY_26(NLW_U0_Dbg_RREADY_26_UNCONNECTED),
        .Dbg_RREADY_27(NLW_U0_Dbg_RREADY_27_UNCONNECTED),
        .Dbg_RREADY_28(NLW_U0_Dbg_RREADY_28_UNCONNECTED),
        .Dbg_RREADY_29(NLW_U0_Dbg_RREADY_29_UNCONNECTED),
        .Dbg_RREADY_3(NLW_U0_Dbg_RREADY_3_UNCONNECTED),
        .Dbg_RREADY_30(NLW_U0_Dbg_RREADY_30_UNCONNECTED),
        .Dbg_RREADY_31(NLW_U0_Dbg_RREADY_31_UNCONNECTED),
        .Dbg_RREADY_4(NLW_U0_Dbg_RREADY_4_UNCONNECTED),
        .Dbg_RREADY_5(NLW_U0_Dbg_RREADY_5_UNCONNECTED),
        .Dbg_RREADY_6(NLW_U0_Dbg_RREADY_6_UNCONNECTED),
        .Dbg_RREADY_7(NLW_U0_Dbg_RREADY_7_UNCONNECTED),
        .Dbg_RREADY_8(NLW_U0_Dbg_RREADY_8_UNCONNECTED),
        .Dbg_RREADY_9(NLW_U0_Dbg_RREADY_9_UNCONNECTED),
        .Dbg_RRESP_0({1'b0,1'b0}),
        .Dbg_RRESP_1({1'b0,1'b0}),
        .Dbg_RRESP_10({1'b0,1'b0}),
        .Dbg_RRESP_11({1'b0,1'b0}),
        .Dbg_RRESP_12({1'b0,1'b0}),
        .Dbg_RRESP_13({1'b0,1'b0}),
        .Dbg_RRESP_14({1'b0,1'b0}),
        .Dbg_RRESP_15({1'b0,1'b0}),
        .Dbg_RRESP_16({1'b0,1'b0}),
        .Dbg_RRESP_17({1'b0,1'b0}),
        .Dbg_RRESP_18({1'b0,1'b0}),
        .Dbg_RRESP_19({1'b0,1'b0}),
        .Dbg_RRESP_2({1'b0,1'b0}),
        .Dbg_RRESP_20({1'b0,1'b0}),
        .Dbg_RRESP_21({1'b0,1'b0}),
        .Dbg_RRESP_22({1'b0,1'b0}),
        .Dbg_RRESP_23({1'b0,1'b0}),
        .Dbg_RRESP_24({1'b0,1'b0}),
        .Dbg_RRESP_25({1'b0,1'b0}),
        .Dbg_RRESP_26({1'b0,1'b0}),
        .Dbg_RRESP_27({1'b0,1'b0}),
        .Dbg_RRESP_28({1'b0,1'b0}),
        .Dbg_RRESP_29({1'b0,1'b0}),
        .Dbg_RRESP_3({1'b0,1'b0}),
        .Dbg_RRESP_30({1'b0,1'b0}),
        .Dbg_RRESP_31({1'b0,1'b0}),
        .Dbg_RRESP_4({1'b0,1'b0}),
        .Dbg_RRESP_5({1'b0,1'b0}),
        .Dbg_RRESP_6({1'b0,1'b0}),
        .Dbg_RRESP_7({1'b0,1'b0}),
        .Dbg_RRESP_8({1'b0,1'b0}),
        .Dbg_RRESP_9({1'b0,1'b0}),
        .Dbg_RVALID_0(1'b0),
        .Dbg_RVALID_1(1'b0),
        .Dbg_RVALID_10(1'b0),
        .Dbg_RVALID_11(1'b0),
        .Dbg_RVALID_12(1'b0),
        .Dbg_RVALID_13(1'b0),
        .Dbg_RVALID_14(1'b0),
        .Dbg_RVALID_15(1'b0),
        .Dbg_RVALID_16(1'b0),
        .Dbg_RVALID_17(1'b0),
        .Dbg_RVALID_18(1'b0),
        .Dbg_RVALID_19(1'b0),
        .Dbg_RVALID_2(1'b0),
        .Dbg_RVALID_20(1'b0),
        .Dbg_RVALID_21(1'b0),
        .Dbg_RVALID_22(1'b0),
        .Dbg_RVALID_23(1'b0),
        .Dbg_RVALID_24(1'b0),
        .Dbg_RVALID_25(1'b0),
        .Dbg_RVALID_26(1'b0),
        .Dbg_RVALID_27(1'b0),
        .Dbg_RVALID_28(1'b0),
        .Dbg_RVALID_29(1'b0),
        .Dbg_RVALID_3(1'b0),
        .Dbg_RVALID_30(1'b0),
        .Dbg_RVALID_31(1'b0),
        .Dbg_RVALID_4(1'b0),
        .Dbg_RVALID_5(1'b0),
        .Dbg_RVALID_6(1'b0),
        .Dbg_RVALID_7(1'b0),
        .Dbg_RVALID_8(1'b0),
        .Dbg_RVALID_9(1'b0),
        .Dbg_Reg_En_0(Dbg_Reg_En_0),
        .Dbg_Reg_En_1(NLW_U0_Dbg_Reg_En_1_UNCONNECTED[0:7]),
        .Dbg_Reg_En_10(NLW_U0_Dbg_Reg_En_10_UNCONNECTED[0:7]),
        .Dbg_Reg_En_11(NLW_U0_Dbg_Reg_En_11_UNCONNECTED[0:7]),
        .Dbg_Reg_En_12(NLW_U0_Dbg_Reg_En_12_UNCONNECTED[0:7]),
        .Dbg_Reg_En_13(NLW_U0_Dbg_Reg_En_13_UNCONNECTED[0:7]),
        .Dbg_Reg_En_14(NLW_U0_Dbg_Reg_En_14_UNCONNECTED[0:7]),
        .Dbg_Reg_En_15(NLW_U0_Dbg_Reg_En_15_UNCONNECTED[0:7]),
        .Dbg_Reg_En_16(NLW_U0_Dbg_Reg_En_16_UNCONNECTED[0:7]),
        .Dbg_Reg_En_17(NLW_U0_Dbg_Reg_En_17_UNCONNECTED[0:7]),
        .Dbg_Reg_En_18(NLW_U0_Dbg_Reg_En_18_UNCONNECTED[0:7]),
        .Dbg_Reg_En_19(NLW_U0_Dbg_Reg_En_19_UNCONNECTED[0:7]),
        .Dbg_Reg_En_2(NLW_U0_Dbg_Reg_En_2_UNCONNECTED[0:7]),
        .Dbg_Reg_En_20(NLW_U0_Dbg_Reg_En_20_UNCONNECTED[0:7]),
        .Dbg_Reg_En_21(NLW_U0_Dbg_Reg_En_21_UNCONNECTED[0:7]),
        .Dbg_Reg_En_22(NLW_U0_Dbg_Reg_En_22_UNCONNECTED[0:7]),
        .Dbg_Reg_En_23(NLW_U0_Dbg_Reg_En_23_UNCONNECTED[0:7]),
        .Dbg_Reg_En_24(NLW_U0_Dbg_Reg_En_24_UNCONNECTED[0:7]),
        .Dbg_Reg_En_25(NLW_U0_Dbg_Reg_En_25_UNCONNECTED[0:7]),
        .Dbg_Reg_En_26(NLW_U0_Dbg_Reg_En_26_UNCONNECTED[0:7]),
        .Dbg_Reg_En_27(NLW_U0_Dbg_Reg_En_27_UNCONNECTED[0:7]),
        .Dbg_Reg_En_28(NLW_U0_Dbg_Reg_En_28_UNCONNECTED[0:7]),
        .Dbg_Reg_En_29(NLW_U0_Dbg_Reg_En_29_UNCONNECTED[0:7]),
        .Dbg_Reg_En_3(NLW_U0_Dbg_Reg_En_3_UNCONNECTED[0:7]),
        .Dbg_Reg_En_30(NLW_U0_Dbg_Reg_En_30_UNCONNECTED[0:7]),
        .Dbg_Reg_En_31(NLW_U0_Dbg_Reg_En_31_UNCONNECTED[0:7]),
        .Dbg_Reg_En_4(NLW_U0_Dbg_Reg_En_4_UNCONNECTED[0:7]),
        .Dbg_Reg_En_5(NLW_U0_Dbg_Reg_En_5_UNCONNECTED[0:7]),
        .Dbg_Reg_En_6(NLW_U0_Dbg_Reg_En_6_UNCONNECTED[0:7]),
        .Dbg_Reg_En_7(NLW_U0_Dbg_Reg_En_7_UNCONNECTED[0:7]),
        .Dbg_Reg_En_8(NLW_U0_Dbg_Reg_En_8_UNCONNECTED[0:7]),
        .Dbg_Reg_En_9(NLW_U0_Dbg_Reg_En_9_UNCONNECTED[0:7]),
        .Dbg_Rst_0(Dbg_Rst_0),
        .Dbg_Rst_1(NLW_U0_Dbg_Rst_1_UNCONNECTED),
        .Dbg_Rst_10(NLW_U0_Dbg_Rst_10_UNCONNECTED),
        .Dbg_Rst_11(NLW_U0_Dbg_Rst_11_UNCONNECTED),
        .Dbg_Rst_12(NLW_U0_Dbg_Rst_12_UNCONNECTED),
        .Dbg_Rst_13(NLW_U0_Dbg_Rst_13_UNCONNECTED),
        .Dbg_Rst_14(NLW_U0_Dbg_Rst_14_UNCONNECTED),
        .Dbg_Rst_15(NLW_U0_Dbg_Rst_15_UNCONNECTED),
        .Dbg_Rst_16(NLW_U0_Dbg_Rst_16_UNCONNECTED),
        .Dbg_Rst_17(NLW_U0_Dbg_Rst_17_UNCONNECTED),
        .Dbg_Rst_18(NLW_U0_Dbg_Rst_18_UNCONNECTED),
        .Dbg_Rst_19(NLW_U0_Dbg_Rst_19_UNCONNECTED),
        .Dbg_Rst_2(NLW_U0_Dbg_Rst_2_UNCONNECTED),
        .Dbg_Rst_20(NLW_U0_Dbg_Rst_20_UNCONNECTED),
        .Dbg_Rst_21(NLW_U0_Dbg_Rst_21_UNCONNECTED),
        .Dbg_Rst_22(NLW_U0_Dbg_Rst_22_UNCONNECTED),
        .Dbg_Rst_23(NLW_U0_Dbg_Rst_23_UNCONNECTED),
        .Dbg_Rst_24(NLW_U0_Dbg_Rst_24_UNCONNECTED),
        .Dbg_Rst_25(NLW_U0_Dbg_Rst_25_UNCONNECTED),
        .Dbg_Rst_26(NLW_U0_Dbg_Rst_26_UNCONNECTED),
        .Dbg_Rst_27(NLW_U0_Dbg_Rst_27_UNCONNECTED),
        .Dbg_Rst_28(NLW_U0_Dbg_Rst_28_UNCONNECTED),
        .Dbg_Rst_29(NLW_U0_Dbg_Rst_29_UNCONNECTED),
        .Dbg_Rst_3(NLW_U0_Dbg_Rst_3_UNCONNECTED),
        .Dbg_Rst_30(NLW_U0_Dbg_Rst_30_UNCONNECTED),
        .Dbg_Rst_31(NLW_U0_Dbg_Rst_31_UNCONNECTED),
        .Dbg_Rst_4(NLW_U0_Dbg_Rst_4_UNCONNECTED),
        .Dbg_Rst_5(NLW_U0_Dbg_Rst_5_UNCONNECTED),
        .Dbg_Rst_6(NLW_U0_Dbg_Rst_6_UNCONNECTED),
        .Dbg_Rst_7(NLW_U0_Dbg_Rst_7_UNCONNECTED),
        .Dbg_Rst_8(NLW_U0_Dbg_Rst_8_UNCONNECTED),
        .Dbg_Rst_9(NLW_U0_Dbg_Rst_9_UNCONNECTED),
        .Dbg_Shift_0(Dbg_Shift_0),
        .Dbg_Shift_1(NLW_U0_Dbg_Shift_1_UNCONNECTED),
        .Dbg_Shift_10(NLW_U0_Dbg_Shift_10_UNCONNECTED),
        .Dbg_Shift_11(NLW_U0_Dbg_Shift_11_UNCONNECTED),
        .Dbg_Shift_12(NLW_U0_Dbg_Shift_12_UNCONNECTED),
        .Dbg_Shift_13(NLW_U0_Dbg_Shift_13_UNCONNECTED),
        .Dbg_Shift_14(NLW_U0_Dbg_Shift_14_UNCONNECTED),
        .Dbg_Shift_15(NLW_U0_Dbg_Shift_15_UNCONNECTED),
        .Dbg_Shift_16(NLW_U0_Dbg_Shift_16_UNCONNECTED),
        .Dbg_Shift_17(NLW_U0_Dbg_Shift_17_UNCONNECTED),
        .Dbg_Shift_18(NLW_U0_Dbg_Shift_18_UNCONNECTED),
        .Dbg_Shift_19(NLW_U0_Dbg_Shift_19_UNCONNECTED),
        .Dbg_Shift_2(NLW_U0_Dbg_Shift_2_UNCONNECTED),
        .Dbg_Shift_20(NLW_U0_Dbg_Shift_20_UNCONNECTED),
        .Dbg_Shift_21(NLW_U0_Dbg_Shift_21_UNCONNECTED),
        .Dbg_Shift_22(NLW_U0_Dbg_Shift_22_UNCONNECTED),
        .Dbg_Shift_23(NLW_U0_Dbg_Shift_23_UNCONNECTED),
        .Dbg_Shift_24(NLW_U0_Dbg_Shift_24_UNCONNECTED),
        .Dbg_Shift_25(NLW_U0_Dbg_Shift_25_UNCONNECTED),
        .Dbg_Shift_26(NLW_U0_Dbg_Shift_26_UNCONNECTED),
        .Dbg_Shift_27(NLW_U0_Dbg_Shift_27_UNCONNECTED),
        .Dbg_Shift_28(NLW_U0_Dbg_Shift_28_UNCONNECTED),
        .Dbg_Shift_29(NLW_U0_Dbg_Shift_29_UNCONNECTED),
        .Dbg_Shift_3(NLW_U0_Dbg_Shift_3_UNCONNECTED),
        .Dbg_Shift_30(NLW_U0_Dbg_Shift_30_UNCONNECTED),
        .Dbg_Shift_31(NLW_U0_Dbg_Shift_31_UNCONNECTED),
        .Dbg_Shift_4(NLW_U0_Dbg_Shift_4_UNCONNECTED),
        .Dbg_Shift_5(NLW_U0_Dbg_Shift_5_UNCONNECTED),
        .Dbg_Shift_6(NLW_U0_Dbg_Shift_6_UNCONNECTED),
        .Dbg_Shift_7(NLW_U0_Dbg_Shift_7_UNCONNECTED),
        .Dbg_Shift_8(NLW_U0_Dbg_Shift_8_UNCONNECTED),
        .Dbg_Shift_9(NLW_U0_Dbg_Shift_9_UNCONNECTED),
        .Dbg_TDI_0(Dbg_TDI_0),
        .Dbg_TDI_1(NLW_U0_Dbg_TDI_1_UNCONNECTED),
        .Dbg_TDI_10(NLW_U0_Dbg_TDI_10_UNCONNECTED),
        .Dbg_TDI_11(NLW_U0_Dbg_TDI_11_UNCONNECTED),
        .Dbg_TDI_12(NLW_U0_Dbg_TDI_12_UNCONNECTED),
        .Dbg_TDI_13(NLW_U0_Dbg_TDI_13_UNCONNECTED),
        .Dbg_TDI_14(NLW_U0_Dbg_TDI_14_UNCONNECTED),
        .Dbg_TDI_15(NLW_U0_Dbg_TDI_15_UNCONNECTED),
        .Dbg_TDI_16(NLW_U0_Dbg_TDI_16_UNCONNECTED),
        .Dbg_TDI_17(NLW_U0_Dbg_TDI_17_UNCONNECTED),
        .Dbg_TDI_18(NLW_U0_Dbg_TDI_18_UNCONNECTED),
        .Dbg_TDI_19(NLW_U0_Dbg_TDI_19_UNCONNECTED),
        .Dbg_TDI_2(NLW_U0_Dbg_TDI_2_UNCONNECTED),
        .Dbg_TDI_20(NLW_U0_Dbg_TDI_20_UNCONNECTED),
        .Dbg_TDI_21(NLW_U0_Dbg_TDI_21_UNCONNECTED),
        .Dbg_TDI_22(NLW_U0_Dbg_TDI_22_UNCONNECTED),
        .Dbg_TDI_23(NLW_U0_Dbg_TDI_23_UNCONNECTED),
        .Dbg_TDI_24(NLW_U0_Dbg_TDI_24_UNCONNECTED),
        .Dbg_TDI_25(NLW_U0_Dbg_TDI_25_UNCONNECTED),
        .Dbg_TDI_26(NLW_U0_Dbg_TDI_26_UNCONNECTED),
        .Dbg_TDI_27(NLW_U0_Dbg_TDI_27_UNCONNECTED),
        .Dbg_TDI_28(NLW_U0_Dbg_TDI_28_UNCONNECTED),
        .Dbg_TDI_29(NLW_U0_Dbg_TDI_29_UNCONNECTED),
        .Dbg_TDI_3(NLW_U0_Dbg_TDI_3_UNCONNECTED),
        .Dbg_TDI_30(NLW_U0_Dbg_TDI_30_UNCONNECTED),
        .Dbg_TDI_31(NLW_U0_Dbg_TDI_31_UNCONNECTED),
        .Dbg_TDI_4(NLW_U0_Dbg_TDI_4_UNCONNECTED),
        .Dbg_TDI_5(NLW_U0_Dbg_TDI_5_UNCONNECTED),
        .Dbg_TDI_6(NLW_U0_Dbg_TDI_6_UNCONNECTED),
        .Dbg_TDI_7(NLW_U0_Dbg_TDI_7_UNCONNECTED),
        .Dbg_TDI_8(NLW_U0_Dbg_TDI_8_UNCONNECTED),
        .Dbg_TDI_9(NLW_U0_Dbg_TDI_9_UNCONNECTED),
        .Dbg_TDO_0(Dbg_TDO_0),
        .Dbg_TDO_1(1'b0),
        .Dbg_TDO_10(1'b0),
        .Dbg_TDO_11(1'b0),
        .Dbg_TDO_12(1'b0),
        .Dbg_TDO_13(1'b0),
        .Dbg_TDO_14(1'b0),
        .Dbg_TDO_15(1'b0),
        .Dbg_TDO_16(1'b0),
        .Dbg_TDO_17(1'b0),
        .Dbg_TDO_18(1'b0),
        .Dbg_TDO_19(1'b0),
        .Dbg_TDO_2(1'b0),
        .Dbg_TDO_20(1'b0),
        .Dbg_TDO_21(1'b0),
        .Dbg_TDO_22(1'b0),
        .Dbg_TDO_23(1'b0),
        .Dbg_TDO_24(1'b0),
        .Dbg_TDO_25(1'b0),
        .Dbg_TDO_26(1'b0),
        .Dbg_TDO_27(1'b0),
        .Dbg_TDO_28(1'b0),
        .Dbg_TDO_29(1'b0),
        .Dbg_TDO_3(1'b0),
        .Dbg_TDO_30(1'b0),
        .Dbg_TDO_31(1'b0),
        .Dbg_TDO_4(1'b0),
        .Dbg_TDO_5(1'b0),
        .Dbg_TDO_6(1'b0),
        .Dbg_TDO_7(1'b0),
        .Dbg_TDO_8(1'b0),
        .Dbg_TDO_9(1'b0),
        .Dbg_TrClk_0(NLW_U0_Dbg_TrClk_0_UNCONNECTED),
        .Dbg_TrClk_1(NLW_U0_Dbg_TrClk_1_UNCONNECTED),
        .Dbg_TrClk_10(NLW_U0_Dbg_TrClk_10_UNCONNECTED),
        .Dbg_TrClk_11(NLW_U0_Dbg_TrClk_11_UNCONNECTED),
        .Dbg_TrClk_12(NLW_U0_Dbg_TrClk_12_UNCONNECTED),
        .Dbg_TrClk_13(NLW_U0_Dbg_TrClk_13_UNCONNECTED),
        .Dbg_TrClk_14(NLW_U0_Dbg_TrClk_14_UNCONNECTED),
        .Dbg_TrClk_15(NLW_U0_Dbg_TrClk_15_UNCONNECTED),
        .Dbg_TrClk_16(NLW_U0_Dbg_TrClk_16_UNCONNECTED),
        .Dbg_TrClk_17(NLW_U0_Dbg_TrClk_17_UNCONNECTED),
        .Dbg_TrClk_18(NLW_U0_Dbg_TrClk_18_UNCONNECTED),
        .Dbg_TrClk_19(NLW_U0_Dbg_TrClk_19_UNCONNECTED),
        .Dbg_TrClk_2(NLW_U0_Dbg_TrClk_2_UNCONNECTED),
        .Dbg_TrClk_20(NLW_U0_Dbg_TrClk_20_UNCONNECTED),
        .Dbg_TrClk_21(NLW_U0_Dbg_TrClk_21_UNCONNECTED),
        .Dbg_TrClk_22(NLW_U0_Dbg_TrClk_22_UNCONNECTED),
        .Dbg_TrClk_23(NLW_U0_Dbg_TrClk_23_UNCONNECTED),
        .Dbg_TrClk_24(NLW_U0_Dbg_TrClk_24_UNCONNECTED),
        .Dbg_TrClk_25(NLW_U0_Dbg_TrClk_25_UNCONNECTED),
        .Dbg_TrClk_26(NLW_U0_Dbg_TrClk_26_UNCONNECTED),
        .Dbg_TrClk_27(NLW_U0_Dbg_TrClk_27_UNCONNECTED),
        .Dbg_TrClk_28(NLW_U0_Dbg_TrClk_28_UNCONNECTED),
        .Dbg_TrClk_29(NLW_U0_Dbg_TrClk_29_UNCONNECTED),
        .Dbg_TrClk_3(NLW_U0_Dbg_TrClk_3_UNCONNECTED),
        .Dbg_TrClk_30(NLW_U0_Dbg_TrClk_30_UNCONNECTED),
        .Dbg_TrClk_31(NLW_U0_Dbg_TrClk_31_UNCONNECTED),
        .Dbg_TrClk_4(NLW_U0_Dbg_TrClk_4_UNCONNECTED),
        .Dbg_TrClk_5(NLW_U0_Dbg_TrClk_5_UNCONNECTED),
        .Dbg_TrClk_6(NLW_U0_Dbg_TrClk_6_UNCONNECTED),
        .Dbg_TrClk_7(NLW_U0_Dbg_TrClk_7_UNCONNECTED),
        .Dbg_TrClk_8(NLW_U0_Dbg_TrClk_8_UNCONNECTED),
        .Dbg_TrClk_9(NLW_U0_Dbg_TrClk_9_UNCONNECTED),
        .Dbg_TrData_0({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_TrData_1({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_TrData_10({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_TrData_11({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_TrData_12({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_TrData_13({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_TrData_14({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_TrData_15({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_TrData_16({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_TrData_17({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_TrData_18({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_TrData_19({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_TrData_2({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_TrData_20({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_TrData_21({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_TrData_22({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_TrData_23({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_TrData_24({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_TrData_25({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_TrData_26({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_TrData_27({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_TrData_28({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_TrData_29({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_TrData_3({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_TrData_30({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_TrData_31({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_TrData_4({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_TrData_5({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_TrData_6({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_TrData_7({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_TrData_8({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_TrData_9({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_TrReady_0(NLW_U0_Dbg_TrReady_0_UNCONNECTED),
        .Dbg_TrReady_1(NLW_U0_Dbg_TrReady_1_UNCONNECTED),
        .Dbg_TrReady_10(NLW_U0_Dbg_TrReady_10_UNCONNECTED),
        .Dbg_TrReady_11(NLW_U0_Dbg_TrReady_11_UNCONNECTED),
        .Dbg_TrReady_12(NLW_U0_Dbg_TrReady_12_UNCONNECTED),
        .Dbg_TrReady_13(NLW_U0_Dbg_TrReady_13_UNCONNECTED),
        .Dbg_TrReady_14(NLW_U0_Dbg_TrReady_14_UNCONNECTED),
        .Dbg_TrReady_15(NLW_U0_Dbg_TrReady_15_UNCONNECTED),
        .Dbg_TrReady_16(NLW_U0_Dbg_TrReady_16_UNCONNECTED),
        .Dbg_TrReady_17(NLW_U0_Dbg_TrReady_17_UNCONNECTED),
        .Dbg_TrReady_18(NLW_U0_Dbg_TrReady_18_UNCONNECTED),
        .Dbg_TrReady_19(NLW_U0_Dbg_TrReady_19_UNCONNECTED),
        .Dbg_TrReady_2(NLW_U0_Dbg_TrReady_2_UNCONNECTED),
        .Dbg_TrReady_20(NLW_U0_Dbg_TrReady_20_UNCONNECTED),
        .Dbg_TrReady_21(NLW_U0_Dbg_TrReady_21_UNCONNECTED),
        .Dbg_TrReady_22(NLW_U0_Dbg_TrReady_22_UNCONNECTED),
        .Dbg_TrReady_23(NLW_U0_Dbg_TrReady_23_UNCONNECTED),
        .Dbg_TrReady_24(NLW_U0_Dbg_TrReady_24_UNCONNECTED),
        .Dbg_TrReady_25(NLW_U0_Dbg_TrReady_25_UNCONNECTED),
        .Dbg_TrReady_26(NLW_U0_Dbg_TrReady_26_UNCONNECTED),
        .Dbg_TrReady_27(NLW_U0_Dbg_TrReady_27_UNCONNECTED),
        .Dbg_TrReady_28(NLW_U0_Dbg_TrReady_28_UNCONNECTED),
        .Dbg_TrReady_29(NLW_U0_Dbg_TrReady_29_UNCONNECTED),
        .Dbg_TrReady_3(NLW_U0_Dbg_TrReady_3_UNCONNECTED),
        .Dbg_TrReady_30(NLW_U0_Dbg_TrReady_30_UNCONNECTED),
        .Dbg_TrReady_31(NLW_U0_Dbg_TrReady_31_UNCONNECTED),
        .Dbg_TrReady_4(NLW_U0_Dbg_TrReady_4_UNCONNECTED),
        .Dbg_TrReady_5(NLW_U0_Dbg_TrReady_5_UNCONNECTED),
        .Dbg_TrReady_6(NLW_U0_Dbg_TrReady_6_UNCONNECTED),
        .Dbg_TrReady_7(NLW_U0_Dbg_TrReady_7_UNCONNECTED),
        .Dbg_TrReady_8(NLW_U0_Dbg_TrReady_8_UNCONNECTED),
        .Dbg_TrReady_9(NLW_U0_Dbg_TrReady_9_UNCONNECTED),
        .Dbg_TrValid_0(1'b0),
        .Dbg_TrValid_1(1'b0),
        .Dbg_TrValid_10(1'b0),
        .Dbg_TrValid_11(1'b0),
        .Dbg_TrValid_12(1'b0),
        .Dbg_TrValid_13(1'b0),
        .Dbg_TrValid_14(1'b0),
        .Dbg_TrValid_15(1'b0),
        .Dbg_TrValid_16(1'b0),
        .Dbg_TrValid_17(1'b0),
        .Dbg_TrValid_18(1'b0),
        .Dbg_TrValid_19(1'b0),
        .Dbg_TrValid_2(1'b0),
        .Dbg_TrValid_20(1'b0),
        .Dbg_TrValid_21(1'b0),
        .Dbg_TrValid_22(1'b0),
        .Dbg_TrValid_23(1'b0),
        .Dbg_TrValid_24(1'b0),
        .Dbg_TrValid_25(1'b0),
        .Dbg_TrValid_26(1'b0),
        .Dbg_TrValid_27(1'b0),
        .Dbg_TrValid_28(1'b0),
        .Dbg_TrValid_29(1'b0),
        .Dbg_TrValid_3(1'b0),
        .Dbg_TrValid_30(1'b0),
        .Dbg_TrValid_31(1'b0),
        .Dbg_TrValid_4(1'b0),
        .Dbg_TrValid_5(1'b0),
        .Dbg_TrValid_6(1'b0),
        .Dbg_TrValid_7(1'b0),
        .Dbg_TrValid_8(1'b0),
        .Dbg_TrValid_9(1'b0),
        .Dbg_Trig_Ack_In_0(NLW_U0_Dbg_Trig_Ack_In_0_UNCONNECTED[0:7]),
        .Dbg_Trig_Ack_In_1(NLW_U0_Dbg_Trig_Ack_In_1_UNCONNECTED[0:7]),
        .Dbg_Trig_Ack_In_10(NLW_U0_Dbg_Trig_Ack_In_10_UNCONNECTED[0:7]),
        .Dbg_Trig_Ack_In_11(NLW_U0_Dbg_Trig_Ack_In_11_UNCONNECTED[0:7]),
        .Dbg_Trig_Ack_In_12(NLW_U0_Dbg_Trig_Ack_In_12_UNCONNECTED[0:7]),
        .Dbg_Trig_Ack_In_13(NLW_U0_Dbg_Trig_Ack_In_13_UNCONNECTED[0:7]),
        .Dbg_Trig_Ack_In_14(NLW_U0_Dbg_Trig_Ack_In_14_UNCONNECTED[0:7]),
        .Dbg_Trig_Ack_In_15(NLW_U0_Dbg_Trig_Ack_In_15_UNCONNECTED[0:7]),
        .Dbg_Trig_Ack_In_16(NLW_U0_Dbg_Trig_Ack_In_16_UNCONNECTED[0:7]),
        .Dbg_Trig_Ack_In_17(NLW_U0_Dbg_Trig_Ack_In_17_UNCONNECTED[0:7]),
        .Dbg_Trig_Ack_In_18(NLW_U0_Dbg_Trig_Ack_In_18_UNCONNECTED[0:7]),
        .Dbg_Trig_Ack_In_19(NLW_U0_Dbg_Trig_Ack_In_19_UNCONNECTED[0:7]),
        .Dbg_Trig_Ack_In_2(NLW_U0_Dbg_Trig_Ack_In_2_UNCONNECTED[0:7]),
        .Dbg_Trig_Ack_In_20(NLW_U0_Dbg_Trig_Ack_In_20_UNCONNECTED[0:7]),
        .Dbg_Trig_Ack_In_21(NLW_U0_Dbg_Trig_Ack_In_21_UNCONNECTED[0:7]),
        .Dbg_Trig_Ack_In_22(NLW_U0_Dbg_Trig_Ack_In_22_UNCONNECTED[0:7]),
        .Dbg_Trig_Ack_In_23(NLW_U0_Dbg_Trig_Ack_In_23_UNCONNECTED[0:7]),
        .Dbg_Trig_Ack_In_24(NLW_U0_Dbg_Trig_Ack_In_24_UNCONNECTED[0:7]),
        .Dbg_Trig_Ack_In_25(NLW_U0_Dbg_Trig_Ack_In_25_UNCONNECTED[0:7]),
        .Dbg_Trig_Ack_In_26(NLW_U0_Dbg_Trig_Ack_In_26_UNCONNECTED[0:7]),
        .Dbg_Trig_Ack_In_27(NLW_U0_Dbg_Trig_Ack_In_27_UNCONNECTED[0:7]),
        .Dbg_Trig_Ack_In_28(NLW_U0_Dbg_Trig_Ack_In_28_UNCONNECTED[0:7]),
        .Dbg_Trig_Ack_In_29(NLW_U0_Dbg_Trig_Ack_In_29_UNCONNECTED[0:7]),
        .Dbg_Trig_Ack_In_3(NLW_U0_Dbg_Trig_Ack_In_3_UNCONNECTED[0:7]),
        .Dbg_Trig_Ack_In_30(NLW_U0_Dbg_Trig_Ack_In_30_UNCONNECTED[0:7]),
        .Dbg_Trig_Ack_In_31(NLW_U0_Dbg_Trig_Ack_In_31_UNCONNECTED[0:7]),
        .Dbg_Trig_Ack_In_4(NLW_U0_Dbg_Trig_Ack_In_4_UNCONNECTED[0:7]),
        .Dbg_Trig_Ack_In_5(NLW_U0_Dbg_Trig_Ack_In_5_UNCONNECTED[0:7]),
        .Dbg_Trig_Ack_In_6(NLW_U0_Dbg_Trig_Ack_In_6_UNCONNECTED[0:7]),
        .Dbg_Trig_Ack_In_7(NLW_U0_Dbg_Trig_Ack_In_7_UNCONNECTED[0:7]),
        .Dbg_Trig_Ack_In_8(NLW_U0_Dbg_Trig_Ack_In_8_UNCONNECTED[0:7]),
        .Dbg_Trig_Ack_In_9(NLW_U0_Dbg_Trig_Ack_In_9_UNCONNECTED[0:7]),
        .Dbg_Trig_Ack_Out_0({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_Trig_Ack_Out_1({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_Trig_Ack_Out_10({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_Trig_Ack_Out_11({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_Trig_Ack_Out_12({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_Trig_Ack_Out_13({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_Trig_Ack_Out_14({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_Trig_Ack_Out_15({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_Trig_Ack_Out_16({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_Trig_Ack_Out_17({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_Trig_Ack_Out_18({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_Trig_Ack_Out_19({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_Trig_Ack_Out_2({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_Trig_Ack_Out_20({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_Trig_Ack_Out_21({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_Trig_Ack_Out_22({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_Trig_Ack_Out_23({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_Trig_Ack_Out_24({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_Trig_Ack_Out_25({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_Trig_Ack_Out_26({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_Trig_Ack_Out_27({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_Trig_Ack_Out_28({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_Trig_Ack_Out_29({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_Trig_Ack_Out_3({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_Trig_Ack_Out_30({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_Trig_Ack_Out_31({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_Trig_Ack_Out_4({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_Trig_Ack_Out_5({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_Trig_Ack_Out_6({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_Trig_Ack_Out_7({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_Trig_Ack_Out_8({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_Trig_Ack_Out_9({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_Trig_In_0({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_Trig_In_1({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_Trig_In_10({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_Trig_In_11({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_Trig_In_12({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_Trig_In_13({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_Trig_In_14({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_Trig_In_15({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_Trig_In_16({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_Trig_In_17({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_Trig_In_18({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_Trig_In_19({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_Trig_In_2({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_Trig_In_20({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_Trig_In_21({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_Trig_In_22({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_Trig_In_23({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_Trig_In_24({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_Trig_In_25({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_Trig_In_26({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_Trig_In_27({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_Trig_In_28({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_Trig_In_29({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_Trig_In_3({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_Trig_In_30({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_Trig_In_31({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_Trig_In_4({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_Trig_In_5({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_Trig_In_6({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_Trig_In_7({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_Trig_In_8({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_Trig_In_9({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_Trig_Out_0(NLW_U0_Dbg_Trig_Out_0_UNCONNECTED[0:7]),
        .Dbg_Trig_Out_1(NLW_U0_Dbg_Trig_Out_1_UNCONNECTED[0:7]),
        .Dbg_Trig_Out_10(NLW_U0_Dbg_Trig_Out_10_UNCONNECTED[0:7]),
        .Dbg_Trig_Out_11(NLW_U0_Dbg_Trig_Out_11_UNCONNECTED[0:7]),
        .Dbg_Trig_Out_12(NLW_U0_Dbg_Trig_Out_12_UNCONNECTED[0:7]),
        .Dbg_Trig_Out_13(NLW_U0_Dbg_Trig_Out_13_UNCONNECTED[0:7]),
        .Dbg_Trig_Out_14(NLW_U0_Dbg_Trig_Out_14_UNCONNECTED[0:7]),
        .Dbg_Trig_Out_15(NLW_U0_Dbg_Trig_Out_15_UNCONNECTED[0:7]),
        .Dbg_Trig_Out_16(NLW_U0_Dbg_Trig_Out_16_UNCONNECTED[0:7]),
        .Dbg_Trig_Out_17(NLW_U0_Dbg_Trig_Out_17_UNCONNECTED[0:7]),
        .Dbg_Trig_Out_18(NLW_U0_Dbg_Trig_Out_18_UNCONNECTED[0:7]),
        .Dbg_Trig_Out_19(NLW_U0_Dbg_Trig_Out_19_UNCONNECTED[0:7]),
        .Dbg_Trig_Out_2(NLW_U0_Dbg_Trig_Out_2_UNCONNECTED[0:7]),
        .Dbg_Trig_Out_20(NLW_U0_Dbg_Trig_Out_20_UNCONNECTED[0:7]),
        .Dbg_Trig_Out_21(NLW_U0_Dbg_Trig_Out_21_UNCONNECTED[0:7]),
        .Dbg_Trig_Out_22(NLW_U0_Dbg_Trig_Out_22_UNCONNECTED[0:7]),
        .Dbg_Trig_Out_23(NLW_U0_Dbg_Trig_Out_23_UNCONNECTED[0:7]),
        .Dbg_Trig_Out_24(NLW_U0_Dbg_Trig_Out_24_UNCONNECTED[0:7]),
        .Dbg_Trig_Out_25(NLW_U0_Dbg_Trig_Out_25_UNCONNECTED[0:7]),
        .Dbg_Trig_Out_26(NLW_U0_Dbg_Trig_Out_26_UNCONNECTED[0:7]),
        .Dbg_Trig_Out_27(NLW_U0_Dbg_Trig_Out_27_UNCONNECTED[0:7]),
        .Dbg_Trig_Out_28(NLW_U0_Dbg_Trig_Out_28_UNCONNECTED[0:7]),
        .Dbg_Trig_Out_29(NLW_U0_Dbg_Trig_Out_29_UNCONNECTED[0:7]),
        .Dbg_Trig_Out_3(NLW_U0_Dbg_Trig_Out_3_UNCONNECTED[0:7]),
        .Dbg_Trig_Out_30(NLW_U0_Dbg_Trig_Out_30_UNCONNECTED[0:7]),
        .Dbg_Trig_Out_31(NLW_U0_Dbg_Trig_Out_31_UNCONNECTED[0:7]),
        .Dbg_Trig_Out_4(NLW_U0_Dbg_Trig_Out_4_UNCONNECTED[0:7]),
        .Dbg_Trig_Out_5(NLW_U0_Dbg_Trig_Out_5_UNCONNECTED[0:7]),
        .Dbg_Trig_Out_6(NLW_U0_Dbg_Trig_Out_6_UNCONNECTED[0:7]),
        .Dbg_Trig_Out_7(NLW_U0_Dbg_Trig_Out_7_UNCONNECTED[0:7]),
        .Dbg_Trig_Out_8(NLW_U0_Dbg_Trig_Out_8_UNCONNECTED[0:7]),
        .Dbg_Trig_Out_9(NLW_U0_Dbg_Trig_Out_9_UNCONNECTED[0:7]),
        .Dbg_Update_0(Dbg_Update_0),
        .Dbg_Update_1(NLW_U0_Dbg_Update_1_UNCONNECTED),
        .Dbg_Update_10(NLW_U0_Dbg_Update_10_UNCONNECTED),
        .Dbg_Update_11(NLW_U0_Dbg_Update_11_UNCONNECTED),
        .Dbg_Update_12(NLW_U0_Dbg_Update_12_UNCONNECTED),
        .Dbg_Update_13(NLW_U0_Dbg_Update_13_UNCONNECTED),
        .Dbg_Update_14(NLW_U0_Dbg_Update_14_UNCONNECTED),
        .Dbg_Update_15(NLW_U0_Dbg_Update_15_UNCONNECTED),
        .Dbg_Update_16(NLW_U0_Dbg_Update_16_UNCONNECTED),
        .Dbg_Update_17(NLW_U0_Dbg_Update_17_UNCONNECTED),
        .Dbg_Update_18(NLW_U0_Dbg_Update_18_UNCONNECTED),
        .Dbg_Update_19(NLW_U0_Dbg_Update_19_UNCONNECTED),
        .Dbg_Update_2(NLW_U0_Dbg_Update_2_UNCONNECTED),
        .Dbg_Update_20(NLW_U0_Dbg_Update_20_UNCONNECTED),
        .Dbg_Update_21(NLW_U0_Dbg_Update_21_UNCONNECTED),
        .Dbg_Update_22(NLW_U0_Dbg_Update_22_UNCONNECTED),
        .Dbg_Update_23(NLW_U0_Dbg_Update_23_UNCONNECTED),
        .Dbg_Update_24(NLW_U0_Dbg_Update_24_UNCONNECTED),
        .Dbg_Update_25(NLW_U0_Dbg_Update_25_UNCONNECTED),
        .Dbg_Update_26(NLW_U0_Dbg_Update_26_UNCONNECTED),
        .Dbg_Update_27(NLW_U0_Dbg_Update_27_UNCONNECTED),
        .Dbg_Update_28(NLW_U0_Dbg_Update_28_UNCONNECTED),
        .Dbg_Update_29(NLW_U0_Dbg_Update_29_UNCONNECTED),
        .Dbg_Update_3(NLW_U0_Dbg_Update_3_UNCONNECTED),
        .Dbg_Update_30(NLW_U0_Dbg_Update_30_UNCONNECTED),
        .Dbg_Update_31(NLW_U0_Dbg_Update_31_UNCONNECTED),
        .Dbg_Update_4(NLW_U0_Dbg_Update_4_UNCONNECTED),
        .Dbg_Update_5(NLW_U0_Dbg_Update_5_UNCONNECTED),
        .Dbg_Update_6(NLW_U0_Dbg_Update_6_UNCONNECTED),
        .Dbg_Update_7(NLW_U0_Dbg_Update_7_UNCONNECTED),
        .Dbg_Update_8(NLW_U0_Dbg_Update_8_UNCONNECTED),
        .Dbg_Update_9(NLW_U0_Dbg_Update_9_UNCONNECTED),
        .Dbg_WDATA_0(NLW_U0_Dbg_WDATA_0_UNCONNECTED[31:0]),
        .Dbg_WDATA_1(NLW_U0_Dbg_WDATA_1_UNCONNECTED[31:0]),
        .Dbg_WDATA_10(NLW_U0_Dbg_WDATA_10_UNCONNECTED[31:0]),
        .Dbg_WDATA_11(NLW_U0_Dbg_WDATA_11_UNCONNECTED[31:0]),
        .Dbg_WDATA_12(NLW_U0_Dbg_WDATA_12_UNCONNECTED[31:0]),
        .Dbg_WDATA_13(NLW_U0_Dbg_WDATA_13_UNCONNECTED[31:0]),
        .Dbg_WDATA_14(NLW_U0_Dbg_WDATA_14_UNCONNECTED[31:0]),
        .Dbg_WDATA_15(NLW_U0_Dbg_WDATA_15_UNCONNECTED[31:0]),
        .Dbg_WDATA_16(NLW_U0_Dbg_WDATA_16_UNCONNECTED[31:0]),
        .Dbg_WDATA_17(NLW_U0_Dbg_WDATA_17_UNCONNECTED[31:0]),
        .Dbg_WDATA_18(NLW_U0_Dbg_WDATA_18_UNCONNECTED[31:0]),
        .Dbg_WDATA_19(NLW_U0_Dbg_WDATA_19_UNCONNECTED[31:0]),
        .Dbg_WDATA_2(NLW_U0_Dbg_WDATA_2_UNCONNECTED[31:0]),
        .Dbg_WDATA_20(NLW_U0_Dbg_WDATA_20_UNCONNECTED[31:0]),
        .Dbg_WDATA_21(NLW_U0_Dbg_WDATA_21_UNCONNECTED[31:0]),
        .Dbg_WDATA_22(NLW_U0_Dbg_WDATA_22_UNCONNECTED[31:0]),
        .Dbg_WDATA_23(NLW_U0_Dbg_WDATA_23_UNCONNECTED[31:0]),
        .Dbg_WDATA_24(NLW_U0_Dbg_WDATA_24_UNCONNECTED[31:0]),
        .Dbg_WDATA_25(NLW_U0_Dbg_WDATA_25_UNCONNECTED[31:0]),
        .Dbg_WDATA_26(NLW_U0_Dbg_WDATA_26_UNCONNECTED[31:0]),
        .Dbg_WDATA_27(NLW_U0_Dbg_WDATA_27_UNCONNECTED[31:0]),
        .Dbg_WDATA_28(NLW_U0_Dbg_WDATA_28_UNCONNECTED[31:0]),
        .Dbg_WDATA_29(NLW_U0_Dbg_WDATA_29_UNCONNECTED[31:0]),
        .Dbg_WDATA_3(NLW_U0_Dbg_WDATA_3_UNCONNECTED[31:0]),
        .Dbg_WDATA_30(NLW_U0_Dbg_WDATA_30_UNCONNECTED[31:0]),
        .Dbg_WDATA_31(NLW_U0_Dbg_WDATA_31_UNCONNECTED[31:0]),
        .Dbg_WDATA_4(NLW_U0_Dbg_WDATA_4_UNCONNECTED[31:0]),
        .Dbg_WDATA_5(NLW_U0_Dbg_WDATA_5_UNCONNECTED[31:0]),
        .Dbg_WDATA_6(NLW_U0_Dbg_WDATA_6_UNCONNECTED[31:0]),
        .Dbg_WDATA_7(NLW_U0_Dbg_WDATA_7_UNCONNECTED[31:0]),
        .Dbg_WDATA_8(NLW_U0_Dbg_WDATA_8_UNCONNECTED[31:0]),
        .Dbg_WDATA_9(NLW_U0_Dbg_WDATA_9_UNCONNECTED[31:0]),
        .Dbg_WREADY_0(1'b0),
        .Dbg_WREADY_1(1'b0),
        .Dbg_WREADY_10(1'b0),
        .Dbg_WREADY_11(1'b0),
        .Dbg_WREADY_12(1'b0),
        .Dbg_WREADY_13(1'b0),
        .Dbg_WREADY_14(1'b0),
        .Dbg_WREADY_15(1'b0),
        .Dbg_WREADY_16(1'b0),
        .Dbg_WREADY_17(1'b0),
        .Dbg_WREADY_18(1'b0),
        .Dbg_WREADY_19(1'b0),
        .Dbg_WREADY_2(1'b0),
        .Dbg_WREADY_20(1'b0),
        .Dbg_WREADY_21(1'b0),
        .Dbg_WREADY_22(1'b0),
        .Dbg_WREADY_23(1'b0),
        .Dbg_WREADY_24(1'b0),
        .Dbg_WREADY_25(1'b0),
        .Dbg_WREADY_26(1'b0),
        .Dbg_WREADY_27(1'b0),
        .Dbg_WREADY_28(1'b0),
        .Dbg_WREADY_29(1'b0),
        .Dbg_WREADY_3(1'b0),
        .Dbg_WREADY_30(1'b0),
        .Dbg_WREADY_31(1'b0),
        .Dbg_WREADY_4(1'b0),
        .Dbg_WREADY_5(1'b0),
        .Dbg_WREADY_6(1'b0),
        .Dbg_WREADY_7(1'b0),
        .Dbg_WREADY_8(1'b0),
        .Dbg_WREADY_9(1'b0),
        .Dbg_WVALID_0(NLW_U0_Dbg_WVALID_0_UNCONNECTED),
        .Dbg_WVALID_1(NLW_U0_Dbg_WVALID_1_UNCONNECTED),
        .Dbg_WVALID_10(NLW_U0_Dbg_WVALID_10_UNCONNECTED),
        .Dbg_WVALID_11(NLW_U0_Dbg_WVALID_11_UNCONNECTED),
        .Dbg_WVALID_12(NLW_U0_Dbg_WVALID_12_UNCONNECTED),
        .Dbg_WVALID_13(NLW_U0_Dbg_WVALID_13_UNCONNECTED),
        .Dbg_WVALID_14(NLW_U0_Dbg_WVALID_14_UNCONNECTED),
        .Dbg_WVALID_15(NLW_U0_Dbg_WVALID_15_UNCONNECTED),
        .Dbg_WVALID_16(NLW_U0_Dbg_WVALID_16_UNCONNECTED),
        .Dbg_WVALID_17(NLW_U0_Dbg_WVALID_17_UNCONNECTED),
        .Dbg_WVALID_18(NLW_U0_Dbg_WVALID_18_UNCONNECTED),
        .Dbg_WVALID_19(NLW_U0_Dbg_WVALID_19_UNCONNECTED),
        .Dbg_WVALID_2(NLW_U0_Dbg_WVALID_2_UNCONNECTED),
        .Dbg_WVALID_20(NLW_U0_Dbg_WVALID_20_UNCONNECTED),
        .Dbg_WVALID_21(NLW_U0_Dbg_WVALID_21_UNCONNECTED),
        .Dbg_WVALID_22(NLW_U0_Dbg_WVALID_22_UNCONNECTED),
        .Dbg_WVALID_23(NLW_U0_Dbg_WVALID_23_UNCONNECTED),
        .Dbg_WVALID_24(NLW_U0_Dbg_WVALID_24_UNCONNECTED),
        .Dbg_WVALID_25(NLW_U0_Dbg_WVALID_25_UNCONNECTED),
        .Dbg_WVALID_26(NLW_U0_Dbg_WVALID_26_UNCONNECTED),
        .Dbg_WVALID_27(NLW_U0_Dbg_WVALID_27_UNCONNECTED),
        .Dbg_WVALID_28(NLW_U0_Dbg_WVALID_28_UNCONNECTED),
        .Dbg_WVALID_29(NLW_U0_Dbg_WVALID_29_UNCONNECTED),
        .Dbg_WVALID_3(NLW_U0_Dbg_WVALID_3_UNCONNECTED),
        .Dbg_WVALID_30(NLW_U0_Dbg_WVALID_30_UNCONNECTED),
        .Dbg_WVALID_31(NLW_U0_Dbg_WVALID_31_UNCONNECTED),
        .Dbg_WVALID_4(NLW_U0_Dbg_WVALID_4_UNCONNECTED),
        .Dbg_WVALID_5(NLW_U0_Dbg_WVALID_5_UNCONNECTED),
        .Dbg_WVALID_6(NLW_U0_Dbg_WVALID_6_UNCONNECTED),
        .Dbg_WVALID_7(NLW_U0_Dbg_WVALID_7_UNCONNECTED),
        .Dbg_WVALID_8(NLW_U0_Dbg_WVALID_8_UNCONNECTED),
        .Dbg_WVALID_9(NLW_U0_Dbg_WVALID_9_UNCONNECTED),
        .Debug_SYS_Rst(Debug_SYS_Rst),
        .Ext_BRK(NLW_U0_Ext_BRK_UNCONNECTED),
        .Ext_JTAG_CAPTURE(NLW_U0_Ext_JTAG_CAPTURE_UNCONNECTED),
        .Ext_JTAG_DRCK(NLW_U0_Ext_JTAG_DRCK_UNCONNECTED),
        .Ext_JTAG_RESET(NLW_U0_Ext_JTAG_RESET_UNCONNECTED),
        .Ext_JTAG_SEL(NLW_U0_Ext_JTAG_SEL_UNCONNECTED),
        .Ext_JTAG_SHIFT(NLW_U0_Ext_JTAG_SHIFT_UNCONNECTED),
        .Ext_JTAG_TDI(NLW_U0_Ext_JTAG_TDI_UNCONNECTED),
        .Ext_JTAG_TDO(1'b0),
        .Ext_JTAG_UPDATE(NLW_U0_Ext_JTAG_UPDATE_UNCONNECTED),
        .Ext_NM_BRK(NLW_U0_Ext_NM_BRK_UNCONNECTED),
        .Interrupt(Interrupt),
        .LMB_Addr_Strobe_0(NLW_U0_LMB_Addr_Strobe_0_UNCONNECTED),
        .LMB_Addr_Strobe_1(NLW_U0_LMB_Addr_Strobe_1_UNCONNECTED),
        .LMB_Addr_Strobe_10(NLW_U0_LMB_Addr_Strobe_10_UNCONNECTED),
        .LMB_Addr_Strobe_11(NLW_U0_LMB_Addr_Strobe_11_UNCONNECTED),
        .LMB_Addr_Strobe_12(NLW_U0_LMB_Addr_Strobe_12_UNCONNECTED),
        .LMB_Addr_Strobe_13(NLW_U0_LMB_Addr_Strobe_13_UNCONNECTED),
        .LMB_Addr_Strobe_14(NLW_U0_LMB_Addr_Strobe_14_UNCONNECTED),
        .LMB_Addr_Strobe_15(NLW_U0_LMB_Addr_Strobe_15_UNCONNECTED),
        .LMB_Addr_Strobe_16(NLW_U0_LMB_Addr_Strobe_16_UNCONNECTED),
        .LMB_Addr_Strobe_17(NLW_U0_LMB_Addr_Strobe_17_UNCONNECTED),
        .LMB_Addr_Strobe_18(NLW_U0_LMB_Addr_Strobe_18_UNCONNECTED),
        .LMB_Addr_Strobe_19(NLW_U0_LMB_Addr_Strobe_19_UNCONNECTED),
        .LMB_Addr_Strobe_2(NLW_U0_LMB_Addr_Strobe_2_UNCONNECTED),
        .LMB_Addr_Strobe_20(NLW_U0_LMB_Addr_Strobe_20_UNCONNECTED),
        .LMB_Addr_Strobe_21(NLW_U0_LMB_Addr_Strobe_21_UNCONNECTED),
        .LMB_Addr_Strobe_22(NLW_U0_LMB_Addr_Strobe_22_UNCONNECTED),
        .LMB_Addr_Strobe_23(NLW_U0_LMB_Addr_Strobe_23_UNCONNECTED),
        .LMB_Addr_Strobe_24(NLW_U0_LMB_Addr_Strobe_24_UNCONNECTED),
        .LMB_Addr_Strobe_25(NLW_U0_LMB_Addr_Strobe_25_UNCONNECTED),
        .LMB_Addr_Strobe_26(NLW_U0_LMB_Addr_Strobe_26_UNCONNECTED),
        .LMB_Addr_Strobe_27(NLW_U0_LMB_Addr_Strobe_27_UNCONNECTED),
        .LMB_Addr_Strobe_28(NLW_U0_LMB_Addr_Strobe_28_UNCONNECTED),
        .LMB_Addr_Strobe_29(NLW_U0_LMB_Addr_Strobe_29_UNCONNECTED),
        .LMB_Addr_Strobe_3(NLW_U0_LMB_Addr_Strobe_3_UNCONNECTED),
        .LMB_Addr_Strobe_30(NLW_U0_LMB_Addr_Strobe_30_UNCONNECTED),
        .LMB_Addr_Strobe_31(NLW_U0_LMB_Addr_Strobe_31_UNCONNECTED),
        .LMB_Addr_Strobe_4(NLW_U0_LMB_Addr_Strobe_4_UNCONNECTED),
        .LMB_Addr_Strobe_5(NLW_U0_LMB_Addr_Strobe_5_UNCONNECTED),
        .LMB_Addr_Strobe_6(NLW_U0_LMB_Addr_Strobe_6_UNCONNECTED),
        .LMB_Addr_Strobe_7(NLW_U0_LMB_Addr_Strobe_7_UNCONNECTED),
        .LMB_Addr_Strobe_8(NLW_U0_LMB_Addr_Strobe_8_UNCONNECTED),
        .LMB_Addr_Strobe_9(NLW_U0_LMB_Addr_Strobe_9_UNCONNECTED),
        .LMB_Byte_Enable_0(NLW_U0_LMB_Byte_Enable_0_UNCONNECTED[0:3]),
        .LMB_Byte_Enable_1(NLW_U0_LMB_Byte_Enable_1_UNCONNECTED[0:3]),
        .LMB_Byte_Enable_10(NLW_U0_LMB_Byte_Enable_10_UNCONNECTED[0:3]),
        .LMB_Byte_Enable_11(NLW_U0_LMB_Byte_Enable_11_UNCONNECTED[0:3]),
        .LMB_Byte_Enable_12(NLW_U0_LMB_Byte_Enable_12_UNCONNECTED[0:3]),
        .LMB_Byte_Enable_13(NLW_U0_LMB_Byte_Enable_13_UNCONNECTED[0:3]),
        .LMB_Byte_Enable_14(NLW_U0_LMB_Byte_Enable_14_UNCONNECTED[0:3]),
        .LMB_Byte_Enable_15(NLW_U0_LMB_Byte_Enable_15_UNCONNECTED[0:3]),
        .LMB_Byte_Enable_16(NLW_U0_LMB_Byte_Enable_16_UNCONNECTED[0:3]),
        .LMB_Byte_Enable_17(NLW_U0_LMB_Byte_Enable_17_UNCONNECTED[0:3]),
        .LMB_Byte_Enable_18(NLW_U0_LMB_Byte_Enable_18_UNCONNECTED[0:3]),
        .LMB_Byte_Enable_19(NLW_U0_LMB_Byte_Enable_19_UNCONNECTED[0:3]),
        .LMB_Byte_Enable_2(NLW_U0_LMB_Byte_Enable_2_UNCONNECTED[0:3]),
        .LMB_Byte_Enable_20(NLW_U0_LMB_Byte_Enable_20_UNCONNECTED[0:3]),
        .LMB_Byte_Enable_21(NLW_U0_LMB_Byte_Enable_21_UNCONNECTED[0:3]),
        .LMB_Byte_Enable_22(NLW_U0_LMB_Byte_Enable_22_UNCONNECTED[0:3]),
        .LMB_Byte_Enable_23(NLW_U0_LMB_Byte_Enable_23_UNCONNECTED[0:3]),
        .LMB_Byte_Enable_24(NLW_U0_LMB_Byte_Enable_24_UNCONNECTED[0:3]),
        .LMB_Byte_Enable_25(NLW_U0_LMB_Byte_Enable_25_UNCONNECTED[0:3]),
        .LMB_Byte_Enable_26(NLW_U0_LMB_Byte_Enable_26_UNCONNECTED[0:3]),
        .LMB_Byte_Enable_27(NLW_U0_LMB_Byte_Enable_27_UNCONNECTED[0:3]),
        .LMB_Byte_Enable_28(NLW_U0_LMB_Byte_Enable_28_UNCONNECTED[0:3]),
        .LMB_Byte_Enable_29(NLW_U0_LMB_Byte_Enable_29_UNCONNECTED[0:3]),
        .LMB_Byte_Enable_3(NLW_U0_LMB_Byte_Enable_3_UNCONNECTED[0:3]),
        .LMB_Byte_Enable_30(NLW_U0_LMB_Byte_Enable_30_UNCONNECTED[0:3]),
        .LMB_Byte_Enable_31(NLW_U0_LMB_Byte_Enable_31_UNCONNECTED[0:3]),
        .LMB_Byte_Enable_4(NLW_U0_LMB_Byte_Enable_4_UNCONNECTED[0:3]),
        .LMB_Byte_Enable_5(NLW_U0_LMB_Byte_Enable_5_UNCONNECTED[0:3]),
        .LMB_Byte_Enable_6(NLW_U0_LMB_Byte_Enable_6_UNCONNECTED[0:3]),
        .LMB_Byte_Enable_7(NLW_U0_LMB_Byte_Enable_7_UNCONNECTED[0:3]),
        .LMB_Byte_Enable_8(NLW_U0_LMB_Byte_Enable_8_UNCONNECTED[0:3]),
        .LMB_Byte_Enable_9(NLW_U0_LMB_Byte_Enable_9_UNCONNECTED[0:3]),
        .LMB_CE_0(1'b0),
        .LMB_CE_1(1'b0),
        .LMB_CE_10(1'b0),
        .LMB_CE_11(1'b0),
        .LMB_CE_12(1'b0),
        .LMB_CE_13(1'b0),
        .LMB_CE_14(1'b0),
        .LMB_CE_15(1'b0),
        .LMB_CE_16(1'b0),
        .LMB_CE_17(1'b0),
        .LMB_CE_18(1'b0),
        .LMB_CE_19(1'b0),
        .LMB_CE_2(1'b0),
        .LMB_CE_20(1'b0),
        .LMB_CE_21(1'b0),
        .LMB_CE_22(1'b0),
        .LMB_CE_23(1'b0),
        .LMB_CE_24(1'b0),
        .LMB_CE_25(1'b0),
        .LMB_CE_26(1'b0),
        .LMB_CE_27(1'b0),
        .LMB_CE_28(1'b0),
        .LMB_CE_29(1'b0),
        .LMB_CE_3(1'b0),
        .LMB_CE_30(1'b0),
        .LMB_CE_31(1'b0),
        .LMB_CE_4(1'b0),
        .LMB_CE_5(1'b0),
        .LMB_CE_6(1'b0),
        .LMB_CE_7(1'b0),
        .LMB_CE_8(1'b0),
        .LMB_CE_9(1'b0),
        .LMB_Data_Addr_0(NLW_U0_LMB_Data_Addr_0_UNCONNECTED[0:31]),
        .LMB_Data_Addr_1(NLW_U0_LMB_Data_Addr_1_UNCONNECTED[0:31]),
        .LMB_Data_Addr_10(NLW_U0_LMB_Data_Addr_10_UNCONNECTED[0:31]),
        .LMB_Data_Addr_11(NLW_U0_LMB_Data_Addr_11_UNCONNECTED[0:31]),
        .LMB_Data_Addr_12(NLW_U0_LMB_Data_Addr_12_UNCONNECTED[0:31]),
        .LMB_Data_Addr_13(NLW_U0_LMB_Data_Addr_13_UNCONNECTED[0:31]),
        .LMB_Data_Addr_14(NLW_U0_LMB_Data_Addr_14_UNCONNECTED[0:31]),
        .LMB_Data_Addr_15(NLW_U0_LMB_Data_Addr_15_UNCONNECTED[0:31]),
        .LMB_Data_Addr_16(NLW_U0_LMB_Data_Addr_16_UNCONNECTED[0:31]),
        .LMB_Data_Addr_17(NLW_U0_LMB_Data_Addr_17_UNCONNECTED[0:31]),
        .LMB_Data_Addr_18(NLW_U0_LMB_Data_Addr_18_UNCONNECTED[0:31]),
        .LMB_Data_Addr_19(NLW_U0_LMB_Data_Addr_19_UNCONNECTED[0:31]),
        .LMB_Data_Addr_2(NLW_U0_LMB_Data_Addr_2_UNCONNECTED[0:31]),
        .LMB_Data_Addr_20(NLW_U0_LMB_Data_Addr_20_UNCONNECTED[0:31]),
        .LMB_Data_Addr_21(NLW_U0_LMB_Data_Addr_21_UNCONNECTED[0:31]),
        .LMB_Data_Addr_22(NLW_U0_LMB_Data_Addr_22_UNCONNECTED[0:31]),
        .LMB_Data_Addr_23(NLW_U0_LMB_Data_Addr_23_UNCONNECTED[0:31]),
        .LMB_Data_Addr_24(NLW_U0_LMB_Data_Addr_24_UNCONNECTED[0:31]),
        .LMB_Data_Addr_25(NLW_U0_LMB_Data_Addr_25_UNCONNECTED[0:31]),
        .LMB_Data_Addr_26(NLW_U0_LMB_Data_Addr_26_UNCONNECTED[0:31]),
        .LMB_Data_Addr_27(NLW_U0_LMB_Data_Addr_27_UNCONNECTED[0:31]),
        .LMB_Data_Addr_28(NLW_U0_LMB_Data_Addr_28_UNCONNECTED[0:31]),
        .LMB_Data_Addr_29(NLW_U0_LMB_Data_Addr_29_UNCONNECTED[0:31]),
        .LMB_Data_Addr_3(NLW_U0_LMB_Data_Addr_3_UNCONNECTED[0:31]),
        .LMB_Data_Addr_30(NLW_U0_LMB_Data_Addr_30_UNCONNECTED[0:31]),
        .LMB_Data_Addr_31(NLW_U0_LMB_Data_Addr_31_UNCONNECTED[0:31]),
        .LMB_Data_Addr_4(NLW_U0_LMB_Data_Addr_4_UNCONNECTED[0:31]),
        .LMB_Data_Addr_5(NLW_U0_LMB_Data_Addr_5_UNCONNECTED[0:31]),
        .LMB_Data_Addr_6(NLW_U0_LMB_Data_Addr_6_UNCONNECTED[0:31]),
        .LMB_Data_Addr_7(NLW_U0_LMB_Data_Addr_7_UNCONNECTED[0:31]),
        .LMB_Data_Addr_8(NLW_U0_LMB_Data_Addr_8_UNCONNECTED[0:31]),
        .LMB_Data_Addr_9(NLW_U0_LMB_Data_Addr_9_UNCONNECTED[0:31]),
        .LMB_Data_Read_0({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .LMB_Data_Read_1({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .LMB_Data_Read_10({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .LMB_Data_Read_11({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .LMB_Data_Read_12({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .LMB_Data_Read_13({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .LMB_Data_Read_14({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .LMB_Data_Read_15({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .LMB_Data_Read_16({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .LMB_Data_Read_17({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .LMB_Data_Read_18({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .LMB_Data_Read_19({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .LMB_Data_Read_2({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .LMB_Data_Read_20({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .LMB_Data_Read_21({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .LMB_Data_Read_22({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .LMB_Data_Read_23({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .LMB_Data_Read_24({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .LMB_Data_Read_25({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .LMB_Data_Read_26({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .LMB_Data_Read_27({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .LMB_Data_Read_28({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .LMB_Data_Read_29({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .LMB_Data_Read_3({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .LMB_Data_Read_30({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .LMB_Data_Read_31({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .LMB_Data_Read_4({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .LMB_Data_Read_5({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .LMB_Data_Read_6({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .LMB_Data_Read_7({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .LMB_Data_Read_8({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .LMB_Data_Read_9({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .LMB_Data_Write_0(NLW_U0_LMB_Data_Write_0_UNCONNECTED[0:31]),
        .LMB_Data_Write_1(NLW_U0_LMB_Data_Write_1_UNCONNECTED[0:31]),
        .LMB_Data_Write_10(NLW_U0_LMB_Data_Write_10_UNCONNECTED[0:31]),
        .LMB_Data_Write_11(NLW_U0_LMB_Data_Write_11_UNCONNECTED[0:31]),
        .LMB_Data_Write_12(NLW_U0_LMB_Data_Write_12_UNCONNECTED[0:31]),
        .LMB_Data_Write_13(NLW_U0_LMB_Data_Write_13_UNCONNECTED[0:31]),
        .LMB_Data_Write_14(NLW_U0_LMB_Data_Write_14_UNCONNECTED[0:31]),
        .LMB_Data_Write_15(NLW_U0_LMB_Data_Write_15_UNCONNECTED[0:31]),
        .LMB_Data_Write_16(NLW_U0_LMB_Data_Write_16_UNCONNECTED[0:31]),
        .LMB_Data_Write_17(NLW_U0_LMB_Data_Write_17_UNCONNECTED[0:31]),
        .LMB_Data_Write_18(NLW_U0_LMB_Data_Write_18_UNCONNECTED[0:31]),
        .LMB_Data_Write_19(NLW_U0_LMB_Data_Write_19_UNCONNECTED[0:31]),
        .LMB_Data_Write_2(NLW_U0_LMB_Data_Write_2_UNCONNECTED[0:31]),
        .LMB_Data_Write_20(NLW_U0_LMB_Data_Write_20_UNCONNECTED[0:31]),
        .LMB_Data_Write_21(NLW_U0_LMB_Data_Write_21_UNCONNECTED[0:31]),
        .LMB_Data_Write_22(NLW_U0_LMB_Data_Write_22_UNCONNECTED[0:31]),
        .LMB_Data_Write_23(NLW_U0_LMB_Data_Write_23_UNCONNECTED[0:31]),
        .LMB_Data_Write_24(NLW_U0_LMB_Data_Write_24_UNCONNECTED[0:31]),
        .LMB_Data_Write_25(NLW_U0_LMB_Data_Write_25_UNCONNECTED[0:31]),
        .LMB_Data_Write_26(NLW_U0_LMB_Data_Write_26_UNCONNECTED[0:31]),
        .LMB_Data_Write_27(NLW_U0_LMB_Data_Write_27_UNCONNECTED[0:31]),
        .LMB_Data_Write_28(NLW_U0_LMB_Data_Write_28_UNCONNECTED[0:31]),
        .LMB_Data_Write_29(NLW_U0_LMB_Data_Write_29_UNCONNECTED[0:31]),
        .LMB_Data_Write_3(NLW_U0_LMB_Data_Write_3_UNCONNECTED[0:31]),
        .LMB_Data_Write_30(NLW_U0_LMB_Data_Write_30_UNCONNECTED[0:31]),
        .LMB_Data_Write_31(NLW_U0_LMB_Data_Write_31_UNCONNECTED[0:31]),
        .LMB_Data_Write_4(NLW_U0_LMB_Data_Write_4_UNCONNECTED[0:31]),
        .LMB_Data_Write_5(NLW_U0_LMB_Data_Write_5_UNCONNECTED[0:31]),
        .LMB_Data_Write_6(NLW_U0_LMB_Data_Write_6_UNCONNECTED[0:31]),
        .LMB_Data_Write_7(NLW_U0_LMB_Data_Write_7_UNCONNECTED[0:31]),
        .LMB_Data_Write_8(NLW_U0_LMB_Data_Write_8_UNCONNECTED[0:31]),
        .LMB_Data_Write_9(NLW_U0_LMB_Data_Write_9_UNCONNECTED[0:31]),
        .LMB_Read_Strobe_0(NLW_U0_LMB_Read_Strobe_0_UNCONNECTED),
        .LMB_Read_Strobe_1(NLW_U0_LMB_Read_Strobe_1_UNCONNECTED),
        .LMB_Read_Strobe_10(NLW_U0_LMB_Read_Strobe_10_UNCONNECTED),
        .LMB_Read_Strobe_11(NLW_U0_LMB_Read_Strobe_11_UNCONNECTED),
        .LMB_Read_Strobe_12(NLW_U0_LMB_Read_Strobe_12_UNCONNECTED),
        .LMB_Read_Strobe_13(NLW_U0_LMB_Read_Strobe_13_UNCONNECTED),
        .LMB_Read_Strobe_14(NLW_U0_LMB_Read_Strobe_14_UNCONNECTED),
        .LMB_Read_Strobe_15(NLW_U0_LMB_Read_Strobe_15_UNCONNECTED),
        .LMB_Read_Strobe_16(NLW_U0_LMB_Read_Strobe_16_UNCONNECTED),
        .LMB_Read_Strobe_17(NLW_U0_LMB_Read_Strobe_17_UNCONNECTED),
        .LMB_Read_Strobe_18(NLW_U0_LMB_Read_Strobe_18_UNCONNECTED),
        .LMB_Read_Strobe_19(NLW_U0_LMB_Read_Strobe_19_UNCONNECTED),
        .LMB_Read_Strobe_2(NLW_U0_LMB_Read_Strobe_2_UNCONNECTED),
        .LMB_Read_Strobe_20(NLW_U0_LMB_Read_Strobe_20_UNCONNECTED),
        .LMB_Read_Strobe_21(NLW_U0_LMB_Read_Strobe_21_UNCONNECTED),
        .LMB_Read_Strobe_22(NLW_U0_LMB_Read_Strobe_22_UNCONNECTED),
        .LMB_Read_Strobe_23(NLW_U0_LMB_Read_Strobe_23_UNCONNECTED),
        .LMB_Read_Strobe_24(NLW_U0_LMB_Read_Strobe_24_UNCONNECTED),
        .LMB_Read_Strobe_25(NLW_U0_LMB_Read_Strobe_25_UNCONNECTED),
        .LMB_Read_Strobe_26(NLW_U0_LMB_Read_Strobe_26_UNCONNECTED),
        .LMB_Read_Strobe_27(NLW_U0_LMB_Read_Strobe_27_UNCONNECTED),
        .LMB_Read_Strobe_28(NLW_U0_LMB_Read_Strobe_28_UNCONNECTED),
        .LMB_Read_Strobe_29(NLW_U0_LMB_Read_Strobe_29_UNCONNECTED),
        .LMB_Read_Strobe_3(NLW_U0_LMB_Read_Strobe_3_UNCONNECTED),
        .LMB_Read_Strobe_30(NLW_U0_LMB_Read_Strobe_30_UNCONNECTED),
        .LMB_Read_Strobe_31(NLW_U0_LMB_Read_Strobe_31_UNCONNECTED),
        .LMB_Read_Strobe_4(NLW_U0_LMB_Read_Strobe_4_UNCONNECTED),
        .LMB_Read_Strobe_5(NLW_U0_LMB_Read_Strobe_5_UNCONNECTED),
        .LMB_Read_Strobe_6(NLW_U0_LMB_Read_Strobe_6_UNCONNECTED),
        .LMB_Read_Strobe_7(NLW_U0_LMB_Read_Strobe_7_UNCONNECTED),
        .LMB_Read_Strobe_8(NLW_U0_LMB_Read_Strobe_8_UNCONNECTED),
        .LMB_Read_Strobe_9(NLW_U0_LMB_Read_Strobe_9_UNCONNECTED),
        .LMB_Ready_0(1'b0),
        .LMB_Ready_1(1'b0),
        .LMB_Ready_10(1'b0),
        .LMB_Ready_11(1'b0),
        .LMB_Ready_12(1'b0),
        .LMB_Ready_13(1'b0),
        .LMB_Ready_14(1'b0),
        .LMB_Ready_15(1'b0),
        .LMB_Ready_16(1'b0),
        .LMB_Ready_17(1'b0),
        .LMB_Ready_18(1'b0),
        .LMB_Ready_19(1'b0),
        .LMB_Ready_2(1'b0),
        .LMB_Ready_20(1'b0),
        .LMB_Ready_21(1'b0),
        .LMB_Ready_22(1'b0),
        .LMB_Ready_23(1'b0),
        .LMB_Ready_24(1'b0),
        .LMB_Ready_25(1'b0),
        .LMB_Ready_26(1'b0),
        .LMB_Ready_27(1'b0),
        .LMB_Ready_28(1'b0),
        .LMB_Ready_29(1'b0),
        .LMB_Ready_3(1'b0),
        .LMB_Ready_30(1'b0),
        .LMB_Ready_31(1'b0),
        .LMB_Ready_4(1'b0),
        .LMB_Ready_5(1'b0),
        .LMB_Ready_6(1'b0),
        .LMB_Ready_7(1'b0),
        .LMB_Ready_8(1'b0),
        .LMB_Ready_9(1'b0),
        .LMB_UE_0(1'b0),
        .LMB_UE_1(1'b0),
        .LMB_UE_10(1'b0),
        .LMB_UE_11(1'b0),
        .LMB_UE_12(1'b0),
        .LMB_UE_13(1'b0),
        .LMB_UE_14(1'b0),
        .LMB_UE_15(1'b0),
        .LMB_UE_16(1'b0),
        .LMB_UE_17(1'b0),
        .LMB_UE_18(1'b0),
        .LMB_UE_19(1'b0),
        .LMB_UE_2(1'b0),
        .LMB_UE_20(1'b0),
        .LMB_UE_21(1'b0),
        .LMB_UE_22(1'b0),
        .LMB_UE_23(1'b0),
        .LMB_UE_24(1'b0),
        .LMB_UE_25(1'b0),
        .LMB_UE_26(1'b0),
        .LMB_UE_27(1'b0),
        .LMB_UE_28(1'b0),
        .LMB_UE_29(1'b0),
        .LMB_UE_3(1'b0),
        .LMB_UE_30(1'b0),
        .LMB_UE_31(1'b0),
        .LMB_UE_4(1'b0),
        .LMB_UE_5(1'b0),
        .LMB_UE_6(1'b0),
        .LMB_UE_7(1'b0),
        .LMB_UE_8(1'b0),
        .LMB_UE_9(1'b0),
        .LMB_Wait_0(1'b0),
        .LMB_Wait_1(1'b0),
        .LMB_Wait_10(1'b0),
        .LMB_Wait_11(1'b0),
        .LMB_Wait_12(1'b0),
        .LMB_Wait_13(1'b0),
        .LMB_Wait_14(1'b0),
        .LMB_Wait_15(1'b0),
        .LMB_Wait_16(1'b0),
        .LMB_Wait_17(1'b0),
        .LMB_Wait_18(1'b0),
        .LMB_Wait_19(1'b0),
        .LMB_Wait_2(1'b0),
        .LMB_Wait_20(1'b0),
        .LMB_Wait_21(1'b0),
        .LMB_Wait_22(1'b0),
        .LMB_Wait_23(1'b0),
        .LMB_Wait_24(1'b0),
        .LMB_Wait_25(1'b0),
        .LMB_Wait_26(1'b0),
        .LMB_Wait_27(1'b0),
        .LMB_Wait_28(1'b0),
        .LMB_Wait_29(1'b0),
        .LMB_Wait_3(1'b0),
        .LMB_Wait_30(1'b0),
        .LMB_Wait_31(1'b0),
        .LMB_Wait_4(1'b0),
        .LMB_Wait_5(1'b0),
        .LMB_Wait_6(1'b0),
        .LMB_Wait_7(1'b0),
        .LMB_Wait_8(1'b0),
        .LMB_Wait_9(1'b0),
        .LMB_Write_Strobe_0(NLW_U0_LMB_Write_Strobe_0_UNCONNECTED),
        .LMB_Write_Strobe_1(NLW_U0_LMB_Write_Strobe_1_UNCONNECTED),
        .LMB_Write_Strobe_10(NLW_U0_LMB_Write_Strobe_10_UNCONNECTED),
        .LMB_Write_Strobe_11(NLW_U0_LMB_Write_Strobe_11_UNCONNECTED),
        .LMB_Write_Strobe_12(NLW_U0_LMB_Write_Strobe_12_UNCONNECTED),
        .LMB_Write_Strobe_13(NLW_U0_LMB_Write_Strobe_13_UNCONNECTED),
        .LMB_Write_Strobe_14(NLW_U0_LMB_Write_Strobe_14_UNCONNECTED),
        .LMB_Write_Strobe_15(NLW_U0_LMB_Write_Strobe_15_UNCONNECTED),
        .LMB_Write_Strobe_16(NLW_U0_LMB_Write_Strobe_16_UNCONNECTED),
        .LMB_Write_Strobe_17(NLW_U0_LMB_Write_Strobe_17_UNCONNECTED),
        .LMB_Write_Strobe_18(NLW_U0_LMB_Write_Strobe_18_UNCONNECTED),
        .LMB_Write_Strobe_19(NLW_U0_LMB_Write_Strobe_19_UNCONNECTED),
        .LMB_Write_Strobe_2(NLW_U0_LMB_Write_Strobe_2_UNCONNECTED),
        .LMB_Write_Strobe_20(NLW_U0_LMB_Write_Strobe_20_UNCONNECTED),
        .LMB_Write_Strobe_21(NLW_U0_LMB_Write_Strobe_21_UNCONNECTED),
        .LMB_Write_Strobe_22(NLW_U0_LMB_Write_Strobe_22_UNCONNECTED),
        .LMB_Write_Strobe_23(NLW_U0_LMB_Write_Strobe_23_UNCONNECTED),
        .LMB_Write_Strobe_24(NLW_U0_LMB_Write_Strobe_24_UNCONNECTED),
        .LMB_Write_Strobe_25(NLW_U0_LMB_Write_Strobe_25_UNCONNECTED),
        .LMB_Write_Strobe_26(NLW_U0_LMB_Write_Strobe_26_UNCONNECTED),
        .LMB_Write_Strobe_27(NLW_U0_LMB_Write_Strobe_27_UNCONNECTED),
        .LMB_Write_Strobe_28(NLW_U0_LMB_Write_Strobe_28_UNCONNECTED),
        .LMB_Write_Strobe_29(NLW_U0_LMB_Write_Strobe_29_UNCONNECTED),
        .LMB_Write_Strobe_3(NLW_U0_LMB_Write_Strobe_3_UNCONNECTED),
        .LMB_Write_Strobe_30(NLW_U0_LMB_Write_Strobe_30_UNCONNECTED),
        .LMB_Write_Strobe_31(NLW_U0_LMB_Write_Strobe_31_UNCONNECTED),
        .LMB_Write_Strobe_4(NLW_U0_LMB_Write_Strobe_4_UNCONNECTED),
        .LMB_Write_Strobe_5(NLW_U0_LMB_Write_Strobe_5_UNCONNECTED),
        .LMB_Write_Strobe_6(NLW_U0_LMB_Write_Strobe_6_UNCONNECTED),
        .LMB_Write_Strobe_7(NLW_U0_LMB_Write_Strobe_7_UNCONNECTED),
        .LMB_Write_Strobe_8(NLW_U0_LMB_Write_Strobe_8_UNCONNECTED),
        .LMB_Write_Strobe_9(NLW_U0_LMB_Write_Strobe_9_UNCONNECTED),
        .M_AXIS_ACLK(1'b0),
        .M_AXIS_ARESETN(1'b0),
        .M_AXIS_TDATA(NLW_U0_M_AXIS_TDATA_UNCONNECTED[31:0]),
        .M_AXIS_TID(NLW_U0_M_AXIS_TID_UNCONNECTED[6:0]),
        .M_AXIS_TREADY(1'b1),
        .M_AXIS_TVALID(NLW_U0_M_AXIS_TVALID_UNCONNECTED),
        .M_AXI_ACLK(1'b0),
        .M_AXI_ARADDR(NLW_U0_M_AXI_ARADDR_UNCONNECTED[31:0]),
        .M_AXI_ARBURST(NLW_U0_M_AXI_ARBURST_UNCONNECTED[1:0]),
        .M_AXI_ARCACHE(NLW_U0_M_AXI_ARCACHE_UNCONNECTED[3:0]),
        .M_AXI_ARESETN(1'b0),
        .M_AXI_ARID(NLW_U0_M_AXI_ARID_UNCONNECTED[0]),
        .M_AXI_ARLEN(NLW_U0_M_AXI_ARLEN_UNCONNECTED[7:0]),
        .M_AXI_ARLOCK(NLW_U0_M_AXI_ARLOCK_UNCONNECTED),
        .M_AXI_ARPROT(NLW_U0_M_AXI_ARPROT_UNCONNECTED[2:0]),
        .M_AXI_ARQOS(NLW_U0_M_AXI_ARQOS_UNCONNECTED[3:0]),
        .M_AXI_ARREADY(1'b0),
        .M_AXI_ARSIZE(NLW_U0_M_AXI_ARSIZE_UNCONNECTED[2:0]),
        .M_AXI_ARVALID(NLW_U0_M_AXI_ARVALID_UNCONNECTED),
        .M_AXI_AWADDR(NLW_U0_M_AXI_AWADDR_UNCONNECTED[31:0]),
        .M_AXI_AWBURST(NLW_U0_M_AXI_AWBURST_UNCONNECTED[1:0]),
        .M_AXI_AWCACHE(NLW_U0_M_AXI_AWCACHE_UNCONNECTED[3:0]),
        .M_AXI_AWID(NLW_U0_M_AXI_AWID_UNCONNECTED[0]),
        .M_AXI_AWLEN(NLW_U0_M_AXI_AWLEN_UNCONNECTED[7:0]),
        .M_AXI_AWLOCK(NLW_U0_M_AXI_AWLOCK_UNCONNECTED),
        .M_AXI_AWPROT(NLW_U0_M_AXI_AWPROT_UNCONNECTED[2:0]),
        .M_AXI_AWQOS(NLW_U0_M_AXI_AWQOS_UNCONNECTED[3:0]),
        .M_AXI_AWREADY(1'b0),
        .M_AXI_AWSIZE(NLW_U0_M_AXI_AWSIZE_UNCONNECTED[2:0]),
        .M_AXI_AWVALID(NLW_U0_M_AXI_AWVALID_UNCONNECTED),
        .M_AXI_BID(1'b0),
        .M_AXI_BREADY(NLW_U0_M_AXI_BREADY_UNCONNECTED),
        .M_AXI_BRESP({1'b0,1'b0}),
        .M_AXI_BVALID(1'b0),
        .M_AXI_RDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .M_AXI_RID(1'b0),
        .M_AXI_RLAST(1'b0),
        .M_AXI_RREADY(NLW_U0_M_AXI_RREADY_UNCONNECTED),
        .M_AXI_RRESP({1'b0,1'b0}),
        .M_AXI_RVALID(1'b0),
        .M_AXI_WDATA(NLW_U0_M_AXI_WDATA_UNCONNECTED[31:0]),
        .M_AXI_WLAST(NLW_U0_M_AXI_WLAST_UNCONNECTED),
        .M_AXI_WREADY(1'b0),
        .M_AXI_WSTRB(NLW_U0_M_AXI_WSTRB_UNCONNECTED[3:0]),
        .M_AXI_WVALID(NLW_U0_M_AXI_WVALID_UNCONNECTED),
        .S_AXI_ACLK(S_AXI_ACLK),
        .S_AXI_ARADDR(S_AXI_ARADDR),
        .S_AXI_ARESETN(S_AXI_ARESETN),
        .S_AXI_ARREADY(S_AXI_ARREADY),
        .S_AXI_ARVALID(S_AXI_ARVALID),
        .S_AXI_AWADDR(S_AXI_AWADDR),
        .S_AXI_AWREADY(S_AXI_AWREADY),
        .S_AXI_AWVALID(S_AXI_AWVALID),
        .S_AXI_BREADY(S_AXI_BREADY),
        .S_AXI_BRESP(S_AXI_BRESP),
        .S_AXI_BVALID(S_AXI_BVALID),
        .S_AXI_RDATA(S_AXI_RDATA),
        .S_AXI_RREADY(S_AXI_RREADY),
        .S_AXI_RRESP(S_AXI_RRESP),
        .S_AXI_RVALID(S_AXI_RVALID),
        .S_AXI_WDATA(S_AXI_WDATA),
        .S_AXI_WREADY(S_AXI_WREADY),
        .S_AXI_WSTRB(S_AXI_WSTRB),
        .S_AXI_WVALID(S_AXI_WVALID),
        .Scan_En(1'b0),
        .Scan_Reset(1'b0),
        .Scan_Reset_Sel(1'b0),
        .TRACE_CLK(1'b0),
        .TRACE_CLK_OUT(NLW_U0_TRACE_CLK_OUT_UNCONNECTED),
        .TRACE_CTL(NLW_U0_TRACE_CTL_UNCONNECTED),
        .TRACE_DATA(NLW_U0_TRACE_DATA_UNCONNECTED[31:0]),
        .Trig_Ack_In_0(NLW_U0_Trig_Ack_In_0_UNCONNECTED),
        .Trig_Ack_In_1(NLW_U0_Trig_Ack_In_1_UNCONNECTED),
        .Trig_Ack_In_2(NLW_U0_Trig_Ack_In_2_UNCONNECTED),
        .Trig_Ack_In_3(NLW_U0_Trig_Ack_In_3_UNCONNECTED),
        .Trig_Ack_Out_0(1'b0),
        .Trig_Ack_Out_1(1'b0),
        .Trig_Ack_Out_2(1'b0),
        .Trig_Ack_Out_3(1'b0),
        .Trig_In_0(1'b0),
        .Trig_In_1(1'b0),
        .Trig_In_2(1'b0),
        .Trig_In_3(1'b0),
        .Trig_Out_0(NLW_U0_Trig_Out_0_UNCONNECTED),
        .Trig_Out_1(NLW_U0_Trig_Out_1_UNCONNECTED),
        .Trig_Out_2(NLW_U0_Trig_Out_2_UNCONNECTED),
        .Trig_Out_3(NLW_U0_Trig_Out_3_UNCONNECTED),
        .bscan_ext_bscanid_en(1'b0),
        .bscan_ext_capture(1'b0),
        .bscan_ext_drck(1'b0),
        .bscan_ext_reset(1'b0),
        .bscan_ext_sel(1'b0),
        .bscan_ext_shift(1'b0),
        .bscan_ext_tck(1'b0),
        .bscan_ext_tdi(1'b0),
        .bscan_ext_tdo(NLW_U0_bscan_ext_tdo_UNCONNECTED),
        .bscan_ext_tms(1'b0),
        .bscan_ext_update(1'b0));
endmodule

(* CHECK_LICENSE_TYPE = "bd_6665_microblaze_I_0,MicroBlaze,{}" *) (* DowngradeIPIdentifiedWarnings = "yes" *) (* X_CORE_INFO = "MicroBlaze,Vivado 2019.2.1" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_bd_6665_microblaze_I_0
   (Clk,
    Reset,
    Interrupt,
    Interrupt_Address,
    Interrupt_Ack,
    Ext_BRK,
    Ext_NM_BRK,
    Dbg_Stop,
    MB_Halted,
    Wakeup,
    Sleep,
    Hibernate,
    Suspend,
    Dbg_Wakeup,
    Dbg_Continue,
    Reset_Mode,
    Pause,
    Pause_Ack,
    Non_Secure,
    Instr_Addr,
    Instr,
    IFetch,
    I_AS,
    IReady,
    IWAIT,
    ICE,
    IUE,
    Data_Addr,
    Data_Read,
    Data_Write,
    D_AS,
    Read_Strobe,
    Write_Strobe,
    DReady,
    DWait,
    DCE,
    DUE,
    Byte_Enable,
    M_AXI_DP_AWADDR,
    M_AXI_DP_AWPROT,
    M_AXI_DP_AWVALID,
    M_AXI_DP_AWREADY,
    M_AXI_DP_WDATA,
    M_AXI_DP_WSTRB,
    M_AXI_DP_WVALID,
    M_AXI_DP_WREADY,
    M_AXI_DP_BRESP,
    M_AXI_DP_BVALID,
    M_AXI_DP_BREADY,
    M_AXI_DP_ARADDR,
    M_AXI_DP_ARPROT,
    M_AXI_DP_ARVALID,
    M_AXI_DP_ARREADY,
    M_AXI_DP_RDATA,
    M_AXI_DP_RRESP,
    M_AXI_DP_RVALID,
    M_AXI_DP_RREADY,
    Dbg_Clk,
    Dbg_TDI,
    Dbg_TDO,
    Dbg_Reg_En,
    Dbg_Shift,
    Dbg_Capture,
    Dbg_Update,
    Debug_Rst,
    Dbg_Disable);
  (* X_INTERFACE_INFO = "xilinx.com:signal:clock:1.0 CLK.CLK CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME CLK.CLK, ASSOCIATED_BUSIF M0_AXIS:S0_AXIS:M1_AXIS:S1_AXIS:M2_AXIS:S2_AXIS:M3_AXIS:S3_AXIS:M4_AXIS:S4_AXIS:M5_AXIS:S5_AXIS:M6_AXIS:S6_AXIS:M7_AXIS:S7_AXIS:M8_AXIS:S8_AXIS:M9_AXIS:S9_AXIS:M10_AXIS:S10_AXIS:M11_AXIS:S11_AXIS:M12_AXIS:S12_AXIS:M13_AXIS:S13_AXIS:M14_AXIS:S14_AXIS:M15_AXIS:S15_AXIS:DLMB:ILMB:M_AXI_DP:M_AXI_IP:M_AXI_DC:M_AXI_IC:M_ACE_DC:M_ACE_IC:MON_DLMB:MON_ILMB:MON_AXI_DP:MON_AXI_IP:MON_AXI_DC:MON_AXI_IC:MON_ACE_DC:MON_ACE_IC, ASSOCIATED_RESET Reset, FREQ_HZ 100000000, PHASE 0.000, CLK_DOMAIN debug_cpu_sys_clock, INSERT_VIP 0" *) input Clk;
  (* X_INTERFACE_INFO = "xilinx.com:signal:reset:1.0 RST.RESET RST" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME RST.RESET, POLARITY ACTIVE_HIGH, TYPE PROCESSOR, INSERT_VIP 0" *) input Reset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbinterrupt:1.0 INTERRUPT INTERRUPT" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME INTERRUPT, SENSITIVITY LEVEL_HIGH, LOW_LATENCY 0" *) input Interrupt;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbinterrupt:1.0 INTERRUPT ADDRESS" *) input [0:31]Interrupt_Address;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbinterrupt:1.0 INTERRUPT ACK" *) output [0:1]Interrupt_Ack;
  input Ext_BRK;
  input Ext_NM_BRK;
  input Dbg_Stop;
  output MB_Halted;
  input [0:1]Wakeup;
  output Sleep;
  output Hibernate;
  output Suspend;
  output Dbg_Wakeup;
  output Dbg_Continue;
  input [0:1]Reset_Mode;
  input Pause;
  output Pause_Ack;
  input [0:3]Non_Secure;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 ILMB ABUS" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME ILMB, ADDR_WIDTH 32, DATA_WIDTH 32, PROTOCOL STANDARD, READ_WRITE_MODE READ_ONLY" *) output [0:31]Instr_Addr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 ILMB READDBUS" *) input [0:31]Instr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 ILMB READSTROBE" *) output IFetch;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 ILMB ADDRSTROBE" *) output I_AS;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 ILMB READY" *) input IReady;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 ILMB WAIT" *) input IWAIT;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 ILMB CE" *) input ICE;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 ILMB UE" *) input IUE;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 DLMB ABUS" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME DLMB, ADDR_WIDTH 32, DATA_WIDTH 32, PROTOCOL STANDARD, READ_WRITE_MODE READ_WRITE" *) output [0:31]Data_Addr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 DLMB READDBUS" *) input [0:31]Data_Read;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 DLMB WRITEDBUS" *) output [0:31]Data_Write;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 DLMB ADDRSTROBE" *) output D_AS;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 DLMB READSTROBE" *) output Read_Strobe;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 DLMB WRITESTROBE" *) output Write_Strobe;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 DLMB READY" *) input DReady;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 DLMB WAIT" *) input DWait;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 DLMB CE" *) input DCE;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 DLMB UE" *) input DUE;
  (* X_INTERFACE_INFO = "xilinx.com:interface:lmb:1.0 DLMB BE" *) output [0:3]Byte_Enable;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI_DP AWADDR" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME M_AXI_DP, ID_WIDTH 0, READ_WRITE_MODE READ_WRITE, SUPPORTS_NARROW_BURST 0, HAS_BURST 0, HAS_LOCK 0, DATA_WIDTH 32, ADDR_WIDTH 32, NUM_READ_OUTSTANDING 1, NUM_WRITE_OUTSTANDING 1, NUM_READ_THREADS 1, NUM_WRITE_THREADS 1, MAX_BURST_LENGTH 1, PROTOCOL AXI4LITE, FREQ_HZ 100000000, AWUSER_WIDTH 0, ARUSER_WIDTH 0, WUSER_WIDTH 0, RUSER_WIDTH 0, BUSER_WIDTH 0, HAS_PROT 1, HAS_CACHE 0, HAS_QOS 0, HAS_REGION 0, HAS_WSTRB 1, HAS_BRESP 1, HAS_RRESP 1, PHASE 0.000, CLK_DOMAIN debug_cpu_sys_clock, RUSER_BITS_PER_BYTE 0, WUSER_BITS_PER_BYTE 0, INSERT_VIP 0" *) output [31:0]M_AXI_DP_AWADDR;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI_DP AWPROT" *) output [2:0]M_AXI_DP_AWPROT;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI_DP AWVALID" *) output M_AXI_DP_AWVALID;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI_DP AWREADY" *) input M_AXI_DP_AWREADY;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI_DP WDATA" *) output [31:0]M_AXI_DP_WDATA;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI_DP WSTRB" *) output [3:0]M_AXI_DP_WSTRB;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI_DP WVALID" *) output M_AXI_DP_WVALID;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI_DP WREADY" *) input M_AXI_DP_WREADY;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI_DP BRESP" *) input [1:0]M_AXI_DP_BRESP;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI_DP BVALID" *) input M_AXI_DP_BVALID;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI_DP BREADY" *) output M_AXI_DP_BREADY;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI_DP ARADDR" *) output [31:0]M_AXI_DP_ARADDR;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI_DP ARPROT" *) output [2:0]M_AXI_DP_ARPROT;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI_DP ARVALID" *) output M_AXI_DP_ARVALID;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI_DP ARREADY" *) input M_AXI_DP_ARREADY;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI_DP RDATA" *) input [31:0]M_AXI_DP_RDATA;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI_DP RRESP" *) input [1:0]M_AXI_DP_RRESP;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI_DP RVALID" *) input M_AXI_DP_RVALID;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 M_AXI_DP RREADY" *) output M_AXI_DP_RREADY;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbdebug:3.0 DEBUG CLK" *) input Dbg_Clk;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbdebug:3.0 DEBUG TDI" *) input Dbg_TDI;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbdebug:3.0 DEBUG TDO" *) output Dbg_TDO;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbdebug:3.0 DEBUG REG_EN" *) input [0:7]Dbg_Reg_En;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbdebug:3.0 DEBUG SHIFT" *) input Dbg_Shift;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbdebug:3.0 DEBUG CAPTURE" *) input Dbg_Capture;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbdebug:3.0 DEBUG UPDATE" *) input Dbg_Update;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbdebug:3.0 DEBUG RST" *) input Debug_Rst;
  (* X_INTERFACE_INFO = "xilinx.com:interface:mbdebug:3.0 DEBUG DISABLE" *) input Dbg_Disable;

  wire [0:3]Byte_Enable;
  wire Clk;
  wire DCE;
  wire DReady;
  wire DUE;
  wire DWait;
  wire D_AS;
  wire [0:31]Data_Addr;
  wire [0:31]Data_Read;
  wire [0:31]Data_Write;
  wire Dbg_Capture;
  wire Dbg_Clk;
  wire Dbg_Continue;
  wire Dbg_Disable;
  wire [0:7]Dbg_Reg_En;
  wire Dbg_Shift;
  wire Dbg_Stop;
  wire Dbg_TDI;
  wire Dbg_TDO;
  wire Dbg_Update;
  wire Dbg_Wakeup;
  wire Debug_Rst;
  wire Ext_BRK;
  wire Ext_NM_BRK;
  wire Hibernate;
  wire ICE;
  wire IFetch;
  wire IReady;
  wire IUE;
  wire IWAIT;
  wire I_AS;
  wire [0:31]Instr;
  wire [0:31]Instr_Addr;
  wire Interrupt;
  wire [0:1]Interrupt_Ack;
  wire [0:31]Interrupt_Address;
  wire MB_Halted;
  wire [31:0]M_AXI_DP_ARADDR;
  wire [2:0]M_AXI_DP_ARPROT;
  wire M_AXI_DP_ARREADY;
  wire M_AXI_DP_ARVALID;
  wire [31:0]M_AXI_DP_AWADDR;
  wire [2:0]M_AXI_DP_AWPROT;
  wire M_AXI_DP_AWREADY;
  wire M_AXI_DP_AWVALID;
  wire M_AXI_DP_BREADY;
  wire [1:0]M_AXI_DP_BRESP;
  wire M_AXI_DP_BVALID;
  wire [31:0]M_AXI_DP_RDATA;
  wire M_AXI_DP_RREADY;
  wire [1:0]M_AXI_DP_RRESP;
  wire M_AXI_DP_RVALID;
  wire [31:0]M_AXI_DP_WDATA;
  wire M_AXI_DP_WREADY;
  wire [3:0]M_AXI_DP_WSTRB;
  wire M_AXI_DP_WVALID;
  wire [0:3]Non_Secure;
  wire Pause;
  wire Pause_Ack;
  wire Read_Strobe;
  wire Reset;
  wire [0:1]Reset_Mode;
  wire Sleep;
  wire Suspend;
  wire [0:1]Wakeup;
  wire Write_Strobe;
  wire NLW_U0_Dbg_ARREADY_UNCONNECTED;
  wire NLW_U0_Dbg_AWREADY_UNCONNECTED;
  wire NLW_U0_Dbg_BVALID_UNCONNECTED;
  wire NLW_U0_Dbg_Intr_UNCONNECTED;
  wire NLW_U0_Dbg_RVALID_UNCONNECTED;
  wire NLW_U0_Dbg_Trace_Valid_UNCONNECTED;
  wire NLW_U0_Dbg_WREADY_UNCONNECTED;
  wire NLW_U0_M0_AXIS_TLAST_UNCONNECTED;
  wire NLW_U0_M0_AXIS_TVALID_UNCONNECTED;
  wire NLW_U0_M10_AXIS_TLAST_UNCONNECTED;
  wire NLW_U0_M10_AXIS_TVALID_UNCONNECTED;
  wire NLW_U0_M11_AXIS_TLAST_UNCONNECTED;
  wire NLW_U0_M11_AXIS_TVALID_UNCONNECTED;
  wire NLW_U0_M12_AXIS_TLAST_UNCONNECTED;
  wire NLW_U0_M12_AXIS_TVALID_UNCONNECTED;
  wire NLW_U0_M13_AXIS_TLAST_UNCONNECTED;
  wire NLW_U0_M13_AXIS_TVALID_UNCONNECTED;
  wire NLW_U0_M14_AXIS_TLAST_UNCONNECTED;
  wire NLW_U0_M14_AXIS_TVALID_UNCONNECTED;
  wire NLW_U0_M15_AXIS_TLAST_UNCONNECTED;
  wire NLW_U0_M15_AXIS_TVALID_UNCONNECTED;
  wire NLW_U0_M1_AXIS_TLAST_UNCONNECTED;
  wire NLW_U0_M1_AXIS_TVALID_UNCONNECTED;
  wire NLW_U0_M2_AXIS_TLAST_UNCONNECTED;
  wire NLW_U0_M2_AXIS_TVALID_UNCONNECTED;
  wire NLW_U0_M3_AXIS_TLAST_UNCONNECTED;
  wire NLW_U0_M3_AXIS_TVALID_UNCONNECTED;
  wire NLW_U0_M4_AXIS_TLAST_UNCONNECTED;
  wire NLW_U0_M4_AXIS_TVALID_UNCONNECTED;
  wire NLW_U0_M5_AXIS_TLAST_UNCONNECTED;
  wire NLW_U0_M5_AXIS_TVALID_UNCONNECTED;
  wire NLW_U0_M6_AXIS_TLAST_UNCONNECTED;
  wire NLW_U0_M6_AXIS_TVALID_UNCONNECTED;
  wire NLW_U0_M7_AXIS_TLAST_UNCONNECTED;
  wire NLW_U0_M7_AXIS_TVALID_UNCONNECTED;
  wire NLW_U0_M8_AXIS_TLAST_UNCONNECTED;
  wire NLW_U0_M8_AXIS_TVALID_UNCONNECTED;
  wire NLW_U0_M9_AXIS_TLAST_UNCONNECTED;
  wire NLW_U0_M9_AXIS_TVALID_UNCONNECTED;
  wire NLW_U0_MB_Error_UNCONNECTED;
  wire NLW_U0_M_AXI_DC_ACREADY_UNCONNECTED;
  wire NLW_U0_M_AXI_DC_ARLOCK_UNCONNECTED;
  wire NLW_U0_M_AXI_DC_ARVALID_UNCONNECTED;
  wire NLW_U0_M_AXI_DC_AWLOCK_UNCONNECTED;
  wire NLW_U0_M_AXI_DC_AWVALID_UNCONNECTED;
  wire NLW_U0_M_AXI_DC_BREADY_UNCONNECTED;
  wire NLW_U0_M_AXI_DC_CDLAST_UNCONNECTED;
  wire NLW_U0_M_AXI_DC_CDVALID_UNCONNECTED;
  wire NLW_U0_M_AXI_DC_CRVALID_UNCONNECTED;
  wire NLW_U0_M_AXI_DC_RACK_UNCONNECTED;
  wire NLW_U0_M_AXI_DC_RREADY_UNCONNECTED;
  wire NLW_U0_M_AXI_DC_WACK_UNCONNECTED;
  wire NLW_U0_M_AXI_DC_WLAST_UNCONNECTED;
  wire NLW_U0_M_AXI_DC_WVALID_UNCONNECTED;
  wire NLW_U0_M_AXI_DP_ARLOCK_UNCONNECTED;
  wire NLW_U0_M_AXI_DP_AWLOCK_UNCONNECTED;
  wire NLW_U0_M_AXI_DP_WLAST_UNCONNECTED;
  wire NLW_U0_M_AXI_IC_ACREADY_UNCONNECTED;
  wire NLW_U0_M_AXI_IC_ARLOCK_UNCONNECTED;
  wire NLW_U0_M_AXI_IC_ARVALID_UNCONNECTED;
  wire NLW_U0_M_AXI_IC_AWLOCK_UNCONNECTED;
  wire NLW_U0_M_AXI_IC_AWVALID_UNCONNECTED;
  wire NLW_U0_M_AXI_IC_BREADY_UNCONNECTED;
  wire NLW_U0_M_AXI_IC_CDLAST_UNCONNECTED;
  wire NLW_U0_M_AXI_IC_CDVALID_UNCONNECTED;
  wire NLW_U0_M_AXI_IC_CRVALID_UNCONNECTED;
  wire NLW_U0_M_AXI_IC_RACK_UNCONNECTED;
  wire NLW_U0_M_AXI_IC_RREADY_UNCONNECTED;
  wire NLW_U0_M_AXI_IC_WACK_UNCONNECTED;
  wire NLW_U0_M_AXI_IC_WLAST_UNCONNECTED;
  wire NLW_U0_M_AXI_IC_WVALID_UNCONNECTED;
  wire NLW_U0_M_AXI_IP_ARLOCK_UNCONNECTED;
  wire NLW_U0_M_AXI_IP_ARVALID_UNCONNECTED;
  wire NLW_U0_M_AXI_IP_AWLOCK_UNCONNECTED;
  wire NLW_U0_M_AXI_IP_AWVALID_UNCONNECTED;
  wire NLW_U0_M_AXI_IP_BREADY_UNCONNECTED;
  wire NLW_U0_M_AXI_IP_RREADY_UNCONNECTED;
  wire NLW_U0_M_AXI_IP_WLAST_UNCONNECTED;
  wire NLW_U0_M_AXI_IP_WVALID_UNCONNECTED;
  wire NLW_U0_S0_AXIS_TREADY_UNCONNECTED;
  wire NLW_U0_S10_AXIS_TREADY_UNCONNECTED;
  wire NLW_U0_S11_AXIS_TREADY_UNCONNECTED;
  wire NLW_U0_S12_AXIS_TREADY_UNCONNECTED;
  wire NLW_U0_S13_AXIS_TREADY_UNCONNECTED;
  wire NLW_U0_S14_AXIS_TREADY_UNCONNECTED;
  wire NLW_U0_S15_AXIS_TREADY_UNCONNECTED;
  wire NLW_U0_S1_AXIS_TREADY_UNCONNECTED;
  wire NLW_U0_S2_AXIS_TREADY_UNCONNECTED;
  wire NLW_U0_S3_AXIS_TREADY_UNCONNECTED;
  wire NLW_U0_S4_AXIS_TREADY_UNCONNECTED;
  wire NLW_U0_S5_AXIS_TREADY_UNCONNECTED;
  wire NLW_U0_S6_AXIS_TREADY_UNCONNECTED;
  wire NLW_U0_S7_AXIS_TREADY_UNCONNECTED;
  wire NLW_U0_S8_AXIS_TREADY_UNCONNECTED;
  wire NLW_U0_S9_AXIS_TREADY_UNCONNECTED;
  wire NLW_U0_Trace_DCache_Hit_UNCONNECTED;
  wire NLW_U0_Trace_DCache_Rdy_UNCONNECTED;
  wire NLW_U0_Trace_DCache_Read_UNCONNECTED;
  wire NLW_U0_Trace_DCache_Req_UNCONNECTED;
  wire NLW_U0_Trace_Data_Access_UNCONNECTED;
  wire NLW_U0_Trace_Data_Read_UNCONNECTED;
  wire NLW_U0_Trace_Data_Write_UNCONNECTED;
  wire NLW_U0_Trace_Delay_Slot_UNCONNECTED;
  wire NLW_U0_Trace_EX_PipeRun_UNCONNECTED;
  wire NLW_U0_Trace_Exception_Taken_UNCONNECTED;
  wire NLW_U0_Trace_ICache_Hit_UNCONNECTED;
  wire NLW_U0_Trace_ICache_Rdy_UNCONNECTED;
  wire NLW_U0_Trace_ICache_Req_UNCONNECTED;
  wire NLW_U0_Trace_Jump_Hit_UNCONNECTED;
  wire NLW_U0_Trace_Jump_Taken_UNCONNECTED;
  wire NLW_U0_Trace_MB_Halted_UNCONNECTED;
  wire NLW_U0_Trace_MEM_PipeRun_UNCONNECTED;
  wire NLW_U0_Trace_OF_PipeRun_UNCONNECTED;
  wire NLW_U0_Trace_Reg_Write_UNCONNECTED;
  wire NLW_U0_Trace_Valid_Instr_UNCONNECTED;
  wire [1:0]NLW_U0_Dbg_BRESP_UNCONNECTED;
  wire [31:0]NLW_U0_Dbg_RDATA_UNCONNECTED;
  wire [1:0]NLW_U0_Dbg_RRESP_UNCONNECTED;
  wire [0:35]NLW_U0_Dbg_Trace_Data_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Ack_Out_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_In_UNCONNECTED;
  wire [0:4095]NLW_U0_LOCKSTEP_Master_Out_UNCONNECTED;
  wire [0:4095]NLW_U0_LOCKSTEP_Out_UNCONNECTED;
  wire [31:0]NLW_U0_M0_AXIS_TDATA_UNCONNECTED;
  wire [31:0]NLW_U0_M10_AXIS_TDATA_UNCONNECTED;
  wire [31:0]NLW_U0_M11_AXIS_TDATA_UNCONNECTED;
  wire [31:0]NLW_U0_M12_AXIS_TDATA_UNCONNECTED;
  wire [31:0]NLW_U0_M13_AXIS_TDATA_UNCONNECTED;
  wire [31:0]NLW_U0_M14_AXIS_TDATA_UNCONNECTED;
  wire [31:0]NLW_U0_M15_AXIS_TDATA_UNCONNECTED;
  wire [31:0]NLW_U0_M1_AXIS_TDATA_UNCONNECTED;
  wire [31:0]NLW_U0_M2_AXIS_TDATA_UNCONNECTED;
  wire [31:0]NLW_U0_M3_AXIS_TDATA_UNCONNECTED;
  wire [31:0]NLW_U0_M4_AXIS_TDATA_UNCONNECTED;
  wire [31:0]NLW_U0_M5_AXIS_TDATA_UNCONNECTED;
  wire [31:0]NLW_U0_M6_AXIS_TDATA_UNCONNECTED;
  wire [31:0]NLW_U0_M7_AXIS_TDATA_UNCONNECTED;
  wire [31:0]NLW_U0_M8_AXIS_TDATA_UNCONNECTED;
  wire [31:0]NLW_U0_M9_AXIS_TDATA_UNCONNECTED;
  wire [31:0]NLW_U0_M_AXI_DC_ARADDR_UNCONNECTED;
  wire [1:0]NLW_U0_M_AXI_DC_ARBAR_UNCONNECTED;
  wire [1:0]NLW_U0_M_AXI_DC_ARBURST_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_DC_ARCACHE_UNCONNECTED;
  wire [1:0]NLW_U0_M_AXI_DC_ARDOMAIN_UNCONNECTED;
  wire [0:0]NLW_U0_M_AXI_DC_ARID_UNCONNECTED;
  wire [7:0]NLW_U0_M_AXI_DC_ARLEN_UNCONNECTED;
  wire [2:0]NLW_U0_M_AXI_DC_ARPROT_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_DC_ARQOS_UNCONNECTED;
  wire [2:0]NLW_U0_M_AXI_DC_ARSIZE_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_DC_ARSNOOP_UNCONNECTED;
  wire [4:0]NLW_U0_M_AXI_DC_ARUSER_UNCONNECTED;
  wire [31:0]NLW_U0_M_AXI_DC_AWADDR_UNCONNECTED;
  wire [1:0]NLW_U0_M_AXI_DC_AWBAR_UNCONNECTED;
  wire [1:0]NLW_U0_M_AXI_DC_AWBURST_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_DC_AWCACHE_UNCONNECTED;
  wire [1:0]NLW_U0_M_AXI_DC_AWDOMAIN_UNCONNECTED;
  wire [0:0]NLW_U0_M_AXI_DC_AWID_UNCONNECTED;
  wire [7:0]NLW_U0_M_AXI_DC_AWLEN_UNCONNECTED;
  wire [2:0]NLW_U0_M_AXI_DC_AWPROT_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_DC_AWQOS_UNCONNECTED;
  wire [2:0]NLW_U0_M_AXI_DC_AWSIZE_UNCONNECTED;
  wire [2:0]NLW_U0_M_AXI_DC_AWSNOOP_UNCONNECTED;
  wire [4:0]NLW_U0_M_AXI_DC_AWUSER_UNCONNECTED;
  wire [31:0]NLW_U0_M_AXI_DC_CDDATA_UNCONNECTED;
  wire [4:0]NLW_U0_M_AXI_DC_CRRESP_UNCONNECTED;
  wire [31:0]NLW_U0_M_AXI_DC_WDATA_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_DC_WSTRB_UNCONNECTED;
  wire [0:0]NLW_U0_M_AXI_DC_WUSER_UNCONNECTED;
  wire [1:0]NLW_U0_M_AXI_DP_ARBURST_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_DP_ARCACHE_UNCONNECTED;
  wire [0:0]NLW_U0_M_AXI_DP_ARID_UNCONNECTED;
  wire [7:0]NLW_U0_M_AXI_DP_ARLEN_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_DP_ARQOS_UNCONNECTED;
  wire [2:0]NLW_U0_M_AXI_DP_ARSIZE_UNCONNECTED;
  wire [1:0]NLW_U0_M_AXI_DP_AWBURST_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_DP_AWCACHE_UNCONNECTED;
  wire [0:0]NLW_U0_M_AXI_DP_AWID_UNCONNECTED;
  wire [7:0]NLW_U0_M_AXI_DP_AWLEN_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_DP_AWQOS_UNCONNECTED;
  wire [2:0]NLW_U0_M_AXI_DP_AWSIZE_UNCONNECTED;
  wire [31:0]NLW_U0_M_AXI_IC_ARADDR_UNCONNECTED;
  wire [1:0]NLW_U0_M_AXI_IC_ARBAR_UNCONNECTED;
  wire [1:0]NLW_U0_M_AXI_IC_ARBURST_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_IC_ARCACHE_UNCONNECTED;
  wire [1:0]NLW_U0_M_AXI_IC_ARDOMAIN_UNCONNECTED;
  wire [0:0]NLW_U0_M_AXI_IC_ARID_UNCONNECTED;
  wire [7:0]NLW_U0_M_AXI_IC_ARLEN_UNCONNECTED;
  wire [2:0]NLW_U0_M_AXI_IC_ARPROT_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_IC_ARQOS_UNCONNECTED;
  wire [2:0]NLW_U0_M_AXI_IC_ARSIZE_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_IC_ARSNOOP_UNCONNECTED;
  wire [4:0]NLW_U0_M_AXI_IC_ARUSER_UNCONNECTED;
  wire [31:0]NLW_U0_M_AXI_IC_AWADDR_UNCONNECTED;
  wire [1:0]NLW_U0_M_AXI_IC_AWBAR_UNCONNECTED;
  wire [1:0]NLW_U0_M_AXI_IC_AWBURST_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_IC_AWCACHE_UNCONNECTED;
  wire [1:0]NLW_U0_M_AXI_IC_AWDOMAIN_UNCONNECTED;
  wire [0:0]NLW_U0_M_AXI_IC_AWID_UNCONNECTED;
  wire [7:0]NLW_U0_M_AXI_IC_AWLEN_UNCONNECTED;
  wire [2:0]NLW_U0_M_AXI_IC_AWPROT_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_IC_AWQOS_UNCONNECTED;
  wire [2:0]NLW_U0_M_AXI_IC_AWSIZE_UNCONNECTED;
  wire [2:0]NLW_U0_M_AXI_IC_AWSNOOP_UNCONNECTED;
  wire [4:0]NLW_U0_M_AXI_IC_AWUSER_UNCONNECTED;
  wire [31:0]NLW_U0_M_AXI_IC_CDDATA_UNCONNECTED;
  wire [4:0]NLW_U0_M_AXI_IC_CRRESP_UNCONNECTED;
  wire [31:0]NLW_U0_M_AXI_IC_WDATA_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_IC_WSTRB_UNCONNECTED;
  wire [0:0]NLW_U0_M_AXI_IC_WUSER_UNCONNECTED;
  wire [31:0]NLW_U0_M_AXI_IP_ARADDR_UNCONNECTED;
  wire [1:0]NLW_U0_M_AXI_IP_ARBURST_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_IP_ARCACHE_UNCONNECTED;
  wire [0:0]NLW_U0_M_AXI_IP_ARID_UNCONNECTED;
  wire [7:0]NLW_U0_M_AXI_IP_ARLEN_UNCONNECTED;
  wire [2:0]NLW_U0_M_AXI_IP_ARPROT_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_IP_ARQOS_UNCONNECTED;
  wire [2:0]NLW_U0_M_AXI_IP_ARSIZE_UNCONNECTED;
  wire [31:0]NLW_U0_M_AXI_IP_AWADDR_UNCONNECTED;
  wire [1:0]NLW_U0_M_AXI_IP_AWBURST_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_IP_AWCACHE_UNCONNECTED;
  wire [0:0]NLW_U0_M_AXI_IP_AWID_UNCONNECTED;
  wire [7:0]NLW_U0_M_AXI_IP_AWLEN_UNCONNECTED;
  wire [2:0]NLW_U0_M_AXI_IP_AWPROT_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_IP_AWQOS_UNCONNECTED;
  wire [2:0]NLW_U0_M_AXI_IP_AWSIZE_UNCONNECTED;
  wire [31:0]NLW_U0_M_AXI_IP_WDATA_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_IP_WSTRB_UNCONNECTED;
  wire [255:0]NLW_U0_RAM_From_UNCONNECTED;
  wire [0:31]NLW_U0_Trace_Data_Address_UNCONNECTED;
  wire [0:3]NLW_U0_Trace_Data_Byte_Enable_UNCONNECTED;
  wire [0:31]NLW_U0_Trace_Data_Write_Value_UNCONNECTED;
  wire [0:4]NLW_U0_Trace_Exception_Kind_UNCONNECTED;
  wire [0:31]NLW_U0_Trace_Instruction_UNCONNECTED;
  wire [0:14]NLW_U0_Trace_MSR_Reg_UNCONNECTED;
  wire [0:31]NLW_U0_Trace_New_Reg_Value_UNCONNECTED;
  wire [0:31]NLW_U0_Trace_PC_UNCONNECTED;
  wire [0:7]NLW_U0_Trace_PID_Reg_UNCONNECTED;
  wire [0:4]NLW_U0_Trace_Reg_Addr_UNCONNECTED;

  (* C_ADDR_TAG_BITS = "0" *) 
  (* C_ALLOW_DCACHE_WR = "1" *) 
  (* C_ALLOW_ICACHE_WR = "1" *) 
  (* C_AREA_OPTIMIZED = "1" *) 
  (* C_ASYNC_INTERRUPT = "1" *) 
  (* C_ASYNC_WAKEUP = "3" *) 
  (* C_AVOID_PRIMITIVES = "0" *) 
  (* C_BASE_VECTORS = "64'b0000000000000000000000000000000000000000000000000000000000000000" *) 
  (* C_BRANCH_TARGET_CACHE_SIZE = "0" *) 
  (* C_CACHE_BYTE_SIZE = "8192" *) 
  (* C_DADDR_SIZE = "32" *) 
  (* C_DATA_SIZE = "32" *) 
  (* C_DCACHE_ADDR_TAG = "0" *) 
  (* C_DCACHE_ALWAYS_USED = "1" *) 
  (* C_DCACHE_BASEADDR = "64'b0000000000000000000000000000000000000000000000000000000000000000" *) 
  (* C_DCACHE_BYTE_SIZE = "8192" *) 
  (* C_DCACHE_DATA_WIDTH = "0" *) 
  (* C_DCACHE_FORCE_TAG_LUTRAM = "0" *) 
  (* C_DCACHE_HIGHADDR = "64'b0000000000000000000000000000000000111111111111111111111111111111" *) 
  (* C_DCACHE_LINE_LEN = "4" *) 
  (* C_DCACHE_USE_WRITEBACK = "0" *) 
  (* C_DCACHE_VICTIMS = "0" *) 
  (* C_DEBUG_COUNTER_WIDTH = "32" *) 
  (* C_DEBUG_ENABLED = "1" *) 
  (* C_DEBUG_EVENT_COUNTERS = "5" *) 
  (* C_DEBUG_EXTERNAL_TRACE = "0" *) 
  (* C_DEBUG_INTERFACE = "0" *) 
  (* C_DEBUG_LATENCY_COUNTERS = "1" *) 
  (* C_DEBUG_PROFILE_SIZE = "0" *) 
  (* C_DEBUG_TRACE_ASYNC_RESET = "0" *) 
  (* C_DEBUG_TRACE_SIZE = "8192" *) 
  (* C_DIV_ZERO_EXCEPTION = "0" *) 
  (* C_DYNAMIC_BUS_SIZING = "0" *) 
  (* C_D_AXI = "1" *) 
  (* C_D_LMB = "1" *) 
  (* C_D_LMB_PROTOCOL = "0" *) 
  (* C_ECC_USE_CE_EXCEPTION = "0" *) 
  (* C_EDGE_IS_POSITIVE = "1" *) 
  (* C_ENDIANNESS = "1" *) 
  (* C_FAMILY = "artix7" *) 
  (* C_FAULT_TOLERANT = "0" *) 
  (* C_FPU_EXCEPTION = "0" *) 
  (* C_FREQ = "100000000" *) 
  (* C_FSL_EXCEPTION = "0" *) 
  (* C_FSL_LINKS = "0" *) 
  (* C_IADDR_SIZE = "32" *) 
  (* C_ICACHE_ALWAYS_USED = "1" *) 
  (* C_ICACHE_BASEADDR = "64'b0000000000000000000000000000000000000000000000000000000000000000" *) 
  (* C_ICACHE_DATA_WIDTH = "0" *) 
  (* C_ICACHE_FORCE_TAG_LUTRAM = "0" *) 
  (* C_ICACHE_HIGHADDR = "64'b0000000000000000000000000000000000111111111111111111111111111111" *) 
  (* C_ICACHE_LINE_LEN = "4" *) 
  (* C_ICACHE_STREAMS = "0" *) 
  (* C_ICACHE_VICTIMS = "0" *) 
  (* C_ILL_OPCODE_EXCEPTION = "0" *) 
  (* C_IMPRECISE_EXCEPTIONS = "0" *) 
  (* C_INSTANCE = "bd_6665_microblaze_I_0" *) 
  (* C_INSTR_SIZE = "32" *) 
  (* C_INTERCONNECT = "2" *) 
  (* C_INTERRUPT_IS_EDGE = "0" *) 
  (* C_I_AXI = "0" *) 
  (* C_I_LMB = "1" *) 
  (* C_I_LMB_PROTOCOL = "0" *) 
  (* C_LMB_DATA_SIZE = "32" *) 
  (* C_LOCKSTEP_MASTER = "0" *) 
  (* C_LOCKSTEP_SLAVE = "0" *) 
  (* C_M0_AXIS_DATA_WIDTH = "32" *) 
  (* C_M10_AXIS_DATA_WIDTH = "32" *) 
  (* C_M11_AXIS_DATA_WIDTH = "32" *) 
  (* C_M12_AXIS_DATA_WIDTH = "32" *) 
  (* C_M13_AXIS_DATA_WIDTH = "32" *) 
  (* C_M14_AXIS_DATA_WIDTH = "32" *) 
  (* C_M15_AXIS_DATA_WIDTH = "32" *) 
  (* C_M1_AXIS_DATA_WIDTH = "32" *) 
  (* C_M2_AXIS_DATA_WIDTH = "32" *) 
  (* C_M3_AXIS_DATA_WIDTH = "32" *) 
  (* C_M4_AXIS_DATA_WIDTH = "32" *) 
  (* C_M5_AXIS_DATA_WIDTH = "32" *) 
  (* C_M6_AXIS_DATA_WIDTH = "32" *) 
  (* C_M7_AXIS_DATA_WIDTH = "32" *) 
  (* C_M8_AXIS_DATA_WIDTH = "32" *) 
  (* C_M9_AXIS_DATA_WIDTH = "32" *) 
  (* C_MMU_DTLB_SIZE = "4" *) 
  (* C_MMU_ITLB_SIZE = "2" *) 
  (* C_MMU_PRIVILEGED_INSTR = "0" *) 
  (* C_MMU_TLB_ACCESS = "3" *) 
  (* C_MMU_ZONES = "16" *) 
  (* C_M_AXI_DC_ADDR_WIDTH = "32" *) 
  (* C_M_AXI_DC_ARUSER_WIDTH = "5" *) 
  (* C_M_AXI_DC_AWUSER_WIDTH = "5" *) 
  (* C_M_AXI_DC_BUSER_WIDTH = "1" *) 
  (* C_M_AXI_DC_DATA_WIDTH = "32" *) 
  (* C_M_AXI_DC_EXCLUSIVE_ACCESS = "0" *) 
  (* C_M_AXI_DC_RUSER_WIDTH = "1" *) 
  (* C_M_AXI_DC_THREAD_ID_WIDTH = "1" *) 
  (* C_M_AXI_DC_USER_VALUE = "31" *) 
  (* C_M_AXI_DC_WUSER_WIDTH = "1" *) 
  (* C_M_AXI_DP_ADDR_WIDTH = "32" *) 
  (* C_M_AXI_DP_DATA_WIDTH = "32" *) 
  (* C_M_AXI_DP_EXCLUSIVE_ACCESS = "0" *) 
  (* C_M_AXI_DP_THREAD_ID_WIDTH = "1" *) 
  (* C_M_AXI_D_BUS_EXCEPTION = "0" *) 
  (* C_M_AXI_IC_ADDR_WIDTH = "32" *) 
  (* C_M_AXI_IC_ARUSER_WIDTH = "5" *) 
  (* C_M_AXI_IC_AWUSER_WIDTH = "5" *) 
  (* C_M_AXI_IC_BUSER_WIDTH = "1" *) 
  (* C_M_AXI_IC_DATA_WIDTH = "32" *) 
  (* C_M_AXI_IC_RUSER_WIDTH = "1" *) 
  (* C_M_AXI_IC_THREAD_ID_WIDTH = "1" *) 
  (* C_M_AXI_IC_USER_VALUE = "31" *) 
  (* C_M_AXI_IC_WUSER_WIDTH = "1" *) 
  (* C_M_AXI_IP_ADDR_WIDTH = "32" *) 
  (* C_M_AXI_IP_DATA_WIDTH = "32" *) 
  (* C_M_AXI_IP_THREAD_ID_WIDTH = "1" *) 
  (* C_M_AXI_I_BUS_EXCEPTION = "0" *) 
  (* C_NUMBER_OF_PC_BRK = "1" *) 
  (* C_NUMBER_OF_RD_ADDR_BRK = "0" *) 
  (* C_NUMBER_OF_WR_ADDR_BRK = "0" *) 
  (* C_NUM_SYNC_FF_CLK = "2" *) 
  (* C_NUM_SYNC_FF_CLK_DEBUG = "2" *) 
  (* C_NUM_SYNC_FF_CLK_IRQ = "1" *) 
  (* C_NUM_SYNC_FF_DBG_CLK = "1" *) 
  (* C_NUM_SYNC_FF_DBG_TRACE_CLK = "2" *) 
  (* C_OPCODE_0x0_ILLEGAL = "0" *) 
  (* C_OPTIMIZATION = "0" *) 
  (* C_PC_WIDTH = "16" *) 
  (* C_PIADDR_SIZE = "32" *) 
  (* C_PVR = "0" *) 
  (* C_PVR_USER1 = "8'b00000000" *) 
  (* C_PVR_USER2 = "0" *) 
  (* C_RESET_MSR = "0" *) 
  (* C_S0_AXIS_DATA_WIDTH = "32" *) 
  (* C_S10_AXIS_DATA_WIDTH = "32" *) 
  (* C_S11_AXIS_DATA_WIDTH = "32" *) 
  (* C_S12_AXIS_DATA_WIDTH = "32" *) 
  (* C_S13_AXIS_DATA_WIDTH = "32" *) 
  (* C_S14_AXIS_DATA_WIDTH = "32" *) 
  (* C_S15_AXIS_DATA_WIDTH = "32" *) 
  (* C_S1_AXIS_DATA_WIDTH = "32" *) 
  (* C_S2_AXIS_DATA_WIDTH = "32" *) 
  (* C_S3_AXIS_DATA_WIDTH = "32" *) 
  (* C_S4_AXIS_DATA_WIDTH = "32" *) 
  (* C_S5_AXIS_DATA_WIDTH = "32" *) 
  (* C_S6_AXIS_DATA_WIDTH = "32" *) 
  (* C_S7_AXIS_DATA_WIDTH = "32" *) 
  (* C_S8_AXIS_DATA_WIDTH = "32" *) 
  (* C_S9_AXIS_DATA_WIDTH = "32" *) 
  (* C_SCO = "0" *) 
  (* C_UNALIGNED_EXCEPTIONS = "0" *) 
  (* C_USE_BARREL = "0" *) 
  (* C_USE_BRANCH_TARGET_CACHE = "0" *) 
  (* C_USE_CONFIG_RESET = "0" *) 
  (* C_USE_DCACHE = "0" *) 
  (* C_USE_DIV = "0" *) 
  (* C_USE_EXTENDED_FSL_INSTR = "0" *) 
  (* C_USE_EXT_BRK = "0" *) 
  (* C_USE_EXT_NM_BRK = "0" *) 
  (* C_USE_FPU = "0" *) 
  (* C_USE_HW_MUL = "0" *) 
  (* C_USE_ICACHE = "0" *) 
  (* C_USE_INTERRUPT = "2" *) 
  (* C_USE_MMU = "0" *) 
  (* C_USE_MSR_INSTR = "0" *) 
  (* C_USE_NON_SECURE = "0" *) 
  (* C_USE_PCMP_INSTR = "0" *) 
  (* C_USE_REORDER_INSTR = "0" *) 
  (* C_USE_STACK_PROTECTION = "0" *) 
  (* downgradeipidentifiedwarnings = "yes" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MicroBlaze U0
       (.Byte_Enable(Byte_Enable),
        .Clk(Clk),
        .Config_Reset(1'b0),
        .DCE(DCE),
        .DEBUG_ACLK(1'b0),
        .DEBUG_ARESETN(1'b0),
        .DReady(DReady),
        .DUE(DUE),
        .DWait(DWait),
        .D_AS(D_AS),
        .Data_Addr(Data_Addr),
        .Data_Read(Data_Read),
        .Data_Write(Data_Write),
        .Dbg_ARADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_ARREADY(NLW_U0_Dbg_ARREADY_UNCONNECTED),
        .Dbg_ARVALID(1'b0),
        .Dbg_AWADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_AWREADY(NLW_U0_Dbg_AWREADY_UNCONNECTED),
        .Dbg_AWVALID(1'b0),
        .Dbg_BREADY(1'b0),
        .Dbg_BRESP(NLW_U0_Dbg_BRESP_UNCONNECTED[1:0]),
        .Dbg_BVALID(NLW_U0_Dbg_BVALID_UNCONNECTED),
        .Dbg_Capture(Dbg_Capture),
        .Dbg_Clk(Dbg_Clk),
        .Dbg_Continue(Dbg_Continue),
        .Dbg_Disable(Dbg_Disable),
        .Dbg_Intr(NLW_U0_Dbg_Intr_UNCONNECTED),
        .Dbg_RDATA(NLW_U0_Dbg_RDATA_UNCONNECTED[31:0]),
        .Dbg_RREADY(1'b0),
        .Dbg_RRESP(NLW_U0_Dbg_RRESP_UNCONNECTED[1:0]),
        .Dbg_RVALID(NLW_U0_Dbg_RVALID_UNCONNECTED),
        .Dbg_Reg_En(Dbg_Reg_En),
        .Dbg_Shift(Dbg_Shift),
        .Dbg_Stop(Dbg_Stop),
        .Dbg_TDI(Dbg_TDI),
        .Dbg_TDO(Dbg_TDO),
        .Dbg_Trace_Clk(1'b0),
        .Dbg_Trace_Data(NLW_U0_Dbg_Trace_Data_UNCONNECTED[0:35]),
        .Dbg_Trace_Ready(1'b0),
        .Dbg_Trace_Valid(NLW_U0_Dbg_Trace_Valid_UNCONNECTED),
        .Dbg_Trig_Ack_In({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_Trig_Ack_Out(NLW_U0_Dbg_Trig_Ack_Out_UNCONNECTED[0:7]),
        .Dbg_Trig_In(NLW_U0_Dbg_Trig_In_UNCONNECTED[0:7]),
        .Dbg_Trig_Out({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_Update(Dbg_Update),
        .Dbg_WDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_WREADY(NLW_U0_Dbg_WREADY_UNCONNECTED),
        .Dbg_WVALID(1'b0),
        .Dbg_Wakeup(Dbg_Wakeup),
        .Debug_Rst(Debug_Rst),
        .Ext_BRK(Ext_BRK),
        .Ext_NM_BRK(Ext_NM_BRK),
        .Hibernate(Hibernate),
        .ICE(ICE),
        .IFetch(IFetch),
        .IReady(IReady),
        .IUE(IUE),
        .IWAIT(IWAIT),
        .I_AS(I_AS),
        .Instr(Instr),
        .Instr_Addr(Instr_Addr),
        .Interrupt(Interrupt),
        .Interrupt_Ack(Interrupt_Ack),
        .Interrupt_Address(Interrupt_Address),
        .LOCKSTEP_Master_Out(NLW_U0_LOCKSTEP_Master_Out_UNCONNECTED[0:4095]),
        .LOCKSTEP_Out(NLW_U0_LOCKSTEP_Out_UNCONNECTED[0:4095]),
        .LOCKSTEP_Slave_In({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .M0_AXIS_TDATA(NLW_U0_M0_AXIS_TDATA_UNCONNECTED[31:0]),
        .M0_AXIS_TLAST(NLW_U0_M0_AXIS_TLAST_UNCONNECTED),
        .M0_AXIS_TREADY(1'b0),
        .M0_AXIS_TVALID(NLW_U0_M0_AXIS_TVALID_UNCONNECTED),
        .M10_AXIS_TDATA(NLW_U0_M10_AXIS_TDATA_UNCONNECTED[31:0]),
        .M10_AXIS_TLAST(NLW_U0_M10_AXIS_TLAST_UNCONNECTED),
        .M10_AXIS_TREADY(1'b0),
        .M10_AXIS_TVALID(NLW_U0_M10_AXIS_TVALID_UNCONNECTED),
        .M11_AXIS_TDATA(NLW_U0_M11_AXIS_TDATA_UNCONNECTED[31:0]),
        .M11_AXIS_TLAST(NLW_U0_M11_AXIS_TLAST_UNCONNECTED),
        .M11_AXIS_TREADY(1'b0),
        .M11_AXIS_TVALID(NLW_U0_M11_AXIS_TVALID_UNCONNECTED),
        .M12_AXIS_TDATA(NLW_U0_M12_AXIS_TDATA_UNCONNECTED[31:0]),
        .M12_AXIS_TLAST(NLW_U0_M12_AXIS_TLAST_UNCONNECTED),
        .M12_AXIS_TREADY(1'b0),
        .M12_AXIS_TVALID(NLW_U0_M12_AXIS_TVALID_UNCONNECTED),
        .M13_AXIS_TDATA(NLW_U0_M13_AXIS_TDATA_UNCONNECTED[31:0]),
        .M13_AXIS_TLAST(NLW_U0_M13_AXIS_TLAST_UNCONNECTED),
        .M13_AXIS_TREADY(1'b0),
        .M13_AXIS_TVALID(NLW_U0_M13_AXIS_TVALID_UNCONNECTED),
        .M14_AXIS_TDATA(NLW_U0_M14_AXIS_TDATA_UNCONNECTED[31:0]),
        .M14_AXIS_TLAST(NLW_U0_M14_AXIS_TLAST_UNCONNECTED),
        .M14_AXIS_TREADY(1'b0),
        .M14_AXIS_TVALID(NLW_U0_M14_AXIS_TVALID_UNCONNECTED),
        .M15_AXIS_TDATA(NLW_U0_M15_AXIS_TDATA_UNCONNECTED[31:0]),
        .M15_AXIS_TLAST(NLW_U0_M15_AXIS_TLAST_UNCONNECTED),
        .M15_AXIS_TREADY(1'b0),
        .M15_AXIS_TVALID(NLW_U0_M15_AXIS_TVALID_UNCONNECTED),
        .M1_AXIS_TDATA(NLW_U0_M1_AXIS_TDATA_UNCONNECTED[31:0]),
        .M1_AXIS_TLAST(NLW_U0_M1_AXIS_TLAST_UNCONNECTED),
        .M1_AXIS_TREADY(1'b0),
        .M1_AXIS_TVALID(NLW_U0_M1_AXIS_TVALID_UNCONNECTED),
        .M2_AXIS_TDATA(NLW_U0_M2_AXIS_TDATA_UNCONNECTED[31:0]),
        .M2_AXIS_TLAST(NLW_U0_M2_AXIS_TLAST_UNCONNECTED),
        .M2_AXIS_TREADY(1'b0),
        .M2_AXIS_TVALID(NLW_U0_M2_AXIS_TVALID_UNCONNECTED),
        .M3_AXIS_TDATA(NLW_U0_M3_AXIS_TDATA_UNCONNECTED[31:0]),
        .M3_AXIS_TLAST(NLW_U0_M3_AXIS_TLAST_UNCONNECTED),
        .M3_AXIS_TREADY(1'b0),
        .M3_AXIS_TVALID(NLW_U0_M3_AXIS_TVALID_UNCONNECTED),
        .M4_AXIS_TDATA(NLW_U0_M4_AXIS_TDATA_UNCONNECTED[31:0]),
        .M4_AXIS_TLAST(NLW_U0_M4_AXIS_TLAST_UNCONNECTED),
        .M4_AXIS_TREADY(1'b0),
        .M4_AXIS_TVALID(NLW_U0_M4_AXIS_TVALID_UNCONNECTED),
        .M5_AXIS_TDATA(NLW_U0_M5_AXIS_TDATA_UNCONNECTED[31:0]),
        .M5_AXIS_TLAST(NLW_U0_M5_AXIS_TLAST_UNCONNECTED),
        .M5_AXIS_TREADY(1'b0),
        .M5_AXIS_TVALID(NLW_U0_M5_AXIS_TVALID_UNCONNECTED),
        .M6_AXIS_TDATA(NLW_U0_M6_AXIS_TDATA_UNCONNECTED[31:0]),
        .M6_AXIS_TLAST(NLW_U0_M6_AXIS_TLAST_UNCONNECTED),
        .M6_AXIS_TREADY(1'b0),
        .M6_AXIS_TVALID(NLW_U0_M6_AXIS_TVALID_UNCONNECTED),
        .M7_AXIS_TDATA(NLW_U0_M7_AXIS_TDATA_UNCONNECTED[31:0]),
        .M7_AXIS_TLAST(NLW_U0_M7_AXIS_TLAST_UNCONNECTED),
        .M7_AXIS_TREADY(1'b0),
        .M7_AXIS_TVALID(NLW_U0_M7_AXIS_TVALID_UNCONNECTED),
        .M8_AXIS_TDATA(NLW_U0_M8_AXIS_TDATA_UNCONNECTED[31:0]),
        .M8_AXIS_TLAST(NLW_U0_M8_AXIS_TLAST_UNCONNECTED),
        .M8_AXIS_TREADY(1'b0),
        .M8_AXIS_TVALID(NLW_U0_M8_AXIS_TVALID_UNCONNECTED),
        .M9_AXIS_TDATA(NLW_U0_M9_AXIS_TDATA_UNCONNECTED[31:0]),
        .M9_AXIS_TLAST(NLW_U0_M9_AXIS_TLAST_UNCONNECTED),
        .M9_AXIS_TREADY(1'b0),
        .M9_AXIS_TVALID(NLW_U0_M9_AXIS_TVALID_UNCONNECTED),
        .MB_Error(NLW_U0_MB_Error_UNCONNECTED),
        .MB_Halted(MB_Halted),
        .M_AXI_DC_ACADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .M_AXI_DC_ACPROT({1'b0,1'b0,1'b0}),
        .M_AXI_DC_ACREADY(NLW_U0_M_AXI_DC_ACREADY_UNCONNECTED),
        .M_AXI_DC_ACSNOOP({1'b0,1'b0,1'b0,1'b0}),
        .M_AXI_DC_ACVALID(1'b0),
        .M_AXI_DC_ARADDR(NLW_U0_M_AXI_DC_ARADDR_UNCONNECTED[31:0]),
        .M_AXI_DC_ARBAR(NLW_U0_M_AXI_DC_ARBAR_UNCONNECTED[1:0]),
        .M_AXI_DC_ARBURST(NLW_U0_M_AXI_DC_ARBURST_UNCONNECTED[1:0]),
        .M_AXI_DC_ARCACHE(NLW_U0_M_AXI_DC_ARCACHE_UNCONNECTED[3:0]),
        .M_AXI_DC_ARDOMAIN(NLW_U0_M_AXI_DC_ARDOMAIN_UNCONNECTED[1:0]),
        .M_AXI_DC_ARID(NLW_U0_M_AXI_DC_ARID_UNCONNECTED[0]),
        .M_AXI_DC_ARLEN(NLW_U0_M_AXI_DC_ARLEN_UNCONNECTED[7:0]),
        .M_AXI_DC_ARLOCK(NLW_U0_M_AXI_DC_ARLOCK_UNCONNECTED),
        .M_AXI_DC_ARPROT(NLW_U0_M_AXI_DC_ARPROT_UNCONNECTED[2:0]),
        .M_AXI_DC_ARQOS(NLW_U0_M_AXI_DC_ARQOS_UNCONNECTED[3:0]),
        .M_AXI_DC_ARREADY(1'b0),
        .M_AXI_DC_ARSIZE(NLW_U0_M_AXI_DC_ARSIZE_UNCONNECTED[2:0]),
        .M_AXI_DC_ARSNOOP(NLW_U0_M_AXI_DC_ARSNOOP_UNCONNECTED[3:0]),
        .M_AXI_DC_ARUSER(NLW_U0_M_AXI_DC_ARUSER_UNCONNECTED[4:0]),
        .M_AXI_DC_ARVALID(NLW_U0_M_AXI_DC_ARVALID_UNCONNECTED),
        .M_AXI_DC_AWADDR(NLW_U0_M_AXI_DC_AWADDR_UNCONNECTED[31:0]),
        .M_AXI_DC_AWBAR(NLW_U0_M_AXI_DC_AWBAR_UNCONNECTED[1:0]),
        .M_AXI_DC_AWBURST(NLW_U0_M_AXI_DC_AWBURST_UNCONNECTED[1:0]),
        .M_AXI_DC_AWCACHE(NLW_U0_M_AXI_DC_AWCACHE_UNCONNECTED[3:0]),
        .M_AXI_DC_AWDOMAIN(NLW_U0_M_AXI_DC_AWDOMAIN_UNCONNECTED[1:0]),
        .M_AXI_DC_AWID(NLW_U0_M_AXI_DC_AWID_UNCONNECTED[0]),
        .M_AXI_DC_AWLEN(NLW_U0_M_AXI_DC_AWLEN_UNCONNECTED[7:0]),
        .M_AXI_DC_AWLOCK(NLW_U0_M_AXI_DC_AWLOCK_UNCONNECTED),
        .M_AXI_DC_AWPROT(NLW_U0_M_AXI_DC_AWPROT_UNCONNECTED[2:0]),
        .M_AXI_DC_AWQOS(NLW_U0_M_AXI_DC_AWQOS_UNCONNECTED[3:0]),
        .M_AXI_DC_AWREADY(1'b0),
        .M_AXI_DC_AWSIZE(NLW_U0_M_AXI_DC_AWSIZE_UNCONNECTED[2:0]),
        .M_AXI_DC_AWSNOOP(NLW_U0_M_AXI_DC_AWSNOOP_UNCONNECTED[2:0]),
        .M_AXI_DC_AWUSER(NLW_U0_M_AXI_DC_AWUSER_UNCONNECTED[4:0]),
        .M_AXI_DC_AWVALID(NLW_U0_M_AXI_DC_AWVALID_UNCONNECTED),
        .M_AXI_DC_BID(1'b0),
        .M_AXI_DC_BREADY(NLW_U0_M_AXI_DC_BREADY_UNCONNECTED),
        .M_AXI_DC_BRESP({1'b0,1'b0}),
        .M_AXI_DC_BUSER(1'b0),
        .M_AXI_DC_BVALID(1'b0),
        .M_AXI_DC_CDDATA(NLW_U0_M_AXI_DC_CDDATA_UNCONNECTED[31:0]),
        .M_AXI_DC_CDLAST(NLW_U0_M_AXI_DC_CDLAST_UNCONNECTED),
        .M_AXI_DC_CDREADY(1'b0),
        .M_AXI_DC_CDVALID(NLW_U0_M_AXI_DC_CDVALID_UNCONNECTED),
        .M_AXI_DC_CRREADY(1'b0),
        .M_AXI_DC_CRRESP(NLW_U0_M_AXI_DC_CRRESP_UNCONNECTED[4:0]),
        .M_AXI_DC_CRVALID(NLW_U0_M_AXI_DC_CRVALID_UNCONNECTED),
        .M_AXI_DC_RACK(NLW_U0_M_AXI_DC_RACK_UNCONNECTED),
        .M_AXI_DC_RDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .M_AXI_DC_RID(1'b0),
        .M_AXI_DC_RLAST(1'b0),
        .M_AXI_DC_RREADY(NLW_U0_M_AXI_DC_RREADY_UNCONNECTED),
        .M_AXI_DC_RRESP({1'b0,1'b0}),
        .M_AXI_DC_RUSER(1'b0),
        .M_AXI_DC_RVALID(1'b0),
        .M_AXI_DC_WACK(NLW_U0_M_AXI_DC_WACK_UNCONNECTED),
        .M_AXI_DC_WDATA(NLW_U0_M_AXI_DC_WDATA_UNCONNECTED[31:0]),
        .M_AXI_DC_WLAST(NLW_U0_M_AXI_DC_WLAST_UNCONNECTED),
        .M_AXI_DC_WREADY(1'b0),
        .M_AXI_DC_WSTRB(NLW_U0_M_AXI_DC_WSTRB_UNCONNECTED[3:0]),
        .M_AXI_DC_WUSER(NLW_U0_M_AXI_DC_WUSER_UNCONNECTED[0]),
        .M_AXI_DC_WVALID(NLW_U0_M_AXI_DC_WVALID_UNCONNECTED),
        .M_AXI_DP_ARADDR(M_AXI_DP_ARADDR),
        .M_AXI_DP_ARBURST(NLW_U0_M_AXI_DP_ARBURST_UNCONNECTED[1:0]),
        .M_AXI_DP_ARCACHE(NLW_U0_M_AXI_DP_ARCACHE_UNCONNECTED[3:0]),
        .M_AXI_DP_ARID(NLW_U0_M_AXI_DP_ARID_UNCONNECTED[0]),
        .M_AXI_DP_ARLEN(NLW_U0_M_AXI_DP_ARLEN_UNCONNECTED[7:0]),
        .M_AXI_DP_ARLOCK(NLW_U0_M_AXI_DP_ARLOCK_UNCONNECTED),
        .M_AXI_DP_ARPROT(M_AXI_DP_ARPROT),
        .M_AXI_DP_ARQOS(NLW_U0_M_AXI_DP_ARQOS_UNCONNECTED[3:0]),
        .M_AXI_DP_ARREADY(M_AXI_DP_ARREADY),
        .M_AXI_DP_ARSIZE(NLW_U0_M_AXI_DP_ARSIZE_UNCONNECTED[2:0]),
        .M_AXI_DP_ARVALID(M_AXI_DP_ARVALID),
        .M_AXI_DP_AWADDR(M_AXI_DP_AWADDR),
        .M_AXI_DP_AWBURST(NLW_U0_M_AXI_DP_AWBURST_UNCONNECTED[1:0]),
        .M_AXI_DP_AWCACHE(NLW_U0_M_AXI_DP_AWCACHE_UNCONNECTED[3:0]),
        .M_AXI_DP_AWID(NLW_U0_M_AXI_DP_AWID_UNCONNECTED[0]),
        .M_AXI_DP_AWLEN(NLW_U0_M_AXI_DP_AWLEN_UNCONNECTED[7:0]),
        .M_AXI_DP_AWLOCK(NLW_U0_M_AXI_DP_AWLOCK_UNCONNECTED),
        .M_AXI_DP_AWPROT(M_AXI_DP_AWPROT),
        .M_AXI_DP_AWQOS(NLW_U0_M_AXI_DP_AWQOS_UNCONNECTED[3:0]),
        .M_AXI_DP_AWREADY(M_AXI_DP_AWREADY),
        .M_AXI_DP_AWSIZE(NLW_U0_M_AXI_DP_AWSIZE_UNCONNECTED[2:0]),
        .M_AXI_DP_AWVALID(M_AXI_DP_AWVALID),
        .M_AXI_DP_BID(1'b0),
        .M_AXI_DP_BREADY(M_AXI_DP_BREADY),
        .M_AXI_DP_BRESP(M_AXI_DP_BRESP),
        .M_AXI_DP_BVALID(M_AXI_DP_BVALID),
        .M_AXI_DP_RDATA(M_AXI_DP_RDATA),
        .M_AXI_DP_RID(1'b0),
        .M_AXI_DP_RLAST(1'b0),
        .M_AXI_DP_RREADY(M_AXI_DP_RREADY),
        .M_AXI_DP_RRESP(M_AXI_DP_RRESP),
        .M_AXI_DP_RVALID(M_AXI_DP_RVALID),
        .M_AXI_DP_WDATA(M_AXI_DP_WDATA),
        .M_AXI_DP_WLAST(NLW_U0_M_AXI_DP_WLAST_UNCONNECTED),
        .M_AXI_DP_WREADY(M_AXI_DP_WREADY),
        .M_AXI_DP_WSTRB(M_AXI_DP_WSTRB),
        .M_AXI_DP_WVALID(M_AXI_DP_WVALID),
        .M_AXI_IC_ACADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .M_AXI_IC_ACPROT({1'b0,1'b0,1'b0}),
        .M_AXI_IC_ACREADY(NLW_U0_M_AXI_IC_ACREADY_UNCONNECTED),
        .M_AXI_IC_ACSNOOP({1'b0,1'b0,1'b0,1'b0}),
        .M_AXI_IC_ACVALID(1'b0),
        .M_AXI_IC_ARADDR(NLW_U0_M_AXI_IC_ARADDR_UNCONNECTED[31:0]),
        .M_AXI_IC_ARBAR(NLW_U0_M_AXI_IC_ARBAR_UNCONNECTED[1:0]),
        .M_AXI_IC_ARBURST(NLW_U0_M_AXI_IC_ARBURST_UNCONNECTED[1:0]),
        .M_AXI_IC_ARCACHE(NLW_U0_M_AXI_IC_ARCACHE_UNCONNECTED[3:0]),
        .M_AXI_IC_ARDOMAIN(NLW_U0_M_AXI_IC_ARDOMAIN_UNCONNECTED[1:0]),
        .M_AXI_IC_ARID(NLW_U0_M_AXI_IC_ARID_UNCONNECTED[0]),
        .M_AXI_IC_ARLEN(NLW_U0_M_AXI_IC_ARLEN_UNCONNECTED[7:0]),
        .M_AXI_IC_ARLOCK(NLW_U0_M_AXI_IC_ARLOCK_UNCONNECTED),
        .M_AXI_IC_ARPROT(NLW_U0_M_AXI_IC_ARPROT_UNCONNECTED[2:0]),
        .M_AXI_IC_ARQOS(NLW_U0_M_AXI_IC_ARQOS_UNCONNECTED[3:0]),
        .M_AXI_IC_ARREADY(1'b0),
        .M_AXI_IC_ARSIZE(NLW_U0_M_AXI_IC_ARSIZE_UNCONNECTED[2:0]),
        .M_AXI_IC_ARSNOOP(NLW_U0_M_AXI_IC_ARSNOOP_UNCONNECTED[3:0]),
        .M_AXI_IC_ARUSER(NLW_U0_M_AXI_IC_ARUSER_UNCONNECTED[4:0]),
        .M_AXI_IC_ARVALID(NLW_U0_M_AXI_IC_ARVALID_UNCONNECTED),
        .M_AXI_IC_AWADDR(NLW_U0_M_AXI_IC_AWADDR_UNCONNECTED[31:0]),
        .M_AXI_IC_AWBAR(NLW_U0_M_AXI_IC_AWBAR_UNCONNECTED[1:0]),
        .M_AXI_IC_AWBURST(NLW_U0_M_AXI_IC_AWBURST_UNCONNECTED[1:0]),
        .M_AXI_IC_AWCACHE(NLW_U0_M_AXI_IC_AWCACHE_UNCONNECTED[3:0]),
        .M_AXI_IC_AWDOMAIN(NLW_U0_M_AXI_IC_AWDOMAIN_UNCONNECTED[1:0]),
        .M_AXI_IC_AWID(NLW_U0_M_AXI_IC_AWID_UNCONNECTED[0]),
        .M_AXI_IC_AWLEN(NLW_U0_M_AXI_IC_AWLEN_UNCONNECTED[7:0]),
        .M_AXI_IC_AWLOCK(NLW_U0_M_AXI_IC_AWLOCK_UNCONNECTED),
        .M_AXI_IC_AWPROT(NLW_U0_M_AXI_IC_AWPROT_UNCONNECTED[2:0]),
        .M_AXI_IC_AWQOS(NLW_U0_M_AXI_IC_AWQOS_UNCONNECTED[3:0]),
        .M_AXI_IC_AWREADY(1'b0),
        .M_AXI_IC_AWSIZE(NLW_U0_M_AXI_IC_AWSIZE_UNCONNECTED[2:0]),
        .M_AXI_IC_AWSNOOP(NLW_U0_M_AXI_IC_AWSNOOP_UNCONNECTED[2:0]),
        .M_AXI_IC_AWUSER(NLW_U0_M_AXI_IC_AWUSER_UNCONNECTED[4:0]),
        .M_AXI_IC_AWVALID(NLW_U0_M_AXI_IC_AWVALID_UNCONNECTED),
        .M_AXI_IC_BID(1'b0),
        .M_AXI_IC_BREADY(NLW_U0_M_AXI_IC_BREADY_UNCONNECTED),
        .M_AXI_IC_BRESP({1'b0,1'b0}),
        .M_AXI_IC_BUSER(1'b0),
        .M_AXI_IC_BVALID(1'b0),
        .M_AXI_IC_CDDATA(NLW_U0_M_AXI_IC_CDDATA_UNCONNECTED[31:0]),
        .M_AXI_IC_CDLAST(NLW_U0_M_AXI_IC_CDLAST_UNCONNECTED),
        .M_AXI_IC_CDREADY(1'b0),
        .M_AXI_IC_CDVALID(NLW_U0_M_AXI_IC_CDVALID_UNCONNECTED),
        .M_AXI_IC_CRREADY(1'b0),
        .M_AXI_IC_CRRESP(NLW_U0_M_AXI_IC_CRRESP_UNCONNECTED[4:0]),
        .M_AXI_IC_CRVALID(NLW_U0_M_AXI_IC_CRVALID_UNCONNECTED),
        .M_AXI_IC_RACK(NLW_U0_M_AXI_IC_RACK_UNCONNECTED),
        .M_AXI_IC_RDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .M_AXI_IC_RID(1'b0),
        .M_AXI_IC_RLAST(1'b0),
        .M_AXI_IC_RREADY(NLW_U0_M_AXI_IC_RREADY_UNCONNECTED),
        .M_AXI_IC_RRESP({1'b0,1'b0}),
        .M_AXI_IC_RUSER(1'b0),
        .M_AXI_IC_RVALID(1'b0),
        .M_AXI_IC_WACK(NLW_U0_M_AXI_IC_WACK_UNCONNECTED),
        .M_AXI_IC_WDATA(NLW_U0_M_AXI_IC_WDATA_UNCONNECTED[31:0]),
        .M_AXI_IC_WLAST(NLW_U0_M_AXI_IC_WLAST_UNCONNECTED),
        .M_AXI_IC_WREADY(1'b0),
        .M_AXI_IC_WSTRB(NLW_U0_M_AXI_IC_WSTRB_UNCONNECTED[3:0]),
        .M_AXI_IC_WUSER(NLW_U0_M_AXI_IC_WUSER_UNCONNECTED[0]),
        .M_AXI_IC_WVALID(NLW_U0_M_AXI_IC_WVALID_UNCONNECTED),
        .M_AXI_IP_ARADDR(NLW_U0_M_AXI_IP_ARADDR_UNCONNECTED[31:0]),
        .M_AXI_IP_ARBURST(NLW_U0_M_AXI_IP_ARBURST_UNCONNECTED[1:0]),
        .M_AXI_IP_ARCACHE(NLW_U0_M_AXI_IP_ARCACHE_UNCONNECTED[3:0]),
        .M_AXI_IP_ARID(NLW_U0_M_AXI_IP_ARID_UNCONNECTED[0]),
        .M_AXI_IP_ARLEN(NLW_U0_M_AXI_IP_ARLEN_UNCONNECTED[7:0]),
        .M_AXI_IP_ARLOCK(NLW_U0_M_AXI_IP_ARLOCK_UNCONNECTED),
        .M_AXI_IP_ARPROT(NLW_U0_M_AXI_IP_ARPROT_UNCONNECTED[2:0]),
        .M_AXI_IP_ARQOS(NLW_U0_M_AXI_IP_ARQOS_UNCONNECTED[3:0]),
        .M_AXI_IP_ARREADY(1'b0),
        .M_AXI_IP_ARSIZE(NLW_U0_M_AXI_IP_ARSIZE_UNCONNECTED[2:0]),
        .M_AXI_IP_ARVALID(NLW_U0_M_AXI_IP_ARVALID_UNCONNECTED),
        .M_AXI_IP_AWADDR(NLW_U0_M_AXI_IP_AWADDR_UNCONNECTED[31:0]),
        .M_AXI_IP_AWBURST(NLW_U0_M_AXI_IP_AWBURST_UNCONNECTED[1:0]),
        .M_AXI_IP_AWCACHE(NLW_U0_M_AXI_IP_AWCACHE_UNCONNECTED[3:0]),
        .M_AXI_IP_AWID(NLW_U0_M_AXI_IP_AWID_UNCONNECTED[0]),
        .M_AXI_IP_AWLEN(NLW_U0_M_AXI_IP_AWLEN_UNCONNECTED[7:0]),
        .M_AXI_IP_AWLOCK(NLW_U0_M_AXI_IP_AWLOCK_UNCONNECTED),
        .M_AXI_IP_AWPROT(NLW_U0_M_AXI_IP_AWPROT_UNCONNECTED[2:0]),
        .M_AXI_IP_AWQOS(NLW_U0_M_AXI_IP_AWQOS_UNCONNECTED[3:0]),
        .M_AXI_IP_AWREADY(1'b0),
        .M_AXI_IP_AWSIZE(NLW_U0_M_AXI_IP_AWSIZE_UNCONNECTED[2:0]),
        .M_AXI_IP_AWVALID(NLW_U0_M_AXI_IP_AWVALID_UNCONNECTED),
        .M_AXI_IP_BID(1'b0),
        .M_AXI_IP_BREADY(NLW_U0_M_AXI_IP_BREADY_UNCONNECTED),
        .M_AXI_IP_BRESP({1'b0,1'b0}),
        .M_AXI_IP_BVALID(1'b0),
        .M_AXI_IP_RDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .M_AXI_IP_RID(1'b0),
        .M_AXI_IP_RLAST(1'b0),
        .M_AXI_IP_RREADY(NLW_U0_M_AXI_IP_RREADY_UNCONNECTED),
        .M_AXI_IP_RRESP({1'b0,1'b0}),
        .M_AXI_IP_RVALID(1'b0),
        .M_AXI_IP_WDATA(NLW_U0_M_AXI_IP_WDATA_UNCONNECTED[31:0]),
        .M_AXI_IP_WLAST(NLW_U0_M_AXI_IP_WLAST_UNCONNECTED),
        .M_AXI_IP_WREADY(1'b0),
        .M_AXI_IP_WSTRB(NLW_U0_M_AXI_IP_WSTRB_UNCONNECTED[3:0]),
        .M_AXI_IP_WVALID(NLW_U0_M_AXI_IP_WVALID_UNCONNECTED),
        .Mb_Reset(1'b0),
        .Non_Secure(Non_Secure),
        .Pause(Pause),
        .Pause_Ack(Pause_Ack),
        .RAM_From(NLW_U0_RAM_From_UNCONNECTED[255:0]),
        .RAM_To({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Read_Strobe(Read_Strobe),
        .Reset(Reset),
        .Reset_Mode(Reset_Mode),
        .S0_AXIS_TDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S0_AXIS_TLAST(1'b0),
        .S0_AXIS_TREADY(NLW_U0_S0_AXIS_TREADY_UNCONNECTED),
        .S0_AXIS_TVALID(1'b0),
        .S10_AXIS_TDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S10_AXIS_TLAST(1'b0),
        .S10_AXIS_TREADY(NLW_U0_S10_AXIS_TREADY_UNCONNECTED),
        .S10_AXIS_TVALID(1'b0),
        .S11_AXIS_TDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S11_AXIS_TLAST(1'b0),
        .S11_AXIS_TREADY(NLW_U0_S11_AXIS_TREADY_UNCONNECTED),
        .S11_AXIS_TVALID(1'b0),
        .S12_AXIS_TDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S12_AXIS_TLAST(1'b0),
        .S12_AXIS_TREADY(NLW_U0_S12_AXIS_TREADY_UNCONNECTED),
        .S12_AXIS_TVALID(1'b0),
        .S13_AXIS_TDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S13_AXIS_TLAST(1'b0),
        .S13_AXIS_TREADY(NLW_U0_S13_AXIS_TREADY_UNCONNECTED),
        .S13_AXIS_TVALID(1'b0),
        .S14_AXIS_TDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S14_AXIS_TLAST(1'b0),
        .S14_AXIS_TREADY(NLW_U0_S14_AXIS_TREADY_UNCONNECTED),
        .S14_AXIS_TVALID(1'b0),
        .S15_AXIS_TDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S15_AXIS_TLAST(1'b0),
        .S15_AXIS_TREADY(NLW_U0_S15_AXIS_TREADY_UNCONNECTED),
        .S15_AXIS_TVALID(1'b0),
        .S1_AXIS_TDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S1_AXIS_TLAST(1'b0),
        .S1_AXIS_TREADY(NLW_U0_S1_AXIS_TREADY_UNCONNECTED),
        .S1_AXIS_TVALID(1'b0),
        .S2_AXIS_TDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S2_AXIS_TLAST(1'b0),
        .S2_AXIS_TREADY(NLW_U0_S2_AXIS_TREADY_UNCONNECTED),
        .S2_AXIS_TVALID(1'b0),
        .S3_AXIS_TDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S3_AXIS_TLAST(1'b0),
        .S3_AXIS_TREADY(NLW_U0_S3_AXIS_TREADY_UNCONNECTED),
        .S3_AXIS_TVALID(1'b0),
        .S4_AXIS_TDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S4_AXIS_TLAST(1'b0),
        .S4_AXIS_TREADY(NLW_U0_S4_AXIS_TREADY_UNCONNECTED),
        .S4_AXIS_TVALID(1'b0),
        .S5_AXIS_TDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S5_AXIS_TLAST(1'b0),
        .S5_AXIS_TREADY(NLW_U0_S5_AXIS_TREADY_UNCONNECTED),
        .S5_AXIS_TVALID(1'b0),
        .S6_AXIS_TDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S6_AXIS_TLAST(1'b0),
        .S6_AXIS_TREADY(NLW_U0_S6_AXIS_TREADY_UNCONNECTED),
        .S6_AXIS_TVALID(1'b0),
        .S7_AXIS_TDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S7_AXIS_TLAST(1'b0),
        .S7_AXIS_TREADY(NLW_U0_S7_AXIS_TREADY_UNCONNECTED),
        .S7_AXIS_TVALID(1'b0),
        .S8_AXIS_TDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S8_AXIS_TLAST(1'b0),
        .S8_AXIS_TREADY(NLW_U0_S8_AXIS_TREADY_UNCONNECTED),
        .S8_AXIS_TVALID(1'b0),
        .S9_AXIS_TDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S9_AXIS_TLAST(1'b0),
        .S9_AXIS_TREADY(NLW_U0_S9_AXIS_TREADY_UNCONNECTED),
        .S9_AXIS_TVALID(1'b0),
        .Scan_En(1'b0),
        .Scan_Reset(1'b0),
        .Scan_Reset_Sel(1'b0),
        .Sleep(Sleep),
        .Suspend(Suspend),
        .Trace_DCache_Hit(NLW_U0_Trace_DCache_Hit_UNCONNECTED),
        .Trace_DCache_Rdy(NLW_U0_Trace_DCache_Rdy_UNCONNECTED),
        .Trace_DCache_Read(NLW_U0_Trace_DCache_Read_UNCONNECTED),
        .Trace_DCache_Req(NLW_U0_Trace_DCache_Req_UNCONNECTED),
        .Trace_Data_Access(NLW_U0_Trace_Data_Access_UNCONNECTED),
        .Trace_Data_Address(NLW_U0_Trace_Data_Address_UNCONNECTED[0:31]),
        .Trace_Data_Byte_Enable(NLW_U0_Trace_Data_Byte_Enable_UNCONNECTED[0:3]),
        .Trace_Data_Read(NLW_U0_Trace_Data_Read_UNCONNECTED),
        .Trace_Data_Write(NLW_U0_Trace_Data_Write_UNCONNECTED),
        .Trace_Data_Write_Value(NLW_U0_Trace_Data_Write_Value_UNCONNECTED[0:31]),
        .Trace_Delay_Slot(NLW_U0_Trace_Delay_Slot_UNCONNECTED),
        .Trace_EX_PipeRun(NLW_U0_Trace_EX_PipeRun_UNCONNECTED),
        .Trace_Exception_Kind(NLW_U0_Trace_Exception_Kind_UNCONNECTED[0:4]),
        .Trace_Exception_Taken(NLW_U0_Trace_Exception_Taken_UNCONNECTED),
        .Trace_ICache_Hit(NLW_U0_Trace_ICache_Hit_UNCONNECTED),
        .Trace_ICache_Rdy(NLW_U0_Trace_ICache_Rdy_UNCONNECTED),
        .Trace_ICache_Req(NLW_U0_Trace_ICache_Req_UNCONNECTED),
        .Trace_Instruction(NLW_U0_Trace_Instruction_UNCONNECTED[0:31]),
        .Trace_Jump_Hit(NLW_U0_Trace_Jump_Hit_UNCONNECTED),
        .Trace_Jump_Taken(NLW_U0_Trace_Jump_Taken_UNCONNECTED),
        .Trace_MB_Halted(NLW_U0_Trace_MB_Halted_UNCONNECTED),
        .Trace_MEM_PipeRun(NLW_U0_Trace_MEM_PipeRun_UNCONNECTED),
        .Trace_MSR_Reg(NLW_U0_Trace_MSR_Reg_UNCONNECTED[0:14]),
        .Trace_New_Reg_Value(NLW_U0_Trace_New_Reg_Value_UNCONNECTED[0:31]),
        .Trace_OF_PipeRun(NLW_U0_Trace_OF_PipeRun_UNCONNECTED),
        .Trace_PC(NLW_U0_Trace_PC_UNCONNECTED[0:31]),
        .Trace_PID_Reg(NLW_U0_Trace_PID_Reg_UNCONNECTED[0:7]),
        .Trace_Reg_Addr(NLW_U0_Trace_Reg_Addr_UNCONNECTED[0:4]),
        .Trace_Reg_Write(NLW_U0_Trace_Reg_Write_UNCONNECTED),
        .Trace_Valid_Instr(NLW_U0_Trace_Valid_Instr_UNCONNECTED),
        .Wakeup(Wakeup),
        .Write_Strobe(Write_Strobe));
endmodule

(* CHECK_LICENSE_TYPE = "bd_6665_rst_0_0,proc_sys_reset,{}" *) (* DowngradeIPIdentifiedWarnings = "yes" *) (* X_CORE_INFO = "proc_sys_reset,Vivado 2019.2.1" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_bd_6665_rst_0_0
   (slowest_sync_clk,
    ext_reset_in,
    aux_reset_in,
    mb_debug_sys_rst,
    dcm_locked,
    mb_reset,
    bus_struct_reset,
    peripheral_reset,
    interconnect_aresetn,
    peripheral_aresetn);
  (* X_INTERFACE_INFO = "xilinx.com:signal:clock:1.0 clock CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME clock, ASSOCIATED_RESET mb_reset:bus_struct_reset:interconnect_aresetn:peripheral_aresetn:peripheral_reset, FREQ_HZ 100000000, PHASE 0.000, CLK_DOMAIN debug_cpu_sys_clock, INSERT_VIP 0" *) input slowest_sync_clk;
  (* X_INTERFACE_INFO = "xilinx.com:signal:reset:1.0 ext_reset RST" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME ext_reset, BOARD.ASSOCIATED_PARAM RESET_BOARD_INTERFACE, POLARITY ACTIVE_LOW, INSERT_VIP 0" *) input ext_reset_in;
  (* X_INTERFACE_INFO = "xilinx.com:signal:reset:1.0 aux_reset RST" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME aux_reset, POLARITY ACTIVE_LOW, INSERT_VIP 0" *) input aux_reset_in;
  (* X_INTERFACE_INFO = "xilinx.com:signal:reset:1.0 dbg_reset RST" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME dbg_reset, POLARITY ACTIVE_HIGH, INSERT_VIP 0" *) input mb_debug_sys_rst;
  input dcm_locked;
  (* X_INTERFACE_INFO = "xilinx.com:signal:reset:1.0 mb_rst RST" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME mb_rst, POLARITY ACTIVE_HIGH, TYPE PROCESSOR, INSERT_VIP 0" *) output mb_reset;
  (* X_INTERFACE_INFO = "xilinx.com:signal:reset:1.0 bus_struct_reset RST" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME bus_struct_reset, POLARITY ACTIVE_HIGH, TYPE INTERCONNECT, INSERT_VIP 0" *) output [0:0]bus_struct_reset;
  (* X_INTERFACE_INFO = "xilinx.com:signal:reset:1.0 peripheral_high_rst RST" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME peripheral_high_rst, POLARITY ACTIVE_HIGH, TYPE PERIPHERAL, INSERT_VIP 0" *) output [0:0]peripheral_reset;
  (* X_INTERFACE_INFO = "xilinx.com:signal:reset:1.0 interconnect_low_rst RST" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME interconnect_low_rst, POLARITY ACTIVE_LOW, TYPE INTERCONNECT, INSERT_VIP 0" *) output [0:0]interconnect_aresetn;
  (* X_INTERFACE_INFO = "xilinx.com:signal:reset:1.0 peripheral_low_rst RST" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME peripheral_low_rst, POLARITY ACTIVE_LOW, TYPE PERIPHERAL, INSERT_VIP 0" *) output [0:0]peripheral_aresetn;

  wire aux_reset_in;
  wire [0:0]bus_struct_reset;
  wire dcm_locked;
  wire ext_reset_in;
  wire [0:0]interconnect_aresetn;
  wire mb_debug_sys_rst;
  wire mb_reset;
  wire [0:0]peripheral_aresetn;
  wire [0:0]peripheral_reset;
  wire slowest_sync_clk;

  (* C_AUX_RESET_HIGH = "1'b0" *) 
  (* C_AUX_RST_WIDTH = "4" *) 
  (* C_EXT_RESET_HIGH = "1'b0" *) 
  (* C_EXT_RST_WIDTH = "4" *) 
  (* C_FAMILY = "artix7" *) 
  (* C_NUM_BUS_RST = "1" *) 
  (* C_NUM_INTERCONNECT_ARESETN = "1" *) 
  (* C_NUM_PERP_ARESETN = "1" *) 
  (* C_NUM_PERP_RST = "1" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_proc_sys_reset U0
       (.aux_reset_in(aux_reset_in),
        .bus_struct_reset(bus_struct_reset),
        .dcm_locked(dcm_locked),
        .ext_reset_in(ext_reset_in),
        .interconnect_aresetn(interconnect_aresetn),
        .mb_debug_sys_rst(mb_debug_sys_rst),
        .mb_reset(mb_reset),
        .peripheral_aresetn(peripheral_aresetn),
        .peripheral_reset(peripheral_reset),
        .slowest_sync_clk(slowest_sync_clk));
endmodule

(* CHECK_LICENSE_TYPE = "bd_6665_xlconcat_0_0,xlconcat_v2_1_3_xlconcat,{}" *) (* DowngradeIPIdentifiedWarnings = "yes" *) (* X_CORE_INFO = "xlconcat_v2_1_3_xlconcat,Vivado 2019.2.1" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_bd_6665_xlconcat_0_0
   (In0,
    In1,
    dout);
  input [0:0]In0;
  input [0:0]In1;
  output [1:0]dout;

  wire [0:0]In0;
  wire [0:0]In1;

  assign dout[1] = In1;
  assign dout[0] = In0;
endmodule

module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_cdc_sync
   (lpf_asr_reg,
    scndry_out,
    lpf_asr,
    p_1_in,
    p_2_in,
    asr_lpf,
    aux_reset_in,
    slowest_sync_clk);
  output lpf_asr_reg;
  output scndry_out;
  input lpf_asr;
  input p_1_in;
  input p_2_in;
  input [0:0]asr_lpf;
  input aux_reset_in;
  input slowest_sync_clk;

  wire asr_d1;
  wire [0:0]asr_lpf;
  wire aux_reset_in;
  wire lpf_asr;
  wire lpf_asr_reg;
  wire p_1_in;
  wire p_2_in;
  wire s_level_out_d1_cdc_to;
  wire s_level_out_d2;
  wire s_level_out_d3;
  wire scndry_out;
  wire slowest_sync_clk;

  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_IN_cdc_to 
       (.C(slowest_sync_clk),
        .CE(1'b1),
        .D(asr_d1),
        .Q(s_level_out_d1_cdc_to),
        .R(1'b0));
  LUT1 #(
    .INIT(2'h1)) 
    \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_IN_cdc_to_i_1__0 
       (.I0(aux_reset_in),
        .O(asr_d1));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d2 
       (.C(slowest_sync_clk),
        .CE(1'b1),
        .D(s_level_out_d1_cdc_to),
        .Q(s_level_out_d2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d3 
       (.C(slowest_sync_clk),
        .CE(1'b1),
        .D(s_level_out_d2),
        .Q(s_level_out_d3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4 
       (.C(slowest_sync_clk),
        .CE(1'b1),
        .D(s_level_out_d3),
        .Q(scndry_out),
        .R(1'b0));
  LUT5 #(
    .INIT(32'hEAAAAAA8)) 
    lpf_asr_i_1
       (.I0(lpf_asr),
        .I1(p_1_in),
        .I2(p_2_in),
        .I3(scndry_out),
        .I4(asr_lpf),
        .O(lpf_asr_reg));
endmodule

(* ORIG_REF_NAME = "cdc_sync" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_cdc_sync_0
   (lpf_exr_reg,
    scndry_out,
    lpf_exr,
    p_1_in4_in,
    p_2_in3_in,
    exr_lpf,
    mb_debug_sys_rst,
    ext_reset_in,
    slowest_sync_clk);
  output lpf_exr_reg;
  output scndry_out;
  input lpf_exr;
  input p_1_in4_in;
  input p_2_in3_in;
  input [0:0]exr_lpf;
  input mb_debug_sys_rst;
  input ext_reset_in;
  input slowest_sync_clk;

  wire exr_d1;
  wire [0:0]exr_lpf;
  wire ext_reset_in;
  wire lpf_exr;
  wire lpf_exr_reg;
  wire mb_debug_sys_rst;
  wire p_1_in4_in;
  wire p_2_in3_in;
  wire s_level_out_d1_cdc_to;
  wire s_level_out_d2;
  wire s_level_out_d3;
  wire scndry_out;
  wire slowest_sync_clk;

  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_IN_cdc_to 
       (.C(slowest_sync_clk),
        .CE(1'b1),
        .D(exr_d1),
        .Q(s_level_out_d1_cdc_to),
        .R(1'b0));
  LUT2 #(
    .INIT(4'hB)) 
    \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_IN_cdc_to_i_1 
       (.I0(mb_debug_sys_rst),
        .I1(ext_reset_in),
        .O(exr_d1));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d2 
       (.C(slowest_sync_clk),
        .CE(1'b1),
        .D(s_level_out_d1_cdc_to),
        .Q(s_level_out_d2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d3 
       (.C(slowest_sync_clk),
        .CE(1'b1),
        .D(s_level_out_d2),
        .Q(s_level_out_d3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4 
       (.C(slowest_sync_clk),
        .CE(1'b1),
        .D(s_level_out_d3),
        .Q(scndry_out),
        .R(1'b0));
  LUT5 #(
    .INIT(32'hEAAAAAA8)) 
    lpf_exr_i_1
       (.I0(lpf_exr),
        .I1(p_1_in4_in),
        .I2(p_2_in3_in),
        .I3(scndry_out),
        .I4(exr_lpf),
        .O(lpf_exr_reg));
endmodule

(* CHECK_LICENSE_TYPE = "debug_cpu_microblaze_mcs_0_0,bd_6665,{}" *) (* DowngradeIPIdentifiedWarnings = "yes" *) (* X_CORE_INFO = "bd_6665,Vivado 2019.2.1" *) 
(* NotValidForBitStream *)
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix
   (Clk,
    Reset,
    UART_rxd,
    UART_txd);
  (* X_INTERFACE_INFO = "xilinx.com:signal:clock:1.0 CLK.Clk CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME CLK.Clk, FREQ_HZ 100000000, PHASE 0.000, CLK_DOMAIN debug_cpu_sys_clock, INSERT_VIP 0, ASSOCIATED_ASYNC_RESET Reset, BOARD.ASSOCIATED_PARAM CLK_BOARD_INTERFACE" *) input Clk;
  (* X_INTERFACE_INFO = "xilinx.com:signal:reset:1.0 RST.Reset RST" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME RST.Reset, POLARITY ACTIVE_LOW, INSERT_VIP 0, BOARD.ASSOCIATED_PARAM RESET_BOARD_INTERFACE" *) input Reset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:uart:1.0 UART RxD" *) input UART_rxd;
  (* X_INTERFACE_INFO = "xilinx.com:interface:uart:1.0 UART TxD" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME UART, BOARD.ASSOCIATED_PARAM UART_BOARD_INTERFACE" *) output UART_txd;

  wire Clk;
  wire Reset;
  wire UART_rxd;
  wire UART_txd;

  (* HW_HANDOFF = "debug_cpu_microblaze_mcs_0_0.hwdef" *) 
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_bd_6665 inst
       (.Clk(Clk),
        .Reset(Reset),
        .UART_rxd(UART_rxd),
        .UART_txd(UART_txd));
endmodule

(* C_AVOID_PRIMITIVES = "0" *) (* C_BASEADDR = "64'b0000000000000000000000000000000010000000000000000000000000000000" *) (* C_FAMILY = "artix7" *) 
(* C_FIT1_INTERRUPT = "0" *) (* C_FIT1_No_CLOCKS = "6216" *) (* C_FIT2_INTERRUPT = "0" *) 
(* C_FIT2_No_CLOCKS = "6216" *) (* C_FIT3_INTERRUPT = "0" *) (* C_FIT3_No_CLOCKS = "6216" *) 
(* C_FIT4_INTERRUPT = "0" *) (* C_FIT4_No_CLOCKS = "6216" *) (* C_FREQ = "100000000" *) 
(* C_GPI1_INTERRUPT = "0" *) (* C_GPI1_SIZE = "32" *) (* C_GPI2_INTERRUPT = "0" *) 
(* C_GPI2_SIZE = "32" *) (* C_GPI3_INTERRUPT = "0" *) (* C_GPI3_SIZE = "32" *) 
(* C_GPI4_INTERRUPT = "0" *) (* C_GPI4_SIZE = "32" *) (* C_GPO1_INIT = "0" *) 
(* C_GPO1_SIZE = "32" *) (* C_GPO2_INIT = "0" *) (* C_GPO2_SIZE = "32" *) 
(* C_GPO3_INIT = "0" *) (* C_GPO3_SIZE = "32" *) (* C_GPO4_INIT = "0" *) 
(* C_GPO4_SIZE = "32" *) (* C_HIGHADDR = "64'b0000000000000000000000000000000010000000000000001111111111111111" *) (* C_INSTANCE = "iomodule" *) 
(* C_INTC_ADDR_WIDTH = "16" *) (* C_INTC_ASYNC_INTR = "16'b1111111111111111" *) (* C_INTC_BASE_VECTORS = "64'b0000000000000000000000000000000000000000000000000000000000000000" *) 
(* C_INTC_HAS_FAST = "1" *) (* C_INTC_INTR_SIZE = "1" *) (* C_INTC_LEVEL_EDGE = "16'b0000000000000000" *) 
(* C_INTC_NUM_SYNC_FF = "2" *) (* C_INTC_POSITIVE = "16'b1111111111111111" *) (* C_INTC_USE_EXT_INTR = "0" *) 
(* C_IO_BASEADDR = "64'b0000000000000000000000000000000011000000000000000000000000000000" *) (* C_IO_HIGHADDR = "64'b0000000000000000000000000000000011111111111111111111111111111111" *) (* C_IO_MASK = "64'b0000000000000000000000000000000011000000000000000000000000000000" *) 
(* C_LMB_AWIDTH = "32" *) (* C_LMB_DWIDTH = "32" *) (* C_LMB_PROTOCOL = "0" *) 
(* C_MASK = "64'b0000000000000000000000000000000011000000000000000000000000000000" *) (* C_PIT1_INTERRUPT = "0" *) (* C_PIT1_PRESCALER = "0" *) 
(* C_PIT1_READABLE = "1" *) (* C_PIT1_SIZE = "32" *) (* C_PIT2_INTERRUPT = "0" *) 
(* C_PIT2_PRESCALER = "0" *) (* C_PIT2_READABLE = "1" *) (* C_PIT2_SIZE = "32" *) 
(* C_PIT3_INTERRUPT = "0" *) (* C_PIT3_PRESCALER = "0" *) (* C_PIT3_READABLE = "1" *) 
(* C_PIT3_SIZE = "32" *) (* C_PIT4_INTERRUPT = "0" *) (* C_PIT4_PRESCALER = "0" *) 
(* C_PIT4_READABLE = "1" *) (* C_PIT4_SIZE = "32" *) (* C_TMR = "0" *) 
(* C_UART_BAUDRATE = "9600" *) (* C_UART_DATA_BITS = "8" *) (* C_UART_ERROR_INTERRUPT = "0" *) 
(* C_UART_ODD_PARITY = "0" *) (* C_UART_PROG_BAUDRATE = "0" *) (* C_UART_RX_INTERRUPT = "0" *) 
(* C_UART_TX_INTERRUPT = "0" *) (* C_UART_USE_PARITY = "0" *) (* C_USE_CONFIG_RESET = "0" *) 
(* C_USE_FIT1 = "0" *) (* C_USE_FIT2 = "0" *) (* C_USE_FIT3 = "0" *) 
(* C_USE_FIT4 = "0" *) (* C_USE_GPI1 = "0" *) (* C_USE_GPI2 = "0" *) 
(* C_USE_GPI3 = "0" *) (* C_USE_GPI4 = "0" *) (* C_USE_GPO1 = "0" *) 
(* C_USE_GPO2 = "0" *) (* C_USE_GPO3 = "0" *) (* C_USE_GPO4 = "0" *) 
(* C_USE_IO_BUS = "0" *) (* C_USE_PIT1 = "0" *) (* C_USE_PIT2 = "0" *) 
(* C_USE_PIT3 = "0" *) (* C_USE_PIT4 = "0" *) (* C_USE_TMR_DISABLE = "0" *) 
(* C_USE_UART_RX = "1" *) (* C_USE_UART_TX = "1" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_iomodule
   (Clk,
    Rst,
    Config_Reset,
    TMR_Rst,
    TMR_Disable,
    ToVote,
    FromAVote,
    FromBVote,
    IO_Addr_Strobe,
    IO_Read_Strobe,
    IO_Write_Strobe,
    IO_Address,
    IO_Byte_Enable,
    IO_Write_Data,
    IO_Read_Data,
    IO_Ready,
    UART_Rx,
    UART_Tx,
    UART_Interrupt,
    FIT1_Interrupt,
    FIT1_Toggle,
    FIT2_Interrupt,
    FIT2_Toggle,
    FIT3_Interrupt,
    FIT3_Toggle,
    FIT4_Interrupt,
    FIT4_Toggle,
    PIT1_Enable,
    PIT1_Interrupt,
    PIT1_Toggle,
    PIT2_Enable,
    PIT2_Interrupt,
    PIT2_Toggle,
    PIT3_Enable,
    PIT3_Interrupt,
    PIT3_Toggle,
    PIT4_Enable,
    PIT4_Interrupt,
    PIT4_Toggle,
    GPO1,
    GPO2,
    GPO3,
    GPO4,
    GPI1,
    GPI1_Interrupt,
    GPI2,
    GPI2_Interrupt,
    GPI3,
    GPI3_Interrupt,
    GPI4,
    GPI4_Interrupt,
    INTC_Interrupt,
    INTC_IRQ,
    INTC_Processor_Ack,
    INTC_Interrupt_Address,
    INTC_IRQ_OUT,
    LMB_ABus,
    LMB_WriteDBus,
    LMB_AddrStrobe,
    LMB_ReadStrobe,
    LMB_WriteStrobe,
    LMB_BE,
    Sl_DBus,
    Sl_Ready,
    Sl_Wait,
    Sl_UE,
    Sl_CE);
  input Clk;
  input Rst;
  input Config_Reset;
  input TMR_Rst;
  input TMR_Disable;
  output [1023:0]ToVote;
  input [1023:0]FromAVote;
  input [1023:0]FromBVote;
  output IO_Addr_Strobe;
  output IO_Read_Strobe;
  output IO_Write_Strobe;
  output [31:0]IO_Address;
  output [3:0]IO_Byte_Enable;
  output [31:0]IO_Write_Data;
  input [31:0]IO_Read_Data;
  input IO_Ready;
  input UART_Rx;
  output UART_Tx;
  output UART_Interrupt;
  output FIT1_Interrupt;
  output FIT1_Toggle;
  output FIT2_Interrupt;
  output FIT2_Toggle;
  output FIT3_Interrupt;
  output FIT3_Toggle;
  output FIT4_Interrupt;
  output FIT4_Toggle;
  input PIT1_Enable;
  output PIT1_Interrupt;
  output PIT1_Toggle;
  input PIT2_Enable;
  output PIT2_Interrupt;
  output PIT2_Toggle;
  input PIT3_Enable;
  output PIT3_Interrupt;
  output PIT3_Toggle;
  input PIT4_Enable;
  output PIT4_Interrupt;
  output PIT4_Toggle;
  output [31:0]GPO1;
  output [31:0]GPO2;
  output [31:0]GPO3;
  output [31:0]GPO4;
  input [31:0]GPI1;
  output GPI1_Interrupt;
  input [31:0]GPI2;
  output GPI2_Interrupt;
  input [31:0]GPI3;
  output GPI3_Interrupt;
  input [31:0]GPI4;
  output GPI4_Interrupt;
  input [0:0]INTC_Interrupt;
  output INTC_IRQ;
  input [1:0]INTC_Processor_Ack;
  output [31:0]INTC_Interrupt_Address;
  output INTC_IRQ_OUT;
  input [0:31]LMB_ABus;
  input [0:31]LMB_WriteDBus;
  input LMB_AddrStrobe;
  input LMB_ReadStrobe;
  input LMB_WriteStrobe;
  input [0:3]LMB_BE;
  output [0:31]Sl_DBus;
  output Sl_Ready;
  output Sl_Wait;
  output Sl_UE;
  output Sl_CE;

  wire \<const0> ;
  wire \<const1> ;
  wire Clk;
  wire [0:31]LMB_ABus;
  wire LMB_AddrStrobe;
  wire LMB_ReadStrobe;
  wire [0:31]LMB_WriteDBus;
  wire LMB_WriteStrobe;
  wire Rst;
  wire [24:31]\^Sl_DBus ;
  wire Sl_Ready;
  wire Sl_Wait;
  wire UART_Interrupt;
  wire UART_Rx;
  wire UART_Tx;
  wire \lmb_abus_Q_reg_n_0_[2] ;
  wire \lmb_abus_Q_reg_n_0_[3] ;
  wire \lmb_abus_Q_reg_n_0_[4] ;
  wire \lmb_abus_Q_reg_n_0_[5] ;
  wire \lmb_abus_Q_reg_n_0_[6] ;
  wire lmb_reg_read0;
  wire lmb_reg_read_Q;
  wire lmb_reg_write;
  wire lmb_reg_write0;
  wire p_0_in16_in;
  (* RTL_KEEP = "true" *) wire uart_tx_write;
  wire uart_tx_write_inferred_i_2_n_0;
  (* RTL_KEEP = "true" *) wire [31:0]write_data;

  assign FIT1_Interrupt = \<const0> ;
  assign FIT1_Toggle = \<const0> ;
  assign FIT2_Interrupt = \<const0> ;
  assign FIT2_Toggle = \<const0> ;
  assign FIT3_Interrupt = \<const0> ;
  assign FIT3_Toggle = \<const0> ;
  assign FIT4_Interrupt = \<const0> ;
  assign FIT4_Toggle = \<const0> ;
  assign GPI1_Interrupt = \<const0> ;
  assign GPI2_Interrupt = \<const0> ;
  assign GPI3_Interrupt = \<const0> ;
  assign GPI4_Interrupt = \<const0> ;
  assign GPO1[31] = \<const0> ;
  assign GPO1[30] = \<const0> ;
  assign GPO1[29] = \<const0> ;
  assign GPO1[28] = \<const0> ;
  assign GPO1[27] = \<const0> ;
  assign GPO1[26] = \<const0> ;
  assign GPO1[25] = \<const0> ;
  assign GPO1[24] = \<const0> ;
  assign GPO1[23] = \<const0> ;
  assign GPO1[22] = \<const0> ;
  assign GPO1[21] = \<const0> ;
  assign GPO1[20] = \<const0> ;
  assign GPO1[19] = \<const0> ;
  assign GPO1[18] = \<const0> ;
  assign GPO1[17] = \<const0> ;
  assign GPO1[16] = \<const0> ;
  assign GPO1[15] = \<const0> ;
  assign GPO1[14] = \<const0> ;
  assign GPO1[13] = \<const0> ;
  assign GPO1[12] = \<const0> ;
  assign GPO1[11] = \<const0> ;
  assign GPO1[10] = \<const0> ;
  assign GPO1[9] = \<const0> ;
  assign GPO1[8] = \<const0> ;
  assign GPO1[7] = \<const0> ;
  assign GPO1[6] = \<const0> ;
  assign GPO1[5] = \<const0> ;
  assign GPO1[4] = \<const0> ;
  assign GPO1[3] = \<const0> ;
  assign GPO1[2] = \<const0> ;
  assign GPO1[1] = \<const0> ;
  assign GPO1[0] = \<const0> ;
  assign GPO2[31] = \<const0> ;
  assign GPO2[30] = \<const0> ;
  assign GPO2[29] = \<const0> ;
  assign GPO2[28] = \<const0> ;
  assign GPO2[27] = \<const0> ;
  assign GPO2[26] = \<const0> ;
  assign GPO2[25] = \<const0> ;
  assign GPO2[24] = \<const0> ;
  assign GPO2[23] = \<const0> ;
  assign GPO2[22] = \<const0> ;
  assign GPO2[21] = \<const0> ;
  assign GPO2[20] = \<const0> ;
  assign GPO2[19] = \<const0> ;
  assign GPO2[18] = \<const0> ;
  assign GPO2[17] = \<const0> ;
  assign GPO2[16] = \<const0> ;
  assign GPO2[15] = \<const0> ;
  assign GPO2[14] = \<const0> ;
  assign GPO2[13] = \<const0> ;
  assign GPO2[12] = \<const0> ;
  assign GPO2[11] = \<const0> ;
  assign GPO2[10] = \<const0> ;
  assign GPO2[9] = \<const0> ;
  assign GPO2[8] = \<const0> ;
  assign GPO2[7] = \<const0> ;
  assign GPO2[6] = \<const0> ;
  assign GPO2[5] = \<const0> ;
  assign GPO2[4] = \<const0> ;
  assign GPO2[3] = \<const0> ;
  assign GPO2[2] = \<const0> ;
  assign GPO2[1] = \<const0> ;
  assign GPO2[0] = \<const0> ;
  assign GPO3[31] = \<const0> ;
  assign GPO3[30] = \<const0> ;
  assign GPO3[29] = \<const0> ;
  assign GPO3[28] = \<const0> ;
  assign GPO3[27] = \<const0> ;
  assign GPO3[26] = \<const0> ;
  assign GPO3[25] = \<const0> ;
  assign GPO3[24] = \<const0> ;
  assign GPO3[23] = \<const0> ;
  assign GPO3[22] = \<const0> ;
  assign GPO3[21] = \<const0> ;
  assign GPO3[20] = \<const0> ;
  assign GPO3[19] = \<const0> ;
  assign GPO3[18] = \<const0> ;
  assign GPO3[17] = \<const0> ;
  assign GPO3[16] = \<const0> ;
  assign GPO3[15] = \<const0> ;
  assign GPO3[14] = \<const0> ;
  assign GPO3[13] = \<const0> ;
  assign GPO3[12] = \<const0> ;
  assign GPO3[11] = \<const0> ;
  assign GPO3[10] = \<const0> ;
  assign GPO3[9] = \<const0> ;
  assign GPO3[8] = \<const0> ;
  assign GPO3[7] = \<const0> ;
  assign GPO3[6] = \<const0> ;
  assign GPO3[5] = \<const0> ;
  assign GPO3[4] = \<const0> ;
  assign GPO3[3] = \<const0> ;
  assign GPO3[2] = \<const0> ;
  assign GPO3[1] = \<const0> ;
  assign GPO3[0] = \<const0> ;
  assign GPO4[31] = \<const0> ;
  assign GPO4[30] = \<const0> ;
  assign GPO4[29] = \<const0> ;
  assign GPO4[28] = \<const0> ;
  assign GPO4[27] = \<const0> ;
  assign GPO4[26] = \<const0> ;
  assign GPO4[25] = \<const0> ;
  assign GPO4[24] = \<const0> ;
  assign GPO4[23] = \<const0> ;
  assign GPO4[22] = \<const0> ;
  assign GPO4[21] = \<const0> ;
  assign GPO4[20] = \<const0> ;
  assign GPO4[19] = \<const0> ;
  assign GPO4[18] = \<const0> ;
  assign GPO4[17] = \<const0> ;
  assign GPO4[16] = \<const0> ;
  assign GPO4[15] = \<const0> ;
  assign GPO4[14] = \<const0> ;
  assign GPO4[13] = \<const0> ;
  assign GPO4[12] = \<const0> ;
  assign GPO4[11] = \<const0> ;
  assign GPO4[10] = \<const0> ;
  assign GPO4[9] = \<const0> ;
  assign GPO4[8] = \<const0> ;
  assign GPO4[7] = \<const0> ;
  assign GPO4[6] = \<const0> ;
  assign GPO4[5] = \<const0> ;
  assign GPO4[4] = \<const0> ;
  assign GPO4[3] = \<const0> ;
  assign GPO4[2] = \<const0> ;
  assign GPO4[1] = \<const0> ;
  assign GPO4[0] = \<const0> ;
  assign INTC_IRQ = \<const0> ;
  assign INTC_IRQ_OUT = \<const0> ;
  assign INTC_Interrupt_Address[31] = \<const0> ;
  assign INTC_Interrupt_Address[30] = \<const0> ;
  assign INTC_Interrupt_Address[29] = \<const0> ;
  assign INTC_Interrupt_Address[28] = \<const0> ;
  assign INTC_Interrupt_Address[27] = \<const0> ;
  assign INTC_Interrupt_Address[26] = \<const0> ;
  assign INTC_Interrupt_Address[25] = \<const0> ;
  assign INTC_Interrupt_Address[24] = \<const0> ;
  assign INTC_Interrupt_Address[23] = \<const0> ;
  assign INTC_Interrupt_Address[22] = \<const0> ;
  assign INTC_Interrupt_Address[21] = \<const0> ;
  assign INTC_Interrupt_Address[20] = \<const0> ;
  assign INTC_Interrupt_Address[19] = \<const0> ;
  assign INTC_Interrupt_Address[18] = \<const0> ;
  assign INTC_Interrupt_Address[17] = \<const0> ;
  assign INTC_Interrupt_Address[16] = \<const0> ;
  assign INTC_Interrupt_Address[15] = \<const0> ;
  assign INTC_Interrupt_Address[14] = \<const0> ;
  assign INTC_Interrupt_Address[13] = \<const0> ;
  assign INTC_Interrupt_Address[12] = \<const0> ;
  assign INTC_Interrupt_Address[11] = \<const0> ;
  assign INTC_Interrupt_Address[10] = \<const0> ;
  assign INTC_Interrupt_Address[9] = \<const0> ;
  assign INTC_Interrupt_Address[8] = \<const0> ;
  assign INTC_Interrupt_Address[7] = \<const0> ;
  assign INTC_Interrupt_Address[6] = \<const0> ;
  assign INTC_Interrupt_Address[5] = \<const0> ;
  assign INTC_Interrupt_Address[4] = \<const1> ;
  assign INTC_Interrupt_Address[3] = \<const0> ;
  assign INTC_Interrupt_Address[2] = \<const0> ;
  assign INTC_Interrupt_Address[1] = \<const0> ;
  assign INTC_Interrupt_Address[0] = \<const0> ;
  assign IO_Addr_Strobe = \<const0> ;
  assign IO_Address[31] = \<const0> ;
  assign IO_Address[30] = \<const0> ;
  assign IO_Address[29] = \<const0> ;
  assign IO_Address[28] = \<const0> ;
  assign IO_Address[27] = \<const0> ;
  assign IO_Address[26] = \<const0> ;
  assign IO_Address[25] = \<const0> ;
  assign IO_Address[24] = \<const0> ;
  assign IO_Address[23] = \<const0> ;
  assign IO_Address[22] = \<const0> ;
  assign IO_Address[21] = \<const0> ;
  assign IO_Address[20] = \<const0> ;
  assign IO_Address[19] = \<const0> ;
  assign IO_Address[18] = \<const0> ;
  assign IO_Address[17] = \<const0> ;
  assign IO_Address[16] = \<const0> ;
  assign IO_Address[15] = \<const0> ;
  assign IO_Address[14] = \<const0> ;
  assign IO_Address[13] = \<const0> ;
  assign IO_Address[12] = \<const0> ;
  assign IO_Address[11] = \<const0> ;
  assign IO_Address[10] = \<const0> ;
  assign IO_Address[9] = \<const0> ;
  assign IO_Address[8] = \<const0> ;
  assign IO_Address[7] = \<const0> ;
  assign IO_Address[6] = \<const0> ;
  assign IO_Address[5] = \<const0> ;
  assign IO_Address[4] = \<const0> ;
  assign IO_Address[3] = \<const0> ;
  assign IO_Address[2] = \<const0> ;
  assign IO_Address[1] = \<const0> ;
  assign IO_Address[0] = \<const0> ;
  assign IO_Byte_Enable[3] = \<const0> ;
  assign IO_Byte_Enable[2] = \<const0> ;
  assign IO_Byte_Enable[1] = \<const0> ;
  assign IO_Byte_Enable[0] = \<const0> ;
  assign IO_Read_Strobe = \<const0> ;
  assign IO_Write_Data[31] = \<const0> ;
  assign IO_Write_Data[30] = \<const0> ;
  assign IO_Write_Data[29] = \<const0> ;
  assign IO_Write_Data[28] = \<const0> ;
  assign IO_Write_Data[27] = \<const0> ;
  assign IO_Write_Data[26] = \<const0> ;
  assign IO_Write_Data[25] = \<const0> ;
  assign IO_Write_Data[24] = \<const0> ;
  assign IO_Write_Data[23] = \<const0> ;
  assign IO_Write_Data[22] = \<const0> ;
  assign IO_Write_Data[21] = \<const0> ;
  assign IO_Write_Data[20] = \<const0> ;
  assign IO_Write_Data[19] = \<const0> ;
  assign IO_Write_Data[18] = \<const0> ;
  assign IO_Write_Data[17] = \<const0> ;
  assign IO_Write_Data[16] = \<const0> ;
  assign IO_Write_Data[15] = \<const0> ;
  assign IO_Write_Data[14] = \<const0> ;
  assign IO_Write_Data[13] = \<const0> ;
  assign IO_Write_Data[12] = \<const0> ;
  assign IO_Write_Data[11] = \<const0> ;
  assign IO_Write_Data[10] = \<const0> ;
  assign IO_Write_Data[9] = \<const0> ;
  assign IO_Write_Data[8] = \<const0> ;
  assign IO_Write_Data[7] = \<const0> ;
  assign IO_Write_Data[6] = \<const0> ;
  assign IO_Write_Data[5] = \<const0> ;
  assign IO_Write_Data[4] = \<const0> ;
  assign IO_Write_Data[3] = \<const0> ;
  assign IO_Write_Data[2] = \<const0> ;
  assign IO_Write_Data[1] = \<const0> ;
  assign IO_Write_Data[0] = \<const0> ;
  assign IO_Write_Strobe = \<const0> ;
  assign PIT1_Interrupt = \<const0> ;
  assign PIT1_Toggle = \<const0> ;
  assign PIT2_Interrupt = \<const0> ;
  assign PIT2_Toggle = \<const0> ;
  assign PIT3_Interrupt = \<const0> ;
  assign PIT3_Toggle = \<const0> ;
  assign PIT4_Interrupt = \<const0> ;
  assign PIT4_Toggle = \<const0> ;
  assign Sl_CE = \<const0> ;
  assign Sl_DBus[0] = \<const0> ;
  assign Sl_DBus[1] = \<const0> ;
  assign Sl_DBus[2] = \<const0> ;
  assign Sl_DBus[3] = \<const0> ;
  assign Sl_DBus[4] = \<const0> ;
  assign Sl_DBus[5] = \<const0> ;
  assign Sl_DBus[6] = \<const0> ;
  assign Sl_DBus[7] = \<const0> ;
  assign Sl_DBus[8] = \<const0> ;
  assign Sl_DBus[9] = \<const0> ;
  assign Sl_DBus[10] = \<const0> ;
  assign Sl_DBus[11] = \<const0> ;
  assign Sl_DBus[12] = \<const0> ;
  assign Sl_DBus[13] = \<const0> ;
  assign Sl_DBus[14] = \<const0> ;
  assign Sl_DBus[15] = \<const0> ;
  assign Sl_DBus[16] = \<const0> ;
  assign Sl_DBus[17] = \<const0> ;
  assign Sl_DBus[18] = \<const0> ;
  assign Sl_DBus[19] = \<const0> ;
  assign Sl_DBus[20] = \<const0> ;
  assign Sl_DBus[21] = \<const0> ;
  assign Sl_DBus[22] = \<const0> ;
  assign Sl_DBus[23] = \<const0> ;
  assign Sl_DBus[24:31] = \^Sl_DBus [24:31];
  assign Sl_UE = \<const0> ;
  assign ToVote[1023] = \<const0> ;
  assign ToVote[1022] = \<const0> ;
  assign ToVote[1021] = \<const0> ;
  assign ToVote[1020] = \<const0> ;
  assign ToVote[1019] = \<const0> ;
  assign ToVote[1018] = \<const0> ;
  assign ToVote[1017] = \<const0> ;
  assign ToVote[1016] = \<const0> ;
  assign ToVote[1015] = \<const0> ;
  assign ToVote[1014] = \<const0> ;
  assign ToVote[1013] = \<const0> ;
  assign ToVote[1012] = \<const0> ;
  assign ToVote[1011] = \<const0> ;
  assign ToVote[1010] = \<const0> ;
  assign ToVote[1009] = \<const0> ;
  assign ToVote[1008] = \<const0> ;
  assign ToVote[1007] = \<const0> ;
  assign ToVote[1006] = \<const0> ;
  assign ToVote[1005] = \<const0> ;
  assign ToVote[1004] = \<const0> ;
  assign ToVote[1003] = \<const0> ;
  assign ToVote[1002] = \<const0> ;
  assign ToVote[1001] = \<const0> ;
  assign ToVote[1000] = \<const0> ;
  assign ToVote[999] = \<const0> ;
  assign ToVote[998] = \<const0> ;
  assign ToVote[997] = \<const0> ;
  assign ToVote[996] = \<const0> ;
  assign ToVote[995] = \<const0> ;
  assign ToVote[994] = \<const0> ;
  assign ToVote[993] = \<const0> ;
  assign ToVote[992] = \<const0> ;
  assign ToVote[991] = \<const0> ;
  assign ToVote[990] = \<const0> ;
  assign ToVote[989] = \<const0> ;
  assign ToVote[988] = \<const0> ;
  assign ToVote[987] = \<const0> ;
  assign ToVote[986] = \<const0> ;
  assign ToVote[985] = \<const0> ;
  assign ToVote[984] = \<const0> ;
  assign ToVote[983] = \<const0> ;
  assign ToVote[982] = \<const0> ;
  assign ToVote[981] = \<const0> ;
  assign ToVote[980] = \<const0> ;
  assign ToVote[979] = \<const0> ;
  assign ToVote[978] = \<const0> ;
  assign ToVote[977] = \<const0> ;
  assign ToVote[976] = \<const0> ;
  assign ToVote[975] = \<const0> ;
  assign ToVote[974] = \<const0> ;
  assign ToVote[973] = \<const0> ;
  assign ToVote[972] = \<const0> ;
  assign ToVote[971] = \<const0> ;
  assign ToVote[970] = \<const0> ;
  assign ToVote[969] = \<const0> ;
  assign ToVote[968] = \<const0> ;
  assign ToVote[967] = \<const0> ;
  assign ToVote[966] = \<const0> ;
  assign ToVote[965] = \<const0> ;
  assign ToVote[964] = \<const0> ;
  assign ToVote[963] = \<const0> ;
  assign ToVote[962] = \<const0> ;
  assign ToVote[961] = \<const0> ;
  assign ToVote[960] = \<const0> ;
  assign ToVote[959] = \<const0> ;
  assign ToVote[958] = \<const0> ;
  assign ToVote[957] = \<const0> ;
  assign ToVote[956] = \<const0> ;
  assign ToVote[955] = \<const0> ;
  assign ToVote[954] = \<const0> ;
  assign ToVote[953] = \<const0> ;
  assign ToVote[952] = \<const0> ;
  assign ToVote[951] = \<const0> ;
  assign ToVote[950] = \<const0> ;
  assign ToVote[949] = \<const0> ;
  assign ToVote[948] = \<const0> ;
  assign ToVote[947] = \<const0> ;
  assign ToVote[946] = \<const0> ;
  assign ToVote[945] = \<const0> ;
  assign ToVote[944] = \<const0> ;
  assign ToVote[943] = \<const0> ;
  assign ToVote[942] = \<const0> ;
  assign ToVote[941] = \<const0> ;
  assign ToVote[940] = \<const0> ;
  assign ToVote[939] = \<const0> ;
  assign ToVote[938] = \<const0> ;
  assign ToVote[937] = \<const0> ;
  assign ToVote[936] = \<const0> ;
  assign ToVote[935] = \<const0> ;
  assign ToVote[934] = \<const0> ;
  assign ToVote[933] = \<const0> ;
  assign ToVote[932] = \<const0> ;
  assign ToVote[931] = \<const0> ;
  assign ToVote[930] = \<const0> ;
  assign ToVote[929] = \<const0> ;
  assign ToVote[928] = \<const0> ;
  assign ToVote[927] = \<const0> ;
  assign ToVote[926] = \<const0> ;
  assign ToVote[925] = \<const0> ;
  assign ToVote[924] = \<const0> ;
  assign ToVote[923] = \<const0> ;
  assign ToVote[922] = \<const0> ;
  assign ToVote[921] = \<const0> ;
  assign ToVote[920] = \<const0> ;
  assign ToVote[919] = \<const0> ;
  assign ToVote[918] = \<const0> ;
  assign ToVote[917] = \<const0> ;
  assign ToVote[916] = \<const0> ;
  assign ToVote[915] = \<const0> ;
  assign ToVote[914] = \<const0> ;
  assign ToVote[913] = \<const0> ;
  assign ToVote[912] = \<const0> ;
  assign ToVote[911] = \<const0> ;
  assign ToVote[910] = \<const0> ;
  assign ToVote[909] = \<const0> ;
  assign ToVote[908] = \<const0> ;
  assign ToVote[907] = \<const0> ;
  assign ToVote[906] = \<const0> ;
  assign ToVote[905] = \<const0> ;
  assign ToVote[904] = \<const0> ;
  assign ToVote[903] = \<const0> ;
  assign ToVote[902] = \<const0> ;
  assign ToVote[901] = \<const0> ;
  assign ToVote[900] = \<const0> ;
  assign ToVote[899] = \<const0> ;
  assign ToVote[898] = \<const0> ;
  assign ToVote[897] = \<const0> ;
  assign ToVote[896] = \<const0> ;
  assign ToVote[895] = \<const0> ;
  assign ToVote[894] = \<const0> ;
  assign ToVote[893] = \<const0> ;
  assign ToVote[892] = \<const0> ;
  assign ToVote[891] = \<const0> ;
  assign ToVote[890] = \<const0> ;
  assign ToVote[889] = \<const0> ;
  assign ToVote[888] = \<const0> ;
  assign ToVote[887] = \<const0> ;
  assign ToVote[886] = \<const0> ;
  assign ToVote[885] = \<const0> ;
  assign ToVote[884] = \<const0> ;
  assign ToVote[883] = \<const0> ;
  assign ToVote[882] = \<const0> ;
  assign ToVote[881] = \<const0> ;
  assign ToVote[880] = \<const0> ;
  assign ToVote[879] = \<const0> ;
  assign ToVote[878] = \<const0> ;
  assign ToVote[877] = \<const0> ;
  assign ToVote[876] = \<const0> ;
  assign ToVote[875] = \<const0> ;
  assign ToVote[874] = \<const0> ;
  assign ToVote[873] = \<const0> ;
  assign ToVote[872] = \<const0> ;
  assign ToVote[871] = \<const0> ;
  assign ToVote[870] = \<const0> ;
  assign ToVote[869] = \<const0> ;
  assign ToVote[868] = \<const0> ;
  assign ToVote[867] = \<const0> ;
  assign ToVote[866] = \<const0> ;
  assign ToVote[865] = \<const0> ;
  assign ToVote[864] = \<const0> ;
  assign ToVote[863] = \<const0> ;
  assign ToVote[862] = \<const0> ;
  assign ToVote[861] = \<const0> ;
  assign ToVote[860] = \<const0> ;
  assign ToVote[859] = \<const0> ;
  assign ToVote[858] = \<const0> ;
  assign ToVote[857] = \<const0> ;
  assign ToVote[856] = \<const0> ;
  assign ToVote[855] = \<const0> ;
  assign ToVote[854] = \<const0> ;
  assign ToVote[853] = \<const0> ;
  assign ToVote[852] = \<const0> ;
  assign ToVote[851] = \<const0> ;
  assign ToVote[850] = \<const0> ;
  assign ToVote[849] = \<const0> ;
  assign ToVote[848] = \<const0> ;
  assign ToVote[847] = \<const0> ;
  assign ToVote[846] = \<const0> ;
  assign ToVote[845] = \<const0> ;
  assign ToVote[844] = \<const0> ;
  assign ToVote[843] = \<const0> ;
  assign ToVote[842] = \<const0> ;
  assign ToVote[841] = \<const0> ;
  assign ToVote[840] = \<const0> ;
  assign ToVote[839] = \<const0> ;
  assign ToVote[838] = \<const0> ;
  assign ToVote[837] = \<const0> ;
  assign ToVote[836] = \<const0> ;
  assign ToVote[835] = \<const0> ;
  assign ToVote[834] = \<const0> ;
  assign ToVote[833] = \<const0> ;
  assign ToVote[832] = \<const0> ;
  assign ToVote[831] = \<const0> ;
  assign ToVote[830] = \<const0> ;
  assign ToVote[829] = \<const0> ;
  assign ToVote[828] = \<const0> ;
  assign ToVote[827] = \<const0> ;
  assign ToVote[826] = \<const0> ;
  assign ToVote[825] = \<const0> ;
  assign ToVote[824] = \<const0> ;
  assign ToVote[823] = \<const0> ;
  assign ToVote[822] = \<const0> ;
  assign ToVote[821] = \<const0> ;
  assign ToVote[820] = \<const0> ;
  assign ToVote[819] = \<const0> ;
  assign ToVote[818] = \<const0> ;
  assign ToVote[817] = \<const0> ;
  assign ToVote[816] = \<const0> ;
  assign ToVote[815] = \<const0> ;
  assign ToVote[814] = \<const0> ;
  assign ToVote[813] = \<const0> ;
  assign ToVote[812] = \<const0> ;
  assign ToVote[811] = \<const0> ;
  assign ToVote[810] = \<const0> ;
  assign ToVote[809] = \<const0> ;
  assign ToVote[808] = \<const0> ;
  assign ToVote[807] = \<const0> ;
  assign ToVote[806] = \<const0> ;
  assign ToVote[805] = \<const0> ;
  assign ToVote[804] = \<const0> ;
  assign ToVote[803] = \<const0> ;
  assign ToVote[802] = \<const0> ;
  assign ToVote[801] = \<const0> ;
  assign ToVote[800] = \<const0> ;
  assign ToVote[799] = \<const0> ;
  assign ToVote[798] = \<const0> ;
  assign ToVote[797] = \<const0> ;
  assign ToVote[796] = \<const0> ;
  assign ToVote[795] = \<const0> ;
  assign ToVote[794] = \<const0> ;
  assign ToVote[793] = \<const0> ;
  assign ToVote[792] = \<const0> ;
  assign ToVote[791] = \<const0> ;
  assign ToVote[790] = \<const0> ;
  assign ToVote[789] = \<const0> ;
  assign ToVote[788] = \<const0> ;
  assign ToVote[787] = \<const0> ;
  assign ToVote[786] = \<const0> ;
  assign ToVote[785] = \<const0> ;
  assign ToVote[784] = \<const0> ;
  assign ToVote[783] = \<const0> ;
  assign ToVote[782] = \<const0> ;
  assign ToVote[781] = \<const0> ;
  assign ToVote[780] = \<const0> ;
  assign ToVote[779] = \<const0> ;
  assign ToVote[778] = \<const0> ;
  assign ToVote[777] = \<const0> ;
  assign ToVote[776] = \<const0> ;
  assign ToVote[775] = \<const0> ;
  assign ToVote[774] = \<const0> ;
  assign ToVote[773] = \<const0> ;
  assign ToVote[772] = \<const0> ;
  assign ToVote[771] = \<const0> ;
  assign ToVote[770] = \<const0> ;
  assign ToVote[769] = \<const0> ;
  assign ToVote[768] = \<const0> ;
  assign ToVote[767] = \<const0> ;
  assign ToVote[766] = \<const0> ;
  assign ToVote[765] = \<const0> ;
  assign ToVote[764] = \<const0> ;
  assign ToVote[763] = \<const0> ;
  assign ToVote[762] = \<const0> ;
  assign ToVote[761] = \<const0> ;
  assign ToVote[760] = \<const0> ;
  assign ToVote[759] = \<const0> ;
  assign ToVote[758] = \<const0> ;
  assign ToVote[757] = \<const0> ;
  assign ToVote[756] = \<const0> ;
  assign ToVote[755] = \<const0> ;
  assign ToVote[754] = \<const0> ;
  assign ToVote[753] = \<const0> ;
  assign ToVote[752] = \<const0> ;
  assign ToVote[751] = \<const0> ;
  assign ToVote[750] = \<const0> ;
  assign ToVote[749] = \<const0> ;
  assign ToVote[748] = \<const0> ;
  assign ToVote[747] = \<const0> ;
  assign ToVote[746] = \<const0> ;
  assign ToVote[745] = \<const0> ;
  assign ToVote[744] = \<const0> ;
  assign ToVote[743] = \<const0> ;
  assign ToVote[742] = \<const0> ;
  assign ToVote[741] = \<const0> ;
  assign ToVote[740] = \<const0> ;
  assign ToVote[739] = \<const0> ;
  assign ToVote[738] = \<const0> ;
  assign ToVote[737] = \<const0> ;
  assign ToVote[736] = \<const0> ;
  assign ToVote[735] = \<const0> ;
  assign ToVote[734] = \<const0> ;
  assign ToVote[733] = \<const0> ;
  assign ToVote[732] = \<const0> ;
  assign ToVote[731] = \<const0> ;
  assign ToVote[730] = \<const0> ;
  assign ToVote[729] = \<const0> ;
  assign ToVote[728] = \<const0> ;
  assign ToVote[727] = \<const0> ;
  assign ToVote[726] = \<const0> ;
  assign ToVote[725] = \<const0> ;
  assign ToVote[724] = \<const0> ;
  assign ToVote[723] = \<const0> ;
  assign ToVote[722] = \<const0> ;
  assign ToVote[721] = \<const0> ;
  assign ToVote[720] = \<const0> ;
  assign ToVote[719] = \<const0> ;
  assign ToVote[718] = \<const0> ;
  assign ToVote[717] = \<const0> ;
  assign ToVote[716] = \<const0> ;
  assign ToVote[715] = \<const0> ;
  assign ToVote[714] = \<const0> ;
  assign ToVote[713] = \<const0> ;
  assign ToVote[712] = \<const0> ;
  assign ToVote[711] = \<const0> ;
  assign ToVote[710] = \<const0> ;
  assign ToVote[709] = \<const0> ;
  assign ToVote[708] = \<const0> ;
  assign ToVote[707] = \<const0> ;
  assign ToVote[706] = \<const0> ;
  assign ToVote[705] = \<const0> ;
  assign ToVote[704] = \<const0> ;
  assign ToVote[703] = \<const0> ;
  assign ToVote[702] = \<const0> ;
  assign ToVote[701] = \<const0> ;
  assign ToVote[700] = \<const0> ;
  assign ToVote[699] = \<const0> ;
  assign ToVote[698] = \<const0> ;
  assign ToVote[697] = \<const0> ;
  assign ToVote[696] = \<const0> ;
  assign ToVote[695] = \<const0> ;
  assign ToVote[694] = \<const0> ;
  assign ToVote[693] = \<const0> ;
  assign ToVote[692] = \<const0> ;
  assign ToVote[691] = \<const0> ;
  assign ToVote[690] = \<const0> ;
  assign ToVote[689] = \<const0> ;
  assign ToVote[688] = \<const0> ;
  assign ToVote[687] = \<const0> ;
  assign ToVote[686] = \<const0> ;
  assign ToVote[685] = \<const0> ;
  assign ToVote[684] = \<const0> ;
  assign ToVote[683] = \<const0> ;
  assign ToVote[682] = \<const0> ;
  assign ToVote[681] = \<const0> ;
  assign ToVote[680] = \<const0> ;
  assign ToVote[679] = \<const0> ;
  assign ToVote[678] = \<const0> ;
  assign ToVote[677] = \<const0> ;
  assign ToVote[676] = \<const0> ;
  assign ToVote[675] = \<const0> ;
  assign ToVote[674] = \<const0> ;
  assign ToVote[673] = \<const0> ;
  assign ToVote[672] = \<const0> ;
  assign ToVote[671] = \<const0> ;
  assign ToVote[670] = \<const0> ;
  assign ToVote[669] = \<const0> ;
  assign ToVote[668] = \<const0> ;
  assign ToVote[667] = \<const0> ;
  assign ToVote[666] = \<const0> ;
  assign ToVote[665] = \<const0> ;
  assign ToVote[664] = \<const0> ;
  assign ToVote[663] = \<const0> ;
  assign ToVote[662] = \<const0> ;
  assign ToVote[661] = \<const0> ;
  assign ToVote[660] = \<const0> ;
  assign ToVote[659] = \<const0> ;
  assign ToVote[658] = \<const0> ;
  assign ToVote[657] = \<const0> ;
  assign ToVote[656] = \<const0> ;
  assign ToVote[655] = \<const0> ;
  assign ToVote[654] = \<const0> ;
  assign ToVote[653] = \<const0> ;
  assign ToVote[652] = \<const0> ;
  assign ToVote[651] = \<const0> ;
  assign ToVote[650] = \<const0> ;
  assign ToVote[649] = \<const0> ;
  assign ToVote[648] = \<const0> ;
  assign ToVote[647] = \<const0> ;
  assign ToVote[646] = \<const0> ;
  assign ToVote[645] = \<const0> ;
  assign ToVote[644] = \<const0> ;
  assign ToVote[643] = \<const0> ;
  assign ToVote[642] = \<const0> ;
  assign ToVote[641] = \<const0> ;
  assign ToVote[640] = \<const0> ;
  assign ToVote[639] = \<const0> ;
  assign ToVote[638] = \<const0> ;
  assign ToVote[637] = \<const0> ;
  assign ToVote[636] = \<const0> ;
  assign ToVote[635] = \<const0> ;
  assign ToVote[634] = \<const0> ;
  assign ToVote[633] = \<const0> ;
  assign ToVote[632] = \<const0> ;
  assign ToVote[631] = \<const0> ;
  assign ToVote[630] = \<const0> ;
  assign ToVote[629] = \<const0> ;
  assign ToVote[628] = \<const0> ;
  assign ToVote[627] = \<const0> ;
  assign ToVote[626] = \<const0> ;
  assign ToVote[625] = \<const0> ;
  assign ToVote[624] = \<const0> ;
  assign ToVote[623] = \<const0> ;
  assign ToVote[622] = \<const0> ;
  assign ToVote[621] = \<const0> ;
  assign ToVote[620] = \<const0> ;
  assign ToVote[619] = \<const0> ;
  assign ToVote[618] = \<const0> ;
  assign ToVote[617] = \<const0> ;
  assign ToVote[616] = \<const0> ;
  assign ToVote[615] = \<const0> ;
  assign ToVote[614] = \<const0> ;
  assign ToVote[613] = \<const0> ;
  assign ToVote[612] = \<const0> ;
  assign ToVote[611] = \<const0> ;
  assign ToVote[610] = \<const0> ;
  assign ToVote[609] = \<const0> ;
  assign ToVote[608] = \<const0> ;
  assign ToVote[607] = \<const0> ;
  assign ToVote[606] = \<const0> ;
  assign ToVote[605] = \<const0> ;
  assign ToVote[604] = \<const0> ;
  assign ToVote[603] = \<const0> ;
  assign ToVote[602] = \<const0> ;
  assign ToVote[601] = \<const0> ;
  assign ToVote[600] = \<const0> ;
  assign ToVote[599] = \<const0> ;
  assign ToVote[598] = \<const0> ;
  assign ToVote[597] = \<const0> ;
  assign ToVote[596] = \<const0> ;
  assign ToVote[595] = \<const0> ;
  assign ToVote[594] = \<const0> ;
  assign ToVote[593] = \<const0> ;
  assign ToVote[592] = \<const0> ;
  assign ToVote[591] = \<const0> ;
  assign ToVote[590] = \<const0> ;
  assign ToVote[589] = \<const0> ;
  assign ToVote[588] = \<const0> ;
  assign ToVote[587] = \<const0> ;
  assign ToVote[586] = \<const0> ;
  assign ToVote[585] = \<const0> ;
  assign ToVote[584] = \<const0> ;
  assign ToVote[583] = \<const0> ;
  assign ToVote[582] = \<const0> ;
  assign ToVote[581] = \<const0> ;
  assign ToVote[580] = \<const0> ;
  assign ToVote[579] = \<const0> ;
  assign ToVote[578] = \<const0> ;
  assign ToVote[577] = \<const0> ;
  assign ToVote[576] = \<const0> ;
  assign ToVote[575] = \<const0> ;
  assign ToVote[574] = \<const0> ;
  assign ToVote[573] = \<const0> ;
  assign ToVote[572] = \<const0> ;
  assign ToVote[571] = \<const0> ;
  assign ToVote[570] = \<const0> ;
  assign ToVote[569] = \<const0> ;
  assign ToVote[568] = \<const0> ;
  assign ToVote[567] = \<const0> ;
  assign ToVote[566] = \<const0> ;
  assign ToVote[565] = \<const0> ;
  assign ToVote[564] = \<const0> ;
  assign ToVote[563] = \<const0> ;
  assign ToVote[562] = \<const0> ;
  assign ToVote[561] = \<const0> ;
  assign ToVote[560] = \<const0> ;
  assign ToVote[559] = \<const0> ;
  assign ToVote[558] = \<const0> ;
  assign ToVote[557] = \<const0> ;
  assign ToVote[556] = \<const0> ;
  assign ToVote[555] = \<const0> ;
  assign ToVote[554] = \<const0> ;
  assign ToVote[553] = \<const0> ;
  assign ToVote[552] = \<const0> ;
  assign ToVote[551] = \<const0> ;
  assign ToVote[550] = \<const0> ;
  assign ToVote[549] = \<const0> ;
  assign ToVote[548] = \<const0> ;
  assign ToVote[547] = \<const0> ;
  assign ToVote[546] = \<const0> ;
  assign ToVote[545] = \<const0> ;
  assign ToVote[544] = \<const0> ;
  assign ToVote[543] = \<const0> ;
  assign ToVote[542] = \<const0> ;
  assign ToVote[541] = \<const0> ;
  assign ToVote[540] = \<const0> ;
  assign ToVote[539] = \<const0> ;
  assign ToVote[538] = \<const0> ;
  assign ToVote[537] = \<const0> ;
  assign ToVote[536] = \<const0> ;
  assign ToVote[535] = \<const0> ;
  assign ToVote[534] = \<const0> ;
  assign ToVote[533] = \<const0> ;
  assign ToVote[532] = \<const0> ;
  assign ToVote[531] = \<const0> ;
  assign ToVote[530] = \<const0> ;
  assign ToVote[529] = \<const0> ;
  assign ToVote[528] = \<const0> ;
  assign ToVote[527] = \<const0> ;
  assign ToVote[526] = \<const0> ;
  assign ToVote[525] = \<const0> ;
  assign ToVote[524] = \<const0> ;
  assign ToVote[523] = \<const0> ;
  assign ToVote[522] = \<const0> ;
  assign ToVote[521] = \<const0> ;
  assign ToVote[520] = \<const0> ;
  assign ToVote[519] = \<const0> ;
  assign ToVote[518] = \<const0> ;
  assign ToVote[517] = \<const0> ;
  assign ToVote[516] = \<const0> ;
  assign ToVote[515] = \<const0> ;
  assign ToVote[514] = \<const0> ;
  assign ToVote[513] = \<const0> ;
  assign ToVote[512] = \<const0> ;
  assign ToVote[511] = \<const0> ;
  assign ToVote[510] = \<const0> ;
  assign ToVote[509] = \<const0> ;
  assign ToVote[508] = \<const0> ;
  assign ToVote[507] = \<const0> ;
  assign ToVote[506] = \<const0> ;
  assign ToVote[505] = \<const0> ;
  assign ToVote[504] = \<const0> ;
  assign ToVote[503] = \<const0> ;
  assign ToVote[502] = \<const0> ;
  assign ToVote[501] = \<const0> ;
  assign ToVote[500] = \<const0> ;
  assign ToVote[499] = \<const0> ;
  assign ToVote[498] = \<const0> ;
  assign ToVote[497] = \<const0> ;
  assign ToVote[496] = \<const0> ;
  assign ToVote[495] = \<const0> ;
  assign ToVote[494] = \<const0> ;
  assign ToVote[493] = \<const0> ;
  assign ToVote[492] = \<const0> ;
  assign ToVote[491] = \<const0> ;
  assign ToVote[490] = \<const0> ;
  assign ToVote[489] = \<const0> ;
  assign ToVote[488] = \<const0> ;
  assign ToVote[487] = \<const0> ;
  assign ToVote[486] = \<const0> ;
  assign ToVote[485] = \<const0> ;
  assign ToVote[484] = \<const0> ;
  assign ToVote[483] = \<const0> ;
  assign ToVote[482] = \<const0> ;
  assign ToVote[481] = \<const0> ;
  assign ToVote[480] = \<const0> ;
  assign ToVote[479] = \<const0> ;
  assign ToVote[478] = \<const0> ;
  assign ToVote[477] = \<const0> ;
  assign ToVote[476] = \<const0> ;
  assign ToVote[475] = \<const0> ;
  assign ToVote[474] = \<const0> ;
  assign ToVote[473] = \<const0> ;
  assign ToVote[472] = \<const0> ;
  assign ToVote[471] = \<const0> ;
  assign ToVote[470] = \<const0> ;
  assign ToVote[469] = \<const0> ;
  assign ToVote[468] = \<const0> ;
  assign ToVote[467] = \<const0> ;
  assign ToVote[466] = \<const0> ;
  assign ToVote[465] = \<const0> ;
  assign ToVote[464] = \<const0> ;
  assign ToVote[463] = \<const0> ;
  assign ToVote[462] = \<const0> ;
  assign ToVote[461] = \<const0> ;
  assign ToVote[460] = \<const0> ;
  assign ToVote[459] = \<const0> ;
  assign ToVote[458] = \<const0> ;
  assign ToVote[457] = \<const0> ;
  assign ToVote[456] = \<const0> ;
  assign ToVote[455] = \<const0> ;
  assign ToVote[454] = \<const0> ;
  assign ToVote[453] = \<const0> ;
  assign ToVote[452] = \<const0> ;
  assign ToVote[451] = \<const0> ;
  assign ToVote[450] = \<const0> ;
  assign ToVote[449] = \<const0> ;
  assign ToVote[448] = \<const0> ;
  assign ToVote[447] = \<const0> ;
  assign ToVote[446] = \<const0> ;
  assign ToVote[445] = \<const0> ;
  assign ToVote[444] = \<const0> ;
  assign ToVote[443] = \<const0> ;
  assign ToVote[442] = \<const0> ;
  assign ToVote[441] = \<const0> ;
  assign ToVote[440] = \<const0> ;
  assign ToVote[439] = \<const0> ;
  assign ToVote[438] = \<const0> ;
  assign ToVote[437] = \<const0> ;
  assign ToVote[436] = \<const0> ;
  assign ToVote[435] = \<const0> ;
  assign ToVote[434] = \<const0> ;
  assign ToVote[433] = \<const0> ;
  assign ToVote[432] = \<const0> ;
  assign ToVote[431] = \<const0> ;
  assign ToVote[430] = \<const0> ;
  assign ToVote[429] = \<const0> ;
  assign ToVote[428] = \<const0> ;
  assign ToVote[427] = \<const0> ;
  assign ToVote[426] = \<const0> ;
  assign ToVote[425] = \<const0> ;
  assign ToVote[424] = \<const0> ;
  assign ToVote[423] = \<const0> ;
  assign ToVote[422] = \<const0> ;
  assign ToVote[421] = \<const0> ;
  assign ToVote[420] = \<const0> ;
  assign ToVote[419] = \<const0> ;
  assign ToVote[418] = \<const0> ;
  assign ToVote[417] = \<const0> ;
  assign ToVote[416] = \<const0> ;
  assign ToVote[415] = \<const0> ;
  assign ToVote[414] = \<const0> ;
  assign ToVote[413] = \<const0> ;
  assign ToVote[412] = \<const0> ;
  assign ToVote[411] = \<const0> ;
  assign ToVote[410] = \<const0> ;
  assign ToVote[409] = \<const0> ;
  assign ToVote[408] = \<const0> ;
  assign ToVote[407] = \<const0> ;
  assign ToVote[406] = \<const0> ;
  assign ToVote[405] = \<const0> ;
  assign ToVote[404] = \<const0> ;
  assign ToVote[403] = \<const0> ;
  assign ToVote[402] = \<const0> ;
  assign ToVote[401] = \<const0> ;
  assign ToVote[400] = \<const0> ;
  assign ToVote[399] = \<const0> ;
  assign ToVote[398] = \<const0> ;
  assign ToVote[397] = \<const0> ;
  assign ToVote[396] = \<const0> ;
  assign ToVote[395] = \<const0> ;
  assign ToVote[394] = \<const0> ;
  assign ToVote[393] = \<const0> ;
  assign ToVote[392] = \<const0> ;
  assign ToVote[391] = \<const0> ;
  assign ToVote[390] = \<const0> ;
  assign ToVote[389] = \<const0> ;
  assign ToVote[388] = \<const0> ;
  assign ToVote[387] = \<const0> ;
  assign ToVote[386] = \<const0> ;
  assign ToVote[385] = \<const0> ;
  assign ToVote[384] = \<const0> ;
  assign ToVote[383] = \<const0> ;
  assign ToVote[382] = \<const0> ;
  assign ToVote[381] = \<const0> ;
  assign ToVote[380] = \<const0> ;
  assign ToVote[379] = \<const0> ;
  assign ToVote[378] = \<const0> ;
  assign ToVote[377] = \<const0> ;
  assign ToVote[376] = \<const0> ;
  assign ToVote[375] = \<const0> ;
  assign ToVote[374] = \<const0> ;
  assign ToVote[373] = \<const0> ;
  assign ToVote[372] = \<const0> ;
  assign ToVote[371] = \<const0> ;
  assign ToVote[370] = \<const0> ;
  assign ToVote[369] = \<const0> ;
  assign ToVote[368] = \<const0> ;
  assign ToVote[367] = \<const0> ;
  assign ToVote[366] = \<const0> ;
  assign ToVote[365] = \<const0> ;
  assign ToVote[364] = \<const0> ;
  assign ToVote[363] = \<const0> ;
  assign ToVote[362] = \<const0> ;
  assign ToVote[361] = \<const0> ;
  assign ToVote[360] = \<const0> ;
  assign ToVote[359] = \<const0> ;
  assign ToVote[358] = \<const0> ;
  assign ToVote[357] = \<const0> ;
  assign ToVote[356] = \<const0> ;
  assign ToVote[355] = \<const0> ;
  assign ToVote[354] = \<const0> ;
  assign ToVote[353] = \<const0> ;
  assign ToVote[352] = \<const0> ;
  assign ToVote[351] = \<const0> ;
  assign ToVote[350] = \<const0> ;
  assign ToVote[349] = \<const0> ;
  assign ToVote[348] = \<const0> ;
  assign ToVote[347] = \<const0> ;
  assign ToVote[346] = \<const0> ;
  assign ToVote[345] = \<const0> ;
  assign ToVote[344] = \<const0> ;
  assign ToVote[343] = \<const0> ;
  assign ToVote[342] = \<const0> ;
  assign ToVote[341] = \<const0> ;
  assign ToVote[340] = \<const0> ;
  assign ToVote[339] = \<const0> ;
  assign ToVote[338] = \<const0> ;
  assign ToVote[337] = \<const0> ;
  assign ToVote[336] = \<const0> ;
  assign ToVote[335] = \<const0> ;
  assign ToVote[334] = \<const0> ;
  assign ToVote[333] = \<const0> ;
  assign ToVote[332] = \<const0> ;
  assign ToVote[331] = \<const0> ;
  assign ToVote[330] = \<const0> ;
  assign ToVote[329] = \<const0> ;
  assign ToVote[328] = \<const0> ;
  assign ToVote[327] = \<const0> ;
  assign ToVote[326] = \<const0> ;
  assign ToVote[325] = \<const0> ;
  assign ToVote[324] = \<const0> ;
  assign ToVote[323] = \<const0> ;
  assign ToVote[322] = \<const0> ;
  assign ToVote[321] = \<const0> ;
  assign ToVote[320] = \<const0> ;
  assign ToVote[319] = \<const0> ;
  assign ToVote[318] = \<const0> ;
  assign ToVote[317] = \<const0> ;
  assign ToVote[316] = \<const0> ;
  assign ToVote[315] = \<const0> ;
  assign ToVote[314] = \<const0> ;
  assign ToVote[313] = \<const0> ;
  assign ToVote[312] = \<const0> ;
  assign ToVote[311] = \<const0> ;
  assign ToVote[310] = \<const0> ;
  assign ToVote[309] = \<const0> ;
  assign ToVote[308] = \<const0> ;
  assign ToVote[307] = \<const0> ;
  assign ToVote[306] = \<const0> ;
  assign ToVote[305] = \<const0> ;
  assign ToVote[304] = \<const0> ;
  assign ToVote[303] = \<const0> ;
  assign ToVote[302] = \<const0> ;
  assign ToVote[301] = \<const0> ;
  assign ToVote[300] = \<const0> ;
  assign ToVote[299] = \<const0> ;
  assign ToVote[298] = \<const0> ;
  assign ToVote[297] = \<const0> ;
  assign ToVote[296] = \<const0> ;
  assign ToVote[295] = \<const0> ;
  assign ToVote[294] = \<const0> ;
  assign ToVote[293] = \<const0> ;
  assign ToVote[292] = \<const0> ;
  assign ToVote[291] = \<const0> ;
  assign ToVote[290] = \<const0> ;
  assign ToVote[289] = \<const0> ;
  assign ToVote[288] = \<const0> ;
  assign ToVote[287] = \<const0> ;
  assign ToVote[286] = \<const0> ;
  assign ToVote[285] = \<const0> ;
  assign ToVote[284] = \<const0> ;
  assign ToVote[283] = \<const0> ;
  assign ToVote[282] = \<const0> ;
  assign ToVote[281] = \<const0> ;
  assign ToVote[280] = \<const0> ;
  assign ToVote[279] = \<const0> ;
  assign ToVote[278] = \<const0> ;
  assign ToVote[277] = \<const0> ;
  assign ToVote[276] = \<const0> ;
  assign ToVote[275] = \<const0> ;
  assign ToVote[274] = \<const0> ;
  assign ToVote[273] = \<const0> ;
  assign ToVote[272] = \<const0> ;
  assign ToVote[271] = \<const0> ;
  assign ToVote[270] = \<const0> ;
  assign ToVote[269] = \<const0> ;
  assign ToVote[268] = \<const0> ;
  assign ToVote[267] = \<const0> ;
  assign ToVote[266] = \<const0> ;
  assign ToVote[265] = \<const0> ;
  assign ToVote[264] = \<const0> ;
  assign ToVote[263] = \<const0> ;
  assign ToVote[262] = \<const0> ;
  assign ToVote[261] = \<const0> ;
  assign ToVote[260] = \<const0> ;
  assign ToVote[259] = \<const0> ;
  assign ToVote[258] = \<const0> ;
  assign ToVote[257] = \<const0> ;
  assign ToVote[256] = \<const0> ;
  assign ToVote[255] = \<const0> ;
  assign ToVote[254] = \<const0> ;
  assign ToVote[253] = \<const0> ;
  assign ToVote[252] = \<const0> ;
  assign ToVote[251] = \<const0> ;
  assign ToVote[250] = \<const0> ;
  assign ToVote[249] = \<const0> ;
  assign ToVote[248] = \<const0> ;
  assign ToVote[247] = \<const0> ;
  assign ToVote[246] = \<const0> ;
  assign ToVote[245] = \<const0> ;
  assign ToVote[244] = \<const0> ;
  assign ToVote[243] = \<const0> ;
  assign ToVote[242] = \<const0> ;
  assign ToVote[241] = \<const0> ;
  assign ToVote[240] = \<const0> ;
  assign ToVote[239] = \<const0> ;
  assign ToVote[238] = \<const0> ;
  assign ToVote[237] = \<const0> ;
  assign ToVote[236] = \<const0> ;
  assign ToVote[235] = \<const0> ;
  assign ToVote[234] = \<const0> ;
  assign ToVote[233] = \<const0> ;
  assign ToVote[232] = \<const0> ;
  assign ToVote[231] = \<const0> ;
  assign ToVote[230] = \<const0> ;
  assign ToVote[229] = \<const0> ;
  assign ToVote[228] = \<const0> ;
  assign ToVote[227] = \<const0> ;
  assign ToVote[226] = \<const0> ;
  assign ToVote[225] = \<const0> ;
  assign ToVote[224] = \<const0> ;
  assign ToVote[223] = \<const0> ;
  assign ToVote[222] = \<const0> ;
  assign ToVote[221] = \<const0> ;
  assign ToVote[220] = \<const0> ;
  assign ToVote[219] = \<const0> ;
  assign ToVote[218] = \<const0> ;
  assign ToVote[217] = \<const0> ;
  assign ToVote[216] = \<const0> ;
  assign ToVote[215] = \<const0> ;
  assign ToVote[214] = \<const0> ;
  assign ToVote[213] = \<const0> ;
  assign ToVote[212] = \<const0> ;
  assign ToVote[211] = \<const0> ;
  assign ToVote[210] = \<const0> ;
  assign ToVote[209] = \<const0> ;
  assign ToVote[208] = \<const0> ;
  assign ToVote[207] = \<const0> ;
  assign ToVote[206] = \<const0> ;
  assign ToVote[205] = \<const0> ;
  assign ToVote[204] = \<const0> ;
  assign ToVote[203] = \<const0> ;
  assign ToVote[202] = \<const0> ;
  assign ToVote[201] = \<const0> ;
  assign ToVote[200] = \<const0> ;
  assign ToVote[199] = \<const0> ;
  assign ToVote[198] = \<const0> ;
  assign ToVote[197] = \<const0> ;
  assign ToVote[196] = \<const0> ;
  assign ToVote[195] = \<const0> ;
  assign ToVote[194] = \<const0> ;
  assign ToVote[193] = \<const0> ;
  assign ToVote[192] = \<const0> ;
  assign ToVote[191] = \<const0> ;
  assign ToVote[190] = \<const0> ;
  assign ToVote[189] = \<const0> ;
  assign ToVote[188] = \<const0> ;
  assign ToVote[187] = \<const0> ;
  assign ToVote[186] = \<const0> ;
  assign ToVote[185] = \<const0> ;
  assign ToVote[184] = \<const0> ;
  assign ToVote[183] = \<const0> ;
  assign ToVote[182] = \<const0> ;
  assign ToVote[181] = \<const0> ;
  assign ToVote[180] = \<const0> ;
  assign ToVote[179] = \<const0> ;
  assign ToVote[178] = \<const0> ;
  assign ToVote[177] = \<const0> ;
  assign ToVote[176] = \<const0> ;
  assign ToVote[175] = \<const0> ;
  assign ToVote[174] = \<const0> ;
  assign ToVote[173] = \<const0> ;
  assign ToVote[172] = \<const0> ;
  assign ToVote[171] = \<const0> ;
  assign ToVote[170] = \<const0> ;
  assign ToVote[169] = \<const0> ;
  assign ToVote[168] = \<const0> ;
  assign ToVote[167] = \<const0> ;
  assign ToVote[166] = \<const0> ;
  assign ToVote[165] = \<const0> ;
  assign ToVote[164] = \<const0> ;
  assign ToVote[163] = \<const0> ;
  assign ToVote[162] = \<const0> ;
  assign ToVote[161] = \<const0> ;
  assign ToVote[160] = \<const0> ;
  assign ToVote[159] = \<const0> ;
  assign ToVote[158] = \<const0> ;
  assign ToVote[157] = \<const0> ;
  assign ToVote[156] = \<const0> ;
  assign ToVote[155] = \<const0> ;
  assign ToVote[154] = \<const0> ;
  assign ToVote[153] = \<const0> ;
  assign ToVote[152] = \<const0> ;
  assign ToVote[151] = \<const0> ;
  assign ToVote[150] = \<const0> ;
  assign ToVote[149] = \<const0> ;
  assign ToVote[148] = \<const0> ;
  assign ToVote[147] = \<const0> ;
  assign ToVote[146] = \<const0> ;
  assign ToVote[145] = \<const0> ;
  assign ToVote[144] = \<const0> ;
  assign ToVote[143] = \<const0> ;
  assign ToVote[142] = \<const0> ;
  assign ToVote[141] = \<const0> ;
  assign ToVote[140] = \<const0> ;
  assign ToVote[139] = \<const0> ;
  assign ToVote[138] = \<const0> ;
  assign ToVote[137] = \<const0> ;
  assign ToVote[136] = \<const0> ;
  assign ToVote[135] = \<const0> ;
  assign ToVote[134] = \<const0> ;
  assign ToVote[133] = \<const0> ;
  assign ToVote[132] = \<const0> ;
  assign ToVote[131] = \<const0> ;
  assign ToVote[130] = \<const0> ;
  assign ToVote[129] = \<const0> ;
  assign ToVote[128] = \<const0> ;
  assign ToVote[127] = \<const0> ;
  assign ToVote[126] = \<const0> ;
  assign ToVote[125] = \<const0> ;
  assign ToVote[124] = \<const0> ;
  assign ToVote[123] = \<const0> ;
  assign ToVote[122] = \<const0> ;
  assign ToVote[121] = \<const0> ;
  assign ToVote[120] = \<const0> ;
  assign ToVote[119] = \<const0> ;
  assign ToVote[118] = \<const0> ;
  assign ToVote[117] = \<const0> ;
  assign ToVote[116] = \<const0> ;
  assign ToVote[115] = \<const0> ;
  assign ToVote[114] = \<const0> ;
  assign ToVote[113] = \<const0> ;
  assign ToVote[112] = \<const0> ;
  assign ToVote[111] = \<const0> ;
  assign ToVote[110] = \<const0> ;
  assign ToVote[109] = \<const0> ;
  assign ToVote[108] = \<const0> ;
  assign ToVote[107] = \<const0> ;
  assign ToVote[106] = \<const0> ;
  assign ToVote[105] = \<const0> ;
  assign ToVote[104] = \<const0> ;
  assign ToVote[103] = \<const0> ;
  assign ToVote[102] = \<const0> ;
  assign ToVote[101] = \<const0> ;
  assign ToVote[100] = \<const0> ;
  assign ToVote[99] = \<const0> ;
  assign ToVote[98] = \<const0> ;
  assign ToVote[97] = \<const0> ;
  assign ToVote[96] = \<const0> ;
  assign ToVote[95] = \<const0> ;
  assign ToVote[94] = \<const0> ;
  assign ToVote[93] = \<const0> ;
  assign ToVote[92] = \<const0> ;
  assign ToVote[91] = \<const0> ;
  assign ToVote[90] = \<const0> ;
  assign ToVote[89] = \<const0> ;
  assign ToVote[88] = \<const0> ;
  assign ToVote[87] = \<const0> ;
  assign ToVote[86] = \<const0> ;
  assign ToVote[85] = \<const0> ;
  assign ToVote[84] = \<const0> ;
  assign ToVote[83] = \<const0> ;
  assign ToVote[82] = \<const0> ;
  assign ToVote[81] = \<const0> ;
  assign ToVote[80] = \<const0> ;
  assign ToVote[79] = \<const0> ;
  assign ToVote[78] = \<const0> ;
  assign ToVote[77] = \<const0> ;
  assign ToVote[76] = \<const0> ;
  assign ToVote[75] = \<const0> ;
  assign ToVote[74] = \<const0> ;
  assign ToVote[73] = \<const0> ;
  assign ToVote[72] = \<const0> ;
  assign ToVote[71] = \<const0> ;
  assign ToVote[70] = \<const0> ;
  assign ToVote[69] = \<const0> ;
  assign ToVote[68] = \<const0> ;
  assign ToVote[67] = \<const0> ;
  assign ToVote[66] = \<const0> ;
  assign ToVote[65] = \<const0> ;
  assign ToVote[64] = \<const0> ;
  assign ToVote[63] = \<const0> ;
  assign ToVote[62] = \<const0> ;
  assign ToVote[61] = \<const0> ;
  assign ToVote[60] = \<const0> ;
  assign ToVote[59] = \<const0> ;
  assign ToVote[58] = \<const0> ;
  assign ToVote[57] = \<const0> ;
  assign ToVote[56] = \<const0> ;
  assign ToVote[55] = \<const0> ;
  assign ToVote[54] = \<const0> ;
  assign ToVote[53] = \<const0> ;
  assign ToVote[52] = \<const0> ;
  assign ToVote[51] = \<const0> ;
  assign ToVote[50] = \<const0> ;
  assign ToVote[49] = \<const0> ;
  assign ToVote[48] = \<const0> ;
  assign ToVote[47] = \<const0> ;
  assign ToVote[46] = \<const0> ;
  assign ToVote[45] = \<const0> ;
  assign ToVote[44] = \<const0> ;
  assign ToVote[43] = \<const0> ;
  assign ToVote[42] = \<const0> ;
  assign ToVote[41] = \<const0> ;
  assign ToVote[40] = \<const0> ;
  assign ToVote[39] = \<const0> ;
  assign ToVote[38] = \<const0> ;
  assign ToVote[37] = \<const0> ;
  assign ToVote[36] = \<const0> ;
  assign ToVote[35] = \<const0> ;
  assign ToVote[34] = \<const0> ;
  assign ToVote[33] = \<const0> ;
  assign ToVote[32] = \<const0> ;
  assign ToVote[31] = \<const0> ;
  assign ToVote[30] = \<const0> ;
  assign ToVote[29] = \<const0> ;
  assign ToVote[28] = \<const0> ;
  assign ToVote[27] = \<const0> ;
  assign ToVote[26] = \<const0> ;
  assign ToVote[25] = \<const0> ;
  assign ToVote[24] = \<const0> ;
  assign ToVote[23] = \<const0> ;
  assign ToVote[22] = \<const0> ;
  assign ToVote[21] = \<const0> ;
  assign ToVote[20] = \<const0> ;
  assign ToVote[19] = \<const0> ;
  assign ToVote[18] = \<const0> ;
  assign ToVote[17] = \<const0> ;
  assign ToVote[16] = \<const0> ;
  assign ToVote[15] = \<const0> ;
  assign ToVote[14] = \<const0> ;
  assign ToVote[13] = \<const0> ;
  assign ToVote[12] = \<const0> ;
  assign ToVote[11] = \<const0> ;
  assign ToVote[10] = \<const0> ;
  assign ToVote[9] = \<const0> ;
  assign ToVote[8] = \<const0> ;
  assign ToVote[7] = \<const0> ;
  assign ToVote[6] = \<const0> ;
  assign ToVote[5] = \<const0> ;
  assign ToVote[4] = \<const0> ;
  assign ToVote[3] = \<const0> ;
  assign ToVote[2] = \<const0> ;
  assign ToVote[1] = \<const0> ;
  assign ToVote[0] = \<const0> ;
  GND GND
       (.G(\<const0> ));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Iomodule_core IOModule_Core_I1
       (.Clk(Clk),
        .D(write_data[7:0]),
        .E(uart_tx_write),
        .Rst(Rst),
        .Sl_DBus({\^Sl_DBus [24],\^Sl_DBus [25],\^Sl_DBus [26],\^Sl_DBus [27],\^Sl_DBus [28],\^Sl_DBus [29],\^Sl_DBus [30],\^Sl_DBus [31]}),
        .\TMR_No.RX_Data_reg[0] (\lmb_abus_Q_reg_n_0_[6] ),
        .\TMR_No.RX_Data_reg[0]_0 (Sl_Wait),
        .\TMR_No.RX_Data_reg[0]_1 (\lmb_abus_Q_reg_n_0_[3] ),
        .\TMR_No.RX_Data_reg[0]_2 (\lmb_abus_Q_reg_n_0_[4] ),
        .\TMR_No.RX_Data_reg[0]_3 (\lmb_abus_Q_reg_n_0_[5] ),
        .\TMR_No.RX_Data_reg[0]_4 (\lmb_abus_Q_reg_n_0_[2] ),
        .UART_Interrupt(UART_Interrupt),
        .UART_Rx(UART_Rx),
        .UART_Tx(UART_Tx));
  LUT2 #(
    .INIT(4'hE)) 
    Sl_Ready_INST_0
       (.I0(lmb_reg_read_Q),
        .I1(lmb_reg_write),
        .O(Sl_Ready));
  VCC VCC
       (.P(\<const1> ));
  FDRE \lmb_abus_Q_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(LMB_ABus[24]),
        .Q(p_0_in16_in),
        .R(1'b0));
  FDRE \lmb_abus_Q_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(LMB_ABus[25]),
        .Q(\lmb_abus_Q_reg_n_0_[2] ),
        .R(1'b0));
  FDRE \lmb_abus_Q_reg[3] 
       (.C(Clk),
        .CE(1'b1),
        .D(LMB_ABus[26]),
        .Q(\lmb_abus_Q_reg_n_0_[3] ),
        .R(1'b0));
  FDRE \lmb_abus_Q_reg[4] 
       (.C(Clk),
        .CE(1'b1),
        .D(LMB_ABus[27]),
        .Q(\lmb_abus_Q_reg_n_0_[4] ),
        .R(1'b0));
  FDRE \lmb_abus_Q_reg[5] 
       (.C(Clk),
        .CE(1'b1),
        .D(LMB_ABus[28]),
        .Q(\lmb_abus_Q_reg_n_0_[5] ),
        .R(1'b0));
  FDRE \lmb_abus_Q_reg[6] 
       (.C(Clk),
        .CE(1'b1),
        .D(LMB_ABus[29]),
        .Q(\lmb_abus_Q_reg_n_0_[6] ),
        .R(1'b0));
  FDRE lmb_reg_read_Q_reg
       (.C(Clk),
        .CE(1'b1),
        .D(Sl_Wait),
        .Q(lmb_reg_read_Q),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair11" *) 
  LUT4 #(
    .INIT(16'h2000)) 
    lmb_reg_read_i_1
       (.I0(LMB_ABus[0]),
        .I1(LMB_ABus[1]),
        .I2(LMB_AddrStrobe),
        .I3(LMB_ReadStrobe),
        .O(lmb_reg_read0));
  FDRE lmb_reg_read_reg
       (.C(Clk),
        .CE(1'b1),
        .D(lmb_reg_read0),
        .Q(Sl_Wait),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair11" *) 
  LUT4 #(
    .INIT(16'h2000)) 
    lmb_reg_write_i_1
       (.I0(LMB_ABus[0]),
        .I1(LMB_ABus[1]),
        .I2(LMB_AddrStrobe),
        .I3(LMB_WriteStrobe),
        .O(lmb_reg_write0));
  FDRE lmb_reg_write_reg
       (.C(Clk),
        .CE(1'b1),
        .D(lmb_reg_write0),
        .Q(lmb_reg_write),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h0000000000000040)) 
    uart_tx_write_inferred_i_1
       (.I0(p_0_in16_in),
        .I1(lmb_reg_write),
        .I2(\lmb_abus_Q_reg_n_0_[6] ),
        .I3(uart_tx_write_inferred_i_2_n_0),
        .I4(\lmb_abus_Q_reg_n_0_[5] ),
        .I5(\lmb_abus_Q_reg_n_0_[2] ),
        .O(uart_tx_write));
  LUT2 #(
    .INIT(4'hE)) 
    uart_tx_write_inferred_i_2
       (.I0(\lmb_abus_Q_reg_n_0_[3] ),
        .I1(\lmb_abus_Q_reg_n_0_[4] ),
        .O(uart_tx_write_inferred_i_2_n_0));
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDRE \write_data_reg[0] 
       (.C(Clk),
        .CE(1'b1),
        .D(LMB_WriteDBus[31]),
        .Q(write_data[0]),
        .R(1'b0));
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDRE \write_data_reg[10] 
       (.C(Clk),
        .CE(1'b1),
        .D(LMB_WriteDBus[21]),
        .Q(write_data[10]),
        .R(1'b0));
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDRE \write_data_reg[11] 
       (.C(Clk),
        .CE(1'b1),
        .D(LMB_WriteDBus[20]),
        .Q(write_data[11]),
        .R(1'b0));
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDRE \write_data_reg[12] 
       (.C(Clk),
        .CE(1'b1),
        .D(LMB_WriteDBus[19]),
        .Q(write_data[12]),
        .R(1'b0));
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDRE \write_data_reg[13] 
       (.C(Clk),
        .CE(1'b1),
        .D(LMB_WriteDBus[18]),
        .Q(write_data[13]),
        .R(1'b0));
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDRE \write_data_reg[14] 
       (.C(Clk),
        .CE(1'b1),
        .D(LMB_WriteDBus[17]),
        .Q(write_data[14]),
        .R(1'b0));
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDRE \write_data_reg[15] 
       (.C(Clk),
        .CE(1'b1),
        .D(LMB_WriteDBus[16]),
        .Q(write_data[15]),
        .R(1'b0));
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDRE \write_data_reg[16] 
       (.C(Clk),
        .CE(1'b1),
        .D(LMB_WriteDBus[15]),
        .Q(write_data[16]),
        .R(1'b0));
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDRE \write_data_reg[17] 
       (.C(Clk),
        .CE(1'b1),
        .D(LMB_WriteDBus[14]),
        .Q(write_data[17]),
        .R(1'b0));
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDRE \write_data_reg[18] 
       (.C(Clk),
        .CE(1'b1),
        .D(LMB_WriteDBus[13]),
        .Q(write_data[18]),
        .R(1'b0));
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDRE \write_data_reg[19] 
       (.C(Clk),
        .CE(1'b1),
        .D(LMB_WriteDBus[12]),
        .Q(write_data[19]),
        .R(1'b0));
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDRE \write_data_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(LMB_WriteDBus[30]),
        .Q(write_data[1]),
        .R(1'b0));
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDRE \write_data_reg[20] 
       (.C(Clk),
        .CE(1'b1),
        .D(LMB_WriteDBus[11]),
        .Q(write_data[20]),
        .R(1'b0));
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDRE \write_data_reg[21] 
       (.C(Clk),
        .CE(1'b1),
        .D(LMB_WriteDBus[10]),
        .Q(write_data[21]),
        .R(1'b0));
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDRE \write_data_reg[22] 
       (.C(Clk),
        .CE(1'b1),
        .D(LMB_WriteDBus[9]),
        .Q(write_data[22]),
        .R(1'b0));
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDRE \write_data_reg[23] 
       (.C(Clk),
        .CE(1'b1),
        .D(LMB_WriteDBus[8]),
        .Q(write_data[23]),
        .R(1'b0));
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDRE \write_data_reg[24] 
       (.C(Clk),
        .CE(1'b1),
        .D(LMB_WriteDBus[7]),
        .Q(write_data[24]),
        .R(1'b0));
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDRE \write_data_reg[25] 
       (.C(Clk),
        .CE(1'b1),
        .D(LMB_WriteDBus[6]),
        .Q(write_data[25]),
        .R(1'b0));
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDRE \write_data_reg[26] 
       (.C(Clk),
        .CE(1'b1),
        .D(LMB_WriteDBus[5]),
        .Q(write_data[26]),
        .R(1'b0));
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDRE \write_data_reg[27] 
       (.C(Clk),
        .CE(1'b1),
        .D(LMB_WriteDBus[4]),
        .Q(write_data[27]),
        .R(1'b0));
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDRE \write_data_reg[28] 
       (.C(Clk),
        .CE(1'b1),
        .D(LMB_WriteDBus[3]),
        .Q(write_data[28]),
        .R(1'b0));
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDRE \write_data_reg[29] 
       (.C(Clk),
        .CE(1'b1),
        .D(LMB_WriteDBus[2]),
        .Q(write_data[29]),
        .R(1'b0));
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDRE \write_data_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(LMB_WriteDBus[29]),
        .Q(write_data[2]),
        .R(1'b0));
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDRE \write_data_reg[30] 
       (.C(Clk),
        .CE(1'b1),
        .D(LMB_WriteDBus[1]),
        .Q(write_data[30]),
        .R(1'b0));
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDRE \write_data_reg[31] 
       (.C(Clk),
        .CE(1'b1),
        .D(LMB_WriteDBus[0]),
        .Q(write_data[31]),
        .R(1'b0));
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDRE \write_data_reg[3] 
       (.C(Clk),
        .CE(1'b1),
        .D(LMB_WriteDBus[28]),
        .Q(write_data[3]),
        .R(1'b0));
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDRE \write_data_reg[4] 
       (.C(Clk),
        .CE(1'b1),
        .D(LMB_WriteDBus[27]),
        .Q(write_data[4]),
        .R(1'b0));
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDRE \write_data_reg[5] 
       (.C(Clk),
        .CE(1'b1),
        .D(LMB_WriteDBus[26]),
        .Q(write_data[5]),
        .R(1'b0));
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDRE \write_data_reg[6] 
       (.C(Clk),
        .CE(1'b1),
        .D(LMB_WriteDBus[25]),
        .Q(write_data[6]),
        .R(1'b0));
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDRE \write_data_reg[7] 
       (.C(Clk),
        .CE(1'b1),
        .D(LMB_WriteDBus[24]),
        .Q(write_data[7]),
        .R(1'b0));
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDRE \write_data_reg[8] 
       (.C(Clk),
        .CE(1'b1),
        .D(LMB_WriteDBus[23]),
        .Q(write_data[8]),
        .R(1'b0));
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDRE \write_data_reg[9] 
       (.C(Clk),
        .CE(1'b1),
        .D(LMB_WriteDBus[22]),
        .Q(write_data[9]),
        .R(1'b0));
endmodule

module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_iomodule_v3_1_5_MB_FDRE
   (tx_Data_Enable,
    data_is_sent0,
    tx_DataBits0,
    \TMR_No.tx_DataBits_reg ,
    en_16x_baud,
    div16,
    Clk,
    Q,
    tx_Start,
    tx_DataBits,
    tx_data_transmitted,
    out);
  output tx_Data_Enable;
  output data_is_sent0;
  output tx_DataBits0;
  output \TMR_No.tx_DataBits_reg ;
  input en_16x_baud;
  input div16;
  input Clk;
  input [2:0]Q;
  input tx_Start;
  input tx_DataBits;
  input tx_data_transmitted;
  input out;

  wire Clk;
  wire [2:0]Q;
  wire \TMR_No.tx_DataBits_reg ;
  wire data_is_sent0;
  wire div16;
  wire en_16x_baud;
  wire out;
  wire tx_DataBits;
  wire tx_DataBits0;
  wire tx_Data_Enable;
  wire tx_Start;
  wire tx_data_transmitted;

  LUT4 #(
    .INIT(16'h0004)) 
    \TMR_No.data_is_sent_i_1 
       (.I0(Q[0]),
        .I1(tx_Data_Enable),
        .I2(Q[2]),
        .I3(Q[1]),
        .O(data_is_sent0));
  (* SOFT_HLUTNM = "soft_lutpair8" *) 
  LUT4 #(
    .INIT(16'h00F8)) 
    \TMR_No.tx_DataBits_i_1 
       (.I0(tx_Data_Enable),
        .I1(tx_Start),
        .I2(tx_DataBits),
        .I3(tx_data_transmitted),
        .O(tx_DataBits0));
  (* SOFT_HLUTNM = "soft_lutpair8" *) 
  LUT4 #(
    .INIT(16'h5504)) 
    \TMR_No.tx_Start_i_1 
       (.I0(tx_DataBits),
        .I1(tx_Data_Enable),
        .I2(out),
        .I3(tx_Start),
        .O(\TMR_No.tx_DataBits_reg ));
  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(en_16x_baud),
        .D(div16),
        .Q(tx_Data_Enable),
        .R(tx_Data_Enable));
endmodule

(* ORIG_REF_NAME = "iomodule_v3_1_5_MB_FDRE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_iomodule_v3_1_5_MB_FDRE_868
   (in0,
    mid_Start_Bit,
    en_16x_baud,
    \TMR_No.Convert_Serial_To_Parallel[2].serial_to_parallel_reg ,
    Clk);
  output [0:0]in0;
  input mid_Start_Bit;
  input en_16x_baud;
  input \TMR_No.Convert_Serial_To_Parallel[2].serial_to_parallel_reg ;
  input Clk;

  wire Clk;
  wire \TMR_No.Convert_Serial_To_Parallel[2].serial_to_parallel_reg ;
  wire en_16x_baud;
  wire [0:0]in0;
  wire mid_Start_Bit;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(en_16x_baud),
        .D(\TMR_No.Convert_Serial_To_Parallel[2].serial_to_parallel_reg ),
        .Q(in0),
        .R(mid_Start_Bit));
endmodule

(* ORIG_REF_NAME = "iomodule_v3_1_5_MB_FDRE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_iomodule_v3_1_5_MB_FDRE_869
   (in0,
    mid_Start_Bit,
    en_16x_baud,
    \TMR_No.Convert_Serial_To_Parallel[3].serial_to_parallel_reg ,
    Clk);
  output [0:0]in0;
  input mid_Start_Bit;
  input en_16x_baud;
  input \TMR_No.Convert_Serial_To_Parallel[3].serial_to_parallel_reg ;
  input Clk;

  wire Clk;
  wire \TMR_No.Convert_Serial_To_Parallel[3].serial_to_parallel_reg ;
  wire en_16x_baud;
  wire [0:0]in0;
  wire mid_Start_Bit;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(en_16x_baud),
        .D(\TMR_No.Convert_Serial_To_Parallel[3].serial_to_parallel_reg ),
        .Q(in0),
        .R(mid_Start_Bit));
endmodule

(* ORIG_REF_NAME = "iomodule_v3_1_5_MB_FDRE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_iomodule_v3_1_5_MB_FDRE_870
   (in0,
    mid_Start_Bit,
    en_16x_baud,
    \TMR_No.Convert_Serial_To_Parallel[4].serial_to_parallel_reg ,
    Clk);
  output [0:0]in0;
  input mid_Start_Bit;
  input en_16x_baud;
  input \TMR_No.Convert_Serial_To_Parallel[4].serial_to_parallel_reg ;
  input Clk;

  wire Clk;
  wire \TMR_No.Convert_Serial_To_Parallel[4].serial_to_parallel_reg ;
  wire en_16x_baud;
  wire [0:0]in0;
  wire mid_Start_Bit;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(en_16x_baud),
        .D(\TMR_No.Convert_Serial_To_Parallel[4].serial_to_parallel_reg ),
        .Q(in0),
        .R(mid_Start_Bit));
endmodule

(* ORIG_REF_NAME = "iomodule_v3_1_5_MB_FDRE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_iomodule_v3_1_5_MB_FDRE_871
   (in0,
    mid_Start_Bit,
    en_16x_baud,
    \TMR_No.Convert_Serial_To_Parallel[5].serial_to_parallel_reg ,
    Clk);
  output [0:0]in0;
  input mid_Start_Bit;
  input en_16x_baud;
  input \TMR_No.Convert_Serial_To_Parallel[5].serial_to_parallel_reg ;
  input Clk;

  wire Clk;
  wire \TMR_No.Convert_Serial_To_Parallel[5].serial_to_parallel_reg ;
  wire en_16x_baud;
  wire [0:0]in0;
  wire mid_Start_Bit;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(en_16x_baud),
        .D(\TMR_No.Convert_Serial_To_Parallel[5].serial_to_parallel_reg ),
        .Q(in0),
        .R(mid_Start_Bit));
endmodule

(* ORIG_REF_NAME = "iomodule_v3_1_5_MB_FDRE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_iomodule_v3_1_5_MB_FDRE_872
   (in0,
    mid_Start_Bit,
    en_16x_baud,
    \TMR_No.Convert_Serial_To_Parallel[6].serial_to_parallel_reg ,
    Clk);
  output [0:0]in0;
  input mid_Start_Bit;
  input en_16x_baud;
  input \TMR_No.Convert_Serial_To_Parallel[6].serial_to_parallel_reg ;
  input Clk;

  wire Clk;
  wire \TMR_No.Convert_Serial_To_Parallel[6].serial_to_parallel_reg ;
  wire en_16x_baud;
  wire [0:0]in0;
  wire mid_Start_Bit;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(en_16x_baud),
        .D(\TMR_No.Convert_Serial_To_Parallel[6].serial_to_parallel_reg ),
        .Q(in0),
        .R(mid_Start_Bit));
endmodule

(* ORIG_REF_NAME = "iomodule_v3_1_5_MB_FDRE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_iomodule_v3_1_5_MB_FDRE_873
   (in0,
    mid_Start_Bit,
    en_16x_baud,
    \TMR_No.Convert_Serial_To_Parallel[7].serial_to_parallel_reg ,
    Clk);
  output [0:0]in0;
  input mid_Start_Bit;
  input en_16x_baud;
  input \TMR_No.Convert_Serial_To_Parallel[7].serial_to_parallel_reg ;
  input Clk;

  wire Clk;
  wire \TMR_No.Convert_Serial_To_Parallel[7].serial_to_parallel_reg ;
  wire en_16x_baud;
  wire [0:0]in0;
  wire mid_Start_Bit;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(en_16x_baud),
        .D(\TMR_No.Convert_Serial_To_Parallel[7].serial_to_parallel_reg ),
        .Q(in0),
        .R(mid_Start_Bit));
endmodule

(* ORIG_REF_NAME = "iomodule_v3_1_5_MB_FDRE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_iomodule_v3_1_5_MB_FDRE_874
   (in0,
    mid_Start_Bit,
    en_16x_baud,
    \TMR_No.Convert_Serial_To_Parallel[8].serial_to_parallel_reg ,
    Clk);
  output [0:0]in0;
  input mid_Start_Bit;
  input en_16x_baud;
  input \TMR_No.Convert_Serial_To_Parallel[8].serial_to_parallel_reg ;
  input Clk;

  wire Clk;
  wire \TMR_No.Convert_Serial_To_Parallel[8].serial_to_parallel_reg ;
  wire en_16x_baud;
  wire [0:0]in0;
  wire mid_Start_Bit;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(en_16x_baud),
        .D(\TMR_No.Convert_Serial_To_Parallel[8].serial_to_parallel_reg ),
        .Q(in0),
        .R(mid_Start_Bit));
endmodule

module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_iomodule_v3_1_5_MB_FDSE
   (in0,
    mid_Start_Bit,
    en_16x_baud,
    D_0,
    Clk);
  output [0:0]in0;
  input mid_Start_Bit;
  input en_16x_baud;
  input D_0;
  input Clk;

  wire Clk;
  wire D_0;
  wire en_16x_baud;
  wire [0:0]in0;
  wire mid_Start_Bit;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(en_16x_baud),
        .D(D_0),
        .Q(in0),
        .S(mid_Start_Bit));
endmodule

module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_iomodule_v3_1_5_MB_MUXCY
   (cnt_cy_2,
    S,
    Q,
    cnt_cy_1,
    lopt);
  output cnt_cy_2;
  input S;
  input [0:0]Q;
  input cnt_cy_1;
  input lopt;

  wire [0:0]Q;
  wire S;
  wire cnt_cy_1;
  wire cnt_cy_2;

  assign cnt_cy_2 = lopt;
endmodule

(* ORIG_REF_NAME = "iomodule_v3_1_5_MB_MUXCY" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_iomodule_v3_1_5_MB_MUXCY_865
   (cnt_cy_1,
    \TMR_No.Counter[2].h_Cnt_reg ,
    Q,
    CI,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4);
  output cnt_cy_1;
  input \TMR_No.Counter[2].h_Cnt_reg ;
  input [0:0]Q;
  input CI;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;

  wire CI;
  wire [0:0]Q;
  wire \TMR_No.Counter[2].h_Cnt_reg ;
  wire cnt_cy_1;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire lopt_5;
  wire [3:2]\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED ;
  wire [3:2]\NLW_Using_FPGA.Native_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;
  wire [3:3]\NLW_Using_FPGA.Native_CARRY4_S_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_5 = lopt_4;
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(1'b0),
        .CO({\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED [3:2],\^lopt_1 ,cnt_cy_1}),
        .CYINIT(CI),
        .DI({\NLW_Using_FPGA.Native_CARRY4_DI_UNCONNECTED [3:2],\^lopt_2 ,Q}),
        .O({\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3],\^lopt_4 ,\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [1:0]}),
        .S({\NLW_Using_FPGA.Native_CARRY4_S_UNCONNECTED [3],lopt_5,\^lopt_3 ,\TMR_No.Counter[2].h_Cnt_reg }));
endmodule

module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_iomodule_v3_1_5_MB_XORCY
   (D,
    cnt_cy_2,
    Q,
    lopt,
    lopt_1);
  output [0:0]D;
  input cnt_cy_2;
  input [0:0]Q;
  input lopt;
  output lopt_1;

  wire [0:0]D;
  wire LI;
  wire [0:0]Q;
  wire cnt_cy_2;

  assign D = lopt;
  assign lopt_1 = LI;
  LUT1 #(
    .INIT(2'h1)) 
    \Using_FPGA.Native_i_1__0 
       (.I0(Q),
        .O(LI));
endmodule

(* ORIG_REF_NAME = "iomodule_v3_1_5_MB_XORCY" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_iomodule_v3_1_5_MB_XORCY_864
   (D,
    S,
    cnt_cy_1,
    Q);
  output [0:0]D;
  output S;
  input cnt_cy_1;
  input [0:0]Q;

  wire [0:0]D;
  wire [0:0]Q;
  wire S;
  wire cnt_cy_1;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED ;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_DI_UNCONNECTED ;
  wire [3:1]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;
  wire [3:1]\NLW_Using_FPGA.Native_CARRY4_S_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(1'b0),
        .CO(\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED [3:0]),
        .CYINIT(cnt_cy_1),
        .DI(\NLW_Using_FPGA.Native_CARRY4_DI_UNCONNECTED [3:0]),
        .O({\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:1],D}),
        .S({\NLW_Using_FPGA.Native_CARRY4_S_UNCONNECTED [3:1],S}));
  LUT1 #(
    .INIT(2'h1)) 
    \Using_FPGA.Native_i_1 
       (.I0(Q),
        .O(S));
endmodule

(* ORIG_REF_NAME = "iomodule_v3_1_5_MB_XORCY" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_iomodule_v3_1_5_MB_XORCY_866
   (D,
    \TMR_No.Counter[2].h_Cnt_reg ,
    CI,
    tx_DataBits,
    Q);
  output [0:0]D;
  output \TMR_No.Counter[2].h_Cnt_reg ;
  output CI;
  input tx_DataBits;
  input [0:0]Q;

  wire CI;
  wire [0:0]D;
  wire [0:0]Q;
  wire \TMR_No.Counter[2].h_Cnt_reg ;
  wire tx_DataBits;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED ;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_DI_UNCONNECTED ;
  wire [3:1]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;
  wire [3:1]\NLW_Using_FPGA.Native_CARRY4_S_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(1'b0),
        .CO(\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED [3:0]),
        .CYINIT(CI),
        .DI(\NLW_Using_FPGA.Native_CARRY4_DI_UNCONNECTED [3:0]),
        .O({\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:1],D}),
        .S({\NLW_Using_FPGA.Native_CARRY4_S_UNCONNECTED [3:1],\TMR_No.Counter[2].h_Cnt_reg }));
  LUT1 #(
    .INIT(2'h1)) 
    \Using_FPGA.Native_i_1__3 
       (.I0(Q),
        .O(\TMR_No.Counter[2].h_Cnt_reg ));
  LUT1 #(
    .INIT(2'h1)) 
    \Using_FPGA.Native_i_2__1 
       (.I0(tx_DataBits),
        .O(CI));
endmodule

module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_lmb_bram_if_cntlr
   (BRAM_WEN_A,
    Sl_Ready,
    LMB_Rst,
    LMB_Clk,
    LMB_AddrStrobe,
    LMB_WriteStrobe,
    LMB_ABus,
    LMB_BE);
  output [0:3]BRAM_WEN_A;
  output Sl_Ready;
  input LMB_Rst;
  input LMB_Clk;
  input LMB_AddrStrobe;
  input LMB_WriteStrobe;
  input [1:0]LMB_ABus;
  input [0:3]LMB_BE;

  wire [0:3]BRAM_WEN_A;
  wire [1:0]LMB_ABus;
  wire LMB_AddrStrobe;
  wire [0:3]LMB_BE;
  wire LMB_Clk;
  wire LMB_Rst;
  wire LMB_WriteStrobe;
  wire Sl_Rdy;
  wire Sl_Ready;
  wire lmb_as;
  wire lmb_select;

  LUT4 #(
    .INIT(16'h0200)) 
    \BRAM_WEN_A[0]_INST_0 
       (.I0(LMB_WriteStrobe),
        .I1(LMB_ABus[0]),
        .I2(LMB_ABus[1]),
        .I3(LMB_BE[0]),
        .O(BRAM_WEN_A[0]));
  LUT4 #(
    .INIT(16'h0200)) 
    \BRAM_WEN_A[1]_INST_0 
       (.I0(LMB_WriteStrobe),
        .I1(LMB_ABus[0]),
        .I2(LMB_ABus[1]),
        .I3(LMB_BE[1]),
        .O(BRAM_WEN_A[1]));
  LUT4 #(
    .INIT(16'h0200)) 
    \BRAM_WEN_A[2]_INST_0 
       (.I0(LMB_WriteStrobe),
        .I1(LMB_ABus[0]),
        .I2(LMB_ABus[1]),
        .I3(LMB_BE[2]),
        .O(BRAM_WEN_A[2]));
  LUT4 #(
    .INIT(16'h0200)) 
    \BRAM_WEN_A[3]_INST_0 
       (.I0(LMB_WriteStrobe),
        .I1(LMB_ABus[0]),
        .I2(LMB_ABus[1]),
        .I3(LMB_BE[3]),
        .O(BRAM_WEN_A[3]));
  LUT2 #(
    .INIT(4'h1)) 
    \No_ECC.Sl_Rdy_i_1 
       (.I0(LMB_ABus[0]),
        .I1(LMB_ABus[1]),
        .O(lmb_select));
  FDRE \No_ECC.Sl_Rdy_reg 
       (.C(LMB_Clk),
        .CE(1'b1),
        .D(lmb_select),
        .Q(Sl_Rdy),
        .R(LMB_Rst));
  FDRE \No_ECC.lmb_as_reg 
       (.C(LMB_Clk),
        .CE(1'b1),
        .D(LMB_AddrStrobe),
        .Q(lmb_as),
        .R(LMB_Rst));
  LUT2 #(
    .INIT(4'h8)) 
    Sl_Ready_INST_0
       (.I0(lmb_as),
        .I1(Sl_Rdy),
        .O(Sl_Ready));
endmodule

(* ORIG_REF_NAME = "lmb_bram_if_cntlr" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_lmb_bram_if_cntlr__parameterized1
   (BRAM_WEN_A,
    Sl_Ready,
    LMB_Rst,
    LMB_Clk,
    LMB_AddrStrobe,
    LMB_ABus,
    LMB_WriteStrobe,
    LMB_BE);
  output [0:3]BRAM_WEN_A;
  output Sl_Ready;
  input LMB_Rst;
  input LMB_Clk;
  input LMB_AddrStrobe;
  input [0:0]LMB_ABus;
  input LMB_WriteStrobe;
  input [0:3]LMB_BE;

  wire [0:3]BRAM_WEN_A;
  wire [0:0]LMB_ABus;
  wire LMB_AddrStrobe;
  wire [0:3]LMB_BE;
  wire LMB_Clk;
  wire LMB_Rst;
  wire LMB_WriteStrobe;
  wire Sl_Rdy;
  wire Sl_Ready;
  wire lmb_as;
  wire lmb_select;

  LUT3 #(
    .INIT(8'h40)) 
    \BRAM_WEN_A[0]_INST_0 
       (.I0(LMB_ABus),
        .I1(LMB_WriteStrobe),
        .I2(LMB_BE[0]),
        .O(BRAM_WEN_A[0]));
  LUT3 #(
    .INIT(8'h40)) 
    \BRAM_WEN_A[1]_INST_0 
       (.I0(LMB_ABus),
        .I1(LMB_WriteStrobe),
        .I2(LMB_BE[1]),
        .O(BRAM_WEN_A[1]));
  LUT3 #(
    .INIT(8'h40)) 
    \BRAM_WEN_A[2]_INST_0 
       (.I0(LMB_ABus),
        .I1(LMB_WriteStrobe),
        .I2(LMB_BE[2]),
        .O(BRAM_WEN_A[2]));
  LUT3 #(
    .INIT(8'h40)) 
    \BRAM_WEN_A[3]_INST_0 
       (.I0(LMB_ABus),
        .I1(LMB_WriteStrobe),
        .I2(LMB_BE[3]),
        .O(BRAM_WEN_A[3]));
  LUT1 #(
    .INIT(2'h1)) 
    \No_ECC.Sl_Rdy_i_1 
       (.I0(LMB_ABus),
        .O(lmb_select));
  FDRE \No_ECC.Sl_Rdy_reg 
       (.C(LMB_Clk),
        .CE(1'b1),
        .D(lmb_select),
        .Q(Sl_Rdy),
        .R(LMB_Rst));
  FDRE \No_ECC.lmb_as_reg 
       (.C(LMB_Clk),
        .CE(1'b1),
        .D(LMB_AddrStrobe),
        .Q(lmb_as),
        .R(LMB_Rst));
  LUT2 #(
    .INIT(4'h8)) 
    Sl_Ready_INST_0
       (.I0(lmb_as),
        .I1(Sl_Rdy),
        .O(Sl_Ready));
endmodule

(* C_EXT_RESET_HIGH = "1" *) (* C_LMB_AWIDTH = "32" *) (* C_LMB_DWIDTH = "32" *) 
(* C_LMB_NUM_SLAVES = "2" *) (* C_LMB_PROTOCOL = "0" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_lmb_v10
   (LMB_Clk,
    SYS_Rst,
    LMB_Rst,
    M_ABus,
    M_ReadStrobe,
    M_WriteStrobe,
    M_AddrStrobe,
    M_DBus,
    M_BE,
    Sl_DBus,
    Sl_Ready,
    Sl_Wait,
    Sl_UE,
    Sl_CE,
    LMB_ABus,
    LMB_ReadStrobe,
    LMB_WriteStrobe,
    LMB_AddrStrobe,
    LMB_ReadDBus,
    LMB_WriteDBus,
    LMB_Ready,
    LMB_Wait,
    LMB_UE,
    LMB_CE,
    LMB_BE);
  input LMB_Clk;
  input SYS_Rst;
  output LMB_Rst;
  input [0:31]M_ABus;
  input M_ReadStrobe;
  input M_WriteStrobe;
  input M_AddrStrobe;
  input [0:31]M_DBus;
  input [0:3]M_BE;
  input [0:63]Sl_DBus;
  input [0:1]Sl_Ready;
  input [0:1]Sl_Wait;
  input [0:1]Sl_UE;
  input [0:1]Sl_CE;
  output [0:31]LMB_ABus;
  output LMB_ReadStrobe;
  output LMB_WriteStrobe;
  output LMB_AddrStrobe;
  output [0:31]LMB_ReadDBus;
  output [0:31]LMB_WriteDBus;
  output LMB_Ready;
  output LMB_Wait;
  output LMB_UE;
  output LMB_CE;
  output [0:3]LMB_BE;

  wire LMB_CE;
  wire LMB_Clk;
  wire [0:31]LMB_ReadDBus;
  wire LMB_Ready;
  wire LMB_Rst;
  wire LMB_UE;
  wire LMB_Wait;
  wire [0:31]M_ABus;
  wire M_AddrStrobe;
  wire [0:3]M_BE;
  wire [0:31]M_DBus;
  wire M_ReadStrobe;
  wire M_WriteStrobe;
  wire SYS_Rst;
  wire [0:1]Sl_CE;
  wire [0:63]Sl_DBus;
  wire [0:1]Sl_Ready;
  wire [0:1]Sl_UE;
  wire [0:1]Sl_Wait;

  assign LMB_ABus[0:31] = M_ABus;
  assign LMB_AddrStrobe = M_AddrStrobe;
  assign LMB_BE[0:3] = M_BE;
  assign LMB_ReadStrobe = M_ReadStrobe;
  assign LMB_WriteDBus[0:31] = M_DBus;
  assign LMB_WriteStrobe = M_WriteStrobe;
  LUT2 #(
    .INIT(4'hE)) 
    LMB_CE_INST_0
       (.I0(Sl_CE[0]),
        .I1(Sl_CE[1]),
        .O(LMB_CE));
  LUT4 #(
    .INIT(16'hF888)) 
    \LMB_ReadDBus[0]_INST_0 
       (.I0(Sl_DBus[0]),
        .I1(Sl_Ready[0]),
        .I2(Sl_DBus[32]),
        .I3(Sl_Ready[1]),
        .O(LMB_ReadDBus[0]));
  LUT4 #(
    .INIT(16'hF888)) 
    \LMB_ReadDBus[10]_INST_0 
       (.I0(Sl_DBus[10]),
        .I1(Sl_Ready[0]),
        .I2(Sl_DBus[42]),
        .I3(Sl_Ready[1]),
        .O(LMB_ReadDBus[10]));
  LUT4 #(
    .INIT(16'hF888)) 
    \LMB_ReadDBus[11]_INST_0 
       (.I0(Sl_DBus[11]),
        .I1(Sl_Ready[0]),
        .I2(Sl_DBus[43]),
        .I3(Sl_Ready[1]),
        .O(LMB_ReadDBus[11]));
  LUT4 #(
    .INIT(16'hF888)) 
    \LMB_ReadDBus[12]_INST_0 
       (.I0(Sl_DBus[12]),
        .I1(Sl_Ready[0]),
        .I2(Sl_DBus[44]),
        .I3(Sl_Ready[1]),
        .O(LMB_ReadDBus[12]));
  LUT4 #(
    .INIT(16'hF888)) 
    \LMB_ReadDBus[13]_INST_0 
       (.I0(Sl_DBus[13]),
        .I1(Sl_Ready[0]),
        .I2(Sl_DBus[45]),
        .I3(Sl_Ready[1]),
        .O(LMB_ReadDBus[13]));
  LUT4 #(
    .INIT(16'hF888)) 
    \LMB_ReadDBus[14]_INST_0 
       (.I0(Sl_DBus[14]),
        .I1(Sl_Ready[0]),
        .I2(Sl_DBus[46]),
        .I3(Sl_Ready[1]),
        .O(LMB_ReadDBus[14]));
  LUT4 #(
    .INIT(16'hF888)) 
    \LMB_ReadDBus[15]_INST_0 
       (.I0(Sl_DBus[15]),
        .I1(Sl_Ready[0]),
        .I2(Sl_DBus[47]),
        .I3(Sl_Ready[1]),
        .O(LMB_ReadDBus[15]));
  LUT4 #(
    .INIT(16'hF888)) 
    \LMB_ReadDBus[16]_INST_0 
       (.I0(Sl_DBus[16]),
        .I1(Sl_Ready[0]),
        .I2(Sl_DBus[48]),
        .I3(Sl_Ready[1]),
        .O(LMB_ReadDBus[16]));
  LUT4 #(
    .INIT(16'hF888)) 
    \LMB_ReadDBus[17]_INST_0 
       (.I0(Sl_DBus[17]),
        .I1(Sl_Ready[0]),
        .I2(Sl_DBus[49]),
        .I3(Sl_Ready[1]),
        .O(LMB_ReadDBus[17]));
  LUT4 #(
    .INIT(16'hF888)) 
    \LMB_ReadDBus[18]_INST_0 
       (.I0(Sl_DBus[18]),
        .I1(Sl_Ready[0]),
        .I2(Sl_DBus[50]),
        .I3(Sl_Ready[1]),
        .O(LMB_ReadDBus[18]));
  LUT4 #(
    .INIT(16'hF888)) 
    \LMB_ReadDBus[19]_INST_0 
       (.I0(Sl_DBus[19]),
        .I1(Sl_Ready[0]),
        .I2(Sl_DBus[51]),
        .I3(Sl_Ready[1]),
        .O(LMB_ReadDBus[19]));
  LUT4 #(
    .INIT(16'hF888)) 
    \LMB_ReadDBus[1]_INST_0 
       (.I0(Sl_DBus[1]),
        .I1(Sl_Ready[0]),
        .I2(Sl_DBus[33]),
        .I3(Sl_Ready[1]),
        .O(LMB_ReadDBus[1]));
  LUT4 #(
    .INIT(16'hF888)) 
    \LMB_ReadDBus[20]_INST_0 
       (.I0(Sl_DBus[20]),
        .I1(Sl_Ready[0]),
        .I2(Sl_DBus[52]),
        .I3(Sl_Ready[1]),
        .O(LMB_ReadDBus[20]));
  LUT4 #(
    .INIT(16'hF888)) 
    \LMB_ReadDBus[21]_INST_0 
       (.I0(Sl_DBus[21]),
        .I1(Sl_Ready[0]),
        .I2(Sl_DBus[53]),
        .I3(Sl_Ready[1]),
        .O(LMB_ReadDBus[21]));
  LUT4 #(
    .INIT(16'hF888)) 
    \LMB_ReadDBus[22]_INST_0 
       (.I0(Sl_DBus[22]),
        .I1(Sl_Ready[0]),
        .I2(Sl_DBus[54]),
        .I3(Sl_Ready[1]),
        .O(LMB_ReadDBus[22]));
  LUT4 #(
    .INIT(16'hF888)) 
    \LMB_ReadDBus[23]_INST_0 
       (.I0(Sl_DBus[23]),
        .I1(Sl_Ready[0]),
        .I2(Sl_DBus[55]),
        .I3(Sl_Ready[1]),
        .O(LMB_ReadDBus[23]));
  LUT4 #(
    .INIT(16'hF888)) 
    \LMB_ReadDBus[24]_INST_0 
       (.I0(Sl_DBus[24]),
        .I1(Sl_Ready[0]),
        .I2(Sl_DBus[56]),
        .I3(Sl_Ready[1]),
        .O(LMB_ReadDBus[24]));
  LUT4 #(
    .INIT(16'hF888)) 
    \LMB_ReadDBus[25]_INST_0 
       (.I0(Sl_DBus[25]),
        .I1(Sl_Ready[0]),
        .I2(Sl_DBus[57]),
        .I3(Sl_Ready[1]),
        .O(LMB_ReadDBus[25]));
  LUT4 #(
    .INIT(16'hF888)) 
    \LMB_ReadDBus[26]_INST_0 
       (.I0(Sl_DBus[26]),
        .I1(Sl_Ready[0]),
        .I2(Sl_DBus[58]),
        .I3(Sl_Ready[1]),
        .O(LMB_ReadDBus[26]));
  LUT4 #(
    .INIT(16'hF888)) 
    \LMB_ReadDBus[27]_INST_0 
       (.I0(Sl_DBus[27]),
        .I1(Sl_Ready[0]),
        .I2(Sl_DBus[59]),
        .I3(Sl_Ready[1]),
        .O(LMB_ReadDBus[27]));
  LUT4 #(
    .INIT(16'hF888)) 
    \LMB_ReadDBus[28]_INST_0 
       (.I0(Sl_DBus[28]),
        .I1(Sl_Ready[0]),
        .I2(Sl_DBus[60]),
        .I3(Sl_Ready[1]),
        .O(LMB_ReadDBus[28]));
  LUT4 #(
    .INIT(16'hF888)) 
    \LMB_ReadDBus[29]_INST_0 
       (.I0(Sl_DBus[29]),
        .I1(Sl_Ready[0]),
        .I2(Sl_DBus[61]),
        .I3(Sl_Ready[1]),
        .O(LMB_ReadDBus[29]));
  LUT4 #(
    .INIT(16'hF888)) 
    \LMB_ReadDBus[2]_INST_0 
       (.I0(Sl_DBus[2]),
        .I1(Sl_Ready[0]),
        .I2(Sl_DBus[34]),
        .I3(Sl_Ready[1]),
        .O(LMB_ReadDBus[2]));
  LUT4 #(
    .INIT(16'hF888)) 
    \LMB_ReadDBus[30]_INST_0 
       (.I0(Sl_DBus[30]),
        .I1(Sl_Ready[0]),
        .I2(Sl_DBus[62]),
        .I3(Sl_Ready[1]),
        .O(LMB_ReadDBus[30]));
  (* SOFT_HLUTNM = "soft_lutpair0" *) 
  LUT4 #(
    .INIT(16'hF888)) 
    \LMB_ReadDBus[31]_INST_0 
       (.I0(Sl_DBus[31]),
        .I1(Sl_Ready[0]),
        .I2(Sl_DBus[63]),
        .I3(Sl_Ready[1]),
        .O(LMB_ReadDBus[31]));
  LUT4 #(
    .INIT(16'hF888)) 
    \LMB_ReadDBus[3]_INST_0 
       (.I0(Sl_DBus[3]),
        .I1(Sl_Ready[0]),
        .I2(Sl_DBus[35]),
        .I3(Sl_Ready[1]),
        .O(LMB_ReadDBus[3]));
  LUT4 #(
    .INIT(16'hF888)) 
    \LMB_ReadDBus[4]_INST_0 
       (.I0(Sl_DBus[4]),
        .I1(Sl_Ready[0]),
        .I2(Sl_DBus[36]),
        .I3(Sl_Ready[1]),
        .O(LMB_ReadDBus[4]));
  LUT4 #(
    .INIT(16'hF888)) 
    \LMB_ReadDBus[5]_INST_0 
       (.I0(Sl_DBus[5]),
        .I1(Sl_Ready[0]),
        .I2(Sl_DBus[37]),
        .I3(Sl_Ready[1]),
        .O(LMB_ReadDBus[5]));
  LUT4 #(
    .INIT(16'hF888)) 
    \LMB_ReadDBus[6]_INST_0 
       (.I0(Sl_DBus[6]),
        .I1(Sl_Ready[0]),
        .I2(Sl_DBus[38]),
        .I3(Sl_Ready[1]),
        .O(LMB_ReadDBus[6]));
  LUT4 #(
    .INIT(16'hF888)) 
    \LMB_ReadDBus[7]_INST_0 
       (.I0(Sl_DBus[7]),
        .I1(Sl_Ready[0]),
        .I2(Sl_DBus[39]),
        .I3(Sl_Ready[1]),
        .O(LMB_ReadDBus[7]));
  LUT4 #(
    .INIT(16'hF888)) 
    \LMB_ReadDBus[8]_INST_0 
       (.I0(Sl_DBus[8]),
        .I1(Sl_Ready[0]),
        .I2(Sl_DBus[40]),
        .I3(Sl_Ready[1]),
        .O(LMB_ReadDBus[8]));
  LUT4 #(
    .INIT(16'hF888)) 
    \LMB_ReadDBus[9]_INST_0 
       (.I0(Sl_DBus[9]),
        .I1(Sl_Ready[0]),
        .I2(Sl_DBus[41]),
        .I3(Sl_Ready[1]),
        .O(LMB_ReadDBus[9]));
  (* SOFT_HLUTNM = "soft_lutpair0" *) 
  LUT2 #(
    .INIT(4'hE)) 
    LMB_Ready_INST_0
       (.I0(Sl_Ready[0]),
        .I1(Sl_Ready[1]),
        .O(LMB_Ready));
  LUT2 #(
    .INIT(4'hE)) 
    LMB_UE_INST_0
       (.I0(Sl_UE[0]),
        .I1(Sl_UE[1]),
        .O(LMB_UE));
  LUT2 #(
    .INIT(4'hE)) 
    LMB_Wait_INST_0
       (.I0(Sl_Wait[0]),
        .I1(Sl_Wait[1]),
        .O(LMB_Wait));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  FDSE #(
    .INIT(1'b1)) 
    POR_FF_I
       (.C(LMB_Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LMB_Rst),
        .S(SYS_Rst));
endmodule

(* C_EXT_RESET_HIGH = "1" *) (* C_LMB_AWIDTH = "32" *) (* C_LMB_DWIDTH = "32" *) 
(* C_LMB_NUM_SLAVES = "1" *) (* C_LMB_PROTOCOL = "0" *) (* ORIG_REF_NAME = "lmb_v10" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_lmb_v10__parameterized1
   (LMB_Clk,
    SYS_Rst,
    LMB_Rst,
    M_ABus,
    M_ReadStrobe,
    M_WriteStrobe,
    M_AddrStrobe,
    M_DBus,
    M_BE,
    Sl_DBus,
    Sl_Ready,
    Sl_Wait,
    Sl_UE,
    Sl_CE,
    LMB_ABus,
    LMB_ReadStrobe,
    LMB_WriteStrobe,
    LMB_AddrStrobe,
    LMB_ReadDBus,
    LMB_WriteDBus,
    LMB_Ready,
    LMB_Wait,
    LMB_UE,
    LMB_CE,
    LMB_BE);
  input LMB_Clk;
  input SYS_Rst;
  output LMB_Rst;
  input [0:31]M_ABus;
  input M_ReadStrobe;
  input M_WriteStrobe;
  input M_AddrStrobe;
  input [0:31]M_DBus;
  input [0:3]M_BE;
  input [0:31]Sl_DBus;
  input [0:0]Sl_Ready;
  input [0:0]Sl_Wait;
  input [0:0]Sl_UE;
  input [0:0]Sl_CE;
  output [0:31]LMB_ABus;
  output LMB_ReadStrobe;
  output LMB_WriteStrobe;
  output LMB_AddrStrobe;
  output [0:31]LMB_ReadDBus;
  output [0:31]LMB_WriteDBus;
  output LMB_Ready;
  output LMB_Wait;
  output LMB_UE;
  output LMB_CE;
  output [0:3]LMB_BE;

  wire LMB_Clk;
  wire LMB_Rst;
  wire [0:31]M_ABus;
  wire M_AddrStrobe;
  wire [0:3]M_BE;
  wire [0:31]M_DBus;
  wire M_ReadStrobe;
  wire M_WriteStrobe;
  wire SYS_Rst;
  wire [0:0]Sl_CE;
  wire [0:31]Sl_DBus;
  wire [0:0]Sl_Ready;
  wire [0:0]Sl_UE;
  wire [0:0]Sl_Wait;

  assign LMB_ABus[0:31] = M_ABus;
  assign LMB_AddrStrobe = M_AddrStrobe;
  assign LMB_BE[0:3] = M_BE;
  assign LMB_CE = Sl_CE;
  assign LMB_ReadDBus[0:31] = Sl_DBus;
  assign LMB_ReadStrobe = M_ReadStrobe;
  assign LMB_Ready = Sl_Ready;
  assign LMB_UE = Sl_UE;
  assign LMB_Wait = Sl_Wait;
  assign LMB_WriteDBus[0:31] = M_DBus;
  assign LMB_WriteStrobe = M_WriteStrobe;
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  FDSE #(
    .INIT(1'b1)) 
    POR_FF_I
       (.C(LMB_Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LMB_Rst),
        .S(SYS_Rst));
endmodule

module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_lpf
   (lpf_int,
    slowest_sync_clk,
    dcm_locked,
    mb_debug_sys_rst,
    ext_reset_in,
    aux_reset_in);
  output lpf_int;
  input slowest_sync_clk;
  input dcm_locked;
  input mb_debug_sys_rst;
  input ext_reset_in;
  input aux_reset_in;

  wire \ACTIVE_LOW_AUX.ACT_LO_AUX_n_0 ;
  wire \ACTIVE_LOW_EXT.ACT_LO_EXT_n_0 ;
  wire Q;
  wire [0:0]asr_lpf;
  wire aux_reset_in;
  wire dcm_locked;
  wire [0:0]exr_lpf;
  wire ext_reset_in;
  wire lpf_asr;
  wire lpf_exr;
  wire lpf_int;
  wire lpf_int0__0;
  wire mb_debug_sys_rst;
  wire p_1_in;
  wire p_1_in4_in;
  wire p_2_in;
  wire p_2_in3_in;
  wire p_3_in1_in;
  wire p_3_in6_in;
  wire slowest_sync_clk;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_cdc_sync \ACTIVE_LOW_AUX.ACT_LO_AUX 
       (.asr_lpf(asr_lpf),
        .aux_reset_in(aux_reset_in),
        .lpf_asr(lpf_asr),
        .lpf_asr_reg(\ACTIVE_LOW_AUX.ACT_LO_AUX_n_0 ),
        .p_1_in(p_1_in),
        .p_2_in(p_2_in),
        .scndry_out(p_3_in1_in),
        .slowest_sync_clk(slowest_sync_clk));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_cdc_sync_0 \ACTIVE_LOW_EXT.ACT_LO_EXT 
       (.exr_lpf(exr_lpf),
        .ext_reset_in(ext_reset_in),
        .lpf_exr(lpf_exr),
        .lpf_exr_reg(\ACTIVE_LOW_EXT.ACT_LO_EXT_n_0 ),
        .mb_debug_sys_rst(mb_debug_sys_rst),
        .p_1_in4_in(p_1_in4_in),
        .p_2_in3_in(p_2_in3_in),
        .scndry_out(p_3_in6_in),
        .slowest_sync_clk(slowest_sync_clk));
  FDRE #(
    .INIT(1'b0)) 
    \AUX_LPF[1].asr_lpf_reg[1] 
       (.C(slowest_sync_clk),
        .CE(1'b1),
        .D(p_3_in1_in),
        .Q(p_2_in),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \AUX_LPF[2].asr_lpf_reg[2] 
       (.C(slowest_sync_clk),
        .CE(1'b1),
        .D(p_2_in),
        .Q(p_1_in),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \AUX_LPF[3].asr_lpf_reg[3] 
       (.C(slowest_sync_clk),
        .CE(1'b1),
        .D(p_1_in),
        .Q(asr_lpf),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \EXT_LPF[1].exr_lpf_reg[1] 
       (.C(slowest_sync_clk),
        .CE(1'b1),
        .D(p_3_in6_in),
        .Q(p_2_in3_in),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \EXT_LPF[2].exr_lpf_reg[2] 
       (.C(slowest_sync_clk),
        .CE(1'b1),
        .D(p_2_in3_in),
        .Q(p_1_in4_in),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \EXT_LPF[3].exr_lpf_reg[3] 
       (.C(slowest_sync_clk),
        .CE(1'b1),
        .D(p_1_in4_in),
        .Q(exr_lpf),
        .R(1'b0));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "SRL16" *) 
  (* srl_name = "inst/rst_0/U0/\EXT_LPF/POR_SRL_I " *) 
  SRL16E #(
    .INIT(16'hFFFF)) 
    POR_SRL_I
       (.A0(1'b1),
        .A1(1'b1),
        .A2(1'b1),
        .A3(1'b1),
        .CE(1'b1),
        .CLK(slowest_sync_clk),
        .D(1'b0),
        .Q(Q));
  FDRE #(
    .INIT(1'b0)) 
    lpf_asr_reg
       (.C(slowest_sync_clk),
        .CE(1'b1),
        .D(\ACTIVE_LOW_AUX.ACT_LO_AUX_n_0 ),
        .Q(lpf_asr),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    lpf_exr_reg
       (.C(slowest_sync_clk),
        .CE(1'b1),
        .D(\ACTIVE_LOW_EXT.ACT_LO_EXT_n_0 ),
        .Q(lpf_exr),
        .R(1'b0));
  LUT4 #(
    .INIT(16'hFFFD)) 
    lpf_int0
       (.I0(dcm_locked),
        .I1(lpf_exr),
        .I2(lpf_asr),
        .I3(Q),
        .O(lpf_int0__0));
  FDRE #(
    .INIT(1'b0)) 
    lpf_int_reg
       (.C(slowest_sync_clk),
        .CE(1'b1),
        .D(lpf_int0__0),
        .Q(lpf_int),
        .R(1'b0));
endmodule

module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_mdm_v3_2_17_MB_FDRE
   (Q_0,
    bus2ip_wrce,
    tx_Buffer_Empty,
    S_AXI_ACLK);
  output Q_0;
  input [0:0]bus2ip_wrce;
  input tx_Buffer_Empty;
  input S_AXI_ACLK;

  wire Q_0;
  wire S_AXI_ACLK;
  wire [0:0]bus2ip_wrce;
  wire tx_Buffer_Empty;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(S_AXI_ACLK),
        .CE(1'b1),
        .D(tx_Buffer_Empty),
        .Q(Q_0),
        .R(bus2ip_wrce));
endmodule

(* ORIG_REF_NAME = "mdm_v3_2_17_MB_FDRE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_mdm_v3_2_17_MB_FDRE_835
   (Addr_3,
    S,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    O,
    S_AXI_ACLK,
    Addr_1,
    Addr_0,
    Addr_2,
    FIFO_Write,
    \Using_FPGA.Native_2 );
  output Addr_3;
  output S;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input O;
  input S_AXI_ACLK;
  input Addr_1;
  input Addr_0;
  input Addr_2;
  input FIFO_Write;
  input \Using_FPGA.Native_2 ;

  wire Addr_0;
  wire Addr_1;
  wire Addr_2;
  wire Addr_3;
  wire FIFO_Write;
  wire O;
  wire S;
  wire S_AXI_ACLK;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(S_AXI_ACLK),
        .CE(\Using_FPGA.Native_1 ),
        .D(O),
        .Q(Addr_3),
        .R(\Using_FPGA.Native_0 ));
  LUT6 #(
    .INIT(64'h55555554AAAAAAAA)) 
    \Using_FPGA.Native_I1_i_1 
       (.I0(Addr_3),
        .I1(Addr_1),
        .I2(Addr_0),
        .I3(Addr_2),
        .I4(FIFO_Write),
        .I5(\Using_FPGA.Native_2 ),
        .O(S));
endmodule

(* ORIG_REF_NAME = "mdm_v3_2_17_MB_FDRE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_mdm_v3_2_17_MB_FDRE_836
   (Addr_2,
    S,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    O,
    S_AXI_ACLK,
    Addr_1,
    Addr_0,
    Addr_3,
    FIFO_Write,
    \Using_FPGA.Native_2 );
  output Addr_2;
  output S;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input O;
  input S_AXI_ACLK;
  input Addr_1;
  input Addr_0;
  input Addr_3;
  input FIFO_Write;
  input \Using_FPGA.Native_2 ;

  wire Addr_0;
  wire Addr_1;
  wire Addr_2;
  wire Addr_3;
  wire FIFO_Write;
  wire O;
  wire S;
  wire S_AXI_ACLK;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(S_AXI_ACLK),
        .CE(\Using_FPGA.Native_1 ),
        .D(O),
        .Q(Addr_2),
        .R(\Using_FPGA.Native_0 ));
  LUT6 #(
    .INIT(64'h55555554AAAAAAAA)) 
    \Using_FPGA.Native_I1_i_1__0 
       (.I0(Addr_2),
        .I1(Addr_1),
        .I2(Addr_0),
        .I3(Addr_3),
        .I4(FIFO_Write),
        .I5(\Using_FPGA.Native_2 ),
        .O(S));
endmodule

(* ORIG_REF_NAME = "mdm_v3_2_17_MB_FDRE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_mdm_v3_2_17_MB_FDRE_838
   (Addr_1,
    D,
    tx_Buffer_Full,
    S,
    CI,
    data_Exists_I_reg,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    O,
    S_AXI_ACLK,
    Q,
    \Use_UART.tdo_reg_reg[6] ,
    \Use_UART.tdo_reg_reg[6]_0 ,
    Data_Out,
    \Use_UART.tdo_reg_reg[6]_1 ,
    Addr_0,
    Addr_3,
    Addr_2,
    FIFO_Write,
    data_Exists_I_reg_0,
    Bus_RNW_reg,
    \GEN_BKEND_CE_REGISTERS[1].ce_out_i_reg ,
    out);
  output Addr_1;
  output [0:0]D;
  output tx_Buffer_Full;
  output S;
  output CI;
  output data_Exists_I_reg;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input O;
  input S_AXI_ACLK;
  input [0:0]Q;
  input \Use_UART.tdo_reg_reg[6] ;
  input \Use_UART.tdo_reg_reg[6]_0 ;
  input [0:0]Data_Out;
  input \Use_UART.tdo_reg_reg[6]_1 ;
  input Addr_0;
  input Addr_3;
  input Addr_2;
  input FIFO_Write;
  input data_Exists_I_reg_0;
  input Bus_RNW_reg;
  input \GEN_BKEND_CE_REGISTERS[1].ce_out_i_reg ;
  input out;

  wire Addr_0;
  wire Addr_1;
  wire Addr_2;
  wire Addr_3;
  wire Bus_RNW_reg;
  wire CI;
  wire [0:0]D;
  wire [0:0]Data_Out;
  wire FIFO_Write;
  wire \GEN_BKEND_CE_REGISTERS[1].ce_out_i_reg ;
  wire O;
  wire [0:0]Q;
  wire S;
  wire S_AXI_ACLK;
  wire \Use_UART.tdo_reg_reg[6] ;
  wire \Use_UART.tdo_reg_reg[6]_0 ;
  wire \Use_UART.tdo_reg_reg[6]_1 ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire buffer_Empty__2;
  wire data_Exists_I_reg;
  wire data_Exists_I_reg_0;
  wire out;
  wire tx_Buffer_Full;

  LUT6 #(
    .INIT(64'hFFFFF222F222F222)) 
    \Use_UART.tdo_reg[6]_i_1 
       (.I0(Q),
        .I1(\Use_UART.tdo_reg_reg[6] ),
        .I2(\Use_UART.tdo_reg_reg[6]_0 ),
        .I3(tx_Buffer_Full),
        .I4(Data_Out),
        .I5(\Use_UART.tdo_reg_reg[6]_1 ),
        .O(D));
  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(S_AXI_ACLK),
        .CE(\Using_FPGA.Native_1 ),
        .D(O),
        .Q(Addr_1),
        .R(\Using_FPGA.Native_0 ));
  LUT6 #(
    .INIT(64'h55555554AAAAAAAA)) 
    \Using_FPGA.Native_I1_i_1__1 
       (.I0(Addr_1),
        .I1(Addr_0),
        .I2(Addr_3),
        .I3(Addr_2),
        .I4(FIFO_Write),
        .I5(data_Exists_I_reg_0),
        .O(S));
  LUT5 #(
    .INIT(32'h0B000000)) 
    \Using_FPGA.Native_I1_i_2 
       (.I0(data_Exists_I_reg_0),
        .I1(tx_Buffer_Full),
        .I2(Bus_RNW_reg),
        .I3(\GEN_BKEND_CE_REGISTERS[1].ce_out_i_reg ),
        .I4(out),
        .O(CI));
  LUT5 #(
    .INIT(32'h0000F2AA)) 
    data_Exists_I_i_1
       (.I0(\Using_FPGA.Native_1 ),
        .I1(data_Exists_I_reg_0),
        .I2(FIFO_Write),
        .I3(buffer_Empty__2),
        .I4(\Using_FPGA.Native_0 ),
        .O(data_Exists_I_reg));
  (* SOFT_HLUTNM = "soft_lutpair23" *) 
  LUT4 #(
    .INIT(16'h0001)) 
    data_Exists_I_i_2__0
       (.I0(Addr_1),
        .I1(Addr_0),
        .I2(Addr_3),
        .I3(Addr_2),
        .O(buffer_Empty__2));
  (* SOFT_HLUTNM = "soft_lutpair23" *) 
  LUT4 #(
    .INIT(16'h8000)) 
    \s_axi_rdata_i[3]_i_2 
       (.I0(Addr_1),
        .I1(Addr_0),
        .I2(Addr_3),
        .I3(Addr_2),
        .O(tx_Buffer_Full));
endmodule

(* ORIG_REF_NAME = "mdm_v3_2_17_MB_FDRE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_mdm_v3_2_17_MB_FDRE_840
   (Addr_0,
    LI,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    sum_A_0,
    S_AXI_ACLK,
    Addr_1,
    Addr_3,
    Addr_2,
    FIFO_Write,
    \Using_FPGA.Native_2 );
  output Addr_0;
  output LI;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input sum_A_0;
  input S_AXI_ACLK;
  input Addr_1;
  input Addr_3;
  input Addr_2;
  input FIFO_Write;
  input \Using_FPGA.Native_2 ;

  wire Addr_0;
  wire Addr_1;
  wire Addr_2;
  wire Addr_3;
  wire FIFO_Write;
  wire LI;
  wire S_AXI_ACLK;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire sum_A_0;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(S_AXI_ACLK),
        .CE(\Using_FPGA.Native_1 ),
        .D(sum_A_0),
        .Q(Addr_0),
        .R(\Using_FPGA.Native_0 ));
  LUT6 #(
    .INIT(64'h55555554AAAAAAAA)) 
    \Using_FPGA.Native_i_1__0 
       (.I0(Addr_0),
        .I1(Addr_1),
        .I2(Addr_3),
        .I3(Addr_2),
        .I4(FIFO_Write),
        .I5(\Using_FPGA.Native_2 ),
        .O(LI));
endmodule

(* ORIG_REF_NAME = "mdm_v3_2_17_MB_FDRE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_mdm_v3_2_17_MB_FDRE_848
   (Addr_3,
    S,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    O,
    S_AXI_ACLK,
    Addr_1,
    Addr_0,
    Addr_2,
    \Using_FPGA.Native_2 ,
    bus2ip_rdce);
  output Addr_3;
  output S;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input O;
  input S_AXI_ACLK;
  input Addr_1;
  input Addr_0;
  input Addr_2;
  input \Using_FPGA.Native_2 ;
  input [0:0]bus2ip_rdce;

  wire Addr_0;
  wire Addr_1;
  wire Addr_2;
  wire Addr_3;
  wire O;
  wire S;
  wire S_AXI_ACLK;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire [0:0]bus2ip_rdce;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(S_AXI_ACLK),
        .CE(\Using_FPGA.Native_1 ),
        .D(O),
        .Q(Addr_3),
        .R(\Using_FPGA.Native_0 ));
  LUT6 #(
    .INIT(64'h55555554AAAAAAAA)) 
    \Using_FPGA.Native_I1_i_1__2 
       (.I0(Addr_3),
        .I1(Addr_1),
        .I2(Addr_0),
        .I3(Addr_2),
        .I4(\Using_FPGA.Native_2 ),
        .I5(bus2ip_rdce),
        .O(S));
endmodule

(* ORIG_REF_NAME = "mdm_v3_2_17_MB_FDRE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_mdm_v3_2_17_MB_FDRE_850
   (Addr_2,
    S,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    O,
    S_AXI_ACLK,
    Addr_1,
    Addr_0,
    Addr_3,
    \Using_FPGA.Native_2 ,
    bus2ip_rdce);
  output Addr_2;
  output S;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input O;
  input S_AXI_ACLK;
  input Addr_1;
  input Addr_0;
  input Addr_3;
  input \Using_FPGA.Native_2 ;
  input [0:0]bus2ip_rdce;

  wire Addr_0;
  wire Addr_1;
  wire Addr_2;
  wire Addr_3;
  wire O;
  wire S;
  wire S_AXI_ACLK;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire [0:0]bus2ip_rdce;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(S_AXI_ACLK),
        .CE(\Using_FPGA.Native_1 ),
        .D(O),
        .Q(Addr_2),
        .R(\Using_FPGA.Native_0 ));
  LUT6 #(
    .INIT(64'h55555554AAAAAAAA)) 
    \Using_FPGA.Native_I1_i_1__3 
       (.I0(Addr_2),
        .I1(Addr_1),
        .I2(Addr_0),
        .I3(Addr_3),
        .I4(\Using_FPGA.Native_2 ),
        .I5(bus2ip_rdce),
        .O(S));
endmodule

(* ORIG_REF_NAME = "mdm_v3_2_17_MB_FDRE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_mdm_v3_2_17_MB_FDRE_852
   (Addr_1,
    D,
    RX_Buffer_Full,
    S,
    CI,
    data_Exists_I_reg,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    O,
    S_AXI_ACLK,
    \Use_UART.tdo_reg_reg[4] ,
    \Use_UART.tdo_reg_reg[4]_0 ,
    \Use_UART.tdo_reg_reg[4]_1 ,
    Data_Out,
    \Use_UART.tdo_reg_reg[4]_2 ,
    Addr_0,
    Addr_3,
    Addr_2,
    data_Exists_I_reg_0,
    bus2ip_rdce,
    Bus_RNW_reg,
    \GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg );
  output Addr_1;
  output [0:0]D;
  output RX_Buffer_Full;
  output S;
  output CI;
  output data_Exists_I_reg;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input O;
  input S_AXI_ACLK;
  input [0:0]\Use_UART.tdo_reg_reg[4] ;
  input \Use_UART.tdo_reg_reg[4]_0 ;
  input \Use_UART.tdo_reg_reg[4]_1 ;
  input [0:0]Data_Out;
  input \Use_UART.tdo_reg_reg[4]_2 ;
  input Addr_0;
  input Addr_3;
  input Addr_2;
  input data_Exists_I_reg_0;
  input [0:0]bus2ip_rdce;
  input Bus_RNW_reg;
  input \GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg ;

  wire Addr_0;
  wire Addr_1;
  wire Addr_2;
  wire Addr_3;
  wire Bus_RNW_reg;
  wire CI;
  wire [0:0]D;
  wire [0:0]Data_Out;
  wire \GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg ;
  wire O;
  wire RX_Buffer_Full;
  wire S;
  wire S_AXI_ACLK;
  wire [0:0]\Use_UART.tdo_reg_reg[4] ;
  wire \Use_UART.tdo_reg_reg[4]_0 ;
  wire \Use_UART.tdo_reg_reg[4]_1 ;
  wire \Use_UART.tdo_reg_reg[4]_2 ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire buffer_Empty__2;
  wire [0:0]bus2ip_rdce;
  wire data_Exists_I_reg;
  wire data_Exists_I_reg_0;

  LUT6 #(
    .INIT(64'hFFFFF222F222F222)) 
    \Use_UART.tdo_reg[4]_i_1 
       (.I0(\Use_UART.tdo_reg_reg[4] ),
        .I1(\Use_UART.tdo_reg_reg[4]_0 ),
        .I2(\Use_UART.tdo_reg_reg[4]_1 ),
        .I3(RX_Buffer_Full),
        .I4(Data_Out),
        .I5(\Use_UART.tdo_reg_reg[4]_2 ),
        .O(D));
  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(S_AXI_ACLK),
        .CE(\Using_FPGA.Native_1 ),
        .D(O),
        .Q(Addr_1),
        .R(\Using_FPGA.Native_0 ));
  LUT6 #(
    .INIT(64'h55555554AAAAAAAA)) 
    \Using_FPGA.Native_I1_i_1__4 
       (.I0(Addr_1),
        .I1(Addr_0),
        .I2(Addr_3),
        .I3(Addr_2),
        .I4(data_Exists_I_reg_0),
        .I5(bus2ip_rdce),
        .O(S));
  LUT6 #(
    .INIT(64'hBFFFFFFF00000000)) 
    \Using_FPGA.Native_I1_i_2__0 
       (.I0(bus2ip_rdce),
        .I1(Addr_1),
        .I2(Addr_0),
        .I3(Addr_3),
        .I4(Addr_2),
        .I5(data_Exists_I_reg_0),
        .O(CI));
  LUT6 #(
    .INIT(64'h00000000FF2AAAAA)) 
    data_Exists_I_i_1__0
       (.I0(\Using_FPGA.Native_1 ),
        .I1(Bus_RNW_reg),
        .I2(\GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg ),
        .I3(data_Exists_I_reg_0),
        .I4(buffer_Empty__2),
        .I5(\Using_FPGA.Native_0 ),
        .O(data_Exists_I_reg));
  (* SOFT_HLUTNM = "soft_lutpair22" *) 
  LUT4 #(
    .INIT(16'h0001)) 
    data_Exists_I_i_2
       (.I0(Addr_1),
        .I1(Addr_0),
        .I2(Addr_3),
        .I3(Addr_2),
        .O(buffer_Empty__2));
  (* SOFT_HLUTNM = "soft_lutpair22" *) 
  LUT4 #(
    .INIT(16'h8000)) 
    \s_axi_rdata_i[1]_i_2 
       (.I0(Addr_1),
        .I1(Addr_0),
        .I2(Addr_3),
        .I3(Addr_2),
        .O(RX_Buffer_Full));
endmodule

(* ORIG_REF_NAME = "mdm_v3_2_17_MB_FDRE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_mdm_v3_2_17_MB_FDRE_854
   (Addr_0,
    LI,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    sum_A_0,
    S_AXI_ACLK,
    Addr_1,
    Addr_3,
    Addr_2,
    \Using_FPGA.Native_2 ,
    bus2ip_rdce);
  output Addr_0;
  output LI;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input sum_A_0;
  input S_AXI_ACLK;
  input Addr_1;
  input Addr_3;
  input Addr_2;
  input \Using_FPGA.Native_2 ;
  input [0:0]bus2ip_rdce;

  wire Addr_0;
  wire Addr_1;
  wire Addr_2;
  wire Addr_3;
  wire LI;
  wire S_AXI_ACLK;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire [0:0]bus2ip_rdce;
  wire sum_A_0;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(S_AXI_ACLK),
        .CE(\Using_FPGA.Native_1 ),
        .D(sum_A_0),
        .Q(Addr_0),
        .R(\Using_FPGA.Native_0 ));
  LUT6 #(
    .INIT(64'h55555554AAAAAAAA)) 
    \Using_FPGA.Native_i_1__2 
       (.I0(Addr_0),
        .I1(Addr_1),
        .I2(Addr_3),
        .I3(Addr_2),
        .I4(\Using_FPGA.Native_2 ),
        .I5(bus2ip_rdce),
        .O(LI));
endmodule

module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_mdm_v3_2_17_MB_FDRSE
   (Ext_BRK,
    \Using_FPGA.Native_0 ,
    S_AXI_ACLK,
    set_Ext_BRK);
  output Ext_BRK;
  input \Using_FPGA.Native_0 ;
  input S_AXI_ACLK;
  input set_Ext_BRK;

  wire Ext_BRK;
  wire S_AXI_ACLK;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_i_1__4_n_0 ;
  wire set_Ext_BRK;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* IS_CE_INVERTED = "1'b0" *) 
  (* IS_S_INVERTED = "1'b0" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(S_AXI_ACLK),
        .CE(1'b1),
        .D(\Using_FPGA.Native_i_1__4_n_0 ),
        .Q(Ext_BRK),
        .R(\Using_FPGA.Native_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \Using_FPGA.Native_i_1__4 
       (.I0(set_Ext_BRK),
        .I1(Ext_BRK),
        .O(\Using_FPGA.Native_i_1__4_n_0 ));
endmodule

module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_mdm_v3_2_17_MB_LUT1
   (Dbg_TDI_0,
    I0);
  output Dbg_TDI_0;
  input I0;

  wire I0;
  (* DONT_TOUCH *) wire lut1_o;

  assign Dbg_TDI_0 = lut1_o;
  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT1 #(
    .INIT(2'h2)) 
    \Using_FPGA.Native 
       (.I0(I0),
        .O(lut1_o));
endmodule

module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_mdm_v3_2_17_MB_MUXCY_XORCY
   (LO,
    O,
    S,
    Addr_3,
    CI,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9);
  output LO;
  output O;
  input S;
  input Addr_3;
  input CI;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  output lopt_7;
  output lopt_8;
  input lopt_9;

  wire Addr_3;
  wire CI;
  wire LO;
  wire O;
  wire S;
  wire \^lopt_1 ;
  wire lopt_10;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire \^lopt_9 ;
  wire [3:3]\NLW_Using_FPGA.Native_I1_CARRY4_CO_UNCONNECTED ;
  wire [3:3]\NLW_Using_FPGA.Native_I1_CARRY4_DI_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign lopt = \^lopt_1 ;
  assign lopt_10 = lopt_9;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_7 = \^lopt_8 ;
  assign lopt_8 = \^lopt_9 ;
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  CARRY4 \Using_FPGA.Native_I1_CARRY4 
       (.CI(1'b0),
        .CO({\NLW_Using_FPGA.Native_I1_CARRY4_CO_UNCONNECTED [3],\^lopt_4 ,\^lopt_1 ,LO}),
        .CYINIT(CI),
        .DI({\NLW_Using_FPGA.Native_I1_CARRY4_DI_UNCONNECTED [3],\^lopt_5 ,\^lopt_2 ,Addr_3}),
        .O({\^lopt_9 ,\^lopt_8 ,\^lopt_7 ,O}),
        .S({lopt_10,\^lopt_6 ,\^lopt_3 ,S}));
endmodule

(* ORIG_REF_NAME = "mdm_v3_2_17_MB_MUXCY_XORCY" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_mdm_v3_2_17_MB_MUXCY_XORCY_837
   (LO,
    O,
    S,
    Addr_2,
    CI,
    lopt,
    lopt_1);
  output LO;
  output O;
  input S;
  input Addr_2;
  input CI;
  input lopt;
  input lopt_1;

  wire Addr_2;
  wire CI;
  wire LO;
  wire O;
  wire S;

  assign LO = lopt;
  assign O = lopt_1;
endmodule

(* ORIG_REF_NAME = "mdm_v3_2_17_MB_MUXCY_XORCY" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_mdm_v3_2_17_MB_MUXCY_XORCY_839
   (LO,
    O,
    S,
    Addr_1,
    CI,
    lopt,
    lopt_1);
  output LO;
  output O;
  input S;
  input Addr_1;
  input CI;
  input lopt;
  input lopt_1;

  wire Addr_1;
  wire CI;
  wire LO;
  wire O;
  wire S;

  assign LO = lopt;
  assign O = lopt_1;
endmodule

(* ORIG_REF_NAME = "mdm_v3_2_17_MB_MUXCY_XORCY" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_mdm_v3_2_17_MB_MUXCY_XORCY_849
   (LO,
    O,
    S,
    Addr_3,
    CI,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9);
  output LO;
  output O;
  input S;
  input Addr_3;
  input CI;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  output lopt_7;
  output lopt_8;
  input lopt_9;

  wire Addr_3;
  wire CI;
  wire LO;
  wire O;
  wire S;
  wire \^lopt_1 ;
  wire lopt_10;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire \^lopt_9 ;
  wire [3:3]\NLW_Using_FPGA.Native_I1_CARRY4_CO_UNCONNECTED ;
  wire [3:3]\NLW_Using_FPGA.Native_I1_CARRY4_DI_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign lopt = \^lopt_1 ;
  assign lopt_10 = lopt_9;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_7 = \^lopt_8 ;
  assign lopt_8 = \^lopt_9 ;
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  CARRY4 \Using_FPGA.Native_I1_CARRY4 
       (.CI(1'b0),
        .CO({\NLW_Using_FPGA.Native_I1_CARRY4_CO_UNCONNECTED [3],\^lopt_4 ,\^lopt_1 ,LO}),
        .CYINIT(CI),
        .DI({\NLW_Using_FPGA.Native_I1_CARRY4_DI_UNCONNECTED [3],\^lopt_5 ,\^lopt_2 ,Addr_3}),
        .O({\^lopt_9 ,\^lopt_8 ,\^lopt_7 ,O}),
        .S({lopt_10,\^lopt_6 ,\^lopt_3 ,S}));
endmodule

(* ORIG_REF_NAME = "mdm_v3_2_17_MB_MUXCY_XORCY" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_mdm_v3_2_17_MB_MUXCY_XORCY_851
   (LO,
    O,
    S,
    Addr_2,
    CI,
    lopt,
    lopt_1);
  output LO;
  output O;
  input S;
  input Addr_2;
  input CI;
  input lopt;
  input lopt_1;

  wire Addr_2;
  wire CI;
  wire LO;
  wire O;
  wire S;

  assign LO = lopt;
  assign O = lopt_1;
endmodule

(* ORIG_REF_NAME = "mdm_v3_2_17_MB_MUXCY_XORCY" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_mdm_v3_2_17_MB_MUXCY_XORCY_853
   (LO,
    O,
    S,
    Addr_1,
    CI,
    lopt,
    lopt_1);
  output LO;
  output O;
  input S;
  input Addr_1;
  input CI;
  input lopt;
  input lopt_1;

  wire Addr_1;
  wire CI;
  wire LO;
  wire O;
  wire S;

  assign LO = lopt;
  assign O = lopt_1;
endmodule

module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_mdm_v3_2_17_MB_SRL16E
   (config_TDO_1,
    Q,
    \Use_E2.BSCANE2_I_i_8 );
  output config_TDO_1;
  input [3:0]Q;
  input \Use_E2.BSCANE2_I_i_8 ;

  wire [3:0]Q;
  wire \Use_E2.BSCANE2_I_i_8 ;
  wire config_TDO_1;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_name = "inst/mdm_0/U0/\MDM_Core_I1/JTAG_CONTROL_I/Use_Config_SRL16E.SRL16E_1/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0167),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Q[0]),
        .A1(Q[1]),
        .A2(Q[2]),
        .A3(Q[3]),
        .CE(1'b0),
        .CLK(\Use_E2.BSCANE2_I_i_8 ),
        .D(1'b0),
        .Q(config_TDO_1));
endmodule

(* ORIG_REF_NAME = "mdm_v3_2_17_MB_SRL16E" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_mdm_v3_2_17_MB_SRL16E__parameterized0
   (config_TDO_2,
    Q,
    \Use_E2.BSCANE2_I_i_8 );
  output config_TDO_2;
  input [3:0]Q;
  input \Use_E2.BSCANE2_I_i_8 ;

  wire [3:0]Q;
  wire \Use_E2.BSCANE2_I_i_8 ;
  wire config_TDO_2;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_name = "inst/mdm_0/U0/\MDM_Core_I1/JTAG_CONTROL_I/Use_Config_SRL16E.SRL16E_2/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h42A7),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Q[0]),
        .A1(Q[1]),
        .A2(Q[2]),
        .A3(Q[3]),
        .CE(1'b0),
        .CLK(\Use_E2.BSCANE2_I_i_8 ),
        .D(1'b0),
        .Q(config_TDO_2));
endmodule

(* ORIG_REF_NAME = "mdm_v3_2_17_MB_SRL16E" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_mdm_v3_2_17_MB_SRL16E__parameterized1
   (ID_TDO_1,
    Q,
    \Use_E2.BSCANE2_I_i_8 );
  output ID_TDO_1;
  input [3:0]Q;
  input \Use_E2.BSCANE2_I_i_8 ;

  wire ID_TDO_1;
  wire [3:0]Q;
  wire \Use_E2.BSCANE2_I_i_8 ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_name = "inst/mdm_0/U0/\MDM_Core_I1/JTAG_CONTROL_I/Use_ID_SRL16E.SRL16E_ID_1/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h4443),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Q[0]),
        .A1(Q[1]),
        .A2(Q[2]),
        .A3(Q[3]),
        .CE(1'b0),
        .CLK(\Use_E2.BSCANE2_I_i_8 ),
        .D(1'b0),
        .Q(ID_TDO_1));
endmodule

(* ORIG_REF_NAME = "mdm_v3_2_17_MB_SRL16E" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_mdm_v3_2_17_MB_SRL16E__parameterized2
   (tdo,
    Q,
    \Use_E2.BSCANE2_I_i_8_0 ,
    sel_n_reg,
    sel_n_reg_0,
    sel_n_reg_1,
    sel_n_reg_2,
    sel_n_reg_3,
    Dbg_TDO_0,
    \Use_E2.BSCANE2_I_i_1_0 ,
    \Use_E2.BSCANE2_I_i_1_1 ,
    config_TDO_2,
    ID_TDO_1,
    config_TDO_1);
  output tdo;
  input [4:0]Q;
  input \Use_E2.BSCANE2_I_i_8_0 ;
  input sel_n_reg;
  input [0:0]sel_n_reg_0;
  input sel_n_reg_1;
  input [2:0]sel_n_reg_2;
  input sel_n_reg_3;
  input Dbg_TDO_0;
  input \Use_E2.BSCANE2_I_i_1_0 ;
  input \Use_E2.BSCANE2_I_i_1_1 ;
  input config_TDO_2;
  input ID_TDO_1;
  input config_TDO_1;

  wire Dbg_TDO_0;
  wire ID_TDO_1;
  wire ID_TDO_2;
  wire [4:0]Q;
  wire \Use_E2.BSCANE2_I_i_1_0 ;
  wire \Use_E2.BSCANE2_I_i_1_1 ;
  wire \Use_E2.BSCANE2_I_i_5_n_0 ;
  wire \Use_E2.BSCANE2_I_i_8_0 ;
  wire \Use_E2.BSCANE2_I_i_8_n_0 ;
  wire config_TDO_1;
  wire config_TDO_2;
  wire sel_n_reg;
  wire [0:0]sel_n_reg_0;
  wire sel_n_reg_1;
  wire [2:0]sel_n_reg_2;
  wire sel_n_reg_3;
  wire tdo;

  LUT6 #(
    .INIT(64'hEAEEEAEEEAEEEAEA)) 
    \Use_E2.BSCANE2_I_i_1 
       (.I0(sel_n_reg),
        .I1(sel_n_reg_0),
        .I2(sel_n_reg_1),
        .I3(sel_n_reg_2[2]),
        .I4(sel_n_reg_3),
        .I5(\Use_E2.BSCANE2_I_i_5_n_0 ),
        .O(tdo));
  LUT5 #(
    .INIT(32'h2A2A3F00)) 
    \Use_E2.BSCANE2_I_i_5 
       (.I0(Dbg_TDO_0),
        .I1(sel_n_reg_2[0]),
        .I2(\Use_E2.BSCANE2_I_i_1_0 ),
        .I3(\Use_E2.BSCANE2_I_i_8_n_0 ),
        .I4(\Use_E2.BSCANE2_I_i_1_1 ),
        .O(\Use_E2.BSCANE2_I_i_5_n_0 ));
  LUT6 #(
    .INIT(64'hCACAFFF0CACA0F00)) 
    \Use_E2.BSCANE2_I_i_8 
       (.I0(ID_TDO_2),
        .I1(config_TDO_2),
        .I2(sel_n_reg_2[1]),
        .I3(ID_TDO_1),
        .I4(Q[4]),
        .I5(config_TDO_1),
        .O(\Use_E2.BSCANE2_I_i_8_n_0 ));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_name = "inst/mdm_0/U0/\MDM_Core_I1/JTAG_CONTROL_I/Use_ID_SRL16E.SRL16E_ID_2/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h584D),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Q[0]),
        .A1(Q[1]),
        .A2(Q[2]),
        .A3(Q[3]),
        .CE(1'b0),
        .CLK(\Use_E2.BSCANE2_I_i_8_0 ),
        .D(1'b0),
        .Q(ID_TDO_2));
endmodule

(* ORIG_REF_NAME = "mdm_v3_2_17_MB_SRL16E" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_mdm_v3_2_17_MB_SRL16E__parameterized3
   (D,
    CI,
    S_AXI_WDATA,
    Addr_3,
    Addr_2,
    Addr_1,
    Addr_0,
    S_AXI_ACLK,
    \Use_UART.tdo_reg_reg[0] );
  output [0:0]D;
  input CI;
  input [0:0]S_AXI_WDATA;
  input Addr_3;
  input Addr_2;
  input Addr_1;
  input Addr_0;
  input S_AXI_ACLK;
  input \Use_UART.tdo_reg_reg[0] ;

  wire Addr_0;
  wire Addr_1;
  wire Addr_2;
  wire Addr_3;
  wire CI;
  wire [0:0]D;
  wire [0:0]Data_Out;
  wire S_AXI_ACLK;
  wire [0:0]S_AXI_WDATA;
  wire \Use_UART.tdo_reg_reg[0] ;

  LUT2 #(
    .INIT(4'h8)) 
    \Use_UART.tdo_reg[0]_i_2 
       (.I0(\Use_UART.tdo_reg_reg[0] ),
        .I1(Data_Out),
        .O(D));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/mdm_0/U0/\MDM_Core_I1/JTAG_CONTROL_I/Use_UART.TX_FIFO_I/FIFO_RAM " *) 
  (* srl_name = "inst/mdm_0/U0/\MDM_Core_I1/JTAG_CONTROL_I/Use_UART.TX_FIFO_I/FIFO_RAM[0].D16.SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Addr_3),
        .A1(Addr_2),
        .A2(Addr_1),
        .A3(Addr_0),
        .CE(CI),
        .CLK(S_AXI_ACLK),
        .D(S_AXI_WDATA),
        .Q(Data_Out));
endmodule

(* ORIG_REF_NAME = "mdm_v3_2_17_MB_SRL16E" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_mdm_v3_2_17_MB_SRL16E__parameterized3_841
   (D,
    CI,
    S_AXI_WDATA,
    Addr_3,
    Addr_2,
    Addr_1,
    Addr_0,
    S_AXI_ACLK,
    \Use_UART.tdo_reg_reg[1] ,
    \Use_UART.tdo_reg_reg[1]_0 ,
    Q);
  output [0:0]D;
  input CI;
  input [0:0]S_AXI_WDATA;
  input Addr_3;
  input Addr_2;
  input Addr_1;
  input Addr_0;
  input S_AXI_ACLK;
  input \Use_UART.tdo_reg_reg[1] ;
  input \Use_UART.tdo_reg_reg[1]_0 ;
  input [0:0]Q;

  wire Addr_0;
  wire Addr_1;
  wire Addr_2;
  wire Addr_3;
  wire CI;
  wire [0:0]D;
  wire [1:1]Data_Out;
  wire [0:0]Q;
  wire S_AXI_ACLK;
  wire [0:0]S_AXI_WDATA;
  wire \Use_UART.tdo_reg_reg[1] ;
  wire \Use_UART.tdo_reg_reg[1]_0 ;

  LUT4 #(
    .INIT(16'h8F88)) 
    \Use_UART.tdo_reg[1]_i_1 
       (.I0(Data_Out),
        .I1(\Use_UART.tdo_reg_reg[1] ),
        .I2(\Use_UART.tdo_reg_reg[1]_0 ),
        .I3(Q),
        .O(D));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/mdm_0/U0/\MDM_Core_I1/JTAG_CONTROL_I/Use_UART.TX_FIFO_I/FIFO_RAM " *) 
  (* srl_name = "inst/mdm_0/U0/\MDM_Core_I1/JTAG_CONTROL_I/Use_UART.TX_FIFO_I/FIFO_RAM[1].D16.SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Addr_3),
        .A1(Addr_2),
        .A2(Addr_1),
        .A3(Addr_0),
        .CE(CI),
        .CLK(S_AXI_ACLK),
        .D(S_AXI_WDATA),
        .Q(Data_Out));
endmodule

(* ORIG_REF_NAME = "mdm_v3_2_17_MB_SRL16E" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_mdm_v3_2_17_MB_SRL16E__parameterized3_842
   (D,
    CI,
    S_AXI_WDATA,
    Addr_3,
    Addr_2,
    Addr_1,
    Addr_0,
    S_AXI_ACLK,
    \Use_UART.tdo_reg_reg[2] ,
    \Use_UART.tdo_reg_reg[2]_0 ,
    Q);
  output [0:0]D;
  input CI;
  input [0:0]S_AXI_WDATA;
  input Addr_3;
  input Addr_2;
  input Addr_1;
  input Addr_0;
  input S_AXI_ACLK;
  input \Use_UART.tdo_reg_reg[2] ;
  input \Use_UART.tdo_reg_reg[2]_0 ;
  input [0:0]Q;

  wire Addr_0;
  wire Addr_1;
  wire Addr_2;
  wire Addr_3;
  wire CI;
  wire [0:0]D;
  wire [2:2]Data_Out;
  wire [0:0]Q;
  wire S_AXI_ACLK;
  wire [0:0]S_AXI_WDATA;
  wire \Use_UART.tdo_reg_reg[2] ;
  wire \Use_UART.tdo_reg_reg[2]_0 ;

  LUT4 #(
    .INIT(16'h8F88)) 
    \Use_UART.tdo_reg[2]_i_1 
       (.I0(Data_Out),
        .I1(\Use_UART.tdo_reg_reg[2] ),
        .I2(\Use_UART.tdo_reg_reg[2]_0 ),
        .I3(Q),
        .O(D));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/mdm_0/U0/\MDM_Core_I1/JTAG_CONTROL_I/Use_UART.TX_FIFO_I/FIFO_RAM " *) 
  (* srl_name = "inst/mdm_0/U0/\MDM_Core_I1/JTAG_CONTROL_I/Use_UART.TX_FIFO_I/FIFO_RAM[2].D16.SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Addr_3),
        .A1(Addr_2),
        .A2(Addr_1),
        .A3(Addr_0),
        .CE(CI),
        .CLK(S_AXI_ACLK),
        .D(S_AXI_WDATA),
        .Q(Data_Out));
endmodule

(* ORIG_REF_NAME = "mdm_v3_2_17_MB_SRL16E" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_mdm_v3_2_17_MB_SRL16E__parameterized3_843
   (D,
    CI,
    S_AXI_WDATA,
    Addr_3,
    Addr_2,
    Addr_1,
    Addr_0,
    S_AXI_ACLK,
    \Use_UART.tdo_reg_reg[3] ,
    \Use_UART.tdo_reg_reg[3]_0 ,
    Q);
  output [0:0]D;
  input CI;
  input [0:0]S_AXI_WDATA;
  input Addr_3;
  input Addr_2;
  input Addr_1;
  input Addr_0;
  input S_AXI_ACLK;
  input \Use_UART.tdo_reg_reg[3] ;
  input \Use_UART.tdo_reg_reg[3]_0 ;
  input [0:0]Q;

  wire Addr_0;
  wire Addr_1;
  wire Addr_2;
  wire Addr_3;
  wire CI;
  wire [0:0]D;
  wire [3:3]Data_Out;
  wire [0:0]Q;
  wire S_AXI_ACLK;
  wire [0:0]S_AXI_WDATA;
  wire \Use_UART.tdo_reg_reg[3] ;
  wire \Use_UART.tdo_reg_reg[3]_0 ;

  LUT4 #(
    .INIT(16'h8F88)) 
    \Use_UART.tdo_reg[3]_i_1 
       (.I0(Data_Out),
        .I1(\Use_UART.tdo_reg_reg[3] ),
        .I2(\Use_UART.tdo_reg_reg[3]_0 ),
        .I3(Q),
        .O(D));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/mdm_0/U0/\MDM_Core_I1/JTAG_CONTROL_I/Use_UART.TX_FIFO_I/FIFO_RAM " *) 
  (* srl_name = "inst/mdm_0/U0/\MDM_Core_I1/JTAG_CONTROL_I/Use_UART.TX_FIFO_I/FIFO_RAM[3].D16.SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Addr_3),
        .A1(Addr_2),
        .A2(Addr_1),
        .A3(Addr_0),
        .CE(CI),
        .CLK(S_AXI_ACLK),
        .D(S_AXI_WDATA),
        .Q(Data_Out));
endmodule

(* ORIG_REF_NAME = "mdm_v3_2_17_MB_SRL16E" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_mdm_v3_2_17_MB_SRL16E__parameterized3_844
   (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[3] ,
    CI,
    S_AXI_WDATA,
    Addr_3,
    Addr_2,
    Addr_1,
    Addr_0,
    S_AXI_ACLK);
  output [0:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[3] ;
  input CI;
  input [0:0]S_AXI_WDATA;
  input Addr_3;
  input Addr_2;
  input Addr_1;
  input Addr_0;
  input S_AXI_ACLK;

  wire [0:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[3] ;
  wire Addr_0;
  wire Addr_1;
  wire Addr_2;
  wire Addr_3;
  wire CI;
  wire S_AXI_ACLK;
  wire [0:0]S_AXI_WDATA;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/mdm_0/U0/\MDM_Core_I1/JTAG_CONTROL_I/Use_UART.TX_FIFO_I/FIFO_RAM " *) 
  (* srl_name = "inst/mdm_0/U0/\MDM_Core_I1/JTAG_CONTROL_I/Use_UART.TX_FIFO_I/FIFO_RAM[4].D16.SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Addr_3),
        .A1(Addr_2),
        .A2(Addr_1),
        .A3(Addr_0),
        .CE(CI),
        .CLK(S_AXI_ACLK),
        .D(S_AXI_WDATA),
        .Q(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[3] ));
endmodule

(* ORIG_REF_NAME = "mdm_v3_2_17_MB_SRL16E" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_mdm_v3_2_17_MB_SRL16E__parameterized3_845
   (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[2] ,
    CI,
    S_AXI_WDATA,
    Addr_3,
    Addr_2,
    Addr_1,
    Addr_0,
    S_AXI_ACLK);
  output [0:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[2] ;
  input CI;
  input [0:0]S_AXI_WDATA;
  input Addr_3;
  input Addr_2;
  input Addr_1;
  input Addr_0;
  input S_AXI_ACLK;

  wire [0:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[2] ;
  wire Addr_0;
  wire Addr_1;
  wire Addr_2;
  wire Addr_3;
  wire CI;
  wire S_AXI_ACLK;
  wire [0:0]S_AXI_WDATA;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/mdm_0/U0/\MDM_Core_I1/JTAG_CONTROL_I/Use_UART.TX_FIFO_I/FIFO_RAM " *) 
  (* srl_name = "inst/mdm_0/U0/\MDM_Core_I1/JTAG_CONTROL_I/Use_UART.TX_FIFO_I/FIFO_RAM[5].D16.SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Addr_3),
        .A1(Addr_2),
        .A2(Addr_1),
        .A3(Addr_0),
        .CE(CI),
        .CLK(S_AXI_ACLK),
        .D(S_AXI_WDATA),
        .Q(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[2] ));
endmodule

(* ORIG_REF_NAME = "mdm_v3_2_17_MB_SRL16E" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_mdm_v3_2_17_MB_SRL16E__parameterized3_846
   (Data_Out,
    CI,
    S_AXI_WDATA,
    Addr_3,
    Addr_2,
    Addr_1,
    Addr_0,
    S_AXI_ACLK);
  output [0:0]Data_Out;
  input CI;
  input [0:0]S_AXI_WDATA;
  input Addr_3;
  input Addr_2;
  input Addr_1;
  input Addr_0;
  input S_AXI_ACLK;

  wire Addr_0;
  wire Addr_1;
  wire Addr_2;
  wire Addr_3;
  wire CI;
  wire [0:0]Data_Out;
  wire S_AXI_ACLK;
  wire [0:0]S_AXI_WDATA;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/mdm_0/U0/\MDM_Core_I1/JTAG_CONTROL_I/Use_UART.TX_FIFO_I/FIFO_RAM " *) 
  (* srl_name = "inst/mdm_0/U0/\MDM_Core_I1/JTAG_CONTROL_I/Use_UART.TX_FIFO_I/FIFO_RAM[6].D16.SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Addr_3),
        .A1(Addr_2),
        .A2(Addr_1),
        .A3(Addr_0),
        .CE(CI),
        .CLK(S_AXI_ACLK),
        .D(S_AXI_WDATA),
        .Q(Data_Out));
endmodule

(* ORIG_REF_NAME = "mdm_v3_2_17_MB_SRL16E" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_mdm_v3_2_17_MB_SRL16E__parameterized3_847
   (D,
    CI,
    S_AXI_WDATA,
    Addr_3,
    Addr_2,
    Addr_1,
    Addr_0,
    S_AXI_ACLK,
    Q,
    \Use_UART.tdo_reg_reg[7] ,
    \Use_UART.tdo_reg_reg[7]_0 ,
    \Use_UART.tdo_reg_reg[7]_1 ,
    \Use_UART.tdo_reg_reg[7]_2 );
  output [0:0]D;
  input CI;
  input [0:0]S_AXI_WDATA;
  input Addr_3;
  input Addr_2;
  input Addr_1;
  input Addr_0;
  input S_AXI_ACLK;
  input [0:0]Q;
  input \Use_UART.tdo_reg_reg[7] ;
  input \Use_UART.tdo_reg_reg[7]_0 ;
  input \Use_UART.tdo_reg_reg[7]_1 ;
  input \Use_UART.tdo_reg_reg[7]_2 ;

  wire Addr_0;
  wire Addr_1;
  wire Addr_2;
  wire Addr_3;
  wire CI;
  wire [0:0]D;
  wire [7:7]Data_Out;
  wire [0:0]Q;
  wire S_AXI_ACLK;
  wire [0:0]S_AXI_WDATA;
  wire \Use_UART.tdo_reg_reg[7] ;
  wire \Use_UART.tdo_reg_reg[7]_0 ;
  wire \Use_UART.tdo_reg_reg[7]_1 ;
  wire \Use_UART.tdo_reg_reg[7]_2 ;

  LUT6 #(
    .INIT(64'hFFFFF222F222F222)) 
    \Use_UART.tdo_reg[7]_i_1 
       (.I0(Q),
        .I1(\Use_UART.tdo_reg_reg[7] ),
        .I2(\Use_UART.tdo_reg_reg[7]_0 ),
        .I3(\Use_UART.tdo_reg_reg[7]_1 ),
        .I4(Data_Out),
        .I5(\Use_UART.tdo_reg_reg[7]_2 ),
        .O(D));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/mdm_0/U0/\MDM_Core_I1/JTAG_CONTROL_I/Use_UART.TX_FIFO_I/FIFO_RAM " *) 
  (* srl_name = "inst/mdm_0/U0/\MDM_Core_I1/JTAG_CONTROL_I/Use_UART.TX_FIFO_I/FIFO_RAM[7].D16.SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Addr_3),
        .A1(Addr_2),
        .A2(Addr_1),
        .A3(Addr_0),
        .CE(CI),
        .CLK(S_AXI_ACLK),
        .D(S_AXI_WDATA),
        .Q(Data_Out));
endmodule

(* ORIG_REF_NAME = "mdm_v3_2_17_MB_SRL16E" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_mdm_v3_2_17_MB_SRL16E__parameterized3_856
   (RX_Data,
    CI,
    Q,
    Addr_3,
    Addr_2,
    Addr_1,
    Addr_0,
    S_AXI_ACLK);
  output [0:0]RX_Data;
  input CI;
  input [0:0]Q;
  input Addr_3;
  input Addr_2;
  input Addr_1;
  input Addr_0;
  input S_AXI_ACLK;

  wire Addr_0;
  wire Addr_1;
  wire Addr_2;
  wire Addr_3;
  wire CI;
  wire [0:0]Q;
  wire [0:0]RX_Data;
  wire S_AXI_ACLK;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/mdm_0/U0/\MDM_Core_I1/JTAG_CONTROL_I/Use_UART.RX_FIFO_I/FIFO_RAM " *) 
  (* srl_name = "inst/mdm_0/U0/\MDM_Core_I1/JTAG_CONTROL_I/Use_UART.RX_FIFO_I/FIFO_RAM[0].D16.SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Addr_3),
        .A1(Addr_2),
        .A2(Addr_1),
        .A3(Addr_0),
        .CE(CI),
        .CLK(S_AXI_ACLK),
        .D(Q),
        .Q(RX_Data));
endmodule

(* ORIG_REF_NAME = "mdm_v3_2_17_MB_SRL16E" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_mdm_v3_2_17_MB_SRL16E__parameterized3_857
   (RX_Data,
    CI,
    Q,
    Addr_3,
    Addr_2,
    Addr_1,
    Addr_0,
    S_AXI_ACLK);
  output [0:0]RX_Data;
  input CI;
  input [0:0]Q;
  input Addr_3;
  input Addr_2;
  input Addr_1;
  input Addr_0;
  input S_AXI_ACLK;

  wire Addr_0;
  wire Addr_1;
  wire Addr_2;
  wire Addr_3;
  wire CI;
  wire [0:0]Q;
  wire [0:0]RX_Data;
  wire S_AXI_ACLK;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/mdm_0/U0/\MDM_Core_I1/JTAG_CONTROL_I/Use_UART.RX_FIFO_I/FIFO_RAM " *) 
  (* srl_name = "inst/mdm_0/U0/\MDM_Core_I1/JTAG_CONTROL_I/Use_UART.RX_FIFO_I/FIFO_RAM[1].D16.SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Addr_3),
        .A1(Addr_2),
        .A2(Addr_1),
        .A3(Addr_0),
        .CE(CI),
        .CLK(S_AXI_ACLK),
        .D(Q),
        .Q(RX_Data));
endmodule

(* ORIG_REF_NAME = "mdm_v3_2_17_MB_SRL16E" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_mdm_v3_2_17_MB_SRL16E__parameterized3_858
   (RX_Data,
    CI,
    Q,
    Addr_3,
    Addr_2,
    Addr_1,
    Addr_0,
    S_AXI_ACLK);
  output [0:0]RX_Data;
  input CI;
  input [0:0]Q;
  input Addr_3;
  input Addr_2;
  input Addr_1;
  input Addr_0;
  input S_AXI_ACLK;

  wire Addr_0;
  wire Addr_1;
  wire Addr_2;
  wire Addr_3;
  wire CI;
  wire [0:0]Q;
  wire [0:0]RX_Data;
  wire S_AXI_ACLK;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/mdm_0/U0/\MDM_Core_I1/JTAG_CONTROL_I/Use_UART.RX_FIFO_I/FIFO_RAM " *) 
  (* srl_name = "inst/mdm_0/U0/\MDM_Core_I1/JTAG_CONTROL_I/Use_UART.RX_FIFO_I/FIFO_RAM[2].D16.SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Addr_3),
        .A1(Addr_2),
        .A2(Addr_1),
        .A3(Addr_0),
        .CE(CI),
        .CLK(S_AXI_ACLK),
        .D(Q),
        .Q(RX_Data));
endmodule

(* ORIG_REF_NAME = "mdm_v3_2_17_MB_SRL16E" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_mdm_v3_2_17_MB_SRL16E__parameterized3_859
   (RX_Data,
    CI,
    Q,
    Addr_3,
    Addr_2,
    Addr_1,
    Addr_0,
    S_AXI_ACLK);
  output [0:0]RX_Data;
  input CI;
  input [0:0]Q;
  input Addr_3;
  input Addr_2;
  input Addr_1;
  input Addr_0;
  input S_AXI_ACLK;

  wire Addr_0;
  wire Addr_1;
  wire Addr_2;
  wire Addr_3;
  wire CI;
  wire [0:0]Q;
  wire [0:0]RX_Data;
  wire S_AXI_ACLK;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/mdm_0/U0/\MDM_Core_I1/JTAG_CONTROL_I/Use_UART.RX_FIFO_I/FIFO_RAM " *) 
  (* srl_name = "inst/mdm_0/U0/\MDM_Core_I1/JTAG_CONTROL_I/Use_UART.RX_FIFO_I/FIFO_RAM[3].D16.SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Addr_3),
        .A1(Addr_2),
        .A2(Addr_1),
        .A3(Addr_0),
        .CE(CI),
        .CLK(S_AXI_ACLK),
        .D(Q),
        .Q(RX_Data));
endmodule

(* ORIG_REF_NAME = "mdm_v3_2_17_MB_SRL16E" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_mdm_v3_2_17_MB_SRL16E__parameterized3_860
   (RX_Data,
    CI,
    Q,
    Addr_3,
    Addr_2,
    Addr_1,
    Addr_0,
    S_AXI_ACLK);
  output [0:0]RX_Data;
  input CI;
  input [0:0]Q;
  input Addr_3;
  input Addr_2;
  input Addr_1;
  input Addr_0;
  input S_AXI_ACLK;

  wire Addr_0;
  wire Addr_1;
  wire Addr_2;
  wire Addr_3;
  wire CI;
  wire [0:0]Q;
  wire [0:0]RX_Data;
  wire S_AXI_ACLK;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/mdm_0/U0/\MDM_Core_I1/JTAG_CONTROL_I/Use_UART.RX_FIFO_I/FIFO_RAM " *) 
  (* srl_name = "inst/mdm_0/U0/\MDM_Core_I1/JTAG_CONTROL_I/Use_UART.RX_FIFO_I/FIFO_RAM[4].D16.SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Addr_3),
        .A1(Addr_2),
        .A2(Addr_1),
        .A3(Addr_0),
        .CE(CI),
        .CLK(S_AXI_ACLK),
        .D(Q),
        .Q(RX_Data));
endmodule

(* ORIG_REF_NAME = "mdm_v3_2_17_MB_SRL16E" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_mdm_v3_2_17_MB_SRL16E__parameterized3_861
   (RX_Data,
    CI,
    Q,
    Addr_3,
    Addr_2,
    Addr_1,
    Addr_0,
    S_AXI_ACLK);
  output [0:0]RX_Data;
  input CI;
  input [0:0]Q;
  input Addr_3;
  input Addr_2;
  input Addr_1;
  input Addr_0;
  input S_AXI_ACLK;

  wire Addr_0;
  wire Addr_1;
  wire Addr_2;
  wire Addr_3;
  wire CI;
  wire [0:0]Q;
  wire [0:0]RX_Data;
  wire S_AXI_ACLK;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/mdm_0/U0/\MDM_Core_I1/JTAG_CONTROL_I/Use_UART.RX_FIFO_I/FIFO_RAM " *) 
  (* srl_name = "inst/mdm_0/U0/\MDM_Core_I1/JTAG_CONTROL_I/Use_UART.RX_FIFO_I/FIFO_RAM[5].D16.SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Addr_3),
        .A1(Addr_2),
        .A2(Addr_1),
        .A3(Addr_0),
        .CE(CI),
        .CLK(S_AXI_ACLK),
        .D(Q),
        .Q(RX_Data));
endmodule

(* ORIG_REF_NAME = "mdm_v3_2_17_MB_SRL16E" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_mdm_v3_2_17_MB_SRL16E__parameterized3_862
   (RX_Data,
    CI,
    Q,
    Addr_3,
    Addr_2,
    Addr_1,
    Addr_0,
    S_AXI_ACLK);
  output [0:0]RX_Data;
  input CI;
  input [0:0]Q;
  input Addr_3;
  input Addr_2;
  input Addr_1;
  input Addr_0;
  input S_AXI_ACLK;

  wire Addr_0;
  wire Addr_1;
  wire Addr_2;
  wire Addr_3;
  wire CI;
  wire [0:0]Q;
  wire [0:0]RX_Data;
  wire S_AXI_ACLK;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/mdm_0/U0/\MDM_Core_I1/JTAG_CONTROL_I/Use_UART.RX_FIFO_I/FIFO_RAM " *) 
  (* srl_name = "inst/mdm_0/U0/\MDM_Core_I1/JTAG_CONTROL_I/Use_UART.RX_FIFO_I/FIFO_RAM[6].D16.SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Addr_3),
        .A1(Addr_2),
        .A2(Addr_1),
        .A3(Addr_0),
        .CE(CI),
        .CLK(S_AXI_ACLK),
        .D(Q),
        .Q(RX_Data));
endmodule

(* ORIG_REF_NAME = "mdm_v3_2_17_MB_SRL16E" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_mdm_v3_2_17_MB_SRL16E__parameterized3_863
   (RX_Data,
    CI,
    Q,
    Addr_3,
    Addr_2,
    Addr_1,
    Addr_0,
    S_AXI_ACLK);
  output [0:0]RX_Data;
  input CI;
  input [0:0]Q;
  input Addr_3;
  input Addr_2;
  input Addr_1;
  input Addr_0;
  input S_AXI_ACLK;

  wire Addr_0;
  wire Addr_1;
  wire Addr_2;
  wire Addr_3;
  wire CI;
  wire [0:0]Q;
  wire [0:0]RX_Data;
  wire S_AXI_ACLK;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/mdm_0/U0/\MDM_Core_I1/JTAG_CONTROL_I/Use_UART.RX_FIFO_I/FIFO_RAM " *) 
  (* srl_name = "inst/mdm_0/U0/\MDM_Core_I1/JTAG_CONTROL_I/Use_UART.RX_FIFO_I/FIFO_RAM[7].D16.SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Addr_3),
        .A1(Addr_2),
        .A2(Addr_1),
        .A3(Addr_0),
        .CE(CI),
        .CLK(S_AXI_ACLK),
        .D(Q),
        .Q(RX_Data));
endmodule

module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_mdm_v3_2_17_MB_XORCY
   (sum_A_0,
    LI,
    LO,
    lopt);
  output sum_A_0;
  input LI;
  input LO;
  input lopt;

  wire LI;
  wire LO;
  wire sum_A_0;

  assign sum_A_0 = lopt;
endmodule

(* ORIG_REF_NAME = "mdm_v3_2_17_MB_XORCY" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_mdm_v3_2_17_MB_XORCY_855
   (sum_A_0,
    LI,
    LO,
    lopt);
  output sum_A_0;
  input LI;
  input LO;
  input lopt;

  wire LI;
  wire LO;
  wire sum_A_0;

  assign sum_A_0 = lopt;
endmodule

module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_mdm_v3_2_17_SRL_FIFO
   (data_Exists_I_reg_0,
    RX_Data,
    D,
    RX_Buffer_Full,
    \Using_FPGA.Native ,
    S_AXI_ACLK,
    Q,
    \Use_UART.tdo_reg_reg[4] ,
    \Use_UART.tdo_reg_reg[4]_0 ,
    \Use_UART.tdo_reg_reg[4]_1 ,
    Data_Out,
    \Use_UART.tdo_reg_reg[4]_2 ,
    data_Exists_I_reg_1,
    bus2ip_rdce,
    Bus_RNW_reg,
    \GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg );
  output data_Exists_I_reg_0;
  output [0:7]RX_Data;
  output [1:0]D;
  output RX_Buffer_Full;
  input \Using_FPGA.Native ;
  input S_AXI_ACLK;
  input [7:0]Q;
  input [1:0]\Use_UART.tdo_reg_reg[4] ;
  input \Use_UART.tdo_reg_reg[4]_0 ;
  input \Use_UART.tdo_reg_reg[4]_1 ;
  input [1:0]Data_Out;
  input \Use_UART.tdo_reg_reg[4]_2 ;
  input data_Exists_I_reg_1;
  input [0:0]bus2ip_rdce;
  input Bus_RNW_reg;
  input \GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg ;

  wire Addr_0;
  wire Addr_1;
  wire Addr_2;
  wire Addr_3;
  wire \Addr_Counters[2].FDRE_I_n_5 ;
  wire Bus_RNW_reg;
  wire CI;
  wire [1:0]D;
  wire [1:0]Data_Out;
  wire \GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg ;
  wire LI;
  wire [7:0]Q;
  wire RX_Buffer_Full;
  wire [0:7]RX_Data;
  wire S;
  wire S3_out;
  wire S4_out;
  wire S_AXI_ACLK;
  wire [1:0]\Use_UART.tdo_reg_reg[4] ;
  wire \Use_UART.tdo_reg_reg[4]_0 ;
  wire \Use_UART.tdo_reg_reg[4]_1 ;
  wire \Use_UART.tdo_reg_reg[4]_2 ;
  wire \Using_FPGA.Native ;
  wire addr_cy_0;
  wire addr_cy_1;
  wire addr_cy_2;
  wire [0:0]bus2ip_rdce;
  wire data_Exists_I_reg_0;
  wire data_Exists_I_reg_1;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire sum_A_0;
  wire sum_A_1;
  wire sum_A_2;
  wire sum_A_3;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_mdm_v3_2_17_MB_FDRE_848 \Addr_Counters[0].FDRE_I 
       (.Addr_0(Addr_0),
        .Addr_1(Addr_1),
        .Addr_2(Addr_2),
        .Addr_3(Addr_3),
        .O(sum_A_3),
        .S(S),
        .S_AXI_ACLK(S_AXI_ACLK),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (data_Exists_I_reg_0),
        .\Using_FPGA.Native_2 (data_Exists_I_reg_1),
        .bus2ip_rdce(bus2ip_rdce));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_mdm_v3_2_17_MB_MUXCY_XORCY_849 \Addr_Counters[0].Used_MuxCY.MUXCY_L_I 
       (.Addr_3(Addr_3),
        .CI(CI),
        .LO(addr_cy_2),
        .O(sum_A_3),
        .S(S),
        .lopt(lopt),
        .lopt_1(Addr_2),
        .lopt_2(S4_out),
        .lopt_3(lopt_1),
        .lopt_4(Addr_1),
        .lopt_5(S3_out),
        .lopt_6(lopt_2),
        .lopt_7(lopt_3),
        .lopt_8(lopt_4),
        .lopt_9(LI));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_mdm_v3_2_17_MB_FDRE_850 \Addr_Counters[1].FDRE_I 
       (.Addr_0(Addr_0),
        .Addr_1(Addr_1),
        .Addr_2(Addr_2),
        .Addr_3(Addr_3),
        .O(sum_A_2),
        .S(S4_out),
        .S_AXI_ACLK(S_AXI_ACLK),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (data_Exists_I_reg_0),
        .\Using_FPGA.Native_2 (data_Exists_I_reg_1),
        .bus2ip_rdce(bus2ip_rdce));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_mdm_v3_2_17_MB_MUXCY_XORCY_851 \Addr_Counters[1].Used_MuxCY.MUXCY_L_I 
       (.Addr_2(Addr_2),
        .CI(addr_cy_2),
        .LO(addr_cy_1),
        .O(sum_A_2),
        .S(S4_out),
        .lopt(lopt),
        .lopt_1(lopt_2));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_mdm_v3_2_17_MB_FDRE_852 \Addr_Counters[2].FDRE_I 
       (.Addr_0(Addr_0),
        .Addr_1(Addr_1),
        .Addr_2(Addr_2),
        .Addr_3(Addr_3),
        .Bus_RNW_reg(Bus_RNW_reg),
        .CI(CI),
        .D(D[1]),
        .Data_Out(Data_Out[1]),
        .\GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg (\GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg ),
        .O(sum_A_1),
        .RX_Buffer_Full(RX_Buffer_Full),
        .S(S3_out),
        .S_AXI_ACLK(S_AXI_ACLK),
        .\Use_UART.tdo_reg_reg[4] (\Use_UART.tdo_reg_reg[4] [1]),
        .\Use_UART.tdo_reg_reg[4]_0 (\Use_UART.tdo_reg_reg[4]_0 ),
        .\Use_UART.tdo_reg_reg[4]_1 (\Use_UART.tdo_reg_reg[4]_1 ),
        .\Use_UART.tdo_reg_reg[4]_2 (\Use_UART.tdo_reg_reg[4]_2 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (data_Exists_I_reg_0),
        .bus2ip_rdce(bus2ip_rdce),
        .data_Exists_I_reg(\Addr_Counters[2].FDRE_I_n_5 ),
        .data_Exists_I_reg_0(data_Exists_I_reg_1));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_mdm_v3_2_17_MB_MUXCY_XORCY_853 \Addr_Counters[2].Used_MuxCY.MUXCY_L_I 
       (.Addr_1(Addr_1),
        .CI(addr_cy_1),
        .LO(addr_cy_0),
        .O(sum_A_1),
        .S(S3_out),
        .lopt(lopt_1),
        .lopt_1(lopt_3));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_mdm_v3_2_17_MB_FDRE_854 \Addr_Counters[3].FDRE_I 
       (.Addr_0(Addr_0),
        .Addr_1(Addr_1),
        .Addr_2(Addr_2),
        .Addr_3(Addr_3),
        .LI(LI),
        .S_AXI_ACLK(S_AXI_ACLK),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (data_Exists_I_reg_0),
        .\Using_FPGA.Native_2 (data_Exists_I_reg_1),
        .bus2ip_rdce(bus2ip_rdce),
        .sum_A_0(sum_A_0));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_mdm_v3_2_17_MB_XORCY_855 \Addr_Counters[3].No_MuxCY.XORCY_I 
       (.LI(LI),
        .LO(addr_cy_0),
        .lopt(lopt_4),
        .sum_A_0(sum_A_0));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_mdm_v3_2_17_MB_SRL16E__parameterized3_856 \FIFO_RAM[0].D16.SRL16E_I 
       (.Addr_0(Addr_0),
        .Addr_1(Addr_1),
        .Addr_2(Addr_2),
        .Addr_3(Addr_3),
        .CI(CI),
        .Q(Q[7]),
        .RX_Data(RX_Data[0]),
        .S_AXI_ACLK(S_AXI_ACLK));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_mdm_v3_2_17_MB_SRL16E__parameterized3_857 \FIFO_RAM[1].D16.SRL16E_I 
       (.Addr_0(Addr_0),
        .Addr_1(Addr_1),
        .Addr_2(Addr_2),
        .Addr_3(Addr_3),
        .CI(CI),
        .Q(Q[6]),
        .RX_Data(RX_Data[1]),
        .S_AXI_ACLK(S_AXI_ACLK));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_mdm_v3_2_17_MB_SRL16E__parameterized3_858 \FIFO_RAM[2].D16.SRL16E_I 
       (.Addr_0(Addr_0),
        .Addr_1(Addr_1),
        .Addr_2(Addr_2),
        .Addr_3(Addr_3),
        .CI(CI),
        .Q(Q[5]),
        .RX_Data(RX_Data[2]),
        .S_AXI_ACLK(S_AXI_ACLK));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_mdm_v3_2_17_MB_SRL16E__parameterized3_859 \FIFO_RAM[3].D16.SRL16E_I 
       (.Addr_0(Addr_0),
        .Addr_1(Addr_1),
        .Addr_2(Addr_2),
        .Addr_3(Addr_3),
        .CI(CI),
        .Q(Q[4]),
        .RX_Data(RX_Data[3]),
        .S_AXI_ACLK(S_AXI_ACLK));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_mdm_v3_2_17_MB_SRL16E__parameterized3_860 \FIFO_RAM[4].D16.SRL16E_I 
       (.Addr_0(Addr_0),
        .Addr_1(Addr_1),
        .Addr_2(Addr_2),
        .Addr_3(Addr_3),
        .CI(CI),
        .Q(Q[3]),
        .RX_Data(RX_Data[4]),
        .S_AXI_ACLK(S_AXI_ACLK));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_mdm_v3_2_17_MB_SRL16E__parameterized3_861 \FIFO_RAM[5].D16.SRL16E_I 
       (.Addr_0(Addr_0),
        .Addr_1(Addr_1),
        .Addr_2(Addr_2),
        .Addr_3(Addr_3),
        .CI(CI),
        .Q(Q[2]),
        .RX_Data(RX_Data[5]),
        .S_AXI_ACLK(S_AXI_ACLK));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_mdm_v3_2_17_MB_SRL16E__parameterized3_862 \FIFO_RAM[6].D16.SRL16E_I 
       (.Addr_0(Addr_0),
        .Addr_1(Addr_1),
        .Addr_2(Addr_2),
        .Addr_3(Addr_3),
        .CI(CI),
        .Q(Q[1]),
        .RX_Data(RX_Data[6]),
        .S_AXI_ACLK(S_AXI_ACLK));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_mdm_v3_2_17_MB_SRL16E__parameterized3_863 \FIFO_RAM[7].D16.SRL16E_I 
       (.Addr_0(Addr_0),
        .Addr_1(Addr_1),
        .Addr_2(Addr_2),
        .Addr_3(Addr_3),
        .CI(CI),
        .Q(Q[0]),
        .RX_Data(RX_Data[7]),
        .S_AXI_ACLK(S_AXI_ACLK));
  LUT6 #(
    .INIT(64'hFFFF22F222F222F2)) 
    \Use_UART.tdo_reg[5]_i_1 
       (.I0(\Use_UART.tdo_reg_reg[4] [0]),
        .I1(\Use_UART.tdo_reg_reg[4]_0 ),
        .I2(\Use_UART.tdo_reg_reg[4]_1 ),
        .I3(data_Exists_I_reg_0),
        .I4(Data_Out[0]),
        .I5(\Use_UART.tdo_reg_reg[4]_2 ),
        .O(D[0]));
  FDRE #(
    .INIT(1'b0)) 
    data_Exists_I_reg
       (.C(S_AXI_ACLK),
        .CE(1'b1),
        .D(\Addr_Counters[2].FDRE_I_n_5 ),
        .Q(data_Exists_I_reg_0),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "mdm_v3_2_17_SRL_FIFO" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_mdm_v3_2_17_SRL_FIFO_834
   (data_Exists_I_reg_0,
    \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[3] ,
    D,
    tx_Buffer_Full,
    tx_Buffer_Empty,
    Interrupt,
    \Using_FPGA.Native ,
    S_AXI_ACLK,
    S_AXI_WDATA,
    Q,
    \Use_UART.tdo_reg_reg[7] ,
    \Use_UART.tdo_reg_reg[7]_0 ,
    \Use_UART.tdo_reg_reg[7]_1 ,
    FIFO_Write,
    data_Exists_I_reg_1,
    Bus_RNW_reg,
    \GEN_BKEND_CE_REGISTERS[1].ce_out_i_reg ,
    out,
    Q_0,
    Interrupt_INST_0_0,
    enable_interrupts);
  output data_Exists_I_reg_0;
  output [1:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[3] ;
  output [5:0]D;
  output tx_Buffer_Full;
  output tx_Buffer_Empty;
  output Interrupt;
  input \Using_FPGA.Native ;
  input S_AXI_ACLK;
  input [7:0]S_AXI_WDATA;
  input [4:0]Q;
  input \Use_UART.tdo_reg_reg[7] ;
  input \Use_UART.tdo_reg_reg[7]_0 ;
  input \Use_UART.tdo_reg_reg[7]_1 ;
  input FIFO_Write;
  input data_Exists_I_reg_1;
  input Bus_RNW_reg;
  input \GEN_BKEND_CE_REGISTERS[1].ce_out_i_reg ;
  input out;
  input Q_0;
  input Interrupt_INST_0_0;
  input enable_interrupts;

  wire [1:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[3] ;
  wire Addr_0;
  wire Addr_1;
  wire Addr_2;
  wire Addr_3;
  wire \Addr_Counters[2].FDRE_I_n_5 ;
  wire Bus_RNW_reg;
  wire CI;
  wire [5:0]D;
  wire [6:6]Data_Out;
  wire FIFO_Write;
  wire \GEN_BKEND_CE_REGISTERS[1].ce_out_i_reg ;
  wire Interrupt;
  wire Interrupt_INST_0_0;
  wire LI;
  wire [4:0]Q;
  wire Q_0;
  wire S;
  wire S3_out;
  wire S4_out;
  wire S_AXI_ACLK;
  wire [7:0]S_AXI_WDATA;
  wire \Use_UART.tdo_reg_reg[7] ;
  wire \Use_UART.tdo_reg_reg[7]_0 ;
  wire \Use_UART.tdo_reg_reg[7]_1 ;
  wire \Using_FPGA.Native ;
  wire addr_cy_0;
  wire addr_cy_1;
  wire addr_cy_2;
  wire data_Exists_I_reg_0;
  wire data_Exists_I_reg_1;
  wire enable_interrupts;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire out;
  wire sum_A_0;
  wire sum_A_1;
  wire sum_A_2;
  wire sum_A_3;
  wire tx_Buffer_Empty;
  wire tx_Buffer_Full;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_mdm_v3_2_17_MB_FDRE_835 \Addr_Counters[0].FDRE_I 
       (.Addr_0(Addr_0),
        .Addr_1(Addr_1),
        .Addr_2(Addr_2),
        .Addr_3(Addr_3),
        .FIFO_Write(FIFO_Write),
        .O(sum_A_3),
        .S(S),
        .S_AXI_ACLK(S_AXI_ACLK),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (data_Exists_I_reg_0),
        .\Using_FPGA.Native_2 (data_Exists_I_reg_1));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_mdm_v3_2_17_MB_MUXCY_XORCY \Addr_Counters[0].Used_MuxCY.MUXCY_L_I 
       (.Addr_3(Addr_3),
        .CI(CI),
        .LO(addr_cy_2),
        .O(sum_A_3),
        .S(S),
        .lopt(lopt),
        .lopt_1(Addr_2),
        .lopt_2(S4_out),
        .lopt_3(lopt_1),
        .lopt_4(Addr_1),
        .lopt_5(S3_out),
        .lopt_6(lopt_2),
        .lopt_7(lopt_3),
        .lopt_8(lopt_4),
        .lopt_9(LI));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_mdm_v3_2_17_MB_FDRE_836 \Addr_Counters[1].FDRE_I 
       (.Addr_0(Addr_0),
        .Addr_1(Addr_1),
        .Addr_2(Addr_2),
        .Addr_3(Addr_3),
        .FIFO_Write(FIFO_Write),
        .O(sum_A_2),
        .S(S4_out),
        .S_AXI_ACLK(S_AXI_ACLK),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (data_Exists_I_reg_0),
        .\Using_FPGA.Native_2 (data_Exists_I_reg_1));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_mdm_v3_2_17_MB_MUXCY_XORCY_837 \Addr_Counters[1].Used_MuxCY.MUXCY_L_I 
       (.Addr_2(Addr_2),
        .CI(addr_cy_2),
        .LO(addr_cy_1),
        .O(sum_A_2),
        .S(S4_out),
        .lopt(lopt),
        .lopt_1(lopt_2));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_mdm_v3_2_17_MB_FDRE_838 \Addr_Counters[2].FDRE_I 
       (.Addr_0(Addr_0),
        .Addr_1(Addr_1),
        .Addr_2(Addr_2),
        .Addr_3(Addr_3),
        .Bus_RNW_reg(Bus_RNW_reg),
        .CI(CI),
        .D(D[1]),
        .Data_Out(Data_Out),
        .FIFO_Write(FIFO_Write),
        .\GEN_BKEND_CE_REGISTERS[1].ce_out_i_reg (\GEN_BKEND_CE_REGISTERS[1].ce_out_i_reg ),
        .O(sum_A_1),
        .Q(Q[1]),
        .S(S3_out),
        .S_AXI_ACLK(S_AXI_ACLK),
        .\Use_UART.tdo_reg_reg[6] (\Use_UART.tdo_reg_reg[7] ),
        .\Use_UART.tdo_reg_reg[6]_0 (\Use_UART.tdo_reg_reg[7]_0 ),
        .\Use_UART.tdo_reg_reg[6]_1 (\Use_UART.tdo_reg_reg[7]_1 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (data_Exists_I_reg_0),
        .data_Exists_I_reg(\Addr_Counters[2].FDRE_I_n_5 ),
        .data_Exists_I_reg_0(data_Exists_I_reg_1),
        .out(out),
        .tx_Buffer_Full(tx_Buffer_Full));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_mdm_v3_2_17_MB_MUXCY_XORCY_839 \Addr_Counters[2].Used_MuxCY.MUXCY_L_I 
       (.Addr_1(Addr_1),
        .CI(addr_cy_1),
        .LO(addr_cy_0),
        .O(sum_A_1),
        .S(S3_out),
        .lopt(lopt_1),
        .lopt_1(lopt_3));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_mdm_v3_2_17_MB_FDRE_840 \Addr_Counters[3].FDRE_I 
       (.Addr_0(Addr_0),
        .Addr_1(Addr_1),
        .Addr_2(Addr_2),
        .Addr_3(Addr_3),
        .FIFO_Write(FIFO_Write),
        .LI(LI),
        .S_AXI_ACLK(S_AXI_ACLK),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (data_Exists_I_reg_0),
        .\Using_FPGA.Native_2 (data_Exists_I_reg_1),
        .sum_A_0(sum_A_0));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_mdm_v3_2_17_MB_XORCY \Addr_Counters[3].No_MuxCY.XORCY_I 
       (.LI(LI),
        .LO(addr_cy_0),
        .lopt(lopt_4),
        .sum_A_0(sum_A_0));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_mdm_v3_2_17_MB_SRL16E__parameterized3 \FIFO_RAM[0].D16.SRL16E_I 
       (.Addr_0(Addr_0),
        .Addr_1(Addr_1),
        .Addr_2(Addr_2),
        .Addr_3(Addr_3),
        .CI(CI),
        .D(D[5]),
        .S_AXI_ACLK(S_AXI_ACLK),
        .S_AXI_WDATA(S_AXI_WDATA[7]),
        .\Use_UART.tdo_reg_reg[0] (\Use_UART.tdo_reg_reg[7]_1 ));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_mdm_v3_2_17_MB_SRL16E__parameterized3_841 \FIFO_RAM[1].D16.SRL16E_I 
       (.Addr_0(Addr_0),
        .Addr_1(Addr_1),
        .Addr_2(Addr_2),
        .Addr_3(Addr_3),
        .CI(CI),
        .D(D[4]),
        .Q(Q[4]),
        .S_AXI_ACLK(S_AXI_ACLK),
        .S_AXI_WDATA(S_AXI_WDATA[6]),
        .\Use_UART.tdo_reg_reg[1] (\Use_UART.tdo_reg_reg[7]_1 ),
        .\Use_UART.tdo_reg_reg[1]_0 (\Use_UART.tdo_reg_reg[7] ));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_mdm_v3_2_17_MB_SRL16E__parameterized3_842 \FIFO_RAM[2].D16.SRL16E_I 
       (.Addr_0(Addr_0),
        .Addr_1(Addr_1),
        .Addr_2(Addr_2),
        .Addr_3(Addr_3),
        .CI(CI),
        .D(D[3]),
        .Q(Q[3]),
        .S_AXI_ACLK(S_AXI_ACLK),
        .S_AXI_WDATA(S_AXI_WDATA[5]),
        .\Use_UART.tdo_reg_reg[2] (\Use_UART.tdo_reg_reg[7]_1 ),
        .\Use_UART.tdo_reg_reg[2]_0 (\Use_UART.tdo_reg_reg[7] ));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_mdm_v3_2_17_MB_SRL16E__parameterized3_843 \FIFO_RAM[3].D16.SRL16E_I 
       (.Addr_0(Addr_0),
        .Addr_1(Addr_1),
        .Addr_2(Addr_2),
        .Addr_3(Addr_3),
        .CI(CI),
        .D(D[2]),
        .Q(Q[2]),
        .S_AXI_ACLK(S_AXI_ACLK),
        .S_AXI_WDATA(S_AXI_WDATA[4]),
        .\Use_UART.tdo_reg_reg[3] (\Use_UART.tdo_reg_reg[7]_1 ),
        .\Use_UART.tdo_reg_reg[3]_0 (\Use_UART.tdo_reg_reg[7] ));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_mdm_v3_2_17_MB_SRL16E__parameterized3_844 \FIFO_RAM[4].D16.SRL16E_I 
       (.\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[3] (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[3] [1]),
        .Addr_0(Addr_0),
        .Addr_1(Addr_1),
        .Addr_2(Addr_2),
        .Addr_3(Addr_3),
        .CI(CI),
        .S_AXI_ACLK(S_AXI_ACLK),
        .S_AXI_WDATA(S_AXI_WDATA[3]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_mdm_v3_2_17_MB_SRL16E__parameterized3_845 \FIFO_RAM[5].D16.SRL16E_I 
       (.\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[2] (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[3] [0]),
        .Addr_0(Addr_0),
        .Addr_1(Addr_1),
        .Addr_2(Addr_2),
        .Addr_3(Addr_3),
        .CI(CI),
        .S_AXI_ACLK(S_AXI_ACLK),
        .S_AXI_WDATA(S_AXI_WDATA[2]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_mdm_v3_2_17_MB_SRL16E__parameterized3_846 \FIFO_RAM[6].D16.SRL16E_I 
       (.Addr_0(Addr_0),
        .Addr_1(Addr_1),
        .Addr_2(Addr_2),
        .Addr_3(Addr_3),
        .CI(CI),
        .Data_Out(Data_Out),
        .S_AXI_ACLK(S_AXI_ACLK),
        .S_AXI_WDATA(S_AXI_WDATA[1]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_mdm_v3_2_17_MB_SRL16E__parameterized3_847 \FIFO_RAM[7].D16.SRL16E_I 
       (.Addr_0(Addr_0),
        .Addr_1(Addr_1),
        .Addr_2(Addr_2),
        .Addr_3(Addr_3),
        .CI(CI),
        .D(D[0]),
        .Q(Q[0]),
        .S_AXI_ACLK(S_AXI_ACLK),
        .S_AXI_WDATA(S_AXI_WDATA[0]),
        .\Use_UART.tdo_reg_reg[7] (\Use_UART.tdo_reg_reg[7] ),
        .\Use_UART.tdo_reg_reg[7]_0 (\Use_UART.tdo_reg_reg[7]_0 ),
        .\Use_UART.tdo_reg_reg[7]_1 (data_Exists_I_reg_0),
        .\Use_UART.tdo_reg_reg[7]_2 (\Use_UART.tdo_reg_reg[7]_1 ));
  (* SOFT_HLUTNM = "soft_lutpair24" *) 
  LUT4 #(
    .INIT(16'hF100)) 
    Interrupt_INST_0
       (.I0(Q_0),
        .I1(data_Exists_I_reg_0),
        .I2(Interrupt_INST_0_0),
        .I3(enable_interrupts),
        .O(Interrupt));
  (* SOFT_HLUTNM = "soft_lutpair24" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \Using_FPGA.Native_i_2__0 
       (.I0(data_Exists_I_reg_0),
        .O(tx_Buffer_Empty));
  FDRE #(
    .INIT(1'b0)) 
    data_Exists_I_reg
       (.C(S_AXI_ACLK),
        .CE(1'b1),
        .D(\Addr_Counters[2].FDRE_I_n_5 ),
        .Q(data_Exists_I_reg_0),
        .R(1'b0));
endmodule

(* C_AUX_RESET_HIGH = "1'b0" *) (* C_AUX_RST_WIDTH = "4" *) (* C_EXT_RESET_HIGH = "1'b0" *) 
(* C_EXT_RST_WIDTH = "4" *) (* C_FAMILY = "artix7" *) (* C_NUM_BUS_RST = "1" *) 
(* C_NUM_INTERCONNECT_ARESETN = "1" *) (* C_NUM_PERP_ARESETN = "1" *) (* C_NUM_PERP_RST = "1" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_proc_sys_reset
   (slowest_sync_clk,
    ext_reset_in,
    aux_reset_in,
    mb_debug_sys_rst,
    dcm_locked,
    mb_reset,
    bus_struct_reset,
    peripheral_reset,
    interconnect_aresetn,
    peripheral_aresetn);
  input slowest_sync_clk;
  input ext_reset_in;
  input aux_reset_in;
  input mb_debug_sys_rst;
  input dcm_locked;
  output mb_reset;
  output [0:0]bus_struct_reset;
  output [0:0]peripheral_reset;
  output [0:0]interconnect_aresetn;
  output [0:0]peripheral_aresetn;

  wire Bsr_out;
  wire MB_out;
  wire Pr_out;
  wire SEQ_n_3;
  wire SEQ_n_4;
  wire aux_reset_in;
  wire [0:0]bus_struct_reset;
  wire dcm_locked;
  wire ext_reset_in;
  wire [0:0]interconnect_aresetn;
  wire lpf_int;
  wire mb_debug_sys_rst;
  wire mb_reset;
  wire [0:0]peripheral_aresetn;
  wire [0:0]peripheral_reset;
  wire slowest_sync_clk;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \ACTIVE_LOW_BSR_OUT_DFF[0].FDRE_BSR_N 
       (.C(slowest_sync_clk),
        .CE(1'b1),
        .D(SEQ_n_3),
        .Q(interconnect_aresetn),
        .R(1'b0));
  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N 
       (.C(slowest_sync_clk),
        .CE(1'b1),
        .D(SEQ_n_4),
        .Q(peripheral_aresetn),
        .R(1'b0));
  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \BSR_OUT_DFF[0].FDRE_BSR 
       (.C(slowest_sync_clk),
        .CE(1'b1),
        .D(Bsr_out),
        .Q(bus_struct_reset),
        .R(1'b0));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_lpf EXT_LPF
       (.aux_reset_in(aux_reset_in),
        .dcm_locked(dcm_locked),
        .ext_reset_in(ext_reset_in),
        .lpf_int(lpf_int),
        .mb_debug_sys_rst(mb_debug_sys_rst),
        .slowest_sync_clk(slowest_sync_clk));
  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    FDRE_inst
       (.C(slowest_sync_clk),
        .CE(1'b1),
        .D(MB_out),
        .Q(mb_reset),
        .R(1'b0));
  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \PR_OUT_DFF[0].FDRE_PER 
       (.C(slowest_sync_clk),
        .CE(1'b1),
        .D(Pr_out),
        .Q(peripheral_reset),
        .R(1'b0));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_sequence_psr SEQ
       (.Bsr_out(Bsr_out),
        .MB_out(MB_out),
        .Pr_out(Pr_out),
        .bsr_reg_0(SEQ_n_3),
        .lpf_int(lpf_int),
        .pr_reg_0(SEQ_n_4),
        .slowest_sync_clk(slowest_sync_clk));
endmodule

module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_pselect_f
   (ce_expnd_i_3,
    \GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg[0] ,
    \GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg[0]_0 );
  output ce_expnd_i_3;
  input \GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg[0] ;
  input \GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg[0]_0 ;

  wire \GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg[0] ;
  wire \GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg[0]_0 ;
  wire ce_expnd_i_3;

  LUT2 #(
    .INIT(4'h1)) 
    CS
       (.I0(\GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg[0] ),
        .I1(\GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg[0]_0 ),
        .O(ce_expnd_i_3));
endmodule

(* ORIG_REF_NAME = "pselect_f" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_pselect_f__parameterized1
   (ce_expnd_i_1,
    \GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2] ,
    \GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2]_0 );
  output ce_expnd_i_1;
  input \GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2] ;
  input \GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2]_0 ;

  wire \GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2] ;
  wire \GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2]_0 ;
  wire ce_expnd_i_1;

  LUT2 #(
    .INIT(4'h2)) 
    CS
       (.I0(\GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2] ),
        .I1(\GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2]_0 ),
        .O(ce_expnd_i_1));
endmodule

module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_sequence_psr
   (MB_out,
    Bsr_out,
    Pr_out,
    bsr_reg_0,
    pr_reg_0,
    lpf_int,
    slowest_sync_clk);
  output MB_out;
  output Bsr_out;
  output Pr_out;
  output bsr_reg_0;
  output pr_reg_0;
  input lpf_int;
  input slowest_sync_clk;

  wire Bsr_out;
  wire Core_i_1_n_0;
  wire MB_out;
  wire Pr_out;
  wire \bsr_dec_reg_n_0_[0] ;
  wire \bsr_dec_reg_n_0_[2] ;
  wire bsr_i_1_n_0;
  wire bsr_reg_0;
  wire \core_dec[0]_i_1_n_0 ;
  wire \core_dec[2]_i_1_n_0 ;
  wire \core_dec_reg_n_0_[0] ;
  wire \core_dec_reg_n_0_[1] ;
  wire from_sys_i_1_n_0;
  wire lpf_int;
  wire p_0_in;
  wire [2:0]p_3_out;
  wire [2:0]p_5_out;
  wire pr_dec0__0;
  wire \pr_dec_reg_n_0_[0] ;
  wire \pr_dec_reg_n_0_[2] ;
  wire pr_i_1_n_0;
  wire pr_reg_0;
  wire seq_clr;
  wire [5:0]seq_cnt;
  wire seq_cnt_en;
  wire slowest_sync_clk;

  (* SOFT_HLUTNM = "soft_lutpair110" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \ACTIVE_LOW_BSR_OUT_DFF[0].FDRE_BSR_N_i_1 
       (.I0(Bsr_out),
        .O(bsr_reg_0));
  (* SOFT_HLUTNM = "soft_lutpair109" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \ACTIVE_LOW_PR_OUT_DFF[0].FDRE_PER_N_i_1 
       (.I0(Pr_out),
        .O(pr_reg_0));
  (* SOFT_HLUTNM = "soft_lutpair108" *) 
  LUT2 #(
    .INIT(4'h2)) 
    Core_i_1
       (.I0(MB_out),
        .I1(p_0_in),
        .O(Core_i_1_n_0));
  FDSE #(
    .INIT(1'b1)) 
    Core_reg
       (.C(slowest_sync_clk),
        .CE(1'b1),
        .D(Core_i_1_n_0),
        .Q(MB_out),
        .S(lpf_int));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_upcnt_n SEQ_COUNTER
       (.Q(seq_cnt),
        .seq_clr(seq_clr),
        .seq_cnt_en(seq_cnt_en),
        .slowest_sync_clk(slowest_sync_clk));
  LUT4 #(
    .INIT(16'h0090)) 
    \bsr_dec[0]_i_1 
       (.I0(seq_cnt_en),
        .I1(seq_cnt[4]),
        .I2(seq_cnt[3]),
        .I3(seq_cnt[5]),
        .O(p_5_out[0]));
  (* SOFT_HLUTNM = "soft_lutpair111" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \bsr_dec[2]_i_1 
       (.I0(\core_dec_reg_n_0_[1] ),
        .I1(\bsr_dec_reg_n_0_[0] ),
        .O(p_5_out[2]));
  FDRE #(
    .INIT(1'b0)) 
    \bsr_dec_reg[0] 
       (.C(slowest_sync_clk),
        .CE(1'b1),
        .D(p_5_out[0]),
        .Q(\bsr_dec_reg_n_0_[0] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \bsr_dec_reg[2] 
       (.C(slowest_sync_clk),
        .CE(1'b1),
        .D(p_5_out[2]),
        .Q(\bsr_dec_reg_n_0_[2] ),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair110" *) 
  LUT2 #(
    .INIT(4'h2)) 
    bsr_i_1
       (.I0(Bsr_out),
        .I1(\bsr_dec_reg_n_0_[2] ),
        .O(bsr_i_1_n_0));
  FDSE #(
    .INIT(1'b1)) 
    bsr_reg
       (.C(slowest_sync_clk),
        .CE(1'b1),
        .D(bsr_i_1_n_0),
        .Q(Bsr_out),
        .S(lpf_int));
  (* SOFT_HLUTNM = "soft_lutpair107" *) 
  LUT4 #(
    .INIT(16'h9000)) 
    \core_dec[0]_i_1 
       (.I0(seq_cnt_en),
        .I1(seq_cnt[4]),
        .I2(seq_cnt[3]),
        .I3(seq_cnt[5]),
        .O(\core_dec[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair111" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \core_dec[2]_i_1 
       (.I0(\core_dec_reg_n_0_[1] ),
        .I1(\core_dec_reg_n_0_[0] ),
        .O(\core_dec[2]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \core_dec_reg[0] 
       (.C(slowest_sync_clk),
        .CE(1'b1),
        .D(\core_dec[0]_i_1_n_0 ),
        .Q(\core_dec_reg_n_0_[0] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \core_dec_reg[1] 
       (.C(slowest_sync_clk),
        .CE(1'b1),
        .D(pr_dec0__0),
        .Q(\core_dec_reg_n_0_[1] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \core_dec_reg[2] 
       (.C(slowest_sync_clk),
        .CE(1'b1),
        .D(\core_dec[2]_i_1_n_0 ),
        .Q(p_0_in),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair108" *) 
  LUT2 #(
    .INIT(4'h8)) 
    from_sys_i_1
       (.I0(MB_out),
        .I1(seq_cnt_en),
        .O(from_sys_i_1_n_0));
  FDSE #(
    .INIT(1'b0)) 
    from_sys_reg
       (.C(slowest_sync_clk),
        .CE(1'b1),
        .D(from_sys_i_1_n_0),
        .Q(seq_cnt_en),
        .S(lpf_int));
  LUT4 #(
    .INIT(16'h0018)) 
    pr_dec0
       (.I0(seq_cnt_en),
        .I1(seq_cnt[0]),
        .I2(seq_cnt[2]),
        .I3(seq_cnt[1]),
        .O(pr_dec0__0));
  (* SOFT_HLUTNM = "soft_lutpair107" *) 
  LUT4 #(
    .INIT(16'h0480)) 
    \pr_dec[0]_i_1 
       (.I0(seq_cnt_en),
        .I1(seq_cnt[3]),
        .I2(seq_cnt[5]),
        .I3(seq_cnt[4]),
        .O(p_3_out[0]));
  LUT2 #(
    .INIT(4'h8)) 
    \pr_dec[2]_i_1 
       (.I0(\core_dec_reg_n_0_[1] ),
        .I1(\pr_dec_reg_n_0_[0] ),
        .O(p_3_out[2]));
  FDRE #(
    .INIT(1'b0)) 
    \pr_dec_reg[0] 
       (.C(slowest_sync_clk),
        .CE(1'b1),
        .D(p_3_out[0]),
        .Q(\pr_dec_reg_n_0_[0] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \pr_dec_reg[2] 
       (.C(slowest_sync_clk),
        .CE(1'b1),
        .D(p_3_out[2]),
        .Q(\pr_dec_reg_n_0_[2] ),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair109" *) 
  LUT2 #(
    .INIT(4'h2)) 
    pr_i_1
       (.I0(Pr_out),
        .I1(\pr_dec_reg_n_0_[2] ),
        .O(pr_i_1_n_0));
  FDSE #(
    .INIT(1'b1)) 
    pr_reg
       (.C(slowest_sync_clk),
        .CE(1'b1),
        .D(pr_i_1_n_0),
        .Q(Pr_out),
        .S(lpf_int));
  FDRE #(
    .INIT(1'b0)) 
    seq_clr_reg
       (.C(slowest_sync_clk),
        .CE(1'b1),
        .D(1'b1),
        .Q(seq_clr),
        .R(lpf_int));
endmodule

module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_slave_attachment
   (\GEN_BKEND_CE_REGISTERS[1].ce_out_i_reg[1] ,
    \GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg[0] ,
    S_AXI_RRESP,
    Bus_RNW_reg_reg,
    S_AXI_RVALID,
    S_AXI_BVALID,
    S_AXI_BRESP,
    \GEN_BKEND_CE_REGISTERS[3].ce_out_i_reg[3] ,
    \GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2] ,
    FIFO_Write,
    bus2ip_wrce,
    clear_Ext_BRK,
    reset_RX_FIFO_i,
    reset_TX_FIFO_i,
    bus2ip_rdce,
    \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[4] ,
    S_AXI_RDATA,
    rst_reg_0,
    S_AXI_ACLK,
    S_AXI_AWVALID,
    S_AXI_WVALID,
    S_AXI_ARVALID,
    out,
    tx_Buffer_Full,
    rx_Data_Present,
    S_AXI_WDATA,
    RX_Data,
    RX_Buffer_Full,
    fifo_Data_Present,
    enable_interrupts,
    S_AXI_RREADY,
    S_AXI_BREADY,
    S_AXI_ARESETN,
    S_AXI_ARADDR,
    S_AXI_AWADDR);
  output \GEN_BKEND_CE_REGISTERS[1].ce_out_i_reg[1] ;
  output \GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg[0] ;
  output [0:0]S_AXI_RRESP;
  output Bus_RNW_reg_reg;
  output S_AXI_RVALID;
  output S_AXI_BVALID;
  output [0:0]S_AXI_BRESP;
  output \GEN_BKEND_CE_REGISTERS[3].ce_out_i_reg[3] ;
  output \GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2] ;
  output FIFO_Write;
  output [0:0]bus2ip_wrce;
  output clear_Ext_BRK;
  output reset_RX_FIFO_i;
  output reset_TX_FIFO_i;
  output [0:0]bus2ip_rdce;
  output \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[4] ;
  output [7:0]S_AXI_RDATA;
  input rst_reg_0;
  input S_AXI_ACLK;
  input S_AXI_AWVALID;
  input S_AXI_WVALID;
  input S_AXI_ARVALID;
  input out;
  input tx_Buffer_Full;
  input rx_Data_Present;
  input [3:0]S_AXI_WDATA;
  input [0:7]RX_Data;
  input RX_Buffer_Full;
  input fifo_Data_Present;
  input enable_interrupts;
  input S_AXI_RREADY;
  input S_AXI_BREADY;
  input S_AXI_ARESETN;
  input [1:0]S_AXI_ARADDR;
  input [1:0]S_AXI_AWADDR;

  wire \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[4] ;
  wire Bus_RNW_reg_reg;
  wire FIFO_Write;
  wire \FSM_onehot_state[1]_i_1_n_0 ;
  wire \FSM_onehot_state_reg_n_0_[0] ;
  wire \FSM_onehot_state_reg_n_0_[1] ;
  wire \GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg[0] ;
  wire \GEN_BKEND_CE_REGISTERS[1].ce_out_i_reg[1] ;
  wire \GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2] ;
  wire \GEN_BKEND_CE_REGISTERS[3].ce_out_i_reg[3] ;
  wire I_DECODER_n_24;
  wire I_DECODER_n_25;
  wire I_DECODER_n_26;
  wire I_DECODER_n_3;
  wire I_DECODER_n_4;
  wire I_DECODER_n_5;
  wire RX_Buffer_Full;
  wire [0:7]RX_Data;
  wire S_AXI_ACLK;
  wire [1:0]S_AXI_ARADDR;
  wire S_AXI_ARESETN;
  wire S_AXI_ARVALID;
  wire [1:0]S_AXI_AWADDR;
  wire S_AXI_AWVALID;
  wire S_AXI_BREADY;
  wire [0:0]S_AXI_BRESP;
  wire S_AXI_BVALID;
  wire [7:0]S_AXI_RDATA;
  wire S_AXI_RREADY;
  wire [0:0]S_AXI_RRESP;
  wire S_AXI_RVALID;
  wire [3:0]S_AXI_WDATA;
  wire S_AXI_WVALID;
  wire \bus2ip_addr_i[2]_i_1_n_0 ;
  wire \bus2ip_addr_i[3]_i_1_n_0 ;
  wire \bus2ip_addr_i_reg_n_0_[2] ;
  wire \bus2ip_addr_i_reg_n_0_[3] ;
  wire [0:0]bus2ip_rdce;
  wire bus2ip_rnw_i;
  wire bus2ip_rnw_i_i_1_n_0;
  wire [0:0]bus2ip_wrce;
  wire clear_Ext_BRK;
  wire enable_interrupts;
  wire fifo_Data_Present;
  wire ip2bus_error;
  wire out;
  wire reset_RX_FIFO_i;
  wire reset_TX_FIFO_i;
  wire rst;
  wire rst_reg_0;
  wire rx_Data_Present;
  wire s_axi_bresp_i;
  wire s_axi_rresp_i;
  wire start2;
  wire start2_i_1_n_0;
  wire state1__2;
  wire tx_Buffer_Full;
  wire [7:0]uart_ip2bus_data;

  LUT6 #(
    .INIT(64'hFFFF007000700070)) 
    \FSM_onehot_state[1]_i_1 
       (.I0(S_AXI_AWVALID),
        .I1(S_AXI_WVALID),
        .I2(\FSM_onehot_state_reg_n_0_[1] ),
        .I3(S_AXI_ARVALID),
        .I4(state1__2),
        .I5(\FSM_onehot_state_reg_n_0_[0] ),
        .O(\FSM_onehot_state[1]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hF888)) 
    \FSM_onehot_state[1]_i_2 
       (.I0(S_AXI_RREADY),
        .I1(S_AXI_RVALID),
        .I2(S_AXI_BREADY),
        .I3(S_AXI_BVALID),
        .O(state1__2));
  (* FSM_ENCODED_STATES = "sm_read:1000,sm_write:0100,sm_resp:0001,sm_idle:0010" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_state_reg[0] 
       (.C(S_AXI_ACLK),
        .CE(1'b1),
        .D(I_DECODER_n_5),
        .Q(\FSM_onehot_state_reg_n_0_[0] ),
        .R(rst));
  (* FSM_ENCODED_STATES = "sm_read:1000,sm_write:0100,sm_resp:0001,sm_idle:0010" *) 
  FDSE #(
    .INIT(1'b1)) 
    \FSM_onehot_state_reg[1] 
       (.C(S_AXI_ACLK),
        .CE(1'b1),
        .D(\FSM_onehot_state[1]_i_1_n_0 ),
        .Q(\FSM_onehot_state_reg_n_0_[1] ),
        .S(rst));
  (* FSM_ENCODED_STATES = "sm_read:1000,sm_write:0100,sm_resp:0001,sm_idle:0010" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_state_reg[2] 
       (.C(S_AXI_ACLK),
        .CE(1'b1),
        .D(I_DECODER_n_4),
        .Q(s_axi_bresp_i),
        .R(rst));
  (* FSM_ENCODED_STATES = "sm_read:1000,sm_write:0100,sm_resp:0001,sm_idle:0010" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_state_reg[3] 
       (.C(S_AXI_ACLK),
        .CE(1'b1),
        .D(I_DECODER_n_3),
        .Q(s_axi_rresp_i),
        .R(rst));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_address_decoder I_DECODER
       (.\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[4] (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[4] ),
        .Bus_RNW_reg_reg_0(Bus_RNW_reg_reg),
        .D({I_DECODER_n_3,I_DECODER_n_4,I_DECODER_n_5}),
        .FIFO_Write(FIFO_Write),
        .\FSM_onehot_state_reg[2] (I_DECODER_n_25),
        .\FSM_onehot_state_reg[2]_0 (I_DECODER_n_26),
        .\FSM_onehot_state_reg[3] (I_DECODER_n_24),
        .\GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg[0]_0 (\GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg[0] ),
        .\GEN_BKEND_CE_REGISTERS[1].ce_out_i_reg[1]_0 (\GEN_BKEND_CE_REGISTERS[1].ce_out_i_reg[1] ),
        .\GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2]_0 (\GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2] ),
        .\GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2]_1 (uart_ip2bus_data),
        .\GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2]_2 (\bus2ip_addr_i_reg_n_0_[3] ),
        .\GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2]_3 (\bus2ip_addr_i_reg_n_0_[2] ),
        .\GEN_BKEND_CE_REGISTERS[3].ce_out_i_reg[3]_0 (\GEN_BKEND_CE_REGISTERS[3].ce_out_i_reg[3] ),
        .Q({s_axi_rresp_i,s_axi_bresp_i,\FSM_onehot_state_reg_n_0_[1] ,\FSM_onehot_state_reg_n_0_[0] }),
        .RX_Buffer_Full(RX_Buffer_Full),
        .RX_Data(RX_Data),
        .S_AXI_ACLK(S_AXI_ACLK),
        .S_AXI_ARESETN(S_AXI_ARESETN),
        .S_AXI_ARVALID(S_AXI_ARVALID),
        .S_AXI_AWVALID(S_AXI_AWVALID),
        .S_AXI_BREADY(S_AXI_BREADY),
        .S_AXI_BRESP(S_AXI_BRESP),
        .S_AXI_BVALID(S_AXI_BVALID),
        .S_AXI_RREADY(S_AXI_RREADY),
        .S_AXI_RVALID(S_AXI_RVALID),
        .S_AXI_WDATA(S_AXI_WDATA),
        .S_AXI_WVALID(S_AXI_WVALID),
        .bus2ip_rdce(bus2ip_rdce),
        .bus2ip_rnw_i(bus2ip_rnw_i),
        .bus2ip_wrce(bus2ip_wrce),
        .clear_Ext_BRK(clear_Ext_BRK),
        .enable_interrupts(enable_interrupts),
        .fifo_Data_Present(fifo_Data_Present),
        .ip2bus_error(ip2bus_error),
        .out(out),
        .reset_RX_FIFO_i(reset_RX_FIFO_i),
        .reset_TX_FIFO_i(reset_TX_FIFO_i),
        .rx_Data_Present(rx_Data_Present),
        .start2(start2),
        .state1__2(state1__2),
        .tx_Buffer_Full(tx_Buffer_Full));
  LUT6 #(
    .INIT(64'hBF80FFFFBF800000)) 
    \bus2ip_addr_i[2]_i_1 
       (.I0(S_AXI_ARADDR[0]),
        .I1(\FSM_onehot_state_reg_n_0_[1] ),
        .I2(S_AXI_ARVALID),
        .I3(S_AXI_AWADDR[0]),
        .I4(start2_i_1_n_0),
        .I5(\bus2ip_addr_i_reg_n_0_[2] ),
        .O(\bus2ip_addr_i[2]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hBF80FFFFBF800000)) 
    \bus2ip_addr_i[3]_i_1 
       (.I0(S_AXI_ARADDR[1]),
        .I1(\FSM_onehot_state_reg_n_0_[1] ),
        .I2(S_AXI_ARVALID),
        .I3(S_AXI_AWADDR[1]),
        .I4(start2_i_1_n_0),
        .I5(\bus2ip_addr_i_reg_n_0_[3] ),
        .O(\bus2ip_addr_i[3]_i_1_n_0 ));
  FDRE \bus2ip_addr_i_reg[2] 
       (.C(S_AXI_ACLK),
        .CE(1'b1),
        .D(\bus2ip_addr_i[2]_i_1_n_0 ),
        .Q(\bus2ip_addr_i_reg_n_0_[2] ),
        .R(rst));
  FDRE \bus2ip_addr_i_reg[3] 
       (.C(S_AXI_ACLK),
        .CE(1'b1),
        .D(\bus2ip_addr_i[3]_i_1_n_0 ),
        .Q(\bus2ip_addr_i_reg_n_0_[3] ),
        .R(rst));
  (* SOFT_HLUTNM = "soft_lutpair42" *) 
  LUT5 #(
    .INIT(32'hF7FFF000)) 
    bus2ip_rnw_i_i_1
       (.I0(S_AXI_AWVALID),
        .I1(S_AXI_WVALID),
        .I2(S_AXI_ARVALID),
        .I3(\FSM_onehot_state_reg_n_0_[1] ),
        .I4(bus2ip_rnw_i),
        .O(bus2ip_rnw_i_i_1_n_0));
  FDRE bus2ip_rnw_i_reg
       (.C(S_AXI_ACLK),
        .CE(1'b1),
        .D(bus2ip_rnw_i_i_1_n_0),
        .Q(bus2ip_rnw_i),
        .R(rst));
  FDRE rst_reg
       (.C(S_AXI_ACLK),
        .CE(1'b1),
        .D(rst_reg_0),
        .Q(rst),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \s_axi_bresp_i_reg[1] 
       (.C(S_AXI_ACLK),
        .CE(1'b1),
        .D(I_DECODER_n_26),
        .Q(S_AXI_BRESP),
        .R(rst));
  FDRE #(
    .INIT(1'b0)) 
    s_axi_bvalid_i_reg
       (.C(S_AXI_ACLK),
        .CE(1'b1),
        .D(I_DECODER_n_25),
        .Q(S_AXI_BVALID),
        .R(rst));
  FDRE #(
    .INIT(1'b0)) 
    \s_axi_rdata_i_reg[0] 
       (.C(S_AXI_ACLK),
        .CE(s_axi_rresp_i),
        .D(uart_ip2bus_data[0]),
        .Q(S_AXI_RDATA[0]),
        .R(rst));
  FDRE #(
    .INIT(1'b0)) 
    \s_axi_rdata_i_reg[1] 
       (.C(S_AXI_ACLK),
        .CE(s_axi_rresp_i),
        .D(uart_ip2bus_data[1]),
        .Q(S_AXI_RDATA[1]),
        .R(rst));
  FDRE #(
    .INIT(1'b0)) 
    \s_axi_rdata_i_reg[2] 
       (.C(S_AXI_ACLK),
        .CE(s_axi_rresp_i),
        .D(uart_ip2bus_data[2]),
        .Q(S_AXI_RDATA[2]),
        .R(rst));
  FDRE #(
    .INIT(1'b0)) 
    \s_axi_rdata_i_reg[3] 
       (.C(S_AXI_ACLK),
        .CE(s_axi_rresp_i),
        .D(uart_ip2bus_data[3]),
        .Q(S_AXI_RDATA[3]),
        .R(rst));
  FDRE #(
    .INIT(1'b0)) 
    \s_axi_rdata_i_reg[4] 
       (.C(S_AXI_ACLK),
        .CE(s_axi_rresp_i),
        .D(uart_ip2bus_data[4]),
        .Q(S_AXI_RDATA[4]),
        .R(rst));
  FDRE #(
    .INIT(1'b0)) 
    \s_axi_rdata_i_reg[5] 
       (.C(S_AXI_ACLK),
        .CE(s_axi_rresp_i),
        .D(uart_ip2bus_data[5]),
        .Q(S_AXI_RDATA[5]),
        .R(rst));
  FDRE #(
    .INIT(1'b0)) 
    \s_axi_rdata_i_reg[6] 
       (.C(S_AXI_ACLK),
        .CE(s_axi_rresp_i),
        .D(uart_ip2bus_data[6]),
        .Q(S_AXI_RDATA[6]),
        .R(rst));
  FDRE #(
    .INIT(1'b0)) 
    \s_axi_rdata_i_reg[7] 
       (.C(S_AXI_ACLK),
        .CE(s_axi_rresp_i),
        .D(uart_ip2bus_data[7]),
        .Q(S_AXI_RDATA[7]),
        .R(rst));
  FDRE #(
    .INIT(1'b0)) 
    \s_axi_rresp_i_reg[1] 
       (.C(S_AXI_ACLK),
        .CE(s_axi_rresp_i),
        .D(ip2bus_error),
        .Q(S_AXI_RRESP),
        .R(rst));
  FDRE #(
    .INIT(1'b0)) 
    s_axi_rvalid_i_reg
       (.C(S_AXI_ACLK),
        .CE(1'b1),
        .D(I_DECODER_n_24),
        .Q(S_AXI_RVALID),
        .R(rst));
  (* SOFT_HLUTNM = "soft_lutpair42" *) 
  LUT4 #(
    .INIT(16'hF800)) 
    start2_i_1
       (.I0(S_AXI_AWVALID),
        .I1(S_AXI_WVALID),
        .I2(S_AXI_ARVALID),
        .I3(\FSM_onehot_state_reg_n_0_[1] ),
        .O(start2_i_1_n_0));
  FDRE start2_reg
       (.C(S_AXI_ACLK),
        .CE(1'b1),
        .D(start2_i_1_n_0),
        .Q(start2),
        .R(rst));
endmodule

module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_upcnt_n
   (Q,
    seq_clr,
    seq_cnt_en,
    slowest_sync_clk);
  output [5:0]Q;
  input seq_clr;
  input seq_cnt_en;
  input slowest_sync_clk;

  wire [5:0]Q;
  wire clear;
  wire [5:0]q_int0;
  wire seq_clr;
  wire seq_cnt_en;
  wire slowest_sync_clk;

  LUT1 #(
    .INIT(2'h1)) 
    \q_int[0]_i_1 
       (.I0(Q[0]),
        .O(q_int0[0]));
  (* SOFT_HLUTNM = "soft_lutpair106" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \q_int[1]_i_1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(q_int0[1]));
  (* SOFT_HLUTNM = "soft_lutpair106" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \q_int[2]_i_1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(q_int0[2]));
  (* SOFT_HLUTNM = "soft_lutpair105" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \q_int[3]_i_1 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(q_int0[3]));
  (* SOFT_HLUTNM = "soft_lutpair105" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \q_int[4]_i_1 
       (.I0(Q[2]),
        .I1(Q[0]),
        .I2(Q[1]),
        .I3(Q[3]),
        .I4(Q[4]),
        .O(q_int0[4]));
  LUT1 #(
    .INIT(2'h1)) 
    \q_int[5]_i_1 
       (.I0(seq_clr),
        .O(clear));
  LUT6 #(
    .INIT(64'h7FFFFFFF80000000)) 
    \q_int[5]_i_2 
       (.I0(Q[3]),
        .I1(Q[1]),
        .I2(Q[0]),
        .I3(Q[2]),
        .I4(Q[4]),
        .I5(Q[5]),
        .O(q_int0[5]));
  FDRE #(
    .INIT(1'b1)) 
    \q_int_reg[0] 
       (.C(slowest_sync_clk),
        .CE(seq_cnt_en),
        .D(q_int0[0]),
        .Q(Q[0]),
        .R(clear));
  FDRE #(
    .INIT(1'b1)) 
    \q_int_reg[1] 
       (.C(slowest_sync_clk),
        .CE(seq_cnt_en),
        .D(q_int0[1]),
        .Q(Q[1]),
        .R(clear));
  FDRE #(
    .INIT(1'b1)) 
    \q_int_reg[2] 
       (.C(slowest_sync_clk),
        .CE(seq_cnt_en),
        .D(q_int0[2]),
        .Q(Q[2]),
        .R(clear));
  FDRE #(
    .INIT(1'b1)) 
    \q_int_reg[3] 
       (.C(slowest_sync_clk),
        .CE(seq_cnt_en),
        .D(q_int0[3]),
        .Q(Q[3]),
        .R(clear));
  FDRE #(
    .INIT(1'b1)) 
    \q_int_reg[4] 
       (.C(slowest_sync_clk),
        .CE(seq_cnt_en),
        .D(q_int0[4]),
        .Q(Q[4]),
        .R(clear));
  FDRE #(
    .INIT(1'b1)) 
    \q_int_reg[5] 
       (.C(slowest_sync_clk),
        .CE(seq_cnt_en),
        .D(q_int0[5]),
        .Q(Q[5]),
        .R(clear));
endmodule

module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_ALU
   (LO,
    \Using_FPGA.Native ,
    raw_Data_Addr,
    carry_In,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31] ,
    Unsigned_Op,
    op2_C,
    alu_Op,
    Op1_Logic,
    S,
    EX_Op2,
    EX_Op1,
    \Using_FPGA.Native_I2 ,
    \Using_FPGA.Native_I2_0 ,
    Op2,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[2] ,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[3] ,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[3]_0 ,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[4] ,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[5] ,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[6] ,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[7] ,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[8] ,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[9] ,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[10] ,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[11] ,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[12] ,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[13] ,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[14] ,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[15] ,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[16] ,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[17] ,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[18] ,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[19] ,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[20] ,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[21] ,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[22] ,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[23] ,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[24] ,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[25] ,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[26] ,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[27] ,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[28] ,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[29] ,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[30] ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5);
  output LO;
  output [29:0]\Using_FPGA.Native ;
  output [1:0]raw_Data_Addr;
  input carry_In;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31] ;
  input Unsigned_Op;
  input [27:0]op2_C;
  input [0:1]alu_Op;
  input Op1_Logic;
  input S;
  input EX_Op2;
  input EX_Op1;
  input \Using_FPGA.Native_I2 ;
  input \Using_FPGA.Native_I2_0 ;
  input Op2;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[2] ;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[3] ;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[3]_0 ;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[4] ;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[5] ;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[6] ;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[7] ;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[8] ;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[9] ;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[10] ;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[11] ;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[12] ;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[13] ;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[14] ;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[15] ;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[16] ;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[17] ;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[18] ;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[19] ;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[20] ;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[21] ;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[22] ;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[23] ;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[24] ;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[25] ;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[26] ;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[27] ;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[28] ;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[29] ;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[30] ;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[10] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[11] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[12] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[13] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[14] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[15] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[16] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[17] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[18] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[19] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[20] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[21] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[22] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[23] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[24] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[25] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[26] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[27] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[28] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[29] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[2] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[30] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[3] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[3]_0 ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[4] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[5] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[6] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[7] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[8] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[9] ;
  wire EX_Op1;
  wire EX_Op2;
  wire LO;
  wire Op1_Logic;
  wire Op2;
  wire S;
  wire Unsigned_Op;
  wire [29:0]\Using_FPGA.Native ;
  wire \Using_FPGA.Native_I2 ;
  wire \Using_FPGA.Native_I2_0 ;
  wire [0:1]alu_Op;
  wire alu_carry_1;
  wire alu_carry_10;
  wire alu_carry_11;
  wire alu_carry_12;
  wire alu_carry_13;
  wire alu_carry_14;
  wire alu_carry_15;
  wire alu_carry_16;
  wire alu_carry_17;
  wire alu_carry_18;
  wire alu_carry_19;
  wire alu_carry_2;
  wire alu_carry_20;
  wire alu_carry_21;
  wire alu_carry_22;
  wire alu_carry_23;
  wire alu_carry_24;
  wire alu_carry_25;
  wire alu_carry_26;
  wire alu_carry_27;
  wire alu_carry_28;
  wire alu_carry_29;
  wire alu_carry_3;
  wire alu_carry_30;
  wire alu_carry_31;
  wire alu_carry_4;
  wire alu_carry_5;
  wire alu_carry_6;
  wire alu_carry_7;
  wire alu_carry_8;
  wire alu_carry_9;
  wire alu_carry_in;
  wire carry_In;
  wire control_carry;
  wire \^lopt ;
  wire \^lopt_1 ;
  wire lopt_10;
  wire lopt_100;
  wire lopt_101;
  wire lopt_11;
  wire lopt_12;
  wire lopt_13;
  wire lopt_14;
  wire lopt_15;
  wire lopt_16;
  wire lopt_17;
  wire lopt_18;
  wire lopt_19;
  wire \^lopt_2 ;
  wire lopt_20;
  wire lopt_21;
  wire lopt_22;
  wire lopt_23;
  wire lopt_24;
  wire lopt_25;
  wire lopt_26;
  wire lopt_27;
  wire lopt_28;
  wire lopt_29;
  wire \^lopt_3 ;
  wire lopt_30;
  wire lopt_31;
  wire lopt_32;
  wire lopt_33;
  wire lopt_34;
  wire lopt_35;
  wire lopt_36;
  wire lopt_37;
  wire lopt_38;
  wire lopt_39;
  wire \^lopt_4 ;
  wire lopt_40;
  wire lopt_41;
  wire lopt_42;
  wire lopt_43;
  wire lopt_44;
  wire lopt_45;
  wire lopt_46;
  wire lopt_47;
  wire lopt_48;
  wire lopt_49;
  wire \^lopt_5 ;
  wire lopt_50;
  wire lopt_51;
  wire lopt_52;
  wire lopt_53;
  wire lopt_54;
  wire lopt_55;
  wire lopt_56;
  wire lopt_57;
  wire lopt_58;
  wire lopt_59;
  wire lopt_6;
  wire lopt_60;
  wire lopt_61;
  wire lopt_62;
  wire lopt_63;
  wire lopt_64;
  wire lopt_65;
  wire lopt_66;
  wire lopt_67;
  wire lopt_68;
  wire lopt_69;
  wire lopt_7;
  wire lopt_70;
  wire lopt_71;
  wire lopt_72;
  wire lopt_73;
  wire lopt_74;
  wire lopt_75;
  wire lopt_76;
  wire lopt_77;
  wire lopt_78;
  wire lopt_79;
  wire lopt_8;
  wire lopt_80;
  wire lopt_81;
  wire lopt_82;
  wire lopt_83;
  wire lopt_84;
  wire lopt_85;
  wire lopt_86;
  wire lopt_87;
  wire lopt_88;
  wire lopt_89;
  wire lopt_9;
  wire lopt_90;
  wire lopt_91;
  wire lopt_92;
  wire lopt_93;
  wire lopt_94;
  wire lopt_95;
  wire lopt_96;
  wire lopt_97;
  wire lopt_98;
  wire lopt_99;
  wire [27:0]op2_C;
  wire [1:0]raw_Data_Addr;

  assign lopt = lopt_96;
  assign lopt_100 = lopt_4;
  assign lopt_101 = lopt_5;
  assign lopt_3 = lopt_99;
  assign lopt_97 = lopt_1;
  assign lopt_98 = lopt_2;
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_727 \No_Carry_Decoding.CarryIn_MUXCY 
       (.CI(alu_carry_in),
        .carry_In(carry_In),
        .control_carry(control_carry),
        .lopt(\^lopt ),
        .lopt_1(\^lopt_1 ),
        .lopt_10(lopt_10),
        .lopt_11(lopt_11),
        .lopt_2(\^lopt_2 ),
        .lopt_3(\^lopt_3 ),
        .lopt_4(\^lopt_4 ),
        .lopt_5(\^lopt_5 ),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8),
        .lopt_9(lopt_9));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_LUT3__parameterized3 \No_Carry_Decoding.alu_carry_select_LUT 
       (.carry_In(carry_In),
        .control_carry(control_carry));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_ALU_Bit__parameterized2 \Using_FPGA.ALL_Bits[0].ALU_Bit_I1 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31] ),
        .LO(alu_carry_31),
        .Op1_Logic(Op1_Logic),
        .S(S),
        .Unsigned_Op(Unsigned_Op),
        .\Using_FPGA.Native (LO),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native [29]),
        .alu_Op(alu_Op),
        .lopt(lopt_96),
        .lopt_1(lopt_97),
        .lopt_2(lopt_98),
        .lopt_3(lopt_99),
        .lopt_4(lopt_100),
        .lopt_5(lopt_101),
        .op2_C(op2_C[27]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_ALU_Bit \Using_FPGA.ALL_Bits[10].ALU_Bit_I1 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[21] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[21] ),
        .EX_CarryOut(alu_carry_22),
        .LO(alu_carry_21),
        .\Using_FPGA.Native (\Using_FPGA.Native [19]),
        .alu_Op(alu_Op),
        .lopt(lopt_63),
        .lopt_1(lopt_64),
        .lopt_2(lopt_65),
        .lopt_3(lopt_70),
        .op2_C(op2_C[17]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_ALU_Bit_728 \Using_FPGA.ALL_Bits[11].ALU_Bit_I1 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[20] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[20] ),
        .EX_CarryOut(alu_carry_21),
        .LO(alu_carry_20),
        .\Using_FPGA.Native (\Using_FPGA.Native [18]),
        .alu_Op(alu_Op),
        .lopt(lopt_60),
        .lopt_1(lopt_61),
        .lopt_2(lopt_62),
        .lopt_3(lopt_69),
        .op2_C(op2_C[16]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_ALU_Bit_729 \Using_FPGA.ALL_Bits[12].ALU_Bit_I1 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[19] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[19] ),
        .EX_CarryOut(alu_carry_20),
        .LO(alu_carry_19),
        .\Using_FPGA.Native (\Using_FPGA.Native [17]),
        .alu_Op(alu_Op),
        .lopt(lopt_60),
        .lopt_1(lopt_61),
        .lopt_10(lopt_70),
        .lopt_11(lopt_71),
        .lopt_2(lopt_62),
        .lopt_3(lopt_63),
        .lopt_4(lopt_64),
        .lopt_5(lopt_65),
        .lopt_6(lopt_66),
        .lopt_7(lopt_67),
        .lopt_8(lopt_68),
        .lopt_9(lopt_69),
        .op2_C(op2_C[15]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_ALU_Bit_730 \Using_FPGA.ALL_Bits[13].ALU_Bit_I1 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[18] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[18] ),
        .EX_CarryOut(alu_carry_19),
        .LO(alu_carry_18),
        .\Using_FPGA.Native (\Using_FPGA.Native [16]),
        .alu_Op(alu_Op),
        .lopt(lopt_54),
        .lopt_1(lopt_55),
        .lopt_2(lopt_56),
        .lopt_3(lopt_59),
        .op2_C(op2_C[14]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_ALU_Bit_731 \Using_FPGA.ALL_Bits[14].ALU_Bit_I1 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[17] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[17] ),
        .EX_CarryOut(alu_carry_18),
        .LO(alu_carry_17),
        .\Using_FPGA.Native (\Using_FPGA.Native [15]),
        .alu_Op(alu_Op),
        .lopt(lopt_51),
        .lopt_1(lopt_52),
        .lopt_2(lopt_53),
        .lopt_3(lopt_58),
        .op2_C(op2_C[13]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_ALU_Bit_732 \Using_FPGA.ALL_Bits[15].ALU_Bit_I1 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[16] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[16] ),
        .EX_CarryOut(alu_carry_17),
        .LO(alu_carry_16),
        .\Using_FPGA.Native (\Using_FPGA.Native [14]),
        .alu_Op(alu_Op),
        .lopt(lopt_48),
        .lopt_1(lopt_49),
        .lopt_2(lopt_50),
        .lopt_3(lopt_57),
        .op2_C(op2_C[12]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_ALU_Bit_733 \Using_FPGA.ALL_Bits[16].ALU_Bit_I1 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[15] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[15] ),
        .EX_CarryOut(alu_carry_16),
        .LO(alu_carry_15),
        .\Using_FPGA.Native (\Using_FPGA.Native [13]),
        .alu_Op(alu_Op),
        .lopt(lopt_48),
        .lopt_1(lopt_49),
        .lopt_10(lopt_58),
        .lopt_11(lopt_59),
        .lopt_2(lopt_50),
        .lopt_3(lopt_51),
        .lopt_4(lopt_52),
        .lopt_5(lopt_53),
        .lopt_6(lopt_54),
        .lopt_7(lopt_55),
        .lopt_8(lopt_56),
        .lopt_9(lopt_57),
        .op2_C(op2_C[11]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_ALU_Bit_734 \Using_FPGA.ALL_Bits[17].ALU_Bit_I1 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[14] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[14] ),
        .EX_CarryOut(alu_carry_15),
        .LO(alu_carry_14),
        .\Using_FPGA.Native (\Using_FPGA.Native [12]),
        .alu_Op(alu_Op),
        .lopt(lopt_42),
        .lopt_1(lopt_43),
        .lopt_2(lopt_44),
        .lopt_3(lopt_47),
        .op2_C(op2_C[10]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_ALU_Bit_735 \Using_FPGA.ALL_Bits[18].ALU_Bit_I1 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[13] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[13] ),
        .EX_CarryOut(alu_carry_14),
        .LO(alu_carry_13),
        .\Using_FPGA.Native (\Using_FPGA.Native [11]),
        .alu_Op(alu_Op),
        .lopt(lopt_39),
        .lopt_1(lopt_40),
        .lopt_2(lopt_41),
        .lopt_3(lopt_46),
        .op2_C(op2_C[9]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_ALU_Bit_736 \Using_FPGA.ALL_Bits[19].ALU_Bit_I1 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[12] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[12] ),
        .EX_CarryOut(alu_carry_13),
        .LO(alu_carry_12),
        .\Using_FPGA.Native (\Using_FPGA.Native [10]),
        .alu_Op(alu_Op),
        .lopt(lopt_36),
        .lopt_1(lopt_37),
        .lopt_2(lopt_38),
        .lopt_3(lopt_45),
        .op2_C(op2_C[8]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_ALU_Bit_737 \Using_FPGA.ALL_Bits[1].ALU_Bit_I1 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[30] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[30] ),
        .EX_CarryOut(alu_carry_31),
        .LO(alu_carry_30),
        .\Using_FPGA.Native (\Using_FPGA.Native [28]),
        .alu_Op(alu_Op),
        .lopt(lopt_90),
        .lopt_1(lopt_91),
        .lopt_2(lopt_92),
        .lopt_3(lopt_95),
        .op2_C(op2_C[26]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_ALU_Bit_738 \Using_FPGA.ALL_Bits[20].ALU_Bit_I1 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[11] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[11] ),
        .EX_CarryOut(alu_carry_12),
        .LO(alu_carry_11),
        .\Using_FPGA.Native (\Using_FPGA.Native [9]),
        .alu_Op(alu_Op),
        .lopt(lopt_36),
        .lopt_1(lopt_37),
        .lopt_10(lopt_46),
        .lopt_11(lopt_47),
        .lopt_2(lopt_38),
        .lopt_3(lopt_39),
        .lopt_4(lopt_40),
        .lopt_5(lopt_41),
        .lopt_6(lopt_42),
        .lopt_7(lopt_43),
        .lopt_8(lopt_44),
        .lopt_9(lopt_45),
        .op2_C(op2_C[7]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_ALU_Bit_739 \Using_FPGA.ALL_Bits[21].ALU_Bit_I1 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[10] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[10] ),
        .EX_CarryOut(alu_carry_11),
        .LO(alu_carry_10),
        .\Using_FPGA.Native (\Using_FPGA.Native [8]),
        .alu_Op(alu_Op),
        .lopt(lopt_30),
        .lopt_1(lopt_31),
        .lopt_2(lopt_32),
        .lopt_3(lopt_35),
        .op2_C(op2_C[6]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_ALU_Bit_740 \Using_FPGA.ALL_Bits[22].ALU_Bit_I1 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[9] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[9] ),
        .EX_CarryOut(alu_carry_10),
        .LO(alu_carry_9),
        .\Using_FPGA.Native (\Using_FPGA.Native [7]),
        .alu_Op(alu_Op),
        .lopt(lopt_27),
        .lopt_1(lopt_28),
        .lopt_2(lopt_29),
        .lopt_3(lopt_34),
        .op2_C(op2_C[5]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_ALU_Bit_741 \Using_FPGA.ALL_Bits[23].ALU_Bit_I1 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[8] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[8] ),
        .EX_CarryOut(alu_carry_9),
        .LO(alu_carry_8),
        .\Using_FPGA.Native (\Using_FPGA.Native [6]),
        .alu_Op(alu_Op),
        .lopt(lopt_24),
        .lopt_1(lopt_25),
        .lopt_2(lopt_26),
        .lopt_3(lopt_33),
        .op2_C(op2_C[4]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_ALU_Bit_742 \Using_FPGA.ALL_Bits[24].ALU_Bit_I1 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[7] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[7] ),
        .EX_CarryOut(alu_carry_8),
        .LO(alu_carry_7),
        .\Using_FPGA.Native (\Using_FPGA.Native [5]),
        .alu_Op(alu_Op),
        .lopt(lopt_24),
        .lopt_1(lopt_25),
        .lopt_10(lopt_34),
        .lopt_11(lopt_35),
        .lopt_2(lopt_26),
        .lopt_3(lopt_27),
        .lopt_4(lopt_28),
        .lopt_5(lopt_29),
        .lopt_6(lopt_30),
        .lopt_7(lopt_31),
        .lopt_8(lopt_32),
        .lopt_9(lopt_33),
        .op2_C(op2_C[3]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_ALU_Bit_743 \Using_FPGA.ALL_Bits[25].ALU_Bit_I1 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[6] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[6] ),
        .EX_CarryOut(alu_carry_7),
        .LO(alu_carry_6),
        .\Using_FPGA.Native (\Using_FPGA.Native [4]),
        .alu_Op(alu_Op),
        .lopt(lopt_18),
        .lopt_1(lopt_19),
        .lopt_2(lopt_20),
        .lopt_3(lopt_23),
        .op2_C(op2_C[2]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_ALU_Bit_744 \Using_FPGA.ALL_Bits[26].ALU_Bit_I1 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[5] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[5] ),
        .EX_CarryOut(alu_carry_6),
        .LO(alu_carry_5),
        .\Using_FPGA.Native (\Using_FPGA.Native [3]),
        .alu_Op(alu_Op),
        .lopt(lopt_15),
        .lopt_1(lopt_16),
        .lopt_2(lopt_17),
        .lopt_3(lopt_22),
        .op2_C(op2_C[1]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_ALU_Bit_745 \Using_FPGA.ALL_Bits[27].ALU_Bit_I1 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[4] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[4] ),
        .EX_CarryOut(alu_carry_5),
        .LO(alu_carry_4),
        .\Using_FPGA.Native (\Using_FPGA.Native [2]),
        .alu_Op(alu_Op),
        .lopt(lopt_12),
        .lopt_1(lopt_13),
        .lopt_2(lopt_14),
        .lopt_3(lopt_21),
        .op2_C(op2_C[0]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_ALU_Bit_746 \Using_FPGA.ALL_Bits[28].ALU_Bit_I1 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[3] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[3] ),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[3]_0 (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[3]_0 ),
        .EX_CarryOut(alu_carry_4),
        .LO(alu_carry_3),
        .\Using_FPGA.Native (\Using_FPGA.Native [1]),
        .alu_Op(alu_Op),
        .lopt(lopt_12),
        .lopt_1(lopt_13),
        .lopt_10(lopt_22),
        .lopt_11(lopt_23),
        .lopt_2(lopt_14),
        .lopt_3(lopt_15),
        .lopt_4(lopt_16),
        .lopt_5(lopt_17),
        .lopt_6(lopt_18),
        .lopt_7(lopt_19),
        .lopt_8(lopt_20),
        .lopt_9(lopt_21));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_ALU_Bit_747 \Using_FPGA.ALL_Bits[29].ALU_Bit_I1 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[2] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[2] ),
        .EX_CarryOut(alu_carry_3),
        .LO(alu_carry_2),
        .Op2(Op2),
        .\Using_FPGA.Native (\Using_FPGA.Native [0]),
        .alu_Op(alu_Op),
        .lopt(lopt_6),
        .lopt_1(lopt_7),
        .lopt_2(lopt_8),
        .lopt_3(lopt_11));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_ALU_Bit_748 \Using_FPGA.ALL_Bits[2].ALU_Bit_I1 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[29] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[29] ),
        .EX_CarryOut(alu_carry_30),
        .LO(alu_carry_29),
        .\Using_FPGA.Native (\Using_FPGA.Native [27]),
        .alu_Op(alu_Op),
        .lopt(lopt_87),
        .lopt_1(lopt_88),
        .lopt_2(lopt_89),
        .lopt_3(lopt_94),
        .op2_C(op2_C[25]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_ALU_Bit_749 \Using_FPGA.ALL_Bits[30].ALU_Bit_I1 
       (.EX_CarryOut(alu_carry_2),
        .LO(alu_carry_1),
        .\Using_FPGA.Native_I2 (\Using_FPGA.Native_I2 ),
        .\Using_FPGA.Native_I2_0 (\Using_FPGA.Native_I2_0 ),
        .alu_Op(alu_Op),
        .lopt(\^lopt_3 ),
        .lopt_1(\^lopt_4 ),
        .lopt_2(\^lopt_5 ),
        .lopt_3(lopt_10),
        .raw_Data_Addr(raw_Data_Addr[1]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_ALU_Bit_750 \Using_FPGA.ALL_Bits[31].ALU_Bit_I1 
       (.EX_CarryIn(alu_carry_in),
        .EX_CarryOut(alu_carry_1),
        .EX_Op1(EX_Op1),
        .EX_Op2(EX_Op2),
        .alu_Op(alu_Op),
        .lopt(\^lopt ),
        .lopt_1(\^lopt_1 ),
        .lopt_2(\^lopt_2 ),
        .lopt_3(lopt_9),
        .raw_Data_Addr(raw_Data_Addr[0]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_ALU_Bit_751 \Using_FPGA.ALL_Bits[3].ALU_Bit_I1 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[28] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[28] ),
        .EX_CarryOut(alu_carry_29),
        .LO(alu_carry_28),
        .\Using_FPGA.Native (\Using_FPGA.Native [26]),
        .alu_Op(alu_Op),
        .lopt(lopt_84),
        .lopt_1(lopt_85),
        .lopt_2(lopt_86),
        .lopt_3(lopt_93),
        .op2_C(op2_C[24]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_ALU_Bit_752 \Using_FPGA.ALL_Bits[4].ALU_Bit_I1 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[27] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[27] ),
        .EX_CarryOut(alu_carry_28),
        .LO(alu_carry_27),
        .\Using_FPGA.Native (\Using_FPGA.Native [25]),
        .alu_Op(alu_Op),
        .lopt(lopt_84),
        .lopt_1(lopt_85),
        .lopt_10(lopt_94),
        .lopt_11(lopt_95),
        .lopt_2(lopt_86),
        .lopt_3(lopt_87),
        .lopt_4(lopt_88),
        .lopt_5(lopt_89),
        .lopt_6(lopt_90),
        .lopt_7(lopt_91),
        .lopt_8(lopt_92),
        .lopt_9(lopt_93),
        .op2_C(op2_C[23]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_ALU_Bit_753 \Using_FPGA.ALL_Bits[5].ALU_Bit_I1 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[26] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[26] ),
        .EX_CarryOut(alu_carry_27),
        .LO(alu_carry_26),
        .\Using_FPGA.Native (\Using_FPGA.Native [24]),
        .alu_Op(alu_Op),
        .lopt(lopt_78),
        .lopt_1(lopt_79),
        .lopt_2(lopt_80),
        .lopt_3(lopt_83),
        .op2_C(op2_C[22]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_ALU_Bit_754 \Using_FPGA.ALL_Bits[6].ALU_Bit_I1 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[25] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[25] ),
        .EX_CarryOut(alu_carry_26),
        .LO(alu_carry_25),
        .\Using_FPGA.Native (\Using_FPGA.Native [23]),
        .alu_Op(alu_Op),
        .lopt(lopt_75),
        .lopt_1(lopt_76),
        .lopt_2(lopt_77),
        .lopt_3(lopt_82),
        .op2_C(op2_C[21]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_ALU_Bit_755 \Using_FPGA.ALL_Bits[7].ALU_Bit_I1 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[24] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[24] ),
        .EX_CarryOut(alu_carry_25),
        .LO(alu_carry_24),
        .\Using_FPGA.Native (\Using_FPGA.Native [22]),
        .alu_Op(alu_Op),
        .lopt(lopt_72),
        .lopt_1(lopt_73),
        .lopt_2(lopt_74),
        .lopt_3(lopt_81),
        .op2_C(op2_C[20]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_ALU_Bit_756 \Using_FPGA.ALL_Bits[8].ALU_Bit_I1 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[23] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[23] ),
        .EX_CarryOut(alu_carry_24),
        .LO(alu_carry_23),
        .\Using_FPGA.Native (\Using_FPGA.Native [21]),
        .alu_Op(alu_Op),
        .lopt(lopt_72),
        .lopt_1(lopt_73),
        .lopt_10(lopt_82),
        .lopt_11(lopt_83),
        .lopt_2(lopt_74),
        .lopt_3(lopt_75),
        .lopt_4(lopt_76),
        .lopt_5(lopt_77),
        .lopt_6(lopt_78),
        .lopt_7(lopt_79),
        .lopt_8(lopt_80),
        .lopt_9(lopt_81),
        .op2_C(op2_C[19]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_ALU_Bit_757 \Using_FPGA.ALL_Bits[9].ALU_Bit_I1 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[22] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[22] ),
        .EX_CarryIn(alu_carry_22),
        .EX_CarryOut(alu_carry_23),
        .\Using_FPGA.Native (\Using_FPGA.Native [20]),
        .alu_Op(alu_Op),
        .lopt(lopt_66),
        .lopt_1(lopt_67),
        .lopt_2(lopt_68),
        .lopt_3(lopt_71),
        .op2_C(op2_C[18]));
endmodule

module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_ALU_Bit
   (EX_CarryOut,
    \Using_FPGA.Native ,
    op2_C,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[21] ,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]op2_C;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[21] ;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[21] ;
  wire EX_CarryOut;
  wire LO;
  wire [0:0]\Using_FPGA.Native ;
  wire alu_AddSub;
  wire [0:1]alu_Op;
  wire lopt;
  wire \^lopt_1 ;
  wire [0:0]op2_C;
  wire op2_is_1;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized2_817 \Not_Last_Bit.I_ALU_LUT_V5 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[21] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[21] ),
        .DI(op2_is_1),
        .S(alu_AddSub),
        .alu_Op(alu_Op),
        .op2_C(op2_C));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_XORCY_818 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(op2_is_1),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_ALU_Bit_728
   (EX_CarryOut,
    \Using_FPGA.Native ,
    op2_C,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[20] ,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]op2_C;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[20] ;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[20] ;
  wire EX_CarryOut;
  wire LO;
  wire [0:0]\Using_FPGA.Native ;
  wire alu_AddSub;
  wire [0:1]alu_Op;
  wire lopt;
  wire \^lopt_1 ;
  wire [0:0]op2_C;
  wire op2_is_1;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized2_815 \Not_Last_Bit.I_ALU_LUT_V5 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[20] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[20] ),
        .DI(op2_is_1),
        .S(alu_AddSub),
        .alu_Op(alu_Op),
        .op2_C(op2_C));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_XORCY_816 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(op2_is_1),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_ALU_Bit_729
   (EX_CarryOut,
    \Using_FPGA.Native ,
    op2_C,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[19] ,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]op2_C;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[19] ;
  input LO;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  output lopt_10;
  output lopt_11;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[19] ;
  wire EX_CarryOut;
  wire LO;
  wire [0:0]\Using_FPGA.Native ;
  wire alu_AddSub;
  wire [0:1]alu_Op;
  wire lopt;
  wire lopt_1;
  wire lopt_10;
  wire lopt_11;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire lopt_9;
  wire [0:0]op2_C;
  wire op2_is_1;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized2_813 \Not_Last_Bit.I_ALU_LUT_V5 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[19] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[19] ),
        .DI(op2_is_1),
        .S(alu_AddSub),
        .alu_Op(alu_Op),
        .op2_C(op2_C));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_XORCY_814 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(op2_is_1),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_10(lopt_10),
        .lopt_11(lopt_11),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8),
        .lopt_9(lopt_9));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_ALU_Bit_730
   (EX_CarryOut,
    \Using_FPGA.Native ,
    op2_C,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[18] ,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]op2_C;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[18] ;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[18] ;
  wire EX_CarryOut;
  wire LO;
  wire [0:0]\Using_FPGA.Native ;
  wire alu_AddSub;
  wire [0:1]alu_Op;
  wire lopt;
  wire \^lopt_1 ;
  wire [0:0]op2_C;
  wire op2_is_1;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized2_811 \Not_Last_Bit.I_ALU_LUT_V5 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[18] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[18] ),
        .DI(op2_is_1),
        .S(alu_AddSub),
        .alu_Op(alu_Op),
        .op2_C(op2_C));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_XORCY_812 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(op2_is_1),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_ALU_Bit_731
   (EX_CarryOut,
    \Using_FPGA.Native ,
    op2_C,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[17] ,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]op2_C;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[17] ;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[17] ;
  wire EX_CarryOut;
  wire LO;
  wire [0:0]\Using_FPGA.Native ;
  wire alu_AddSub;
  wire [0:1]alu_Op;
  wire lopt;
  wire \^lopt_1 ;
  wire [0:0]op2_C;
  wire op2_is_1;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized2_809 \Not_Last_Bit.I_ALU_LUT_V5 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[17] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[17] ),
        .DI(op2_is_1),
        .S(alu_AddSub),
        .alu_Op(alu_Op),
        .op2_C(op2_C));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_XORCY_810 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(op2_is_1),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_ALU_Bit_732
   (EX_CarryOut,
    \Using_FPGA.Native ,
    op2_C,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[16] ,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]op2_C;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[16] ;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[16] ;
  wire EX_CarryOut;
  wire LO;
  wire [0:0]\Using_FPGA.Native ;
  wire alu_AddSub;
  wire [0:1]alu_Op;
  wire lopt;
  wire \^lopt_1 ;
  wire [0:0]op2_C;
  wire op2_is_1;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized2_807 \Not_Last_Bit.I_ALU_LUT_V5 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[16] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[16] ),
        .DI(op2_is_1),
        .S(alu_AddSub),
        .alu_Op(alu_Op),
        .op2_C(op2_C));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_XORCY_808 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(op2_is_1),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_ALU_Bit_733
   (EX_CarryOut,
    \Using_FPGA.Native ,
    op2_C,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[15] ,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]op2_C;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[15] ;
  input LO;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  output lopt_10;
  output lopt_11;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[15] ;
  wire EX_CarryOut;
  wire LO;
  wire [0:0]\Using_FPGA.Native ;
  wire alu_AddSub;
  wire [0:1]alu_Op;
  wire lopt;
  wire lopt_1;
  wire lopt_10;
  wire lopt_11;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire lopt_9;
  wire [0:0]op2_C;
  wire op2_is_1;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized2_805 \Not_Last_Bit.I_ALU_LUT_V5 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[15] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[15] ),
        .DI(op2_is_1),
        .S(alu_AddSub),
        .alu_Op(alu_Op),
        .op2_C(op2_C));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_XORCY_806 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(op2_is_1),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_10(lopt_10),
        .lopt_11(lopt_11),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8),
        .lopt_9(lopt_9));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_ALU_Bit_734
   (EX_CarryOut,
    \Using_FPGA.Native ,
    op2_C,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[14] ,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]op2_C;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[14] ;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[14] ;
  wire EX_CarryOut;
  wire LO;
  wire [0:0]\Using_FPGA.Native ;
  wire alu_AddSub;
  wire [0:1]alu_Op;
  wire lopt;
  wire \^lopt_1 ;
  wire [0:0]op2_C;
  wire op2_is_1;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized2_803 \Not_Last_Bit.I_ALU_LUT_V5 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[14] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[14] ),
        .DI(op2_is_1),
        .S(alu_AddSub),
        .alu_Op(alu_Op),
        .op2_C(op2_C));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_XORCY_804 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(op2_is_1),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_ALU_Bit_735
   (EX_CarryOut,
    \Using_FPGA.Native ,
    op2_C,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[13] ,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]op2_C;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[13] ;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[13] ;
  wire EX_CarryOut;
  wire LO;
  wire [0:0]\Using_FPGA.Native ;
  wire alu_AddSub;
  wire [0:1]alu_Op;
  wire lopt;
  wire \^lopt_1 ;
  wire [0:0]op2_C;
  wire op2_is_1;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized2_801 \Not_Last_Bit.I_ALU_LUT_V5 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[13] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[13] ),
        .DI(op2_is_1),
        .S(alu_AddSub),
        .alu_Op(alu_Op),
        .op2_C(op2_C));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_XORCY_802 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(op2_is_1),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_ALU_Bit_736
   (EX_CarryOut,
    \Using_FPGA.Native ,
    op2_C,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[12] ,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]op2_C;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[12] ;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[12] ;
  wire EX_CarryOut;
  wire LO;
  wire [0:0]\Using_FPGA.Native ;
  wire alu_AddSub;
  wire [0:1]alu_Op;
  wire lopt;
  wire \^lopt_1 ;
  wire [0:0]op2_C;
  wire op2_is_1;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized2_799 \Not_Last_Bit.I_ALU_LUT_V5 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[12] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[12] ),
        .DI(op2_is_1),
        .S(alu_AddSub),
        .alu_Op(alu_Op),
        .op2_C(op2_C));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_XORCY_800 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(op2_is_1),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_ALU_Bit_737
   (EX_CarryOut,
    \Using_FPGA.Native ,
    op2_C,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[30] ,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]op2_C;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[30] ;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[30] ;
  wire EX_CarryOut;
  wire LO;
  wire [0:0]\Using_FPGA.Native ;
  wire alu_AddSub;
  wire [0:1]alu_Op;
  wire lopt;
  wire \^lopt_1 ;
  wire [0:0]op2_C;
  wire op2_is_1;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized2_797 \Not_Last_Bit.I_ALU_LUT_V5 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[30] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[30] ),
        .DI(op2_is_1),
        .S(alu_AddSub),
        .alu_Op(alu_Op),
        .op2_C(op2_C));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_XORCY_798 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(op2_is_1),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_ALU_Bit_738
   (EX_CarryOut,
    \Using_FPGA.Native ,
    op2_C,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[11] ,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]op2_C;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[11] ;
  input LO;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  output lopt_10;
  output lopt_11;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[11] ;
  wire EX_CarryOut;
  wire LO;
  wire [0:0]\Using_FPGA.Native ;
  wire alu_AddSub;
  wire [0:1]alu_Op;
  wire lopt;
  wire lopt_1;
  wire lopt_10;
  wire lopt_11;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire lopt_9;
  wire [0:0]op2_C;
  wire op2_is_1;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized2_795 \Not_Last_Bit.I_ALU_LUT_V5 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[11] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[11] ),
        .DI(op2_is_1),
        .S(alu_AddSub),
        .alu_Op(alu_Op),
        .op2_C(op2_C));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_XORCY_796 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(op2_is_1),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_10(lopt_10),
        .lopt_11(lopt_11),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8),
        .lopt_9(lopt_9));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_ALU_Bit_739
   (EX_CarryOut,
    \Using_FPGA.Native ,
    op2_C,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[10] ,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]op2_C;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[10] ;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[10] ;
  wire EX_CarryOut;
  wire LO;
  wire [0:0]\Using_FPGA.Native ;
  wire alu_AddSub;
  wire [0:1]alu_Op;
  wire lopt;
  wire \^lopt_1 ;
  wire [0:0]op2_C;
  wire op2_is_1;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized2_793 \Not_Last_Bit.I_ALU_LUT_V5 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[10] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[10] ),
        .DI(op2_is_1),
        .S(alu_AddSub),
        .alu_Op(alu_Op),
        .op2_C(op2_C));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_XORCY_794 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(op2_is_1),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_ALU_Bit_740
   (EX_CarryOut,
    \Using_FPGA.Native ,
    op2_C,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[9] ,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]op2_C;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[9] ;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[9] ;
  wire EX_CarryOut;
  wire LO;
  wire [0:0]\Using_FPGA.Native ;
  wire alu_AddSub;
  wire [0:1]alu_Op;
  wire lopt;
  wire \^lopt_1 ;
  wire [0:0]op2_C;
  wire op2_is_1;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized2_791 \Not_Last_Bit.I_ALU_LUT_V5 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[9] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[9] ),
        .DI(op2_is_1),
        .S(alu_AddSub),
        .alu_Op(alu_Op),
        .op2_C(op2_C));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_XORCY_792 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(op2_is_1),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_ALU_Bit_741
   (EX_CarryOut,
    \Using_FPGA.Native ,
    op2_C,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[8] ,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]op2_C;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[8] ;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[8] ;
  wire EX_CarryOut;
  wire LO;
  wire [0:0]\Using_FPGA.Native ;
  wire alu_AddSub;
  wire [0:1]alu_Op;
  wire lopt;
  wire \^lopt_1 ;
  wire [0:0]op2_C;
  wire op2_is_1;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized2_789 \Not_Last_Bit.I_ALU_LUT_V5 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[8] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[8] ),
        .DI(op2_is_1),
        .S(alu_AddSub),
        .alu_Op(alu_Op),
        .op2_C(op2_C));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_XORCY_790 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(op2_is_1),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_ALU_Bit_742
   (EX_CarryOut,
    \Using_FPGA.Native ,
    op2_C,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[7] ,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]op2_C;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[7] ;
  input LO;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  output lopt_10;
  output lopt_11;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[7] ;
  wire EX_CarryOut;
  wire LO;
  wire [0:0]\Using_FPGA.Native ;
  wire alu_AddSub;
  wire [0:1]alu_Op;
  wire lopt;
  wire lopt_1;
  wire lopt_10;
  wire lopt_11;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire lopt_9;
  wire [0:0]op2_C;
  wire op2_is_1;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized2_787 \Not_Last_Bit.I_ALU_LUT_V5 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[7] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[7] ),
        .DI(op2_is_1),
        .S(alu_AddSub),
        .alu_Op(alu_Op),
        .op2_C(op2_C));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_XORCY_788 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(op2_is_1),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_10(lopt_10),
        .lopt_11(lopt_11),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8),
        .lopt_9(lopt_9));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_ALU_Bit_743
   (EX_CarryOut,
    \Using_FPGA.Native ,
    op2_C,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[6] ,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]op2_C;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[6] ;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[6] ;
  wire EX_CarryOut;
  wire LO;
  wire [0:0]\Using_FPGA.Native ;
  wire alu_AddSub;
  wire [0:1]alu_Op;
  wire lopt;
  wire \^lopt_1 ;
  wire [0:0]op2_C;
  wire op2_is_1;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized2_785 \Not_Last_Bit.I_ALU_LUT_V5 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[6] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[6] ),
        .DI(op2_is_1),
        .S(alu_AddSub),
        .alu_Op(alu_Op),
        .op2_C(op2_C));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_XORCY_786 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(op2_is_1),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_ALU_Bit_744
   (EX_CarryOut,
    \Using_FPGA.Native ,
    op2_C,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[5] ,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]op2_C;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[5] ;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[5] ;
  wire EX_CarryOut;
  wire LO;
  wire [0:0]\Using_FPGA.Native ;
  wire alu_AddSub;
  wire [0:1]alu_Op;
  wire lopt;
  wire \^lopt_1 ;
  wire [0:0]op2_C;
  wire op2_is_1;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized2_783 \Not_Last_Bit.I_ALU_LUT_V5 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[5] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[5] ),
        .DI(op2_is_1),
        .S(alu_AddSub),
        .alu_Op(alu_Op),
        .op2_C(op2_C));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_XORCY_784 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(op2_is_1),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_ALU_Bit_745
   (EX_CarryOut,
    \Using_FPGA.Native ,
    op2_C,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[4] ,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]op2_C;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[4] ;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[4] ;
  wire EX_CarryOut;
  wire LO;
  wire [0:0]\Using_FPGA.Native ;
  wire alu_AddSub;
  wire [0:1]alu_Op;
  wire lopt;
  wire \^lopt_1 ;
  wire [0:0]op2_C;
  wire op2_is_1;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized2_781 \Not_Last_Bit.I_ALU_LUT_V5 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[4] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[4] ),
        .DI(op2_is_1),
        .S(alu_AddSub),
        .alu_Op(alu_Op),
        .op2_C(op2_C));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_XORCY_782 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(op2_is_1),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_ALU_Bit_746
   (EX_CarryOut,
    \Using_FPGA.Native ,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[3] ,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[3]_0 ,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[3] ;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[3]_0 ;
  input LO;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  output lopt_10;
  output lopt_11;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[3] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[3]_0 ;
  wire EX_CarryOut;
  wire LO;
  wire [0:0]\Using_FPGA.Native ;
  wire alu_AddSub;
  wire [0:1]alu_Op;
  wire lopt;
  wire lopt_1;
  wire lopt_10;
  wire lopt_11;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire lopt_9;
  wire op2_is_1;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized2_779 \Not_Last_Bit.I_ALU_LUT_V5 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[3] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[3] ),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[3]_0 (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[3]_0 ),
        .DI(op2_is_1),
        .S(alu_AddSub),
        .alu_Op(alu_Op));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_XORCY_780 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(op2_is_1),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_10(lopt_10),
        .lopt_11(lopt_11),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8),
        .lopt_9(lopt_9));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_ALU_Bit_747
   (EX_CarryOut,
    \Using_FPGA.Native ,
    Op2,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[2] ,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input Op2;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[2] ;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[2] ;
  wire EX_CarryOut;
  wire LO;
  wire Op2;
  wire [0:0]\Using_FPGA.Native ;
  wire alu_AddSub;
  wire [0:1]alu_Op;
  wire lopt;
  wire \^lopt_1 ;
  wire op2_is_1;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized2_777 \Not_Last_Bit.I_ALU_LUT_V5 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[2] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[2] ),
        .DI(op2_is_1),
        .Op2(Op2),
        .S(alu_AddSub),
        .alu_Op(alu_Op));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_XORCY_778 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(op2_is_1),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_ALU_Bit_748
   (EX_CarryOut,
    \Using_FPGA.Native ,
    op2_C,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[29] ,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]op2_C;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[29] ;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[29] ;
  wire EX_CarryOut;
  wire LO;
  wire [0:0]\Using_FPGA.Native ;
  wire alu_AddSub;
  wire [0:1]alu_Op;
  wire lopt;
  wire \^lopt_1 ;
  wire [0:0]op2_C;
  wire op2_is_1;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized2_775 \Not_Last_Bit.I_ALU_LUT_V5 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[29] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[29] ),
        .DI(op2_is_1),
        .S(alu_AddSub),
        .alu_Op(alu_Op),
        .op2_C(op2_C));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_XORCY_776 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(op2_is_1),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_ALU_Bit_749
   (EX_CarryOut,
    raw_Data_Addr,
    \Using_FPGA.Native_I2 ,
    alu_Op,
    \Using_FPGA.Native_I2_0 ,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]raw_Data_Addr;
  input \Using_FPGA.Native_I2 ;
  input [0:1]alu_Op;
  input \Using_FPGA.Native_I2_0 ;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire EX_CarryOut;
  wire LO;
  wire \Using_FPGA.Native_I2 ;
  wire \Using_FPGA.Native_I2_0 ;
  wire alu_AddSub;
  wire [0:1]alu_Op;
  wire lopt;
  wire \^lopt_1 ;
  wire op2_is_1;
  wire [0:0]raw_Data_Addr;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized2_773 \Not_Last_Bit.I_ALU_LUT_V5 
       (.DI(op2_is_1),
        .S(alu_AddSub),
        .\Using_FPGA.Native_I2 (\Using_FPGA.Native_I2 ),
        .\Using_FPGA.Native_I2_0 (\Using_FPGA.Native_I2_0 ),
        .alu_Op(alu_Op));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_XORCY_774 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(op2_is_1),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ),
        .raw_Data_Addr(raw_Data_Addr));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_ALU_Bit_750
   (EX_CarryOut,
    raw_Data_Addr,
    EX_Op2,
    alu_Op,
    EX_Op1,
    EX_CarryIn,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]raw_Data_Addr;
  input EX_Op2;
  input [0:1]alu_Op;
  input EX_Op1;
  input EX_CarryIn;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire EX_CarryIn;
  wire EX_CarryOut;
  wire EX_Op1;
  wire EX_Op2;
  wire alu_AddSub;
  wire [0:1]alu_Op;
  wire lopt;
  wire \^lopt_1 ;
  wire op2_is_1;
  wire [0:0]raw_Data_Addr;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized2_771 \Not_Last_Bit.I_ALU_LUT_V5 
       (.DI(op2_is_1),
        .EX_Op1(EX_Op1),
        .EX_Op2(EX_Op2),
        .S(alu_AddSub),
        .alu_Op(alu_Op));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_XORCY_772 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(op2_is_1),
        .EX_CarryIn(EX_CarryIn),
        .EX_CarryOut(EX_CarryOut),
        .S(alu_AddSub),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ),
        .raw_Data_Addr(raw_Data_Addr));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_ALU_Bit_751
   (EX_CarryOut,
    \Using_FPGA.Native ,
    op2_C,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[28] ,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]op2_C;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[28] ;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[28] ;
  wire EX_CarryOut;
  wire LO;
  wire [0:0]\Using_FPGA.Native ;
  wire alu_AddSub;
  wire [0:1]alu_Op;
  wire lopt;
  wire \^lopt_1 ;
  wire [0:0]op2_C;
  wire op2_is_1;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized2_769 \Not_Last_Bit.I_ALU_LUT_V5 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[28] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[28] ),
        .DI(op2_is_1),
        .S(alu_AddSub),
        .alu_Op(alu_Op),
        .op2_C(op2_C));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_XORCY_770 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(op2_is_1),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_ALU_Bit_752
   (EX_CarryOut,
    \Using_FPGA.Native ,
    op2_C,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[27] ,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]op2_C;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[27] ;
  input LO;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  output lopt_10;
  output lopt_11;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[27] ;
  wire EX_CarryOut;
  wire LO;
  wire [0:0]\Using_FPGA.Native ;
  wire alu_AddSub;
  wire [0:1]alu_Op;
  wire lopt;
  wire lopt_1;
  wire lopt_10;
  wire lopt_11;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire lopt_9;
  wire [0:0]op2_C;
  wire op2_is_1;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized2_767 \Not_Last_Bit.I_ALU_LUT_V5 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[27] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[27] ),
        .DI(op2_is_1),
        .S(alu_AddSub),
        .alu_Op(alu_Op),
        .op2_C(op2_C));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_XORCY_768 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(op2_is_1),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_10(lopt_10),
        .lopt_11(lopt_11),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8),
        .lopt_9(lopt_9));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_ALU_Bit_753
   (EX_CarryOut,
    \Using_FPGA.Native ,
    op2_C,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[26] ,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]op2_C;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[26] ;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[26] ;
  wire EX_CarryOut;
  wire LO;
  wire [0:0]\Using_FPGA.Native ;
  wire alu_AddSub;
  wire [0:1]alu_Op;
  wire lopt;
  wire \^lopt_1 ;
  wire [0:0]op2_C;
  wire op2_is_1;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized2_765 \Not_Last_Bit.I_ALU_LUT_V5 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[26] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[26] ),
        .DI(op2_is_1),
        .S(alu_AddSub),
        .alu_Op(alu_Op),
        .op2_C(op2_C));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_XORCY_766 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(op2_is_1),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_ALU_Bit_754
   (EX_CarryOut,
    \Using_FPGA.Native ,
    op2_C,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[25] ,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]op2_C;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[25] ;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[25] ;
  wire EX_CarryOut;
  wire LO;
  wire [0:0]\Using_FPGA.Native ;
  wire alu_AddSub;
  wire [0:1]alu_Op;
  wire lopt;
  wire \^lopt_1 ;
  wire [0:0]op2_C;
  wire op2_is_1;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized2_763 \Not_Last_Bit.I_ALU_LUT_V5 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[25] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[25] ),
        .DI(op2_is_1),
        .S(alu_AddSub),
        .alu_Op(alu_Op),
        .op2_C(op2_C));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_XORCY_764 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(op2_is_1),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_ALU_Bit_755
   (EX_CarryOut,
    \Using_FPGA.Native ,
    op2_C,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[24] ,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]op2_C;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[24] ;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[24] ;
  wire EX_CarryOut;
  wire LO;
  wire [0:0]\Using_FPGA.Native ;
  wire alu_AddSub;
  wire [0:1]alu_Op;
  wire lopt;
  wire \^lopt_1 ;
  wire [0:0]op2_C;
  wire op2_is_1;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized2_761 \Not_Last_Bit.I_ALU_LUT_V5 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[24] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[24] ),
        .DI(op2_is_1),
        .S(alu_AddSub),
        .alu_Op(alu_Op),
        .op2_C(op2_C));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_XORCY_762 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(op2_is_1),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_ALU_Bit_756
   (EX_CarryOut,
    \Using_FPGA.Native ,
    op2_C,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[23] ,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]op2_C;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[23] ;
  input LO;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  output lopt_10;
  output lopt_11;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[23] ;
  wire EX_CarryOut;
  wire LO;
  wire [0:0]\Using_FPGA.Native ;
  wire alu_AddSub;
  wire [0:1]alu_Op;
  wire lopt;
  wire lopt_1;
  wire lopt_10;
  wire lopt_11;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire lopt_9;
  wire [0:0]op2_C;
  wire op2_is_1;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized2_759 \Not_Last_Bit.I_ALU_LUT_V5 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[23] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[23] ),
        .DI(op2_is_1),
        .S(alu_AddSub),
        .alu_Op(alu_Op),
        .op2_C(op2_C));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_XORCY_760 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(op2_is_1),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_10(lopt_10),
        .lopt_11(lopt_11),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8),
        .lopt_9(lopt_9));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_ALU_Bit_757
   (EX_CarryOut,
    \Using_FPGA.Native ,
    op2_C,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[22] ,
    EX_CarryIn,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]op2_C;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[22] ;
  input EX_CarryIn;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[22] ;
  wire EX_CarryIn;
  wire EX_CarryOut;
  wire [0:0]\Using_FPGA.Native ;
  wire alu_AddSub;
  wire [0:1]alu_Op;
  wire lopt;
  wire \^lopt_1 ;
  wire [0:0]op2_C;
  wire op2_is_1;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized2 \Not_Last_Bit.I_ALU_LUT_V5 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[22] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[22] ),
        .DI(op2_is_1),
        .S(alu_AddSub),
        .alu_Op(alu_Op),
        .op2_C(op2_C));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_XORCY_758 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(op2_is_1),
        .EX_CarryIn(EX_CarryIn),
        .EX_CarryOut(EX_CarryOut),
        .S(alu_AddSub),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_ALU_Bit__parameterized2
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31] ,
    Unsigned_Op,
    LO,
    op2_C,
    alu_Op,
    Op1_Logic,
    S,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5);
  output \Using_FPGA.Native ;
  output [0:0]\Using_FPGA.Native_0 ;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31] ;
  input Unsigned_Op;
  input LO;
  input [0:0]op2_C;
  input [0:1]alu_Op;
  input Op1_Logic;
  input S;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31] ;
  wire LO;
  wire Op1_Logic;
  wire S;
  wire Unsigned_Op;
  wire \Using_FPGA.Native ;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire alu_AddSub;
  wire alu_AddSub_1;
  wire [0:1]alu_Op;
  wire invert_result;
  wire \^lopt ;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire lopt_6;
  wire lopt_7;
  wire [0:0]op2_C;
  wire op2_is_1;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = lopt_5;
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized13 \Last_Bit.I_ALU_LUT_2 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31] (S),
        .S(alu_AddSub),
        .alu_AddSub_1(alu_AddSub_1),
        .alu_Op(alu_Op[0]),
        .op2_C(op2_C));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_LUT6 \Last_Bit.I_ALU_LUT_V5 
       (.Op1_Logic(Op1_Logic),
        .alu_AddSub_1(alu_AddSub_1),
        .alu_Op(alu_Op),
        .op2_C(op2_C));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MULT_AND_819 \Last_Bit.MULT_AND_I 
       (.DI(op2_is_1),
        .alu_Op(alu_Op[0]),
        .op2_C(op2_C));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_XORCY_820 \Last_Bit.MUXCY_XOR_I 
       (.CI(invert_result),
        .DI(op2_is_1),
        .S(alu_AddSub),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .lopt(\^lopt ),
        .lopt_1(lopt_7));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_821 \Last_Bit.Pre_MUXCY_I 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31] ),
        .CI(invert_result),
        .LO(LO),
        .Unsigned_Op(Unsigned_Op),
        .lopt(\^lopt ),
        .lopt_1(op2_is_1),
        .lopt_2(alu_AddSub),
        .lopt_3(\^lopt_1 ),
        .lopt_4(\^lopt_2 ),
        .lopt_5(\^lopt_3 ),
        .lopt_6(\^lopt_4 ),
        .lopt_7(\^lopt_5 ),
        .lopt_8(lopt_6),
        .lopt_9(lopt_7));
endmodule

module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Byte_Doublet_Handle
   (D,
    O,
    extend_Data_Read,
    EX_Op2,
    Op1_Low,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[0] ,
    isbyte,
    isdoublet,
    \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] ,
    \Using_FPGA.Native ,
    DReady,
    Q,
    Data_Read);
  output [29:0]D;
  output O;
  output [7:0]extend_Data_Read;
  input EX_Op2;
  input [1:0]Op1_Low;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[0] ;
  input isbyte;
  input isdoublet;
  input [0:31]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] ;
  input [7:0]\Using_FPGA.Native ;
  input DReady;
  input [15:0]Q;
  input [15:0]Data_Read;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[0] ;
  wire [0:31]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] ;
  wire [29:0]D;
  wire DReady;
  wire [15:0]Data_Read;
  wire EX_Op2;
  wire O;
  wire [1:0]Op1_Low;
  wire [15:0]Q;
  wire \Use_Dynamic_Bus_Sizing.Not_Using_Reverse_Mem_Instr_No_Long.READ_SEL_RIGHT_I_n_0 ;
  wire [7:0]\Using_FPGA.Native ;
  wire byte_selects_0;
  wire byte_selects_1;
  wire [7:0]extend_Data_Read;
  wire isbyte;
  wire isdoublet;
  wire low_addr_i_0;
  wire low_addr_i_1;
  wire [1:0]sel_Write_Mux_MSB;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized8 \Not_Using_Long.BYTE_0_1_I 
       (.D(D[1:0]),
        .byte_selects_0(byte_selects_0),
        .byte_selects_1(byte_selects_1),
        .isbyte(isbyte),
        .isdoublet(isdoublet));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized10 \Not_Using_Long.BYTE_2_3_I 
       (.D(D[3:2]),
        .byte_selects_0(byte_selects_0),
        .byte_selects_1(byte_selects_1),
        .isbyte(isbyte),
        .isdoublet(isdoublet));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized12 \Not_Using_Long.LOW_ADDR_OUT_LUT6 
       (.D(D[29:28]),
        .isbyte(isbyte),
        .isdoublet(isdoublet),
        .low_addr_i_0(low_addr_i_0),
        .low_addr_i_1(low_addr_i_1));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized6 \Not_Using_Long.byte_selects_i_INST 
       (.\Add_Output_DFFs.M_AXI_DP_WSTRB_i_reg[2] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[0] ),
        .EX_Op2(EX_Op2),
        .Op1_Low(Op1_Low),
        .byte_selects_0(byte_selects_0),
        .byte_selects_1(byte_selects_1));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized4 \Not_Using_Long.low_addr_i_INST 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[0] (\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[0] ),
        .EX_Op2(EX_Op2),
        .Op1_Low(Op1_Low),
        .low_addr_i_0(low_addr_i_0),
        .low_addr_i_1(low_addr_i_1));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_mux4_8 \Use_Dynamic_Bus_Sizing.Not_Using_Reverse_Mem_Instr_No_Long.EXT_DATA_WRITE_MUX_MSB_I 
       (.\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] ),
        .D(D[27:12]),
        .sel_Write_Mux_MSB(sel_Write_Mux_MSB));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized16_822 \Use_Dynamic_Bus_Sizing.Not_Using_Reverse_Mem_Instr_No_Long.GEN4_LOOP[0].BYTESTEER_LUT6 
       (.\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[15] ({\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [16],\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [20],\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [24],\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [28]}),
        .D({D[11],D[7]}),
        .isbyte(isbyte));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized16_823 \Use_Dynamic_Bus_Sizing.Not_Using_Reverse_Mem_Instr_No_Long.GEN4_LOOP[1].BYTESTEER_LUT6 
       (.\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[14] ({\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [17],\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [21],\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [25],\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [29]}),
        .D({D[10],D[6]}),
        .isbyte(isbyte));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized16_824 \Use_Dynamic_Bus_Sizing.Not_Using_Reverse_Mem_Instr_No_Long.GEN4_LOOP[2].BYTESTEER_LUT6 
       (.\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[13] ({\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [18],\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [22],\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [26],\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [30]}),
        .D({D[9],D[5]}),
        .isbyte(isbyte));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized16_825 \Use_Dynamic_Bus_Sizing.Not_Using_Reverse_Mem_Instr_No_Long.GEN4_LOOP[3].BYTESTEER_LUT6 
       (.\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[12] ({\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [19],\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [23],\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [27],\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [31]}),
        .D({D[8],D[4]}),
        .isbyte(isbyte));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_LUT3__parameterized4 \Use_Dynamic_Bus_Sizing.Not_Using_Reverse_Mem_Instr_No_Long.READ_SEL_LEFT_I 
       (.DReady(DReady),
        .Data_Read(Data_Read),
        .Q(Q),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Use_Dynamic_Bus_Sizing.Not_Using_Reverse_Mem_Instr_No_Long.READ_SEL_RIGHT_I_n_0 ),
        .byte_i_reg(O),
        .byte_selects_1(byte_selects_1),
        .extend_Data_Read(extend_Data_Read),
        .isbyte(isbyte),
        .isdoublet(isdoublet));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT2 \Use_Dynamic_Bus_Sizing.Not_Using_Reverse_Mem_Instr_No_Long.READ_SEL_RIGHT_I 
       (.byte_i_reg(\Use_Dynamic_Bus_Sizing.Not_Using_Reverse_Mem_Instr_No_Long.READ_SEL_RIGHT_I_n_0 ),
        .byte_selects_0(byte_selects_0),
        .isbyte(isbyte));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized14 \Use_Dynamic_Bus_Sizing.Not_Using_Reverse_Mem_Instr_No_Long.WRITE_MSB_SEL_I 
       (.isbyte(isbyte),
        .isdoublet(isdoublet),
        .sel_Write_Mux_MSB(sel_Write_Mux_MSB));
endmodule

module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_DAXI_interface
   (MEM_DAXI_Data_Strobe,
    D,
    DReady0_out,
    mem_access_completed_reg_0,
    extend_Data_Read,
    Q,
    Data_Read0_out,
    sync_reset,
    Clk,
    DReady,
    M_AXI_DP_RVALID,
    M_AXI_DP_BVALID,
    active_access_reg_0,
    M_AXI_DP_WVALID_i_reg_0,
    M_AXI_DP_WREADY,
    M_AXI_DP_AWREADY,
    M_AXI_DP_ARREADY,
    DWait,
    mem_access,
    Data_Read,
    O,
    M_AXI_DP_RDATA,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 );
  output MEM_DAXI_Data_Strobe;
  output [70:0]D;
  output DReady0_out;
  output mem_access_completed_reg_0;
  output [7:0]extend_Data_Read;
  output [15:0]Q;
  output [15:0]Data_Read0_out;
  input sync_reset;
  input Clk;
  input DReady;
  input M_AXI_DP_RVALID;
  input M_AXI_DP_BVALID;
  input active_access_reg_0;
  input [0:0]M_AXI_DP_WVALID_i_reg_0;
  input M_AXI_DP_WREADY;
  input M_AXI_DP_AWREADY;
  input M_AXI_DP_ARREADY;
  input DWait;
  input mem_access;
  input [23:0]Data_Read;
  input O;
  input [31:0]M_AXI_DP_RDATA;
  input [67:0]\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 ;

  wire [67:0]\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 ;
  wire Clk;
  wire [70:0]D;
  wire DReady;
  wire DReady0_out;
  wire DWait;
  wire [23:0]Data_Read;
  wire [15:0]Data_Read0_out;
  wire MEM_DAXI_Data_Strobe;
  wire M_AXI_DP_ARREADY;
  wire M_AXI_DP_ARVALID_i_i_1_n_0;
  wire M_AXI_DP_AWADDR0;
  wire M_AXI_DP_AWREADY;
  wire M_AXI_DP_AWVALID_i_i_1_n_0;
  wire M_AXI_DP_BVALID;
  wire [31:0]M_AXI_DP_RDATA;
  wire M_AXI_DP_RVALID;
  wire M_AXI_DP_WREADY;
  wire M_AXI_DP_WVALID_i_i_1_n_0;
  wire [0:0]M_AXI_DP_WVALID_i_reg_0;
  wire O;
  wire [15:0]Q;
  wire [0:23]WB_DAXI_Read_Data;
  wire active_access;
  wire active_access_d1;
  wire active_access_i_1_n_0;
  wire active_access_reg_0;
  wire [7:0]extend_Data_Read;
  wire mem_access;
  wire mem_access_completed0;
  wire mem_access_completed_reg_0;
  wire sync_reset;

  LUT4 #(
    .INIT(16'h0004)) 
    \Add_Output_DFFs.M_AXI_DP_AWADDR[31]_i_1 
       (.I0(DWait),
        .I1(mem_access),
        .I2(DReady),
        .I3(active_access_d1),
        .O(M_AXI_DP_AWADDR0));
  FDRE \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[0] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [36]),
        .Q(D[39]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[10] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [46]),
        .Q(D[49]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[11] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [47]),
        .Q(D[50]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[12] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [48]),
        .Q(D[51]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[13] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [49]),
        .Q(D[52]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[14] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [50]),
        .Q(D[53]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[15] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [51]),
        .Q(D[54]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[16] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [52]),
        .Q(D[55]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[17] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [53]),
        .Q(D[56]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[18] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [54]),
        .Q(D[57]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[19] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [55]),
        .Q(D[58]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[1] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [37]),
        .Q(D[40]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[20] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [56]),
        .Q(D[59]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[21] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [57]),
        .Q(D[60]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[22] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [58]),
        .Q(D[61]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[23] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [59]),
        .Q(D[62]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[24] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [60]),
        .Q(D[63]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[25] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [61]),
        .Q(D[64]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[26] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [62]),
        .Q(D[65]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[27] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [63]),
        .Q(D[66]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[28] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [64]),
        .Q(D[67]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[29] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [65]),
        .Q(D[68]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[2] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [38]),
        .Q(D[41]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[30] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [66]),
        .Q(D[69]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [67]),
        .Q(D[70]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[3] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [39]),
        .Q(D[42]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[4] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [40]),
        .Q(D[43]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[5] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [41]),
        .Q(D[44]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[6] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [42]),
        .Q(D[45]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[7] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [43]),
        .Q(D[46]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[8] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [44]),
        .Q(D[47]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[9] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [45]),
        .Q(D[48]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [4]),
        .Q(D[6]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[10] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [14]),
        .Q(D[16]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[11] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [15]),
        .Q(D[17]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[12] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [16]),
        .Q(D[18]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[13] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [17]),
        .Q(D[19]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[14] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [18]),
        .Q(D[20]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[15] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [19]),
        .Q(D[21]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[16] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [20]),
        .Q(D[22]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[17] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [21]),
        .Q(D[23]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[18] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [22]),
        .Q(D[24]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[19] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [23]),
        .Q(D[25]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[1] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [5]),
        .Q(D[7]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[20] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [24]),
        .Q(D[26]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[21] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [25]),
        .Q(D[27]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[22] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [26]),
        .Q(D[28]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [27]),
        .Q(D[29]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[24] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [28]),
        .Q(D[30]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[25] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [29]),
        .Q(D[31]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[26] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [30]),
        .Q(D[32]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[27] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [31]),
        .Q(D[33]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[28] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [32]),
        .Q(D[34]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[29] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [33]),
        .Q(D[35]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[2] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [6]),
        .Q(D[8]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[30] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [34]),
        .Q(D[36]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[31] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [35]),
        .Q(D[37]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[3] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [7]),
        .Q(D[9]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[4] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [8]),
        .Q(D[10]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[5] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [9]),
        .Q(D[11]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[6] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [10]),
        .Q(D[12]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[7] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [11]),
        .Q(D[13]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[8] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [12]),
        .Q(D[14]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[9] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [13]),
        .Q(D[15]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_WSTRB_i_reg[0] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [0]),
        .Q(D[2]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_WSTRB_i_reg[1] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [1]),
        .Q(D[3]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_WSTRB_i_reg[2] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [2]),
        .Q(D[4]),
        .R(sync_reset));
  FDRE \Add_Output_DFFs.M_AXI_DP_WSTRB_i_reg[3] 
       (.C(Clk),
        .CE(M_AXI_DP_AWADDR0),
        .D(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 [3]),
        .Q(D[5]),
        .R(sync_reset));
  LUT5 #(
    .INIT(32'h00551010)) 
    M_AXI_DP_ARVALID_i_i_1
       (.I0(sync_reset),
        .I1(M_AXI_DP_WVALID_i_reg_0),
        .I2(M_AXI_DP_AWADDR0),
        .I3(M_AXI_DP_ARREADY),
        .I4(D[0]),
        .O(M_AXI_DP_ARVALID_i_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    M_AXI_DP_ARVALID_i_reg
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_ARVALID_i_i_1_n_0),
        .Q(D[0]),
        .R(1'b0));
  LUT5 #(
    .INIT(32'h00554040)) 
    M_AXI_DP_AWVALID_i_i_1
       (.I0(sync_reset),
        .I1(M_AXI_DP_AWADDR0),
        .I2(M_AXI_DP_WVALID_i_reg_0),
        .I3(M_AXI_DP_AWREADY),
        .I4(D[38]),
        .O(M_AXI_DP_AWVALID_i_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    M_AXI_DP_AWVALID_i_reg
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_AWVALID_i_i_1_n_0),
        .Q(D[38]),
        .R(1'b0));
  LUT5 #(
    .INIT(32'h00554040)) 
    M_AXI_DP_WVALID_i_i_1
       (.I0(sync_reset),
        .I1(M_AXI_DP_AWADDR0),
        .I2(M_AXI_DP_WVALID_i_reg_0),
        .I3(M_AXI_DP_WREADY),
        .I4(D[1]),
        .O(M_AXI_DP_WVALID_i_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    M_AXI_DP_WVALID_i_reg
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WVALID_i_i_1_n_0),
        .Q(D[1]),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair100" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__100 
       (.I0(Data_Read[14]),
        .I1(DReady),
        .I2(Q[14]),
        .O(Data_Read0_out[6]));
  (* SOFT_HLUTNM = "soft_lutpair101" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__101 
       (.I0(Data_Read[13]),
        .I1(DReady),
        .I2(Q[13]),
        .O(Data_Read0_out[5]));
  (* SOFT_HLUTNM = "soft_lutpair101" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__102 
       (.I0(Data_Read[12]),
        .I1(DReady),
        .I2(Q[12]),
        .O(Data_Read0_out[4]));
  (* SOFT_HLUTNM = "soft_lutpair102" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__103 
       (.I0(Data_Read[11]),
        .I1(DReady),
        .I2(Q[11]),
        .O(Data_Read0_out[3]));
  (* SOFT_HLUTNM = "soft_lutpair102" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__104 
       (.I0(Data_Read[10]),
        .I1(DReady),
        .I2(Q[10]),
        .O(Data_Read0_out[2]));
  (* SOFT_HLUTNM = "soft_lutpair103" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__105 
       (.I0(Data_Read[9]),
        .I1(DReady),
        .I2(Q[9]),
        .O(Data_Read0_out[1]));
  LUT2 #(
    .INIT(4'hE)) 
    \Using_FPGA.Native_i_1__55 
       (.I0(DReady),
        .I1(MEM_DAXI_Data_Strobe),
        .O(DReady0_out));
  LUT6 #(
    .INIT(64'hFF00CCCCF0F0AAAA)) 
    \Using_FPGA.Native_i_1__77 
       (.I0(WB_DAXI_Read_Data[0]),
        .I1(Data_Read[23]),
        .I2(WB_DAXI_Read_Data[16]),
        .I3(Data_Read[7]),
        .I4(O),
        .I5(DReady),
        .O(extend_Data_Read[7]));
  (* SOFT_HLUTNM = "soft_lutpair96" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__78 
       (.I0(Data_Read[23]),
        .I1(DReady),
        .I2(WB_DAXI_Read_Data[0]),
        .O(Data_Read0_out[15]));
  LUT6 #(
    .INIT(64'hFF00CCCCF0F0AAAA)) 
    \Using_FPGA.Native_i_1__80 
       (.I0(WB_DAXI_Read_Data[1]),
        .I1(Data_Read[22]),
        .I2(WB_DAXI_Read_Data[17]),
        .I3(Data_Read[6]),
        .I4(O),
        .I5(DReady),
        .O(extend_Data_Read[6]));
  (* SOFT_HLUTNM = "soft_lutpair97" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__81 
       (.I0(Data_Read[22]),
        .I1(DReady),
        .I2(WB_DAXI_Read_Data[1]),
        .O(Data_Read0_out[14]));
  LUT6 #(
    .INIT(64'hFF00CCCCF0F0AAAA)) 
    \Using_FPGA.Native_i_1__83 
       (.I0(WB_DAXI_Read_Data[2]),
        .I1(Data_Read[21]),
        .I2(WB_DAXI_Read_Data[18]),
        .I3(Data_Read[5]),
        .I4(O),
        .I5(DReady),
        .O(extend_Data_Read[5]));
  (* SOFT_HLUTNM = "soft_lutpair98" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__84 
       (.I0(Data_Read[21]),
        .I1(DReady),
        .I2(WB_DAXI_Read_Data[2]),
        .O(Data_Read0_out[13]));
  LUT6 #(
    .INIT(64'hFF00CCCCF0F0AAAA)) 
    \Using_FPGA.Native_i_1__86 
       (.I0(WB_DAXI_Read_Data[3]),
        .I1(Data_Read[20]),
        .I2(WB_DAXI_Read_Data[19]),
        .I3(Data_Read[4]),
        .I4(O),
        .I5(DReady),
        .O(extend_Data_Read[4]));
  (* SOFT_HLUTNM = "soft_lutpair96" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__87 
       (.I0(Data_Read[20]),
        .I1(DReady),
        .I2(WB_DAXI_Read_Data[3]),
        .O(Data_Read0_out[12]));
  LUT6 #(
    .INIT(64'hFF00CCCCF0F0AAAA)) 
    \Using_FPGA.Native_i_1__89 
       (.I0(WB_DAXI_Read_Data[4]),
        .I1(Data_Read[19]),
        .I2(WB_DAXI_Read_Data[20]),
        .I3(Data_Read[3]),
        .I4(O),
        .I5(DReady),
        .O(extend_Data_Read[3]));
  (* SOFT_HLUTNM = "soft_lutpair98" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__90 
       (.I0(Data_Read[19]),
        .I1(DReady),
        .I2(WB_DAXI_Read_Data[4]),
        .O(Data_Read0_out[11]));
  LUT6 #(
    .INIT(64'hFF00CCCCF0F0AAAA)) 
    \Using_FPGA.Native_i_1__92 
       (.I0(WB_DAXI_Read_Data[5]),
        .I1(Data_Read[18]),
        .I2(WB_DAXI_Read_Data[21]),
        .I3(Data_Read[2]),
        .I4(O),
        .I5(DReady),
        .O(extend_Data_Read[2]));
  (* SOFT_HLUTNM = "soft_lutpair99" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__93 
       (.I0(Data_Read[18]),
        .I1(DReady),
        .I2(WB_DAXI_Read_Data[5]),
        .O(Data_Read0_out[10]));
  LUT6 #(
    .INIT(64'hFF00CCCCF0F0AAAA)) 
    \Using_FPGA.Native_i_1__95 
       (.I0(WB_DAXI_Read_Data[6]),
        .I1(Data_Read[17]),
        .I2(WB_DAXI_Read_Data[22]),
        .I3(Data_Read[1]),
        .I4(O),
        .I5(DReady),
        .O(extend_Data_Read[1]));
  (* SOFT_HLUTNM = "soft_lutpair97" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__96 
       (.I0(Data_Read[17]),
        .I1(DReady),
        .I2(WB_DAXI_Read_Data[6]),
        .O(Data_Read0_out[9]));
  (* SOFT_HLUTNM = "soft_lutpair100" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__98 
       (.I0(Data_Read[16]),
        .I1(DReady),
        .I2(WB_DAXI_Read_Data[7]),
        .O(Data_Read0_out[8]));
  (* SOFT_HLUTNM = "soft_lutpair99" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__99 
       (.I0(Data_Read[15]),
        .I1(DReady),
        .I2(Q[15]),
        .O(Data_Read0_out[7]));
  LUT6 #(
    .INIT(64'hFF00CCCCF0F0AAAA)) 
    \Using_FPGA.Native_i_2__38 
       (.I0(WB_DAXI_Read_Data[7]),
        .I1(Data_Read[16]),
        .I2(WB_DAXI_Read_Data[23]),
        .I3(Data_Read[0]),
        .I4(O),
        .I5(DReady),
        .O(extend_Data_Read[0]));
  (* SOFT_HLUTNM = "soft_lutpair103" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_2__47 
       (.I0(Data_Read[8]),
        .I1(DReady),
        .I2(Q[8]),
        .O(Data_Read0_out[0]));
  FDRE \WB_DAXI_Read_Data_reg[0] 
       (.C(Clk),
        .CE(M_AXI_DP_RVALID),
        .D(M_AXI_DP_RDATA[31]),
        .Q(WB_DAXI_Read_Data[0]),
        .R(sync_reset));
  FDRE \WB_DAXI_Read_Data_reg[10] 
       (.C(Clk),
        .CE(M_AXI_DP_RVALID),
        .D(M_AXI_DP_RDATA[21]),
        .Q(Q[13]),
        .R(sync_reset));
  FDRE \WB_DAXI_Read_Data_reg[11] 
       (.C(Clk),
        .CE(M_AXI_DP_RVALID),
        .D(M_AXI_DP_RDATA[20]),
        .Q(Q[12]),
        .R(sync_reset));
  FDRE \WB_DAXI_Read_Data_reg[12] 
       (.C(Clk),
        .CE(M_AXI_DP_RVALID),
        .D(M_AXI_DP_RDATA[19]),
        .Q(Q[11]),
        .R(sync_reset));
  FDRE \WB_DAXI_Read_Data_reg[13] 
       (.C(Clk),
        .CE(M_AXI_DP_RVALID),
        .D(M_AXI_DP_RDATA[18]),
        .Q(Q[10]),
        .R(sync_reset));
  FDRE \WB_DAXI_Read_Data_reg[14] 
       (.C(Clk),
        .CE(M_AXI_DP_RVALID),
        .D(M_AXI_DP_RDATA[17]),
        .Q(Q[9]),
        .R(sync_reset));
  FDRE \WB_DAXI_Read_Data_reg[15] 
       (.C(Clk),
        .CE(M_AXI_DP_RVALID),
        .D(M_AXI_DP_RDATA[16]),
        .Q(Q[8]),
        .R(sync_reset));
  FDRE \WB_DAXI_Read_Data_reg[16] 
       (.C(Clk),
        .CE(M_AXI_DP_RVALID),
        .D(M_AXI_DP_RDATA[15]),
        .Q(WB_DAXI_Read_Data[16]),
        .R(sync_reset));
  FDRE \WB_DAXI_Read_Data_reg[17] 
       (.C(Clk),
        .CE(M_AXI_DP_RVALID),
        .D(M_AXI_DP_RDATA[14]),
        .Q(WB_DAXI_Read_Data[17]),
        .R(sync_reset));
  FDRE \WB_DAXI_Read_Data_reg[18] 
       (.C(Clk),
        .CE(M_AXI_DP_RVALID),
        .D(M_AXI_DP_RDATA[13]),
        .Q(WB_DAXI_Read_Data[18]),
        .R(sync_reset));
  FDRE \WB_DAXI_Read_Data_reg[19] 
       (.C(Clk),
        .CE(M_AXI_DP_RVALID),
        .D(M_AXI_DP_RDATA[12]),
        .Q(WB_DAXI_Read_Data[19]),
        .R(sync_reset));
  FDRE \WB_DAXI_Read_Data_reg[1] 
       (.C(Clk),
        .CE(M_AXI_DP_RVALID),
        .D(M_AXI_DP_RDATA[30]),
        .Q(WB_DAXI_Read_Data[1]),
        .R(sync_reset));
  FDRE \WB_DAXI_Read_Data_reg[20] 
       (.C(Clk),
        .CE(M_AXI_DP_RVALID),
        .D(M_AXI_DP_RDATA[11]),
        .Q(WB_DAXI_Read_Data[20]),
        .R(sync_reset));
  FDRE \WB_DAXI_Read_Data_reg[21] 
       (.C(Clk),
        .CE(M_AXI_DP_RVALID),
        .D(M_AXI_DP_RDATA[10]),
        .Q(WB_DAXI_Read_Data[21]),
        .R(sync_reset));
  FDRE \WB_DAXI_Read_Data_reg[22] 
       (.C(Clk),
        .CE(M_AXI_DP_RVALID),
        .D(M_AXI_DP_RDATA[9]),
        .Q(WB_DAXI_Read_Data[22]),
        .R(sync_reset));
  FDRE \WB_DAXI_Read_Data_reg[23] 
       (.C(Clk),
        .CE(M_AXI_DP_RVALID),
        .D(M_AXI_DP_RDATA[8]),
        .Q(WB_DAXI_Read_Data[23]),
        .R(sync_reset));
  FDRE \WB_DAXI_Read_Data_reg[24] 
       (.C(Clk),
        .CE(M_AXI_DP_RVALID),
        .D(M_AXI_DP_RDATA[7]),
        .Q(Q[7]),
        .R(sync_reset));
  FDRE \WB_DAXI_Read_Data_reg[25] 
       (.C(Clk),
        .CE(M_AXI_DP_RVALID),
        .D(M_AXI_DP_RDATA[6]),
        .Q(Q[6]),
        .R(sync_reset));
  FDRE \WB_DAXI_Read_Data_reg[26] 
       (.C(Clk),
        .CE(M_AXI_DP_RVALID),
        .D(M_AXI_DP_RDATA[5]),
        .Q(Q[5]),
        .R(sync_reset));
  FDRE \WB_DAXI_Read_Data_reg[27] 
       (.C(Clk),
        .CE(M_AXI_DP_RVALID),
        .D(M_AXI_DP_RDATA[4]),
        .Q(Q[4]),
        .R(sync_reset));
  FDRE \WB_DAXI_Read_Data_reg[28] 
       (.C(Clk),
        .CE(M_AXI_DP_RVALID),
        .D(M_AXI_DP_RDATA[3]),
        .Q(Q[3]),
        .R(sync_reset));
  FDRE \WB_DAXI_Read_Data_reg[29] 
       (.C(Clk),
        .CE(M_AXI_DP_RVALID),
        .D(M_AXI_DP_RDATA[2]),
        .Q(Q[2]),
        .R(sync_reset));
  FDRE \WB_DAXI_Read_Data_reg[2] 
       (.C(Clk),
        .CE(M_AXI_DP_RVALID),
        .D(M_AXI_DP_RDATA[29]),
        .Q(WB_DAXI_Read_Data[2]),
        .R(sync_reset));
  FDRE \WB_DAXI_Read_Data_reg[30] 
       (.C(Clk),
        .CE(M_AXI_DP_RVALID),
        .D(M_AXI_DP_RDATA[1]),
        .Q(Q[1]),
        .R(sync_reset));
  FDRE \WB_DAXI_Read_Data_reg[31] 
       (.C(Clk),
        .CE(M_AXI_DP_RVALID),
        .D(M_AXI_DP_RDATA[0]),
        .Q(Q[0]),
        .R(sync_reset));
  FDRE \WB_DAXI_Read_Data_reg[3] 
       (.C(Clk),
        .CE(M_AXI_DP_RVALID),
        .D(M_AXI_DP_RDATA[28]),
        .Q(WB_DAXI_Read_Data[3]),
        .R(sync_reset));
  FDRE \WB_DAXI_Read_Data_reg[4] 
       (.C(Clk),
        .CE(M_AXI_DP_RVALID),
        .D(M_AXI_DP_RDATA[27]),
        .Q(WB_DAXI_Read_Data[4]),
        .R(sync_reset));
  FDRE \WB_DAXI_Read_Data_reg[5] 
       (.C(Clk),
        .CE(M_AXI_DP_RVALID),
        .D(M_AXI_DP_RDATA[26]),
        .Q(WB_DAXI_Read_Data[5]),
        .R(sync_reset));
  FDRE \WB_DAXI_Read_Data_reg[6] 
       (.C(Clk),
        .CE(M_AXI_DP_RVALID),
        .D(M_AXI_DP_RDATA[25]),
        .Q(WB_DAXI_Read_Data[6]),
        .R(sync_reset));
  FDRE \WB_DAXI_Read_Data_reg[7] 
       (.C(Clk),
        .CE(M_AXI_DP_RVALID),
        .D(M_AXI_DP_RDATA[24]),
        .Q(WB_DAXI_Read_Data[7]),
        .R(sync_reset));
  FDRE \WB_DAXI_Read_Data_reg[8] 
       (.C(Clk),
        .CE(M_AXI_DP_RVALID),
        .D(M_AXI_DP_RDATA[23]),
        .Q(Q[15]),
        .R(sync_reset));
  FDRE \WB_DAXI_Read_Data_reg[9] 
       (.C(Clk),
        .CE(M_AXI_DP_RVALID),
        .D(M_AXI_DP_RDATA[22]),
        .Q(Q[14]),
        .R(sync_reset));
  FDRE active_access_d1_reg
       (.C(Clk),
        .CE(1'b1),
        .D(active_access),
        .Q(active_access_d1),
        .R(sync_reset));
  LUT6 #(
    .INIT(64'h00001F1000000000)) 
    active_access_i_1
       (.I0(M_AXI_DP_RVALID),
        .I1(M_AXI_DP_BVALID),
        .I2(active_access),
        .I3(M_AXI_DP_AWADDR0),
        .I4(sync_reset),
        .I5(active_access_reg_0),
        .O(active_access_i_1_n_0));
  FDRE active_access_reg
       (.C(Clk),
        .CE(1'b1),
        .D(active_access_i_1_n_0),
        .Q(active_access),
        .R(1'b0));
  LUT3 #(
    .INIT(8'hE0)) 
    mem_access_completed_i_1
       (.I0(M_AXI_DP_RVALID),
        .I1(M_AXI_DP_BVALID),
        .I2(active_access),
        .O(mem_access_completed0));
  FDRE mem_access_completed_reg
       (.C(Clk),
        .CE(1'b1),
        .D(mem_access_completed0),
        .Q(MEM_DAXI_Data_Strobe),
        .R(sync_reset));
  LUT2 #(
    .INIT(4'h1)) 
    trace_reg_write_novalid_i_2
       (.I0(MEM_DAXI_Data_Strobe),
        .I1(DReady),
        .O(mem_access_completed_reg_0));
endmodule

module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Data_Flow
   (Op1_Low,
    EX_Op2,
    \Using_FPGA.Native ,
    Op1_Shift,
    \Using_FPGA.Native_0 ,
    Address,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    msr_I,
    \Using_FPGA.Native_4 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_0 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_1 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_2 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_3 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_4 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_5 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_6 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_7 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_8 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_9 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_10 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_11 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_12 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_13 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_14 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_15 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_16 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_17 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_18 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_19 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_20 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_21 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_22 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_23 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_24 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_25 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_26 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_27 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_28 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_29 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_30 ,
    D,
    PC_EX_i,
    \Using_FPGA.Native_5 ,
    LO,
    Reg_zero,
    \Size_17to32.imm_Reg_reg[0] ,
    Data_Write,
    res_Forward1,
    opsel1_SPR,
    sync_reset,
    of_PipeRun,
    Clk,
    D_0,
    D_1,
    D_2,
    D_3,
    D_4,
    D_5,
    D_6,
    D_7,
    D_8,
    D_9,
    D_10,
    D_11,
    D_12,
    D_13,
    D_14,
    D_15,
    D_16,
    D_17,
    D_18,
    D_19,
    D_20,
    D_21,
    D_22,
    D_23,
    D_24,
    D_25,
    D_26,
    D_27,
    D_28,
    D_29,
    D_30,
    D_31,
    carry_In,
    Unsigned_Op,
    alu_Op,
    MSR_Rst,
    \Using_FPGA.Native_6 ,
    \Using_FPGA.Native_7 ,
    \Using_FPGA.Native_8 ,
    \Using_FPGA.Native_9 ,
    \Using_FPGA.Native_10 ,
    \Using_FPGA.Native_11 ,
    \Using_dynamic_instr_Address.old_IE_value_reg ,
    compare_Instr,
    \Using_FPGA.Native_12 ,
    sext16,
    sext8,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    \data_rd_reg_reg[29] ,
    \data_rd_reg_reg[29]_0 ,
    register_write,
    Logic_Oper,
    Shift_Oper,
    Select_Logic,
    Shifted,
    Q,
    extend_Data_Read,
    Data_Read_Mask,
    \Using_FPGA.Native_13 ,
    Data_Read0_out,
    Reg_Test_Equal,
    reg_Test_Equal_N,
    jump,
    PC_Write,
    IReady,
    Buffer_Addr,
    \Using_FPGA.Native_14 ,
    E,
    imm_Value,
    Reg_Write,
    \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] ,
    reg1_Addr,
    DI,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output [0:2]Op1_Low;
  output EX_Op2;
  output \Using_FPGA.Native ;
  output Op1_Shift;
  output \Using_FPGA.Native_0 ;
  output [13:0]Address;
  output \Using_FPGA.Native_1 ;
  output \Using_FPGA.Native_2 ;
  output \Using_FPGA.Native_3 ;
  output [2:0]msr_I;
  output \Using_FPGA.Native_4 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_0 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_1 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_2 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_3 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_4 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_5 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_6 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_7 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_8 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_9 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_10 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_11 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_12 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_13 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_14 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_15 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_16 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_17 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_18 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_19 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_20 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_21 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_22 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_23 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_24 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_25 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_26 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_27 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_28 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_29 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_30 ;
  output [1:0]D;
  output [13:0]PC_EX_i;
  output [83:0]\Using_FPGA.Native_5 ;
  output LO;
  output Reg_zero;
  output [15:0]\Size_17to32.imm_Reg_reg[0] ;
  output [23:0]Data_Write;
  input res_Forward1;
  input opsel1_SPR;
  input sync_reset;
  input of_PipeRun;
  input Clk;
  input D_0;
  input D_1;
  input D_2;
  input D_3;
  input D_4;
  input D_5;
  input D_6;
  input D_7;
  input D_8;
  input D_9;
  input D_10;
  input D_11;
  input D_12;
  input D_13;
  input D_14;
  input D_15;
  input D_16;
  input D_17;
  input D_18;
  input D_19;
  input D_20;
  input D_21;
  input D_22;
  input D_23;
  input D_24;
  input D_25;
  input D_26;
  input D_27;
  input D_28;
  input D_29;
  input D_30;
  input D_31;
  input carry_In;
  input Unsigned_Op;
  input [0:1]alu_Op;
  input MSR_Rst;
  input \Using_FPGA.Native_6 ;
  input \Using_FPGA.Native_7 ;
  input \Using_FPGA.Native_8 ;
  input \Using_FPGA.Native_9 ;
  input \Using_FPGA.Native_10 ;
  input \Using_FPGA.Native_11 ;
  input \Using_dynamic_instr_Address.old_IE_value_reg ;
  input compare_Instr;
  input \Using_FPGA.Native_12 ;
  input sext16;
  input sext8;
  input [0:31]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input \data_rd_reg_reg[29] ;
  input \data_rd_reg_reg[29]_0 ;
  input register_write;
  input [0:1]Logic_Oper;
  input Shift_Oper;
  input Select_Logic;
  input Shifted;
  input [1:0]Q;
  input [15:0]extend_Data_Read;
  input Data_Read_Mask;
  input \Using_FPGA.Native_13 ;
  input [15:0]Data_Read0_out;
  input Reg_Test_Equal;
  input reg_Test_Equal_N;
  input jump;
  input PC_Write;
  input IReady;
  input [2:0]Buffer_Addr;
  input \Using_FPGA.Native_14 ;
  input [0:0]E;
  input [0:15]imm_Value;
  input Reg_Write;
  input [4:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] ;
  input [0:4]reg1_Addr;
  input DI;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire [4:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] ;
  wire [13:0]Address;
  wire [2:0]Buffer_Addr;
  wire Clk;
  wire [1:0]D;
  wire DI;
  wire D_0;
  wire D_1;
  wire D_10;
  wire D_11;
  wire D_12;
  wire D_13;
  wire D_14;
  wire D_15;
  wire D_16;
  wire D_17;
  wire D_18;
  wire D_19;
  wire D_2;
  wire D_20;
  wire D_21;
  wire D_22;
  wire D_23;
  wire D_24;
  wire D_25;
  wire D_26;
  wire D_27;
  wire D_28;
  wire D_29;
  wire D_3;
  wire D_30;
  wire D_31;
  wire D_4;
  wire D_5;
  wire D_6;
  wire D_7;
  wire D_8;
  wire D_9;
  wire [15:0]Data_Read0_out;
  wire Data_Read_Mask;
  wire [23:0]Data_Write;
  wire [0:0]E;
  wire EX_Op2;
  wire IReady;
  wire [0:31]Interrupt_Address;
  wire LO;
  wire [0:1]Logic_Oper;
  wire MSR_Rst;
  wire [0:2]Op1_Low;
  wire Op1_Shift;
  wire \OpSelect_Bits[0].Operand_Select_Bit_I/I3 ;
  wire \OpSelect_Bits[24].Operand_Select_Bit_I/I3 ;
  wire \OpSelect_Bits[25].Operand_Select_Bit_I/I3 ;
  wire \OpSelect_Bits[26].Operand_Select_Bit_I/I3 ;
  wire \OpSelect_Bits[27].Operand_Select_Bit_I/I3 ;
  wire \OpSelect_Bits[28].Operand_Select_Bit_I/I3 ;
  wire \OpSelect_Bits[29].Operand_Select_Bit_I/I3 ;
  wire \OpSelect_Bits[30].Operand_Select_Bit_I/I3 ;
  wire Operand_Select_I_n_10;
  wire Operand_Select_I_n_11;
  wire Operand_Select_I_n_40;
  wire Operand_Select_I_n_41;
  wire Operand_Select_I_n_42;
  wire Operand_Select_I_n_43;
  wire Operand_Select_I_n_45;
  wire Operand_Select_I_n_46;
  wire Operand_Select_I_n_47;
  wire Operand_Select_I_n_48;
  wire Operand_Select_I_n_49;
  wire Operand_Select_I_n_5;
  wire Operand_Select_I_n_50;
  wire Operand_Select_I_n_51;
  wire Operand_Select_I_n_52;
  wire Operand_Select_I_n_53;
  wire Operand_Select_I_n_54;
  wire Operand_Select_I_n_55;
  wire Operand_Select_I_n_56;
  wire Operand_Select_I_n_57;
  wire Operand_Select_I_n_58;
  wire Operand_Select_I_n_59;
  wire Operand_Select_I_n_6;
  wire Operand_Select_I_n_61;
  wire Operand_Select_I_n_62;
  wire Operand_Select_I_n_63;
  wire Operand_Select_I_n_64;
  wire Operand_Select_I_n_65;
  wire Operand_Select_I_n_66;
  wire Operand_Select_I_n_67;
  wire Operand_Select_I_n_68;
  wire Operand_Select_I_n_69;
  wire Operand_Select_I_n_70;
  wire Operand_Select_I_n_71;
  wire Operand_Select_I_n_72;
  wire Operand_Select_I_n_73;
  wire Operand_Select_I_n_74;
  wire Operand_Select_I_n_75;
  wire Operand_Select_I_n_76;
  wire Operand_Select_I_n_77;
  wire Operand_Select_I_n_78;
  wire Operand_Select_I_n_79;
  wire Operand_Select_I_n_8;
  wire Operand_Select_I_n_80;
  wire Operand_Select_I_n_81;
  wire Operand_Select_I_n_82;
  wire Operand_Select_I_n_83;
  wire Operand_Select_I_n_84;
  wire Operand_Select_I_n_85;
  wire Operand_Select_I_n_86;
  wire Operand_Select_I_n_87;
  wire Operand_Select_I_n_88;
  wire Operand_Select_I_n_89;
  wire Operand_Select_I_n_9;
  wire Operand_Select_I_n_90;
  wire Operand_Select_I_n_91;
  wire Operand_Select_I_n_95;
  wire Operand_Select_I_n_97;
  wire Operand_Select_I_n_98;
  wire [13:0]PC_EX_i;
  wire PC_Write;
  wire [1:0]Q;
  wire Reg_Test_Equal;
  wire Reg_Write;
  wire Reg_zero;
  wire Select_Logic;
  wire Shift_Logic_Module_I_n_1;
  wire Shift_Logic_Module_I_n_10;
  wire Shift_Logic_Module_I_n_11;
  wire Shift_Logic_Module_I_n_12;
  wire Shift_Logic_Module_I_n_13;
  wire Shift_Logic_Module_I_n_14;
  wire Shift_Logic_Module_I_n_15;
  wire Shift_Logic_Module_I_n_16;
  wire Shift_Logic_Module_I_n_17;
  wire Shift_Logic_Module_I_n_18;
  wire Shift_Logic_Module_I_n_19;
  wire Shift_Logic_Module_I_n_2;
  wire Shift_Logic_Module_I_n_20;
  wire Shift_Logic_Module_I_n_21;
  wire Shift_Logic_Module_I_n_22;
  wire Shift_Logic_Module_I_n_23;
  wire Shift_Logic_Module_I_n_24;
  wire Shift_Logic_Module_I_n_25;
  wire Shift_Logic_Module_I_n_26;
  wire Shift_Logic_Module_I_n_27;
  wire Shift_Logic_Module_I_n_28;
  wire Shift_Logic_Module_I_n_29;
  wire Shift_Logic_Module_I_n_3;
  wire Shift_Logic_Module_I_n_30;
  wire Shift_Logic_Module_I_n_31;
  wire Shift_Logic_Module_I_n_4;
  wire Shift_Logic_Module_I_n_5;
  wire Shift_Logic_Module_I_n_6;
  wire Shift_Logic_Module_I_n_7;
  wire Shift_Logic_Module_I_n_8;
  wire Shift_Logic_Module_I_n_9;
  wire Shift_Logic_Res;
  wire Shift_Oper;
  wire Shifted;
  wire [15:0]\Size_17to32.imm_Reg_reg[0] ;
  wire Unsigned_Op;
  wire \Using_FPGA.ALL_Bits[0].ALU_Bit_I1/S ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_10 ;
  wire \Using_FPGA.Native_11 ;
  wire \Using_FPGA.Native_12 ;
  wire \Using_FPGA.Native_13 ;
  wire \Using_FPGA.Native_14 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire [83:0]\Using_FPGA.Native_5 ;
  wire \Using_FPGA.Native_6 ;
  wire \Using_FPGA.Native_7 ;
  wire \Using_FPGA.Native_8 ;
  wire \Using_FPGA.Native_9 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_0 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_1 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_10 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_11 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_12 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_13 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_14 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_15 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_16 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_17 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_18 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_19 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_2 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_20 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_21 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_22 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_23 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_24 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_25 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_26 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_27 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_28 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_29 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_3 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_30 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_4 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_5 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_6 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_7 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_8 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_9 ;
  wire \Using_dynamic_instr_Address.old_IE_value_reg ;
  wire [0:1]alu_Op;
  wire carry_In;
  wire compare_Instr;
  wire \data_rd_reg_reg[29] ;
  wire \data_rd_reg_reg[29]_0 ;
  wire [0:31]ex_Result;
  wire [0:0]exception_kind;
  wire [15:0]extend_Data_Read;
  wire [0:15]imm_Value;
  wire jump;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire [2:0]msr_I;
  wire of_PipeRun;
  wire [0:27]op2_C;
  wire opsel1_SPR;
  wire [30:31]raw_Data_Addr;
  wire [0:4]reg1_Addr;
  wire [0:31]reg1_Data;
  wire [0:31]reg2_Data;
  wire reg_Test_Equal_N;
  wire register_write;
  wire res_Forward1;
  wire res_Forward2;
  wire [0:0]sext;
  wire sext16;
  wire sext8;
  wire sync_reset;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_ALU ALU_I
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[10] (Operand_Select_I_n_50),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[11] (Operand_Select_I_n_52),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[12] (Operand_Select_I_n_54),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[13] (Operand_Select_I_n_56),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[14] (Operand_Select_I_n_58),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[15] (\Using_FPGA.Native_1 ),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[16] (Operand_Select_I_n_62),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[17] (Operand_Select_I_n_64),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[18] (Operand_Select_I_n_66),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[19] (Operand_Select_I_n_68),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[20] (Operand_Select_I_n_70),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[21] (Operand_Select_I_n_72),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[22] (Operand_Select_I_n_74),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[23] (Operand_Select_I_n_76),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[24] (Operand_Select_I_n_78),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[25] (Operand_Select_I_n_80),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[26] (Operand_Select_I_n_82),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[27] (Operand_Select_I_n_84),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[28] (Operand_Select_I_n_86),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[29] (Operand_Select_I_n_88),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[2] (Op1_Low[0]),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[30] (Operand_Select_I_n_90),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31] (Operand_Select_I_n_97),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[3] (Operand_Select_I_n_9),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[3]_0 (Op1_Shift),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[4] (Operand_Select_I_n_10),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[5] (Operand_Select_I_n_40),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[6] (Operand_Select_I_n_42),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[7] (\Using_FPGA.Native_0 ),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[8] (Operand_Select_I_n_46),
        .\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[9] (Operand_Select_I_n_48),
        .EX_Op1(Op1_Low[2]),
        .EX_Op2(EX_Op2),
        .LO(LO),
        .Op1_Logic(\Using_FPGA.Native_2 ),
        .Op2(Operand_Select_I_n_6),
        .S(\Using_FPGA.ALL_Bits[0].ALU_Bit_I1/S ),
        .Unsigned_Op(Unsigned_Op),
        .\Using_FPGA.Native (\Using_FPGA.Native_5 [69:40]),
        .\Using_FPGA.Native_I2 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_I2_0 (Op1_Low[1]),
        .alu_Op(alu_Op),
        .carry_In(carry_In),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .op2_C({op2_C[0],op2_C[1],op2_C[2],op2_C[3],op2_C[4],op2_C[5],op2_C[6],op2_C[7],op2_C[8],op2_C[9],op2_C[10],op2_C[11],op2_C[12],op2_C[13],op2_C[14],op2_C[15],op2_C[16],op2_C[17],op2_C[18],op2_C[19],op2_C[20],op2_C[21],op2_C[22],op2_C[23],op2_C[24],op2_C[25],op2_C[26],op2_C[27]}),
        .raw_Data_Addr({raw_Data_Addr[30],raw_Data_Addr[31]}));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MSR_Reg MSR_Reg_I
       (.Address(Address[1:0]),
        .Clk(Clk),
        .I3(\OpSelect_Bits[0].Operand_Select_Bit_I/I3 ),
        .I3_0(\OpSelect_Bits[30].Operand_Select_Bit_I/I3 ),
        .I3_1(\OpSelect_Bits[28].Operand_Select_Bit_I/I3 ),
        .I3_2(\OpSelect_Bits[29].Operand_Select_Bit_I/I3 ),
        .MSR_Rst(MSR_Rst),
        .\Using_FPGA.Native (\Using_FPGA.Native_4 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_6 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_7 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_8 ),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_9 ),
        .\Using_FPGA.Native_4 (\Using_FPGA.Native_10 ),
        .\Using_FPGA.Native_5 (\Using_FPGA.Native_11 ),
        .\Using_dynamic_instr_Address.old_IE_value_reg (\Using_dynamic_instr_Address.old_IE_value_reg ),
        .msr_I(msr_I));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Operand_Select Operand_Select_I
       (.Address(Address[13:6]),
        .Clk(Clk),
        .Compare_Instr_reg(Operand_Select_I_n_97),
        .D_0(D_0),
        .D_1(D_1),
        .D_10(D_10),
        .D_11(D_11),
        .D_12(D_12),
        .D_13(D_13),
        .D_14(D_14),
        .D_15(D_15),
        .D_16(D_16),
        .D_17(D_17),
        .D_18(D_18),
        .D_19(D_19),
        .D_2(D_2),
        .D_20(D_20),
        .D_21(D_21),
        .D_22(D_22),
        .D_23(D_23),
        .D_24(D_24),
        .D_25(D_25),
        .D_26(D_26),
        .D_27(D_27),
        .D_28(D_28),
        .D_29(D_29),
        .D_3(D_3),
        .D_30(D_30),
        .D_31(D_31),
        .D_4(D_4),
        .D_5(D_5),
        .D_6(D_6),
        .D_7(D_7),
        .D_8(D_8),
        .D_9(D_9),
        .E(E),
        .EX_Op2(EX_Op2),
        .I3(\OpSelect_Bits[30].Operand_Select_Bit_I/I3 ),
        .I3_0(\OpSelect_Bits[29].Operand_Select_Bit_I/I3 ),
        .I3_1(\OpSelect_Bits[28].Operand_Select_Bit_I/I3 ),
        .I3_2(\OpSelect_Bits[27].Operand_Select_Bit_I/I3 ),
        .I3_3(\OpSelect_Bits[26].Operand_Select_Bit_I/I3 ),
        .I3_4(\OpSelect_Bits[25].Operand_Select_Bit_I/I3 ),
        .I3_5(\OpSelect_Bits[24].Operand_Select_Bit_I/I3 ),
        .I3_6(\OpSelect_Bits[0].Operand_Select_Bit_I/I3 ),
        .Op1_Logic(Op1_Low[2]),
        .Op2(Operand_Select_I_n_6),
        .Reg1_Data(reg1_Data),
        .S(\Using_FPGA.ALL_Bits[0].ALU_Bit_I1/S ),
        .Sext(Operand_Select_I_n_95),
        .Shifted(Op1_Shift),
        .\Size_17to32.imm_Reg_reg[0]_0 (\Size_17to32.imm_Reg_reg[0] ),
        .\Using_FPGA.Native (Op1_Low[1]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (Op1_Low[0]),
        .\Using_FPGA.Native_10 (Operand_Select_I_n_43),
        .\Using_FPGA.Native_11 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_12 (Operand_Select_I_n_45),
        .\Using_FPGA.Native_13 (Operand_Select_I_n_46),
        .\Using_FPGA.Native_14 (Operand_Select_I_n_47),
        .\Using_FPGA.Native_15 (Operand_Select_I_n_48),
        .\Using_FPGA.Native_16 (Operand_Select_I_n_49),
        .\Using_FPGA.Native_17 (Operand_Select_I_n_50),
        .\Using_FPGA.Native_18 (Operand_Select_I_n_51),
        .\Using_FPGA.Native_19 (Operand_Select_I_n_52),
        .\Using_FPGA.Native_2 (Operand_Select_I_n_5),
        .\Using_FPGA.Native_20 (Operand_Select_I_n_53),
        .\Using_FPGA.Native_21 (Operand_Select_I_n_54),
        .\Using_FPGA.Native_22 (Operand_Select_I_n_55),
        .\Using_FPGA.Native_23 (Operand_Select_I_n_56),
        .\Using_FPGA.Native_24 (Operand_Select_I_n_57),
        .\Using_FPGA.Native_25 (Operand_Select_I_n_58),
        .\Using_FPGA.Native_26 (Operand_Select_I_n_59),
        .\Using_FPGA.Native_27 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_28 (Operand_Select_I_n_61),
        .\Using_FPGA.Native_29 (Operand_Select_I_n_62),
        .\Using_FPGA.Native_3 (Operand_Select_I_n_8),
        .\Using_FPGA.Native_30 (Operand_Select_I_n_63),
        .\Using_FPGA.Native_31 (Operand_Select_I_n_64),
        .\Using_FPGA.Native_32 (Operand_Select_I_n_65),
        .\Using_FPGA.Native_33 (Operand_Select_I_n_66),
        .\Using_FPGA.Native_34 (Operand_Select_I_n_67),
        .\Using_FPGA.Native_35 (Operand_Select_I_n_68),
        .\Using_FPGA.Native_36 (Operand_Select_I_n_69),
        .\Using_FPGA.Native_37 (Operand_Select_I_n_70),
        .\Using_FPGA.Native_38 (Operand_Select_I_n_71),
        .\Using_FPGA.Native_39 (Operand_Select_I_n_72),
        .\Using_FPGA.Native_4 (Operand_Select_I_n_9),
        .\Using_FPGA.Native_40 (Operand_Select_I_n_73),
        .\Using_FPGA.Native_41 (Operand_Select_I_n_74),
        .\Using_FPGA.Native_42 (Operand_Select_I_n_75),
        .\Using_FPGA.Native_43 (Operand_Select_I_n_76),
        .\Using_FPGA.Native_44 (Operand_Select_I_n_77),
        .\Using_FPGA.Native_45 (Operand_Select_I_n_78),
        .\Using_FPGA.Native_46 (Operand_Select_I_n_79),
        .\Using_FPGA.Native_47 (Operand_Select_I_n_80),
        .\Using_FPGA.Native_48 (Operand_Select_I_n_81),
        .\Using_FPGA.Native_49 (Operand_Select_I_n_82),
        .\Using_FPGA.Native_5 (Operand_Select_I_n_10),
        .\Using_FPGA.Native_50 (Operand_Select_I_n_83),
        .\Using_FPGA.Native_51 (Operand_Select_I_n_84),
        .\Using_FPGA.Native_52 (Operand_Select_I_n_85),
        .\Using_FPGA.Native_53 (Operand_Select_I_n_86),
        .\Using_FPGA.Native_54 (Operand_Select_I_n_87),
        .\Using_FPGA.Native_55 (Operand_Select_I_n_88),
        .\Using_FPGA.Native_56 (Operand_Select_I_n_89),
        .\Using_FPGA.Native_57 (Operand_Select_I_n_90),
        .\Using_FPGA.Native_58 (Operand_Select_I_n_91),
        .\Using_FPGA.Native_59 (\Using_FPGA.Native_2 ),
        .\Using_FPGA.Native_6 (Operand_Select_I_n_11),
        .\Using_FPGA.Native_60 (\Using_FPGA.Native_3 ),
        .\Using_FPGA.Native_61 (sext),
        .\Using_FPGA.Native_62 (Operand_Select_I_n_98),
        .\Using_FPGA.Native_63 (\Using_FPGA.Native_12 ),
        .\Using_FPGA.Native_7 (Operand_Select_I_n_40),
        .\Using_FPGA.Native_8 (Operand_Select_I_n_41),
        .\Using_FPGA.Native_9 (Operand_Select_I_n_42),
        .compare_Instr(compare_Instr),
        .ex_Result(ex_Result),
        .imm_Value(imm_Value),
        .of_PipeRun(of_PipeRun),
        .op2_C({op2_C[0],op2_C[1],op2_C[2],op2_C[3],op2_C[4],op2_C[5],op2_C[6],op2_C[7],op2_C[8],op2_C[9],op2_C[10],op2_C[11],op2_C[12],op2_C[13],op2_C[14],op2_C[15],op2_C[16],op2_C[17],op2_C[18],op2_C[19],op2_C[20],op2_C[21],op2_C[22],op2_C[23],op2_C[24],op2_C[25],op2_C[26],op2_C[27]}),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1),
        .sext16(sext16),
        .sext8(sext8),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_PC_Module PC_Module_I
       (.Address(Address),
        .Buffer_Addr(Buffer_Addr),
        .Clk(Clk),
        .D(D),
        .DI(DI),
        .I3(\OpSelect_Bits[24].Operand_Select_Bit_I/I3 ),
        .I3_0(\OpSelect_Bits[25].Operand_Select_Bit_I/I3 ),
        .I3_1(\OpSelect_Bits[26].Operand_Select_Bit_I/I3 ),
        .I3_2(\OpSelect_Bits[27].Operand_Select_Bit_I/I3 ),
        .IReady(IReady),
        .PC_EX_i(PC_EX_i),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native (\Using_FPGA.Native_5 [83:70]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_11 ),
        .\Using_FPGA.Native_1 ({\Using_FPGA.Native_5 [53:40],\Using_FPGA.Native_5 [3:2]}),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_14 ),
        .\data_rd_reg_reg[29] (\data_rd_reg_reg[29] ),
        .\data_rd_reg_reg[29]_0 (\data_rd_reg_reg[29]_0 ),
        .jump(jump),
        .msr_I(msr_I[2:1]),
        .register_write(register_write),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Register_File Register_File_I
       (.\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] ),
        .Clk(Clk),
        .Clk_0(\Using_FPGA.Native_5 [39:32]),
        .Data_Write(Data_Write),
        .Reg1_Data(reg1_Data),
        .Reg_Write(Reg_Write),
        .ex_Result(ex_Result),
        .imm_Value({imm_Value[0],imm_Value[1],imm_Value[2],imm_Value[3],imm_Value[4]}),
        .reg1_Addr(reg1_Addr),
        .reg2_Data(reg2_Data));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Result_Mux Result_Mux_I
       (.Clk(Clk),
        .Data_Read0_out(Data_Read0_out),
        .Data_Read_Mask(Data_Read_Mask),
        .Interrupt_Address(Interrupt_Address),
        .Q(Q),
        .Shift_Logic_Res(Shift_Logic_Res),
        .\Using_FPGA.Native (\Using_FPGA.Native_5 [31:0]),
        .\Using_FPGA.Native_0 (Shift_Logic_Module_I_n_1),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_5 [69:40]),
        .\Using_FPGA.Native_10 (Shift_Logic_Module_I_n_10),
        .\Using_FPGA.Native_11 (Shift_Logic_Module_I_n_11),
        .\Using_FPGA.Native_12 (Shift_Logic_Module_I_n_12),
        .\Using_FPGA.Native_13 (Shift_Logic_Module_I_n_13),
        .\Using_FPGA.Native_14 (Shift_Logic_Module_I_n_14),
        .\Using_FPGA.Native_15 (Shift_Logic_Module_I_n_15),
        .\Using_FPGA.Native_16 (Shift_Logic_Module_I_n_16),
        .\Using_FPGA.Native_17 (\Using_FPGA.Native_13 ),
        .\Using_FPGA.Native_18 (Shift_Logic_Module_I_n_17),
        .\Using_FPGA.Native_19 (Shift_Logic_Module_I_n_18),
        .\Using_FPGA.Native_2 (Shift_Logic_Module_I_n_2),
        .\Using_FPGA.Native_20 (Shift_Logic_Module_I_n_19),
        .\Using_FPGA.Native_21 (Shift_Logic_Module_I_n_20),
        .\Using_FPGA.Native_22 (Shift_Logic_Module_I_n_21),
        .\Using_FPGA.Native_23 (Shift_Logic_Module_I_n_22),
        .\Using_FPGA.Native_24 (Shift_Logic_Module_I_n_23),
        .\Using_FPGA.Native_25 (Shift_Logic_Module_I_n_24),
        .\Using_FPGA.Native_26 (Shift_Logic_Module_I_n_25),
        .\Using_FPGA.Native_27 (Shift_Logic_Module_I_n_26),
        .\Using_FPGA.Native_28 (Shift_Logic_Module_I_n_27),
        .\Using_FPGA.Native_29 (Shift_Logic_Module_I_n_28),
        .\Using_FPGA.Native_3 (Shift_Logic_Module_I_n_3),
        .\Using_FPGA.Native_30 (Shift_Logic_Module_I_n_29),
        .\Using_FPGA.Native_31 (Shift_Logic_Module_I_n_30),
        .\Using_FPGA.Native_32 (Shift_Logic_Module_I_n_31),
        .\Using_FPGA.Native_4 (Shift_Logic_Module_I_n_4),
        .\Using_FPGA.Native_5 (Shift_Logic_Module_I_n_5),
        .\Using_FPGA.Native_6 (Shift_Logic_Module_I_n_6),
        .\Using_FPGA.Native_7 (Shift_Logic_Module_I_n_7),
        .\Using_FPGA.Native_8 (Shift_Logic_Module_I_n_8),
        .\Using_FPGA.Native_9 (Shift_Logic_Module_I_n_9),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_0 (\Using_FPGA.take_Intr_2nd_Phase_reg_0 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_1 (\Using_FPGA.take_Intr_2nd_Phase_reg_1 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_10 (\Using_FPGA.take_Intr_2nd_Phase_reg_10 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_11 (\Using_FPGA.take_Intr_2nd_Phase_reg_11 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_12 (\Using_FPGA.take_Intr_2nd_Phase_reg_12 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_13 (\Using_FPGA.take_Intr_2nd_Phase_reg_13 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_14 (\Using_FPGA.take_Intr_2nd_Phase_reg_14 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_15 (\Using_FPGA.take_Intr_2nd_Phase_reg_15 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_16 (\Using_FPGA.take_Intr_2nd_Phase_reg_16 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_17 (\Using_FPGA.take_Intr_2nd_Phase_reg_17 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_18 (\Using_FPGA.take_Intr_2nd_Phase_reg_18 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_19 (\Using_FPGA.take_Intr_2nd_Phase_reg_19 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_2 (\Using_FPGA.take_Intr_2nd_Phase_reg_2 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_20 (\Using_FPGA.take_Intr_2nd_Phase_reg_20 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_21 (\Using_FPGA.take_Intr_2nd_Phase_reg_21 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_22 (\Using_FPGA.take_Intr_2nd_Phase_reg_22 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_23 (\Using_FPGA.take_Intr_2nd_Phase_reg_23 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_24 (\Using_FPGA.take_Intr_2nd_Phase_reg_24 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_25 (\Using_FPGA.take_Intr_2nd_Phase_reg_25 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_26 (\Using_FPGA.take_Intr_2nd_Phase_reg_26 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_27 (\Using_FPGA.take_Intr_2nd_Phase_reg_27 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_28 (\Using_FPGA.take_Intr_2nd_Phase_reg_28 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_29 (\Using_FPGA.take_Intr_2nd_Phase_reg_29 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_3 (\Using_FPGA.take_Intr_2nd_Phase_reg_3 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_30 (\Using_FPGA.take_Intr_2nd_Phase_reg_30 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_4 (\Using_FPGA.take_Intr_2nd_Phase_reg_4 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_5 (\Using_FPGA.take_Intr_2nd_Phase_reg_5 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_6 (\Using_FPGA.take_Intr_2nd_Phase_reg_6 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_7 (\Using_FPGA.take_Intr_2nd_Phase_reg_7 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_8 (\Using_FPGA.take_Intr_2nd_Phase_reg_8 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_9 (\Using_FPGA.take_Intr_2nd_Phase_reg_9 ),
        .ex_Result(ex_Result),
        .exception_kind(exception_kind),
        .extend_Data_Read(extend_Data_Read),
        .raw_Data_Addr({raw_Data_Addr[30],raw_Data_Addr[31]}),
        .reg2_Data(reg2_Data),
        .res_Forward2(res_Forward2));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Shift_Logic_Module Shift_Logic_Module_I
       (.EX_Op2(EX_Op2),
        .Logic_Oper(Logic_Oper),
        .Op1_Logic(Op1_Low[2]),
        .Op2(Operand_Select_I_n_6),
        .Select_Logic(Select_Logic),
        .Select_Logic_reg(Shift_Logic_Module_I_n_1),
        .Select_Logic_reg_0(Shift_Logic_Module_I_n_2),
        .Select_Logic_reg_1(Shift_Logic_Module_I_n_3),
        .Select_Logic_reg_10(Shift_Logic_Module_I_n_12),
        .Select_Logic_reg_11(Shift_Logic_Module_I_n_13),
        .Select_Logic_reg_12(Shift_Logic_Module_I_n_14),
        .Select_Logic_reg_13(Shift_Logic_Module_I_n_15),
        .Select_Logic_reg_14(Shift_Logic_Module_I_n_16),
        .Select_Logic_reg_15(Shift_Logic_Module_I_n_17),
        .Select_Logic_reg_16(Shift_Logic_Module_I_n_18),
        .Select_Logic_reg_17(Shift_Logic_Module_I_n_19),
        .Select_Logic_reg_18(Shift_Logic_Module_I_n_20),
        .Select_Logic_reg_19(Shift_Logic_Module_I_n_21),
        .Select_Logic_reg_2(Shift_Logic_Module_I_n_4),
        .Select_Logic_reg_20(Shift_Logic_Module_I_n_22),
        .Select_Logic_reg_21(Shift_Logic_Module_I_n_23),
        .Select_Logic_reg_22(Shift_Logic_Module_I_n_24),
        .Select_Logic_reg_23(Shift_Logic_Module_I_n_25),
        .Select_Logic_reg_24(Shift_Logic_Module_I_n_26),
        .Select_Logic_reg_25(Shift_Logic_Module_I_n_27),
        .Select_Logic_reg_26(Shift_Logic_Module_I_n_28),
        .Select_Logic_reg_27(Shift_Logic_Module_I_n_29),
        .Select_Logic_reg_28(Shift_Logic_Module_I_n_30),
        .Select_Logic_reg_29(Shift_Logic_Module_I_n_31),
        .Select_Logic_reg_3(Shift_Logic_Module_I_n_5),
        .Select_Logic_reg_4(Shift_Logic_Module_I_n_6),
        .Select_Logic_reg_5(Shift_Logic_Module_I_n_7),
        .Select_Logic_reg_6(Shift_Logic_Module_I_n_8),
        .Select_Logic_reg_7(Shift_Logic_Module_I_n_9),
        .Select_Logic_reg_8(Shift_Logic_Module_I_n_10),
        .Select_Logic_reg_9(Shift_Logic_Module_I_n_11),
        .Sext(sext),
        .Shift_Logic_Res(Shift_Logic_Res),
        .Shift_Oper(Shift_Oper),
        .Shifted(Op1_Shift),
        .\Using_FPGA.Native (Op1_Low[1]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (Op1_Low[0]),
        .\Using_FPGA.Native_10 (Operand_Select_I_n_52),
        .\Using_FPGA.Native_11 (Operand_Select_I_n_54),
        .\Using_FPGA.Native_12 (Operand_Select_I_n_56),
        .\Using_FPGA.Native_13 (Operand_Select_I_n_58),
        .\Using_FPGA.Native_14 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_15 (Operand_Select_I_n_62),
        .\Using_FPGA.Native_16 (Operand_Select_I_n_64),
        .\Using_FPGA.Native_17 (Operand_Select_I_n_95),
        .\Using_FPGA.Native_18 (Operand_Select_I_n_66),
        .\Using_FPGA.Native_19 (Operand_Select_I_n_68),
        .\Using_FPGA.Native_2 (Operand_Select_I_n_9),
        .\Using_FPGA.Native_20 (Operand_Select_I_n_70),
        .\Using_FPGA.Native_21 (Operand_Select_I_n_72),
        .\Using_FPGA.Native_22 (Operand_Select_I_n_74),
        .\Using_FPGA.Native_23 (Operand_Select_I_n_76),
        .\Using_FPGA.Native_24 (Operand_Select_I_n_78),
        .\Using_FPGA.Native_25 (Operand_Select_I_n_80),
        .\Using_FPGA.Native_26 (Operand_Select_I_n_82),
        .\Using_FPGA.Native_27 (Operand_Select_I_n_84),
        .\Using_FPGA.Native_28 (Operand_Select_I_n_86),
        .\Using_FPGA.Native_29 (Operand_Select_I_n_88),
        .\Using_FPGA.Native_3 (Operand_Select_I_n_10),
        .\Using_FPGA.Native_30 (Operand_Select_I_n_90),
        .\Using_FPGA.Native_31 (\Using_FPGA.Native_2 ),
        .\Using_FPGA.Native_32 (Shifted),
        .\Using_FPGA.Native_4 (Operand_Select_I_n_40),
        .\Using_FPGA.Native_5 (Operand_Select_I_n_42),
        .\Using_FPGA.Native_6 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_7 (Operand_Select_I_n_46),
        .\Using_FPGA.Native_8 (Operand_Select_I_n_48),
        .\Using_FPGA.Native_9 (Operand_Select_I_n_50),
        .op2_C({op2_C[0],op2_C[1],op2_C[2],op2_C[3],op2_C[4],op2_C[5],op2_C[6],op2_C[7],op2_C[8],op2_C[9],op2_C[10],op2_C[11],op2_C[12],op2_C[13],op2_C[14],op2_C[15],op2_C[16],op2_C[17],op2_C[18],op2_C[19],op2_C[20],op2_C[21],op2_C[22],op2_C[23],op2_C[24],op2_C[25],op2_C[26],op2_C[27]}));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Zero_Detect Zero_Detect_I
       (.Reg_Test_Equal(Reg_Test_Equal),
        .Reg_zero(Reg_zero),
        .\Using_FPGA.Native (Operand_Select_I_n_98),
        .\Using_FPGA.Native_0 (Operand_Select_I_n_5),
        .\Using_FPGA.Native_1 (Operand_Select_I_n_45),
        .\Using_FPGA.Native_10 (Operand_Select_I_n_49),
        .\Using_FPGA.Native_11 (Operand_Select_I_n_51),
        .\Using_FPGA.Native_12 (Operand_Select_I_n_59),
        .\Using_FPGA.Native_13 (Operand_Select_I_n_69),
        .\Using_FPGA.Native_14 (Operand_Select_I_n_65),
        .\Using_FPGA.Native_15 (Operand_Select_I_n_67),
        .\Using_FPGA.Native_16 (Operand_Select_I_n_61),
        .\Using_FPGA.Native_17 (Operand_Select_I_n_63),
        .\Using_FPGA.Native_18 (Operand_Select_I_n_71),
        .\Using_FPGA.Native_19 (Operand_Select_I_n_81),
        .\Using_FPGA.Native_2 (Operand_Select_I_n_41),
        .\Using_FPGA.Native_20 (Operand_Select_I_n_77),
        .\Using_FPGA.Native_21 (Operand_Select_I_n_79),
        .\Using_FPGA.Native_22 (Operand_Select_I_n_73),
        .\Using_FPGA.Native_23 (Operand_Select_I_n_75),
        .\Using_FPGA.Native_24 (Operand_Select_I_n_83),
        .\Using_FPGA.Native_25 (\Using_FPGA.Native_3 ),
        .\Using_FPGA.Native_26 (Operand_Select_I_n_89),
        .\Using_FPGA.Native_27 (Operand_Select_I_n_91),
        .\Using_FPGA.Native_28 (Operand_Select_I_n_85),
        .\Using_FPGA.Native_29 (Operand_Select_I_n_87),
        .\Using_FPGA.Native_3 (Operand_Select_I_n_43),
        .\Using_FPGA.Native_4 (Operand_Select_I_n_8),
        .\Using_FPGA.Native_5 (Operand_Select_I_n_11),
        .\Using_FPGA.Native_6 (Operand_Select_I_n_47),
        .\Using_FPGA.Native_7 (Operand_Select_I_n_57),
        .\Using_FPGA.Native_8 (Operand_Select_I_n_53),
        .\Using_FPGA.Native_9 (Operand_Select_I_n_55),
        .lopt(lopt_6),
        .lopt_1(lopt_7),
        .lopt_2(lopt_8),
        .reg_Test_Equal_N(reg_Test_Equal_N));
endmodule

module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Debug
   (dbg_pause,
    D,
    Sleep,
    dbg_brki_hit,
    LOCKSTEP_Master_Out,
    force_stop_cmd_i,
    force_stop_cmd_hold,
    read_register_MSR_1_reg_0,
    delay_slot_instr_reg_0,
    register_write,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    Dbg_Trig_In,
    Dbg_Trig_Ack_Out,
    \Use_Serial_Unified_Completion.completion_block_reg ,
    Dbg_TDO,
    S,
    \Use_Async_Reset.sync_reset_reg ,
    \Using_FPGA.Native_1 ,
    \Serial_Dbg_Intf.if_debug_ready_i_reg_0 ,
    IReady1_out,
    \Use_Async_Reset.sync_reset_reg_0 ,
    \Area_Debug_Control.normal_stop_cmd_hold_reg_0 ,
    Q,
    Dbg_Clk,
    sync_reset,
    Pause,
    Clk,
    dbg_brki_hit0,
    Dbg_Update,
    Dbg_Trig_Ack_In,
    Dbg_Trig_Out,
    force_stop_cmd_hold0,
    of_PipeRun,
    use_Imm_Reg,
    delay_slot_instr_reg_1,
    branch_with_delay,
    reg_Write_dbg,
    Dbg_Stop,
    Dbg_Capture,
    Data_Read_Reg_En,
    Config_Reg_En,
    Dbg_Reg_En,
    Dbg_Shift,
    Status_Reg_En,
    wakeup_i,
    ok_To_Stop,
    Reset_Mode,
    \Using_FPGA.Native_2 ,
    has_inhibit_EX,
    \Serial_Dbg_Intf.status_reg_reg[25]_0 ,
    Scan_En,
    Scan_Reset,
    Scan_Reset_Sel,
    Sleep_Decode,
    jump,
    dbg_clean_stop,
    load_Store_i,
    IReady,
    inHibit_EX_reg,
    Valid_Instr_i,
    \data_rd_reg_reg[30]_0 ,
    PC_EX_i,
    Dbg_TDI,
    Address,
    \Serial_Dbg_Intf.status_reg_reg[22]_0 ,
    \data_rd_reg_reg[28]_0 );
  output dbg_pause;
  output [0:0]D;
  output Sleep;
  output dbg_brki_hit;
  output [36:0]LOCKSTEP_Master_Out;
  output force_stop_cmd_i;
  output force_stop_cmd_hold;
  output read_register_MSR_1_reg_0;
  output [0:0]delay_slot_instr_reg_0;
  output register_write;
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  output [1:0]Dbg_Trig_In;
  output [1:0]Dbg_Trig_Ack_Out;
  output \Use_Serial_Unified_Completion.completion_block_reg ;
  output Dbg_TDO;
  output S;
  output \Use_Async_Reset.sync_reset_reg ;
  output \Using_FPGA.Native_1 ;
  output \Serial_Dbg_Intf.if_debug_ready_i_reg_0 ;
  output IReady1_out;
  output \Use_Async_Reset.sync_reset_reg_0 ;
  output \Area_Debug_Control.normal_stop_cmd_hold_reg_0 ;
  output [0:0]Q;
  input Dbg_Clk;
  input sync_reset;
  input Pause;
  input Clk;
  input dbg_brki_hit0;
  input Dbg_Update;
  input [1:0]Dbg_Trig_Ack_In;
  input [1:0]Dbg_Trig_Out;
  input force_stop_cmd_hold0;
  input of_PipeRun;
  input use_Imm_Reg;
  input delay_slot_instr_reg_1;
  input branch_with_delay;
  input reg_Write_dbg;
  input Dbg_Stop;
  input Dbg_Capture;
  input Data_Read_Reg_En;
  input Config_Reg_En;
  input [0:7]Dbg_Reg_En;
  input Dbg_Shift;
  input Status_Reg_En;
  input [0:1]wakeup_i;
  input ok_To_Stop;
  input [0:1]Reset_Mode;
  input \Using_FPGA.Native_2 ;
  input has_inhibit_EX;
  input [32:0]\Serial_Dbg_Intf.status_reg_reg[25]_0 ;
  input Scan_En;
  input Scan_Reset;
  input Scan_Reset_Sel;
  input Sleep_Decode;
  input jump;
  input dbg_clean_stop;
  input load_Store_i;
  input IReady;
  input inHibit_EX_reg;
  input Valid_Instr_i;
  input [0:0]\data_rd_reg_reg[30]_0 ;
  input [11:0]PC_EX_i;
  input Dbg_TDI;
  input [13:0]Address;
  input [0:0]\Serial_Dbg_Intf.status_reg_reg[22]_0 ;
  input [1:0]\data_rd_reg_reg[28]_0 ;

  wire A1;
  wire A2;
  wire A3;
  wire [13:0]Address;
  wire \Area_Debug_Control.Dbg_Inhibit_EX_FDRSE_n_2 ;
  wire \Area_Debug_Control.Stop_CPU_FDRSE_n_1 ;
  wire \Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_10 ;
  wire \Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_11 ;
  wire \Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_12 ;
  wire \Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_13 ;
  wire \Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_14 ;
  wire \Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_15 ;
  wire \Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_16 ;
  wire \Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_17 ;
  wire \Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_18 ;
  wire \Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_19 ;
  wire \Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_2 ;
  wire \Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_20 ;
  wire \Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_21 ;
  wire \Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_22 ;
  wire \Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_23 ;
  wire \Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_24 ;
  wire \Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_25 ;
  wire \Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_26 ;
  wire \Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_27 ;
  wire \Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_28 ;
  wire \Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_29 ;
  wire \Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_3 ;
  wire \Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_30 ;
  wire \Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_31 ;
  wire \Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_32 ;
  wire \Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_33 ;
  wire \Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_34 ;
  wire \Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_35 ;
  wire \Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_36 ;
  wire \Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_37 ;
  wire \Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_5 ;
  wire \Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_6 ;
  wire \Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_7 ;
  wire \Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_8 ;
  wire \Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_9 ;
  wire \Area_Debug_Control.dbg_hit[0]_i_1_n_0 ;
  wire \Area_Debug_Control.dbg_stop_Detected_reg_n_0 ;
  wire \Area_Debug_Control.force_stop_cmd_1_i_1_n_0 ;
  wire \Area_Debug_Control.normal_stop_cmd_hold_reg_0 ;
  wire \Area_Debug_Control.saved_reset_mode_sleep_1_i_1_n_0 ;
  wire Clk;
  wire Command_Reg_En;
  wire Config_Reg_En;
  wire Control_Reg_En;
  wire [0:0]D;
  wire Data_Read_Reg_En;
  wire Dbg_Capture;
  wire Dbg_Clk;
  wire [0:7]Dbg_Reg_En;
  wire Dbg_Shift;
  wire Dbg_Stop;
  wire Dbg_TDI;
  wire Dbg_TDO;
  wire Dbg_TDO_INST_0_i_10_n_0;
  wire Dbg_TDO_INST_0_i_16_n_0;
  wire Dbg_TDO_INST_0_i_17_n_0;
  wire Dbg_TDO_INST_0_i_18_n_0;
  wire Dbg_TDO_INST_0_i_19_n_0;
  wire Dbg_TDO_INST_0_i_20_n_0;
  wire Dbg_TDO_INST_0_i_21_n_0;
  wire Dbg_TDO_INST_0_i_22_n_0;
  wire Dbg_TDO_INST_0_i_27_n_0;
  wire Dbg_TDO_INST_0_i_28_n_0;
  wire Dbg_TDO_INST_0_i_29_n_0;
  wire Dbg_TDO_INST_0_i_30_n_0;
  wire Dbg_TDO_INST_0_i_31_n_0;
  wire Dbg_TDO_INST_0_i_32_n_0;
  wire Dbg_TDO_INST_0_i_33_n_0;
  wire Dbg_TDO_INST_0_i_34_n_0;
  wire Dbg_TDO_INST_0_i_35_n_0;
  wire Dbg_TDO_INST_0_i_36_n_0;
  wire Dbg_TDO_INST_0_i_7_n_0;
  wire Dbg_TDO_INST_0_i_8_n_0;
  wire Dbg_TDO_INST_0_i_9_n_0;
  wire [1:0]Dbg_Trig_Ack_In;
  wire [1:0]Dbg_Trig_Ack_Out;
  wire [1:0]Dbg_Trig_In;
  wire [1:0]Dbg_Trig_Out;
  wire Dbg_Update;
  wire Full_32_bit;
  wire Full_32_bit_1;
  wire IReady;
  wire IReady1_out;
  wire Instr_Insert_Reg_En;
  wire Instr_Insert_Reg_En_1;
  wire [36:0]LOCKSTEP_Master_Out;
  wire New_Dbg_Instr2_TCK;
  wire New_Dbg_Instr_TCK;
  wire New_Dbg_Instr_TCK0;
  wire New_Dbg_Instr_TCK2;
  wire [11:0]PC_EX_i;
  wire Pause;
  wire [0:0]Q;
  wire Q_0;
  wire Raw;
  wire [0:1]Reset_Mode;
  wire S;
  wire S_1;
  wire Scan_En;
  wire Scan_Reset;
  wire Scan_Reset_Sel;
  wire \Serial_Dbg_Intf.The_Cache_Addresses[2].SRL16E_Cache_I_n_0 ;
  wire \Serial_Dbg_Intf.The_Cache_Addresses[6].SRL16E_Cache_I_n_0 ;
  wire \Serial_Dbg_Intf.continue_from_brk_reg_n_0 ;
  wire \Serial_Dbg_Intf.control_reg_reg_n_0_[0] ;
  wire \Serial_Dbg_Intf.control_reg_reg_n_0_[3] ;
  wire \Serial_Dbg_Intf.control_reg_reg_n_0_[4] ;
  wire \Serial_Dbg_Intf.control_reg_reg_n_0_[5] ;
  wire \Serial_Dbg_Intf.if_debug_ready_i_reg_0 ;
  wire \Serial_Dbg_Intf.new_dbg_instr_shifting_CLK_reg_n_0 ;
  wire \Serial_Dbg_Intf.sample_synced_1_reg_n_0_[0] ;
  wire \Serial_Dbg_Intf.sample_synced_1_reg_n_0_[1] ;
  wire \Serial_Dbg_Intf.sample_synced_1_reg_n_0_[3] ;
  wire \Serial_Dbg_Intf.sample_synced_1_reg_n_0_[4] ;
  wire \Serial_Dbg_Intf.sample_synced_1_reg_n_0_[6] ;
  wire \Serial_Dbg_Intf.sample_synced_1_reg_n_0_[8] ;
  wire \Serial_Dbg_Intf.shift_count[0]_i_1_n_0 ;
  wire \Serial_Dbg_Intf.shift_count[1]_i_1_n_0 ;
  wire \Serial_Dbg_Intf.shift_count[2]_i_1_n_0 ;
  wire \Serial_Dbg_Intf.shift_count[3]_i_1_n_0 ;
  wire \Serial_Dbg_Intf.shift_count[4]_i_1_n_0 ;
  wire \Serial_Dbg_Intf.shift_count[5]_i_1_n_0 ;
  wire \Serial_Dbg_Intf.shift_count[5]_i_2_n_0 ;
  wire \Serial_Dbg_Intf.shift_count[6]_i_1_n_0 ;
  wire \Serial_Dbg_Intf.shift_count[7]_i_1_n_0 ;
  wire \Serial_Dbg_Intf.shift_count[7]_i_2_n_0 ;
  wire \Serial_Dbg_Intf.shift_count_reg_n_0_[0] ;
  wire \Serial_Dbg_Intf.shift_datain_reg_n_0_[10] ;
  wire \Serial_Dbg_Intf.shift_datain_reg_n_0_[11] ;
  wire \Serial_Dbg_Intf.shift_datain_reg_n_0_[12] ;
  wire \Serial_Dbg_Intf.shift_datain_reg_n_0_[13] ;
  wire \Serial_Dbg_Intf.shift_datain_reg_n_0_[14] ;
  wire \Serial_Dbg_Intf.shift_datain_reg_n_0_[15] ;
  wire \Serial_Dbg_Intf.shift_datain_reg_n_0_[16] ;
  wire \Serial_Dbg_Intf.shift_datain_reg_n_0_[17] ;
  wire \Serial_Dbg_Intf.shift_datain_reg_n_0_[18] ;
  wire \Serial_Dbg_Intf.shift_datain_reg_n_0_[19] ;
  wire \Serial_Dbg_Intf.shift_datain_reg_n_0_[1] ;
  wire \Serial_Dbg_Intf.shift_datain_reg_n_0_[20] ;
  wire \Serial_Dbg_Intf.shift_datain_reg_n_0_[21] ;
  wire \Serial_Dbg_Intf.shift_datain_reg_n_0_[22] ;
  wire \Serial_Dbg_Intf.shift_datain_reg_n_0_[23] ;
  wire \Serial_Dbg_Intf.shift_datain_reg_n_0_[24] ;
  wire \Serial_Dbg_Intf.shift_datain_reg_n_0_[25] ;
  wire \Serial_Dbg_Intf.shift_datain_reg_n_0_[26] ;
  wire \Serial_Dbg_Intf.shift_datain_reg_n_0_[27] ;
  wire \Serial_Dbg_Intf.shift_datain_reg_n_0_[28] ;
  wire \Serial_Dbg_Intf.shift_datain_reg_n_0_[29] ;
  wire \Serial_Dbg_Intf.shift_datain_reg_n_0_[2] ;
  wire \Serial_Dbg_Intf.shift_datain_reg_n_0_[30] ;
  wire \Serial_Dbg_Intf.shift_datain_reg_n_0_[31] ;
  wire \Serial_Dbg_Intf.shift_datain_reg_n_0_[3] ;
  wire \Serial_Dbg_Intf.shift_datain_reg_n_0_[4] ;
  wire \Serial_Dbg_Intf.shift_datain_reg_n_0_[5] ;
  wire \Serial_Dbg_Intf.shift_datain_reg_n_0_[6] ;
  wire \Serial_Dbg_Intf.shift_datain_reg_n_0_[7] ;
  wire \Serial_Dbg_Intf.shift_datain_reg_n_0_[8] ;
  wire \Serial_Dbg_Intf.shift_datain_reg_n_0_[9] ;
  wire [0:0]\Serial_Dbg_Intf.status_reg_reg[22]_0 ;
  wire [32:0]\Serial_Dbg_Intf.status_reg_reg[25]_0 ;
  wire \Serial_Dbg_Intf.status_reg_reg_n_0_[0] ;
  wire \Serial_Dbg_Intf.status_reg_reg_n_0_[16] ;
  wire \Serial_Dbg_Intf.status_reg_reg_n_0_[17] ;
  wire \Serial_Dbg_Intf.status_reg_reg_n_0_[18] ;
  wire \Serial_Dbg_Intf.status_reg_reg_n_0_[19] ;
  wire \Serial_Dbg_Intf.status_reg_reg_n_0_[20] ;
  wire \Serial_Dbg_Intf.status_reg_reg_n_0_[22] ;
  wire \Serial_Dbg_Intf.status_reg_reg_n_0_[23] ;
  wire \Serial_Dbg_Intf.status_reg_reg_n_0_[24] ;
  wire \Serial_Dbg_Intf.status_reg_reg_n_0_[25] ;
  wire \Serial_Dbg_Intf.status_reg_reg_n_0_[27] ;
  wire \Serial_Dbg_Intf.status_reg_reg_n_0_[28] ;
  wire \Serial_Dbg_Intf.status_reg_reg_n_0_[29] ;
  wire \Serial_Dbg_Intf.sync_dbg_wakeup_n_0 ;
  wire \Serial_Dbg_Intf.sync_sample_n_14 ;
  wire \Serial_Dbg_Intf.sync_sample_n_15 ;
  wire \Serial_Dbg_Intf.sync_stop_CPU_n_0 ;
  wire \Serial_Dbg_Intf.unchanged_i_1_n_0 ;
  wire Sleep;
  wire Sleep_Decode;
  wire Sleep_Out;
  wire Status_Reg_En;
  wire TDO_Data_Reg__31;
  wire TDO_Instr_Reg__0;
  wire TDO_Status_Reg__17;
  wire \Use_Async_Reset.sync_reset_reg ;
  wire \Use_Async_Reset.sync_reset_reg_0 ;
  wire \Use_Serial_Unified_Completion.completion_block_reg ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_PC_Breakpoints.All_PC_Brks[0].Serial_Interface_1.address_hit_I_n_1 ;
  wire Valid_Instr_i;
  wire branch_with_delay;
  wire capture_1;
  wire [0:1]command_reg;
  wire command_reg_clear;
  wire command_reg_clear_i_1_n_0;
  wire command_reg_rst;
  wire config_with_scan_reset;
  wire continue_from_brk0;
  wire continue_from_brk_TClk;
  wire continue_from_brk_rst;
  wire [0:32]data_rd_reg;
  wire \data_rd_reg[32]_i_1_n_0 ;
  wire [1:0]\data_rd_reg_reg[28]_0 ;
  wire [0:0]\data_rd_reg_reg[30]_0 ;
  wire [0:32]data_read_reg;
  wire dbg_brki_hit;
  wire dbg_brki_hit0;
  wire dbg_brki_hit_synced;
  wire dbg_clean_stop;
  wire dbg_halt_reset_mode_i_1_n_0;
  wire dbg_halt_reset_mode_reg_n_0;
  wire dbg_pause;
  wire dbg_stop_1;
  wire [0:0]delay_slot_instr_reg_0;
  wire delay_slot_instr_reg_1;
  wire exception_i_2_n_0;
  wire executing_i_1_n_0;
  wire force_stop_TClk;
  wire force_stop_cmd_1;
  wire force_stop_cmd_hold;
  wire force_stop_cmd_hold0;
  wire force_stop_cmd_i;
  wire force_stop_cmd_i0;
  wire force_stop_cmd_rst;
  wire force_stop_overrun;
  wire force_stop_overrun0;
  wire has_inhibit_EX;
  wire if_debug_ready_i0;
  wire inHibit_EX_reg;
  wire [0:1]instr_rd_reg;
  wire [0:1]instr_read_reg;
  wire jump;
  wire load_Store_i;
  wire mb_halted_1;
  wire no_sleeping;
  wire normal_stop_TClk;
  wire normal_stop_cmd_hold;
  wire normal_stop_cmd_hold0;
  wire normal_stop_cmd_i;
  wire normal_stop_cmd_i0;
  wire normal_stop_cmd_rst;
  wire of_PipeRun;
  wire ok_To_Stop;
  wire p_0_in;
  wire p_0_in30_in;
  wire p_12_in;
  wire p_1_in;
  wire pause_synced;
  wire pc_brk_1;
  wire read_register_MSR;
  wire read_register_MSR0;
  wire read_register_MSR_1_reg_0;
  wire read_register_PC;
  wire read_register_PC0;
  wire read_register_PC_1_reg_n_0;
  wire reg_Write_dbg;
  wire register_write;
  wire running_clock;
  wire running_clock_rst;
  wire running_clock_synced;
  wire [0:9]sample_synced;
  wire saved_reset_mode_dbg_halt;
  wire saved_reset_mode_dbg_halt_i_1_n_0;
  wire saved_reset_mode_sleep;
  wire saved_reset_mode_sleep_1;
  wire saved_reset_mode_sleep_i_1_n_0;
  wire [3:1]sel0;
  wire [0:0]sel0_2;
  wire single_Step_N;
  wire single_Step_N_i_1_n_0;
  wire single_Step_TClk;
  wire single_step_N_1;
  wire [0:1]single_step_count;
  wire \single_step_count[0]_i_1_n_0 ;
  wire \single_step_count[1]_i_1_n_0 ;
  wire sleep_reset_mode_i_1_n_0;
  wire sleep_reset_mode_i_2_n_0;
  wire sleep_synced;
  wire start_dbg_exec_reg_n_0;
  wire start_single_cmd;
  wire start_single_cmd0;
  wire start_single_step_i_1_n_0;
  wire start_single_step_reg_n_0;
  wire start_single_step_rst;
  wire step_continue_1;
  wire sync;
  wire sync_reset;
  wire sync_trig_ack_in_0_n_1;
  wire sync_trig_out_0_n_1;
  wire tdo_config_word1_0;
  wire tdo_config_word1_1;
  wire tdo_config_word1_10;
  wire tdo_config_word1_11;
  wire tdo_config_word1_13;
  wire tdo_config_word1_14;
  wire tdo_config_word1_5;
  wire tdo_config_word1_6;
  wire tdo_config_word1_7;
  wire tdo_config_word1_9;
  wire trig_ack_in_0_synced;
  wire trig_ack_in_0_synced_1;
  wire trig_out_0_synced;
  wire trig_out_0_synced_1;
  wire unchanged;
  wire use_Imm_Reg;
  wire [0:1]wakeup_i;
  wire wb_read_imm_reg_1_i;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRSE \Area_Debug_Control.Dbg_Inhibit_EX_FDRSE 
       (.Clk(Clk),
        .Reset_Mode(Reset_Mode),
        .S_1(S_1),
        .\Serial_Dbg_Intf.if_debug_ready_i_reg (\Area_Debug_Control.Dbg_Inhibit_EX_FDRSE_n_2 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_2 (\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_2 ),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_2 ),
        .\Using_FPGA.Native_4 (start_dbg_exec_reg_n_0),
        .\Using_FPGA.Native_5 (\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_5 ),
        .Valid_Instr_i(Valid_Instr_i),
        .\data_rd_reg_reg[32] (LOCKSTEP_Master_Out[35]),
        .\data_rd_reg_reg[32]_0 (read_register_MSR_1_reg_0),
        .\data_rd_reg_reg[32]_1 (register_write),
        .\data_rd_reg_reg[32]_2 (LOCKSTEP_Master_Out[34]),
        .load_Store_i(load_Store_i),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRSE_18 \Area_Debug_Control.Stop_CPU_FDRSE 
       (.\Area_Debug_Control.dbg_stop_Detected_reg (\Area_Debug_Control.dbg_stop_Detected_reg_n_0 ),
        .Clk(Clk),
        .Dbg_Stop(Dbg_Stop),
        .Reset_Mode(Reset_Mode),
        .S(S),
        .S_1(S_1),
        .\Use_Async_Reset.sync_reset_reg (\Use_Async_Reset.sync_reset_reg ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Area_Debug_Control.Stop_CPU_FDRSE_n_1 ),
        .\Using_FPGA.Native_2 (\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_2 ),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_2 ),
        .\Using_FPGA.Native_4 (\Serial_Dbg_Intf.new_dbg_instr_shifting_CLK_reg_n_0 ),
        .\Using_FPGA.Native_5 (\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_5 ),
        .dbg_stop_1(dbg_stop_1),
        .jump(jump),
        .sync_reset(sync_reset),
        .trig_out_0_synced(trig_out_0_synced),
        .trig_out_0_synced_1(trig_out_0_synced_1));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRSE_19 \Area_Debug_Control.Stop_Instr_Fetch_FDRSE 
       (.\Area_Debug_Control.normal_stop_cmd_hold_reg (\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_2 ),
        .Clk(Clk),
        .D(instr_rd_reg[1]),
        .E(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_37 ),
        .PC_EX_i(PC_EX_i),
        .Q(\Serial_Dbg_Intf.control_reg_reg_n_0_[0] ),
        .Reset_Mode(Reset_Mode),
        .S_1(S_1),
        .Sleep_Out(Sleep_Out),
        .\Use_Async_Reset.sync_reset_reg (\Use_Async_Reset.sync_reset_reg_0 ),
        .\Use_Async_Reset.sync_reset_reg_0 (\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_6 ),
        .\Using_FPGA.Native_0 (LOCKSTEP_Master_Out[34]),
        .\Using_FPGA.Native_1 ({\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_7 ,\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_8 ,\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_9 ,\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_10 ,\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_11 ,\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_12 ,\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_13 ,\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_14 ,\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_15 ,\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_16 ,\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_17 ,\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_18 ,\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_19 ,\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_20 ,\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_21 ,\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_22 ,\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_23 ,\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_24 ,\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_25 ,\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_26 ,\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_27 ,\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_28 ,\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_29 ,\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_30 ,\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_31 ,\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_32 ,\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_33 ,\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_34 ,\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_35 ,\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_36 }),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_2 ),
        .\Using_FPGA.Native_3 (\Serial_Dbg_Intf.sample_synced_1_reg_n_0_[6] ),
        .\Using_FPGA.Native_4 (force_stop_cmd_i),
        .\Using_FPGA.Native_5 (force_stop_cmd_hold),
        .\Using_FPGA.Native_6 (\Area_Debug_Control.dbg_stop_Detected_reg_n_0 ),
        .\Using_FPGA.Native_7 (dbg_halt_reset_mode_reg_n_0),
        .\Using_FPGA.Native_8 (start_single_step_reg_n_0),
        .\Using_FPGA.Native_9 (\Serial_Dbg_Intf.continue_from_brk_reg_n_0 ),
        .\data_rd_reg_reg[30] (\data_rd_reg_reg[30]_0 ),
        .\data_rd_reg_reg[31] (register_write),
        .\data_rd_reg_reg[31]_0 (read_register_MSR_1_reg_0),
        .\data_rd_reg_reg[31]_1 (read_register_PC_1_reg_n_0),
        .dbg_clean_stop(dbg_clean_stop),
        .exception_reg(\Serial_Dbg_Intf.status_reg_reg[25]_0 [31:0]),
        .exception_reg_0(exception_i_2_n_0),
        .force_stop_overrun(force_stop_overrun),
        .normal_stop_cmd_hold(normal_stop_cmd_hold),
        .normal_stop_cmd_i(normal_stop_cmd_i),
        .ok_To_Stop(ok_To_Stop),
        .saved_reset_mode_dbg_halt(saved_reset_mode_dbg_halt),
        .saved_reset_mode_sleep(saved_reset_mode_sleep),
        .saved_reset_mode_sleep_1(saved_reset_mode_sleep_1),
        .start_single_step_reg(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_5 ),
        .sync_reset(sync_reset),
        .trace_exception_taken_i_reg(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_3 ));
  FDRE \Area_Debug_Control.dbg_brki_hit_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(dbg_brki_hit0),
        .Q(dbg_brki_hit),
        .R(sync_reset));
  LUT4 #(
    .INIT(16'hA3A0)) 
    \Area_Debug_Control.dbg_hit[0]_i_1 
       (.I0(single_step_N_1),
        .I1(step_continue_1),
        .I2(pc_brk_1),
        .I3(Raw),
        .O(\Area_Debug_Control.dbg_hit[0]_i_1_n_0 ));
  FDRE \Area_Debug_Control.dbg_hit_i_1_reg[0] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_PC_Breakpoints.All_PC_Brks[0].Serial_Interface_1.address_hit_I_n_1 ),
        .Q(pc_brk_1),
        .R(sync_reset));
  FDRE \Area_Debug_Control.dbg_hit_reg[0] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Area_Debug_Control.dbg_hit[0]_i_1_n_0 ),
        .Q(Raw),
        .R(sync_reset));
  FDRE \Area_Debug_Control.dbg_stop_1_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(Dbg_Stop),
        .Q(dbg_stop_1),
        .R(sync_reset));
  FDRE \Area_Debug_Control.dbg_stop_Detected_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\Area_Debug_Control.Stop_CPU_FDRSE_n_1 ),
        .Q(\Area_Debug_Control.dbg_stop_Detected_reg_n_0 ),
        .R(sync_reset));
  (* SOFT_HLUTNM = "soft_lutpair93" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \Area_Debug_Control.force_stop_cmd_1_i_1 
       (.I0(force_stop_cmd_hold),
        .I1(force_stop_cmd_i),
        .O(\Area_Debug_Control.force_stop_cmd_1_i_1_n_0 ));
  FDRE \Area_Debug_Control.force_stop_cmd_1_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\Area_Debug_Control.force_stop_cmd_1_i_1_n_0 ),
        .Q(force_stop_cmd_1),
        .R(sync_reset));
  FDRE \Area_Debug_Control.force_stop_cmd_hold_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(force_stop_cmd_hold0),
        .Q(force_stop_cmd_hold),
        .R(sync_reset));
  (* SOFT_HLUTNM = "soft_lutpair93" *) 
  LUT3 #(
    .INIT(8'h02)) 
    \Area_Debug_Control.force_stop_overrun_i_1 
       (.I0(force_stop_cmd_1),
        .I1(force_stop_cmd_i),
        .I2(force_stop_cmd_hold),
        .O(force_stop_overrun0));
  FDRE \Area_Debug_Control.force_stop_overrun_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(force_stop_overrun0),
        .Q(force_stop_overrun),
        .R(sync_reset));
  FDRE \Area_Debug_Control.mb_halted_i_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_6 ),
        .Q(D),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h01010100FFFFFF00)) 
    \Area_Debug_Control.normal_stop_cmd_hold_i_1 
       (.I0(dbg_clean_stop),
        .I1(force_stop_cmd_hold),
        .I2(force_stop_cmd_i),
        .I3(normal_stop_cmd_i),
        .I4(normal_stop_cmd_hold),
        .I5(ok_To_Stop),
        .O(normal_stop_cmd_hold0));
  FDRE \Area_Debug_Control.normal_stop_cmd_hold_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(normal_stop_cmd_hold0),
        .Q(normal_stop_cmd_hold),
        .R(sync_reset));
  (* SOFT_HLUTNM = "soft_lutpair88" *) 
  LUT4 #(
    .INIT(16'h2F20)) 
    \Area_Debug_Control.saved_reset_mode_sleep_1_i_1 
       (.I0(Reset_Mode[1]),
        .I1(Reset_Mode[0]),
        .I2(sync_reset),
        .I3(saved_reset_mode_sleep),
        .O(\Area_Debug_Control.saved_reset_mode_sleep_1_i_1_n_0 ));
  FDRE \Area_Debug_Control.saved_reset_mode_sleep_1_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\Area_Debug_Control.saved_reset_mode_sleep_1_i_1_n_0 ),
        .Q(saved_reset_mode_sleep_1),
        .R(1'b0));
  FDRE \Area_Debug_Control.single_step_N_1_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(single_Step_N),
        .Q(single_step_N_1),
        .R(sync_reset));
  LUT2 #(
    .INIT(4'hE)) 
    \Area_Debug_Control.step_continue_1_i_1 
       (.I0(\Serial_Dbg_Intf.continue_from_brk_reg_n_0 ),
        .I1(start_single_step_reg_n_0),
        .O(p_12_in));
  FDRE \Area_Debug_Control.step_continue_1_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(p_12_in),
        .Q(step_continue_1),
        .R(sync_reset));
  FDRE \Area_Debug_Control.trig_ack_out_0_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(sync_trig_out_0_n_1),
        .Q(Dbg_Trig_Ack_Out[1]),
        .R(sync_reset));
  FDRE \Area_Debug_Control.trig_out_0_synced_1_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(trig_out_0_synced),
        .Q(trig_out_0_synced_1),
        .R(sync_reset));
  FDRE \Area_Optimized.register_write_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(reg_Write_dbg),
        .Q(register_write),
        .R(sync_reset));
  FDRE \Area_Optimized.wb_read_imm_reg_1_i_reg 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(use_Imm_Reg),
        .Q(wb_read_imm_reg_1_i),
        .R(sync_reset));
  (* SOFT_HLUTNM = "soft_lutpair87" *) 
  LUT5 #(
    .INIT(32'h20000002)) 
    Dbg_TDO_INST_0_i_10
       (.I0(\Serial_Dbg_Intf.status_reg_reg_n_0_[0] ),
        .I1(\Serial_Dbg_Intf.shift_count_reg_n_0_[0] ),
        .I2(A3),
        .I3(A1),
        .I4(A2),
        .O(Dbg_TDO_INST_0_i_10_n_0));
  (* SOFT_HLUTNM = "soft_lutpair90" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    Dbg_TDO_INST_0_i_15
       (.I0(instr_read_reg[1]),
        .I1(\Serial_Dbg_Intf.shift_count_reg_n_0_[0] ),
        .I2(instr_read_reg[0]),
        .O(TDO_Instr_Reg__0));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    Dbg_TDO_INST_0_i_16
       (.I0(Dbg_TDO_INST_0_i_27_n_0),
        .I1(Dbg_TDO_INST_0_i_28_n_0),
        .I2(Dbg_TDO_INST_0_i_29_n_0),
        .I3(Dbg_TDO_INST_0_i_30_n_0),
        .I4(Dbg_TDO_INST_0_i_31_n_0),
        .I5(Dbg_TDO_INST_0_i_32_n_0),
        .O(Dbg_TDO_INST_0_i_16_n_0));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    Dbg_TDO_INST_0_i_17
       (.I0(Dbg_TDO_INST_0_i_33_n_0),
        .I1(Dbg_TDO_INST_0_i_34_n_0),
        .I2(Dbg_TDO_INST_0_i_29_n_0),
        .I3(Dbg_TDO_INST_0_i_35_n_0),
        .I4(Dbg_TDO_INST_0_i_31_n_0),
        .I5(Dbg_TDO_INST_0_i_36_n_0),
        .O(Dbg_TDO_INST_0_i_17_n_0));
  (* SOFT_HLUTNM = "soft_lutpair92" *) 
  LUT4 #(
    .INIT(16'h0001)) 
    Dbg_TDO_INST_0_i_18
       (.I0(A2),
        .I1(A1),
        .I2(\Serial_Dbg_Intf.shift_count_reg_n_0_[0] ),
        .I3(A3),
        .O(Dbg_TDO_INST_0_i_18_n_0));
  LUT2 #(
    .INIT(4'h6)) 
    Dbg_TDO_INST_0_i_19
       (.I0(A1),
        .I1(A2),
        .O(Dbg_TDO_INST_0_i_19_n_0));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    Dbg_TDO_INST_0_i_20
       (.I0(\Serial_Dbg_Intf.status_reg_reg_n_0_[23] ),
        .I1(\Serial_Dbg_Intf.status_reg_reg_n_0_[22] ),
        .I2(A1),
        .I3(\Serial_Dbg_Intf.status_reg_reg_n_0_[25] ),
        .I4(\Serial_Dbg_Intf.shift_count_reg_n_0_[0] ),
        .I5(\Serial_Dbg_Intf.status_reg_reg_n_0_[24] ),
        .O(Dbg_TDO_INST_0_i_20_n_0));
  LUT5 #(
    .INIT(32'hB833B800)) 
    Dbg_TDO_INST_0_i_21
       (.I0(\Serial_Dbg_Intf.status_reg_reg_n_0_[27] ),
        .I1(A1),
        .I2(\Serial_Dbg_Intf.status_reg_reg_n_0_[29] ),
        .I3(\Serial_Dbg_Intf.shift_count_reg_n_0_[0] ),
        .I4(\Serial_Dbg_Intf.status_reg_reg_n_0_[28] ),
        .O(Dbg_TDO_INST_0_i_21_n_0));
  LUT5 #(
    .INIT(32'hA0A0CFC0)) 
    Dbg_TDO_INST_0_i_22
       (.I0(\Serial_Dbg_Intf.status_reg_reg_n_0_[19] ),
        .I1(\Serial_Dbg_Intf.status_reg_reg_n_0_[18] ),
        .I2(A1),
        .I3(\Serial_Dbg_Intf.status_reg_reg_n_0_[20] ),
        .I4(\Serial_Dbg_Intf.shift_count_reg_n_0_[0] ),
        .O(Dbg_TDO_INST_0_i_22_n_0));
  LUT6 #(
    .INIT(64'hFCAF0CAFFCA00CA0)) 
    Dbg_TDO_INST_0_i_27
       (.I0(data_read_reg[1]),
        .I1(data_read_reg[2]),
        .I2(\Serial_Dbg_Intf.shift_count_reg_n_0_[0] ),
        .I3(A1),
        .I4(data_read_reg[3]),
        .I5(data_read_reg[4]),
        .O(Dbg_TDO_INST_0_i_27_n_0));
  LUT6 #(
    .INIT(64'hFCAF0CAFFCA00CA0)) 
    Dbg_TDO_INST_0_i_28
       (.I0(data_read_reg[5]),
        .I1(data_read_reg[6]),
        .I2(\Serial_Dbg_Intf.shift_count_reg_n_0_[0] ),
        .I3(A1),
        .I4(data_read_reg[7]),
        .I5(data_read_reg[8]),
        .O(Dbg_TDO_INST_0_i_28_n_0));
  (* SOFT_HLUTNM = "soft_lutpair87" *) 
  LUT4 #(
    .INIT(16'h01FE)) 
    Dbg_TDO_INST_0_i_29
       (.I0(A2),
        .I1(A1),
        .I2(\Serial_Dbg_Intf.shift_count_reg_n_0_[0] ),
        .I3(A3),
        .O(Dbg_TDO_INST_0_i_29_n_0));
  LUT6 #(
    .INIT(64'hACFAFFCFAC0A00C0)) 
    Dbg_TDO_INST_0_i_3
       (.I0(Dbg_TDO_INST_0_i_7_n_0),
        .I1(Dbg_TDO_INST_0_i_8_n_0),
        .I2(A3),
        .I3(Dbg_TDO_INST_0_i_9_n_0),
        .I4(sel0_2),
        .I5(Dbg_TDO_INST_0_i_10_n_0),
        .O(TDO_Status_Reg__17));
  LUT6 #(
    .INIT(64'hFCAF0CAFFCA00CA0)) 
    Dbg_TDO_INST_0_i_30
       (.I0(data_read_reg[9]),
        .I1(data_read_reg[10]),
        .I2(\Serial_Dbg_Intf.shift_count_reg_n_0_[0] ),
        .I3(A1),
        .I4(data_read_reg[11]),
        .I5(data_read_reg[12]),
        .O(Dbg_TDO_INST_0_i_30_n_0));
  (* SOFT_HLUTNM = "soft_lutpair92" *) 
  LUT3 #(
    .INIT(8'h1E)) 
    Dbg_TDO_INST_0_i_31
       (.I0(\Serial_Dbg_Intf.shift_count_reg_n_0_[0] ),
        .I1(A1),
        .I2(A2),
        .O(Dbg_TDO_INST_0_i_31_n_0));
  LUT6 #(
    .INIT(64'hFCAF0CAFFCA00CA0)) 
    Dbg_TDO_INST_0_i_32
       (.I0(data_read_reg[13]),
        .I1(data_read_reg[14]),
        .I2(\Serial_Dbg_Intf.shift_count_reg_n_0_[0] ),
        .I3(A1),
        .I4(data_read_reg[15]),
        .I5(data_read_reg[16]),
        .O(Dbg_TDO_INST_0_i_32_n_0));
  LUT6 #(
    .INIT(64'hFCAF0CAFFCA00CA0)) 
    Dbg_TDO_INST_0_i_33
       (.I0(data_read_reg[17]),
        .I1(data_read_reg[18]),
        .I2(\Serial_Dbg_Intf.shift_count_reg_n_0_[0] ),
        .I3(A1),
        .I4(data_read_reg[19]),
        .I5(data_read_reg[20]),
        .O(Dbg_TDO_INST_0_i_33_n_0));
  LUT6 #(
    .INIT(64'hFCAF0CAFFCA00CA0)) 
    Dbg_TDO_INST_0_i_34
       (.I0(data_read_reg[21]),
        .I1(data_read_reg[22]),
        .I2(\Serial_Dbg_Intf.shift_count_reg_n_0_[0] ),
        .I3(A1),
        .I4(data_read_reg[23]),
        .I5(data_read_reg[24]),
        .O(Dbg_TDO_INST_0_i_34_n_0));
  LUT6 #(
    .INIT(64'hFCAF0CAFFCA00CA0)) 
    Dbg_TDO_INST_0_i_35
       (.I0(data_read_reg[25]),
        .I1(data_read_reg[26]),
        .I2(\Serial_Dbg_Intf.shift_count_reg_n_0_[0] ),
        .I3(A1),
        .I4(data_read_reg[27]),
        .I5(data_read_reg[28]),
        .O(Dbg_TDO_INST_0_i_35_n_0));
  LUT6 #(
    .INIT(64'hFCAF0CAFFCA00CA0)) 
    Dbg_TDO_INST_0_i_36
       (.I0(data_read_reg[29]),
        .I1(data_read_reg[30]),
        .I2(\Serial_Dbg_Intf.shift_count_reg_n_0_[0] ),
        .I3(A1),
        .I4(data_read_reg[31]),
        .I5(data_read_reg[32]),
        .O(Dbg_TDO_INST_0_i_36_n_0));
  LUT6 #(
    .INIT(64'hFCFFAFCA0C00A0CA)) 
    Dbg_TDO_INST_0_i_6
       (.I0(Dbg_TDO_INST_0_i_16_n_0),
        .I1(Dbg_TDO_INST_0_i_17_n_0),
        .I2(sel0_2),
        .I3(Dbg_TDO_INST_0_i_18_n_0),
        .I4(sel0[1]),
        .I5(data_read_reg[0]),
        .O(TDO_Data_Reg__31));
  MUXF7 Dbg_TDO_INST_0_i_7
       (.I0(Dbg_TDO_INST_0_i_20_n_0),
        .I1(Dbg_TDO_INST_0_i_21_n_0),
        .O(Dbg_TDO_INST_0_i_7_n_0),
        .S(Dbg_TDO_INST_0_i_19_n_0));
  LUT6 #(
    .INIT(64'h2B2B2B2828282B28)) 
    Dbg_TDO_INST_0_i_8
       (.I0(Dbg_TDO_INST_0_i_22_n_0),
        .I1(A1),
        .I2(A2),
        .I3(\Serial_Dbg_Intf.status_reg_reg_n_0_[16] ),
        .I4(\Serial_Dbg_Intf.shift_count_reg_n_0_[0] ),
        .I5(\Serial_Dbg_Intf.status_reg_reg_n_0_[17] ),
        .O(Dbg_TDO_INST_0_i_8_n_0));
  (* SOFT_HLUTNM = "soft_lutpair95" *) 
  LUT2 #(
    .INIT(4'h7)) 
    Dbg_TDO_INST_0_i_9
       (.I0(A1),
        .I1(A2),
        .O(Dbg_TDO_INST_0_i_9_n_0));
  FDRE Full_32_bit_1_reg
       (.C(Clk),
        .CE(delay_slot_instr_reg_1),
        .D(wb_read_imm_reg_1_i),
        .Q(Full_32_bit_1),
        .R(sync_reset));
  FDRE Full_32_bit_reg
       (.C(Clk),
        .CE(delay_slot_instr_reg_1),
        .D(use_Imm_Reg),
        .Q(Full_32_bit),
        .R(sync_reset));
  LUT2 #(
    .INIT(4'hE)) 
    I_AS_INST_0_i_1
       (.I0(LOCKSTEP_Master_Out[35]),
        .I1(IReady),
        .O(IReady1_out));
  LUT5 #(
    .INIT(32'h00000010)) 
    \Serial_Dbg_Intf.Instr_Insert_Reg_En_1_i_1 
       (.I0(\Use_Serial_Unified_Completion.completion_block_reg ),
        .I1(Dbg_Reg_En[6]),
        .I2(Dbg_Reg_En[5]),
        .I3(Dbg_Reg_En[4]),
        .I4(Dbg_Reg_En[7]),
        .O(Instr_Insert_Reg_En));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.Instr_Insert_Reg_En_1_reg 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(Instr_Insert_Reg_En),
        .Q(Instr_Insert_Reg_En_1));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Dbg_Instr2_TCK_reg 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(New_Dbg_Instr_TCK),
        .Q(New_Dbg_Instr2_TCK));
  (* SOFT_HLUTNM = "soft_lutpair90" *) 
  LUT4 #(
    .INIT(16'h0008)) 
    \Serial_Dbg_Intf.New_Dbg_Instr_TCK_i_1 
       (.I0(Instr_Insert_Reg_En),
        .I1(New_Dbg_Instr_TCK2),
        .I2(instr_read_reg[1]),
        .I3(instr_read_reg[0]),
        .O(New_Dbg_Instr_TCK0));
  (* SOFT_HLUTNM = "soft_lutpair84" *) 
  LUT5 #(
    .INIT(32'h40000000)) 
    \Serial_Dbg_Intf.New_Dbg_Instr_TCK_i_2 
       (.I0(\Serial_Dbg_Intf.shift_count_reg_n_0_[0] ),
        .I1(A1),
        .I2(sel0_2),
        .I3(A3),
        .I4(A2),
        .O(New_Dbg_Instr_TCK2));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Dbg_Instr_TCK_reg 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(New_Dbg_Instr_TCK0),
        .Q(New_Dbg_Instr_TCK));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[0] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[1] ),
        .Q(LOCKSTEP_Master_Out[31]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[10] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[11] ),
        .Q(LOCKSTEP_Master_Out[21]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[11] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[12] ),
        .Q(LOCKSTEP_Master_Out[20]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[12] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[13] ),
        .Q(LOCKSTEP_Master_Out[19]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[13] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[14] ),
        .Q(LOCKSTEP_Master_Out[18]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[14] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[15] ),
        .Q(LOCKSTEP_Master_Out[17]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[15] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[16] ),
        .Q(LOCKSTEP_Master_Out[16]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[16] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[17] ),
        .Q(LOCKSTEP_Master_Out[15]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[17] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[18] ),
        .Q(LOCKSTEP_Master_Out[14]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[18] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[19] ),
        .Q(LOCKSTEP_Master_Out[13]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[19] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[20] ),
        .Q(LOCKSTEP_Master_Out[12]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[1] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[2] ),
        .Q(LOCKSTEP_Master_Out[30]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[20] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[21] ),
        .Q(LOCKSTEP_Master_Out[11]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[21] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[22] ),
        .Q(LOCKSTEP_Master_Out[10]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[22] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[23] ),
        .Q(LOCKSTEP_Master_Out[9]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[23] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[24] ),
        .Q(LOCKSTEP_Master_Out[8]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[24] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[25] ),
        .Q(LOCKSTEP_Master_Out[7]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[25] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[26] ),
        .Q(LOCKSTEP_Master_Out[6]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[26] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[27] ),
        .Q(LOCKSTEP_Master_Out[5]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[27] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[28] ),
        .Q(LOCKSTEP_Master_Out[4]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[28] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[29] ),
        .Q(LOCKSTEP_Master_Out[3]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[29] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[30] ),
        .Q(LOCKSTEP_Master_Out[2]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[2] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[3] ),
        .Q(LOCKSTEP_Master_Out[29]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[30] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[31] ),
        .Q(LOCKSTEP_Master_Out[1]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[31] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(Dbg_TDI),
        .Q(LOCKSTEP_Master_Out[0]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[3] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[4] ),
        .Q(LOCKSTEP_Master_Out[28]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[4] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[5] ),
        .Q(LOCKSTEP_Master_Out[27]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[5] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[6] ),
        .Q(LOCKSTEP_Master_Out[26]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[6] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[7] ),
        .Q(LOCKSTEP_Master_Out[25]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[7] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[8] ),
        .Q(LOCKSTEP_Master_Out[24]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[8] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[9] ),
        .Q(LOCKSTEP_Master_Out[23]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[9] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[10] ),
        .Q(LOCKSTEP_Master_Out[22]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E__parameterized0 \Serial_Dbg_Intf.SRL16E_1 
       (.Dbg_Clk(Dbg_Clk),
        .Q({A3,A2,A1,\Serial_Dbg_Intf.shift_count_reg_n_0_[0] }),
        .Q_0(Q_0));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E__parameterized1 \Serial_Dbg_Intf.SRL16E_2 
       (.Dbg_Clk(Dbg_Clk),
        .Q({A3,A2,A1,\Serial_Dbg_Intf.shift_count_reg_n_0_[0] }),
        .tdo_config_word1_14(tdo_config_word1_14));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E__parameterized4 \Serial_Dbg_Intf.SRL16E_3 
       (.Dbg_Clk(Dbg_Clk),
        .Q({A3,A2,A1,\Serial_Dbg_Intf.shift_count_reg_n_0_[0] }),
        .tdo_config_word1_5(tdo_config_word1_5));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E__parameterized5 \Serial_Dbg_Intf.SRL16E_4 
       (.Config_Reg_En(Config_Reg_En),
        .Data_Read_Reg_En(Data_Read_Reg_En),
        .Dbg_Clk(Dbg_Clk),
        .Dbg_TDO(Dbg_TDO),
        .Dbg_TDO_INST_0_i_2_0(\Serial_Dbg_Intf.The_Cache_Addresses[2].SRL16E_Cache_I_n_0 ),
        .Instr_Insert_Reg_En(Instr_Insert_Reg_En),
        .Q({sel0,sel0_2,A3,A2,A1,\Serial_Dbg_Intf.shift_count_reg_n_0_[0] }),
        .Status_Reg_En(Status_Reg_En),
        .TDO_Data_Reg__31(TDO_Data_Reg__31),
        .TDO_Instr_Reg__0(TDO_Instr_Reg__0),
        .TDO_Status_Reg__17(TDO_Status_Reg__17),
        .tdo_config_word1_0(tdo_config_word1_0),
        .tdo_config_word1_1(tdo_config_word1_1),
        .tdo_config_word1_5(tdo_config_word1_5),
        .tdo_config_word1_6(tdo_config_word1_6),
        .tdo_config_word1_7(tdo_config_word1_7));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E__parameterized1_20 \Serial_Dbg_Intf.The_Base_Vector[1].SRL16E_Base_Vector 
       (.Dbg_Clk(Dbg_Clk),
        .Q({A3,A2,A1,\Serial_Dbg_Intf.shift_count_reg_n_0_[0] }),
        .tdo_config_word1_1(tdo_config_word1_1));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E__parameterized1_21 \Serial_Dbg_Intf.The_Base_Vector[2].SRL16E_Base_Vector 
       (.Dbg_Clk(Dbg_Clk),
        .Q({A3,A2,A1,\Serial_Dbg_Intf.shift_count_reg_n_0_[0] }),
        .tdo_config_word1_0(tdo_config_word1_0));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E__parameterized2 \Serial_Dbg_Intf.The_Cache_Addresses[1].SRL16E_Cache_I 
       (.Dbg_Clk(Dbg_Clk),
        .Q({A3,A2,A1,\Serial_Dbg_Intf.shift_count_reg_n_0_[0] }),
        .tdo_config_word1_13(tdo_config_word1_13));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E__parameterized3 \Serial_Dbg_Intf.The_Cache_Addresses[2].SRL16E_Cache_I 
       (.Dbg_Clk(Dbg_Clk),
        .Dbg_TDO_INST_0_i_5(\Serial_Dbg_Intf.The_Cache_Addresses[6].SRL16E_Cache_I_n_0 ),
        .Q({sel0[2:1],sel0_2,A3,A2,A1,\Serial_Dbg_Intf.shift_count_reg_n_0_[0] }),
        .Q_0(Q_0),
        .\Serial_Dbg_Intf.shift_count_reg[6] (\Serial_Dbg_Intf.The_Cache_Addresses[2].SRL16E_Cache_I_n_0 ),
        .tdo_config_word1_13(tdo_config_word1_13),
        .tdo_config_word1_14(tdo_config_word1_14));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E__parameterized1_22 \Serial_Dbg_Intf.The_Cache_Addresses[3].SRL16E_Cache_I 
       (.Dbg_Clk(Dbg_Clk),
        .Q({A3,A2,A1,\Serial_Dbg_Intf.shift_count_reg_n_0_[0] }),
        .tdo_config_word1_11(tdo_config_word1_11));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E__parameterized1_23 \Serial_Dbg_Intf.The_Cache_Addresses[4].SRL16E_Cache_I 
       (.Dbg_Clk(Dbg_Clk),
        .Q({A3,A2,A1,\Serial_Dbg_Intf.shift_count_reg_n_0_[0] }),
        .tdo_config_word1_10(tdo_config_word1_10));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E__parameterized2_24 \Serial_Dbg_Intf.The_Cache_Addresses[5].SRL16E_Cache_I 
       (.Dbg_Clk(Dbg_Clk),
        .Q({A3,A2,A1,\Serial_Dbg_Intf.shift_count_reg_n_0_[0] }),
        .tdo_config_word1_9(tdo_config_word1_9));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E__parameterized3_25 \Serial_Dbg_Intf.The_Cache_Addresses[6].SRL16E_Cache_I 
       (.Dbg_Clk(Dbg_Clk),
        .Q({sel0[1],sel0_2,A3,A2,A1,\Serial_Dbg_Intf.shift_count_reg_n_0_[0] }),
        .\Serial_Dbg_Intf.shift_count_reg[5] (\Serial_Dbg_Intf.The_Cache_Addresses[6].SRL16E_Cache_I_n_0 ),
        .tdo_config_word1_10(tdo_config_word1_10),
        .tdo_config_word1_11(tdo_config_word1_11),
        .tdo_config_word1_9(tdo_config_word1_9));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E__parameterized1_26 \Serial_Dbg_Intf.The_Cache_Addresses[7].SRL16E_Cache_I 
       (.Dbg_Clk(Dbg_Clk),
        .Q({A3,A2,A1,\Serial_Dbg_Intf.shift_count_reg_n_0_[0] }),
        .tdo_config_word1_7(tdo_config_word1_7));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E__parameterized1_27 \Serial_Dbg_Intf.The_Cache_Addresses[8].SRL16E_Cache_I 
       (.Dbg_Clk(Dbg_Clk),
        .Q({A3,A2,A1,\Serial_Dbg_Intf.shift_count_reg_n_0_[0] }),
        .tdo_config_word1_6(tdo_config_word1_6));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.capture_1_reg 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(Dbg_Capture),
        .Q(capture_1));
  LUT5 #(
    .INIT(32'h00000010)) 
    \Serial_Dbg_Intf.command_reg[0]_i_1 
       (.I0(\Use_Serial_Unified_Completion.completion_block_reg ),
        .I1(Dbg_Reg_En[7]),
        .I2(Dbg_Reg_En[6]),
        .I3(Dbg_Reg_En[4]),
        .I4(Dbg_Reg_En[5]),
        .O(Command_Reg_En));
  LUT4 #(
    .INIT(16'h4540)) 
    \Serial_Dbg_Intf.command_reg[0]_i_2 
       (.I0(Scan_En),
        .I1(Scan_Reset),
        .I2(Scan_Reset_Sel),
        .I3(command_reg_clear),
        .O(command_reg_rst));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.command_reg_reg[0] 
       (.C(Dbg_Update),
        .CE(Command_Reg_En),
        .CLR(command_reg_rst),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[30] ),
        .Q(command_reg[0]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.command_reg_reg[1] 
       (.C(Dbg_Update),
        .CE(Command_Reg_En),
        .CLR(command_reg_rst),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[31] ),
        .Q(command_reg[1]));
  LUT4 #(
    .INIT(16'h4540)) 
    \Serial_Dbg_Intf.continue_from_brk_TClk_i_1 
       (.I0(Scan_En),
        .I1(Scan_Reset),
        .I2(Scan_Reset_Sel),
        .I3(\Serial_Dbg_Intf.continue_from_brk_reg_n_0 ),
        .O(continue_from_brk_rst));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.continue_from_brk_TClk_reg 
       (.C(Dbg_Update),
        .CE(Control_Reg_En),
        .CLR(continue_from_brk_rst),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[24] ),
        .Q(continue_from_brk_TClk));
  FDRE \Serial_Dbg_Intf.continue_from_brk_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(continue_from_brk0),
        .Q(\Serial_Dbg_Intf.continue_from_brk_reg_n_0 ),
        .R(sync_reset));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.control_reg_reg[0] 
       (.C(Dbg_Update),
        .CE(Control_Reg_En),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[22] ),
        .Q(\Serial_Dbg_Intf.control_reg_reg_n_0_[0] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.control_reg_reg[3] 
       (.C(Dbg_Update),
        .CE(Control_Reg_En),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[25] ),
        .Q(\Serial_Dbg_Intf.control_reg_reg_n_0_[3] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.control_reg_reg[4] 
       (.C(Dbg_Update),
        .CE(Control_Reg_En),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[26] ),
        .Q(\Serial_Dbg_Intf.control_reg_reg_n_0_[4] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.control_reg_reg[5] 
       (.C(Dbg_Update),
        .CE(Control_Reg_En),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[27] ),
        .Q(\Serial_Dbg_Intf.control_reg_reg_n_0_[5] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.control_reg_reg[8] 
       (.C(Dbg_Update),
        .CE(Control_Reg_En),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[30] ),
        .Q(Q));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[0] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[0]),
        .Q(data_read_reg[0]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[10] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[10]),
        .Q(data_read_reg[10]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[11] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[11]),
        .Q(data_read_reg[11]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[12] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[12]),
        .Q(data_read_reg[12]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[13] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[13]),
        .Q(data_read_reg[13]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[14] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[14]),
        .Q(data_read_reg[14]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[15] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[15]),
        .Q(data_read_reg[15]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[16] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[16]),
        .Q(data_read_reg[16]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[17] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[17]),
        .Q(data_read_reg[17]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[18] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[18]),
        .Q(data_read_reg[18]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[19] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[19]),
        .Q(data_read_reg[19]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[1] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[1]),
        .Q(data_read_reg[1]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[20] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[20]),
        .Q(data_read_reg[20]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[21] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[21]),
        .Q(data_read_reg[21]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[22] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[22]),
        .Q(data_read_reg[22]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[23] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[23]),
        .Q(data_read_reg[23]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[24] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[24]),
        .Q(data_read_reg[24]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[25] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[25]),
        .Q(data_read_reg[25]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[26] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[26]),
        .Q(data_read_reg[26]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[27] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[27]),
        .Q(data_read_reg[27]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[28] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[28]),
        .Q(data_read_reg[28]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[29] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[29]),
        .Q(data_read_reg[29]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[2] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[2]),
        .Q(data_read_reg[2]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[30] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[30]),
        .Q(data_read_reg[30]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[31] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[31]),
        .Q(data_read_reg[31]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[32] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[32]),
        .Q(data_read_reg[32]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[3] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[3]),
        .Q(data_read_reg[3]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[4] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[4]),
        .Q(data_read_reg[4]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[5] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[5]),
        .Q(data_read_reg[5]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[6] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[6]),
        .Q(data_read_reg[6]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[7] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[7]),
        .Q(data_read_reg[7]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[8] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[8]),
        .Q(data_read_reg[8]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[9] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[9]),
        .Q(data_read_reg[9]));
  FDRE \Serial_Dbg_Intf.dbg_disable_interrupt_i_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(sample_synced[9]),
        .Q(LOCKSTEP_Master_Out[36]),
        .R(sync_reset));
  LUT5 #(
    .INIT(32'h00000010)) 
    \Serial_Dbg_Intf.dbg_wakeup_i_i_1 
       (.I0(\Use_Serial_Unified_Completion.completion_block_reg ),
        .I1(Dbg_Reg_En[6]),
        .I2(Dbg_Reg_En[7]),
        .I3(Dbg_Reg_En[4]),
        .I4(Dbg_Reg_En[5]),
        .O(Control_Reg_En));
  LUT5 #(
    .INIT(32'h40404045)) 
    \Serial_Dbg_Intf.dbg_wakeup_i_i_2 
       (.I0(Scan_En),
        .I1(Scan_Reset),
        .I2(Scan_Reset_Sel),
        .I3(Sleep_Out),
        .I4(Sleep_Decode),
        .O(no_sleeping));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \Serial_Dbg_Intf.dbg_wakeup_i_i_3 
       (.I0(Dbg_Reg_En[0]),
        .I1(Dbg_Reg_En[1]),
        .I2(Dbg_Reg_En[3]),
        .I3(Dbg_Reg_En[2]),
        .O(\Use_Serial_Unified_Completion.completion_block_reg ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.dbg_wakeup_i_reg 
       (.C(Dbg_Update),
        .CE(Control_Reg_En),
        .CLR(no_sleeping),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[31] ),
        .Q(LOCKSTEP_Master_Out[33]));
  LUT5 #(
    .INIT(32'h45454540)) 
    \Serial_Dbg_Intf.force_stop_TClk_i_1 
       (.I0(Scan_En),
        .I1(Scan_Reset),
        .I2(Scan_Reset_Sel),
        .I3(force_stop_cmd_hold),
        .I4(force_stop_cmd_i),
        .O(force_stop_cmd_rst));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.force_stop_TClk_reg 
       (.C(Dbg_Update),
        .CE(Control_Reg_En),
        .CLR(force_stop_cmd_rst),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[29] ),
        .Q(force_stop_TClk));
  FDRE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.force_stop_cmd_i_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(force_stop_cmd_i0),
        .Q(force_stop_cmd_i),
        .R(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.if_debug_ready_i_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(if_debug_ready_i0),
        .Q(LOCKSTEP_Master_Out[35]),
        .R(sync_reset));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.instr_read_reg_reg[0] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(instr_rd_reg[0]),
        .Q(instr_read_reg[0]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.instr_read_reg_reg[1] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(instr_rd_reg[1]),
        .Q(instr_read_reg[1]));
  FDRE \Serial_Dbg_Intf.new_dbg_instr_shifting_CLK_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(Instr_Insert_Reg_En_1),
        .Q(\Serial_Dbg_Intf.new_dbg_instr_shifting_CLK_reg_n_0 ),
        .R(sync_reset));
  LUT5 #(
    .INIT(32'h45454540)) 
    \Serial_Dbg_Intf.normal_stop_TClk_i_1 
       (.I0(Scan_En),
        .I1(Scan_Reset),
        .I2(Scan_Reset_Sel),
        .I3(normal_stop_cmd_hold),
        .I4(normal_stop_cmd_i),
        .O(normal_stop_cmd_rst));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.normal_stop_TClk_reg 
       (.C(Dbg_Update),
        .CE(Control_Reg_En),
        .CLR(normal_stop_cmd_rst),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[28] ),
        .Q(normal_stop_TClk));
  FDRE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.normal_stop_cmd_i_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(normal_stop_cmd_i0),
        .Q(normal_stop_cmd_i),
        .R(sync_reset));
  FDRE \Serial_Dbg_Intf.read_register_MSR_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(read_register_MSR0),
        .Q(read_register_MSR),
        .R(sync_reset));
  FDRE \Serial_Dbg_Intf.read_register_PC_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(read_register_PC0),
        .Q(read_register_PC),
        .R(sync_reset));
  FDRE \Serial_Dbg_Intf.sample_synced_1_reg[0] 
       (.C(Clk),
        .CE(1'b1),
        .D(sample_synced[0]),
        .Q(\Serial_Dbg_Intf.sample_synced_1_reg_n_0_[0] ),
        .R(sync_reset));
  FDRE \Serial_Dbg_Intf.sample_synced_1_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(sample_synced[1]),
        .Q(\Serial_Dbg_Intf.sample_synced_1_reg_n_0_[1] ),
        .R(sync_reset));
  FDRE \Serial_Dbg_Intf.sample_synced_1_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(sample_synced[2]),
        .Q(p_1_in),
        .R(sync_reset));
  FDRE \Serial_Dbg_Intf.sample_synced_1_reg[3] 
       (.C(Clk),
        .CE(1'b1),
        .D(sample_synced[3]),
        .Q(\Serial_Dbg_Intf.sample_synced_1_reg_n_0_[3] ),
        .R(sync_reset));
  FDRE \Serial_Dbg_Intf.sample_synced_1_reg[4] 
       (.C(Clk),
        .CE(1'b1),
        .D(sample_synced[4]),
        .Q(\Serial_Dbg_Intf.sample_synced_1_reg_n_0_[4] ),
        .R(sync_reset));
  FDRE \Serial_Dbg_Intf.sample_synced_1_reg[5] 
       (.C(Clk),
        .CE(1'b1),
        .D(sample_synced[5]),
        .Q(p_0_in),
        .R(sync_reset));
  FDRE \Serial_Dbg_Intf.sample_synced_1_reg[6] 
       (.C(Clk),
        .CE(1'b1),
        .D(sample_synced[6]),
        .Q(\Serial_Dbg_Intf.sample_synced_1_reg_n_0_[6] ),
        .R(sync_reset));
  FDRE \Serial_Dbg_Intf.sample_synced_1_reg[7] 
       (.C(Clk),
        .CE(1'b1),
        .D(sample_synced[7]),
        .Q(p_0_in30_in),
        .R(sync_reset));
  FDRE \Serial_Dbg_Intf.sample_synced_1_reg[8] 
       (.C(Clk),
        .CE(1'b1),
        .D(sample_synced[8]),
        .Q(\Serial_Dbg_Intf.sample_synced_1_reg_n_0_[8] ),
        .R(sync_reset));
  (* SOFT_HLUTNM = "soft_lutpair94" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \Serial_Dbg_Intf.shift_count[0]_i_1 
       (.I0(Dbg_Shift),
        .I1(\Serial_Dbg_Intf.shift_count_reg_n_0_[0] ),
        .O(\Serial_Dbg_Intf.shift_count[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair95" *) 
  LUT3 #(
    .INIT(8'h28)) 
    \Serial_Dbg_Intf.shift_count[1]_i_1 
       (.I0(Dbg_Shift),
        .I1(A1),
        .I2(\Serial_Dbg_Intf.shift_count_reg_n_0_[0] ),
        .O(\Serial_Dbg_Intf.shift_count[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair86" *) 
  LUT4 #(
    .INIT(16'h2888)) 
    \Serial_Dbg_Intf.shift_count[2]_i_1 
       (.I0(Dbg_Shift),
        .I1(A2),
        .I2(A1),
        .I3(\Serial_Dbg_Intf.shift_count_reg_n_0_[0] ),
        .O(\Serial_Dbg_Intf.shift_count[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair86" *) 
  LUT5 #(
    .INIT(32'h28888888)) 
    \Serial_Dbg_Intf.shift_count[3]_i_1 
       (.I0(Dbg_Shift),
        .I1(A3),
        .I2(A2),
        .I3(\Serial_Dbg_Intf.shift_count_reg_n_0_[0] ),
        .I4(A1),
        .O(\Serial_Dbg_Intf.shift_count[3]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h2888888888888888)) 
    \Serial_Dbg_Intf.shift_count[4]_i_1 
       (.I0(Dbg_Shift),
        .I1(sel0_2),
        .I2(A3),
        .I3(A1),
        .I4(\Serial_Dbg_Intf.shift_count_reg_n_0_[0] ),
        .I5(A2),
        .O(\Serial_Dbg_Intf.shift_count[4]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair94" *) 
  LUT3 #(
    .INIT(8'h28)) 
    \Serial_Dbg_Intf.shift_count[5]_i_1 
       (.I0(Dbg_Shift),
        .I1(sel0[1]),
        .I2(\Serial_Dbg_Intf.shift_count[5]_i_2_n_0 ),
        .O(\Serial_Dbg_Intf.shift_count[5]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair84" *) 
  LUT5 #(
    .INIT(32'h80000000)) 
    \Serial_Dbg_Intf.shift_count[5]_i_2 
       (.I0(sel0_2),
        .I1(A2),
        .I2(\Serial_Dbg_Intf.shift_count_reg_n_0_[0] ),
        .I3(A1),
        .I4(A3),
        .O(\Serial_Dbg_Intf.shift_count[5]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair89" *) 
  LUT3 #(
    .INIT(8'h28)) 
    \Serial_Dbg_Intf.shift_count[6]_i_1 
       (.I0(Dbg_Shift),
        .I1(sel0[2]),
        .I2(\Serial_Dbg_Intf.shift_count[7]_i_2_n_0 ),
        .O(\Serial_Dbg_Intf.shift_count[6]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair89" *) 
  LUT4 #(
    .INIT(16'h2888)) 
    \Serial_Dbg_Intf.shift_count[7]_i_1 
       (.I0(Dbg_Shift),
        .I1(sel0[3]),
        .I2(sel0[2]),
        .I3(\Serial_Dbg_Intf.shift_count[7]_i_2_n_0 ),
        .O(\Serial_Dbg_Intf.shift_count[7]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    \Serial_Dbg_Intf.shift_count[7]_i_2 
       (.I0(sel0[1]),
        .I1(A3),
        .I2(A1),
        .I3(\Serial_Dbg_Intf.shift_count_reg_n_0_[0] ),
        .I4(A2),
        .I5(sel0_2),
        .O(\Serial_Dbg_Intf.shift_count[7]_i_2_n_0 ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_count_reg[0] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_count[0]_i_1_n_0 ),
        .Q(\Serial_Dbg_Intf.shift_count_reg_n_0_[0] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_count_reg[1] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_count[1]_i_1_n_0 ),
        .Q(A1));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_count_reg[2] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_count[2]_i_1_n_0 ),
        .Q(A2));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_count_reg[3] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_count[3]_i_1_n_0 ),
        .Q(A3));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_count_reg[4] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_count[4]_i_1_n_0 ),
        .Q(sel0_2));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_count_reg[5] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_count[5]_i_1_n_0 ),
        .Q(sel0[1]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_count_reg[6] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_count[6]_i_1_n_0 ),
        .Q(sel0[2]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_count_reg[7] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_count[7]_i_1_n_0 ),
        .Q(sel0[3]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[10] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[11] ),
        .Q(\Serial_Dbg_Intf.shift_datain_reg_n_0_[10] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[11] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[12] ),
        .Q(\Serial_Dbg_Intf.shift_datain_reg_n_0_[11] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[12] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[13] ),
        .Q(\Serial_Dbg_Intf.shift_datain_reg_n_0_[12] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[13] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[14] ),
        .Q(\Serial_Dbg_Intf.shift_datain_reg_n_0_[13] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[14] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[15] ),
        .Q(\Serial_Dbg_Intf.shift_datain_reg_n_0_[14] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[15] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[16] ),
        .Q(\Serial_Dbg_Intf.shift_datain_reg_n_0_[15] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[16] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[17] ),
        .Q(\Serial_Dbg_Intf.shift_datain_reg_n_0_[16] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[17] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[18] ),
        .Q(\Serial_Dbg_Intf.shift_datain_reg_n_0_[17] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[18] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[19] ),
        .Q(\Serial_Dbg_Intf.shift_datain_reg_n_0_[18] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[19] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[20] ),
        .Q(\Serial_Dbg_Intf.shift_datain_reg_n_0_[19] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[1] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[2] ),
        .Q(\Serial_Dbg_Intf.shift_datain_reg_n_0_[1] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[20] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[21] ),
        .Q(\Serial_Dbg_Intf.shift_datain_reg_n_0_[20] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[21] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[22] ),
        .Q(\Serial_Dbg_Intf.shift_datain_reg_n_0_[21] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[22] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[23] ),
        .Q(\Serial_Dbg_Intf.shift_datain_reg_n_0_[22] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[23] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[24] ),
        .Q(\Serial_Dbg_Intf.shift_datain_reg_n_0_[23] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[24] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[25] ),
        .Q(\Serial_Dbg_Intf.shift_datain_reg_n_0_[24] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[25] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[26] ),
        .Q(\Serial_Dbg_Intf.shift_datain_reg_n_0_[25] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[26] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[27] ),
        .Q(\Serial_Dbg_Intf.shift_datain_reg_n_0_[26] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[27] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[28] ),
        .Q(\Serial_Dbg_Intf.shift_datain_reg_n_0_[27] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[28] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[29] ),
        .Q(\Serial_Dbg_Intf.shift_datain_reg_n_0_[28] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[29] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[30] ),
        .Q(\Serial_Dbg_Intf.shift_datain_reg_n_0_[29] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[2] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[3] ),
        .Q(\Serial_Dbg_Intf.shift_datain_reg_n_0_[2] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[30] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[31] ),
        .Q(\Serial_Dbg_Intf.shift_datain_reg_n_0_[30] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[31] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(Dbg_TDI),
        .Q(\Serial_Dbg_Intf.shift_datain_reg_n_0_[31] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[3] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[4] ),
        .Q(\Serial_Dbg_Intf.shift_datain_reg_n_0_[3] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[4] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[5] ),
        .Q(\Serial_Dbg_Intf.shift_datain_reg_n_0_[4] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[5] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[6] ),
        .Q(\Serial_Dbg_Intf.shift_datain_reg_n_0_[5] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[6] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[7] ),
        .Q(\Serial_Dbg_Intf.shift_datain_reg_n_0_[6] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[7] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[8] ),
        .Q(\Serial_Dbg_Intf.shift_datain_reg_n_0_[7] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[8] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[9] ),
        .Q(\Serial_Dbg_Intf.shift_datain_reg_n_0_[8] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[9] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[10] ),
        .Q(\Serial_Dbg_Intf.shift_datain_reg_n_0_[9] ));
  LUT4 #(
    .INIT(16'h4540)) 
    \Serial_Dbg_Intf.single_Step_TClk_i_1 
       (.I0(Scan_En),
        .I1(Scan_Reset),
        .I2(Scan_Reset_Sel),
        .I3(start_single_step_reg_n_0),
        .O(start_single_step_rst));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.single_Step_TClk_reg 
       (.C(Dbg_Update),
        .CE(Control_Reg_En),
        .CLR(start_single_step_rst),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[23] ),
        .Q(single_Step_TClk));
  FDRE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.start_single_cmd_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(start_single_cmd0),
        .Q(start_single_cmd),
        .R(sync_reset));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.status_reg_reg[0] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(sync),
        .Q(\Serial_Dbg_Intf.status_reg_reg_n_0_[0] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.status_reg_reg[16] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.sync_stop_CPU_n_0 ),
        .Q(\Serial_Dbg_Intf.status_reg_reg_n_0_[16] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.status_reg_reg[17] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(sync_reset),
        .Q(\Serial_Dbg_Intf.status_reg_reg_n_0_[17] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.status_reg_reg[18] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(Full_32_bit),
        .Q(\Serial_Dbg_Intf.status_reg_reg_n_0_[18] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.status_reg_reg[19] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(delay_slot_instr_reg_0),
        .Q(\Serial_Dbg_Intf.status_reg_reg_n_0_[19] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.status_reg_reg[20] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(Full_32_bit_1),
        .Q(\Serial_Dbg_Intf.status_reg_reg_n_0_[20] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.status_reg_reg[22] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.status_reg_reg[22]_0 ),
        .Q(\Serial_Dbg_Intf.status_reg_reg_n_0_[22] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.status_reg_reg[23] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(dbg_brki_hit_synced),
        .Q(\Serial_Dbg_Intf.status_reg_reg_n_0_[23] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.status_reg_reg[24] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(running_clock_synced),
        .Q(\Serial_Dbg_Intf.status_reg_reg_n_0_[24] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.status_reg_reg[25] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.status_reg_reg[25]_0 [32]),
        .Q(\Serial_Dbg_Intf.status_reg_reg_n_0_[25] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.status_reg_reg[27] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(sleep_synced),
        .Q(\Serial_Dbg_Intf.status_reg_reg_n_0_[27] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.status_reg_reg[28] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(pause_synced),
        .Q(\Serial_Dbg_Intf.status_reg_reg_n_0_[28] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.status_reg_reg[29] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(unchanged),
        .Q(\Serial_Dbg_Intf.status_reg_reg_n_0_[29] ));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_mb_sync_bit__parameterized0 \Serial_Dbg_Intf.sync_dbg_brk_hit 
       (.D(dbg_brki_hit_synced),
        .Dbg_Clk(Dbg_Clk),
        .config_with_scan_reset(config_with_scan_reset),
        .dbg_brki_hit(dbg_brki_hit));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_mb_sync_vec \Serial_Dbg_Intf.sync_dbg_hit 
       (.D(sync),
        .Dbg_Clk(Dbg_Clk),
        .Raw(Raw),
        .Scan_En(Scan_En),
        .Scan_Reset(Scan_Reset),
        .Scan_Reset_Sel(Scan_Reset_Sel),
        .config_with_scan_reset(config_with_scan_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_mb_sync_bit__parameterized1 \Serial_Dbg_Intf.sync_dbg_wakeup 
       (.Clk(Clk),
        .LOCKSTEP_Master_Out({LOCKSTEP_Master_Out[35],LOCKSTEP_Master_Out[33:32]}),
        .\Serial_Dbg_Intf.continue_from_brk_reg (\Serial_Dbg_Intf.sync_dbg_wakeup_n_0 ),
        .dbg_continue_i_reg(\Serial_Dbg_Intf.continue_from_brk_reg_n_0 ),
        .dbg_continue_i_reg_0(force_stop_cmd_i),
        .dbg_continue_i_reg_1(\Area_Debug_Control.dbg_stop_Detected_reg_n_0 ),
        .dbg_pause(dbg_pause),
        .normal_stop_cmd_i(normal_stop_cmd_i),
        .start_single_cmd(start_single_cmd),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_mb_sync_bit__parameterized0_28 \Serial_Dbg_Intf.sync_pause 
       (.D(pause_synced),
        .Dbg_Clk(Dbg_Clk),
        .Pause(Pause),
        .config_with_scan_reset(config_with_scan_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_mb_sync_bit__parameterized0_29 \Serial_Dbg_Intf.sync_running_clock 
       (.D(running_clock_synced),
        .Dbg_Clk(Dbg_Clk),
        .config_with_scan_reset(config_with_scan_reset),
        .running_clock(running_clock));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_mb_sync_vec__parameterized0 \Serial_Dbg_Intf.sync_sample 
       (.Clk(Clk),
        .D(normal_stop_TClk),
        .Dbg_Trig_Ack_In(Dbg_Trig_Ack_In[0]),
        .Dbg_Trig_Ack_Out(Dbg_Trig_Ack_Out[0]),
        .Dbg_Trig_In(Dbg_Trig_In[0]),
        .Dbg_Trig_Out(Dbg_Trig_Out[0]),
        .Q({\Serial_Dbg_Intf.sample_synced_1_reg_n_0_[0] ,\Serial_Dbg_Intf.sample_synced_1_reg_n_0_[1] ,p_1_in,\Serial_Dbg_Intf.sample_synced_1_reg_n_0_[3] ,\Serial_Dbg_Intf.sample_synced_1_reg_n_0_[4] ,p_0_in,p_0_in30_in,\Serial_Dbg_Intf.sample_synced_1_reg_n_0_[8] }),
        .\Serial_Dbg_Intf.if_debug_ready_i_reg (\Serial_Dbg_Intf.sample_synced_1_reg_n_0_[6] ),
        .\Serial_Dbg_Intf.sample_synced_1_reg[8] (\Serial_Dbg_Intf.sync_sample_n_14 ),
        .\Synchronize.use_sync_reset.sync_reg[1] (force_stop_TClk),
        .\Synchronize.use_sync_reset.sync_reg[1]_0 (single_Step_TClk),
        .\Synchronize.use_sync_reset.sync_reg[1]_1 ({command_reg[0],command_reg[1]}),
        .\Synchronize.use_sync_reset.sync_reg[1]_2 (continue_from_brk_TClk),
        .\Synchronize.use_sync_reset.sync_reg[1]_3 (New_Dbg_Instr2_TCK),
        .\Synchronize.use_sync_reset.sync_reg[1]_4 (\Serial_Dbg_Intf.control_reg_reg_n_0_[3] ),
        .\Synchronize.use_sync_reset.sync_reg[2] (\Serial_Dbg_Intf.sync_sample_n_15 ),
        .continue_from_brk0(continue_from_brk0),
        .force_stop_cmd_i0(force_stop_cmd_i0),
        .if_debug_ready_i0(if_debug_ready_i0),
        .normal_stop_cmd_i0(normal_stop_cmd_i0),
        .read_register_MSR0(read_register_MSR0),
        .read_register_PC0(read_register_PC0),
        .sample_synced(sample_synced),
        .start_single_cmd0(start_single_cmd0),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_mb_sync_bit__parameterized0_30 \Serial_Dbg_Intf.sync_sleep 
       (.D(sleep_synced),
        .Dbg_Clk(Dbg_Clk),
        .Sleep(Sleep),
        .Sleep_Decode(Sleep_Decode),
        .Sleep_Out(Sleep_Out),
        .config_with_scan_reset(config_with_scan_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_mb_sync_bit__parameterized0_31 \Serial_Dbg_Intf.sync_stop_CPU 
       (.D(\Serial_Dbg_Intf.sync_stop_CPU_n_0 ),
        .Dbg_Clk(Dbg_Clk),
        .\Single_Synchronize.use_async_reset.sync_reg_0 (LOCKSTEP_Master_Out[34]),
        .config_with_scan_reset(config_with_scan_reset));
  FDRE \Serial_Dbg_Intf.trig_ack_out_1_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\Serial_Dbg_Intf.sync_sample_n_15 ),
        .Q(Dbg_Trig_Ack_Out[0]),
        .R(sync_reset));
  FDRE \Serial_Dbg_Intf.trig_in_1_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\Serial_Dbg_Intf.sync_sample_n_14 ),
        .Q(Dbg_Trig_In[0]),
        .R(sync_reset));
  LUT6 #(
    .INIT(64'hFFFFFFFF00001000)) 
    \Serial_Dbg_Intf.unchanged_i_1 
       (.I0(Dbg_Reg_En[5]),
        .I1(Dbg_Reg_En[4]),
        .I2(Dbg_Reg_En[7]),
        .I3(Dbg_Reg_En[6]),
        .I4(\Use_Serial_Unified_Completion.completion_block_reg ),
        .I5(unchanged),
        .O(\Serial_Dbg_Intf.unchanged_i_1_n_0 ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.unchanged_reg 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.unchanged_i_1_n_0 ),
        .Q(unchanged));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_address_hit \Using_PC_Breakpoints.All_PC_Brks[0].Serial_Interface_1.address_hit_I 
       (.Address(Address),
        .\Area_Debug_Control.normal_stop_cmd_hold_reg (\Area_Debug_Control.normal_stop_cmd_hold_reg_0 ),
        .Dbg_Clk(Dbg_Clk),
        .Dbg_Reg_En(Dbg_Reg_En),
        .Dbg_TDI(Dbg_TDI),
        .Hit(\Using_PC_Breakpoints.All_PC_Brks[0].Serial_Interface_1.address_hit_I_n_1 ),
        .Q(\Serial_Dbg_Intf.control_reg_reg_n_0_[0] ),
        .Single_Step_N(single_Step_N),
        .\Using_FPGA.Native_i_6 (force_stop_cmd_i),
        .\Using_FPGA.Native_i_6_0 (force_stop_cmd_hold),
        .normal_stop_cmd_hold(normal_stop_cmd_hold),
        .normal_stop_cmd_i(normal_stop_cmd_i));
  LUT2 #(
    .INIT(4'hE)) 
    command_reg_clear_i_1
       (.I0(read_register_MSR_1_reg_0),
        .I1(read_register_PC_1_reg_n_0),
        .O(command_reg_clear_i_1_n_0));
  FDRE command_reg_clear_reg
       (.C(Clk),
        .CE(1'b1),
        .D(command_reg_clear_i_1_n_0),
        .Q(command_reg_clear),
        .R(sync_reset));
  LUT5 #(
    .INIT(32'hABBBA888)) 
    \data_rd_reg[32]_i_1 
       (.I0(\Area_Debug_Control.Dbg_Inhibit_EX_FDRSE_n_2 ),
        .I1(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_37 ),
        .I2(LOCKSTEP_Master_Out[35]),
        .I3(LOCKSTEP_Master_Out[34]),
        .I4(data_rd_reg[32]),
        .O(\data_rd_reg[32]_i_1_n_0 ));
  FDRE \data_rd_reg_reg[0] 
       (.C(Clk),
        .CE(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_37 ),
        .D(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_7 ),
        .Q(data_rd_reg[0]),
        .R(sync_reset));
  FDRE \data_rd_reg_reg[10] 
       (.C(Clk),
        .CE(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_37 ),
        .D(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_17 ),
        .Q(data_rd_reg[10]),
        .R(sync_reset));
  FDRE \data_rd_reg_reg[11] 
       (.C(Clk),
        .CE(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_37 ),
        .D(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_18 ),
        .Q(data_rd_reg[11]),
        .R(sync_reset));
  FDRE \data_rd_reg_reg[12] 
       (.C(Clk),
        .CE(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_37 ),
        .D(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_19 ),
        .Q(data_rd_reg[12]),
        .R(sync_reset));
  FDRE \data_rd_reg_reg[13] 
       (.C(Clk),
        .CE(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_37 ),
        .D(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_20 ),
        .Q(data_rd_reg[13]),
        .R(sync_reset));
  FDRE \data_rd_reg_reg[14] 
       (.C(Clk),
        .CE(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_37 ),
        .D(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_21 ),
        .Q(data_rd_reg[14]),
        .R(sync_reset));
  FDRE \data_rd_reg_reg[15] 
       (.C(Clk),
        .CE(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_37 ),
        .D(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_22 ),
        .Q(data_rd_reg[15]),
        .R(sync_reset));
  FDRE \data_rd_reg_reg[16] 
       (.C(Clk),
        .CE(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_37 ),
        .D(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_23 ),
        .Q(data_rd_reg[16]),
        .R(sync_reset));
  FDRE \data_rd_reg_reg[17] 
       (.C(Clk),
        .CE(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_37 ),
        .D(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_24 ),
        .Q(data_rd_reg[17]),
        .R(sync_reset));
  FDRE \data_rd_reg_reg[18] 
       (.C(Clk),
        .CE(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_37 ),
        .D(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_25 ),
        .Q(data_rd_reg[18]),
        .R(sync_reset));
  FDRE \data_rd_reg_reg[19] 
       (.C(Clk),
        .CE(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_37 ),
        .D(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_26 ),
        .Q(data_rd_reg[19]),
        .R(sync_reset));
  FDRE \data_rd_reg_reg[1] 
       (.C(Clk),
        .CE(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_37 ),
        .D(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_8 ),
        .Q(data_rd_reg[1]),
        .R(sync_reset));
  FDRE \data_rd_reg_reg[20] 
       (.C(Clk),
        .CE(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_37 ),
        .D(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_27 ),
        .Q(data_rd_reg[20]),
        .R(sync_reset));
  FDRE \data_rd_reg_reg[21] 
       (.C(Clk),
        .CE(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_37 ),
        .D(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_28 ),
        .Q(data_rd_reg[21]),
        .R(sync_reset));
  FDRE \data_rd_reg_reg[22] 
       (.C(Clk),
        .CE(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_37 ),
        .D(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_29 ),
        .Q(data_rd_reg[22]),
        .R(sync_reset));
  FDRE \data_rd_reg_reg[23] 
       (.C(Clk),
        .CE(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_37 ),
        .D(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_30 ),
        .Q(data_rd_reg[23]),
        .R(sync_reset));
  FDRE \data_rd_reg_reg[24] 
       (.C(Clk),
        .CE(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_37 ),
        .D(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_31 ),
        .Q(data_rd_reg[24]),
        .R(sync_reset));
  FDRE \data_rd_reg_reg[25] 
       (.C(Clk),
        .CE(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_37 ),
        .D(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_32 ),
        .Q(data_rd_reg[25]),
        .R(sync_reset));
  FDRE \data_rd_reg_reg[26] 
       (.C(Clk),
        .CE(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_37 ),
        .D(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_33 ),
        .Q(data_rd_reg[26]),
        .R(sync_reset));
  FDRE \data_rd_reg_reg[27] 
       (.C(Clk),
        .CE(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_37 ),
        .D(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_34 ),
        .Q(data_rd_reg[27]),
        .R(sync_reset));
  FDRE \data_rd_reg_reg[28] 
       (.C(Clk),
        .CE(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_37 ),
        .D(\data_rd_reg_reg[28]_0 [1]),
        .Q(data_rd_reg[28]),
        .R(sync_reset));
  FDRE \data_rd_reg_reg[29] 
       (.C(Clk),
        .CE(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_37 ),
        .D(\data_rd_reg_reg[28]_0 [0]),
        .Q(data_rd_reg[29]),
        .R(sync_reset));
  FDRE \data_rd_reg_reg[2] 
       (.C(Clk),
        .CE(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_37 ),
        .D(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_9 ),
        .Q(data_rd_reg[2]),
        .R(sync_reset));
  FDRE \data_rd_reg_reg[30] 
       (.C(Clk),
        .CE(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_37 ),
        .D(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_35 ),
        .Q(data_rd_reg[30]),
        .R(sync_reset));
  FDRE \data_rd_reg_reg[31] 
       (.C(Clk),
        .CE(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_37 ),
        .D(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_36 ),
        .Q(data_rd_reg[31]),
        .R(sync_reset));
  FDRE \data_rd_reg_reg[32] 
       (.C(Clk),
        .CE(1'b1),
        .D(\data_rd_reg[32]_i_1_n_0 ),
        .Q(data_rd_reg[32]),
        .R(sync_reset));
  FDRE \data_rd_reg_reg[3] 
       (.C(Clk),
        .CE(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_37 ),
        .D(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_10 ),
        .Q(data_rd_reg[3]),
        .R(sync_reset));
  FDRE \data_rd_reg_reg[4] 
       (.C(Clk),
        .CE(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_37 ),
        .D(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_11 ),
        .Q(data_rd_reg[4]),
        .R(sync_reset));
  FDRE \data_rd_reg_reg[5] 
       (.C(Clk),
        .CE(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_37 ),
        .D(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_12 ),
        .Q(data_rd_reg[5]),
        .R(sync_reset));
  FDRE \data_rd_reg_reg[6] 
       (.C(Clk),
        .CE(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_37 ),
        .D(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_13 ),
        .Q(data_rd_reg[6]),
        .R(sync_reset));
  FDRE \data_rd_reg_reg[7] 
       (.C(Clk),
        .CE(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_37 ),
        .D(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_14 ),
        .Q(data_rd_reg[7]),
        .R(sync_reset));
  FDRE \data_rd_reg_reg[8] 
       (.C(Clk),
        .CE(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_37 ),
        .D(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_15 ),
        .Q(data_rd_reg[8]),
        .R(sync_reset));
  FDRE \data_rd_reg_reg[9] 
       (.C(Clk),
        .CE(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_37 ),
        .D(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_16 ),
        .Q(data_rd_reg[9]),
        .R(sync_reset));
  FDRE dbg_continue_i_reg
       (.C(Clk),
        .CE(1'b1),
        .D(\Serial_Dbg_Intf.sync_dbg_wakeup_n_0 ),
        .Q(LOCKSTEP_Master_Out[32]),
        .R(sync_reset));
  LUT6 #(
    .INIT(64'h40404040404F4040)) 
    dbg_halt_reset_mode_i_1
       (.I0(Reset_Mode[1]),
        .I1(Reset_Mode[0]),
        .I2(sync_reset),
        .I3(p_12_in),
        .I4(dbg_halt_reset_mode_reg_n_0),
        .I5(\Serial_Dbg_Intf.control_reg_reg_n_0_[0] ),
        .O(dbg_halt_reset_mode_i_1_n_0));
  FDRE dbg_halt_reset_mode_reg
       (.C(Clk),
        .CE(1'b1),
        .D(dbg_halt_reset_mode_i_1_n_0),
        .Q(dbg_halt_reset_mode_reg_n_0),
        .R(1'b0));
  FDRE dbg_pause_reg
       (.C(Clk),
        .CE(1'b1),
        .D(Pause),
        .Q(dbg_pause),
        .R(sync_reset));
  FDRE delay_slot_instr_reg
       (.C(Clk),
        .CE(delay_slot_instr_reg_1),
        .D(branch_with_delay),
        .Q(delay_slot_instr_reg_0),
        .R(sync_reset));
  (* SOFT_HLUTNM = "soft_lutpair85" *) 
  LUT2 #(
    .INIT(4'h2)) 
    exception_i_2
       (.I0(start_dbg_exec_reg_n_0),
        .I1(has_inhibit_EX),
        .O(exception_i_2_n_0));
  FDRE exception_reg
       (.C(Clk),
        .CE(1'b1),
        .D(\Area_Debug_Control.Stop_Instr_Fetch_FDRSE_n_3 ),
        .Q(instr_rd_reg[1]),
        .R(sync_reset));
  (* SOFT_HLUTNM = "soft_lutpair85" *) 
  LUT5 #(
    .INIT(32'h020F0202)) 
    executing_i_1
       (.I0(start_dbg_exec_reg_n_0),
        .I1(has_inhibit_EX),
        .I2(force_stop_overrun),
        .I3(\Serial_Dbg_Intf.status_reg_reg[25]_0 [31]),
        .I4(instr_rd_reg[0]),
        .O(executing_i_1_n_0));
  FDRE executing_reg
       (.C(Clk),
        .CE(1'b1),
        .D(executing_i_1_n_0),
        .Q(instr_rd_reg[0]),
        .R(sync_reset));
  LUT3 #(
    .INIT(8'h0E)) 
    inHibit_EX_i_3
       (.I0(IReady),
        .I1(LOCKSTEP_Master_Out[35]),
        .I2(inHibit_EX_reg),
        .O(\Serial_Dbg_Intf.if_debug_ready_i_reg_0 ));
  FDRE mb_halted_1_reg
       (.C(Clk),
        .CE(1'b1),
        .D(D),
        .Q(mb_halted_1),
        .R(sync_reset));
  FDRE read_register_MSR_1_reg
       (.C(Clk),
        .CE(1'b1),
        .D(read_register_MSR),
        .Q(read_register_MSR_1_reg_0),
        .R(sync_reset));
  FDRE read_register_PC_1_reg
       (.C(Clk),
        .CE(1'b1),
        .D(read_register_PC),
        .Q(read_register_PC_1_reg_n_0),
        .R(sync_reset));
  LUT4 #(
    .INIT(16'h4540)) 
    running_clock_i_1
       (.I0(Scan_En),
        .I1(Scan_Reset),
        .I2(Scan_Reset_Sel),
        .I3(capture_1),
        .O(running_clock_rst));
  FDCE #(
    .INIT(1'b0)) 
    running_clock_reg
       (.C(Clk),
        .CE(1'b1),
        .CLR(running_clock_rst),
        .D(1'b1),
        .Q(running_clock));
  (* SOFT_HLUTNM = "soft_lutpair88" *) 
  LUT4 #(
    .INIT(16'h2F20)) 
    saved_reset_mode_dbg_halt_i_1
       (.I0(Reset_Mode[0]),
        .I1(Reset_Mode[1]),
        .I2(sync_reset),
        .I3(saved_reset_mode_dbg_halt),
        .O(saved_reset_mode_dbg_halt_i_1_n_0));
  FDRE saved_reset_mode_dbg_halt_reg
       (.C(Clk),
        .CE(1'b1),
        .D(saved_reset_mode_dbg_halt_i_1_n_0),
        .Q(saved_reset_mode_dbg_halt),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair91" *) 
  LUT4 #(
    .INIT(16'h2F20)) 
    saved_reset_mode_sleep_i_1
       (.I0(Reset_Mode[1]),
        .I1(Reset_Mode[0]),
        .I2(sync_reset),
        .I3(Sleep_Out),
        .O(saved_reset_mode_sleep_i_1_n_0));
  FDRE saved_reset_mode_sleep_reg
       (.C(Clk),
        .CE(1'b1),
        .D(saved_reset_mode_sleep_i_1_n_0),
        .Q(saved_reset_mode_sleep),
        .R(1'b0));
  LUT5 #(
    .INIT(32'hEFFFEF00)) 
    single_Step_N_i_1
       (.I0(single_step_count[1]),
        .I1(single_step_count[0]),
        .I2(start_single_step_reg_n_0),
        .I3(ok_To_Stop),
        .I4(single_Step_N),
        .O(single_Step_N_i_1_n_0));
  FDSE single_Step_N_reg
       (.C(Clk),
        .CE(1'b1),
        .D(single_Step_N_i_1_n_0),
        .Q(single_Step_N),
        .S(sync_reset));
  LUT5 #(
    .INIT(32'hCCAF33A0)) 
    \single_step_count[0]_i_1 
       (.I0(\Serial_Dbg_Intf.control_reg_reg_n_0_[4] ),
        .I1(single_step_count[1]),
        .I2(start_single_cmd),
        .I3(ok_To_Stop),
        .I4(single_step_count[0]),
        .O(\single_step_count[0]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h0BF8)) 
    \single_step_count[1]_i_1 
       (.I0(\Serial_Dbg_Intf.control_reg_reg_n_0_[5] ),
        .I1(start_single_cmd),
        .I2(ok_To_Stop),
        .I3(single_step_count[1]),
        .O(\single_step_count[1]_i_1_n_0 ));
  FDRE \single_step_count_reg[0] 
       (.C(Clk),
        .CE(1'b1),
        .D(\single_step_count[0]_i_1_n_0 ),
        .Q(single_step_count[0]),
        .R(sync_reset));
  FDRE \single_step_count_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(\single_step_count[1]_i_1_n_0 ),
        .Q(single_step_count[1]),
        .R(sync_reset));
  LUT6 #(
    .INIT(64'hAAAA03FFAAAA0000)) 
    sleep_reset_mode_i_1
       (.I0(sleep_reset_mode_i_2_n_0),
        .I1(wakeup_i[0]),
        .I2(wakeup_i[1]),
        .I3(saved_reset_mode_sleep),
        .I4(sync_reset),
        .I5(Sleep_Out),
        .O(sleep_reset_mode_i_1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair91" *) 
  LUT2 #(
    .INIT(4'h2)) 
    sleep_reset_mode_i_2
       (.I0(Reset_Mode[1]),
        .I1(Reset_Mode[0]),
        .O(sleep_reset_mode_i_2_n_0));
  FDRE sleep_reset_mode_reg
       (.C(Clk),
        .CE(1'b1),
        .D(sleep_reset_mode_i_1_n_0),
        .Q(Sleep_Out),
        .R(1'b0));
  FDRE start_dbg_exec_reg
       (.C(Clk),
        .CE(1'b1),
        .D(LOCKSTEP_Master_Out[35]),
        .Q(start_dbg_exec_reg_n_0),
        .R(sync_reset));
  LUT5 #(
    .INIT(32'hFCAAFFAA)) 
    start_single_step_i_1
       (.I0(start_single_cmd),
        .I1(single_step_count[1]),
        .I2(single_step_count[0]),
        .I3(start_single_step_reg_n_0),
        .I4(ok_To_Stop),
        .O(start_single_step_i_1_n_0));
  FDRE start_single_step_reg
       (.C(Clk),
        .CE(1'b1),
        .D(start_single_step_i_1_n_0),
        .Q(start_single_step_reg_n_0),
        .R(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_mb_sync_bit__parameterized1_32 sync_trig_ack_in_0
       (.Clk(Clk),
        .D(D),
        .Dbg_Trig_Ack_In(Dbg_Trig_Ack_In[1]),
        .Dbg_Trig_In(Dbg_Trig_In[1]),
        .mb_halted_1(mb_halted_1),
        .mb_halted_1_reg(sync_trig_ack_in_0_n_1),
        .sync_reset(sync_reset),
        .trig_ack_in_0_synced(trig_ack_in_0_synced),
        .trig_ack_in_0_synced_1(trig_ack_in_0_synced_1));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_mb_sync_bit__parameterized1_33 sync_trig_out_0
       (.Clk(Clk),
        .Dbg_Trig_Ack_Out(Dbg_Trig_Ack_Out[1]),
        .Dbg_Trig_Out(Dbg_Trig_Out[1]),
        .\Single_Synchronize.use_sync_reset.sync_reg_0 (sync_trig_out_0_n_1),
        .sync_reset(sync_reset),
        .trig_out_0_synced(trig_out_0_synced),
        .trig_out_0_synced_1(trig_out_0_synced_1));
  FDRE trig_ack_in_0_synced_1_reg
       (.C(Clk),
        .CE(1'b1),
        .D(trig_ack_in_0_synced),
        .Q(trig_ack_in_0_synced_1),
        .R(sync_reset));
  FDRE trig_in_0_reg
       (.C(Clk),
        .CE(1'b1),
        .D(sync_trig_ack_in_0_n_1),
        .Q(Dbg_Trig_In[1]),
        .R(sync_reset));
endmodule

module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Decode
   (IReady,
    Buffer_Addr,
    reg1_Addr,
    imm_Value,
    nonvalid_IFetch_n_reg_0,
    jump,
    D,
    of_PipeRun,
    \write_Addr_I_reg[0]_0 ,
    res_Forward1,
    res_Forward2,
    alu_Op,
    carry_In,
    Reg_Test_Equal,
    reg_Test_Equal_N,
    opsel1_SPR,
    exception_kind,
    Pause_Ack,
    compare_Instr,
    Unsigned_Op,
    Select_Logic,
    has_inhibit_EX,
    dbg_clean_stop,
    Valid_Instr_i,
    Logic_Oper,
    \instr_EX_i_reg[25]_0 ,
    \instr_EX_i_reg[26]_0 ,
    load_Store_i,
    Hibernate,
    Sleep_Decode,
    Suspend,
    isbyte,
    isdoublet,
    use_Imm_Reg,
    sext8,
    sext16,
    is_swx_I_reg_0,
    \Using_FPGA.set_BIP_I_reg_0 ,
    \Using_FPGA.Native ,
    \Using_FPGA.enable_Interrupts_I_reg_0 ,
    Q,
    DI,
    D_0,
    D_1,
    D_2,
    D_3,
    D_4,
    D_5,
    D_6,
    D_7,
    D_8,
    D_9,
    D_10,
    D_11,
    D_12,
    D_13,
    D_14,
    D_15,
    D_16,
    D_17,
    D_18,
    D_19,
    D_20,
    D_21,
    D_22,
    D_23,
    D_24,
    D_25,
    D_26,
    D_27,
    D_28,
    D_29,
    D_30,
    D_31,
    \Using_FPGA.Native_0 ,
    E,
    ok_To_Stop,
    dbg_brki_hit0,
    \Area_Debug_Control.normal_stop_cmd_hold_reg ,
    force_stop_cmd_hold0,
    reg_Write_dbg,
    Reg_Write,
    reg_Write_I,
    ex_Valid_reg_0,
    MSR_Rst,
    is_swx_I_reg_1,
    LOCKSTEP_Master_Out,
    is_swx_I_reg_2,
    PC_Write,
    branch_with_delay,
    \Use_Async_Reset.sync_reset_reg ,
    \Using_FPGA.Native_1 ,
    Data_Read_Mask,
    \Using_FPGA.Native_2 ,
    Shifted,
    Interrupt_Ack,
    Shift_Oper,
    \Result_Sel_reg[0]_0 ,
    Y,
    Clk,
    S,
    DReady0_out,
    IReady1_out,
    \LOCKSTEP_Out_reg[3] ,
    \Using_FPGA.Native_3 ,
    dbg_pause,
    sync_reset,
    Op1_Low,
    LO,
    \Using_FPGA.Native_4 ,
    ex_Valid_reg_1,
    Reg_zero,
    \Using_dynamic_instr_Address.old_IE_value_reg_0 ,
    missed_IFetch_reg_0,
    missed_IFetch_reg_1,
    using_Imm_reg_0,
    \Using_Ext_Databus.mem_access_reg ,
    mem_access,
    break_Pipe_i_reg_0,
    Op1_Shift,
    inHibit_EX_reg_0,
    \Using_FPGA.Native_5 ,
    \Using_FPGA.Native_6 ,
    \Using_FPGA.Native_7 ,
    \Using_FPGA.Native_8 ,
    \Using_FPGA.Native_9 ,
    \Using_FPGA.Native_10 ,
    \Using_FPGA.Native_11 ,
    \Using_FPGA.Native_12 ,
    \Using_FPGA.Native_13 ,
    \Using_FPGA.Native_14 ,
    \Using_FPGA.Native_15 ,
    \Using_FPGA.Native_16 ,
    \Using_FPGA.Native_17 ,
    \Using_FPGA.Native_18 ,
    \Using_FPGA.Native_19 ,
    \Using_FPGA.Native_20 ,
    \Using_FPGA.Native_21 ,
    \Using_FPGA.Native_22 ,
    \Using_FPGA.Native_23 ,
    \Using_FPGA.Native_24 ,
    \Using_FPGA.Native_25 ,
    \Using_FPGA.Native_26 ,
    \Using_FPGA.Native_27 ,
    \Using_FPGA.Native_28 ,
    \Using_FPGA.Native_29 ,
    \Using_FPGA.Native_30 ,
    \Using_FPGA.Native_31 ,
    \Using_FPGA.Native_32 ,
    \Using_FPGA.Native_33 ,
    \Using_FPGA.Native_34 ,
    \Using_FPGA.Native_35 ,
    \Using_FPGA.Native_36 ,
    \Using_FPGA.Native_37 ,
    dbg_brki_hit,
    \Using_FPGA.Native_38 ,
    force_stop_cmd_i,
    force_stop_cmd_hold,
    Pause_Ack_reg_0,
    MEM_DAXI_Data_Strobe,
    DReady,
    Interrupt,
    \Using_dynamic_instr_Address.Interrupt_Ack_reg[1]_0 ,
    trace_reg_write_novalid,
    \Using_FPGA.Native_39 ,
    \Using_FPGA.Native_40 ,
    delay_slot_instr_reg,
    wakeup_i,
    \Area_Debug_Control.dbg_brki_hit_i_2 ,
    \Using_FPGA.Native_41 ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7);
  output IReady;
  output [2:0]Buffer_Addr;
  output [0:4]reg1_Addr;
  output [0:15]imm_Value;
  output nonvalid_IFetch_n_reg_0;
  output jump;
  output [6:0]D;
  output of_PipeRun;
  output [4:0]\write_Addr_I_reg[0]_0 ;
  output res_Forward1;
  output res_Forward2;
  output [0:1]alu_Op;
  output carry_In;
  output Reg_Test_Equal;
  output reg_Test_Equal_N;
  output opsel1_SPR;
  output [0:0]exception_kind;
  output Pause_Ack;
  output compare_Instr;
  output Unsigned_Op;
  output Select_Logic;
  output has_inhibit_EX;
  output dbg_clean_stop;
  output Valid_Instr_i;
  output [0:1]Logic_Oper;
  output \instr_EX_i_reg[25]_0 ;
  output \instr_EX_i_reg[26]_0 ;
  output load_Store_i;
  output Hibernate;
  output Sleep_Decode;
  output Suspend;
  output isbyte;
  output isdoublet;
  output use_Imm_Reg;
  output sext8;
  output sext16;
  output is_swx_I_reg_0;
  output \Using_FPGA.set_BIP_I_reg_0 ;
  output \Using_FPGA.Native ;
  output \Using_FPGA.enable_Interrupts_I_reg_0 ;
  output [27:0]Q;
  output DI;
  output D_0;
  output D_1;
  output D_2;
  output D_3;
  output D_4;
  output D_5;
  output D_6;
  output D_7;
  output D_8;
  output D_9;
  output D_10;
  output D_11;
  output D_12;
  output D_13;
  output D_14;
  output D_15;
  output D_16;
  output D_17;
  output D_18;
  output D_19;
  output D_20;
  output D_21;
  output D_22;
  output D_23;
  output D_24;
  output D_25;
  output D_26;
  output D_27;
  output D_28;
  output D_29;
  output D_30;
  output D_31;
  output \Using_FPGA.Native_0 ;
  output [0:0]E;
  output ok_To_Stop;
  output dbg_brki_hit0;
  output \Area_Debug_Control.normal_stop_cmd_hold_reg ;
  output force_stop_cmd_hold0;
  output reg_Write_dbg;
  output Reg_Write;
  output reg_Write_I;
  output ex_Valid_reg_0;
  output MSR_Rst;
  output [0:0]is_swx_I_reg_1;
  output [0:0]LOCKSTEP_Master_Out;
  output is_swx_I_reg_2;
  output PC_Write;
  output branch_with_delay;
  output \Use_Async_Reset.sync_reset_reg ;
  output \Using_FPGA.Native_1 ;
  output Data_Read_Mask;
  output \Using_FPGA.Native_2 ;
  output Shifted;
  output [0:1]Interrupt_Ack;
  output Shift_Oper;
  output [1:0]\Result_Sel_reg[0]_0 ;
  input [0:31]Y;
  input Clk;
  input S;
  input DReady0_out;
  input IReady1_out;
  input \LOCKSTEP_Out_reg[3] ;
  input \Using_FPGA.Native_3 ;
  input dbg_pause;
  input sync_reset;
  input [0:2]Op1_Low;
  input LO;
  input \Using_FPGA.Native_4 ;
  input ex_Valid_reg_1;
  input Reg_zero;
  input \Using_dynamic_instr_Address.old_IE_value_reg_0 ;
  input missed_IFetch_reg_0;
  input missed_IFetch_reg_1;
  input using_Imm_reg_0;
  input \Using_Ext_Databus.mem_access_reg ;
  input mem_access;
  input [2:0]break_Pipe_i_reg_0;
  input Op1_Shift;
  input inHibit_EX_reg_0;
  input \Using_FPGA.Native_5 ;
  input [15:0]\Using_FPGA.Native_6 ;
  input \Using_FPGA.Native_7 ;
  input \Using_FPGA.Native_8 ;
  input \Using_FPGA.Native_9 ;
  input \Using_FPGA.Native_10 ;
  input \Using_FPGA.Native_11 ;
  input \Using_FPGA.Native_12 ;
  input \Using_FPGA.Native_13 ;
  input \Using_FPGA.Native_14 ;
  input \Using_FPGA.Native_15 ;
  input \Using_FPGA.Native_16 ;
  input \Using_FPGA.Native_17 ;
  input \Using_FPGA.Native_18 ;
  input \Using_FPGA.Native_19 ;
  input \Using_FPGA.Native_20 ;
  input \Using_FPGA.Native_21 ;
  input \Using_FPGA.Native_22 ;
  input \Using_FPGA.Native_23 ;
  input \Using_FPGA.Native_24 ;
  input \Using_FPGA.Native_25 ;
  input \Using_FPGA.Native_26 ;
  input \Using_FPGA.Native_27 ;
  input \Using_FPGA.Native_28 ;
  input \Using_FPGA.Native_29 ;
  input \Using_FPGA.Native_30 ;
  input \Using_FPGA.Native_31 ;
  input \Using_FPGA.Native_32 ;
  input \Using_FPGA.Native_33 ;
  input \Using_FPGA.Native_34 ;
  input \Using_FPGA.Native_35 ;
  input \Using_FPGA.Native_36 ;
  input \Using_FPGA.Native_37 ;
  input dbg_brki_hit;
  input \Using_FPGA.Native_38 ;
  input force_stop_cmd_i;
  input force_stop_cmd_hold;
  input Pause_Ack_reg_0;
  input MEM_DAXI_Data_Strobe;
  input DReady;
  input Interrupt;
  input \Using_dynamic_instr_Address.Interrupt_Ack_reg[1]_0 ;
  input trace_reg_write_novalid;
  input \Using_FPGA.Native_39 ;
  input \Using_FPGA.Native_40 ;
  input delay_slot_instr_reg;
  input [0:1]wakeup_i;
  input [0:0]\Area_Debug_Control.dbg_brki_hit_i_2 ;
  input \Using_FPGA.Native_41 ;
  input lopt;
  output lopt_1;
  input lopt_2;
  output lopt_3;
  output lopt_4;
  input lopt_5;
  output lopt_6;
  output lopt_7;

  wire [0:0]\Area_Debug_Control.dbg_brki_hit_i_2 ;
  wire \Area_Debug_Control.normal_stop_cmd_hold_reg ;
  wire Blocked_Valid_Instr;
  wire Blocked_Valid_Instr0;
  wire [2:0]Buffer_Addr;
  wire Clk;
  wire [6:0]D;
  wire DI;
  wire DReady;
  wire DReady0_out;
  wire D_0;
  wire D_1;
  wire D_10;
  wire D_11;
  wire D_12;
  wire D_13;
  wire D_14;
  wire D_15;
  wire D_16;
  wire D_17;
  wire D_18;
  wire D_19;
  wire D_2;
  wire D_20;
  wire D_21;
  wire D_22;
  wire D_23;
  wire D_24;
  wire D_25;
  wire D_26;
  wire D_27;
  wire D_28;
  wire D_29;
  wire D_3;
  wire D_30;
  wire D_31;
  wire D_32;
  wire D_4;
  wire D_5;
  wire D_6;
  wire D_7;
  wire D_8;
  wire D_9;
  wire Data_Read_Mask;
  wire Dbg_Clean_Stop_i_1_n_0;
  wire [0:0]E;
  wire Hibernate;
  wire I291_out;
  wire IReady;
  wire IReady1_out;
  wire Interrupt;
  wire [0:1]Interrupt_Ack;
  wire LO;
  wire [0:0]LOCKSTEP_Master_Out;
  wire \LOCKSTEP_Out_reg[3] ;
  wire [0:1]Logic_Oper;
  wire MEM_DAXI_Data_Strobe;
  wire MSR_Rst;
  wire MTSMSR_Write;
  wire [0:2]Op1_Low;
  wire Op1_Shift;
  wire PC_Write;
  wire Pause_Ack;
  wire Pause_Ack0;
  wire Pause_Ack_reg_0;
  wire PreFetch_Buffer_I_n_100;
  wire PreFetch_Buffer_I_n_105;
  wire PreFetch_Buffer_I_n_106;
  wire PreFetch_Buffer_I_n_107;
  wire PreFetch_Buffer_I_n_109;
  wire PreFetch_Buffer_I_n_111;
  wire PreFetch_Buffer_I_n_113;
  wire PreFetch_Buffer_I_n_116;
  wire PreFetch_Buffer_I_n_117;
  wire PreFetch_Buffer_I_n_118;
  wire PreFetch_Buffer_I_n_36;
  wire PreFetch_Buffer_I_n_37;
  wire PreFetch_Buffer_I_n_38;
  wire PreFetch_Buffer_I_n_39;
  wire PreFetch_Buffer_I_n_41;
  wire PreFetch_Buffer_I_n_42;
  wire PreFetch_Buffer_I_n_43;
  wire PreFetch_Buffer_I_n_44;
  wire PreFetch_Buffer_I_n_81;
  wire PreFetch_Buffer_I_n_82;
  wire PreFetch_Buffer_I_n_83;
  wire PreFetch_Buffer_I_n_84;
  wire PreFetch_Buffer_I_n_85;
  wire PreFetch_Buffer_I_n_93;
  wire PreFetch_Buffer_I_n_94;
  wire PreFetch_Buffer_I_n_95;
  wire PreFetch_Buffer_I_n_97;
  wire PreFetch_Buffer_I_n_98;
  wire [27:0]Q;
  wire R;
  wire Reg_Test_Equal;
  wire Reg_Test_Equal_N_i7_out;
  wire Reg_Test_Equal_i;
  wire Reg_Write;
  wire Reg_zero;
  wire [1:0]\Result_Sel_reg[0]_0 ;
  wire S;
  wire S1_out;
  wire S89_out;
  wire Select_Logic;
  wire Select_Logic0;
  wire Shift_Oper;
  wire Shifted;
  wire Sign_Extend_i_1_n_0;
  wire Sleep_Decode;
  wire Suspend;
  wire Unsigned_Op;
  wire \Use_Async_Reset.sync_reset_reg ;
  wire \Using_Ext_Databus.mem_access_reg ;
  wire \Using_FPGA.Correct_Carry_MUXCY_n_1 ;
  wire \Using_FPGA.MUXCY_JUMP_CARRY3_n_1 ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_10 ;
  wire \Using_FPGA.Native_11 ;
  wire \Using_FPGA.Native_12 ;
  wire \Using_FPGA.Native_13 ;
  wire \Using_FPGA.Native_14 ;
  wire \Using_FPGA.Native_15 ;
  wire \Using_FPGA.Native_16 ;
  wire \Using_FPGA.Native_17 ;
  wire \Using_FPGA.Native_18 ;
  wire \Using_FPGA.Native_19 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_20 ;
  wire \Using_FPGA.Native_21 ;
  wire \Using_FPGA.Native_22 ;
  wire \Using_FPGA.Native_23 ;
  wire \Using_FPGA.Native_24 ;
  wire \Using_FPGA.Native_25 ;
  wire \Using_FPGA.Native_26 ;
  wire \Using_FPGA.Native_27 ;
  wire \Using_FPGA.Native_28 ;
  wire \Using_FPGA.Native_29 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_30 ;
  wire \Using_FPGA.Native_31 ;
  wire \Using_FPGA.Native_32 ;
  wire \Using_FPGA.Native_33 ;
  wire \Using_FPGA.Native_34 ;
  wire \Using_FPGA.Native_35 ;
  wire \Using_FPGA.Native_36 ;
  wire \Using_FPGA.Native_37 ;
  wire \Using_FPGA.Native_38 ;
  wire \Using_FPGA.Native_39 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_40 ;
  wire \Using_FPGA.Native_41 ;
  wire \Using_FPGA.Native_5 ;
  wire [15:0]\Using_FPGA.Native_6 ;
  wire \Using_FPGA.Native_7 ;
  wire \Using_FPGA.Native_8 ;
  wire \Using_FPGA.Native_9 ;
  wire \Using_FPGA.Native_i_3__1_n_0 ;
  wire \Using_FPGA.Native_i_4__0_n_0 ;
  wire \Using_FPGA.Native_i_6__0_n_0 ;
  wire \Using_FPGA.Using_Breakable_Pipe.Take_Intr_MUXCY_3_n_1 ;
  wire \Using_FPGA.Using_Breakable_Pipe.Take_Intr_MUXCY_3_n_2 ;
  wire \Using_FPGA.Using_Breakable_Pipe.Take_Intr_MUXCY_3_n_6 ;
  wire \Using_FPGA.enable_Interrupts_I_reg_0 ;
  wire \Using_FPGA.enable_Interrupts_I_reg_n_0 ;
  wire \Using_FPGA.iFetch_MuxCY_2_n_1 ;
  wire \Using_FPGA.iFetch_MuxCY_2_n_3 ;
  wire \Using_FPGA.of_PipeRun_MuxCY_1_n_1 ;
  wire \Using_FPGA.of_PipeRun_MuxCY_1_n_10 ;
  wire \Using_FPGA.of_PipeRun_MuxCY_1_n_14 ;
  wire \Using_FPGA.of_PipeRun_MuxCY_1_n_15 ;
  wire \Using_FPGA.of_PipeRun_MuxCY_1_n_16 ;
  wire \Using_FPGA.of_PipeRun_MuxCY_1_n_17 ;
  wire \Using_FPGA.of_PipeRun_MuxCY_1_n_18 ;
  wire \Using_FPGA.of_PipeRun_MuxCY_1_n_2 ;
  wire \Using_FPGA.of_PipeRun_MuxCY_1_n_3 ;
  wire \Using_FPGA.of_PipeRun_MuxCY_1_n_4 ;
  wire \Using_FPGA.of_PipeRun_MuxCY_1_n_5 ;
  wire \Using_FPGA.of_PipeRun_MuxCY_1_n_6 ;
  wire \Using_FPGA.of_PipeRun_MuxCY_1_n_7 ;
  wire \Using_FPGA.of_PipeRun_MuxCY_1_n_8 ;
  wire \Using_FPGA.reset_BIP_I_reg_n_0 ;
  wire \Using_FPGA.set_BIP_I_reg_0 ;
  wire \Using_FPGA.set_BIP_I_reg_n_0 ;
  wire \Using_LWX_SWX_instr.reservation_i_2_n_0 ;
  wire \Using_LWX_SWX_instr.reservation_reg_n_0 ;
  wire \Using_dynamic_instr_Address.Interrupt_Ack[0]_i_1_n_0 ;
  wire \Using_dynamic_instr_Address.Interrupt_Ack[1]_i_1_n_0 ;
  wire \Using_dynamic_instr_Address.Interrupt_Ack_reg[1]_0 ;
  wire \Using_dynamic_instr_Address.old_IE_value_reg_0 ;
  wire Valid_Instr0;
  wire Valid_Instr_i;
  wire [0:31]Y;
  wire active_wakeup;
  wire active_wakeup0;
  wire [0:1]alu_Op;
  wire branch_with_delay;
  wire break_Pipe_i_reg0;
  wire [2:0]break_Pipe_i_reg_0;
  wire break_Pipe_i_reg__0;
  wire buffer_Full;
  wire byte_i13_out;
  wire carry_In;
  wire compare_Instr;
  wire correct_Carry;
  wire correct_Carry_I;
  wire correct_Carry_II;
  wire correct_Carry_Select;
  wire d_AS_I;
  wire d_AS_I16_out;
  wire dbg_brki_hit;
  wire dbg_brki_hit0;
  wire dbg_clean_stop;
  wire dbg_pause;
  wire delay_slot_instr_reg;
  wire doublet_Read;
  wire doublet_Read_i_i_1_n_0;
  wire enable_Interrupts_I;
  wire ex_Valid;
  wire ex_Valid_1st_cycle4_out;
  wire ex_Valid_1st_cycle_reg_n_0;
  wire ex_Valid_reg_0;
  wire ex_Valid_reg_1;
  wire ex_first_cycle;
  wire [0:0]exception_kind;
  wire force1;
  wire force1_i27_out;
  wire force2;
  wire force2_i;
  wire force_DI1;
  wire force_DI2;
  wire force_Val1;
  wire force_Val1_i25_out;
  wire force_Val2_N;
  wire force_jump1;
  wire force_jump2;
  wire force_stop_cmd_hold;
  wire force_stop_cmd_hold0;
  wire force_stop_cmd_i;
  wire has_inhibit_EX;
  wire hibernate_i_i_1_n_0;
  wire iFetch_In_Progress;
  wire ifetch_carry1;
  wire ifetch_carry2;
  wire [0:15]imm_Value;
  wire inHibit_EX;
  wire inHibit_EX1;
  wire inHibit_EX_reg_0;
  wire \instr_EX_i_reg[25]_0 ;
  wire \instr_EX_i_reg[26]_0 ;
  wire [0:10]instr_OF_raw;
  wire is_lwx_I;
  wire is_swx_I_reg_0;
  wire [0:0]is_swx_I_reg_1;
  wire is_swx_I_reg_2;
  wire is_swx_I_reg_n_0;
  wire isbyte;
  wire isdoublet;
  wire jump;
  wire jump2_I_1;
  wire jump2_I_reg_n_0;
  wire jump_Carry1;
  wire jump_Carry2;
  wire load_Store_i;
  wire load_Store_i2;
  wire lopt;
  wire \^lopt_1 ;
  wire lopt_10;
  wire lopt_11;
  wire lopt_12;
  wire lopt_13;
  wire lopt_14;
  wire lopt_15;
  wire lopt_16;
  wire lopt_17;
  wire lopt_18;
  wire lopt_19;
  wire \^lopt_2 ;
  wire lopt_20;
  wire lopt_21;
  wire lopt_22;
  wire lopt_23;
  wire lopt_24;
  wire lopt_25;
  wire lopt_26;
  wire lopt_27;
  wire lopt_28;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire lopt_8;
  wire lopt_9;
  wire mbar_decode_I;
  wire mbar_first;
  wire mbar_first_i_3_n_0;
  wire mbar_first_reg_n_0;
  wire mbar_hold_I_reg_n_0;
  wire mbar_is_sleep;
  wire mbar_is_sleep0;
  wire mbar_sleep;
  wire mbar_sleep_i_1_n_0;
  wire mem_access;
  wire missed_IFetch;
  wire missed_IFetch_reg_0;
  wire missed_IFetch_reg_1;
  wire mtsmsr_write_i_reg_n_0;
  wire mul_Executing;
  wire mul_Executing_delayed;
  wire mul_Executing_done;
  wire mul_Executing_done0;
  wire new_Carry;
  wire nonvalid_IFetch_n_reg_0;
  wire of_PipeRun;
  wire of_PipeRun_Select;
  wire of_PipeRun_without_dready;
  wire of_Valid_Raw;
  wire of_mbar_decode;
  wire ok_To_Stop;
  wire old_IE_value;
  wire opsel1_SPR;
  wire opsel1_SPR_Select;
  wire opsel1_SPR_Select_1;
  wire opsel1_SPR_Select_2_1;
  wire opsel1_SPR_Select_2_2;
  wire [4:0]p_1_in;
  wire quadlet_Read;
  wire quadlet_Read_i_i_1_n_0;
  wire [0:4]reg1_Addr;
  wire reg_Test_Equal_N;
  wire reg_Write_I;
  wire reg_Write_dbg;
  wire res_Forward1;
  wire res_Forward2;
  wire res_forward1_1;
  wire res_forward1_2;
  wire res_forward1_3;
  wire res_forward2_1;
  wire res_forward2_2;
  wire res_forward2_3;
  wire reset_BIP_I8_out;
  wire reset_delay;
  wire select_ALU_Carry;
  wire sext16;
  wire sext8;
  wire shift_Carry_In;
  wire sleep_i0;
  wire sleep_i00_in;
  wire sleep_i_i_1_n_0;
  wire sub_Carry;
  wire suspend_i_i_1_n_0;
  wire swx_ready;
  wire sync_reset;
  wire take_Intr_Now_I;
  wire take_Intr_Now_II;
  wire take_Intr_Now_III;
  wire take_intr_2nd_cycle_reg_n_0;
  wire take_intr_Done;
  wire trace_reg_write_novalid;
  wire trace_valid_instr_part1;
  wire trace_valid_instr_part10;
  wire trace_valid_instr_part1_i_2_n_0;
  wire use_Imm_Reg;
  wire use_Reg_Neg_DI;
  wire use_Reg_Neg_DI_i24_out;
  wire use_Reg_Neg_S;
  wire use_Reg_Neg_S_i26_out;
  wire using_Imm_reg_0;
  wire [0:1]wakeup_i;
  wire \write_Addr_I[3]_i_1_n_0 ;
  wire [4:0]\write_Addr_I_reg[0]_0 ;
  wire write_Carry;
  wire write_Carry_I_reg_n_0;
  wire write_Reg_I_S;
  wire write_Reg_reg_n_0;
  wire writing;
  wire writing_reg_n_0;

  assign \^lopt_1  = lopt_2;
  assign \^lopt_4  = lopt_5;
  assign lopt_1 = select_ALU_Carry;
  assign lopt_3 = \^lopt_2 ;
  assign lopt_4 = \^lopt_3 ;
  assign lopt_6 = force_DI1;
  assign lopt_7 = force_jump1;
  LUT6 #(
    .INIT(64'h0000F0FE00000000)) 
    \Area_Optimized.register_write_i_1 
       (.I0(DReady),
        .I1(MEM_DAXI_Data_Strobe),
        .I2(write_Reg_reg_n_0),
        .I3(writing_reg_n_0),
        .I4(ex_Valid_reg_1),
        .I5(ex_Valid),
        .O(reg_Write_dbg));
  FDRE Blocked_Valid_Instr_reg
       (.C(Clk),
        .CE(1'b1),
        .D(Blocked_Valid_Instr0),
        .Q(Blocked_Valid_Instr),
        .R(sync_reset));
  FDRE Compare_Instr_reg
       (.C(Clk),
        .CE(of_PipeRun),
        .D(PreFetch_Buffer_I_n_118),
        .Q(compare_Instr),
        .R(\Using_FPGA.of_PipeRun_MuxCY_1_n_17 ));
  LUT4 #(
    .INIT(16'h4044)) 
    D_AS_INST_0
       (.I0(ex_Valid_reg_1),
        .I1(d_AS_I),
        .I2(\Using_LWX_SWX_instr.reservation_reg_n_0 ),
        .I3(is_swx_I_reg_n_0),
        .O(D[4]));
  LUT2 #(
    .INIT(4'h1)) 
    Dbg_Clean_Stop_i_1
       (.I0(jump2_I_reg_n_0),
        .I1(use_Imm_Reg),
        .O(Dbg_Clean_Stop_i_1_n_0));
  FDSE Dbg_Clean_Stop_reg
       (.C(Clk),
        .CE(of_PipeRun),
        .D(Dbg_Clean_Stop_i_1_n_0),
        .Q(dbg_clean_stop),
        .S(sync_reset));
  FDRE Has_Inhibit_EX_reg
       (.C(Clk),
        .CE(1'b1),
        .D(inHibit_EX),
        .Q(has_inhibit_EX),
        .R(sync_reset));
  LUT6 #(
    .INIT(64'hE0000000E000E000)) 
    \LOCKSTEP_Master_Out[1]_INST_0 
       (.I0(force_stop_cmd_hold),
        .I1(force_stop_cmd_i),
        .I2(\Using_FPGA.Correct_Carry_MUXCY_n_1 ),
        .I3(load_Store_i),
        .I4(\Using_LWX_SWX_instr.reservation_reg_n_0 ),
        .I5(is_swx_I_reg_n_0),
        .O(LOCKSTEP_Master_Out));
  LUT6 #(
    .INIT(64'h0808000800080008)) 
    Pause_Ack_i_1
       (.I0(Pause_Ack_reg_0),
        .I1(dbg_pause),
        .I2(iFetch_In_Progress),
        .I3(mul_Executing),
        .I4(mbar_decode_I),
        .I5(mbar_is_sleep),
        .O(Pause_Ack0));
  FDRE Pause_Ack_reg
       (.C(Clk),
        .CE(1'b1),
        .D(Pause_Ack0),
        .Q(Pause_Ack),
        .R(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_PreFetch_Buffer PreFetch_Buffer_I
       (.\Area_Debug_Control.dbg_brki_hit_i_2 (\Area_Debug_Control.dbg_brki_hit_i_2 ),
        .\Area_Debug_Control.normal_stop_cmd_hold_reg (\Area_Debug_Control.normal_stop_cmd_hold_reg ),
        .CI(IReady),
        .Clk(Clk),
        .D({reg1_Addr[0],reg1_Addr[1],reg1_Addr[2],reg1_Addr[3],reg1_Addr[4],imm_Value[0],imm_Value[1],imm_Value[2],imm_Value[3],imm_Value[4],imm_Value[5],imm_Value[6],imm_Value[7],imm_Value[8],imm_Value[11],imm_Value[12],imm_Value[13],imm_Value[14],imm_Value[15]}),
        .DI(DI),
        .D_0(D_0),
        .D_1(D_1),
        .D_10(D_10),
        .D_11(D_11),
        .D_12(D_12),
        .D_13(D_13),
        .D_14(D_14),
        .D_15(D_15),
        .D_16(D_16),
        .D_17(D_17),
        .D_18(D_18),
        .D_19(D_19),
        .D_2(D_2),
        .D_20(D_20),
        .D_21(D_21),
        .D_22(D_22),
        .D_23(D_23),
        .D_24(D_24),
        .D_25(D_25),
        .D_26(D_26),
        .D_27(D_27),
        .D_28(D_28),
        .D_29(D_29),
        .D_3(D_3),
        .D_30(D_30),
        .D_31(D_31),
        .D_32(D_32),
        .D_4(D_4),
        .D_5(D_5),
        .D_6(D_6),
        .D_7(D_7),
        .D_8(D_8),
        .D_9(D_9),
        .E(E),
        .IReady1_out(IReady1_out),
        .Reg_Test_Equal_N_i7_out(Reg_Test_Equal_N_i7_out),
        .Reg_Test_Equal_i(Reg_Test_Equal_i),
        .S(S),
        .S89_out(S89_out),
        .\Serial_Dbg_Intf.control_reg_reg[8] (PreFetch_Buffer_I_n_105),
        .Sext16_reg(PreFetch_Buffer_I_n_37),
        .Sext8_reg(PreFetch_Buffer_I_n_38),
        .Sext8_reg_0(\Using_FPGA.of_PipeRun_MuxCY_1_n_10 ),
        .Sext8_reg_1(sext8),
        .\Use_Async_Reset.sync_reset_reg (PreFetch_Buffer_I_n_44),
        .\Use_Async_Reset.sync_reset_reg_0 ({p_1_in[4],p_1_in[0]}),
        .\Using_FPGA.Native (Buffer_Addr[0]),
        .\Using_FPGA.Native_0 (Buffer_Addr[1]),
        .\Using_FPGA.Native_1 (Buffer_Addr[2]),
        .\Using_FPGA.Native_10 (PreFetch_Buffer_I_n_94),
        .\Using_FPGA.Native_11 (PreFetch_Buffer_I_n_95),
        .\Using_FPGA.Native_12 (PreFetch_Buffer_I_n_97),
        .\Using_FPGA.Native_13 (PreFetch_Buffer_I_n_98),
        .\Using_FPGA.Native_14 (PreFetch_Buffer_I_n_100),
        .\Using_FPGA.Native_15 (PreFetch_Buffer_I_n_106),
        .\Using_FPGA.Native_16 (PreFetch_Buffer_I_n_107),
        .\Using_FPGA.Native_17 (PreFetch_Buffer_I_n_111),
        .\Using_FPGA.Native_18 (PreFetch_Buffer_I_n_116),
        .\Using_FPGA.Native_19 (PreFetch_Buffer_I_n_117),
        .\Using_FPGA.Native_2 (imm_Value[9]),
        .\Using_FPGA.Native_20 (PreFetch_Buffer_I_n_118),
        .\Using_FPGA.Native_21 (\Using_FPGA.Native_5 ),
        .\Using_FPGA.Native_22 (\Using_FPGA.Native_6 ),
        .\Using_FPGA.Native_23 (use_Imm_Reg),
        .\Using_FPGA.Native_24 (\Using_FPGA.Native_7 ),
        .\Using_FPGA.Native_25 (\Using_FPGA.Native_8 ),
        .\Using_FPGA.Native_26 (\Using_FPGA.Native_9 ),
        .\Using_FPGA.Native_27 (\Using_FPGA.Native_10 ),
        .\Using_FPGA.Native_28 (\Using_FPGA.Native_11 ),
        .\Using_FPGA.Native_29 (\Using_FPGA.Native_12 ),
        .\Using_FPGA.Native_3 (imm_Value[10]),
        .\Using_FPGA.Native_30 (\Using_FPGA.Native_13 ),
        .\Using_FPGA.Native_31 (\Using_FPGA.Native_14 ),
        .\Using_FPGA.Native_32 (\Using_FPGA.Native_15 ),
        .\Using_FPGA.Native_33 (\Using_FPGA.Native_16 ),
        .\Using_FPGA.Native_34 (\Using_FPGA.Native_17 ),
        .\Using_FPGA.Native_35 (\Using_FPGA.Native_18 ),
        .\Using_FPGA.Native_36 (\Using_FPGA.Native_19 ),
        .\Using_FPGA.Native_37 (\Using_FPGA.Native_20 ),
        .\Using_FPGA.Native_38 (\Using_FPGA.Native_21 ),
        .\Using_FPGA.Native_39 (\Using_FPGA.Native_22 ),
        .\Using_FPGA.Native_4 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_40 (\Using_FPGA.Native_23 ),
        .\Using_FPGA.Native_41 (\Using_FPGA.Native_24 ),
        .\Using_FPGA.Native_42 (\Using_FPGA.Native_25 ),
        .\Using_FPGA.Native_43 (\Using_FPGA.Native_26 ),
        .\Using_FPGA.Native_44 (\Using_FPGA.Native_27 ),
        .\Using_FPGA.Native_45 (\Using_FPGA.Native_28 ),
        .\Using_FPGA.Native_46 (\Using_FPGA.Native_29 ),
        .\Using_FPGA.Native_47 (\Using_FPGA.Native_30 ),
        .\Using_FPGA.Native_48 (\Using_FPGA.Native_31 ),
        .\Using_FPGA.Native_49 (\Using_FPGA.Native_32 ),
        .\Using_FPGA.Native_5 (PreFetch_Buffer_I_n_81),
        .\Using_FPGA.Native_50 (\Using_FPGA.Native_33 ),
        .\Using_FPGA.Native_51 (\Using_FPGA.Native_34 ),
        .\Using_FPGA.Native_52 (\Using_FPGA.Native_35 ),
        .\Using_FPGA.Native_53 (\Using_FPGA.Native_36 ),
        .\Using_FPGA.Native_54 (\Using_FPGA.Native_37 ),
        .\Using_FPGA.Native_55 (exception_kind),
        .\Using_FPGA.Native_56 (\Using_FPGA.Native_38 ),
        .\Using_FPGA.Native_57 (S1_out),
        .\Using_FPGA.Native_6 (PreFetch_Buffer_I_n_82),
        .\Using_FPGA.Native_7 (PreFetch_Buffer_I_n_83),
        .\Using_FPGA.Native_8 (PreFetch_Buffer_I_n_84),
        .\Using_FPGA.Native_9 (PreFetch_Buffer_I_n_85),
        .\Using_FPGA.Native_I1 (ex_Valid_reg_1),
        .\Using_FPGA.set_BIP_I_reg (PreFetch_Buffer_I_n_42),
        .\Using_FPGA.set_BIP_I_reg_0 (\Using_FPGA.set_BIP_I_reg_n_0 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (PreFetch_Buffer_I_n_93),
        .Y(Y),
        .buffer_Full(buffer_Full),
        .byte_i13_out(byte_i13_out),
        .byte_i_reg(PreFetch_Buffer_I_n_41),
        .byte_i_reg_0(of_PipeRun),
        .d_AS_I16_out(d_AS_I16_out),
        .dbg_pause(dbg_pause),
        .dbg_pause_reg(PreFetch_Buffer_I_n_113),
        .doublet_i_reg(PreFetch_Buffer_I_n_39),
        .enable_Interrupts_I(enable_Interrupts_I),
        .ex_Valid(ex_Valid),
        .ex_Valid_reg(\Using_Ext_Databus.mem_access_reg ),
        .ex_Valid_reg_0(Pause_Ack_reg_0),
        .force1_i27_out(force1_i27_out),
        .force2_i(force2_i),
        .force_Val1_i25_out(force_Val1_i25_out),
        .inHibit_EX(inHibit_EX),
        .inHibit_EX_reg(PreFetch_Buffer_I_n_36),
        .instr_OF_raw({instr_OF_raw[0],instr_OF_raw[1],instr_OF_raw[2],instr_OF_raw[3],instr_OF_raw[4],instr_OF_raw[5],instr_OF_raw[6],instr_OF_raw[7],instr_OF_raw[8],instr_OF_raw[9],instr_OF_raw[10]}),
        .isbyte(isbyte),
        .isdoublet(isdoublet),
        .jump_Carry2(jump_Carry2),
        .lopt(\^lopt_5 ),
        .lopt_1(\^lopt_6 ),
        .lopt_2(\^lopt_7 ),
        .lopt_3(lopt_8),
        .lopt_4(lopt_9),
        .lopt_5(lopt_10),
        .lopt_6(lopt_11),
        .mbar_first(mbar_first),
        .mbar_hold_I_reg(mbar_hold_I_reg_n_0),
        .mbar_is_sleep0(mbar_is_sleep0),
        .missed_IFetch(missed_IFetch),
        .mtsmsr_write_i_reg(PreFetch_Buffer_I_n_43),
        .mtsmsr_write_i_reg_0(\Using_FPGA.of_PipeRun_MuxCY_1_n_7 ),
        .mul_Executing(mul_Executing),
        .mul_Executing_reg(PreFetch_Buffer_I_n_109),
        .mul_Executing_reg_0(mbar_first_i_3_n_0),
        .nonvalid_IFetch_n_reg(D[5]),
        .nonvalid_IFetch_n_reg_0(jump),
        .nonvalid_IFetch_n_reg_1(nonvalid_IFetch_n_reg_0),
        .of_Valid_Raw(of_Valid_Raw),
        .of_mbar_decode(of_mbar_decode),
        .ok_To_Stop(ok_To_Stop),
        .reset_BIP_I8_out(reset_BIP_I8_out),
        .sext16(sext16),
        .sync_reset(sync_reset),
        .take_Intr_Now_II(take_Intr_Now_II),
        .take_Intr_Now_III(take_Intr_Now_III),
        .trace_jump_taken_i_reg(jump2_I_reg_n_0),
        .use_Reg_Neg_DI_i24_out(use_Reg_Neg_DI_i24_out),
        .use_Reg_Neg_S_i26_out(use_Reg_Neg_S_i26_out),
        .writing(writing));
  (* SOFT_HLUTNM = "soft_lutpair71" *) 
  LUT4 #(
    .INIT(16'h0020)) 
    Read_Strobe_INST_0
       (.I0(ex_Valid),
        .I1(ex_Valid_reg_1),
        .I2(load_Store_i),
        .I3(writing_reg_n_0),
        .O(D[3]));
  FDRE \Result_Sel_reg[0] 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(instr_OF_raw[0]),
        .Q(\Result_Sel_reg[0]_0 [1]),
        .R(\Using_FPGA.of_PipeRun_MuxCY_1_n_17 ));
  FDRE \Result_Sel_reg[1] 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(instr_OF_raw[1]),
        .Q(\Result_Sel_reg[0]_0 [0]),
        .R(\Using_FPGA.of_PipeRun_MuxCY_1_n_17 ));
  FDRE Select_Logic_reg
       (.C(Clk),
        .CE(of_PipeRun),
        .D(Select_Logic0),
        .Q(Select_Logic),
        .R(sync_reset));
  FDRE Sext16_reg
       (.C(Clk),
        .CE(1'b1),
        .D(PreFetch_Buffer_I_n_37),
        .Q(sext16),
        .R(1'b0));
  FDRE Sext8_reg
       (.C(Clk),
        .CE(1'b1),
        .D(PreFetch_Buffer_I_n_38),
        .Q(sext8),
        .R(1'b0));
  FDRE Shift_Carry_In_reg
       (.C(Clk),
        .CE(of_PipeRun),
        .D(correct_Carry),
        .Q(shift_Carry_In),
        .R(sync_reset));
  LUT6 #(
    .INIT(64'hFF8FFFFFF080F0F0)) 
    Sign_Extend_i_1
       (.I0(imm_Value[9]),
        .I1(imm_Value[10]),
        .I2(of_PipeRun),
        .I3(exception_kind),
        .I4(PreFetch_Buffer_I_n_83),
        .I5(Shift_Oper),
        .O(Sign_Extend_i_1_n_0));
  FDRE Sign_Extend_reg
       (.C(Clk),
        .CE(1'b1),
        .D(Sign_Extend_i_1_n_0),
        .Q(Shift_Oper),
        .R(sync_reset));
  (* SOFT_HLUTNM = "soft_lutpair67" *) 
  LUT5 #(
    .INIT(32'h8888AAA0)) 
    Trace_Reg_Write_INST_0
       (.I0(trace_reg_write_novalid),
        .I1(Blocked_Valid_Instr),
        .I2(trace_valid_instr_part1),
        .I3(mul_Executing_done),
        .I4(jump2_I_1),
        .O(D[0]));
  (* SOFT_HLUTNM = "soft_lutpair67" *) 
  LUT4 #(
    .INIT(16'hFE54)) 
    Trace_Valid_Instr_INST_0
       (.I0(jump2_I_1),
        .I1(mul_Executing_done),
        .I2(trace_valid_instr_part1),
        .I3(Blocked_Valid_Instr),
        .O(D[1]));
  FDRE Unsigned_Op_reg
       (.C(Clk),
        .CE(of_PipeRun),
        .D(imm_Value[14]),
        .Q(Unsigned_Op),
        .R(\Using_FPGA.of_PipeRun_MuxCY_1_n_3 ));
  LUT6 #(
    .INIT(64'hFFFF00D000D000D0)) 
    \Using_Ext_Databus.mem_access_i_1 
       (.I0(is_swx_I_reg_n_0),
        .I1(\Using_LWX_SWX_instr.reservation_reg_n_0 ),
        .I2(d_AS_I),
        .I3(ex_Valid_reg_1),
        .I4(\Using_Ext_Databus.mem_access_reg ),
        .I5(mem_access),
        .O(is_swx_I_reg_0));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE \Using_FPGA.ALU_Carry_FDRE 
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (of_PipeRun),
        .carry_In(carry_In),
        .correct_Carry_II(correct_Carry_II),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_60 \Using_FPGA.ALU_Carry_MUXCY 
       (.correct_Carry(correct_Carry),
        .correct_Carry_I(correct_Carry_I),
        .correct_Carry_Select(correct_Carry_Select),
        .lopt(lopt_12),
        .lopt_1(lopt_13),
        .lopt_2(load_Store_i2),
        .sub_Carry(sub_Carry));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_61 \Using_FPGA.ALU_OP0_FDRE 
       (.Clk(Clk),
        .D_32(D_32),
        .\Using_FPGA.Native_0 (of_PipeRun),
        .alu_Op(alu_Op[0]),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_62 \Using_FPGA.ALU_OP1_FDRE 
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (of_PipeRun),
        .\Using_FPGA.Native_1 (PreFetch_Buffer_I_n_93),
        .alu_Op(alu_Op[1]),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_63 \Using_FPGA.Correct_Carry_MUXCY 
       (.Shift_Carry_In_reg(break_Pipe_i_reg_0[1]),
        .Shift_Carry_In_reg_0(is_swx_I_reg_n_0),
        .Shift_Carry_In_reg_1(load_Store_i),
        .Shift_Carry_In_reg_2(\Using_LWX_SWX_instr.reservation_reg_n_0 ),
        .Shift_Carry_In_reg_3(ex_Valid_reg_1),
        .Shift_Carry_In_reg_4(write_Carry_I_reg_n_0),
        .correct_Carry(correct_Carry),
        .ex_Valid(ex_Valid),
        .ex_Valid_reg(\Using_FPGA.Correct_Carry_MUXCY_n_1 ),
        .is_lwx_I(is_lwx_I),
        .lopt(\^lopt_1 ),
        .lopt_1(\^lopt_2 ),
        .lopt_2(\^lopt_3 ),
        .new_Carry(new_Carry));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_64 \Using_FPGA.Force1_FDRE 
       (.Clk(Clk),
        .R(R),
        .\Using_FPGA.Native_0 (of_PipeRun),
        .force1(force1),
        .force1_i27_out(force1_i27_out));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_65 \Using_FPGA.Force2_FDRE 
       (.Clk(Clk),
        .R(R),
        .\Using_FPGA.Native_0 (of_PipeRun),
        .force2(force2),
        .force2_i(force2_i));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_66 \Using_FPGA.Force_Val1_FDRE 
       (.Clk(Clk),
        .R(R),
        .\Using_FPGA.Native_0 (of_PipeRun),
        .force_Val1(force_Val1),
        .force_Val1_i25_out(force_Val1_i25_out));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRSE_67 \Using_FPGA.Force_Val2_FDRSE 
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (exception_kind),
        .\Using_FPGA.Native_1 (\Using_FPGA.MUXCY_JUMP_CARRY3_n_1 ),
        .force_Val2_N(force_Val2_N));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized9 \Using_FPGA.I_correct_Carry_Select 
       (.\Using_FPGA.Native_0 (PreFetch_Buffer_I_n_95),
        .\Using_FPGA.Native_1 (PreFetch_Buffer_I_n_94),
        .\Using_FPGA.Native_2 (PreFetch_Buffer_I_n_117),
        .correct_Carry_Select(correct_Carry_Select));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_68 \Using_FPGA.Intr_Carry_MUXCY 
       (.correct_Carry_I(correct_Carry_I),
        .correct_Carry_II(correct_Carry_II),
        .load_Store_i2(load_Store_i2),
        .lopt(lopt_12),
        .lopt_1(lopt_13));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MULT_AND \Using_FPGA.MULT_AND_I 
       (.\Using_FPGA.Native_0 (PreFetch_Buffer_I_n_95),
        .\Using_FPGA.Native_1 (PreFetch_Buffer_I_n_94),
        .sub_Carry(sub_Carry));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_69 \Using_FPGA.MUXCY_JUMP_CARRY 
       (.Reg_zero(Reg_zero),
        .force_DI1(force_DI1),
        .force_jump1(force_jump1),
        .jump_Carry1(jump_Carry1),
        .lopt(\^lopt_4 ));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_70 \Using_FPGA.MUXCY_JUMP_CARRY2 
       (.force_DI2(force_DI2),
        .force_jump2(force_jump2),
        .jump_Carry1(jump_Carry1),
        .jump_Carry2(jump_Carry2),
        .lopt(lopt_14),
        .lopt_1(lopt_15),
        .lopt_2(PreFetch_Buffer_I_n_113),
        .lopt_3(lopt_16),
        .lopt_4(lopt_17),
        .lopt_5(buffer_Full),
        .lopt_6(lopt_18),
        .lopt_7(lopt_19),
        .lopt_8(\LOCKSTEP_Out_reg[3] ));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_71 \Using_FPGA.MUXCY_JUMP_CARRY3 
       (.Interrupt(Interrupt),
        .PC_Write(PC_Write),
        .R(R),
        .S89_out(S89_out),
        .\Using_FPGA.Native_0 (of_PipeRun),
        .\Using_FPGA.Native_1 (PreFetch_Buffer_I_n_82),
        .\Using_FPGA.Native_2 (exception_kind),
        .\Using_FPGA.Native_3 (D[5]),
        .branch_with_delay(branch_with_delay),
        .break_Pipe_i_reg(mtsmsr_write_i_reg_n_0),
        .break_Pipe_i_reg0(break_Pipe_i_reg0),
        .break_Pipe_i_reg_0(\Using_dynamic_instr_Address.old_IE_value_reg_0 ),
        .break_Pipe_i_reg_1(break_Pipe_i_reg_0[2]),
        .dbg_pause_reg(jump),
        .delay_slot_instr_reg(jump2_I_reg_n_0),
        .ex_Valid(ex_Valid),
        .force_Val2_N(force_Val2_N),
        .inHibit_EX(inHibit_EX),
        .inHibit_EX_reg(\Using_FPGA.MUXCY_JUMP_CARRY3_n_1 ),
        .jump_Carry2(jump_Carry2),
        .lopt(lopt_14),
        .lopt_1(lopt_15),
        .ok_To_Stop(ok_To_Stop),
        .take_Intr_Now_III(take_Intr_Now_III),
        .trace_jump_taken_i_reg(PreFetch_Buffer_I_n_113));
  LUT2 #(
    .INIT(4'h2)) 
    \Using_FPGA.Native_i_1__54 
       (.I0(reg_Write_I),
        .I1(ex_Valid_reg_1),
        .O(Reg_Write));
  (* SOFT_HLUTNM = "soft_lutpair72" *) 
  LUT4 #(
    .INIT(16'hFF20)) 
    \Using_FPGA.Native_i_1__58 
       (.I0(ex_Valid),
        .I1(ex_Valid_reg_1),
        .I2(\Using_FPGA.reset_BIP_I_reg_n_0 ),
        .I3(sync_reset),
        .O(MSR_Rst));
  LUT6 #(
    .INIT(64'hCCAACCAACCFCCC0C)) 
    \Using_FPGA.Native_i_1__64 
       (.I0(\Using_FPGA.Native_39 ),
        .I1(quadlet_Read),
        .I2(sext16),
        .I3(ex_Valid_reg_1),
        .I4(\Using_FPGA.Native_40 ),
        .I5(sext8),
        .O(\Using_FPGA.Native_1 ));
  LUT4 #(
    .INIT(16'hAEA2)) 
    \Using_FPGA.Native_i_1__65 
       (.I0(doublet_Read),
        .I1(sext8),
        .I2(ex_Valid_reg_1),
        .I3(\Using_FPGA.Native_39 ),
        .O(Data_Read_Mask));
  LUT4 #(
    .INIT(16'h00B8)) 
    \Using_FPGA.Native_i_1__75 
       (.I0(shift_Carry_In),
        .I1(\instr_EX_i_reg[26]_0 ),
        .I2(\Using_FPGA.Native_41 ),
        .I3(\instr_EX_i_reg[25]_0 ),
        .O(Shifted));
  LUT6 #(
    .INIT(64'hCCFCCCECCCACCCEC)) 
    \Using_FPGA.Native_i_2__48 
       (.I0(\Using_FPGA.set_BIP_I_reg_n_0 ),
        .I1(break_Pipe_i_reg_0[2]),
        .I2(ex_Valid),
        .I3(ex_Valid_reg_1),
        .I4(mtsmsr_write_i_reg_n_0),
        .I5(Op1_Shift),
        .O(\Using_FPGA.set_BIP_I_reg_0 ));
  LUT6 #(
    .INIT(64'hFFEFFAEAAFEFAAEA)) 
    \Using_FPGA.Native_i_2__49 
       (.I0(write_Carry),
        .I1(break_Pipe_i_reg_0[1]),
        .I2(\Using_FPGA.Native_i_4__0_n_0 ),
        .I3(MTSMSR_Write),
        .I4(\Using_FPGA.Native_i_6__0_n_0 ),
        .I5(Op1_Low[0]),
        .O(\Using_FPGA.Native ));
  LUT6 #(
    .INIT(64'hCCFCCCECCCACCCEC)) 
    \Using_FPGA.Native_i_2__50 
       (.I0(\Using_FPGA.enable_Interrupts_I_reg_n_0 ),
        .I1(break_Pipe_i_reg_0[0]),
        .I2(ex_Valid),
        .I3(ex_Valid_reg_1),
        .I4(mtsmsr_write_i_reg_n_0),
        .I5(Op1_Low[1]),
        .O(\Using_FPGA.enable_Interrupts_I_reg_0 ));
  (* SOFT_HLUTNM = "soft_lutpair72" *) 
  LUT3 #(
    .INIT(8'h20)) 
    \Using_FPGA.Native_i_3__0 
       (.I0(write_Carry_I_reg_n_0),
        .I1(ex_Valid_reg_1),
        .I2(ex_Valid),
        .O(write_Carry));
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    \Using_FPGA.Native_i_3__1 
       (.I0(\write_Addr_I_reg[0]_0 [2]),
        .I1(\write_Addr_I_reg[0]_0 [3]),
        .I2(\write_Addr_I_reg[0]_0 [4]),
        .I3(\write_Addr_I_reg[0]_0 [1]),
        .I4(\write_Addr_I_reg[0]_0 [0]),
        .O(\Using_FPGA.Native_i_3__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair68" *) 
  LUT5 #(
    .INIT(32'hFF1FFFFF)) 
    \Using_FPGA.Native_i_4__0 
       (.I0(is_lwx_I),
        .I1(is_swx_I_reg_n_0),
        .I2(ex_Valid),
        .I3(ex_Valid_reg_1),
        .I4(load_Store_i),
        .O(\Using_FPGA.Native_i_4__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair71" *) 
  LUT3 #(
    .INIT(8'h20)) 
    \Using_FPGA.Native_i_5__0 
       (.I0(mtsmsr_write_i_reg_n_0),
        .I1(ex_Valid_reg_1),
        .I2(ex_Valid),
        .O(MTSMSR_Write));
  (* SOFT_HLUTNM = "soft_lutpair69" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \Using_FPGA.Native_i_6__0 
       (.I0(is_swx_I_reg_n_0),
        .I1(\Using_LWX_SWX_instr.reservation_reg_n_0 ),
        .O(\Using_FPGA.Native_i_6__0_n_0 ));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_72 \Using_FPGA.New_Carry_MUXCY 
       (.LO(LO),
        .Op1_Low(Op1_Low[2]),
        .\Using_FPGA.Native_0 (ex_Valid_reg_1),
        .\Using_FPGA.Native_1 (write_Carry_I_reg_n_0),
        .ex_Valid(ex_Valid),
        .ex_Valid_reg(ex_Valid_reg_0),
        .lopt(lopt),
        .new_Carry(new_Carry),
        .select_ALU_Carry(select_ALU_Carry),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized1 \Using_FPGA.OpSel1_SPR_Select_LUT_1 
       (.instr_OF_raw({instr_OF_raw[0],instr_OF_raw[1],instr_OF_raw[3],instr_OF_raw[4]}),
        .opsel1_SPR_Select_1(opsel1_SPR_Select_1));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized3 \Using_FPGA.OpSel1_SPR_Select_LUT_2 
       (.instr_OF_raw({instr_OF_raw[0],instr_OF_raw[1],instr_OF_raw[2],instr_OF_raw[3]}),
        .opsel1_SPR_Select_2_1(opsel1_SPR_Select_2_1));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_LUT3 \Using_FPGA.OpSel1_SPR_Select_LUT_3 
       (.D(imm_Value[1]),
        .instr_OF_raw({instr_OF_raw[4],instr_OF_raw[5]}),
        .opsel1_SPR_Select_2_2(opsel1_SPR_Select_2_2));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_LUT3__parameterized0 \Using_FPGA.OpSel1_SPR_Select_LUT_4 
       (.opsel1_SPR_Select(opsel1_SPR_Select),
        .opsel1_SPR_Select_1(opsel1_SPR_Select_1),
        .opsel1_SPR_Select_2_1(opsel1_SPR_Select_2_1),
        .opsel1_SPR_Select_2_2(opsel1_SPR_Select_2_2));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDSE \Using_FPGA.Reg_Test_Equal_FDSE 
       (.Clk(Clk),
        .R(R),
        .Reg_Test_Equal(Reg_Test_Equal),
        .Reg_Test_Equal_i(Reg_Test_Equal_i),
        .\Using_FPGA.Native_0 (of_PipeRun));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_73 \Using_FPGA.Reg_Test_Equal_N_FDRE 
       (.Clk(Clk),
        .R(R),
        .Reg_Test_Equal_N_i7_out(Reg_Test_Equal_N_i7_out),
        .\Using_FPGA.Native_0 (of_PipeRun),
        .reg_Test_Equal_N(reg_Test_Equal_N));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized5 \Using_FPGA.Res_Forward1_LUT1 
       (.Q(\write_Addr_I_reg[0]_0 [4:3]),
        .reg1_Addr({reg1_Addr[0],reg1_Addr[1]}),
        .res_forward1_1(res_forward1_1));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized5_74 \Using_FPGA.Res_Forward1_LUT2 
       (.Q(\write_Addr_I_reg[0]_0 [2]),
        .\Using_FPGA.Native_0 (\write_Addr_I_reg[0]_0 [1]),
        .reg1_Addr({reg1_Addr[2],reg1_Addr[3]}),
        .res_forward1_2(res_forward1_2));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_LUT3__parameterized1 \Using_FPGA.Res_Forward1_LUT3 
       (.Q(\write_Addr_I_reg[0]_0 [0]),
        .ex_Valid(ex_Valid),
        .reg1_Addr(reg1_Addr[4]),
        .res_forward1_3(res_forward1_3));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized7 \Using_FPGA.Res_Forward1_LUT4 
       (.res_Forward1(res_Forward1),
        .res_forward1_1(res_forward1_1),
        .res_forward1_2(res_forward1_2),
        .res_forward1_3(res_forward1_3),
        .write_Reg_I_S(write_Reg_I_S));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized5_75 \Using_FPGA.Res_Forward2_LUT1 
       (.Q(\write_Addr_I_reg[0]_0 [4:3]),
        .imm_Value({imm_Value[0],imm_Value[1]}),
        .res_forward2_1(res_forward2_1));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized5_76 \Using_FPGA.Res_Forward2_LUT2 
       (.Q(\write_Addr_I_reg[0]_0 [2]),
        .\Using_FPGA.Native_0 (\write_Addr_I_reg[0]_0 [1]),
        .imm_Value({imm_Value[2],imm_Value[3]}),
        .res_forward2_2(res_forward2_2));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_LUT3__parameterized1_77 \Using_FPGA.Res_Forward2_LUT3 
       (.Q(\write_Addr_I_reg[0]_0 [0]),
        .ex_Valid(ex_Valid),
        .imm_Value(imm_Value[4]),
        .res_forward2_3(res_forward2_3));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized7_78 \Using_FPGA.Res_Forward2_LUT4 
       (.res_Forward2(res_Forward2),
        .res_forward2_1(res_forward2_1),
        .res_forward2_2(res_forward2_2),
        .res_forward2_3(res_forward2_3),
        .write_Reg_I_S(write_Reg_I_S));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_79 \Using_FPGA.Use_Reg_Neg_DI_FDRE 
       (.Clk(Clk),
        .R(R),
        .\Using_FPGA.Native_0 (of_PipeRun),
        .use_Reg_Neg_DI(use_Reg_Neg_DI),
        .use_Reg_Neg_DI_i24_out(use_Reg_Neg_DI_i24_out));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_80 \Using_FPGA.Use_Reg_Neg_S_FDRE 
       (.Clk(Clk),
        .R(R),
        .\Using_FPGA.Native_0 (of_PipeRun),
        .use_Reg_Neg_S(use_Reg_Neg_S),
        .use_Reg_Neg_S_i26_out(use_Reg_Neg_S_i26_out));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_81 \Using_FPGA.Using_Breakable_Pipe.OpSel1_SPR_MUXCY_1 
       (.opsel1_SPR(opsel1_SPR),
        .opsel1_SPR_Select(opsel1_SPR_Select),
        .take_Intr_Now_III(take_Intr_Now_III));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_82 \Using_FPGA.Using_Breakable_Pipe.Take_Intr_MUXCY_1 
       (.\Using_FPGA.Native_0 (of_PipeRun),
        .\Using_FPGA.Native_1 (use_Imm_Reg),
        .\Using_FPGA.Native_2 (jump2_I_reg_n_0),
        .\Using_FPGA.Native_3 (exception_kind),
        .inHibit_EX(inHibit_EX),
        .lopt(lopt_20),
        .lopt_1(lopt_21),
        .lopt_2(lopt_22),
        .take_Intr_Now_I(take_Intr_Now_I));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_83 \Using_FPGA.Using_Breakable_Pipe.Take_Intr_MUXCY_2 
       (.\Using_FPGA.Native_0 (mtsmsr_write_i_reg_n_0),
        .\Using_FPGA.Native_1 (exception_kind),
        .break_Pipe_i_reg__0(break_Pipe_i_reg__0),
        .ex_Valid(ex_Valid),
        .lopt(lopt_23),
        .lopt_1(lopt_24),
        .lopt_2(lopt_25),
        .take_Intr_Now_I(take_Intr_Now_I),
        .take_Intr_Now_II(take_Intr_Now_II));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_84 \Using_FPGA.Using_Breakable_Pipe.Take_Intr_MUXCY_3 
       (.\Area_Debug_Control.force_stop_cmd_hold_reg (of_PipeRun),
        .\Area_Debug_Control.force_stop_cmd_hold_reg_0 (jump),
        .D(p_1_in[3:2]),
        .S89_out(S89_out),
        .Select_Logic0(Select_Logic0),
        .\Use_Async_Reset.sync_reset_reg (\Use_Async_Reset.sync_reset_reg ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Using_Breakable_Pipe.Take_Intr_MUXCY_3_n_1 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.Using_Breakable_Pipe.Take_Intr_MUXCY_3_n_2 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_0 (exception_kind),
        .\Using_LWX_SWX_instr.reservation_reg (\Using_FPGA.of_PipeRun_MuxCY_1_n_15 ),
        .\Using_LWX_SWX_instr.reservation_reg_0 (\Using_LWX_SWX_instr.reservation_reg_n_0 ),
        .\Using_LWX_SWX_instr.reservation_reg_1 (\Using_FPGA.Correct_Carry_MUXCY_n_1 ),
        .\Using_LWX_SWX_instr.reservation_reg_2 (\Using_FPGA.set_BIP_I_reg_n_0 ),
        .ex_Valid(ex_Valid),
        .ex_Valid_reg(PreFetch_Buffer_I_n_109),
        .ex_Valid_reg_0(ex_Valid_reg_1),
        .force_stop_cmd_hold(force_stop_cmd_hold),
        .force_stop_cmd_hold0(force_stop_cmd_hold0),
        .force_stop_cmd_i(force_stop_cmd_i),
        .inHibit_EX(inHibit_EX),
        .inHibit_EX1(inHibit_EX1),
        .inHibit_EX_reg(PreFetch_Buffer_I_n_97),
        .inHibit_EX_reg_0(inHibit_EX_reg_0),
        .instr_OF_raw({instr_OF_raw[3],instr_OF_raw[7],instr_OF_raw[8]}),
        .is_lwx_I(is_lwx_I),
        .is_lwx_I_reg(\Using_FPGA.Using_Breakable_Pipe.Take_Intr_MUXCY_3_n_6 ),
        .load_Store_i2(load_Store_i2),
        .lopt(lopt_26),
        .lopt_1(lopt_27),
        .lopt_2(lopt_28),
        .sync_reset(sync_reset),
        .take_Intr_Now_II(take_Intr_Now_II),
        .take_Intr_Now_III(take_Intr_Now_III));
  FDRE \Using_FPGA.Valid_Instr_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(Valid_Instr0),
        .Q(Valid_Instr_i),
        .R(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_85 \Using_FPGA.clean_iReady_MuxCY 
       (.IReady(IReady),
        .IReady1_out(IReady1_out),
        .\instr_EX_i_reg[9] (nonvalid_IFetch_n_reg_0),
        .lopt(\^lopt_5 ),
        .lopt_1(of_PipeRun),
        .lopt_2(S1_out),
        .lopt_3(\^lopt_6 ),
        .lopt_4(\^lopt_7 ),
        .lopt_5(lopt_8),
        .lopt_6(lopt_9),
        .lopt_7(lopt_10),
        .lopt_8(lopt_11));
  FDRE \Using_FPGA.enable_Interrupts_I_reg 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(enable_Interrupts_I),
        .Q(\Using_FPGA.enable_Interrupts_I_reg_n_0 ),
        .R(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_LUT3__parameterized2 \Using_FPGA.force_di1_LUT3 
       (.\Using_FPGA.Native_0 (\Using_FPGA.Native_4 ),
        .force_DI1(force_DI1),
        .force_Val1(force_Val1),
        .use_Reg_Neg_DI(use_Reg_Neg_DI));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized11 \Using_FPGA.force_di2_LUT4 
       (.\Using_FPGA.Native_0 (ex_Valid_reg_1),
        .ex_Valid(ex_Valid),
        .force_DI2(force_DI2),
        .force_Val2_N(force_Val2_N));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_LUT3__parameterized2_86 \Using_FPGA.force_jump1_LUT3 
       (.\Using_FPGA.Native_0 (\Using_FPGA.Native_4 ),
        .force1(force1),
        .force_jump1(force_jump1),
        .use_Reg_Neg_S(use_Reg_Neg_S));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized3_87 \Using_FPGA.force_jump2_LUT4 
       (.\Using_FPGA.Native_0 (ex_Valid_reg_1),
        .ex_Valid(ex_Valid),
        .force2(force2),
        .force_jump2(force_jump2));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_88 \Using_FPGA.iFetch_MuxCY_1 
       (.\Using_FPGA.Native_0 (jump),
        .buffer_Full(buffer_Full),
        .ifetch_carry1(ifetch_carry1),
        .lopt(lopt_16),
        .lopt_1(lopt_17));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_89 \Using_FPGA.iFetch_MuxCY_2 
       (.IReady1_out(IReady1_out),
        .\LOCKSTEP_Out_reg[3] (\LOCKSTEP_Out_reg[3] ),
        .\LOCKSTEP_Out_reg[3]_0 (\Using_FPGA.Correct_Carry_MUXCY_n_1 ),
        .\Serial_Dbg_Intf.if_debug_ready_i_reg (\Using_FPGA.iFetch_MuxCY_2_n_3 ),
        .iFetch_In_Progress(iFetch_In_Progress),
        .iFetch_In_Progress_reg(\Using_FPGA.iFetch_MuxCY_2_n_1 ),
        .iFetch_In_Progress_reg_0(D[5]),
        .ifetch_carry1(ifetch_carry1),
        .ifetch_carry2(ifetch_carry2),
        .lopt(lopt_18),
        .lopt_1(lopt_19),
        .mbar_decode_I(mbar_decode_I),
        .missed_IFetch(missed_IFetch),
        .missed_IFetch_reg(missed_IFetch_reg_0),
        .missed_IFetch_reg_0(missed_IFetch_reg_1),
        .missed_IFetch_reg_1(jump),
        .mul_Executing(mul_Executing));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_90 \Using_FPGA.iFetch_MuxCY_3 
       (.D(D[6]),
        .iFetch_In_Progress(iFetch_In_Progress),
        .ifetch_carry2(ifetch_carry2));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_91 \Using_FPGA.of_PipeRun_MuxCY_1 
       (.\Area_Debug_Control.dbg_brki_hit_reg (PreFetch_Buffer_I_n_105),
        .Blocked_Valid_Instr0(Blocked_Valid_Instr0),
        .Blocked_Valid_Instr_reg(jump2_I_reg_n_0),
        .Buffer_Addr(Buffer_Addr[0]),
        .DReady(DReady),
        .DReady0_out(DReady0_out),
        .E(\Using_FPGA.of_PipeRun_MuxCY_1_n_18 ),
        .MEM_DAXI_Data_Strobe(MEM_DAXI_Data_Strobe),
        .S89_out(S89_out),
        .Sext8_reg(PreFetch_Buffer_I_n_83),
        .Unsigned_Op_reg(exception_kind),
        .\Use_Async_Reset.sync_reset_reg (\Using_FPGA.of_PipeRun_MuxCY_1_n_8 ),
        .\Use_Async_Reset.sync_reset_reg_0 (\Using_FPGA.of_PipeRun_MuxCY_1_n_10 ),
        .\Use_Async_Reset.sync_reset_reg_1 (\Using_FPGA.of_PipeRun_MuxCY_1_n_16 ),
        .\Use_Async_Reset.sync_reset_reg_2 (\Using_FPGA.of_PipeRun_MuxCY_1_n_17 ),
        .\Using_FPGA.Native_0 (S1_out),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_2 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.of_PipeRun_MuxCY_1_n_3 ),
        .\Using_LWX_SWX_instr.reservation_reg (\Using_LWX_SWX_instr.reservation_i_2_n_0 ),
        .\Using_LWX_SWX_instr.reservation_reg_0 (\Using_FPGA.Using_Breakable_Pipe.Take_Intr_MUXCY_3_n_6 ),
        .Valid_Instr0(Valid_Instr0),
        .break_Pipe_i_reg__0(break_Pipe_i_reg__0),
        .dbg_brki_hit(dbg_brki_hit),
        .dbg_brki_hit0(dbg_brki_hit0),
        .delay_slot_instr_reg(delay_slot_instr_reg),
        .ex_Valid(ex_Valid),
        .ex_Valid_1st_cycle4_out(ex_Valid_1st_cycle4_out),
        .ex_Valid_1st_cycle_reg(jump),
        .inHibit_EX(inHibit_EX),
        .instr_OF_raw(instr_OF_raw[3]),
        .is_lwx_I(is_lwx_I),
        .is_lwx_I_reg(\Using_FPGA.of_PipeRun_MuxCY_1_n_5 ),
        .is_swx_I_reg(\Using_FPGA.of_PipeRun_MuxCY_1_n_4 ),
        .is_swx_I_reg_0(is_swx_I_reg_n_0),
        .is_swx_I_reg_1(PreFetch_Buffer_I_n_106),
        .load_Store_i_reg(\Using_FPGA.of_PipeRun_MuxCY_1_n_6 ),
        .load_Store_i_reg_0(load_Store_i),
        .load_Store_i_reg_1(PreFetch_Buffer_I_n_111),
        .load_Store_i_reg_2(ex_Valid_reg_1),
        .load_Store_i_reg_3(\Using_Ext_Databus.mem_access_reg ),
        .lopt(lopt_20),
        .lopt_1(lopt_21),
        .lopt_2(lopt_22),
        .lopt_3(lopt_23),
        .lopt_4(lopt_24),
        .lopt_5(lopt_25),
        .lopt_6(lopt_26),
        .lopt_7(lopt_27),
        .lopt_8(lopt_28),
        .mem_access_completed_reg(\Using_FPGA.of_PipeRun_MuxCY_1_n_14 ),
        .mem_access_completed_reg_0(\Using_FPGA.of_PipeRun_MuxCY_1_n_15 ),
        .mtsmsr_write_i_reg(\Using_FPGA.of_PipeRun_MuxCY_1_n_7 ),
        .mtsmsr_write_i_reg_0(mtsmsr_write_i_reg_n_0),
        .mul_Executing_reg(of_PipeRun),
        .of_PipeRun_Select(of_PipeRun_Select),
        .of_PipeRun_without_dready(of_PipeRun_without_dready),
        .swx_ready(swx_ready),
        .swx_ready_reg(\Using_LWX_SWX_instr.reservation_reg_n_0 ),
        .sync_reset(sync_reset),
        .take_Intr_Now_III(take_Intr_Now_III),
        .take_intr_2nd_cycle_reg(take_intr_2nd_cycle_reg_n_0),
        .take_intr_Done(take_intr_Done),
        .using_Imm_reg(\Using_FPGA.of_PipeRun_MuxCY_1_n_1 ),
        .using_Imm_reg_0(use_Imm_Reg),
        .using_Imm_reg_1(PreFetch_Buffer_I_n_100),
        .using_Imm_reg_2(using_Imm_reg_0),
        .write_Reg_reg(\Using_FPGA.of_PipeRun_MuxCY_1_n_2 ),
        .write_Reg_reg_0(write_Reg_reg_n_0),
        .write_Reg_reg_1(PreFetch_Buffer_I_n_84),
        .write_Reg_reg_2(PreFetch_Buffer_I_n_81));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT5 \Using_FPGA.of_PipeRun_Select_LUT5 
       (.I291_out(I291_out),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_3 ),
        .dbg_pause(dbg_pause),
        .mul_Executing(mul_Executing),
        .of_PipeRun_Select(of_PipeRun_Select),
        .of_Valid_Raw(of_Valid_Raw));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT5__parameterized1 \Using_FPGA.of_PipeRun_without_dready_LUT5 
       (.I291_out(I291_out),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_3 ),
        .\Using_FPGA.Native_1 (load_Store_i),
        .\Using_FPGA.Native_2 (ex_Valid_reg_1),
        .dbg_pause(dbg_pause),
        .mul_Executing(mul_Executing),
        .of_PipeRun_without_dready(of_PipeRun_without_dready),
        .of_Valid_Raw(of_Valid_Raw));
  FDRE \Using_FPGA.reset_BIP_I_reg 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(reset_BIP_I8_out),
        .Q(\Using_FPGA.reset_BIP_I_reg_n_0 ),
        .R(sync_reset));
  FDRE \Using_FPGA.set_BIP_I_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(PreFetch_Buffer_I_n_42),
        .Q(\Using_FPGA.set_BIP_I_reg_n_0 ),
        .R(1'b0));
  FDRE \Using_FPGA.take_Intr_2nd_Phase_reg 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(inHibit_EX1),
        .Q(exception_kind),
        .R(sync_reset));
  (* SOFT_HLUTNM = "soft_lutpair68" *) 
  LUT3 #(
    .INIT(8'hDF)) 
    \Using_LWX_SWX_instr.reservation_i_2 
       (.I0(load_Store_i),
        .I1(ex_Valid_reg_1),
        .I2(ex_Valid),
        .O(\Using_LWX_SWX_instr.reservation_i_2_n_0 ));
  FDRE \Using_LWX_SWX_instr.reservation_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.of_PipeRun_MuxCY_1_n_14 ),
        .Q(\Using_LWX_SWX_instr.reservation_reg_n_0 ),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair70" *) 
  LUT4 #(
    .INIT(16'hFF04)) 
    \Using_dynamic_instr_Address.Interrupt_Ack[0]_i_1 
       (.I0(old_IE_value),
        .I1(break_Pipe_i_reg_0[0]),
        .I2(\Using_dynamic_instr_Address.Interrupt_Ack_reg[1]_0 ),
        .I3(\Using_FPGA.enable_Interrupts_I_reg_n_0 ),
        .O(\Using_dynamic_instr_Address.Interrupt_Ack[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair70" *) 
  LUT5 #(
    .INIT(32'h04FF0404)) 
    \Using_dynamic_instr_Address.Interrupt_Ack[1]_i_1 
       (.I0(old_IE_value),
        .I1(break_Pipe_i_reg_0[0]),
        .I2(\Using_dynamic_instr_Address.Interrupt_Ack_reg[1]_0 ),
        .I3(\Using_FPGA.enable_Interrupts_I_reg_n_0 ),
        .I4(take_intr_2nd_cycle_reg_n_0),
        .O(\Using_dynamic_instr_Address.Interrupt_Ack[1]_i_1_n_0 ));
  FDRE \Using_dynamic_instr_Address.Interrupt_Ack_reg[0] 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(\Using_dynamic_instr_Address.Interrupt_Ack[0]_i_1_n_0 ),
        .Q(Interrupt_Ack[0]),
        .R(sync_reset));
  FDRE \Using_dynamic_instr_Address.Interrupt_Ack_reg[1] 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(\Using_dynamic_instr_Address.Interrupt_Ack[1]_i_1_n_0 ),
        .Q(Interrupt_Ack[1]),
        .R(sync_reset));
  FDRE \Using_dynamic_instr_Address.old_IE_value_reg 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(\Using_dynamic_instr_Address.old_IE_value_reg_0 ),
        .Q(old_IE_value),
        .R(sync_reset));
  LUT6 #(
    .INIT(64'h0000A20000000000)) 
    Write_Strobe_INST_0
       (.I0(writing_reg_n_0),
        .I1(is_swx_I_reg_n_0),
        .I2(\Using_LWX_SWX_instr.reservation_reg_n_0 ),
        .I3(load_Store_i),
        .I4(ex_Valid_reg_1),
        .I5(ex_Valid),
        .O(D[2]));
  LUT6 #(
    .INIT(64'h2FFF2FFF2FFFFFFF)) 
    active_access_i_2
       (.I0(is_swx_I_reg_n_0),
        .I1(\Using_LWX_SWX_instr.reservation_reg_n_0 ),
        .I2(load_Store_i),
        .I3(\Using_FPGA.Correct_Carry_MUXCY_n_1 ),
        .I4(force_stop_cmd_i),
        .I5(force_stop_cmd_hold),
        .O(is_swx_I_reg_2));
  LUT5 #(
    .INIT(32'hFEFEFE00)) 
    active_wakeup_i_1
       (.I0(Sleep_Decode),
        .I1(Hibernate),
        .I2(Suspend),
        .I3(wakeup_i[1]),
        .I4(wakeup_i[0]),
        .O(active_wakeup0));
  FDRE active_wakeup_reg
       (.C(Clk),
        .CE(1'b1),
        .D(active_wakeup0),
        .Q(active_wakeup),
        .R(sync_reset));
  FDRE break_Pipe_i_reg
       (.C(Clk),
        .CE(1'b1),
        .D(break_Pipe_i_reg0),
        .Q(break_Pipe_i_reg__0),
        .R(sync_reset));
  FDRE byte_i_reg
       (.C(Clk),
        .CE(1'b1),
        .D(PreFetch_Buffer_I_n_41),
        .Q(isbyte),
        .R(1'b0));
  FDRE d_AS_I_reg
       (.C(Clk),
        .CE(1'b1),
        .D(d_AS_I16_out),
        .Q(d_AS_I),
        .R(sync_reset));
  LUT5 #(
    .INIT(32'hFFEFFFE0)) 
    doublet_Read_i_i_1
       (.I0(instr_OF_raw[4]),
        .I1(instr_OF_raw[5]),
        .I2(of_PipeRun),
        .I3(byte_i13_out),
        .I4(doublet_Read),
        .O(doublet_Read_i_i_1_n_0));
  FDRE doublet_Read_i_reg
       (.C(Clk),
        .CE(1'b1),
        .D(doublet_Read_i_i_1_n_0),
        .Q(doublet_Read),
        .R(sync_reset));
  FDRE doublet_i_reg
       (.C(Clk),
        .CE(1'b1),
        .D(PreFetch_Buffer_I_n_39),
        .Q(isdoublet),
        .R(1'b0));
  FDRE ex_Valid_1st_cycle_reg
       (.C(Clk),
        .CE(1'b1),
        .D(ex_Valid_1st_cycle4_out),
        .Q(ex_Valid_1st_cycle_reg_n_0),
        .R(1'b0));
  FDRE ex_Valid_reg
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Using_Breakable_Pipe.Take_Intr_MUXCY_3_n_1 ),
        .Q(ex_Valid),
        .R(sync_reset));
  FDRE ex_first_cycle_reg
       (.C(Clk),
        .CE(1'b1),
        .D(of_PipeRun),
        .Q(ex_first_cycle),
        .R(sync_reset));
  LUT6 #(
    .INIT(64'h0000000008AAFBAA)) 
    hibernate_i_i_1
       (.I0(Hibernate),
        .I1(iFetch_In_Progress),
        .I2(\write_Addr_I_reg[0]_0 [0]),
        .I3(mbar_sleep),
        .I4(Q[23]),
        .I5(sleep_i0),
        .O(hibernate_i_i_1_n_0));
  LUT2 #(
    .INIT(4'hE)) 
    hibernate_i_i_2
       (.I0(sync_reset),
        .I1(active_wakeup),
        .O(sleep_i0));
  FDRE hibernate_i_reg
       (.C(Clk),
        .CE(1'b1),
        .D(hibernate_i_i_1_n_0),
        .Q(Hibernate),
        .R(1'b0));
  FDRE iFetch_In_Progress_reg
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.iFetch_MuxCY_2_n_1 ),
        .Q(iFetch_In_Progress),
        .R(sync_reset));
  FDRE inHibit_EX_reg
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Using_Breakable_Pipe.Take_Intr_MUXCY_3_n_2 ),
        .Q(inHibit_EX),
        .R(1'b0));
  FDRE \instr_EX_i_reg[0] 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(instr_OF_raw[0]),
        .Q(Q[27]),
        .R(sync_reset));
  FDRE \instr_EX_i_reg[10] 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(instr_OF_raw[10]),
        .Q(Q[19]),
        .R(sync_reset));
  FDRE \instr_EX_i_reg[11] 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(reg1_Addr[0]),
        .Q(Q[18]),
        .R(sync_reset));
  FDRE \instr_EX_i_reg[12] 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(reg1_Addr[1]),
        .Q(Q[17]),
        .R(sync_reset));
  FDRE \instr_EX_i_reg[13] 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(reg1_Addr[2]),
        .Q(Q[16]),
        .R(sync_reset));
  FDRE \instr_EX_i_reg[14] 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(reg1_Addr[3]),
        .Q(Q[15]),
        .R(sync_reset));
  FDRE \instr_EX_i_reg[15] 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(reg1_Addr[4]),
        .Q(Q[14]),
        .R(sync_reset));
  FDRE \instr_EX_i_reg[16] 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(imm_Value[0]),
        .Q(Q[13]),
        .R(sync_reset));
  FDRE \instr_EX_i_reg[17] 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(imm_Value[1]),
        .Q(Q[12]),
        .R(sync_reset));
  FDRE \instr_EX_i_reg[18] 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(imm_Value[2]),
        .Q(Q[11]),
        .R(sync_reset));
  FDRE \instr_EX_i_reg[19] 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(imm_Value[3]),
        .Q(Q[10]),
        .R(sync_reset));
  FDRE \instr_EX_i_reg[1] 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(instr_OF_raw[1]),
        .Q(Q[26]),
        .R(sync_reset));
  FDRE \instr_EX_i_reg[20] 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(imm_Value[4]),
        .Q(Q[9]),
        .R(sync_reset));
  FDRE \instr_EX_i_reg[21] 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(imm_Value[5]),
        .Q(Q[8]),
        .R(sync_reset));
  FDRE \instr_EX_i_reg[22] 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(imm_Value[6]),
        .Q(Q[7]),
        .R(sync_reset));
  FDRE \instr_EX_i_reg[23] 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(imm_Value[7]),
        .Q(Q[6]),
        .R(sync_reset));
  FDRE \instr_EX_i_reg[24] 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(imm_Value[8]),
        .Q(Q[5]),
        .R(sync_reset));
  FDRE \instr_EX_i_reg[25] 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(imm_Value[9]),
        .Q(\instr_EX_i_reg[25]_0 ),
        .R(sync_reset));
  FDRE \instr_EX_i_reg[26] 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(imm_Value[10]),
        .Q(\instr_EX_i_reg[26]_0 ),
        .R(sync_reset));
  FDRE \instr_EX_i_reg[27] 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(imm_Value[11]),
        .Q(Q[4]),
        .R(sync_reset));
  FDRE \instr_EX_i_reg[28] 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(imm_Value[12]),
        .Q(Q[3]),
        .R(sync_reset));
  FDRE \instr_EX_i_reg[29] 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(imm_Value[13]),
        .Q(Q[2]),
        .R(sync_reset));
  FDRE \instr_EX_i_reg[2] 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(instr_OF_raw[2]),
        .Q(Q[25]),
        .R(sync_reset));
  FDRE \instr_EX_i_reg[30] 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(imm_Value[14]),
        .Q(Q[1]),
        .R(sync_reset));
  FDRE \instr_EX_i_reg[31] 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(imm_Value[15]),
        .Q(Q[0]),
        .R(sync_reset));
  FDRE \instr_EX_i_reg[3] 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(instr_OF_raw[3]),
        .Q(Q[24]),
        .R(sync_reset));
  FDRE \instr_EX_i_reg[4] 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(instr_OF_raw[4]),
        .Q(Logic_Oper[0]),
        .R(sync_reset));
  FDRE \instr_EX_i_reg[5] 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(instr_OF_raw[5]),
        .Q(Logic_Oper[1]),
        .R(sync_reset));
  FDRE \instr_EX_i_reg[6] 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(instr_OF_raw[6]),
        .Q(Q[23]),
        .R(sync_reset));
  FDRE \instr_EX_i_reg[7] 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(instr_OF_raw[7]),
        .Q(Q[22]),
        .R(sync_reset));
  FDRE \instr_EX_i_reg[8] 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(instr_OF_raw[8]),
        .Q(Q[21]),
        .R(sync_reset));
  FDRE \instr_EX_i_reg[9] 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(instr_OF_raw[9]),
        .Q(Q[20]),
        .R(sync_reset));
  FDRE is_lwx_I_reg
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.of_PipeRun_MuxCY_1_n_5 ),
        .Q(is_lwx_I),
        .R(1'b0));
  FDRE is_swx_I_reg
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.of_PipeRun_MuxCY_1_n_4 ),
        .Q(is_swx_I_reg_n_0),
        .R(1'b0));
  FDRE jump2_I_1_reg
       (.C(Clk),
        .CE(1'b1),
        .D(jump2_I_reg_n_0),
        .Q(jump2_I_1),
        .R(sync_reset));
  FDRE jump2_I_reg
       (.C(Clk),
        .CE(of_PipeRun),
        .D(PreFetch_Buffer_I_n_98),
        .Q(jump2_I_reg_n_0),
        .R(sync_reset));
  FDRE load_Store_i_reg
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.of_PipeRun_MuxCY_1_n_6 ),
        .Q(load_Store_i),
        .R(1'b0));
  FDRE mbar_decode_I_reg
       (.C(Clk),
        .CE(of_PipeRun),
        .D(of_mbar_decode),
        .Q(mbar_decode_I),
        .R(sync_reset));
  LUT6 #(
    .INIT(64'h4444444444440040)) 
    mbar_first_i_3
       (.I0(ex_Valid_reg_1),
        .I1(mbar_first_reg_n_0),
        .I2(iFetch_In_Progress),
        .I3(\write_Addr_I_reg[0]_0 [0]),
        .I4(mbar_sleep),
        .I5(ex_first_cycle),
        .O(mbar_first_i_3_n_0));
  FDRE #(
    .INIT(1'b0)) 
    mbar_first_reg
       (.C(Clk),
        .CE(1'b1),
        .D(mbar_first),
        .Q(mbar_first_reg_n_0),
        .R(sync_reset));
  FDRE mbar_hold_I_reg
       (.C(Clk),
        .CE(1'b1),
        .D(PreFetch_Buffer_I_n_44),
        .Q(mbar_hold_I_reg_n_0),
        .R(1'b0));
  FDRE mbar_is_sleep_reg
       (.C(Clk),
        .CE(of_PipeRun),
        .D(mbar_is_sleep0),
        .Q(mbar_is_sleep),
        .R(sync_reset));
  LUT6 #(
    .INIT(64'h00000000EAAAAAAA)) 
    mbar_sleep_i_1
       (.I0(mbar_sleep),
        .I1(ex_first_cycle),
        .I2(mbar_is_sleep),
        .I3(mbar_decode_I),
        .I4(\Using_FPGA.Correct_Carry_MUXCY_n_1 ),
        .I5(sleep_i0),
        .O(mbar_sleep_i_1_n_0));
  FDRE mbar_sleep_reg
       (.C(Clk),
        .CE(1'b1),
        .D(mbar_sleep_i_1_n_0),
        .Q(mbar_sleep),
        .R(1'b0));
  FDRE missed_IFetch_reg
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.iFetch_MuxCY_2_n_3 ),
        .Q(missed_IFetch),
        .R(sync_reset));
  FDRE mtsmsr_write_i_reg
       (.C(Clk),
        .CE(1'b1),
        .D(PreFetch_Buffer_I_n_43),
        .Q(mtsmsr_write_i_reg_n_0),
        .R(1'b0));
  FDRE mul_Executing_delayed_reg
       (.C(Clk),
        .CE(1'b1),
        .D(mul_Executing),
        .Q(mul_Executing_delayed),
        .R(sync_reset));
  LUT3 #(
    .INIT(8'h10)) 
    mul_Executing_done_i_1
       (.I0(ex_Valid_reg_1),
        .I1(mul_Executing),
        .I2(mul_Executing_delayed),
        .O(mul_Executing_done0));
  FDRE mul_Executing_done_reg
       (.C(Clk),
        .CE(1'b1),
        .D(mul_Executing_done0),
        .Q(mul_Executing_done),
        .R(sync_reset));
  FDRE mul_Executing_reg
       (.C(Clk),
        .CE(1'b1),
        .D(mbar_first),
        .Q(mul_Executing),
        .R(sync_reset));
  FDSE nonvalid_IFetch_n_reg
       (.C(Clk),
        .CE(1'b1),
        .D(PreFetch_Buffer_I_n_36),
        .Q(nonvalid_IFetch_n_reg_0),
        .S(sync_reset));
  LUT6 #(
    .INIT(64'hFF7FFFFFFF7F0000)) 
    quadlet_Read_i_i_1
       (.I0(PreFetch_Buffer_I_n_107),
        .I1(instr_OF_raw[0]),
        .I2(instr_OF_raw[1]),
        .I3(take_Intr_Now_III),
        .I4(of_PipeRun),
        .I5(quadlet_Read),
        .O(quadlet_Read_i_i_1_n_0));
  FDRE quadlet_Read_i_reg
       (.C(Clk),
        .CE(1'b1),
        .D(quadlet_Read_i_i_1_n_0),
        .Q(quadlet_Read),
        .R(sync_reset));
  FDRE #(
    .INIT(1'b0)) 
    reset_delay_reg
       (.C(Clk),
        .CE(1'b1),
        .D(sync_reset),
        .Q(reset_delay),
        .R(1'b0));
  FDRE select_ALU_Carry_reg
       (.C(Clk),
        .CE(of_PipeRun),
        .D(PreFetch_Buffer_I_n_116),
        .Q(select_ALU_Carry),
        .R(\Using_FPGA.of_PipeRun_MuxCY_1_n_17 ));
  LUT6 #(
    .INIT(64'h0000000008AAFBAA)) 
    sleep_i_i_1
       (.I0(Sleep_Decode),
        .I1(iFetch_In_Progress),
        .I2(\write_Addr_I_reg[0]_0 [0]),
        .I3(mbar_sleep),
        .I4(Q[22]),
        .I5(sleep_i0),
        .O(sleep_i_i_1_n_0));
  FDRE sleep_i_reg
       (.C(Clk),
        .CE(1'b1),
        .D(sleep_i_i_1_n_0),
        .Q(Sleep_Decode),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h000000000000E222)) 
    suspend_i_i_1
       (.I0(Suspend),
        .I1(sleep_i00_in),
        .I2(Q[22]),
        .I3(Q[23]),
        .I4(active_wakeup),
        .I5(sync_reset),
        .O(suspend_i_i_1_n_0));
  LUT3 #(
    .INIT(8'h8A)) 
    suspend_i_i_2
       (.I0(mbar_sleep),
        .I1(\write_Addr_I_reg[0]_0 [0]),
        .I2(iFetch_In_Progress),
        .O(sleep_i00_in));
  FDRE suspend_i_reg
       (.C(Clk),
        .CE(1'b1),
        .D(suspend_i_i_1_n_0),
        .Q(Suspend),
        .R(1'b0));
  FDRE swx_ready_reg
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.of_PipeRun_MuxCY_1_n_16 ),
        .Q(swx_ready),
        .R(1'b0));
  FDRE take_intr_2nd_cycle_reg
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.of_PipeRun_MuxCY_1_n_8 ),
        .Q(take_intr_2nd_cycle_reg_n_0),
        .R(1'b0));
  FDRE take_intr_Done_reg
       (.C(Clk),
        .CE(of_PipeRun),
        .D(take_intr_2nd_cycle_reg_n_0),
        .Q(take_intr_Done),
        .R(sync_reset));
  (* SOFT_HLUTNM = "soft_lutpair69" *) 
  LUT5 #(
    .INIT(32'h00D00000)) 
    trace_data_access_i_i_1
       (.I0(is_swx_I_reg_n_0),
        .I1(\Using_LWX_SWX_instr.reservation_reg_n_0 ),
        .I2(load_Store_i),
        .I3(ex_Valid_reg_1),
        .I4(ex_Valid),
        .O(is_swx_I_reg_1));
  LUT6 #(
    .INIT(64'hFFFFFFFFA0A20000)) 
    trace_reg_write_novalid_i_1
       (.I0(\Using_FPGA.Correct_Carry_MUXCY_n_1 ),
        .I1(writing_reg_n_0),
        .I2(write_Reg_reg_n_0),
        .I3(\Using_Ext_Databus.mem_access_reg ),
        .I4(\Using_FPGA.Native_i_3__1_n_0 ),
        .I5(reset_delay),
        .O(reg_Write_I));
  LUT6 #(
    .INIT(64'h00010000FFFFFFFF)) 
    trace_valid_instr_part1_i_1
       (.I0(load_Store_i),
        .I1(ex_Valid_reg_1),
        .I2(mul_Executing),
        .I3(take_intr_Done),
        .I4(ex_Valid_1st_cycle_reg_n_0),
        .I5(trace_valid_instr_part1_i_2_n_0),
        .O(trace_valid_instr_part10));
  LUT5 #(
    .INIT(32'hFFFF01FF)) 
    trace_valid_instr_part1_i_2
       (.I0(swx_ready),
        .I1(MEM_DAXI_Data_Strobe),
        .I2(DReady),
        .I3(load_Store_i),
        .I4(ex_Valid_reg_1),
        .O(trace_valid_instr_part1_i_2_n_0));
  FDRE trace_valid_instr_part1_reg
       (.C(Clk),
        .CE(1'b1),
        .D(trace_valid_instr_part10),
        .Q(trace_valid_instr_part1),
        .R(sync_reset));
  FDRE using_Imm_reg
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.of_PipeRun_MuxCY_1_n_1 ),
        .Q(use_Imm_Reg),
        .R(1'b0));
  LUT5 #(
    .INIT(32'h0000FCAA)) 
    \write_Addr_I[3]_i_1 
       (.I0(\write_Addr_I_reg[0]_0 [1]),
        .I1(take_Intr_Now_III),
        .I2(instr_OF_raw[9]),
        .I3(of_PipeRun),
        .I4(sync_reset),
        .O(\write_Addr_I[3]_i_1_n_0 ));
  FDRE \write_Addr_I_reg[0] 
       (.C(Clk),
        .CE(\Using_FPGA.of_PipeRun_MuxCY_1_n_18 ),
        .D(p_1_in[4]),
        .Q(\write_Addr_I_reg[0]_0 [4]),
        .R(1'b0));
  FDRE \write_Addr_I_reg[1] 
       (.C(Clk),
        .CE(\Using_FPGA.of_PipeRun_MuxCY_1_n_18 ),
        .D(p_1_in[3]),
        .Q(\write_Addr_I_reg[0]_0 [3]),
        .R(1'b0));
  FDRE \write_Addr_I_reg[2] 
       (.C(Clk),
        .CE(\Using_FPGA.of_PipeRun_MuxCY_1_n_18 ),
        .D(p_1_in[2]),
        .Q(\write_Addr_I_reg[0]_0 [2]),
        .R(1'b0));
  FDRE \write_Addr_I_reg[3] 
       (.C(Clk),
        .CE(1'b1),
        .D(\write_Addr_I[3]_i_1_n_0 ),
        .Q(\write_Addr_I_reg[0]_0 [1]),
        .R(1'b0));
  FDRE \write_Addr_I_reg[4] 
       (.C(Clk),
        .CE(\Using_FPGA.of_PipeRun_MuxCY_1_n_18 ),
        .D(p_1_in[0]),
        .Q(\write_Addr_I_reg[0]_0 [0]),
        .R(1'b0));
  FDRE write_Carry_I_reg
       (.C(Clk),
        .CE(of_PipeRun),
        .D(PreFetch_Buffer_I_n_85),
        .Q(write_Carry_I_reg_n_0),
        .R(\Using_FPGA.of_PipeRun_MuxCY_1_n_17 ));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4 write_Reg_I_LUT
       (.DReady0_out(DReady0_out),
        .\Using_FPGA.Native_0 (write_Reg_reg_n_0),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_i_3__1_n_0 ),
        .\Using_FPGA.Native_2 (writing_reg_n_0),
        .write_Reg_I_S(write_Reg_I_S));
  FDRE write_Reg_reg
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.of_PipeRun_MuxCY_1_n_2 ),
        .Q(write_Reg_reg_n_0),
        .R(1'b0));
  FDRE writing_reg
       (.C(Clk),
        .CE(of_PipeRun),
        .D(writing),
        .Q(writing_reg_n_0),
        .R(sync_reset));
endmodule

module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FD
   (\Using_FPGA.Native_0 ,
    ex_Result,
    Clk);
  output [0:0]\Using_FPGA.Native_0 ;
  input [0:0]ex_Result;
  input Clk;

  wire Clk;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(ex_Result),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FDE
   (PC_EX_i,
    D,
    \Using_FPGA.Native_0 ,
    Address,
    Clk,
    \data_rd_reg_reg[29] ,
    msr_I,
    \data_rd_reg_reg[29]_0 ,
    register_write,
    \data_rd_reg_reg[29]_1 );
  output [0:0]PC_EX_i;
  output [0:0]D;
  input \Using_FPGA.Native_0 ;
  input [0:0]Address;
  input Clk;
  input \data_rd_reg_reg[29] ;
  input [0:0]msr_I;
  input \data_rd_reg_reg[29]_0 ;
  input register_write;
  input [0:0]\data_rd_reg_reg[29]_1 ;

  wire [0:0]Address;
  wire Clk;
  wire [0:0]D;
  wire [0:0]PC_EX_i;
  wire \Using_FPGA.Native_0 ;
  wire \data_rd_reg_reg[29] ;
  wire \data_rd_reg_reg[29]_0 ;
  wire [0:0]\data_rd_reg_reg[29]_1 ;
  wire [0:0]msr_I;
  wire register_write;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(\Using_FPGA.Native_0 ),
        .D(Address),
        .Q(PC_EX_i),
        .R(1'b0));
  LUT6 #(
    .INIT(64'hFFE2E2E200E2E2E2)) 
    \data_rd_reg[29]_i_1 
       (.I0(PC_EX_i),
        .I1(\data_rd_reg_reg[29] ),
        .I2(msr_I),
        .I3(\data_rd_reg_reg[29]_0 ),
        .I4(register_write),
        .I5(\data_rd_reg_reg[29]_1 ),
        .O(D));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FDE_494
   (PC_EX_i,
    D,
    \Using_FPGA.Native_0 ,
    Address,
    Clk,
    \data_rd_reg_reg[28] ,
    msr_I,
    \data_rd_reg_reg[28]_0 ,
    register_write,
    \data_rd_reg_reg[28]_1 );
  output [0:0]PC_EX_i;
  output [0:0]D;
  input \Using_FPGA.Native_0 ;
  input [0:0]Address;
  input Clk;
  input \data_rd_reg_reg[28] ;
  input [0:0]msr_I;
  input \data_rd_reg_reg[28]_0 ;
  input register_write;
  input [0:0]\data_rd_reg_reg[28]_1 ;

  wire [0:0]Address;
  wire Clk;
  wire [0:0]D;
  wire [0:0]PC_EX_i;
  wire \Using_FPGA.Native_0 ;
  wire \data_rd_reg_reg[28] ;
  wire \data_rd_reg_reg[28]_0 ;
  wire [0:0]\data_rd_reg_reg[28]_1 ;
  wire [0:0]msr_I;
  wire register_write;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(\Using_FPGA.Native_0 ),
        .D(Address),
        .Q(PC_EX_i),
        .R(1'b0));
  LUT6 #(
    .INIT(64'hFFE2E2E200E2E2E2)) 
    \data_rd_reg[28]_i_1 
       (.I0(PC_EX_i),
        .I1(\data_rd_reg_reg[28] ),
        .I2(msr_I),
        .I3(\data_rd_reg_reg[28]_0 ),
        .I4(register_write),
        .I5(\data_rd_reg_reg[28]_1 ),
        .O(D));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FDE_500
   (PC_EX_i,
    \Using_FPGA.Native_0 ,
    Address,
    Clk);
  output [0:0]PC_EX_i;
  input \Using_FPGA.Native_0 ;
  input [0:0]Address;
  input Clk;

  wire [0:0]Address;
  wire Clk;
  wire [0:0]PC_EX_i;
  wire \Using_FPGA.Native_0 ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(\Using_FPGA.Native_0 ),
        .D(Address),
        .Q(PC_EX_i),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FDE_506
   (PC_EX_i,
    \Using_FPGA.Native_0 ,
    Address,
    Clk);
  output [0:0]PC_EX_i;
  input \Using_FPGA.Native_0 ;
  input [0:0]Address;
  input Clk;

  wire [0:0]Address;
  wire Clk;
  wire [0:0]PC_EX_i;
  wire \Using_FPGA.Native_0 ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(\Using_FPGA.Native_0 ),
        .D(Address),
        .Q(PC_EX_i),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FDE_512
   (PC_EX_i,
    \Using_FPGA.Native_0 ,
    Address,
    Clk);
  output [0:0]PC_EX_i;
  input \Using_FPGA.Native_0 ;
  input [0:0]Address;
  input Clk;

  wire [0:0]Address;
  wire Clk;
  wire [0:0]PC_EX_i;
  wire \Using_FPGA.Native_0 ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(\Using_FPGA.Native_0 ),
        .D(Address),
        .Q(PC_EX_i),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FDE_518
   (PC_EX_i,
    \Using_FPGA.Native_0 ,
    Address,
    Clk);
  output [0:0]PC_EX_i;
  input \Using_FPGA.Native_0 ;
  input [0:0]Address;
  input Clk;

  wire [0:0]Address;
  wire Clk;
  wire [0:0]PC_EX_i;
  wire \Using_FPGA.Native_0 ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(\Using_FPGA.Native_0 ),
        .D(Address),
        .Q(PC_EX_i),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FDE_524
   (PC_EX_i,
    \Using_FPGA.Native_0 ,
    Address,
    Clk);
  output [0:0]PC_EX_i;
  input \Using_FPGA.Native_0 ;
  input [0:0]Address;
  input Clk;

  wire [0:0]Address;
  wire Clk;
  wire [0:0]PC_EX_i;
  wire \Using_FPGA.Native_0 ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(\Using_FPGA.Native_0 ),
        .D(Address),
        .Q(PC_EX_i),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FDE_530
   (PC_EX_i,
    \Using_FPGA.Native_0 ,
    Address,
    Clk);
  output [0:0]PC_EX_i;
  input \Using_FPGA.Native_0 ;
  input [0:0]Address;
  input Clk;

  wire [0:0]Address;
  wire Clk;
  wire [0:0]PC_EX_i;
  wire \Using_FPGA.Native_0 ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(\Using_FPGA.Native_0 ),
        .D(Address),
        .Q(PC_EX_i),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FDE_536
   (PC_EX_i,
    \Using_FPGA.Native_0 ,
    Address,
    Clk);
  output [0:0]PC_EX_i;
  input \Using_FPGA.Native_0 ;
  input [0:0]Address;
  input Clk;

  wire [0:0]Address;
  wire Clk;
  wire [0:0]PC_EX_i;
  wire \Using_FPGA.Native_0 ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(\Using_FPGA.Native_0 ),
        .D(Address),
        .Q(PC_EX_i),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FDE_542
   (PC_EX_i,
    \Using_FPGA.Native_0 ,
    Address,
    Clk);
  output [0:0]PC_EX_i;
  input \Using_FPGA.Native_0 ;
  input [0:0]Address;
  input Clk;

  wire [0:0]Address;
  wire Clk;
  wire [0:0]PC_EX_i;
  wire \Using_FPGA.Native_0 ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(\Using_FPGA.Native_0 ),
        .D(Address),
        .Q(PC_EX_i),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FDE_548
   (PC_EX_i,
    \Using_FPGA.Native_0 ,
    Address,
    Clk);
  output [0:0]PC_EX_i;
  input \Using_FPGA.Native_0 ;
  input [0:0]Address;
  input Clk;

  wire [0:0]Address;
  wire Clk;
  wire [0:0]PC_EX_i;
  wire \Using_FPGA.Native_0 ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(\Using_FPGA.Native_0 ),
        .D(Address),
        .Q(PC_EX_i),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FDE_554
   (PC_EX_i,
    \Using_FPGA.Native_0 ,
    Address,
    Clk);
  output [0:0]PC_EX_i;
  input \Using_FPGA.Native_0 ;
  input [0:0]Address;
  input Clk;

  wire [0:0]Address;
  wire Clk;
  wire [0:0]PC_EX_i;
  wire \Using_FPGA.Native_0 ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(\Using_FPGA.Native_0 ),
        .D(Address),
        .Q(PC_EX_i),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FDE_560
   (PC_EX_i,
    \Using_FPGA.Native_0 ,
    Address,
    Clk);
  output [0:0]PC_EX_i;
  input \Using_FPGA.Native_0 ;
  input [0:0]Address;
  input Clk;

  wire [0:0]Address;
  wire Clk;
  wire [0:0]PC_EX_i;
  wire \Using_FPGA.Native_0 ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(\Using_FPGA.Native_0 ),
        .D(Address),
        .Q(PC_EX_i),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FDE_566
   (PC_EX_i,
    \Using_FPGA.Native_0 ,
    Address,
    Clk);
  output [0:0]PC_EX_i;
  input \Using_FPGA.Native_0 ;
  input [0:0]Address;
  input Clk;

  wire [0:0]Address;
  wire Clk;
  wire [0:0]PC_EX_i;
  wire \Using_FPGA.Native_0 ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(\Using_FPGA.Native_0 ),
        .D(Address),
        .Q(PC_EX_i),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FDE_597
   (op2_C,
    of_PipeRun,
    D_22,
    Clk);
  output [0:0]op2_C;
  input of_PipeRun;
  input D_22;
  input Clk;

  wire Clk;
  wire D_22;
  wire of_PipeRun;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(D_22),
        .Q(op2_C),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FDE_601
   (op2_C,
    of_PipeRun,
    D_23,
    Clk);
  output [0:0]op2_C;
  input of_PipeRun;
  input D_23;
  input Clk;

  wire Clk;
  wire D_23;
  wire of_PipeRun;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(D_23),
        .Q(op2_C),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FDE_605
   (op2_C,
    of_PipeRun,
    D_24,
    Clk);
  output [0:0]op2_C;
  input of_PipeRun;
  input D_24;
  input Clk;

  wire Clk;
  wire D_24;
  wire of_PipeRun;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(D_24),
        .Q(op2_C),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FDE_609
   (op2_C,
    of_PipeRun,
    D_25,
    Clk);
  output [0:0]op2_C;
  input of_PipeRun;
  input D_25;
  input Clk;

  wire Clk;
  wire D_25;
  wire of_PipeRun;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(D_25),
        .Q(op2_C),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FDE_613
   (op2_C,
    of_PipeRun,
    D_26,
    Clk);
  output [0:0]op2_C;
  input of_PipeRun;
  input D_26;
  input Clk;

  wire Clk;
  wire D_26;
  wire of_PipeRun;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(D_26),
        .Q(op2_C),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FDE_617
   (op2_C,
    of_PipeRun,
    D_27,
    Clk);
  output [0:0]op2_C;
  input of_PipeRun;
  input D_27;
  input Clk;

  wire Clk;
  wire D_27;
  wire of_PipeRun;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(D_27),
        .Q(op2_C),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FDE_621
   (op2_C,
    of_PipeRun,
    D_28,
    Clk);
  output [0:0]op2_C;
  input of_PipeRun;
  input D_28;
  input Clk;

  wire Clk;
  wire D_28;
  wire of_PipeRun;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(D_28),
        .Q(op2_C),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FDE_625
   (EX_Op2,
    of_PipeRun,
    D_0,
    Clk);
  output EX_Op2;
  input of_PipeRun;
  input D_0;
  input Clk;

  wire Clk;
  wire D_0;
  wire EX_Op2;
  wire of_PipeRun;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(D_0),
        .Q(EX_Op2),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FDE_629
   (\Using_FPGA.Native_0 ,
    of_PipeRun,
    D_1,
    Clk);
  output \Using_FPGA.Native_0 ;
  input of_PipeRun;
  input D_1;
  input Clk;

  wire Clk;
  wire D_1;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(D_1),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FDE_633
   (op2_C,
    of_PipeRun,
    D_29,
    Clk);
  output [0:0]op2_C;
  input of_PipeRun;
  input D_29;
  input Clk;

  wire Clk;
  wire D_29;
  wire of_PipeRun;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(D_29),
        .Q(op2_C),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FDE_637
   (Op2,
    of_PipeRun,
    D_2,
    Clk);
  output Op2;
  input of_PipeRun;
  input D_2;
  input Clk;

  wire Clk;
  wire D_2;
  wire Op2;
  wire of_PipeRun;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(D_2),
        .Q(Op2),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FDE_641
   (\Using_FPGA.Native_0 ,
    of_PipeRun,
    D_3,
    Clk);
  output \Using_FPGA.Native_0 ;
  input of_PipeRun;
  input D_3;
  input Clk;

  wire Clk;
  wire D_3;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(D_3),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FDE_645
   (op2_C,
    of_PipeRun,
    D_4,
    Clk);
  output [0:0]op2_C;
  input of_PipeRun;
  input D_4;
  input Clk;

  wire Clk;
  wire D_4;
  wire of_PipeRun;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(D_4),
        .Q(op2_C),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FDE_649
   (op2_C,
    of_PipeRun,
    D_5,
    Clk);
  output [0:0]op2_C;
  input of_PipeRun;
  input D_5;
  input Clk;

  wire Clk;
  wire D_5;
  wire of_PipeRun;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(D_5),
        .Q(op2_C),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FDE_653
   (op2_C,
    of_PipeRun,
    D_6,
    Clk);
  output [0:0]op2_C;
  input of_PipeRun;
  input D_6;
  input Clk;

  wire Clk;
  wire D_6;
  wire of_PipeRun;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(D_6),
        .Q(op2_C),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FDE_657
   (op2_C,
    of_PipeRun,
    D_7,
    Clk);
  output [0:0]op2_C;
  input of_PipeRun;
  input D_7;
  input Clk;

  wire Clk;
  wire D_7;
  wire of_PipeRun;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(D_7),
        .Q(op2_C),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FDE_661
   (op2_C,
    of_PipeRun,
    D_8,
    Clk);
  output [0:0]op2_C;
  input of_PipeRun;
  input D_8;
  input Clk;

  wire Clk;
  wire D_8;
  wire of_PipeRun;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(D_8),
        .Q(op2_C),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FDE_665
   (op2_C,
    of_PipeRun,
    D_9,
    Clk);
  output [0:0]op2_C;
  input of_PipeRun;
  input D_9;
  input Clk;

  wire Clk;
  wire D_9;
  wire of_PipeRun;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(D_9),
        .Q(op2_C),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FDE_669
   (op2_C,
    of_PipeRun,
    D_10,
    Clk);
  output [0:0]op2_C;
  input of_PipeRun;
  input D_10;
  input Clk;

  wire Clk;
  wire D_10;
  wire of_PipeRun;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(D_10),
        .Q(op2_C),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FDE_673
   (op2_C,
    of_PipeRun,
    D_11,
    Clk);
  output [0:0]op2_C;
  input of_PipeRun;
  input D_11;
  input Clk;

  wire Clk;
  wire D_11;
  wire of_PipeRun;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(D_11),
        .Q(op2_C),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FDE_677
   (op2_C,
    of_PipeRun,
    D_30,
    Clk);
  output [0:0]op2_C;
  input of_PipeRun;
  input D_30;
  input Clk;

  wire Clk;
  wire D_30;
  wire of_PipeRun;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(D_30),
        .Q(op2_C),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FDE_681
   (op2_C,
    of_PipeRun,
    D_12,
    Clk);
  output [0:0]op2_C;
  input of_PipeRun;
  input D_12;
  input Clk;

  wire Clk;
  wire D_12;
  wire of_PipeRun;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(D_12),
        .Q(op2_C),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FDE_685
   (op2_C,
    of_PipeRun,
    D_13,
    Clk);
  output [0:0]op2_C;
  input of_PipeRun;
  input D_13;
  input Clk;

  wire Clk;
  wire D_13;
  wire of_PipeRun;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(D_13),
        .Q(op2_C),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FDE_689
   (op2_C,
    of_PipeRun,
    D_14,
    Clk);
  output [0:0]op2_C;
  input of_PipeRun;
  input D_14;
  input Clk;

  wire Clk;
  wire D_14;
  wire of_PipeRun;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(D_14),
        .Q(op2_C),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FDE_693
   (op2_C,
    of_PipeRun,
    D_15,
    Clk);
  output [0:0]op2_C;
  input of_PipeRun;
  input D_15;
  input Clk;

  wire Clk;
  wire D_15;
  wire of_PipeRun;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(D_15),
        .Q(op2_C),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FDE_697
   (op2_C,
    of_PipeRun,
    D_16,
    Clk);
  output [0:0]op2_C;
  input of_PipeRun;
  input D_16;
  input Clk;

  wire Clk;
  wire D_16;
  wire of_PipeRun;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(D_16),
        .Q(op2_C),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FDE_701
   (op2_C,
    of_PipeRun,
    D_17,
    Clk);
  output [0:0]op2_C;
  input of_PipeRun;
  input D_17;
  input Clk;

  wire Clk;
  wire D_17;
  wire of_PipeRun;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(D_17),
        .Q(op2_C),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FDE_705
   (op2_C,
    of_PipeRun,
    D_18,
    Clk);
  output [0:0]op2_C;
  input of_PipeRun;
  input D_18;
  input Clk;

  wire Clk;
  wire D_18;
  wire of_PipeRun;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(D_18),
        .Q(op2_C),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FDE_709
   (op2_C,
    of_PipeRun,
    D_19,
    Clk);
  output [0:0]op2_C;
  input of_PipeRun;
  input D_19;
  input Clk;

  wire Clk;
  wire D_19;
  wire of_PipeRun;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(D_19),
        .Q(op2_C),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FDE_713
   (op2_C,
    of_PipeRun,
    D_20,
    Clk);
  output [0:0]op2_C;
  input of_PipeRun;
  input D_20;
  input Clk;

  wire Clk;
  wire D_20;
  wire of_PipeRun;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(D_20),
        .Q(op2_C),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FDE_717
   (op2_C,
    of_PipeRun,
    D_21,
    Clk);
  output [0:0]op2_C;
  input of_PipeRun;
  input D_21;
  input Clk;

  wire Clk;
  wire D_21;
  wire of_PipeRun;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(D_21),
        .Q(op2_C),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FDE_721
   (op2_C,
    S,
    Compare_Instr_reg,
    of_PipeRun,
    D_31,
    Clk,
    compare_Instr,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 );
  output [0:0]op2_C;
  output S;
  output Compare_Instr_reg;
  input of_PipeRun;
  input D_31;
  input Clk;
  input compare_Instr;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;

  wire Clk;
  wire Compare_Instr_reg;
  wire D_31;
  wire S;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire compare_Instr;
  wire of_PipeRun;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(D_31),
        .Q(op2_C),
        .R(1'b0));
  LUT4 #(
    .INIT(16'hFDDF)) 
    \Using_FPGA.Native_i_1__107 
       (.I0(compare_Instr),
        .I1(\Using_FPGA.Native_0 ),
        .I2(op2_C),
        .I3(\Using_FPGA.Native_1 ),
        .O(Compare_Instr_reg));
  LUT4 #(
    .INIT(16'hFDDF)) 
    \Using_FPGA.Native_i_1__63 
       (.I0(compare_Instr),
        .I1(\Using_FPGA.Native_0 ),
        .I2(op2_C),
        .I3(\Using_FPGA.Native_1 ),
        .O(S));
endmodule

module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FDS
   (\Using_FPGA.Native_0 ,
    DI,
    \Using_FPGA.Native_1 ,
    S,
    buffer_Addr_S_I_2,
    Clk,
    \Using_FPGA.Native_I1 ,
    ex_Valid,
    \Using_FPGA.Native_I1_0 ,
    \Using_FPGA.Native_I1_1 ,
    missed_IFetch,
    \Using_FPGA.Native_2 );
  output \Using_FPGA.Native_0 ;
  output DI;
  output \Using_FPGA.Native_1 ;
  input S;
  input buffer_Addr_S_I_2;
  input Clk;
  input \Using_FPGA.Native_I1 ;
  input ex_Valid;
  input \Using_FPGA.Native_I1_0 ;
  input \Using_FPGA.Native_I1_1 ;
  input missed_IFetch;
  input \Using_FPGA.Native_2 ;

  wire Clk;
  wire DI;
  wire S;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_I1 ;
  wire \Using_FPGA.Native_I1_0 ;
  wire \Using_FPGA.Native_I1_1 ;
  wire buffer_Addr_S_I_2;
  wire ex_Valid;
  wire missed_IFetch;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(buffer_Addr_S_I_2),
        .Q(\Using_FPGA.Native_0 ),
        .S(S));
  LUT2 #(
    .INIT(4'h6)) 
    \Using_FPGA.Native_I2_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_2 ),
        .O(\Using_FPGA.Native_1 ));
  LUT6 #(
    .INIT(64'h0000000000F7F7F7)) 
    \Using_FPGA.Native_i_1__0 
       (.I0(\Using_FPGA.Native_I1 ),
        .I1(ex_Valid),
        .I2(\Using_FPGA.Native_I1_0 ),
        .I3(\Using_FPGA.Native_0 ),
        .I4(\Using_FPGA.Native_I1_1 ),
        .I5(missed_IFetch),
        .O(DI));
endmodule

(* ORIG_REF_NAME = "MB_FDS" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FDS_92
   (\Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    S,
    O,
    Clk,
    \Using_FPGA.Native_2 );
  output \Using_FPGA.Native_0 ;
  output \Using_FPGA.Native_1 ;
  input S;
  input O;
  input Clk;
  input \Using_FPGA.Native_2 ;

  wire Clk;
  wire O;
  wire S;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(O),
        .Q(\Using_FPGA.Native_0 ),
        .S(S));
  LUT2 #(
    .INIT(4'h6)) 
    \Using_FPGA.Native_I1_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_2 ),
        .O(\Using_FPGA.Native_1 ));
endmodule

(* ORIG_REF_NAME = "MB_FDS" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FDS_94
   (\Using_FPGA.Native_0 ,
    S,
    O,
    Clk);
  output \Using_FPGA.Native_0 ;
  input S;
  input O;
  input Clk;

  wire Clk;
  wire O;
  wire S;
  wire \Using_FPGA.Native_0 ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(O),
        .Q(\Using_FPGA.Native_0 ),
        .S(S));
endmodule

(* ORIG_REF_NAME = "MB_FD" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FD_290
   (\Using_FPGA.Native_0 ,
    ex_Result,
    Clk);
  output [0:0]\Using_FPGA.Native_0 ;
  input [0:0]ex_Result;
  input Clk;

  wire Clk;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(ex_Result),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FD" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FD_293
   (\Using_FPGA.Native_0 ,
    ex_Result,
    Clk);
  output [0:0]\Using_FPGA.Native_0 ;
  input [0:0]ex_Result;
  input Clk;

  wire Clk;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(ex_Result),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FD" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FD_296
   (\Using_FPGA.Native_0 ,
    ex_Result,
    Clk);
  output [0:0]\Using_FPGA.Native_0 ;
  input [0:0]ex_Result;
  input Clk;

  wire Clk;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(ex_Result),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FD" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FD_299
   (\Using_FPGA.Native_0 ,
    ex_Result,
    Clk);
  output [0:0]\Using_FPGA.Native_0 ;
  input [0:0]ex_Result;
  input Clk;

  wire Clk;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(ex_Result),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FD" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FD_302
   (\Using_FPGA.Native_0 ,
    ex_Result,
    Clk);
  output [0:0]\Using_FPGA.Native_0 ;
  input [0:0]ex_Result;
  input Clk;

  wire Clk;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(ex_Result),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FD" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FD_305
   (\Using_FPGA.Native_0 ,
    ex_Result,
    Clk);
  output [0:0]\Using_FPGA.Native_0 ;
  input [0:0]ex_Result;
  input Clk;

  wire Clk;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(ex_Result),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FD" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FD_308
   (\Using_FPGA.Native_0 ,
    ex_Result,
    Clk);
  output [0:0]\Using_FPGA.Native_0 ;
  input [0:0]ex_Result;
  input Clk;

  wire Clk;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(ex_Result),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FD" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FD_311
   (\Using_FPGA.Native_0 ,
    ex_Result,
    Clk);
  output [0:0]\Using_FPGA.Native_0 ;
  input [0:0]ex_Result;
  input Clk;

  wire Clk;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(ex_Result),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FD" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FD_314
   (\Using_FPGA.Native_0 ,
    ex_Result,
    Clk);
  output [0:0]\Using_FPGA.Native_0 ;
  input [0:0]ex_Result;
  input Clk;

  wire Clk;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(ex_Result),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FD" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FD_317
   (\Using_FPGA.Native_0 ,
    ex_Result,
    Clk);
  output [0:0]\Using_FPGA.Native_0 ;
  input [0:0]ex_Result;
  input Clk;

  wire Clk;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(ex_Result),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FD" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FD_320
   (\Using_FPGA.Native_0 ,
    ex_Result,
    Clk);
  output [0:0]\Using_FPGA.Native_0 ;
  input [0:0]ex_Result;
  input Clk;

  wire Clk;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(ex_Result),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FD" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FD_323
   (\Using_FPGA.Native_0 ,
    ex_Result,
    Clk);
  output [0:0]\Using_FPGA.Native_0 ;
  input [0:0]ex_Result;
  input Clk;

  wire Clk;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(ex_Result),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FD" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FD_326
   (\Using_FPGA.Native_0 ,
    ex_Result,
    Clk);
  output [0:0]\Using_FPGA.Native_0 ;
  input [0:0]ex_Result;
  input Clk;

  wire Clk;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(ex_Result),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FD" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FD_329
   (\Using_FPGA.Native_0 ,
    ex_Result,
    Clk);
  output [0:0]\Using_FPGA.Native_0 ;
  input [0:0]ex_Result;
  input Clk;

  wire Clk;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(ex_Result),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FD" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FD_332
   (\Using_FPGA.Native_0 ,
    ex_Result,
    Clk);
  output [0:0]\Using_FPGA.Native_0 ;
  input [0:0]ex_Result;
  input Clk;

  wire Clk;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(ex_Result),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FD" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FD_335
   (\Using_FPGA.Native_0 ,
    ex_Result,
    Clk);
  output [0:0]\Using_FPGA.Native_0 ;
  input [0:0]ex_Result;
  input Clk;

  wire Clk;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(ex_Result),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FD" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FD_338
   (\Using_FPGA.Native_0 ,
    ex_Result,
    Clk);
  output [0:0]\Using_FPGA.Native_0 ;
  input [0:0]ex_Result;
  input Clk;

  wire Clk;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(ex_Result),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FD" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FD_341
   (\Using_FPGA.Native_0 ,
    ex_Result,
    Clk);
  output [0:0]\Using_FPGA.Native_0 ;
  input [0:0]ex_Result;
  input Clk;

  wire Clk;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(ex_Result),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FD" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FD_344
   (\Using_FPGA.Native_0 ,
    ex_Result,
    Clk);
  output [0:0]\Using_FPGA.Native_0 ;
  input [0:0]ex_Result;
  input Clk;

  wire Clk;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(ex_Result),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FD" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FD_347
   (\Using_FPGA.Native_0 ,
    ex_Result,
    Clk);
  output [0:0]\Using_FPGA.Native_0 ;
  input [0:0]ex_Result;
  input Clk;

  wire Clk;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(ex_Result),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FD" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FD_350
   (\Using_FPGA.Native_0 ,
    ex_Result,
    Clk);
  output [0:0]\Using_FPGA.Native_0 ;
  input [0:0]ex_Result;
  input Clk;

  wire Clk;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(ex_Result),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FD" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FD_353
   (\Using_FPGA.Native_0 ,
    ex_Result,
    Clk);
  output [0:0]\Using_FPGA.Native_0 ;
  input [0:0]ex_Result;
  input Clk;

  wire Clk;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(ex_Result),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FD" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FD_356
   (\Using_FPGA.Native_0 ,
    ex_Result,
    Clk);
  output [0:0]\Using_FPGA.Native_0 ;
  input [0:0]ex_Result;
  input Clk;

  wire Clk;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(ex_Result),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FD" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FD_359
   (\Using_FPGA.Native_0 ,
    ex_Result,
    Clk);
  output [0:0]\Using_FPGA.Native_0 ;
  input [0:0]ex_Result;
  input Clk;

  wire Clk;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(ex_Result),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FD" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FD_362
   (\Using_FPGA.Native_0 ,
    ex_Result,
    Clk);
  output [0:0]\Using_FPGA.Native_0 ;
  input [0:0]ex_Result;
  input Clk;

  wire Clk;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(ex_Result),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FD" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FD_365
   (\Using_FPGA.Native_0 ,
    ex_Result,
    Clk);
  output [0:0]\Using_FPGA.Native_0 ;
  input [0:0]ex_Result;
  input Clk;

  wire Clk;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(ex_Result),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FD" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FD_368
   (\Using_FPGA.Native_0 ,
    ex_Result,
    Clk);
  output [0:0]\Using_FPGA.Native_0 ;
  input [0:0]ex_Result;
  input Clk;

  wire Clk;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(ex_Result),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FD" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FD_371
   (\Using_FPGA.Native_0 ,
    ex_Result,
    Clk);
  output [0:0]\Using_FPGA.Native_0 ;
  input [0:0]ex_Result;
  input Clk;

  wire Clk;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(ex_Result),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FD" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FD_374
   (\Using_FPGA.Native_0 ,
    ex_Result,
    Clk);
  output [0:0]\Using_FPGA.Native_0 ;
  input [0:0]ex_Result;
  input Clk;

  wire Clk;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(ex_Result),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FD" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FD_377
   (\Using_FPGA.Native_0 ,
    ex_Result,
    Clk);
  output [0:0]\Using_FPGA.Native_0 ;
  input [0:0]ex_Result;
  input Clk;

  wire Clk;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(ex_Result),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FD" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FD_380
   (\Using_FPGA.Native_0 ,
    ex_Result,
    Clk);
  output [0:0]\Using_FPGA.Native_0 ;
  input [0:0]ex_Result;
  input Clk;

  wire Clk;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(ex_Result),
        .Q(\Using_FPGA.Native_0 ),
        .R(1'b0));
endmodule

module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT2
   (byte_i_reg,
    byte_selects_0,
    isbyte);
  output byte_i_reg;
  input byte_selects_0;
  input isbyte;

  wire byte_i_reg;
  wire byte_selects_0;
  wire isbyte;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \Using_FPGA.Native 
       (.I0(byte_selects_0),
        .I1(isbyte),
        .O(byte_i_reg));
endmodule

module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4
   (write_Reg_I_S,
    DReady0_out,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 );
  output write_Reg_I_S;
  input DReady0_out;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;

  wire DReady0_out;
  wire I179_in;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire write_Reg_I_S;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hF800)) 
    \Using_FPGA.Native 
       (.I0(DReady0_out),
        .I1(I179_in),
        .I2(\Using_FPGA.Native_0 ),
        .I3(\Using_FPGA.Native_1 ),
        .O(write_Reg_I_S));
  LUT1 #(
    .INIT(2'h1)) 
    \Using_FPGA.Native_i_2__6 
       (.I0(\Using_FPGA.Native_2 ),
        .O(I179_in));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized1
   (opsel1_SPR_Select_1,
    instr_OF_raw);
  output opsel1_SPR_Select_1;
  input [3:0]instr_OF_raw;

  wire [3:0]instr_OF_raw;
  wire opsel1_SPR_Select_1;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h2000)) 
    \Using_FPGA.Native 
       (.I0(instr_OF_raw[3]),
        .I1(instr_OF_raw[2]),
        .I2(instr_OF_raw[1]),
        .I3(instr_OF_raw[0]),
        .O(opsel1_SPR_Select_1));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized11
   (force_DI2,
    force_Val2_N,
    ex_Valid,
    \Using_FPGA.Native_0 );
  output force_DI2;
  input force_Val2_N;
  input ex_Valid;
  input \Using_FPGA.Native_0 ;

  wire \Using_FPGA.Native_0 ;
  wire ex_Valid;
  wire force_DI2;
  wire force_Val2_N;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hAABA)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(force_Val2_N),
        .I2(ex_Valid),
        .I3(\Using_FPGA.Native_0 ),
        .O(force_DI2));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized13
   (S,
    op2_C,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31] ,
    alu_AddSub_1);
  output S;
  input [0:0]op2_C;
  input [0:0]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31] ;
  input alu_AddSub_1;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31] ;
  wire S;
  wire alu_AddSub_1;
  wire [0:0]alu_Op;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFA0A)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(alu_Op),
        .I2(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31] ),
        .I3(alu_AddSub_1),
        .O(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized15
   (logic_Res_i,
    op2_C,
    \Using_FPGA.Native_0 ,
    Logic_Oper);
  output logic_Res_i;
  input [0:0]op2_C;
  input \Using_FPGA.Native_0 ;
  input [0:1]Logic_Oper;

  wire [0:1]Logic_Oper;
  wire \Using_FPGA.Native_0 ;
  wire logic_Res_i;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(\Using_FPGA.Native_0 ),
        .I2(Logic_Oper[1]),
        .I3(Logic_Oper[0]),
        .O(logic_Res_i));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized15_165
   (logic_Res_i,
    op2_C,
    \Using_FPGA.Native_0 ,
    Logic_Oper);
  output logic_Res_i;
  input [0:0]op2_C;
  input \Using_FPGA.Native_0 ;
  input [0:1]Logic_Oper;

  wire [0:1]Logic_Oper;
  wire \Using_FPGA.Native_0 ;
  wire logic_Res_i;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(\Using_FPGA.Native_0 ),
        .I2(Logic_Oper[1]),
        .I3(Logic_Oper[0]),
        .O(logic_Res_i));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized15_168
   (logic_Res_i,
    op2_C,
    \Using_FPGA.Native_0 ,
    Logic_Oper);
  output logic_Res_i;
  input [0:0]op2_C;
  input \Using_FPGA.Native_0 ;
  input [0:1]Logic_Oper;

  wire [0:1]Logic_Oper;
  wire \Using_FPGA.Native_0 ;
  wire logic_Res_i;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(\Using_FPGA.Native_0 ),
        .I2(Logic_Oper[1]),
        .I3(Logic_Oper[0]),
        .O(logic_Res_i));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized15_171
   (logic_Res_i,
    op2_C,
    \Using_FPGA.Native_0 ,
    Logic_Oper);
  output logic_Res_i;
  input [0:0]op2_C;
  input \Using_FPGA.Native_0 ;
  input [0:1]Logic_Oper;

  wire [0:1]Logic_Oper;
  wire \Using_FPGA.Native_0 ;
  wire logic_Res_i;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(\Using_FPGA.Native_0 ),
        .I2(Logic_Oper[1]),
        .I3(Logic_Oper[0]),
        .O(logic_Res_i));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized15_174
   (logic_Res_i,
    op2_C,
    \Using_FPGA.Native_0 ,
    Logic_Oper);
  output logic_Res_i;
  input [0:0]op2_C;
  input \Using_FPGA.Native_0 ;
  input [0:1]Logic_Oper;

  wire [0:1]Logic_Oper;
  wire \Using_FPGA.Native_0 ;
  wire logic_Res_i;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(\Using_FPGA.Native_0 ),
        .I2(Logic_Oper[1]),
        .I3(Logic_Oper[0]),
        .O(logic_Res_i));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized15_177
   (logic_Res_i,
    op2_C,
    \Using_FPGA.Native_0 ,
    Logic_Oper);
  output logic_Res_i;
  input [0:0]op2_C;
  input \Using_FPGA.Native_0 ;
  input [0:1]Logic_Oper;

  wire [0:1]Logic_Oper;
  wire \Using_FPGA.Native_0 ;
  wire logic_Res_i;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(\Using_FPGA.Native_0 ),
        .I2(Logic_Oper[1]),
        .I3(Logic_Oper[0]),
        .O(logic_Res_i));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized15_180
   (logic_Res_i,
    op2_C,
    \Using_FPGA.Native_0 ,
    Logic_Oper);
  output logic_Res_i;
  input [0:0]op2_C;
  input \Using_FPGA.Native_0 ;
  input [0:1]Logic_Oper;

  wire [0:1]Logic_Oper;
  wire \Using_FPGA.Native_0 ;
  wire logic_Res_i;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(\Using_FPGA.Native_0 ),
        .I2(Logic_Oper[1]),
        .I3(Logic_Oper[0]),
        .O(logic_Res_i));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized15_183
   (logic_Res_i,
    EX_Op2,
    Op1_Logic,
    Logic_Oper);
  output logic_Res_i;
  input EX_Op2;
  input Op1_Logic;
  input [0:1]Logic_Oper;

  wire EX_Op2;
  wire [0:1]Logic_Oper;
  wire Op1_Logic;
  wire logic_Res_i;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(EX_Op2),
        .I1(Op1_Logic),
        .I2(Logic_Oper[1]),
        .I3(Logic_Oper[0]),
        .O(logic_Res_i));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized15_186
   (logic_Res_i,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Logic_Oper);
  output logic_Res_i;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [0:1]Logic_Oper;

  wire [0:1]Logic_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire logic_Res_i;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(Logic_Oper[1]),
        .I3(Logic_Oper[0]),
        .O(logic_Res_i));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized15_189
   (logic_Res_i,
    op2_C,
    \Using_FPGA.Native_0 ,
    Logic_Oper);
  output logic_Res_i;
  input [0:0]op2_C;
  input \Using_FPGA.Native_0 ;
  input [0:1]Logic_Oper;

  wire [0:1]Logic_Oper;
  wire \Using_FPGA.Native_0 ;
  wire logic_Res_i;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(\Using_FPGA.Native_0 ),
        .I2(Logic_Oper[1]),
        .I3(Logic_Oper[0]),
        .O(logic_Res_i));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized15_192
   (logic_Res_i,
    Op2,
    \Using_FPGA.Native_0 ,
    Logic_Oper);
  output logic_Res_i;
  input Op2;
  input \Using_FPGA.Native_0 ;
  input [0:1]Logic_Oper;

  wire [0:1]Logic_Oper;
  wire Op2;
  wire \Using_FPGA.Native_0 ;
  wire logic_Res_i;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(Op2),
        .I1(\Using_FPGA.Native_0 ),
        .I2(Logic_Oper[1]),
        .I3(Logic_Oper[0]),
        .O(logic_Res_i));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized15_195
   (logic_Res_i,
    \Using_FPGA.Native_0 ,
    Shifted,
    Logic_Oper);
  output logic_Res_i;
  input \Using_FPGA.Native_0 ;
  input Shifted;
  input [0:1]Logic_Oper;

  wire [0:1]Logic_Oper;
  wire Shifted;
  wire \Using_FPGA.Native_0 ;
  wire logic_Res_i;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(Shifted),
        .I2(Logic_Oper[1]),
        .I3(Logic_Oper[0]),
        .O(logic_Res_i));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized15_198
   (logic_Res_i,
    op2_C,
    \Using_FPGA.Native_0 ,
    Logic_Oper);
  output logic_Res_i;
  input [0:0]op2_C;
  input \Using_FPGA.Native_0 ;
  input [0:1]Logic_Oper;

  wire [0:1]Logic_Oper;
  wire \Using_FPGA.Native_0 ;
  wire logic_Res_i;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(\Using_FPGA.Native_0 ),
        .I2(Logic_Oper[1]),
        .I3(Logic_Oper[0]),
        .O(logic_Res_i));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized15_201
   (logic_Res_i,
    op2_C,
    \Using_FPGA.Native_0 ,
    Logic_Oper);
  output logic_Res_i;
  input [0:0]op2_C;
  input \Using_FPGA.Native_0 ;
  input [0:1]Logic_Oper;

  wire [0:1]Logic_Oper;
  wire \Using_FPGA.Native_0 ;
  wire logic_Res_i;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(\Using_FPGA.Native_0 ),
        .I2(Logic_Oper[1]),
        .I3(Logic_Oper[0]),
        .O(logic_Res_i));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized15_204
   (logic_Res_i,
    op2_C,
    \Using_FPGA.Native_0 ,
    Logic_Oper);
  output logic_Res_i;
  input [0:0]op2_C;
  input \Using_FPGA.Native_0 ;
  input [0:1]Logic_Oper;

  wire [0:1]Logic_Oper;
  wire \Using_FPGA.Native_0 ;
  wire logic_Res_i;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(\Using_FPGA.Native_0 ),
        .I2(Logic_Oper[1]),
        .I3(Logic_Oper[0]),
        .O(logic_Res_i));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized15_207
   (logic_Res_i,
    op2_C,
    \Using_FPGA.Native_0 ,
    Logic_Oper);
  output logic_Res_i;
  input [0:0]op2_C;
  input \Using_FPGA.Native_0 ;
  input [0:1]Logic_Oper;

  wire [0:1]Logic_Oper;
  wire \Using_FPGA.Native_0 ;
  wire logic_Res_i;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(\Using_FPGA.Native_0 ),
        .I2(Logic_Oper[1]),
        .I3(Logic_Oper[0]),
        .O(logic_Res_i));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized15_210
   (logic_Res_i,
    op2_C,
    \Using_FPGA.Native_0 ,
    Logic_Oper);
  output logic_Res_i;
  input [0:0]op2_C;
  input \Using_FPGA.Native_0 ;
  input [0:1]Logic_Oper;

  wire [0:1]Logic_Oper;
  wire \Using_FPGA.Native_0 ;
  wire logic_Res_i;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(\Using_FPGA.Native_0 ),
        .I2(Logic_Oper[1]),
        .I3(Logic_Oper[0]),
        .O(logic_Res_i));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized15_213
   (logic_Res_i,
    op2_C,
    \Using_FPGA.Native_0 ,
    Logic_Oper);
  output logic_Res_i;
  input [0:0]op2_C;
  input \Using_FPGA.Native_0 ;
  input [0:1]Logic_Oper;

  wire [0:1]Logic_Oper;
  wire \Using_FPGA.Native_0 ;
  wire logic_Res_i;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(\Using_FPGA.Native_0 ),
        .I2(Logic_Oper[1]),
        .I3(Logic_Oper[0]),
        .O(logic_Res_i));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized15_216
   (logic_Res_i,
    op2_C,
    \Using_FPGA.Native_0 ,
    Logic_Oper);
  output logic_Res_i;
  input [0:0]op2_C;
  input \Using_FPGA.Native_0 ;
  input [0:1]Logic_Oper;

  wire [0:1]Logic_Oper;
  wire \Using_FPGA.Native_0 ;
  wire logic_Res_i;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(\Using_FPGA.Native_0 ),
        .I2(Logic_Oper[1]),
        .I3(Logic_Oper[0]),
        .O(logic_Res_i));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized15_219
   (logic_Res_i,
    op2_C,
    \Using_FPGA.Native_0 ,
    Logic_Oper);
  output logic_Res_i;
  input [0:0]op2_C;
  input \Using_FPGA.Native_0 ;
  input [0:1]Logic_Oper;

  wire [0:1]Logic_Oper;
  wire \Using_FPGA.Native_0 ;
  wire logic_Res_i;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(\Using_FPGA.Native_0 ),
        .I2(Logic_Oper[1]),
        .I3(Logic_Oper[0]),
        .O(logic_Res_i));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized15_222
   (logic_Res_i,
    op2_C,
    \Using_FPGA.Native_0 ,
    Logic_Oper);
  output logic_Res_i;
  input [0:0]op2_C;
  input \Using_FPGA.Native_0 ;
  input [0:1]Logic_Oper;

  wire [0:1]Logic_Oper;
  wire \Using_FPGA.Native_0 ;
  wire logic_Res_i;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(\Using_FPGA.Native_0 ),
        .I2(Logic_Oper[1]),
        .I3(Logic_Oper[0]),
        .O(logic_Res_i));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized15_225
   (logic_Res_i,
    op2_C,
    \Using_FPGA.Native_0 ,
    Logic_Oper);
  output logic_Res_i;
  input [0:0]op2_C;
  input \Using_FPGA.Native_0 ;
  input [0:1]Logic_Oper;

  wire [0:1]Logic_Oper;
  wire \Using_FPGA.Native_0 ;
  wire logic_Res_i;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(\Using_FPGA.Native_0 ),
        .I2(Logic_Oper[1]),
        .I3(Logic_Oper[0]),
        .O(logic_Res_i));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized15_228
   (logic_Res_i,
    op2_C,
    \Using_FPGA.Native_0 ,
    Logic_Oper);
  output logic_Res_i;
  input [0:0]op2_C;
  input \Using_FPGA.Native_0 ;
  input [0:1]Logic_Oper;

  wire [0:1]Logic_Oper;
  wire \Using_FPGA.Native_0 ;
  wire logic_Res_i;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(\Using_FPGA.Native_0 ),
        .I2(Logic_Oper[1]),
        .I3(Logic_Oper[0]),
        .O(logic_Res_i));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized15_231
   (logic_Res_i,
    op2_C,
    \Using_FPGA.Native_0 ,
    Logic_Oper);
  output logic_Res_i;
  input [0:0]op2_C;
  input \Using_FPGA.Native_0 ;
  input [0:1]Logic_Oper;

  wire [0:1]Logic_Oper;
  wire \Using_FPGA.Native_0 ;
  wire logic_Res_i;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(\Using_FPGA.Native_0 ),
        .I2(Logic_Oper[1]),
        .I3(Logic_Oper[0]),
        .O(logic_Res_i));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized15_234
   (logic_Res_i,
    op2_C,
    \Using_FPGA.Native_0 ,
    Logic_Oper);
  output logic_Res_i;
  input [0:0]op2_C;
  input \Using_FPGA.Native_0 ;
  input [0:1]Logic_Oper;

  wire [0:1]Logic_Oper;
  wire \Using_FPGA.Native_0 ;
  wire logic_Res_i;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(\Using_FPGA.Native_0 ),
        .I2(Logic_Oper[1]),
        .I3(Logic_Oper[0]),
        .O(logic_Res_i));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized15_237
   (logic_Res_i,
    op2_C,
    \Using_FPGA.Native_0 ,
    Logic_Oper);
  output logic_Res_i;
  input [0:0]op2_C;
  input \Using_FPGA.Native_0 ;
  input [0:1]Logic_Oper;

  wire [0:1]Logic_Oper;
  wire \Using_FPGA.Native_0 ;
  wire logic_Res_i;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(\Using_FPGA.Native_0 ),
        .I2(Logic_Oper[1]),
        .I3(Logic_Oper[0]),
        .O(logic_Res_i));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized15_240
   (logic_Res_i,
    op2_C,
    \Using_FPGA.Native_0 ,
    Logic_Oper);
  output logic_Res_i;
  input [0:0]op2_C;
  input \Using_FPGA.Native_0 ;
  input [0:1]Logic_Oper;

  wire [0:1]Logic_Oper;
  wire \Using_FPGA.Native_0 ;
  wire logic_Res_i;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(\Using_FPGA.Native_0 ),
        .I2(Logic_Oper[1]),
        .I3(Logic_Oper[0]),
        .O(logic_Res_i));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized15_243
   (logic_Res_i,
    op2_C,
    \Using_FPGA.Native_0 ,
    Logic_Oper);
  output logic_Res_i;
  input [0:0]op2_C;
  input \Using_FPGA.Native_0 ;
  input [0:1]Logic_Oper;

  wire [0:1]Logic_Oper;
  wire \Using_FPGA.Native_0 ;
  wire logic_Res_i;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(\Using_FPGA.Native_0 ),
        .I2(Logic_Oper[1]),
        .I3(Logic_Oper[0]),
        .O(logic_Res_i));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized15_246
   (logic_Res_i,
    op2_C,
    \Using_FPGA.Native_0 ,
    Logic_Oper);
  output logic_Res_i;
  input [0:0]op2_C;
  input \Using_FPGA.Native_0 ;
  input [0:1]Logic_Oper;

  wire [0:1]Logic_Oper;
  wire \Using_FPGA.Native_0 ;
  wire logic_Res_i;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(\Using_FPGA.Native_0 ),
        .I2(Logic_Oper[1]),
        .I3(Logic_Oper[0]),
        .O(logic_Res_i));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized15_249
   (logic_Res_i,
    op2_C,
    \Using_FPGA.Native_0 ,
    Logic_Oper);
  output logic_Res_i;
  input [0:0]op2_C;
  input \Using_FPGA.Native_0 ;
  input [0:1]Logic_Oper;

  wire [0:1]Logic_Oper;
  wire \Using_FPGA.Native_0 ;
  wire logic_Res_i;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(\Using_FPGA.Native_0 ),
        .I2(Logic_Oper[1]),
        .I3(Logic_Oper[0]),
        .O(logic_Res_i));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized15_252
   (logic_Res_i,
    op2_C,
    \Using_FPGA.Native_0 ,
    Logic_Oper);
  output logic_Res_i;
  input [0:0]op2_C;
  input \Using_FPGA.Native_0 ;
  input [0:1]Logic_Oper;

  wire [0:1]Logic_Oper;
  wire \Using_FPGA.Native_0 ;
  wire logic_Res_i;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(\Using_FPGA.Native_0 ),
        .I2(Logic_Oper[1]),
        .I3(Logic_Oper[0]),
        .O(logic_Res_i));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized15_255
   (logic_Res_i,
    op2_C,
    \Using_FPGA.Native_0 ,
    Logic_Oper);
  output logic_Res_i;
  input [0:0]op2_C;
  input \Using_FPGA.Native_0 ;
  input [0:1]Logic_Oper;

  wire [0:1]Logic_Oper;
  wire \Using_FPGA.Native_0 ;
  wire logic_Res_i;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h468E)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(\Using_FPGA.Native_0 ),
        .I2(Logic_Oper[1]),
        .I3(Logic_Oper[0]),
        .O(logic_Res_i));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized17
   (shift_Res,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Shift_Oper);
  output shift_Res;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input Shift_Oper;

  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(\Using_FPGA.Native_2 ),
        .I3(Shift_Oper),
        .O(shift_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized17_166
   (shift_Res,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Shift_Oper);
  output shift_Res;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input Shift_Oper;

  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(\Using_FPGA.Native_2 ),
        .I3(Shift_Oper),
        .O(shift_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized17_169
   (shift_Res,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Shift_Oper);
  output shift_Res;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input Shift_Oper;

  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(\Using_FPGA.Native_2 ),
        .I3(Shift_Oper),
        .O(shift_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized17_172
   (shift_Res,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Shift_Oper);
  output shift_Res;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input Shift_Oper;

  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(\Using_FPGA.Native_2 ),
        .I3(Shift_Oper),
        .O(shift_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized17_175
   (shift_Res,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Shift_Oper);
  output shift_Res;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input Shift_Oper;

  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(\Using_FPGA.Native_2 ),
        .I3(Shift_Oper),
        .O(shift_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized17_178
   (shift_Res,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Shift_Oper);
  output shift_Res;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input Shift_Oper;

  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(\Using_FPGA.Native_2 ),
        .I3(Shift_Oper),
        .O(shift_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized17_181
   (shift_Res,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Shift_Oper);
  output shift_Res;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input Shift_Oper;

  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(\Using_FPGA.Native_2 ),
        .I3(Shift_Oper),
        .O(shift_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized17_184
   (shift_Res,
    \Using_FPGA.Native_0 ,
    Op1_Logic,
    Shift_Oper);
  output shift_Res;
  input \Using_FPGA.Native_0 ;
  input Op1_Logic;
  input Shift_Oper;

  wire Op1_Logic;
  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(Op1_Logic),
        .I2(1'b0),
        .I3(Shift_Oper),
        .O(shift_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized17_187
   (shift_Res,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Shift_Oper);
  output shift_Res;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Shift_Oper;

  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(1'b0),
        .I3(Shift_Oper),
        .O(shift_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized17_190
   (shift_Res,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Shift_Oper);
  output shift_Res;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input Shift_Oper;

  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(\Using_FPGA.Native_2 ),
        .I3(Shift_Oper),
        .O(shift_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized17_193
   (shift_Res,
    Shifted,
    \Using_FPGA.Native_0 ,
    Shift_Oper);
  output shift_Res;
  input Shifted;
  input \Using_FPGA.Native_0 ;
  input Shift_Oper;

  wire Shift_Oper;
  wire Shifted;
  wire \Using_FPGA.Native_0 ;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(Shifted),
        .I1(\Using_FPGA.Native_0 ),
        .I2(1'b0),
        .I3(Shift_Oper),
        .O(shift_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized17_196
   (shift_Res,
    \Using_FPGA.Native_0 ,
    Shifted,
    Shift_Oper);
  output shift_Res;
  input \Using_FPGA.Native_0 ;
  input Shifted;
  input Shift_Oper;

  wire Shift_Oper;
  wire Shifted;
  wire \Using_FPGA.Native_0 ;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(Shifted),
        .I2(1'b0),
        .I3(Shift_Oper),
        .O(shift_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized17_199
   (shift_Res,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Shift_Oper);
  output shift_Res;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Shift_Oper;

  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(1'b0),
        .I3(Shift_Oper),
        .O(shift_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized17_202
   (shift_Res,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Shift_Oper);
  output shift_Res;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Shift_Oper;

  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(1'b0),
        .I3(Shift_Oper),
        .O(shift_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized17_205
   (shift_Res,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Shift_Oper);
  output shift_Res;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Shift_Oper;

  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(1'b0),
        .I3(Shift_Oper),
        .O(shift_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized17_208
   (shift_Res,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Shift_Oper);
  output shift_Res;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Shift_Oper;

  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(1'b0),
        .I3(Shift_Oper),
        .O(shift_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized17_211
   (shift_Res,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Sext,
    Shift_Oper);
  output shift_Res;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Sext;
  input Shift_Oper;

  wire Sext;
  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(Sext),
        .I3(Shift_Oper),
        .O(shift_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized17_214
   (shift_Res,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Sext,
    Shift_Oper);
  output shift_Res;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Sext;
  input Shift_Oper;

  wire Sext;
  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(Sext),
        .I3(Shift_Oper),
        .O(shift_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized17_217
   (shift_Res,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Sext,
    Shift_Oper);
  output shift_Res;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Sext;
  input Shift_Oper;

  wire Sext;
  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(Sext),
        .I3(Shift_Oper),
        .O(shift_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized17_220
   (shift_Res,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Sext,
    Shift_Oper);
  output shift_Res;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Sext;
  input Shift_Oper;

  wire Sext;
  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(Sext),
        .I3(Shift_Oper),
        .O(shift_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized17_223
   (shift_Res,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Shift_Oper);
  output shift_Res;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input Shift_Oper;

  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(\Using_FPGA.Native_2 ),
        .I3(Shift_Oper),
        .O(shift_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized17_226
   (shift_Res,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Sext,
    Shift_Oper);
  output shift_Res;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Sext;
  input Shift_Oper;

  wire Sext;
  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(Sext),
        .I3(Shift_Oper),
        .O(shift_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized17_229
   (shift_Res,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Sext,
    Shift_Oper);
  output shift_Res;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Sext;
  input Shift_Oper;

  wire Sext;
  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(Sext),
        .I3(Shift_Oper),
        .O(shift_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized17_232
   (shift_Res,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Sext,
    Shift_Oper);
  output shift_Res;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Sext;
  input Shift_Oper;

  wire Sext;
  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(Sext),
        .I3(Shift_Oper),
        .O(shift_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized17_235
   (shift_Res,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Sext,
    Shift_Oper);
  output shift_Res;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Sext;
  input Shift_Oper;

  wire Sext;
  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(Sext),
        .I3(Shift_Oper),
        .O(shift_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized17_238
   (shift_Res,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Shift_Oper);
  output shift_Res;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input Shift_Oper;

  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(\Using_FPGA.Native_2 ),
        .I3(Shift_Oper),
        .O(shift_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized17_241
   (shift_Res,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Shift_Oper);
  output shift_Res;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input Shift_Oper;

  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(\Using_FPGA.Native_2 ),
        .I3(Shift_Oper),
        .O(shift_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized17_244
   (shift_Res,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Shift_Oper);
  output shift_Res;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input Shift_Oper;

  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(\Using_FPGA.Native_2 ),
        .I3(Shift_Oper),
        .O(shift_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized17_247
   (shift_Res,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Shift_Oper);
  output shift_Res;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input Shift_Oper;

  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(\Using_FPGA.Native_2 ),
        .I3(Shift_Oper),
        .O(shift_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized17_250
   (shift_Res,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Shift_Oper);
  output shift_Res;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input Shift_Oper;

  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(\Using_FPGA.Native_2 ),
        .I3(Shift_Oper),
        .O(shift_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized17_253
   (shift_Res,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Shift_Oper);
  output shift_Res;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input Shift_Oper;

  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(\Using_FPGA.Native_2 ),
        .I3(Shift_Oper),
        .O(shift_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized17_256
   (shift_Res,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Shift_Oper);
  output shift_Res;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input Shift_Oper;

  wire Shift_Oper;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFCAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(\Using_FPGA.Native_2 ),
        .I3(Shift_Oper),
        .O(shift_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized19
   (mul_ALU_Res,
    Q,
    \Using_FPGA.Native_0 );
  output mul_ALU_Res;
  input [0:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;

  wire [0:0]Q;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire mul_ALU_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hEFE0)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(Q),
        .I3(\Using_FPGA.Native_0 ),
        .O(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized19_291
   (mul_ALU_Res,
    Q,
    \Using_FPGA.Native_0 );
  output mul_ALU_Res;
  input [0:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;

  wire [0:0]Q;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire mul_ALU_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hEFE0)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(Q),
        .I3(\Using_FPGA.Native_0 ),
        .O(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized19_294
   (mul_ALU_Res,
    Q,
    \Using_FPGA.Native_0 );
  output mul_ALU_Res;
  input [0:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;

  wire [0:0]Q;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire mul_ALU_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hEFE0)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(Q),
        .I3(\Using_FPGA.Native_0 ),
        .O(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized19_297
   (mul_ALU_Res,
    Q,
    \Using_FPGA.Native_0 );
  output mul_ALU_Res;
  input [0:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;

  wire [0:0]Q;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire mul_ALU_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hEFE0)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(Q),
        .I3(\Using_FPGA.Native_0 ),
        .O(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized19_300
   (mul_ALU_Res,
    Q,
    \Using_FPGA.Native_0 );
  output mul_ALU_Res;
  input [0:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;

  wire [0:0]Q;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire mul_ALU_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hEFE0)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(Q),
        .I3(\Using_FPGA.Native_0 ),
        .O(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized19_303
   (mul_ALU_Res,
    Q,
    \Using_FPGA.Native_0 );
  output mul_ALU_Res;
  input [0:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;

  wire [0:0]Q;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire mul_ALU_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hEFE0)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(Q),
        .I3(\Using_FPGA.Native_0 ),
        .O(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized19_306
   (mul_ALU_Res,
    Q,
    \Using_FPGA.Native_0 );
  output mul_ALU_Res;
  input [0:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;

  wire [0:0]Q;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire mul_ALU_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hEFE0)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(Q),
        .I3(\Using_FPGA.Native_0 ),
        .O(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized19_309
   (mul_ALU_Res,
    Q,
    raw_Data_Addr);
  output mul_ALU_Res;
  input [0:0]Q;
  input [0:0]raw_Data_Addr;

  wire [0:0]Q;
  wire mul_ALU_Res;
  wire [0:0]raw_Data_Addr;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hEFE0)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(Q),
        .I3(raw_Data_Addr),
        .O(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized19_312
   (mul_ALU_Res,
    Q,
    raw_Data_Addr);
  output mul_ALU_Res;
  input [0:0]Q;
  input [0:0]raw_Data_Addr;

  wire [0:0]Q;
  wire mul_ALU_Res;
  wire [0:0]raw_Data_Addr;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hEFE0)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(Q),
        .I3(raw_Data_Addr),
        .O(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized19_315
   (mul_ALU_Res,
    Q,
    \Using_FPGA.Native_0 );
  output mul_ALU_Res;
  input [0:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;

  wire [0:0]Q;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire mul_ALU_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hEFE0)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(Q),
        .I3(\Using_FPGA.Native_0 ),
        .O(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized19_318
   (mul_ALU_Res,
    Q,
    \Using_FPGA.Native_0 );
  output mul_ALU_Res;
  input [0:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;

  wire [0:0]Q;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire mul_ALU_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hEFE0)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(Q),
        .I3(\Using_FPGA.Native_0 ),
        .O(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized19_321
   (mul_ALU_Res,
    Q,
    \Using_FPGA.Native_0 );
  output mul_ALU_Res;
  input [0:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;

  wire [0:0]Q;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire mul_ALU_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hEFE0)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(Q),
        .I3(\Using_FPGA.Native_0 ),
        .O(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized19_324
   (mul_ALU_Res,
    Q,
    \Using_FPGA.Native_0 );
  output mul_ALU_Res;
  input [0:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;

  wire [0:0]Q;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire mul_ALU_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hEFE0)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(Q),
        .I3(\Using_FPGA.Native_0 ),
        .O(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized19_327
   (mul_ALU_Res,
    Q,
    \Using_FPGA.Native_0 );
  output mul_ALU_Res;
  input [0:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;

  wire [0:0]Q;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire mul_ALU_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hEFE0)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(Q),
        .I3(\Using_FPGA.Native_0 ),
        .O(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized19_330
   (mul_ALU_Res,
    Q,
    \Using_FPGA.Native_0 );
  output mul_ALU_Res;
  input [0:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;

  wire [0:0]Q;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire mul_ALU_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hEFE0)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(Q),
        .I3(\Using_FPGA.Native_0 ),
        .O(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized19_333
   (mul_ALU_Res,
    Q,
    \Using_FPGA.Native_0 );
  output mul_ALU_Res;
  input [0:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;

  wire [0:0]Q;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire mul_ALU_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hEFE0)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(Q),
        .I3(\Using_FPGA.Native_0 ),
        .O(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized19_336
   (mul_ALU_Res,
    Q,
    \Using_FPGA.Native_0 );
  output mul_ALU_Res;
  input [0:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;

  wire [0:0]Q;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire mul_ALU_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hEFE0)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(Q),
        .I3(\Using_FPGA.Native_0 ),
        .O(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized19_339
   (mul_ALU_Res,
    Q,
    \Using_FPGA.Native_0 );
  output mul_ALU_Res;
  input [0:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;

  wire [0:0]Q;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire mul_ALU_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hEFE0)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(Q),
        .I3(\Using_FPGA.Native_0 ),
        .O(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized19_342
   (mul_ALU_Res,
    Q,
    \Using_FPGA.Native_0 );
  output mul_ALU_Res;
  input [0:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;

  wire [0:0]Q;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire mul_ALU_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hEFE0)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(Q),
        .I3(\Using_FPGA.Native_0 ),
        .O(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized19_345
   (mul_ALU_Res,
    Q,
    \Using_FPGA.Native_0 );
  output mul_ALU_Res;
  input [0:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;

  wire [0:0]Q;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire mul_ALU_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hEFE0)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(Q),
        .I3(\Using_FPGA.Native_0 ),
        .O(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized19_348
   (mul_ALU_Res,
    Q,
    \Using_FPGA.Native_0 );
  output mul_ALU_Res;
  input [0:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;

  wire [0:0]Q;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire mul_ALU_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hEFE0)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(Q),
        .I3(\Using_FPGA.Native_0 ),
        .O(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized19_351
   (mul_ALU_Res,
    Q,
    \Using_FPGA.Native_0 );
  output mul_ALU_Res;
  input [0:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;

  wire [0:0]Q;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire mul_ALU_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hEFE0)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(Q),
        .I3(\Using_FPGA.Native_0 ),
        .O(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized19_354
   (mul_ALU_Res,
    Q,
    \Using_FPGA.Native_0 );
  output mul_ALU_Res;
  input [0:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;

  wire [0:0]Q;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire mul_ALU_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hEFE0)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(Q),
        .I3(\Using_FPGA.Native_0 ),
        .O(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized19_357
   (mul_ALU_Res,
    Q,
    \Using_FPGA.Native_0 );
  output mul_ALU_Res;
  input [0:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;

  wire [0:0]Q;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire mul_ALU_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hEFE0)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(Q),
        .I3(\Using_FPGA.Native_0 ),
        .O(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized19_360
   (mul_ALU_Res,
    Q,
    \Using_FPGA.Native_0 );
  output mul_ALU_Res;
  input [0:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;

  wire [0:0]Q;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire mul_ALU_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hEFE0)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(Q),
        .I3(\Using_FPGA.Native_0 ),
        .O(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized19_363
   (mul_ALU_Res,
    Q,
    \Using_FPGA.Native_0 );
  output mul_ALU_Res;
  input [0:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;

  wire [0:0]Q;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire mul_ALU_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hEFE0)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(Q),
        .I3(\Using_FPGA.Native_0 ),
        .O(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized19_366
   (mul_ALU_Res,
    Q,
    \Using_FPGA.Native_0 );
  output mul_ALU_Res;
  input [0:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;

  wire [0:0]Q;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire mul_ALU_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hEFE0)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(Q),
        .I3(\Using_FPGA.Native_0 ),
        .O(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized19_369
   (mul_ALU_Res,
    Q,
    \Using_FPGA.Native_0 );
  output mul_ALU_Res;
  input [0:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;

  wire [0:0]Q;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire mul_ALU_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hEFE0)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(Q),
        .I3(\Using_FPGA.Native_0 ),
        .O(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized19_372
   (mul_ALU_Res,
    Q,
    \Using_FPGA.Native_0 );
  output mul_ALU_Res;
  input [0:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;

  wire [0:0]Q;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire mul_ALU_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hEFE0)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(Q),
        .I3(\Using_FPGA.Native_0 ),
        .O(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized19_375
   (mul_ALU_Res,
    Q,
    \Using_FPGA.Native_0 );
  output mul_ALU_Res;
  input [0:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;

  wire [0:0]Q;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire mul_ALU_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hEFE0)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(Q),
        .I3(\Using_FPGA.Native_0 ),
        .O(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized19_378
   (mul_ALU_Res,
    Q,
    \Using_FPGA.Native_0 );
  output mul_ALU_Res;
  input [0:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;

  wire [0:0]Q;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire mul_ALU_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hEFE0)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(Q),
        .I3(\Using_FPGA.Native_0 ),
        .O(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized19_381
   (mul_ALU_Res,
    Q,
    \Using_FPGA.Native_0 );
  output mul_ALU_Res;
  input [0:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;

  wire [0:0]Q;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire mul_ALU_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hEFE0)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(Q),
        .I3(\Using_FPGA.Native_0 ),
        .O(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized21
   (S,
    DI,
    pc_I);
  output S;
  input DI;
  input pc_I;

  wire DI;
  wire S;
  wire pc_I;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hF066)) 
    \Using_FPGA.Native 
       (.I0(DI),
        .I1(pc_I),
        .I2(1'b0),
        .I3(1'b0),
        .O(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized21_496
   (S,
    pc_I);
  output S;
  input pc_I;

  wire S;
  wire pc_I;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hF066)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(pc_I),
        .I2(1'b0),
        .I3(1'b0),
        .O(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized21_502
   (S,
    pc_I);
  output S;
  input pc_I;

  wire S;
  wire pc_I;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hF066)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(pc_I),
        .I2(1'b0),
        .I3(1'b0),
        .O(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized21_508
   (S,
    pc_I);
  output S;
  input pc_I;

  wire S;
  wire pc_I;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hF066)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(pc_I),
        .I2(1'b0),
        .I3(1'b0),
        .O(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized21_514
   (S,
    pc_I);
  output S;
  input pc_I;

  wire S;
  wire pc_I;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hF066)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(pc_I),
        .I2(1'b0),
        .I3(1'b0),
        .O(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized21_520
   (S,
    pc_I);
  output S;
  input pc_I;

  wire S;
  wire pc_I;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hF066)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(pc_I),
        .I2(1'b0),
        .I3(1'b0),
        .O(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized21_526
   (S,
    pc_I);
  output S;
  input pc_I;

  wire S;
  wire pc_I;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hF066)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(pc_I),
        .I2(1'b0),
        .I3(1'b0),
        .O(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized21_532
   (S,
    pc_I);
  output S;
  input pc_I;

  wire S;
  wire pc_I;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hF066)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(pc_I),
        .I2(1'b0),
        .I3(1'b0),
        .O(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized21_538
   (S,
    pc_I);
  output S;
  input pc_I;

  wire S;
  wire pc_I;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hF066)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(pc_I),
        .I2(1'b0),
        .I3(1'b0),
        .O(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized21_544
   (S,
    pc_I);
  output S;
  input pc_I;

  wire S;
  wire pc_I;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hF066)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(pc_I),
        .I2(1'b0),
        .I3(1'b0),
        .O(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized21_550
   (S,
    pc_I);
  output S;
  input pc_I;

  wire S;
  wire pc_I;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hF066)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(pc_I),
        .I2(1'b0),
        .I3(1'b0),
        .O(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized21_556
   (S,
    pc_I);
  output S;
  input pc_I;

  wire S;
  wire pc_I;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hF066)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(pc_I),
        .I2(1'b0),
        .I3(1'b0),
        .O(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized21_562
   (S,
    pc_I);
  output S;
  input pc_I;

  wire S;
  wire pc_I;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hF066)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(pc_I),
        .I2(1'b0),
        .I3(1'b0),
        .O(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized21_568
   (xor_Sum,
    pc_I);
  output xor_Sum;
  input pc_I;

  wire pc_I;
  wire xor_Sum;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hF066)) 
    \Using_FPGA.Native 
       (.I0(1'b0),
        .I1(pc_I),
        .I2(1'b0),
        .I3(1'b0),
        .O(xor_Sum));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized23
   (\Using_FPGA.Native_0 ,
    O,
    \Using_FPGA.Native_1 ,
    jump);
  output [0:0]\Using_FPGA.Native_0 ;
  input O;
  input [0:0]\Using_FPGA.Native_1 ;
  input jump;

  wire O;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]\Using_FPGA.Native_1 ;
  wire jump;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hAACA)) 
    \Using_FPGA.Native 
       (.I0(O),
        .I1(\Using_FPGA.Native_1 ),
        .I2(jump),
        .I3(1'b0),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized23_493
   (\Using_FPGA.Native_0 ,
    O,
    \Using_FPGA.Native_1 ,
    jump);
  output [0:0]\Using_FPGA.Native_0 ;
  input O;
  input [0:0]\Using_FPGA.Native_1 ;
  input jump;

  wire O;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]\Using_FPGA.Native_1 ;
  wire jump;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hAACA)) 
    \Using_FPGA.Native 
       (.I0(O),
        .I1(\Using_FPGA.Native_1 ),
        .I2(jump),
        .I3(1'b0),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized23_499
   (\Using_FPGA.Native_0 ,
    O,
    \Using_FPGA.Native_1 ,
    jump);
  output [0:0]\Using_FPGA.Native_0 ;
  input O;
  input [0:0]\Using_FPGA.Native_1 ;
  input jump;

  wire O;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]\Using_FPGA.Native_1 ;
  wire jump;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hAACA)) 
    \Using_FPGA.Native 
       (.I0(O),
        .I1(\Using_FPGA.Native_1 ),
        .I2(jump),
        .I3(1'b0),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized23_505
   (\Using_FPGA.Native_0 ,
    O,
    \Using_FPGA.Native_1 ,
    jump);
  output [0:0]\Using_FPGA.Native_0 ;
  input O;
  input [0:0]\Using_FPGA.Native_1 ;
  input jump;

  wire O;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]\Using_FPGA.Native_1 ;
  wire jump;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hAACA)) 
    \Using_FPGA.Native 
       (.I0(O),
        .I1(\Using_FPGA.Native_1 ),
        .I2(jump),
        .I3(1'b0),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized23_511
   (\Using_FPGA.Native_0 ,
    O,
    \Using_FPGA.Native_1 ,
    jump);
  output [0:0]\Using_FPGA.Native_0 ;
  input O;
  input [0:0]\Using_FPGA.Native_1 ;
  input jump;

  wire O;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]\Using_FPGA.Native_1 ;
  wire jump;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hAACA)) 
    \Using_FPGA.Native 
       (.I0(O),
        .I1(\Using_FPGA.Native_1 ),
        .I2(jump),
        .I3(1'b0),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized23_517
   (\Using_FPGA.Native_0 ,
    O,
    \Using_FPGA.Native_1 ,
    jump);
  output [0:0]\Using_FPGA.Native_0 ;
  input O;
  input [0:0]\Using_FPGA.Native_1 ;
  input jump;

  wire O;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]\Using_FPGA.Native_1 ;
  wire jump;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hAACA)) 
    \Using_FPGA.Native 
       (.I0(O),
        .I1(\Using_FPGA.Native_1 ),
        .I2(jump),
        .I3(1'b0),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized23_523
   (\Using_FPGA.Native_0 ,
    O,
    \Using_FPGA.Native_1 ,
    jump);
  output [0:0]\Using_FPGA.Native_0 ;
  input O;
  input [0:0]\Using_FPGA.Native_1 ;
  input jump;

  wire O;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]\Using_FPGA.Native_1 ;
  wire jump;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hAACA)) 
    \Using_FPGA.Native 
       (.I0(O),
        .I1(\Using_FPGA.Native_1 ),
        .I2(jump),
        .I3(1'b0),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized23_529
   (\Using_FPGA.Native_0 ,
    O,
    \Using_FPGA.Native_1 ,
    jump);
  output [0:0]\Using_FPGA.Native_0 ;
  input O;
  input [0:0]\Using_FPGA.Native_1 ;
  input jump;

  wire O;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]\Using_FPGA.Native_1 ;
  wire jump;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hAACA)) 
    \Using_FPGA.Native 
       (.I0(O),
        .I1(\Using_FPGA.Native_1 ),
        .I2(jump),
        .I3(1'b0),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized23_535
   (\Using_FPGA.Native_0 ,
    O,
    \Using_FPGA.Native_1 ,
    jump);
  output [0:0]\Using_FPGA.Native_0 ;
  input O;
  input [0:0]\Using_FPGA.Native_1 ;
  input jump;

  wire O;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]\Using_FPGA.Native_1 ;
  wire jump;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hAACA)) 
    \Using_FPGA.Native 
       (.I0(O),
        .I1(\Using_FPGA.Native_1 ),
        .I2(jump),
        .I3(1'b0),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized23_541
   (\Using_FPGA.Native_0 ,
    O,
    \Using_FPGA.Native_1 ,
    jump);
  output [0:0]\Using_FPGA.Native_0 ;
  input O;
  input [0:0]\Using_FPGA.Native_1 ;
  input jump;

  wire O;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]\Using_FPGA.Native_1 ;
  wire jump;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hAACA)) 
    \Using_FPGA.Native 
       (.I0(O),
        .I1(\Using_FPGA.Native_1 ),
        .I2(jump),
        .I3(1'b0),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized23_547
   (\Using_FPGA.Native_0 ,
    O,
    \Using_FPGA.Native_1 ,
    jump);
  output [0:0]\Using_FPGA.Native_0 ;
  input O;
  input [0:0]\Using_FPGA.Native_1 ;
  input jump;

  wire O;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]\Using_FPGA.Native_1 ;
  wire jump;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hAACA)) 
    \Using_FPGA.Native 
       (.I0(O),
        .I1(\Using_FPGA.Native_1 ),
        .I2(jump),
        .I3(1'b0),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized23_553
   (\Using_FPGA.Native_0 ,
    O,
    \Using_FPGA.Native_1 ,
    jump);
  output [0:0]\Using_FPGA.Native_0 ;
  input O;
  input [0:0]\Using_FPGA.Native_1 ;
  input jump;

  wire O;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]\Using_FPGA.Native_1 ;
  wire jump;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hAACA)) 
    \Using_FPGA.Native 
       (.I0(O),
        .I1(\Using_FPGA.Native_1 ),
        .I2(jump),
        .I3(1'b0),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized23_559
   (\Using_FPGA.Native_0 ,
    O,
    \Using_FPGA.Native_1 ,
    jump);
  output [0:0]\Using_FPGA.Native_0 ;
  input O;
  input [0:0]\Using_FPGA.Native_1 ;
  input jump;

  wire O;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]\Using_FPGA.Native_1 ;
  wire jump;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hAACA)) 
    \Using_FPGA.Native 
       (.I0(O),
        .I1(\Using_FPGA.Native_1 ),
        .I2(jump),
        .I3(1'b0),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized23_565
   (\Using_FPGA.Native_0 ,
    pc_Sum,
    \Using_FPGA.Native_1 ,
    jump);
  output [0:0]\Using_FPGA.Native_0 ;
  input pc_Sum;
  input [0:0]\Using_FPGA.Native_1 ;
  input jump;

  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]\Using_FPGA.Native_1 ;
  wire jump;
  wire pc_Sum;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hAACA)) 
    \Using_FPGA.Native 
       (.I0(pc_Sum),
        .I1(\Using_FPGA.Native_1 ),
        .I2(jump),
        .I3(1'b0),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized3
   (opsel1_SPR_Select_2_1,
    instr_OF_raw);
  output opsel1_SPR_Select_2_1;
  input [3:0]instr_OF_raw;

  wire [3:0]instr_OF_raw;
  wire opsel1_SPR_Select_2_1;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h0200)) 
    \Using_FPGA.Native 
       (.I0(instr_OF_raw[3]),
        .I1(instr_OF_raw[2]),
        .I2(instr_OF_raw[1]),
        .I3(instr_OF_raw[0]),
        .O(opsel1_SPR_Select_2_1));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized3_87
   (force_jump2,
    ex_Valid,
    \Using_FPGA.Native_0 ,
    force2);
  output force_jump2;
  input ex_Valid;
  input \Using_FPGA.Native_0 ;
  input force2;

  wire \Using_FPGA.Native_0 ;
  wire ex_Valid;
  wire force2;
  wire force_jump2;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h0200)) 
    \Using_FPGA.Native 
       (.I0(ex_Valid),
        .I1(\Using_FPGA.Native_0 ),
        .I2(1'b0),
        .I3(force2),
        .O(force_jump2));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized5
   (res_forward1_1,
    reg1_Addr,
    Q);
  output res_forward1_1;
  input [1:0]reg1_Addr;
  input [1:0]Q;

  wire [1:0]Q;
  wire [1:0]reg1_Addr;
  wire res_forward1_1;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h8421)) 
    \Using_FPGA.Native 
       (.I0(reg1_Addr[1]),
        .I1(reg1_Addr[0]),
        .I2(Q[1]),
        .I3(Q[0]),
        .O(res_forward1_1));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized5_74
   (res_forward1_2,
    reg1_Addr,
    Q,
    \Using_FPGA.Native_0 );
  output res_forward1_2;
  input [1:0]reg1_Addr;
  input [0:0]Q;
  input \Using_FPGA.Native_0 ;

  wire [0:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire [1:0]reg1_Addr;
  wire res_forward1_2;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h8421)) 
    \Using_FPGA.Native 
       (.I0(reg1_Addr[1]),
        .I1(reg1_Addr[0]),
        .I2(Q),
        .I3(\Using_FPGA.Native_0 ),
        .O(res_forward1_2));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized5_75
   (res_forward2_1,
    imm_Value,
    Q);
  output res_forward2_1;
  input [1:0]imm_Value;
  input [1:0]Q;

  wire [1:0]Q;
  wire [1:0]imm_Value;
  wire res_forward2_1;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h8421)) 
    \Using_FPGA.Native 
       (.I0(imm_Value[1]),
        .I1(imm_Value[0]),
        .I2(Q[1]),
        .I3(Q[0]),
        .O(res_forward2_1));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized5_76
   (res_forward2_2,
    imm_Value,
    Q,
    \Using_FPGA.Native_0 );
  output res_forward2_2;
  input [1:0]imm_Value;
  input [0:0]Q;
  input \Using_FPGA.Native_0 ;

  wire [0:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire [1:0]imm_Value;
  wire res_forward2_2;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h8421)) 
    \Using_FPGA.Native 
       (.I0(imm_Value[1]),
        .I1(imm_Value[0]),
        .I2(Q),
        .I3(\Using_FPGA.Native_0 ),
        .O(res_forward2_2));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized7
   (res_Forward1,
    res_forward1_1,
    res_forward1_2,
    res_forward1_3,
    write_Reg_I_S);
  output res_Forward1;
  input res_forward1_1;
  input res_forward1_2;
  input res_forward1_3;
  input write_Reg_I_S;

  wire res_Forward1;
  wire res_forward1_1;
  wire res_forward1_2;
  wire res_forward1_3;
  wire write_Reg_I_S;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h8000)) 
    \Using_FPGA.Native 
       (.I0(res_forward1_1),
        .I1(res_forward1_2),
        .I2(res_forward1_3),
        .I3(write_Reg_I_S),
        .O(res_Forward1));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized7_78
   (res_Forward2,
    res_forward2_1,
    res_forward2_2,
    res_forward2_3,
    write_Reg_I_S);
  output res_Forward2;
  input res_forward2_1;
  input res_forward2_2;
  input res_forward2_3;
  input write_Reg_I_S;

  wire res_Forward2;
  wire res_forward2_1;
  wire res_forward2_2;
  wire res_forward2_3;
  wire write_Reg_I_S;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h8000)) 
    \Using_FPGA.Native 
       (.I0(res_forward2_1),
        .I1(res_forward2_2),
        .I2(res_forward2_3),
        .I3(write_Reg_I_S),
        .O(res_Forward2));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized9
   (correct_Carry_Select,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 );
  output correct_Carry_Select;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;

  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire correct_Carry_Select;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h00F0)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(\Using_FPGA.Native_2 ),
        .I3(1'b0),
        .O(correct_Carry_Select));
endmodule

module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT5
   (of_PipeRun_Select,
    mul_Executing,
    of_Valid_Raw,
    I291_out,
    \Using_FPGA.Native_0 ,
    dbg_pause);
  output of_PipeRun_Select;
  input mul_Executing;
  input of_Valid_Raw;
  input I291_out;
  input \Using_FPGA.Native_0 ;
  input dbg_pause;

  wire I291_out;
  wire \Using_FPGA.Native_0 ;
  wire dbg_pause;
  wire mul_Executing;
  wire of_PipeRun_Select;
  wire of_Valid_Raw;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT5 #(
    .INIT(32'h00000040)) 
    \Using_FPGA.Native 
       (.I0(mul_Executing),
        .I1(of_Valid_Raw),
        .I2(I291_out),
        .I3(\Using_FPGA.Native_0 ),
        .I4(dbg_pause),
        .O(of_PipeRun_Select));
endmodule

(* ORIG_REF_NAME = "MB_LUT5" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT5__parameterized1
   (of_PipeRun_without_dready,
    I291_out,
    mul_Executing,
    of_Valid_Raw,
    \Using_FPGA.Native_0 ,
    dbg_pause,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 );
  output of_PipeRun_without_dready;
  output I291_out;
  input mul_Executing;
  input of_Valid_Raw;
  input \Using_FPGA.Native_0 ;
  input dbg_pause;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;

  wire I291_out;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire dbg_pause;
  wire mul_Executing;
  wire of_PipeRun_without_dready;
  wire of_Valid_Raw;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT5 #(
    .INIT(32'h00000004)) 
    \Using_FPGA.Native 
       (.I0(mul_Executing),
        .I1(of_Valid_Raw),
        .I2(I291_out),
        .I3(\Using_FPGA.Native_0 ),
        .I4(dbg_pause),
        .O(of_PipeRun_without_dready));
  LUT2 #(
    .INIT(4'h2)) 
    \Using_FPGA.Native_i_1__56 
       (.I0(\Using_FPGA.Native_1 ),
        .I1(\Using_FPGA.Native_2 ),
        .O(I291_out));
endmodule

module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2
   (op1_Reg,
    op1_I,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    opsel1_SPR);
  output op1_Reg;
  output op1_I;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input opsel1_SPR;

  wire [0:0]Reg1_Data;
  wire [0:0]ex_Result;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(ex_Result),
        .I2(res_Forward1),
        .I3(1'b0),
        .I4(1'b0),
        .I5(opsel1_SPR),
        .O5(op1_Reg),
        .O6(op1_I));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2_598
   (op1_Reg,
    op1_I,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    opsel1_SPR);
  output op1_Reg;
  output op1_I;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input opsel1_SPR;

  wire [0:0]Reg1_Data;
  wire [0:0]ex_Result;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(ex_Result),
        .I2(res_Forward1),
        .I3(1'b0),
        .I4(1'b0),
        .I5(opsel1_SPR),
        .O5(op1_Reg),
        .O6(op1_I));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2_602
   (op1_Reg,
    op1_I,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    opsel1_SPR);
  output op1_Reg;
  output op1_I;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input opsel1_SPR;

  wire [0:0]Reg1_Data;
  wire [0:0]ex_Result;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(ex_Result),
        .I2(res_Forward1),
        .I3(1'b0),
        .I4(1'b0),
        .I5(opsel1_SPR),
        .O5(op1_Reg),
        .O6(op1_I));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2_606
   (op1_Reg,
    op1_I,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    opsel1_SPR);
  output op1_Reg;
  output op1_I;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input opsel1_SPR;

  wire [0:0]Reg1_Data;
  wire [0:0]ex_Result;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(ex_Result),
        .I2(res_Forward1),
        .I3(1'b0),
        .I4(1'b0),
        .I5(opsel1_SPR),
        .O5(op1_Reg),
        .O6(op1_I));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2_610
   (op1_Reg,
    op1_I,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    opsel1_SPR);
  output op1_Reg;
  output op1_I;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input opsel1_SPR;

  wire [0:0]Reg1_Data;
  wire [0:0]ex_Result;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(ex_Result),
        .I2(res_Forward1),
        .I3(1'b0),
        .I4(1'b0),
        .I5(opsel1_SPR),
        .O5(op1_Reg),
        .O6(op1_I));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2_614
   (op1_Reg,
    op1_I,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    opsel1_SPR);
  output op1_Reg;
  output op1_I;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input opsel1_SPR;

  wire [0:0]Reg1_Data;
  wire [0:0]ex_Result;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(ex_Result),
        .I2(res_Forward1),
        .I3(1'b0),
        .I4(1'b0),
        .I5(opsel1_SPR),
        .O5(op1_Reg),
        .O6(op1_I));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2_618
   (op1_Reg,
    op1_I,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    opsel1_SPR);
  output op1_Reg;
  output op1_I;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input opsel1_SPR;

  wire [0:0]Reg1_Data;
  wire [0:0]ex_Result;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(ex_Result),
        .I2(res_Forward1),
        .I3(1'b0),
        .I4(1'b0),
        .I5(opsel1_SPR),
        .O5(op1_Reg),
        .O6(op1_I));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2_622
   (op1_Reg,
    op1_I,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    opsel1_SPR);
  output op1_Reg;
  output op1_I;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input opsel1_SPR;

  wire [0:0]Reg1_Data;
  wire [0:0]ex_Result;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(ex_Result),
        .I2(res_Forward1),
        .I3(1'b0),
        .I4(1'b0),
        .I5(opsel1_SPR),
        .O5(op1_Reg),
        .O6(op1_I));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2_626
   (op1_Reg,
    op1_I,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    I3,
    opsel1_SPR);
  output op1_Reg;
  output op1_I;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input I3;
  input opsel1_SPR;

  wire I3;
  wire [0:0]Reg1_Data;
  wire [0:0]ex_Result;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(ex_Result),
        .I2(res_Forward1),
        .I3(I3),
        .I4(1'b0),
        .I5(opsel1_SPR),
        .O5(op1_Reg),
        .O6(op1_I));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2_630
   (op1_Reg,
    op1_I,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    opsel1_SPR);
  output op1_Reg;
  output op1_I;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input opsel1_SPR;

  wire [0:0]Reg1_Data;
  wire [0:0]ex_Result;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(ex_Result),
        .I2(res_Forward1),
        .I3(1'b0),
        .I4(1'b0),
        .I5(opsel1_SPR),
        .O5(op1_Reg),
        .O6(op1_I));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2_634
   (op1_Reg,
    op1_I,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    I3_0,
    opsel1_SPR);
  output op1_Reg;
  output op1_I;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input I3_0;
  input opsel1_SPR;

  wire I3_0;
  wire [0:0]Reg1_Data;
  wire [0:0]ex_Result;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(ex_Result),
        .I2(res_Forward1),
        .I3(I3_0),
        .I4(1'b0),
        .I5(opsel1_SPR),
        .O5(op1_Reg),
        .O6(op1_I));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2_638
   (op1_Reg,
    op1_I,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    I3_1,
    opsel1_SPR);
  output op1_Reg;
  output op1_I;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input I3_1;
  input opsel1_SPR;

  wire I3_1;
  wire [0:0]Reg1_Data;
  wire [0:0]ex_Result;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(ex_Result),
        .I2(res_Forward1),
        .I3(I3_1),
        .I4(1'b0),
        .I5(opsel1_SPR),
        .O5(op1_Reg),
        .O6(op1_I));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2_642
   (op1_Reg,
    op1_I,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    I3_2,
    opsel1_SPR);
  output op1_Reg;
  output op1_I;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input I3_2;
  input opsel1_SPR;

  wire I3_2;
  wire [0:0]Reg1_Data;
  wire [0:0]ex_Result;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(ex_Result),
        .I2(res_Forward1),
        .I3(I3_2),
        .I4(1'b0),
        .I5(opsel1_SPR),
        .O5(op1_Reg),
        .O6(op1_I));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2_646
   (op1_Reg,
    op1_I,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    I3_3,
    opsel1_SPR);
  output op1_Reg;
  output op1_I;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input I3_3;
  input opsel1_SPR;

  wire I3_3;
  wire [0:0]Reg1_Data;
  wire [0:0]ex_Result;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(ex_Result),
        .I2(res_Forward1),
        .I3(I3_3),
        .I4(1'b0),
        .I5(opsel1_SPR),
        .O5(op1_Reg),
        .O6(op1_I));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2_650
   (op1_Reg,
    op1_I,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    I3_4,
    opsel1_SPR);
  output op1_Reg;
  output op1_I;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input I3_4;
  input opsel1_SPR;

  wire I3_4;
  wire [0:0]Reg1_Data;
  wire [0:0]ex_Result;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(ex_Result),
        .I2(res_Forward1),
        .I3(I3_4),
        .I4(1'b0),
        .I5(opsel1_SPR),
        .O5(op1_Reg),
        .O6(op1_I));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2_654
   (op1_Reg,
    op1_I,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    I3_5,
    opsel1_SPR);
  output op1_Reg;
  output op1_I;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input I3_5;
  input opsel1_SPR;

  wire I3_5;
  wire [0:0]Reg1_Data;
  wire [0:0]ex_Result;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(ex_Result),
        .I2(res_Forward1),
        .I3(I3_5),
        .I4(1'b0),
        .I5(opsel1_SPR),
        .O5(op1_Reg),
        .O6(op1_I));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2_658
   (op1_Reg,
    op1_I,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    Address,
    opsel1_SPR);
  output op1_Reg;
  output op1_I;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input [0:0]Address;
  input opsel1_SPR;

  wire [0:0]Address;
  wire [0:0]Reg1_Data;
  wire [0:0]ex_Result;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(ex_Result),
        .I2(res_Forward1),
        .I3(Address),
        .I4(1'b0),
        .I5(opsel1_SPR),
        .O5(op1_Reg),
        .O6(op1_I));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2_662
   (op1_Reg,
    op1_I,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    Address,
    opsel1_SPR);
  output op1_Reg;
  output op1_I;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input [0:0]Address;
  input opsel1_SPR;

  wire [0:0]Address;
  wire [0:0]Reg1_Data;
  wire [0:0]ex_Result;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(ex_Result),
        .I2(res_Forward1),
        .I3(Address),
        .I4(1'b0),
        .I5(opsel1_SPR),
        .O5(op1_Reg),
        .O6(op1_I));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2_666
   (op1_Reg,
    op1_I,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    Address,
    opsel1_SPR);
  output op1_Reg;
  output op1_I;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input [0:0]Address;
  input opsel1_SPR;

  wire [0:0]Address;
  wire [0:0]Reg1_Data;
  wire [0:0]ex_Result;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(ex_Result),
        .I2(res_Forward1),
        .I3(Address),
        .I4(1'b0),
        .I5(opsel1_SPR),
        .O5(op1_Reg),
        .O6(op1_I));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2_670
   (op1_Reg,
    op1_I,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    Address,
    opsel1_SPR);
  output op1_Reg;
  output op1_I;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input [0:0]Address;
  input opsel1_SPR;

  wire [0:0]Address;
  wire [0:0]Reg1_Data;
  wire [0:0]ex_Result;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(ex_Result),
        .I2(res_Forward1),
        .I3(Address),
        .I4(1'b0),
        .I5(opsel1_SPR),
        .O5(op1_Reg),
        .O6(op1_I));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2_674
   (op1_Reg,
    op1_I,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    opsel1_SPR);
  output op1_Reg;
  output op1_I;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input opsel1_SPR;

  wire [0:0]Reg1_Data;
  wire [0:0]ex_Result;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(ex_Result),
        .I2(res_Forward1),
        .I3(1'b0),
        .I4(1'b0),
        .I5(opsel1_SPR),
        .O5(op1_Reg),
        .O6(op1_I));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2_678
   (op1_Reg,
    op1_I,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    Address,
    opsel1_SPR);
  output op1_Reg;
  output op1_I;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input [0:0]Address;
  input opsel1_SPR;

  wire [0:0]Address;
  wire [0:0]Reg1_Data;
  wire [0:0]ex_Result;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(ex_Result),
        .I2(res_Forward1),
        .I3(Address),
        .I4(1'b0),
        .I5(opsel1_SPR),
        .O5(op1_Reg),
        .O6(op1_I));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2_682
   (op1_Reg,
    op1_I,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    Address,
    opsel1_SPR);
  output op1_Reg;
  output op1_I;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input [0:0]Address;
  input opsel1_SPR;

  wire [0:0]Address;
  wire [0:0]Reg1_Data;
  wire [0:0]ex_Result;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(ex_Result),
        .I2(res_Forward1),
        .I3(Address),
        .I4(1'b0),
        .I5(opsel1_SPR),
        .O5(op1_Reg),
        .O6(op1_I));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2_686
   (op1_Reg,
    op1_I,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    Address,
    opsel1_SPR);
  output op1_Reg;
  output op1_I;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input [0:0]Address;
  input opsel1_SPR;

  wire [0:0]Address;
  wire [0:0]Reg1_Data;
  wire [0:0]ex_Result;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(ex_Result),
        .I2(res_Forward1),
        .I3(Address),
        .I4(1'b0),
        .I5(opsel1_SPR),
        .O5(op1_Reg),
        .O6(op1_I));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2_690
   (op1_Reg,
    op1_I,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    Address,
    opsel1_SPR);
  output op1_Reg;
  output op1_I;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input [0:0]Address;
  input opsel1_SPR;

  wire [0:0]Address;
  wire [0:0]Reg1_Data;
  wire [0:0]ex_Result;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(ex_Result),
        .I2(res_Forward1),
        .I3(Address),
        .I4(1'b0),
        .I5(opsel1_SPR),
        .O5(op1_Reg),
        .O6(op1_I));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2_694
   (op1_Reg,
    op1_I,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    opsel1_SPR);
  output op1_Reg;
  output op1_I;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input opsel1_SPR;

  wire [0:0]Reg1_Data;
  wire [0:0]ex_Result;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(ex_Result),
        .I2(res_Forward1),
        .I3(1'b0),
        .I4(1'b0),
        .I5(opsel1_SPR),
        .O5(op1_Reg),
        .O6(op1_I));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2_698
   (op1_Reg,
    op1_I,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    opsel1_SPR);
  output op1_Reg;
  output op1_I;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input opsel1_SPR;

  wire [0:0]Reg1_Data;
  wire [0:0]ex_Result;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(ex_Result),
        .I2(res_Forward1),
        .I3(1'b0),
        .I4(1'b0),
        .I5(opsel1_SPR),
        .O5(op1_Reg),
        .O6(op1_I));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2_702
   (op1_Reg,
    op1_I,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    opsel1_SPR);
  output op1_Reg;
  output op1_I;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input opsel1_SPR;

  wire [0:0]Reg1_Data;
  wire [0:0]ex_Result;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(ex_Result),
        .I2(res_Forward1),
        .I3(1'b0),
        .I4(1'b0),
        .I5(opsel1_SPR),
        .O5(op1_Reg),
        .O6(op1_I));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2_706
   (op1_Reg,
    op1_I,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    opsel1_SPR);
  output op1_Reg;
  output op1_I;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input opsel1_SPR;

  wire [0:0]Reg1_Data;
  wire [0:0]ex_Result;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(ex_Result),
        .I2(res_Forward1),
        .I3(1'b0),
        .I4(1'b0),
        .I5(opsel1_SPR),
        .O5(op1_Reg),
        .O6(op1_I));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2_710
   (op1_Reg,
    op1_I,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    opsel1_SPR);
  output op1_Reg;
  output op1_I;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input opsel1_SPR;

  wire [0:0]Reg1_Data;
  wire [0:0]ex_Result;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(ex_Result),
        .I2(res_Forward1),
        .I3(1'b0),
        .I4(1'b0),
        .I5(opsel1_SPR),
        .O5(op1_Reg),
        .O6(op1_I));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2_714
   (op1_Reg,
    op1_I,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    opsel1_SPR);
  output op1_Reg;
  output op1_I;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input opsel1_SPR;

  wire [0:0]Reg1_Data;
  wire [0:0]ex_Result;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(ex_Result),
        .I2(res_Forward1),
        .I3(1'b0),
        .I4(1'b0),
        .I5(opsel1_SPR),
        .O5(op1_Reg),
        .O6(op1_I));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2_718
   (op1_Reg,
    op1_I,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    I3_6,
    opsel1_SPR);
  output op1_Reg;
  output op1_I;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input I3_6;
  input opsel1_SPR;

  wire I3_6;
  wire [0:0]Reg1_Data;
  wire [0:0]ex_Result;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00FF00CACACACA)) 
    \Using_FPGA.Native 
       (.I0(Reg1_Data),
        .I1(ex_Result),
        .I2(res_Forward1),
        .I3(I3_6),
        .I4(1'b0),
        .I5(opsel1_SPR),
        .O5(op1_Reg),
        .O6(op1_I));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized10
   (D,
    byte_selects_1,
    byte_selects_0,
    isbyte,
    isdoublet);
  output [1:0]D;
  input byte_selects_1;
  input byte_selects_0;
  input isbyte;
  input isdoublet;

  wire [1:0]D;
  wire byte_selects_0;
  wire byte_selects_1;
  wire isbyte;
  wire isdoublet;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h151F151F454F454F)) 
    \Using_FPGA.Native 
       (.I0(byte_selects_1),
        .I1(byte_selects_0),
        .I2(isbyte),
        .I3(isdoublet),
        .I4(1'b0),
        .I5(1'b1),
        .O5(D[0]),
        .O6(D[1]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized12
   (D,
    low_addr_i_0,
    low_addr_i_1,
    isbyte,
    isdoublet);
  output [1:0]D;
  input low_addr_i_0;
  input low_addr_i_1;
  input isbyte;
  input isdoublet;

  wire [1:0]D;
  wire isbyte;
  wire isdoublet;
  wire low_addr_i_0;
  wire low_addr_i_1;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h0CC00CC000A000A0)) 
    \Using_FPGA.Native 
       (.I0(low_addr_i_0),
        .I1(low_addr_i_1),
        .I2(isbyte),
        .I3(isdoublet),
        .I4(1'b0),
        .I5(1'b1),
        .O5(D[0]),
        .O6(D[1]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized14
   (sel_Write_Mux_MSB,
    isbyte,
    isdoublet);
  output [1:0]sel_Write_Mux_MSB;
  input isbyte;
  input isdoublet;

  wire isbyte;
  wire isdoublet;
  wire [1:0]sel_Write_Mux_MSB;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h1111111155555555)) 
    \Using_FPGA.Native 
       (.I0(isbyte),
        .I1(isdoublet),
        .I2(1'b0),
        .I3(1'b0),
        .I4(1'b0),
        .I5(1'b1),
        .O5(sel_Write_Mux_MSB[0]),
        .O6(sel_Write_Mux_MSB[1]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized16
   (Y,
    Instr,
    LOCKSTEP_Master_Out);
  output [1:0]Y;
  input [1:0]Instr;
  input [2:0]LOCKSTEP_Master_Out;

  wire [1:0]Instr;
  wire [2:0]LOCKSTEP_Master_Out;
  wire [1:0]Y;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(Instr[1]),
        .I1(LOCKSTEP_Master_Out[1]),
        .I2(Instr[0]),
        .I3(LOCKSTEP_Master_Out[0]),
        .I4(LOCKSTEP_Master_Out[2]),
        .I5(1'b1),
        .O5(Y[1]),
        .O6(Y[0]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized16_10
   (Y,
    Instr,
    LOCKSTEP_Master_Out);
  output [1:0]Y;
  input [1:0]Instr;
  input [2:0]LOCKSTEP_Master_Out;

  wire [1:0]Instr;
  wire [2:0]LOCKSTEP_Master_Out;
  wire [1:0]Y;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(Instr[1]),
        .I1(LOCKSTEP_Master_Out[1]),
        .I2(Instr[0]),
        .I3(LOCKSTEP_Master_Out[0]),
        .I4(LOCKSTEP_Master_Out[2]),
        .I5(1'b1),
        .O5(Y[1]),
        .O6(Y[0]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized16_11
   (Y,
    Instr,
    LOCKSTEP_Master_Out);
  output [1:0]Y;
  input [1:0]Instr;
  input [2:0]LOCKSTEP_Master_Out;

  wire [1:0]Instr;
  wire [2:0]LOCKSTEP_Master_Out;
  wire [1:0]Y;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(Instr[1]),
        .I1(LOCKSTEP_Master_Out[1]),
        .I2(Instr[0]),
        .I3(LOCKSTEP_Master_Out[0]),
        .I4(LOCKSTEP_Master_Out[2]),
        .I5(1'b1),
        .O5(Y[1]),
        .O6(Y[0]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized16_12
   (Y,
    Instr,
    LOCKSTEP_Master_Out);
  output [1:0]Y;
  input [1:0]Instr;
  input [2:0]LOCKSTEP_Master_Out;

  wire [1:0]Instr;
  wire [2:0]LOCKSTEP_Master_Out;
  wire [1:0]Y;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(Instr[1]),
        .I1(LOCKSTEP_Master_Out[1]),
        .I2(Instr[0]),
        .I3(LOCKSTEP_Master_Out[0]),
        .I4(LOCKSTEP_Master_Out[2]),
        .I5(1'b1),
        .O5(Y[1]),
        .O6(Y[0]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized16_13
   (Y,
    Instr,
    LOCKSTEP_Master_Out);
  output [1:0]Y;
  input [1:0]Instr;
  input [2:0]LOCKSTEP_Master_Out;

  wire [1:0]Instr;
  wire [2:0]LOCKSTEP_Master_Out;
  wire [1:0]Y;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(Instr[1]),
        .I1(LOCKSTEP_Master_Out[1]),
        .I2(Instr[0]),
        .I3(LOCKSTEP_Master_Out[0]),
        .I4(LOCKSTEP_Master_Out[2]),
        .I5(1'b1),
        .O5(Y[1]),
        .O6(Y[0]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized16_14
   (Y,
    Instr,
    LOCKSTEP_Master_Out);
  output [1:0]Y;
  input [1:0]Instr;
  input [2:0]LOCKSTEP_Master_Out;

  wire [1:0]Instr;
  wire [2:0]LOCKSTEP_Master_Out;
  wire [1:0]Y;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(Instr[1]),
        .I1(LOCKSTEP_Master_Out[1]),
        .I2(Instr[0]),
        .I3(LOCKSTEP_Master_Out[0]),
        .I4(LOCKSTEP_Master_Out[2]),
        .I5(1'b1),
        .O5(Y[1]),
        .O6(Y[0]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized16_15
   (Y,
    Instr,
    LOCKSTEP_Master_Out);
  output [1:0]Y;
  input [1:0]Instr;
  input [2:0]LOCKSTEP_Master_Out;

  wire [1:0]Instr;
  wire [2:0]LOCKSTEP_Master_Out;
  wire [1:0]Y;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(Instr[1]),
        .I1(LOCKSTEP_Master_Out[1]),
        .I2(Instr[0]),
        .I3(LOCKSTEP_Master_Out[0]),
        .I4(LOCKSTEP_Master_Out[2]),
        .I5(1'b1),
        .O5(Y[1]),
        .O6(Y[0]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized16_16
   (Y,
    Instr,
    LOCKSTEP_Master_Out);
  output [1:0]Y;
  input [1:0]Instr;
  input [2:0]LOCKSTEP_Master_Out;

  wire [1:0]Instr;
  wire [2:0]LOCKSTEP_Master_Out;
  wire [1:0]Y;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(Instr[1]),
        .I1(LOCKSTEP_Master_Out[1]),
        .I2(Instr[0]),
        .I3(LOCKSTEP_Master_Out[0]),
        .I4(LOCKSTEP_Master_Out[2]),
        .I5(1'b1),
        .O5(Y[1]),
        .O6(Y[0]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized16_17
   (Y,
    Instr,
    LOCKSTEP_Master_Out);
  output [1:0]Y;
  input [1:0]Instr;
  input [2:0]LOCKSTEP_Master_Out;

  wire [1:0]Instr;
  wire [2:0]LOCKSTEP_Master_Out;
  wire [1:0]Y;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(Instr[1]),
        .I1(LOCKSTEP_Master_Out[1]),
        .I2(Instr[0]),
        .I3(LOCKSTEP_Master_Out[0]),
        .I4(LOCKSTEP_Master_Out[2]),
        .I5(1'b1),
        .O5(Y[1]),
        .O6(Y[0]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized16_3
   (Y,
    Instr,
    LOCKSTEP_Master_Out);
  output [1:0]Y;
  input [1:0]Instr;
  input [2:0]LOCKSTEP_Master_Out;

  wire [1:0]Instr;
  wire [2:0]LOCKSTEP_Master_Out;
  wire [1:0]Y;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(Instr[1]),
        .I1(LOCKSTEP_Master_Out[1]),
        .I2(Instr[0]),
        .I3(LOCKSTEP_Master_Out[0]),
        .I4(LOCKSTEP_Master_Out[2]),
        .I5(1'b1),
        .O5(Y[1]),
        .O6(Y[0]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized16_4
   (Y,
    Instr,
    LOCKSTEP_Master_Out);
  output [1:0]Y;
  input [1:0]Instr;
  input [2:0]LOCKSTEP_Master_Out;

  wire [1:0]Instr;
  wire [2:0]LOCKSTEP_Master_Out;
  wire [1:0]Y;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(Instr[1]),
        .I1(LOCKSTEP_Master_Out[1]),
        .I2(Instr[0]),
        .I3(LOCKSTEP_Master_Out[0]),
        .I4(LOCKSTEP_Master_Out[2]),
        .I5(1'b1),
        .O5(Y[1]),
        .O6(Y[0]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized16_5
   (Y,
    Instr,
    LOCKSTEP_Master_Out);
  output [1:0]Y;
  input [1:0]Instr;
  input [2:0]LOCKSTEP_Master_Out;

  wire [1:0]Instr;
  wire [2:0]LOCKSTEP_Master_Out;
  wire [1:0]Y;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(Instr[1]),
        .I1(LOCKSTEP_Master_Out[1]),
        .I2(Instr[0]),
        .I3(LOCKSTEP_Master_Out[0]),
        .I4(LOCKSTEP_Master_Out[2]),
        .I5(1'b1),
        .O5(Y[1]),
        .O6(Y[0]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized16_6
   (Y,
    Instr,
    LOCKSTEP_Master_Out);
  output [1:0]Y;
  input [1:0]Instr;
  input [2:0]LOCKSTEP_Master_Out;

  wire [1:0]Instr;
  wire [2:0]LOCKSTEP_Master_Out;
  wire [1:0]Y;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(Instr[1]),
        .I1(LOCKSTEP_Master_Out[1]),
        .I2(Instr[0]),
        .I3(LOCKSTEP_Master_Out[0]),
        .I4(LOCKSTEP_Master_Out[2]),
        .I5(1'b1),
        .O5(Y[1]),
        .O6(Y[0]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized16_7
   (Y,
    Instr,
    LOCKSTEP_Master_Out);
  output [1:0]Y;
  input [1:0]Instr;
  input [2:0]LOCKSTEP_Master_Out;

  wire [1:0]Instr;
  wire [2:0]LOCKSTEP_Master_Out;
  wire [1:0]Y;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(Instr[1]),
        .I1(LOCKSTEP_Master_Out[1]),
        .I2(Instr[0]),
        .I3(LOCKSTEP_Master_Out[0]),
        .I4(LOCKSTEP_Master_Out[2]),
        .I5(1'b1),
        .O5(Y[1]),
        .O6(Y[0]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized16_8
   (Y,
    Instr,
    LOCKSTEP_Master_Out);
  output [1:0]Y;
  input [1:0]Instr;
  input [2:0]LOCKSTEP_Master_Out;

  wire [1:0]Instr;
  wire [2:0]LOCKSTEP_Master_Out;
  wire [1:0]Y;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(Instr[1]),
        .I1(LOCKSTEP_Master_Out[1]),
        .I2(Instr[0]),
        .I3(LOCKSTEP_Master_Out[0]),
        .I4(LOCKSTEP_Master_Out[2]),
        .I5(1'b1),
        .O5(Y[1]),
        .O6(Y[0]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized16_822
   (D,
    \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[15] ,
    isbyte);
  output [1:0]D;
  input [3:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[15] ;
  input isbyte;

  wire [3:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[15] ;
  wire [1:0]D;
  wire isbyte;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[15] [3]),
        .I1(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[15] [1]),
        .I2(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[15] [2]),
        .I3(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[15] [0]),
        .I4(isbyte),
        .I5(1'b1),
        .O5(D[1]),
        .O6(D[0]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized16_823
   (D,
    \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[14] ,
    isbyte);
  output [1:0]D;
  input [3:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[14] ;
  input isbyte;

  wire [3:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[14] ;
  wire [1:0]D;
  wire isbyte;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[14] [3]),
        .I1(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[14] [1]),
        .I2(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[14] [2]),
        .I3(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[14] [0]),
        .I4(isbyte),
        .I5(1'b1),
        .O5(D[1]),
        .O6(D[0]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized16_824
   (D,
    \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[13] ,
    isbyte);
  output [1:0]D;
  input [3:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[13] ;
  input isbyte;

  wire [3:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[13] ;
  wire [1:0]D;
  wire isbyte;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[13] [3]),
        .I1(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[13] [1]),
        .I2(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[13] [2]),
        .I3(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[13] [0]),
        .I4(isbyte),
        .I5(1'b1),
        .O5(D[1]),
        .O6(D[0]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized16_825
   (D,
    \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[12] ,
    isbyte);
  output [1:0]D;
  input [3:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[12] ;
  input isbyte;

  wire [3:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[12] ;
  wire [1:0]D;
  wire isbyte;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[12] [3]),
        .I1(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[12] [1]),
        .I2(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[12] [2]),
        .I3(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[12] [0]),
        .I4(isbyte),
        .I5(1'b1),
        .O5(D[1]),
        .O6(D[0]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized16_826
   (D,
    \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] ,
    sel_Write_Mux_MSB);
  output [1:0]D;
  input [3:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] ;
  input [1:0]sel_Write_Mux_MSB;

  wire [3:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] ;
  wire [1:0]D;
  wire [1:0]sel_Write_Mux_MSB;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [0]),
        .I1(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [2]),
        .I2(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [1]),
        .I3(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [3]),
        .I4(sel_Write_Mux_MSB[1]),
        .I5(sel_Write_Mux_MSB[0]),
        .O5(D[0]),
        .O6(D[1]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized16_827
   (D,
    \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[22] ,
    sel_Write_Mux_MSB);
  output [1:0]D;
  input [3:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[22] ;
  input [1:0]sel_Write_Mux_MSB;

  wire [3:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[22] ;
  wire [1:0]D;
  wire [1:0]sel_Write_Mux_MSB;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[22] [0]),
        .I1(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[22] [2]),
        .I2(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[22] [1]),
        .I3(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[22] [3]),
        .I4(sel_Write_Mux_MSB[1]),
        .I5(sel_Write_Mux_MSB[0]),
        .O5(D[0]),
        .O6(D[1]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized16_828
   (D,
    \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[21] ,
    sel_Write_Mux_MSB);
  output [1:0]D;
  input [3:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[21] ;
  input [1:0]sel_Write_Mux_MSB;

  wire [3:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[21] ;
  wire [1:0]D;
  wire [1:0]sel_Write_Mux_MSB;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[21] [0]),
        .I1(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[21] [2]),
        .I2(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[21] [1]),
        .I3(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[21] [3]),
        .I4(sel_Write_Mux_MSB[1]),
        .I5(sel_Write_Mux_MSB[0]),
        .O5(D[0]),
        .O6(D[1]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized16_829
   (D,
    \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[20] ,
    sel_Write_Mux_MSB);
  output [1:0]D;
  input [3:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[20] ;
  input [1:0]sel_Write_Mux_MSB;

  wire [3:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[20] ;
  wire [1:0]D;
  wire [1:0]sel_Write_Mux_MSB;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[20] [0]),
        .I1(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[20] [2]),
        .I2(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[20] [1]),
        .I3(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[20] [3]),
        .I4(sel_Write_Mux_MSB[1]),
        .I5(sel_Write_Mux_MSB[0]),
        .O5(D[0]),
        .O6(D[1]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized16_830
   (D,
    \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[19] ,
    sel_Write_Mux_MSB);
  output [1:0]D;
  input [3:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[19] ;
  input [1:0]sel_Write_Mux_MSB;

  wire [3:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[19] ;
  wire [1:0]D;
  wire [1:0]sel_Write_Mux_MSB;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[19] [0]),
        .I1(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[19] [2]),
        .I2(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[19] [1]),
        .I3(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[19] [3]),
        .I4(sel_Write_Mux_MSB[1]),
        .I5(sel_Write_Mux_MSB[0]),
        .O5(D[0]),
        .O6(D[1]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized16_831
   (D,
    \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[18] ,
    sel_Write_Mux_MSB);
  output [1:0]D;
  input [3:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[18] ;
  input [1:0]sel_Write_Mux_MSB;

  wire [3:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[18] ;
  wire [1:0]D;
  wire [1:0]sel_Write_Mux_MSB;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[18] [0]),
        .I1(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[18] [2]),
        .I2(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[18] [1]),
        .I3(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[18] [3]),
        .I4(sel_Write_Mux_MSB[1]),
        .I5(sel_Write_Mux_MSB[0]),
        .O5(D[0]),
        .O6(D[1]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized16_832
   (D,
    \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[17] ,
    sel_Write_Mux_MSB);
  output [1:0]D;
  input [3:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[17] ;
  input [1:0]sel_Write_Mux_MSB;

  wire [3:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[17] ;
  wire [1:0]D;
  wire [1:0]sel_Write_Mux_MSB;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[17] [0]),
        .I1(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[17] [2]),
        .I2(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[17] [1]),
        .I3(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[17] [3]),
        .I4(sel_Write_Mux_MSB[1]),
        .I5(sel_Write_Mux_MSB[0]),
        .O5(D[0]),
        .O6(D[1]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized16_833
   (D,
    \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[16] ,
    sel_Write_Mux_MSB);
  output [1:0]D;
  input [3:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[16] ;
  input [1:0]sel_Write_Mux_MSB;

  wire [3:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[16] ;
  wire [1:0]D;
  wire [1:0]sel_Write_Mux_MSB;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[16] [0]),
        .I1(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[16] [2]),
        .I2(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[16] [1]),
        .I3(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[16] [3]),
        .I4(sel_Write_Mux_MSB[1]),
        .I5(sel_Write_Mux_MSB[0]),
        .O5(D[0]),
        .O6(D[1]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized16_9
   (Y,
    Instr,
    LOCKSTEP_Master_Out);
  output [1:0]Y;
  input [1:0]Instr;
  input [2:0]LOCKSTEP_Master_Out;

  wire [1:0]Instr;
  wire [2:0]LOCKSTEP_Master_Out;
  wire [1:0]Y;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(Instr[1]),
        .I1(LOCKSTEP_Master_Out[1]),
        .I2(Instr[0]),
        .I3(LOCKSTEP_Master_Out[0]),
        .I4(LOCKSTEP_Master_Out[2]),
        .I5(1'b1),
        .O5(Y[1]),
        .O6(Y[0]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized2
   (DI,
    S,
    op2_C,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[22] );
  output DI;
  output S;
  input [0:0]op2_C;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[22] ;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[22] ;
  wire DI;
  wire S;
  wire [0:1]alu_Op;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(alu_Op[0]),
        .I2(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[22] ),
        .I3(alu_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized2_759
   (DI,
    S,
    op2_C,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[23] );
  output DI;
  output S;
  input [0:0]op2_C;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[23] ;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[23] ;
  wire DI;
  wire S;
  wire [0:1]alu_Op;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(alu_Op[0]),
        .I2(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[23] ),
        .I3(alu_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized2_761
   (DI,
    S,
    op2_C,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[24] );
  output DI;
  output S;
  input [0:0]op2_C;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[24] ;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[24] ;
  wire DI;
  wire S;
  wire [0:1]alu_Op;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(alu_Op[0]),
        .I2(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[24] ),
        .I3(alu_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized2_763
   (DI,
    S,
    op2_C,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[25] );
  output DI;
  output S;
  input [0:0]op2_C;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[25] ;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[25] ;
  wire DI;
  wire S;
  wire [0:1]alu_Op;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(alu_Op[0]),
        .I2(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[25] ),
        .I3(alu_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized2_765
   (DI,
    S,
    op2_C,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[26] );
  output DI;
  output S;
  input [0:0]op2_C;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[26] ;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[26] ;
  wire DI;
  wire S;
  wire [0:1]alu_Op;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(alu_Op[0]),
        .I2(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[26] ),
        .I3(alu_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized2_767
   (DI,
    S,
    op2_C,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[27] );
  output DI;
  output S;
  input [0:0]op2_C;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[27] ;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[27] ;
  wire DI;
  wire S;
  wire [0:1]alu_Op;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(alu_Op[0]),
        .I2(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[27] ),
        .I3(alu_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized2_769
   (DI,
    S,
    op2_C,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[28] );
  output DI;
  output S;
  input [0:0]op2_C;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[28] ;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[28] ;
  wire DI;
  wire S;
  wire [0:1]alu_Op;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(alu_Op[0]),
        .I2(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[28] ),
        .I3(alu_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized2_771
   (DI,
    S,
    EX_Op2,
    alu_Op,
    EX_Op1);
  output DI;
  output S;
  input EX_Op2;
  input [0:1]alu_Op;
  input EX_Op1;

  wire DI;
  wire EX_Op1;
  wire EX_Op2;
  wire S;
  wire [0:1]alu_Op;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(EX_Op2),
        .I1(alu_Op[0]),
        .I2(EX_Op1),
        .I3(alu_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized2_773
   (DI,
    S,
    \Using_FPGA.Native_I2 ,
    alu_Op,
    \Using_FPGA.Native_I2_0 );
  output DI;
  output S;
  input \Using_FPGA.Native_I2 ;
  input [0:1]alu_Op;
  input \Using_FPGA.Native_I2_0 ;

  wire DI;
  wire S;
  wire \Using_FPGA.Native_I2 ;
  wire \Using_FPGA.Native_I2_0 ;
  wire [0:1]alu_Op;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_I2 ),
        .I1(alu_Op[0]),
        .I2(\Using_FPGA.Native_I2_0 ),
        .I3(alu_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized2_775
   (DI,
    S,
    op2_C,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[29] );
  output DI;
  output S;
  input [0:0]op2_C;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[29] ;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[29] ;
  wire DI;
  wire S;
  wire [0:1]alu_Op;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(alu_Op[0]),
        .I2(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[29] ),
        .I3(alu_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized2_777
   (DI,
    S,
    Op2,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[2] );
  output DI;
  output S;
  input Op2;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[2] ;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[2] ;
  wire DI;
  wire Op2;
  wire S;
  wire [0:1]alu_Op;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(Op2),
        .I1(alu_Op[0]),
        .I2(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[2] ),
        .I3(alu_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized2_779
   (DI,
    S,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[3] ,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[3]_0 );
  output DI;
  output S;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[3] ;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[3]_0 ;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[3] ;
  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[3]_0 ;
  wire DI;
  wire S;
  wire [0:1]alu_Op;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[3] ),
        .I1(alu_Op[0]),
        .I2(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[3]_0 ),
        .I3(alu_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized2_781
   (DI,
    S,
    op2_C,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[4] );
  output DI;
  output S;
  input [0:0]op2_C;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[4] ;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[4] ;
  wire DI;
  wire S;
  wire [0:1]alu_Op;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(alu_Op[0]),
        .I2(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[4] ),
        .I3(alu_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized2_783
   (DI,
    S,
    op2_C,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[5] );
  output DI;
  output S;
  input [0:0]op2_C;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[5] ;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[5] ;
  wire DI;
  wire S;
  wire [0:1]alu_Op;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(alu_Op[0]),
        .I2(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[5] ),
        .I3(alu_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized2_785
   (DI,
    S,
    op2_C,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[6] );
  output DI;
  output S;
  input [0:0]op2_C;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[6] ;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[6] ;
  wire DI;
  wire S;
  wire [0:1]alu_Op;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(alu_Op[0]),
        .I2(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[6] ),
        .I3(alu_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized2_787
   (DI,
    S,
    op2_C,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[7] );
  output DI;
  output S;
  input [0:0]op2_C;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[7] ;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[7] ;
  wire DI;
  wire S;
  wire [0:1]alu_Op;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(alu_Op[0]),
        .I2(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[7] ),
        .I3(alu_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized2_789
   (DI,
    S,
    op2_C,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[8] );
  output DI;
  output S;
  input [0:0]op2_C;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[8] ;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[8] ;
  wire DI;
  wire S;
  wire [0:1]alu_Op;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(alu_Op[0]),
        .I2(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[8] ),
        .I3(alu_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized2_791
   (DI,
    S,
    op2_C,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[9] );
  output DI;
  output S;
  input [0:0]op2_C;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[9] ;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[9] ;
  wire DI;
  wire S;
  wire [0:1]alu_Op;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(alu_Op[0]),
        .I2(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[9] ),
        .I3(alu_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized2_793
   (DI,
    S,
    op2_C,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[10] );
  output DI;
  output S;
  input [0:0]op2_C;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[10] ;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[10] ;
  wire DI;
  wire S;
  wire [0:1]alu_Op;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(alu_Op[0]),
        .I2(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[10] ),
        .I3(alu_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized2_795
   (DI,
    S,
    op2_C,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[11] );
  output DI;
  output S;
  input [0:0]op2_C;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[11] ;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[11] ;
  wire DI;
  wire S;
  wire [0:1]alu_Op;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(alu_Op[0]),
        .I2(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[11] ),
        .I3(alu_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized2_797
   (DI,
    S,
    op2_C,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[30] );
  output DI;
  output S;
  input [0:0]op2_C;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[30] ;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[30] ;
  wire DI;
  wire S;
  wire [0:1]alu_Op;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(alu_Op[0]),
        .I2(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[30] ),
        .I3(alu_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized2_799
   (DI,
    S,
    op2_C,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[12] );
  output DI;
  output S;
  input [0:0]op2_C;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[12] ;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[12] ;
  wire DI;
  wire S;
  wire [0:1]alu_Op;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(alu_Op[0]),
        .I2(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[12] ),
        .I3(alu_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized2_801
   (DI,
    S,
    op2_C,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[13] );
  output DI;
  output S;
  input [0:0]op2_C;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[13] ;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[13] ;
  wire DI;
  wire S;
  wire [0:1]alu_Op;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(alu_Op[0]),
        .I2(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[13] ),
        .I3(alu_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized2_803
   (DI,
    S,
    op2_C,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[14] );
  output DI;
  output S;
  input [0:0]op2_C;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[14] ;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[14] ;
  wire DI;
  wire S;
  wire [0:1]alu_Op;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(alu_Op[0]),
        .I2(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[14] ),
        .I3(alu_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized2_805
   (DI,
    S,
    op2_C,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[15] );
  output DI;
  output S;
  input [0:0]op2_C;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[15] ;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[15] ;
  wire DI;
  wire S;
  wire [0:1]alu_Op;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(alu_Op[0]),
        .I2(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[15] ),
        .I3(alu_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized2_807
   (DI,
    S,
    op2_C,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[16] );
  output DI;
  output S;
  input [0:0]op2_C;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[16] ;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[16] ;
  wire DI;
  wire S;
  wire [0:1]alu_Op;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(alu_Op[0]),
        .I2(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[16] ),
        .I3(alu_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized2_809
   (DI,
    S,
    op2_C,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[17] );
  output DI;
  output S;
  input [0:0]op2_C;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[17] ;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[17] ;
  wire DI;
  wire S;
  wire [0:1]alu_Op;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(alu_Op[0]),
        .I2(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[17] ),
        .I3(alu_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized2_811
   (DI,
    S,
    op2_C,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[18] );
  output DI;
  output S;
  input [0:0]op2_C;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[18] ;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[18] ;
  wire DI;
  wire S;
  wire [0:1]alu_Op;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(alu_Op[0]),
        .I2(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[18] ),
        .I3(alu_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized2_813
   (DI,
    S,
    op2_C,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[19] );
  output DI;
  output S;
  input [0:0]op2_C;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[19] ;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[19] ;
  wire DI;
  wire S;
  wire [0:1]alu_Op;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(alu_Op[0]),
        .I2(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[19] ),
        .I3(alu_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized2_815
   (DI,
    S,
    op2_C,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[20] );
  output DI;
  output S;
  input [0:0]op2_C;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[20] ;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[20] ;
  wire DI;
  wire S;
  wire [0:1]alu_Op;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(alu_Op[0]),
        .I2(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[20] ),
        .I3(alu_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized2_817
   (DI,
    S,
    op2_C,
    alu_Op,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[21] );
  output DI;
  output S;
  input [0:0]op2_C;
  input [0:1]alu_Op;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[21] ;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[21] ;
  wire DI;
  wire S;
  wire [0:1]alu_Op;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(alu_Op[0]),
        .I2(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[21] ),
        .I3(alu_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized4
   (low_addr_i_0,
    low_addr_i_1,
    EX_Op2,
    Op1_Low,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[0] );
  output low_addr_i_0;
  output low_addr_i_1;
  input EX_Op2;
  input [1:0]Op1_Low;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[0] ;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[0] ;
  wire EX_Op2;
  wire [1:0]Op1_Low;
  wire low_addr_i_0;
  wire low_addr_i_1;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h8778877866666666)) 
    \Using_FPGA.Native 
       (.I0(EX_Op2),
        .I1(Op1_Low[0]),
        .I2(\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[0] ),
        .I3(Op1_Low[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O5(low_addr_i_0),
        .O6(low_addr_i_1));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized6
   (byte_selects_0,
    byte_selects_1,
    EX_Op2,
    Op1_Low,
    \Add_Output_DFFs.M_AXI_DP_WSTRB_i_reg[2] );
  output byte_selects_0;
  output byte_selects_1;
  input EX_Op2;
  input [1:0]Op1_Low;
  input \Add_Output_DFFs.M_AXI_DP_WSTRB_i_reg[2] ;

  wire \Add_Output_DFFs.M_AXI_DP_WSTRB_i_reg[2] ;
  wire EX_Op2;
  wire [1:0]Op1_Low;
  wire byte_selects_0;
  wire byte_selects_1;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h7887877899996666)) 
    \Using_FPGA.Native 
       (.I0(EX_Op2),
        .I1(Op1_Low[0]),
        .I2(\Add_Output_DFFs.M_AXI_DP_WSTRB_i_reg[2] ),
        .I3(Op1_Low[1]),
        .I4(1'b1),
        .I5(1'b1),
        .O5(byte_selects_0),
        .O6(byte_selects_1));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized8
   (D,
    byte_selects_1,
    byte_selects_0,
    isbyte,
    isdoublet);
  output [1:0]D;
  input byte_selects_1;
  input byte_selects_0;
  input isbyte;
  input isdoublet;

  wire [1:0]D;
  wire byte_selects_0;
  wire byte_selects_1;
  wire isbyte;
  wire isdoublet;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h2A2F2A2F8A8F8A8F)) 
    \Using_FPGA.Native 
       (.I0(byte_selects_1),
        .I1(byte_selects_0),
        .I2(isbyte),
        .I3(isdoublet),
        .I4(1'b0),
        .I5(1'b1),
        .O5(D[0]),
        .O6(D[1]));
endmodule

module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D
   (Reg1_Data,
    Data_Write,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_0 ,
    reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_0 ;
  input [0:4]reg1_Addr;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire [0:4]reg1_Addr;

  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_0 [4]),
        .A1(\Using_FPGA.Native_0 [3]),
        .A2(\Using_FPGA.Native_0 [2]),
        .A3(\Using_FPGA.Native_0 [1]),
        .A4(\Using_FPGA.Native_0 [0]),
        .D(ex_Result),
        .DPO(Reg1_Data),
        .DPRA0(reg1_Addr[0]),
        .DPRA1(reg1_Addr[1]),
        .DPRA2(reg1_Addr[2]),
        .DPRA3(reg1_Addr[3]),
        .DPRA4(reg1_Addr[4]),
        .SPO(Data_Write),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_413
   (reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_i_2__16 ,
    imm_Value);
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_i_2__16 ;
  input [4:0]imm_Value;

  wire Clk;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_i_2__16 ;
  wire \Using_FPGA.Native_n_1 ;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:0]reg2_Data;

  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_i_2__16 [4]),
        .A1(\Using_FPGA.Native_i_2__16 [3]),
        .A2(\Using_FPGA.Native_i_2__16 [2]),
        .A3(\Using_FPGA.Native_i_2__16 [1]),
        .A4(\Using_FPGA.Native_i_2__16 [0]),
        .D(ex_Result),
        .DPO(reg2_Data),
        .DPRA0(imm_Value[4]),
        .DPRA1(imm_Value[3]),
        .DPRA2(imm_Value[2]),
        .DPRA3(imm_Value[1]),
        .DPRA4(imm_Value[0]),
        .SPO(\Using_FPGA.Native_n_1 ),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_414
   (Reg1_Data,
    Data_Write,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_0 ,
    reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_0 ;
  input [0:4]reg1_Addr;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire [0:4]reg1_Addr;

  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_0 [4]),
        .A1(\Using_FPGA.Native_0 [3]),
        .A2(\Using_FPGA.Native_0 [2]),
        .A3(\Using_FPGA.Native_0 [1]),
        .A4(\Using_FPGA.Native_0 [0]),
        .D(ex_Result),
        .DPO(Reg1_Data),
        .DPRA0(reg1_Addr[0]),
        .DPRA1(reg1_Addr[1]),
        .DPRA2(reg1_Addr[2]),
        .DPRA3(reg1_Addr[3]),
        .DPRA4(reg1_Addr[4]),
        .SPO(Data_Write),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_415
   (reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_i_2__15 ,
    imm_Value);
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_i_2__15 ;
  input [4:0]imm_Value;

  wire Clk;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_i_2__15 ;
  wire \Using_FPGA.Native_n_1 ;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:0]reg2_Data;

  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_i_2__15 [4]),
        .A1(\Using_FPGA.Native_i_2__15 [3]),
        .A2(\Using_FPGA.Native_i_2__15 [2]),
        .A3(\Using_FPGA.Native_i_2__15 [1]),
        .A4(\Using_FPGA.Native_i_2__15 [0]),
        .D(ex_Result),
        .DPO(reg2_Data),
        .DPRA0(imm_Value[4]),
        .DPRA1(imm_Value[3]),
        .DPRA2(imm_Value[2]),
        .DPRA3(imm_Value[1]),
        .DPRA4(imm_Value[0]),
        .SPO(\Using_FPGA.Native_n_1 ),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_416
   (Reg1_Data,
    Data_Write,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_0 ,
    reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_0 ;
  input [0:4]reg1_Addr;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire [0:4]reg1_Addr;

  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_0 [4]),
        .A1(\Using_FPGA.Native_0 [3]),
        .A2(\Using_FPGA.Native_0 [2]),
        .A3(\Using_FPGA.Native_0 [1]),
        .A4(\Using_FPGA.Native_0 [0]),
        .D(ex_Result),
        .DPO(Reg1_Data),
        .DPRA0(reg1_Addr[0]),
        .DPRA1(reg1_Addr[1]),
        .DPRA2(reg1_Addr[2]),
        .DPRA3(reg1_Addr[3]),
        .DPRA4(reg1_Addr[4]),
        .SPO(Data_Write),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_417
   (reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_i_2__14 ,
    imm_Value);
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_i_2__14 ;
  input [4:0]imm_Value;

  wire Clk;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_i_2__14 ;
  wire \Using_FPGA.Native_n_1 ;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:0]reg2_Data;

  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_i_2__14 [4]),
        .A1(\Using_FPGA.Native_i_2__14 [3]),
        .A2(\Using_FPGA.Native_i_2__14 [2]),
        .A3(\Using_FPGA.Native_i_2__14 [1]),
        .A4(\Using_FPGA.Native_i_2__14 [0]),
        .D(ex_Result),
        .DPO(reg2_Data),
        .DPRA0(imm_Value[4]),
        .DPRA1(imm_Value[3]),
        .DPRA2(imm_Value[2]),
        .DPRA3(imm_Value[1]),
        .DPRA4(imm_Value[0]),
        .SPO(\Using_FPGA.Native_n_1 ),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_418
   (Reg1_Data,
    Data_Write,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_0 ,
    reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_0 ;
  input [0:4]reg1_Addr;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire [0:4]reg1_Addr;

  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_0 [4]),
        .A1(\Using_FPGA.Native_0 [3]),
        .A2(\Using_FPGA.Native_0 [2]),
        .A3(\Using_FPGA.Native_0 [1]),
        .A4(\Using_FPGA.Native_0 [0]),
        .D(ex_Result),
        .DPO(Reg1_Data),
        .DPRA0(reg1_Addr[0]),
        .DPRA1(reg1_Addr[1]),
        .DPRA2(reg1_Addr[2]),
        .DPRA3(reg1_Addr[3]),
        .DPRA4(reg1_Addr[4]),
        .SPO(Data_Write),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_419
   (reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_i_2__13 ,
    imm_Value);
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_i_2__13 ;
  input [4:0]imm_Value;

  wire Clk;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_i_2__13 ;
  wire \Using_FPGA.Native_n_1 ;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:0]reg2_Data;

  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_i_2__13 [4]),
        .A1(\Using_FPGA.Native_i_2__13 [3]),
        .A2(\Using_FPGA.Native_i_2__13 [2]),
        .A3(\Using_FPGA.Native_i_2__13 [1]),
        .A4(\Using_FPGA.Native_i_2__13 [0]),
        .D(ex_Result),
        .DPO(reg2_Data),
        .DPRA0(imm_Value[4]),
        .DPRA1(imm_Value[3]),
        .DPRA2(imm_Value[2]),
        .DPRA3(imm_Value[1]),
        .DPRA4(imm_Value[0]),
        .SPO(\Using_FPGA.Native_n_1 ),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_420
   (Reg1_Data,
    Data_Write,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_0 ,
    reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_0 ;
  input [0:4]reg1_Addr;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire [0:4]reg1_Addr;

  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_0 [4]),
        .A1(\Using_FPGA.Native_0 [3]),
        .A2(\Using_FPGA.Native_0 [2]),
        .A3(\Using_FPGA.Native_0 [1]),
        .A4(\Using_FPGA.Native_0 [0]),
        .D(ex_Result),
        .DPO(Reg1_Data),
        .DPRA0(reg1_Addr[0]),
        .DPRA1(reg1_Addr[1]),
        .DPRA2(reg1_Addr[2]),
        .DPRA3(reg1_Addr[3]),
        .DPRA4(reg1_Addr[4]),
        .SPO(Data_Write),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_421
   (reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_i_2__12 ,
    imm_Value);
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_i_2__12 ;
  input [4:0]imm_Value;

  wire Clk;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_i_2__12 ;
  wire \Using_FPGA.Native_n_1 ;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:0]reg2_Data;

  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_i_2__12 [4]),
        .A1(\Using_FPGA.Native_i_2__12 [3]),
        .A2(\Using_FPGA.Native_i_2__12 [2]),
        .A3(\Using_FPGA.Native_i_2__12 [1]),
        .A4(\Using_FPGA.Native_i_2__12 [0]),
        .D(ex_Result),
        .DPO(reg2_Data),
        .DPRA0(imm_Value[4]),
        .DPRA1(imm_Value[3]),
        .DPRA2(imm_Value[2]),
        .DPRA3(imm_Value[1]),
        .DPRA4(imm_Value[0]),
        .SPO(\Using_FPGA.Native_n_1 ),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_422
   (Reg1_Data,
    Data_Write,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_0 ,
    reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_0 ;
  input [0:4]reg1_Addr;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire [0:4]reg1_Addr;

  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_0 [4]),
        .A1(\Using_FPGA.Native_0 [3]),
        .A2(\Using_FPGA.Native_0 [2]),
        .A3(\Using_FPGA.Native_0 [1]),
        .A4(\Using_FPGA.Native_0 [0]),
        .D(ex_Result),
        .DPO(Reg1_Data),
        .DPRA0(reg1_Addr[0]),
        .DPRA1(reg1_Addr[1]),
        .DPRA2(reg1_Addr[2]),
        .DPRA3(reg1_Addr[3]),
        .DPRA4(reg1_Addr[4]),
        .SPO(Data_Write),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_423
   (reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_i_2__11 ,
    imm_Value);
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_i_2__11 ;
  input [4:0]imm_Value;

  wire Clk;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_i_2__11 ;
  wire \Using_FPGA.Native_n_1 ;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:0]reg2_Data;

  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_i_2__11 [4]),
        .A1(\Using_FPGA.Native_i_2__11 [3]),
        .A2(\Using_FPGA.Native_i_2__11 [2]),
        .A3(\Using_FPGA.Native_i_2__11 [1]),
        .A4(\Using_FPGA.Native_i_2__11 [0]),
        .D(ex_Result),
        .DPO(reg2_Data),
        .DPRA0(imm_Value[4]),
        .DPRA1(imm_Value[3]),
        .DPRA2(imm_Value[2]),
        .DPRA3(imm_Value[1]),
        .DPRA4(imm_Value[0]),
        .SPO(\Using_FPGA.Native_n_1 ),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_424
   (Reg1_Data,
    Data_Write,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_0 ,
    reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_0 ;
  input [0:4]reg1_Addr;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire [0:4]reg1_Addr;

  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_0 [4]),
        .A1(\Using_FPGA.Native_0 [3]),
        .A2(\Using_FPGA.Native_0 [2]),
        .A3(\Using_FPGA.Native_0 [1]),
        .A4(\Using_FPGA.Native_0 [0]),
        .D(ex_Result),
        .DPO(Reg1_Data),
        .DPRA0(reg1_Addr[0]),
        .DPRA1(reg1_Addr[1]),
        .DPRA2(reg1_Addr[2]),
        .DPRA3(reg1_Addr[3]),
        .DPRA4(reg1_Addr[4]),
        .SPO(Data_Write),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_425
   (reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_i_2__10 ,
    imm_Value);
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_i_2__10 ;
  input [4:0]imm_Value;

  wire Clk;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_i_2__10 ;
  wire \Using_FPGA.Native_n_1 ;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:0]reg2_Data;

  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_i_2__10 [4]),
        .A1(\Using_FPGA.Native_i_2__10 [3]),
        .A2(\Using_FPGA.Native_i_2__10 [2]),
        .A3(\Using_FPGA.Native_i_2__10 [1]),
        .A4(\Using_FPGA.Native_i_2__10 [0]),
        .D(ex_Result),
        .DPO(reg2_Data),
        .DPRA0(imm_Value[4]),
        .DPRA1(imm_Value[3]),
        .DPRA2(imm_Value[2]),
        .DPRA3(imm_Value[1]),
        .DPRA4(imm_Value[0]),
        .SPO(\Using_FPGA.Native_n_1 ),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_426
   (Reg1_Data,
    Clk_0,
    Clk,
    ex_Result,
    Reg_Write,
    \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] ,
    reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Clk_0;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] ;
  input [0:4]reg1_Addr;

  wire [4:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] ;
  wire Clk;
  wire [0:0]Clk_0;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [0:0]ex_Result;
  wire [0:4]reg1_Addr;

  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] [4]),
        .A1(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] [3]),
        .A2(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] [2]),
        .A3(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] [1]),
        .A4(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] [0]),
        .D(ex_Result),
        .DPO(Reg1_Data),
        .DPRA0(reg1_Addr[0]),
        .DPRA1(reg1_Addr[1]),
        .DPRA2(reg1_Addr[2]),
        .DPRA3(reg1_Addr[3]),
        .DPRA4(reg1_Addr[4]),
        .SPO(Clk_0),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_427
   (reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_i_3__4 ,
    imm_Value);
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_i_3__4 ;
  input [4:0]imm_Value;

  wire Clk;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_i_3__4 ;
  wire \Using_FPGA.Native_n_1 ;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:0]reg2_Data;

  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_i_3__4 [4]),
        .A1(\Using_FPGA.Native_i_3__4 [3]),
        .A2(\Using_FPGA.Native_i_3__4 [2]),
        .A3(\Using_FPGA.Native_i_3__4 [1]),
        .A4(\Using_FPGA.Native_i_3__4 [0]),
        .D(ex_Result),
        .DPO(reg2_Data),
        .DPRA0(imm_Value[4]),
        .DPRA1(imm_Value[3]),
        .DPRA2(imm_Value[2]),
        .DPRA3(imm_Value[1]),
        .DPRA4(imm_Value[0]),
        .SPO(\Using_FPGA.Native_n_1 ),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_428
   (Reg1_Data,
    Clk_0,
    Clk,
    ex_Result,
    Reg_Write,
    \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[1] ,
    reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Clk_0;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[1] ;
  input [0:4]reg1_Addr;

  wire [4:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[1] ;
  wire Clk;
  wire [0:0]Clk_0;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [0:0]ex_Result;
  wire [0:4]reg1_Addr;

  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[1] [4]),
        .A1(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[1] [3]),
        .A2(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[1] [2]),
        .A3(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[1] [1]),
        .A4(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[1] [0]),
        .D(ex_Result),
        .DPO(Reg1_Data),
        .DPRA0(reg1_Addr[0]),
        .DPRA1(reg1_Addr[1]),
        .DPRA2(reg1_Addr[2]),
        .DPRA3(reg1_Addr[3]),
        .DPRA4(reg1_Addr[4]),
        .SPO(Clk_0),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_429
   (reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_i_2__37 ,
    imm_Value);
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_i_2__37 ;
  input [4:0]imm_Value;

  wire Clk;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_i_2__37 ;
  wire \Using_FPGA.Native_n_1 ;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:0]reg2_Data;

  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_i_2__37 [4]),
        .A1(\Using_FPGA.Native_i_2__37 [3]),
        .A2(\Using_FPGA.Native_i_2__37 [2]),
        .A3(\Using_FPGA.Native_i_2__37 [1]),
        .A4(\Using_FPGA.Native_i_2__37 [0]),
        .D(ex_Result),
        .DPO(reg2_Data),
        .DPRA0(imm_Value[4]),
        .DPRA1(imm_Value[3]),
        .DPRA2(imm_Value[2]),
        .DPRA3(imm_Value[1]),
        .DPRA4(imm_Value[0]),
        .SPO(\Using_FPGA.Native_n_1 ),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_430
   (Reg1_Data,
    Data_Write,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_0 ,
    reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_0 ;
  input [0:4]reg1_Addr;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire [0:4]reg1_Addr;

  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_0 [4]),
        .A1(\Using_FPGA.Native_0 [3]),
        .A2(\Using_FPGA.Native_0 [2]),
        .A3(\Using_FPGA.Native_0 [1]),
        .A4(\Using_FPGA.Native_0 [0]),
        .D(ex_Result),
        .DPO(Reg1_Data),
        .DPRA0(reg1_Addr[0]),
        .DPRA1(reg1_Addr[1]),
        .DPRA2(reg1_Addr[2]),
        .DPRA3(reg1_Addr[3]),
        .DPRA4(reg1_Addr[4]),
        .SPO(Data_Write),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_431
   (reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_i_2__9 ,
    imm_Value);
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_i_2__9 ;
  input [4:0]imm_Value;

  wire Clk;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_i_2__9 ;
  wire \Using_FPGA.Native_n_1 ;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:0]reg2_Data;

  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_i_2__9 [4]),
        .A1(\Using_FPGA.Native_i_2__9 [3]),
        .A2(\Using_FPGA.Native_i_2__9 [2]),
        .A3(\Using_FPGA.Native_i_2__9 [1]),
        .A4(\Using_FPGA.Native_i_2__9 [0]),
        .D(ex_Result),
        .DPO(reg2_Data),
        .DPRA0(imm_Value[4]),
        .DPRA1(imm_Value[3]),
        .DPRA2(imm_Value[2]),
        .DPRA3(imm_Value[1]),
        .DPRA4(imm_Value[0]),
        .SPO(\Using_FPGA.Native_n_1 ),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_432
   (Reg1_Data,
    Clk_0,
    Clk,
    ex_Result,
    Reg_Write,
    \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[2] ,
    reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Clk_0;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[2] ;
  input [0:4]reg1_Addr;

  wire [4:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[2] ;
  wire Clk;
  wire [0:0]Clk_0;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [0:0]ex_Result;
  wire [0:4]reg1_Addr;

  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[2] [4]),
        .A1(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[2] [3]),
        .A2(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[2] [2]),
        .A3(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[2] [1]),
        .A4(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[2] [0]),
        .D(ex_Result),
        .DPO(Reg1_Data),
        .DPRA0(reg1_Addr[0]),
        .DPRA1(reg1_Addr[1]),
        .DPRA2(reg1_Addr[2]),
        .DPRA3(reg1_Addr[3]),
        .DPRA4(reg1_Addr[4]),
        .SPO(Clk_0),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_433
   (reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_i_2__36 ,
    imm_Value);
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_i_2__36 ;
  input [4:0]imm_Value;

  wire Clk;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_i_2__36 ;
  wire \Using_FPGA.Native_n_1 ;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:0]reg2_Data;

  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_i_2__36 [4]),
        .A1(\Using_FPGA.Native_i_2__36 [3]),
        .A2(\Using_FPGA.Native_i_2__36 [2]),
        .A3(\Using_FPGA.Native_i_2__36 [1]),
        .A4(\Using_FPGA.Native_i_2__36 [0]),
        .D(ex_Result),
        .DPO(reg2_Data),
        .DPRA0(imm_Value[4]),
        .DPRA1(imm_Value[3]),
        .DPRA2(imm_Value[2]),
        .DPRA3(imm_Value[1]),
        .DPRA4(imm_Value[0]),
        .SPO(\Using_FPGA.Native_n_1 ),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_434
   (Reg1_Data,
    Clk_0,
    Clk,
    ex_Result,
    Reg_Write,
    \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[3] ,
    reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Clk_0;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[3] ;
  input [0:4]reg1_Addr;

  wire [4:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[3] ;
  wire Clk;
  wire [0:0]Clk_0;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [0:0]ex_Result;
  wire [0:4]reg1_Addr;

  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[3] [4]),
        .A1(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[3] [3]),
        .A2(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[3] [2]),
        .A3(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[3] [1]),
        .A4(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[3] [0]),
        .D(ex_Result),
        .DPO(Reg1_Data),
        .DPRA0(reg1_Addr[0]),
        .DPRA1(reg1_Addr[1]),
        .DPRA2(reg1_Addr[2]),
        .DPRA3(reg1_Addr[3]),
        .DPRA4(reg1_Addr[4]),
        .SPO(Clk_0),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_435
   (reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_i_2__35 ,
    imm_Value);
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_i_2__35 ;
  input [4:0]imm_Value;

  wire Clk;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_i_2__35 ;
  wire \Using_FPGA.Native_n_1 ;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:0]reg2_Data;

  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_i_2__35 [4]),
        .A1(\Using_FPGA.Native_i_2__35 [3]),
        .A2(\Using_FPGA.Native_i_2__35 [2]),
        .A3(\Using_FPGA.Native_i_2__35 [1]),
        .A4(\Using_FPGA.Native_i_2__35 [0]),
        .D(ex_Result),
        .DPO(reg2_Data),
        .DPRA0(imm_Value[4]),
        .DPRA1(imm_Value[3]),
        .DPRA2(imm_Value[2]),
        .DPRA3(imm_Value[1]),
        .DPRA4(imm_Value[0]),
        .SPO(\Using_FPGA.Native_n_1 ),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_436
   (Reg1_Data,
    Clk_0,
    Clk,
    ex_Result,
    Reg_Write,
    \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[4] ,
    reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Clk_0;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[4] ;
  input [0:4]reg1_Addr;

  wire [4:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[4] ;
  wire Clk;
  wire [0:0]Clk_0;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [0:0]ex_Result;
  wire [0:4]reg1_Addr;

  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[4] [4]),
        .A1(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[4] [3]),
        .A2(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[4] [2]),
        .A3(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[4] [1]),
        .A4(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[4] [0]),
        .D(ex_Result),
        .DPO(Reg1_Data),
        .DPRA0(reg1_Addr[0]),
        .DPRA1(reg1_Addr[1]),
        .DPRA2(reg1_Addr[2]),
        .DPRA3(reg1_Addr[3]),
        .DPRA4(reg1_Addr[4]),
        .SPO(Clk_0),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_437
   (reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_i_2__34 ,
    imm_Value);
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_i_2__34 ;
  input [4:0]imm_Value;

  wire Clk;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_i_2__34 ;
  wire \Using_FPGA.Native_n_1 ;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:0]reg2_Data;

  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_i_2__34 [4]),
        .A1(\Using_FPGA.Native_i_2__34 [3]),
        .A2(\Using_FPGA.Native_i_2__34 [2]),
        .A3(\Using_FPGA.Native_i_2__34 [1]),
        .A4(\Using_FPGA.Native_i_2__34 [0]),
        .D(ex_Result),
        .DPO(reg2_Data),
        .DPRA0(imm_Value[4]),
        .DPRA1(imm_Value[3]),
        .DPRA2(imm_Value[2]),
        .DPRA3(imm_Value[1]),
        .DPRA4(imm_Value[0]),
        .SPO(\Using_FPGA.Native_n_1 ),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_438
   (Reg1_Data,
    Clk_0,
    Clk,
    ex_Result,
    Reg_Write,
    \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[5] ,
    reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Clk_0;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[5] ;
  input [0:4]reg1_Addr;

  wire [4:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[5] ;
  wire Clk;
  wire [0:0]Clk_0;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [0:0]ex_Result;
  wire [0:4]reg1_Addr;

  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[5] [4]),
        .A1(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[5] [3]),
        .A2(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[5] [2]),
        .A3(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[5] [1]),
        .A4(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[5] [0]),
        .D(ex_Result),
        .DPO(Reg1_Data),
        .DPRA0(reg1_Addr[0]),
        .DPRA1(reg1_Addr[1]),
        .DPRA2(reg1_Addr[2]),
        .DPRA3(reg1_Addr[3]),
        .DPRA4(reg1_Addr[4]),
        .SPO(Clk_0),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_439
   (reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_i_2__33 ,
    imm_Value);
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_i_2__33 ;
  input [4:0]imm_Value;

  wire Clk;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_i_2__33 ;
  wire \Using_FPGA.Native_n_1 ;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:0]reg2_Data;

  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_i_2__33 [4]),
        .A1(\Using_FPGA.Native_i_2__33 [3]),
        .A2(\Using_FPGA.Native_i_2__33 [2]),
        .A3(\Using_FPGA.Native_i_2__33 [1]),
        .A4(\Using_FPGA.Native_i_2__33 [0]),
        .D(ex_Result),
        .DPO(reg2_Data),
        .DPRA0(imm_Value[4]),
        .DPRA1(imm_Value[3]),
        .DPRA2(imm_Value[2]),
        .DPRA3(imm_Value[1]),
        .DPRA4(imm_Value[0]),
        .SPO(\Using_FPGA.Native_n_1 ),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_440
   (Reg1_Data,
    Clk_0,
    Clk,
    ex_Result,
    Reg_Write,
    \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[6] ,
    reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Clk_0;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[6] ;
  input [0:4]reg1_Addr;

  wire [4:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[6] ;
  wire Clk;
  wire [0:0]Clk_0;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [0:0]ex_Result;
  wire [0:4]reg1_Addr;

  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[6] [4]),
        .A1(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[6] [3]),
        .A2(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[6] [2]),
        .A3(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[6] [1]),
        .A4(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[6] [0]),
        .D(ex_Result),
        .DPO(Reg1_Data),
        .DPRA0(reg1_Addr[0]),
        .DPRA1(reg1_Addr[1]),
        .DPRA2(reg1_Addr[2]),
        .DPRA3(reg1_Addr[3]),
        .DPRA4(reg1_Addr[4]),
        .SPO(Clk_0),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_441
   (reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_i_2__32 ,
    imm_Value);
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_i_2__32 ;
  input [4:0]imm_Value;

  wire Clk;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_i_2__32 ;
  wire \Using_FPGA.Native_n_1 ;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:0]reg2_Data;

  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_i_2__32 [4]),
        .A1(\Using_FPGA.Native_i_2__32 [3]),
        .A2(\Using_FPGA.Native_i_2__32 [2]),
        .A3(\Using_FPGA.Native_i_2__32 [1]),
        .A4(\Using_FPGA.Native_i_2__32 [0]),
        .D(ex_Result),
        .DPO(reg2_Data),
        .DPRA0(imm_Value[4]),
        .DPRA1(imm_Value[3]),
        .DPRA2(imm_Value[2]),
        .DPRA3(imm_Value[1]),
        .DPRA4(imm_Value[0]),
        .SPO(\Using_FPGA.Native_n_1 ),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_442
   (Reg1_Data,
    Clk_0,
    Clk,
    ex_Result,
    Reg_Write,
    \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[7] ,
    reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Clk_0;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[7] ;
  input [0:4]reg1_Addr;

  wire [4:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[7] ;
  wire Clk;
  wire [0:0]Clk_0;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [0:0]ex_Result;
  wire [0:4]reg1_Addr;

  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[7] [4]),
        .A1(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[7] [3]),
        .A2(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[7] [2]),
        .A3(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[7] [1]),
        .A4(\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[7] [0]),
        .D(ex_Result),
        .DPO(Reg1_Data),
        .DPRA0(reg1_Addr[0]),
        .DPRA1(reg1_Addr[1]),
        .DPRA2(reg1_Addr[2]),
        .DPRA3(reg1_Addr[3]),
        .DPRA4(reg1_Addr[4]),
        .SPO(Clk_0),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_443
   (reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_i_2__31 ,
    imm_Value);
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_i_2__31 ;
  input [4:0]imm_Value;

  wire Clk;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_i_2__31 ;
  wire \Using_FPGA.Native_n_1 ;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:0]reg2_Data;

  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_i_2__31 [4]),
        .A1(\Using_FPGA.Native_i_2__31 [3]),
        .A2(\Using_FPGA.Native_i_2__31 [2]),
        .A3(\Using_FPGA.Native_i_2__31 [1]),
        .A4(\Using_FPGA.Native_i_2__31 [0]),
        .D(ex_Result),
        .DPO(reg2_Data),
        .DPRA0(imm_Value[4]),
        .DPRA1(imm_Value[3]),
        .DPRA2(imm_Value[2]),
        .DPRA3(imm_Value[1]),
        .DPRA4(imm_Value[0]),
        .SPO(\Using_FPGA.Native_n_1 ),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_444
   (Reg1_Data,
    Data_Write,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_0 ,
    reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_0 ;
  input [0:4]reg1_Addr;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire [0:4]reg1_Addr;

  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_0 [4]),
        .A1(\Using_FPGA.Native_0 [3]),
        .A2(\Using_FPGA.Native_0 [2]),
        .A3(\Using_FPGA.Native_0 [1]),
        .A4(\Using_FPGA.Native_0 [0]),
        .D(ex_Result),
        .DPO(Reg1_Data),
        .DPRA0(reg1_Addr[0]),
        .DPRA1(reg1_Addr[1]),
        .DPRA2(reg1_Addr[2]),
        .DPRA3(reg1_Addr[3]),
        .DPRA4(reg1_Addr[4]),
        .SPO(Data_Write),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_445
   (reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_i_2__30 ,
    imm_Value);
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_i_2__30 ;
  input [4:0]imm_Value;

  wire Clk;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_i_2__30 ;
  wire \Using_FPGA.Native_n_1 ;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:0]reg2_Data;

  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_i_2__30 [4]),
        .A1(\Using_FPGA.Native_i_2__30 [3]),
        .A2(\Using_FPGA.Native_i_2__30 [2]),
        .A3(\Using_FPGA.Native_i_2__30 [1]),
        .A4(\Using_FPGA.Native_i_2__30 [0]),
        .D(ex_Result),
        .DPO(reg2_Data),
        .DPRA0(imm_Value[4]),
        .DPRA1(imm_Value[3]),
        .DPRA2(imm_Value[2]),
        .DPRA3(imm_Value[1]),
        .DPRA4(imm_Value[0]),
        .SPO(\Using_FPGA.Native_n_1 ),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_446
   (Reg1_Data,
    Data_Write,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_0 ,
    reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_0 ;
  input [0:4]reg1_Addr;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire [0:4]reg1_Addr;

  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_0 [4]),
        .A1(\Using_FPGA.Native_0 [3]),
        .A2(\Using_FPGA.Native_0 [2]),
        .A3(\Using_FPGA.Native_0 [1]),
        .A4(\Using_FPGA.Native_0 [0]),
        .D(ex_Result),
        .DPO(Reg1_Data),
        .DPRA0(reg1_Addr[0]),
        .DPRA1(reg1_Addr[1]),
        .DPRA2(reg1_Addr[2]),
        .DPRA3(reg1_Addr[3]),
        .DPRA4(reg1_Addr[4]),
        .SPO(Data_Write),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_447
   (reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_i_2__29 ,
    imm_Value);
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_i_2__29 ;
  input [4:0]imm_Value;

  wire Clk;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_i_2__29 ;
  wire \Using_FPGA.Native_n_1 ;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:0]reg2_Data;

  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_i_2__29 [4]),
        .A1(\Using_FPGA.Native_i_2__29 [3]),
        .A2(\Using_FPGA.Native_i_2__29 [2]),
        .A3(\Using_FPGA.Native_i_2__29 [1]),
        .A4(\Using_FPGA.Native_i_2__29 [0]),
        .D(ex_Result),
        .DPO(reg2_Data),
        .DPRA0(imm_Value[4]),
        .DPRA1(imm_Value[3]),
        .DPRA2(imm_Value[2]),
        .DPRA3(imm_Value[1]),
        .DPRA4(imm_Value[0]),
        .SPO(\Using_FPGA.Native_n_1 ),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_448
   (Reg1_Data,
    Data_Write,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_0 ,
    reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_0 ;
  input [0:4]reg1_Addr;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire [0:4]reg1_Addr;

  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_0 [4]),
        .A1(\Using_FPGA.Native_0 [3]),
        .A2(\Using_FPGA.Native_0 [2]),
        .A3(\Using_FPGA.Native_0 [1]),
        .A4(\Using_FPGA.Native_0 [0]),
        .D(ex_Result),
        .DPO(Reg1_Data),
        .DPRA0(reg1_Addr[0]),
        .DPRA1(reg1_Addr[1]),
        .DPRA2(reg1_Addr[2]),
        .DPRA3(reg1_Addr[3]),
        .DPRA4(reg1_Addr[4]),
        .SPO(Data_Write),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_449
   (reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_i_2__28 ,
    imm_Value);
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_i_2__28 ;
  input [4:0]imm_Value;

  wire Clk;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_i_2__28 ;
  wire \Using_FPGA.Native_n_1 ;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:0]reg2_Data;

  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_i_2__28 [4]),
        .A1(\Using_FPGA.Native_i_2__28 [3]),
        .A2(\Using_FPGA.Native_i_2__28 [2]),
        .A3(\Using_FPGA.Native_i_2__28 [1]),
        .A4(\Using_FPGA.Native_i_2__28 [0]),
        .D(ex_Result),
        .DPO(reg2_Data),
        .DPRA0(imm_Value[4]),
        .DPRA1(imm_Value[3]),
        .DPRA2(imm_Value[2]),
        .DPRA3(imm_Value[1]),
        .DPRA4(imm_Value[0]),
        .SPO(\Using_FPGA.Native_n_1 ),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_450
   (Reg1_Data,
    Data_Write,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_0 ,
    reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_0 ;
  input [0:4]reg1_Addr;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire [0:4]reg1_Addr;

  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_0 [4]),
        .A1(\Using_FPGA.Native_0 [3]),
        .A2(\Using_FPGA.Native_0 [2]),
        .A3(\Using_FPGA.Native_0 [1]),
        .A4(\Using_FPGA.Native_0 [0]),
        .D(ex_Result),
        .DPO(Reg1_Data),
        .DPRA0(reg1_Addr[0]),
        .DPRA1(reg1_Addr[1]),
        .DPRA2(reg1_Addr[2]),
        .DPRA3(reg1_Addr[3]),
        .DPRA4(reg1_Addr[4]),
        .SPO(Data_Write),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_451
   (reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_i_2__27 ,
    imm_Value);
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_i_2__27 ;
  input [4:0]imm_Value;

  wire Clk;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_i_2__27 ;
  wire \Using_FPGA.Native_n_1 ;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:0]reg2_Data;

  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_i_2__27 [4]),
        .A1(\Using_FPGA.Native_i_2__27 [3]),
        .A2(\Using_FPGA.Native_i_2__27 [2]),
        .A3(\Using_FPGA.Native_i_2__27 [1]),
        .A4(\Using_FPGA.Native_i_2__27 [0]),
        .D(ex_Result),
        .DPO(reg2_Data),
        .DPRA0(imm_Value[4]),
        .DPRA1(imm_Value[3]),
        .DPRA2(imm_Value[2]),
        .DPRA3(imm_Value[1]),
        .DPRA4(imm_Value[0]),
        .SPO(\Using_FPGA.Native_n_1 ),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_452
   (Reg1_Data,
    Data_Write,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_0 ,
    reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_0 ;
  input [0:4]reg1_Addr;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire [0:4]reg1_Addr;

  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_0 [4]),
        .A1(\Using_FPGA.Native_0 [3]),
        .A2(\Using_FPGA.Native_0 [2]),
        .A3(\Using_FPGA.Native_0 [1]),
        .A4(\Using_FPGA.Native_0 [0]),
        .D(ex_Result),
        .DPO(Reg1_Data),
        .DPRA0(reg1_Addr[0]),
        .DPRA1(reg1_Addr[1]),
        .DPRA2(reg1_Addr[2]),
        .DPRA3(reg1_Addr[3]),
        .DPRA4(reg1_Addr[4]),
        .SPO(Data_Write),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_453
   (reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_i_2__8 ,
    imm_Value);
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_i_2__8 ;
  input [4:0]imm_Value;

  wire Clk;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_i_2__8 ;
  wire \Using_FPGA.Native_n_1 ;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:0]reg2_Data;

  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_i_2__8 [4]),
        .A1(\Using_FPGA.Native_i_2__8 [3]),
        .A2(\Using_FPGA.Native_i_2__8 [2]),
        .A3(\Using_FPGA.Native_i_2__8 [1]),
        .A4(\Using_FPGA.Native_i_2__8 [0]),
        .D(ex_Result),
        .DPO(reg2_Data),
        .DPRA0(imm_Value[4]),
        .DPRA1(imm_Value[3]),
        .DPRA2(imm_Value[2]),
        .DPRA3(imm_Value[1]),
        .DPRA4(imm_Value[0]),
        .SPO(\Using_FPGA.Native_n_1 ),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_454
   (Reg1_Data,
    Data_Write,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_0 ,
    reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_0 ;
  input [0:4]reg1_Addr;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire [0:4]reg1_Addr;

  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_0 [4]),
        .A1(\Using_FPGA.Native_0 [3]),
        .A2(\Using_FPGA.Native_0 [2]),
        .A3(\Using_FPGA.Native_0 [1]),
        .A4(\Using_FPGA.Native_0 [0]),
        .D(ex_Result),
        .DPO(Reg1_Data),
        .DPRA0(reg1_Addr[0]),
        .DPRA1(reg1_Addr[1]),
        .DPRA2(reg1_Addr[2]),
        .DPRA3(reg1_Addr[3]),
        .DPRA4(reg1_Addr[4]),
        .SPO(Data_Write),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_455
   (reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_i_2__26 ,
    imm_Value);
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_i_2__26 ;
  input [4:0]imm_Value;

  wire Clk;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_i_2__26 ;
  wire \Using_FPGA.Native_n_1 ;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:0]reg2_Data;

  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_i_2__26 [4]),
        .A1(\Using_FPGA.Native_i_2__26 [3]),
        .A2(\Using_FPGA.Native_i_2__26 [2]),
        .A3(\Using_FPGA.Native_i_2__26 [1]),
        .A4(\Using_FPGA.Native_i_2__26 [0]),
        .D(ex_Result),
        .DPO(reg2_Data),
        .DPRA0(imm_Value[4]),
        .DPRA1(imm_Value[3]),
        .DPRA2(imm_Value[2]),
        .DPRA3(imm_Value[1]),
        .DPRA4(imm_Value[0]),
        .SPO(\Using_FPGA.Native_n_1 ),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_456
   (Reg1_Data,
    Data_Write,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_0 ,
    reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_0 ;
  input [0:4]reg1_Addr;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire [0:4]reg1_Addr;

  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_0 [4]),
        .A1(\Using_FPGA.Native_0 [3]),
        .A2(\Using_FPGA.Native_0 [2]),
        .A3(\Using_FPGA.Native_0 [1]),
        .A4(\Using_FPGA.Native_0 [0]),
        .D(ex_Result),
        .DPO(Reg1_Data),
        .DPRA0(reg1_Addr[0]),
        .DPRA1(reg1_Addr[1]),
        .DPRA2(reg1_Addr[2]),
        .DPRA3(reg1_Addr[3]),
        .DPRA4(reg1_Addr[4]),
        .SPO(Data_Write),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_457
   (reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_i_2__25 ,
    imm_Value);
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_i_2__25 ;
  input [4:0]imm_Value;

  wire Clk;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_i_2__25 ;
  wire \Using_FPGA.Native_n_1 ;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:0]reg2_Data;

  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_i_2__25 [4]),
        .A1(\Using_FPGA.Native_i_2__25 [3]),
        .A2(\Using_FPGA.Native_i_2__25 [2]),
        .A3(\Using_FPGA.Native_i_2__25 [1]),
        .A4(\Using_FPGA.Native_i_2__25 [0]),
        .D(ex_Result),
        .DPO(reg2_Data),
        .DPRA0(imm_Value[4]),
        .DPRA1(imm_Value[3]),
        .DPRA2(imm_Value[2]),
        .DPRA3(imm_Value[1]),
        .DPRA4(imm_Value[0]),
        .SPO(\Using_FPGA.Native_n_1 ),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_458
   (Reg1_Data,
    Data_Write,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_0 ,
    reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_0 ;
  input [0:4]reg1_Addr;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire [0:4]reg1_Addr;

  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_0 [4]),
        .A1(\Using_FPGA.Native_0 [3]),
        .A2(\Using_FPGA.Native_0 [2]),
        .A3(\Using_FPGA.Native_0 [1]),
        .A4(\Using_FPGA.Native_0 [0]),
        .D(ex_Result),
        .DPO(Reg1_Data),
        .DPRA0(reg1_Addr[0]),
        .DPRA1(reg1_Addr[1]),
        .DPRA2(reg1_Addr[2]),
        .DPRA3(reg1_Addr[3]),
        .DPRA4(reg1_Addr[4]),
        .SPO(Data_Write),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_459
   (reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_i_2__24 ,
    imm_Value);
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_i_2__24 ;
  input [4:0]imm_Value;

  wire Clk;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_i_2__24 ;
  wire \Using_FPGA.Native_n_1 ;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:0]reg2_Data;

  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_i_2__24 [4]),
        .A1(\Using_FPGA.Native_i_2__24 [3]),
        .A2(\Using_FPGA.Native_i_2__24 [2]),
        .A3(\Using_FPGA.Native_i_2__24 [1]),
        .A4(\Using_FPGA.Native_i_2__24 [0]),
        .D(ex_Result),
        .DPO(reg2_Data),
        .DPRA0(imm_Value[4]),
        .DPRA1(imm_Value[3]),
        .DPRA2(imm_Value[2]),
        .DPRA3(imm_Value[1]),
        .DPRA4(imm_Value[0]),
        .SPO(\Using_FPGA.Native_n_1 ),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_460
   (Reg1_Data,
    Data_Write,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_0 ,
    reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_0 ;
  input [0:4]reg1_Addr;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire [0:4]reg1_Addr;

  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_0 [4]),
        .A1(\Using_FPGA.Native_0 [3]),
        .A2(\Using_FPGA.Native_0 [2]),
        .A3(\Using_FPGA.Native_0 [1]),
        .A4(\Using_FPGA.Native_0 [0]),
        .D(ex_Result),
        .DPO(Reg1_Data),
        .DPRA0(reg1_Addr[0]),
        .DPRA1(reg1_Addr[1]),
        .DPRA2(reg1_Addr[2]),
        .DPRA3(reg1_Addr[3]),
        .DPRA4(reg1_Addr[4]),
        .SPO(Data_Write),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_461
   (reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_i_2__23 ,
    imm_Value);
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_i_2__23 ;
  input [4:0]imm_Value;

  wire Clk;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_i_2__23 ;
  wire \Using_FPGA.Native_n_1 ;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:0]reg2_Data;

  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_i_2__23 [4]),
        .A1(\Using_FPGA.Native_i_2__23 [3]),
        .A2(\Using_FPGA.Native_i_2__23 [2]),
        .A3(\Using_FPGA.Native_i_2__23 [1]),
        .A4(\Using_FPGA.Native_i_2__23 [0]),
        .D(ex_Result),
        .DPO(reg2_Data),
        .DPRA0(imm_Value[4]),
        .DPRA1(imm_Value[3]),
        .DPRA2(imm_Value[2]),
        .DPRA3(imm_Value[1]),
        .DPRA4(imm_Value[0]),
        .SPO(\Using_FPGA.Native_n_1 ),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_462
   (Reg1_Data,
    Data_Write,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_0 ,
    reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_0 ;
  input [0:4]reg1_Addr;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire [0:4]reg1_Addr;

  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_0 [4]),
        .A1(\Using_FPGA.Native_0 [3]),
        .A2(\Using_FPGA.Native_0 [2]),
        .A3(\Using_FPGA.Native_0 [1]),
        .A4(\Using_FPGA.Native_0 [0]),
        .D(ex_Result),
        .DPO(Reg1_Data),
        .DPRA0(reg1_Addr[0]),
        .DPRA1(reg1_Addr[1]),
        .DPRA2(reg1_Addr[2]),
        .DPRA3(reg1_Addr[3]),
        .DPRA4(reg1_Addr[4]),
        .SPO(Data_Write),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_463
   (reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_i_2__22 ,
    imm_Value);
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_i_2__22 ;
  input [4:0]imm_Value;

  wire Clk;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_i_2__22 ;
  wire \Using_FPGA.Native_n_1 ;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:0]reg2_Data;

  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_i_2__22 [4]),
        .A1(\Using_FPGA.Native_i_2__22 [3]),
        .A2(\Using_FPGA.Native_i_2__22 [2]),
        .A3(\Using_FPGA.Native_i_2__22 [1]),
        .A4(\Using_FPGA.Native_i_2__22 [0]),
        .D(ex_Result),
        .DPO(reg2_Data),
        .DPRA0(imm_Value[4]),
        .DPRA1(imm_Value[3]),
        .DPRA2(imm_Value[2]),
        .DPRA3(imm_Value[1]),
        .DPRA4(imm_Value[0]),
        .SPO(\Using_FPGA.Native_n_1 ),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_464
   (Reg1_Data,
    Data_Write,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_0 ,
    reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_0 ;
  input [0:4]reg1_Addr;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire [0:4]reg1_Addr;

  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_0 [4]),
        .A1(\Using_FPGA.Native_0 [3]),
        .A2(\Using_FPGA.Native_0 [2]),
        .A3(\Using_FPGA.Native_0 [1]),
        .A4(\Using_FPGA.Native_0 [0]),
        .D(ex_Result),
        .DPO(Reg1_Data),
        .DPRA0(reg1_Addr[0]),
        .DPRA1(reg1_Addr[1]),
        .DPRA2(reg1_Addr[2]),
        .DPRA3(reg1_Addr[3]),
        .DPRA4(reg1_Addr[4]),
        .SPO(Data_Write),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_465
   (reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_i_2__21 ,
    imm_Value);
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_i_2__21 ;
  input [4:0]imm_Value;

  wire Clk;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_i_2__21 ;
  wire \Using_FPGA.Native_n_1 ;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:0]reg2_Data;

  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_i_2__21 [4]),
        .A1(\Using_FPGA.Native_i_2__21 [3]),
        .A2(\Using_FPGA.Native_i_2__21 [2]),
        .A3(\Using_FPGA.Native_i_2__21 [1]),
        .A4(\Using_FPGA.Native_i_2__21 [0]),
        .D(ex_Result),
        .DPO(reg2_Data),
        .DPRA0(imm_Value[4]),
        .DPRA1(imm_Value[3]),
        .DPRA2(imm_Value[2]),
        .DPRA3(imm_Value[1]),
        .DPRA4(imm_Value[0]),
        .SPO(\Using_FPGA.Native_n_1 ),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_466
   (Reg1_Data,
    Data_Write,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_0 ,
    reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_0 ;
  input [0:4]reg1_Addr;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire [0:4]reg1_Addr;

  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_0 [4]),
        .A1(\Using_FPGA.Native_0 [3]),
        .A2(\Using_FPGA.Native_0 [2]),
        .A3(\Using_FPGA.Native_0 [1]),
        .A4(\Using_FPGA.Native_0 [0]),
        .D(ex_Result),
        .DPO(Reg1_Data),
        .DPRA0(reg1_Addr[0]),
        .DPRA1(reg1_Addr[1]),
        .DPRA2(reg1_Addr[2]),
        .DPRA3(reg1_Addr[3]),
        .DPRA4(reg1_Addr[4]),
        .SPO(Data_Write),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_467
   (reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_i_2__20 ,
    imm_Value);
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_i_2__20 ;
  input [4:0]imm_Value;

  wire Clk;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_i_2__20 ;
  wire \Using_FPGA.Native_n_1 ;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:0]reg2_Data;

  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_i_2__20 [4]),
        .A1(\Using_FPGA.Native_i_2__20 [3]),
        .A2(\Using_FPGA.Native_i_2__20 [2]),
        .A3(\Using_FPGA.Native_i_2__20 [1]),
        .A4(\Using_FPGA.Native_i_2__20 [0]),
        .D(ex_Result),
        .DPO(reg2_Data),
        .DPRA0(imm_Value[4]),
        .DPRA1(imm_Value[3]),
        .DPRA2(imm_Value[2]),
        .DPRA3(imm_Value[1]),
        .DPRA4(imm_Value[0]),
        .SPO(\Using_FPGA.Native_n_1 ),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_468
   (Reg1_Data,
    Data_Write,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_0 ,
    reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_0 ;
  input [0:4]reg1_Addr;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire [0:4]reg1_Addr;

  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_0 [4]),
        .A1(\Using_FPGA.Native_0 [3]),
        .A2(\Using_FPGA.Native_0 [2]),
        .A3(\Using_FPGA.Native_0 [1]),
        .A4(\Using_FPGA.Native_0 [0]),
        .D(ex_Result),
        .DPO(Reg1_Data),
        .DPRA0(reg1_Addr[0]),
        .DPRA1(reg1_Addr[1]),
        .DPRA2(reg1_Addr[2]),
        .DPRA3(reg1_Addr[3]),
        .DPRA4(reg1_Addr[4]),
        .SPO(Data_Write),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_469
   (reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_i_2__19 ,
    imm_Value);
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_i_2__19 ;
  input [4:0]imm_Value;

  wire Clk;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_i_2__19 ;
  wire \Using_FPGA.Native_n_1 ;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:0]reg2_Data;

  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_i_2__19 [4]),
        .A1(\Using_FPGA.Native_i_2__19 [3]),
        .A2(\Using_FPGA.Native_i_2__19 [2]),
        .A3(\Using_FPGA.Native_i_2__19 [1]),
        .A4(\Using_FPGA.Native_i_2__19 [0]),
        .D(ex_Result),
        .DPO(reg2_Data),
        .DPRA0(imm_Value[4]),
        .DPRA1(imm_Value[3]),
        .DPRA2(imm_Value[2]),
        .DPRA3(imm_Value[1]),
        .DPRA4(imm_Value[0]),
        .SPO(\Using_FPGA.Native_n_1 ),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_470
   (Reg1_Data,
    Data_Write,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_0 ,
    reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_0 ;
  input [0:4]reg1_Addr;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire [0:4]reg1_Addr;

  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_0 [4]),
        .A1(\Using_FPGA.Native_0 [3]),
        .A2(\Using_FPGA.Native_0 [2]),
        .A3(\Using_FPGA.Native_0 [1]),
        .A4(\Using_FPGA.Native_0 [0]),
        .D(ex_Result),
        .DPO(Reg1_Data),
        .DPRA0(reg1_Addr[0]),
        .DPRA1(reg1_Addr[1]),
        .DPRA2(reg1_Addr[2]),
        .DPRA3(reg1_Addr[3]),
        .DPRA4(reg1_Addr[4]),
        .SPO(Data_Write),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_471
   (reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_i_2__18 ,
    imm_Value);
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_i_2__18 ;
  input [4:0]imm_Value;

  wire Clk;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_i_2__18 ;
  wire \Using_FPGA.Native_n_1 ;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:0]reg2_Data;

  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_i_2__18 [4]),
        .A1(\Using_FPGA.Native_i_2__18 [3]),
        .A2(\Using_FPGA.Native_i_2__18 [2]),
        .A3(\Using_FPGA.Native_i_2__18 [1]),
        .A4(\Using_FPGA.Native_i_2__18 [0]),
        .D(ex_Result),
        .DPO(reg2_Data),
        .DPRA0(imm_Value[4]),
        .DPRA1(imm_Value[3]),
        .DPRA2(imm_Value[2]),
        .DPRA3(imm_Value[1]),
        .DPRA4(imm_Value[0]),
        .SPO(\Using_FPGA.Native_n_1 ),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_472
   (Reg1_Data,
    Data_Write,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_0 ,
    reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_0 ;
  input [0:4]reg1_Addr;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire [0:4]reg1_Addr;

  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_0 [4]),
        .A1(\Using_FPGA.Native_0 [3]),
        .A2(\Using_FPGA.Native_0 [2]),
        .A3(\Using_FPGA.Native_0 [1]),
        .A4(\Using_FPGA.Native_0 [0]),
        .D(ex_Result),
        .DPO(Reg1_Data),
        .DPRA0(reg1_Addr[0]),
        .DPRA1(reg1_Addr[1]),
        .DPRA2(reg1_Addr[2]),
        .DPRA3(reg1_Addr[3]),
        .DPRA4(reg1_Addr[4]),
        .SPO(Data_Write),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_473
   (reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_i_2__17 ,
    imm_Value);
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_i_2__17 ;
  input [4:0]imm_Value;

  wire Clk;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_i_2__17 ;
  wire \Using_FPGA.Native_n_1 ;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:0]reg2_Data;

  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_i_2__17 [4]),
        .A1(\Using_FPGA.Native_i_2__17 [3]),
        .A2(\Using_FPGA.Native_i_2__17 [2]),
        .A3(\Using_FPGA.Native_i_2__17 [1]),
        .A4(\Using_FPGA.Native_i_2__17 [0]),
        .D(ex_Result),
        .DPO(reg2_Data),
        .DPRA0(imm_Value[4]),
        .DPRA1(imm_Value[3]),
        .DPRA2(imm_Value[2]),
        .DPRA3(imm_Value[1]),
        .DPRA4(imm_Value[0]),
        .SPO(\Using_FPGA.Native_n_1 ),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_474
   (Reg1_Data,
    Data_Write,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_0 ,
    reg1_Addr);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_0 ;
  input [0:4]reg1_Addr;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire [0:4]reg1_Addr;

  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_0 [4]),
        .A1(\Using_FPGA.Native_0 [3]),
        .A2(\Using_FPGA.Native_0 [2]),
        .A3(\Using_FPGA.Native_0 [1]),
        .A4(\Using_FPGA.Native_0 [0]),
        .D(ex_Result),
        .DPO(Reg1_Data),
        .DPRA0(reg1_Addr[0]),
        .DPRA1(reg1_Addr[1]),
        .DPRA2(reg1_Addr[2]),
        .DPRA3(reg1_Addr[3]),
        .DPRA4(reg1_Addr[4]),
        .SPO(Data_Write),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

(* ORIG_REF_NAME = "MB_RAM32X1D" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_475
   (reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native_i_2__7 ,
    imm_Value);
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native_i_2__7 ;
  input [4:0]imm_Value;

  wire Clk;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native_i_2__7 ;
  wire \Using_FPGA.Native_n_1 ;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:0]reg2_Data;

  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM32X1D #(
    .INIT(32'h00000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.A0(\Using_FPGA.Native_i_2__7 [4]),
        .A1(\Using_FPGA.Native_i_2__7 [3]),
        .A2(\Using_FPGA.Native_i_2__7 [2]),
        .A3(\Using_FPGA.Native_i_2__7 [1]),
        .A4(\Using_FPGA.Native_i_2__7 [0]),
        .D(ex_Result),
        .DPO(reg2_Data),
        .DPRA0(imm_Value[4]),
        .DPRA1(imm_Value[3]),
        .DPRA2(imm_Value[2]),
        .DPRA3(imm_Value[1]),
        .DPRA4(imm_Value[0]),
        .SPO(\Using_FPGA.Native_n_1 ),
        .WCLK(Clk),
        .WE(Reg_Write));
endmodule

module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_SRLC16E
   (SRL16_Sel_7,
    which_pc__0,
    SRL16_MC15_7,
    Address,
    Dbg_Clk,
    Dbg_Reg_En);
  output SRL16_Sel_7;
  output which_pc__0;
  input SRL16_MC15_7;
  input [1:0]Address;
  input Dbg_Clk;
  input [0:7]Dbg_Reg_En;

  wire [1:0]Address;
  wire Dbg_Clk;
  wire [0:7]Dbg_Reg_En;
  wire SRL16_MC15_7;
  wire SRL16_Sel_7;
  wire \Use_unisim.MB_SRL16CE_I1_i_2_n_0 ;
  wire \Use_unisim.MB_SRL16CE_I1_i_3_n_0 ;
  wire \Use_unisim.MB_SRL16CE_I1_n_1 ;
  wire which_pc__0;

  (* BOX_TYPE = "PRIMITIVE" *) 
  SRLC16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16CE_I1 
       (.A0(1'b0),
        .A1(1'b0),
        .A2(Address[0]),
        .A3(Address[1]),
        .CE(which_pc__0),
        .CLK(Dbg_Clk),
        .D(SRL16_MC15_7),
        .Q(SRL16_Sel_7),
        .Q15(\Use_unisim.MB_SRL16CE_I1_n_1 ));
  LUT6 #(
    .INIT(64'h0000000000010000)) 
    \Use_unisim.MB_SRL16CE_I1_i_1 
       (.I0(Dbg_Reg_En[2]),
        .I1(Dbg_Reg_En[7]),
        .I2(\Use_unisim.MB_SRL16CE_I1_i_2_n_0 ),
        .I3(Dbg_Reg_En[6]),
        .I4(Dbg_Reg_En[3]),
        .I5(\Use_unisim.MB_SRL16CE_I1_i_3_n_0 ),
        .O(which_pc__0));
  LUT2 #(
    .INIT(4'hE)) 
    \Use_unisim.MB_SRL16CE_I1_i_2 
       (.I0(Dbg_Reg_En[1]),
        .I1(Dbg_Reg_En[0]),
        .O(\Use_unisim.MB_SRL16CE_I1_i_2_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \Use_unisim.MB_SRL16CE_I1_i_3 
       (.I0(Dbg_Reg_En[4]),
        .I1(Dbg_Reg_En[5]),
        .O(\Use_unisim.MB_SRL16CE_I1_i_3_n_0 ));
endmodule

(* ORIG_REF_NAME = "MB_SRLC16E" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_SRLC16E_35
   (SRL16_Sel_6,
    SRL16_MC15_7,
    which_pc__0,
    SRL16_MC15_6,
    Address,
    Dbg_Clk);
  output SRL16_Sel_6;
  output SRL16_MC15_7;
  input which_pc__0;
  input SRL16_MC15_6;
  input [3:0]Address;
  input Dbg_Clk;

  wire [3:0]Address;
  wire Dbg_Clk;
  wire SRL16_MC15_6;
  wire SRL16_MC15_7;
  wire SRL16_Sel_6;
  wire which_pc__0;

  (* BOX_TYPE = "PRIMITIVE" *) 
  SRLC16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16CE_I1 
       (.A0(Address[0]),
        .A1(Address[1]),
        .A2(Address[2]),
        .A3(Address[3]),
        .CE(which_pc__0),
        .CLK(Dbg_Clk),
        .D(SRL16_MC15_6),
        .Q(SRL16_Sel_6),
        .Q15(SRL16_MC15_7));
endmodule

(* ORIG_REF_NAME = "MB_SRLC16E" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_SRLC16E_37
   (SRL16_Sel_5,
    SRL16_MC15_6,
    which_pc__0,
    SRL16_MC15_5,
    Address,
    Dbg_Clk);
  output SRL16_Sel_5;
  output SRL16_MC15_6;
  input which_pc__0;
  input SRL16_MC15_5;
  input [3:0]Address;
  input Dbg_Clk;

  wire [3:0]Address;
  wire Dbg_Clk;
  wire SRL16_MC15_5;
  wire SRL16_MC15_6;
  wire SRL16_Sel_5;
  wire which_pc__0;

  (* BOX_TYPE = "PRIMITIVE" *) 
  SRLC16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16CE_I1 
       (.A0(Address[0]),
        .A1(Address[1]),
        .A2(Address[2]),
        .A3(Address[3]),
        .CE(which_pc__0),
        .CLK(Dbg_Clk),
        .D(SRL16_MC15_5),
        .Q(SRL16_Sel_5),
        .Q15(SRL16_MC15_6));
endmodule

(* ORIG_REF_NAME = "MB_SRLC16E" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_SRLC16E_39
   (SRL16_Sel_4,
    SRL16_MC15_5,
    which_pc__0,
    SRL16_MC15_4,
    Address,
    Dbg_Clk);
  output SRL16_Sel_4;
  output SRL16_MC15_5;
  input which_pc__0;
  input SRL16_MC15_4;
  input [3:0]Address;
  input Dbg_Clk;

  wire [3:0]Address;
  wire Dbg_Clk;
  wire SRL16_MC15_4;
  wire SRL16_MC15_5;
  wire SRL16_Sel_4;
  wire which_pc__0;

  (* BOX_TYPE = "PRIMITIVE" *) 
  SRLC16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16CE_I1 
       (.A0(Address[0]),
        .A1(Address[1]),
        .A2(Address[2]),
        .A3(Address[3]),
        .CE(which_pc__0),
        .CLK(Dbg_Clk),
        .D(SRL16_MC15_4),
        .Q(SRL16_Sel_4),
        .Q15(SRL16_MC15_5));
endmodule

(* ORIG_REF_NAME = "MB_SRLC16E" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_SRLC16E_41
   (SRL16_Sel_3,
    SRL16_MC15_4,
    which_pc__0,
    SRL16_MC15_3,
    Dbg_Clk);
  output SRL16_Sel_3;
  output SRL16_MC15_4;
  input which_pc__0;
  input SRL16_MC15_3;
  input Dbg_Clk;

  wire Dbg_Clk;
  wire SRL16_MC15_3;
  wire SRL16_MC15_4;
  wire SRL16_Sel_3;
  wire which_pc__0;

  (* BOX_TYPE = "PRIMITIVE" *) 
  SRLC16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16CE_I1 
       (.A0(1'b0),
        .A1(1'b0),
        .A2(1'b0),
        .A3(1'b0),
        .CE(which_pc__0),
        .CLK(Dbg_Clk),
        .D(SRL16_MC15_3),
        .Q(SRL16_Sel_3),
        .Q15(SRL16_MC15_4));
endmodule

(* ORIG_REF_NAME = "MB_SRLC16E" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_SRLC16E_43
   (SRL16_Sel_2,
    SRL16_MC15_3,
    which_pc__0,
    SRL16_MC15_2,
    Dbg_Clk);
  output SRL16_Sel_2;
  output SRL16_MC15_3;
  input which_pc__0;
  input SRL16_MC15_2;
  input Dbg_Clk;

  wire Dbg_Clk;
  wire SRL16_MC15_2;
  wire SRL16_MC15_3;
  wire SRL16_Sel_2;
  wire which_pc__0;

  (* BOX_TYPE = "PRIMITIVE" *) 
  SRLC16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16CE_I1 
       (.A0(1'b0),
        .A1(1'b0),
        .A2(1'b0),
        .A3(1'b0),
        .CE(which_pc__0),
        .CLK(Dbg_Clk),
        .D(SRL16_MC15_2),
        .Q(SRL16_Sel_2),
        .Q15(SRL16_MC15_3));
endmodule

(* ORIG_REF_NAME = "MB_SRLC16E" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_SRLC16E_45
   (SRL16_Sel_1,
    SRL16_MC15_2,
    which_pc__0,
    SRL16_MC15_1,
    Dbg_Clk);
  output SRL16_Sel_1;
  output SRL16_MC15_2;
  input which_pc__0;
  input SRL16_MC15_1;
  input Dbg_Clk;

  wire Dbg_Clk;
  wire SRL16_MC15_1;
  wire SRL16_MC15_2;
  wire SRL16_Sel_1;
  wire which_pc__0;

  (* BOX_TYPE = "PRIMITIVE" *) 
  SRLC16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16CE_I1 
       (.A0(1'b0),
        .A1(1'b0),
        .A2(1'b0),
        .A3(1'b0),
        .CE(which_pc__0),
        .CLK(Dbg_Clk),
        .D(SRL16_MC15_1),
        .Q(SRL16_Sel_1),
        .Q15(SRL16_MC15_2));
endmodule

(* ORIG_REF_NAME = "MB_SRLC16E" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_SRLC16E_47
   (SRL16_Sel_0,
    SRL16_MC15_1,
    which_pc__0,
    Dbg_TDI,
    Dbg_Clk);
  output SRL16_Sel_0;
  output SRL16_MC15_1;
  input which_pc__0;
  input Dbg_TDI;
  input Dbg_Clk;

  wire Dbg_Clk;
  wire Dbg_TDI;
  wire SRL16_MC15_1;
  wire SRL16_Sel_0;
  wire which_pc__0;

  (* BOX_TYPE = "PRIMITIVE" *) 
  SRLC16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16CE_I1 
       (.A0(1'b0),
        .A1(1'b0),
        .A2(1'b0),
        .A3(1'b0),
        .CE(which_pc__0),
        .CLK(Dbg_Clk),
        .D(Dbg_TDI),
        .Q(SRL16_Sel_0),
        .Q15(SRL16_MC15_1));
endmodule

module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MSR_Reg
   (msr_I,
    I3,
    I3_0,
    I3_1,
    I3_2,
    \Using_FPGA.Native ,
    MSR_Rst,
    \Using_FPGA.Native_0 ,
    Clk,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 ,
    \Using_FPGA.Native_5 ,
    Address,
    \Using_dynamic_instr_Address.old_IE_value_reg );
  output [2:0]msr_I;
  output I3;
  output I3_0;
  output I3_1;
  output I3_2;
  output \Using_FPGA.Native ;
  input MSR_Rst;
  input \Using_FPGA.Native_0 ;
  input Clk;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input \Using_FPGA.Native_3 ;
  input \Using_FPGA.Native_4 ;
  input \Using_FPGA.Native_5 ;
  input [1:0]Address;
  input \Using_dynamic_instr_Address.old_IE_value_reg ;

  wire [1:0]Address;
  wire Clk;
  wire I3;
  wire I3_0;
  wire I3_1;
  wire I3_2;
  wire MSR_Rst;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_5 ;
  wire \Using_dynamic_instr_Address.old_IE_value_reg ;
  wire [2:0]msr_I;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MSR_Reg_Bit \MSR_Bits[28].Using_MSR_Reg_Bit.MSR_Reg_Bit_I 
       (.Address(Address[1]),
        .Clk(Clk),
        .I3_1(I3_1),
        .MSR_Rst(MSR_Rst),
        .\Using_FPGA.Native (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_5 ),
        .msr_I(msr_I[2]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MSR_Reg_Bit_722 \MSR_Bits[29].Using_MSR_Reg_Bit.MSR_Reg_Bit_I 
       (.Address(Address[0]),
        .Clk(Clk),
        .I3(I3),
        .I3_2(I3_2),
        .\Using_FPGA.Native (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_2 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_5 ),
        .msr_I(msr_I[1]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MSR_Reg_Bit_723 \MSR_Bits[30].Using_MSR_Reg_Bit.MSR_Reg_Bit_I 
       (.Clk(Clk),
        .I3_0(I3_0),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_3 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_4 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_5 ),
        .\Using_dynamic_instr_Address.old_IE_value_reg (\Using_dynamic_instr_Address.old_IE_value_reg ),
        .msr_I(msr_I[0]));
endmodule

module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MSR_Reg_Bit
   (msr_I,
    I3_1,
    MSR_Rst,
    \Using_FPGA.Native ,
    Clk,
    \Using_FPGA.Native_0 ,
    Address);
  output [0:0]msr_I;
  output I3_1;
  input MSR_Rst;
  input \Using_FPGA.Native ;
  input Clk;
  input \Using_FPGA.Native_0 ;
  input [0:0]Address;

  wire [0:0]Address;
  wire Clk;
  wire I3_1;
  wire MSR_Rst;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]msr_I;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRSE_726 MSR_I
       (.Address(Address),
        .Clk(Clk),
        .I3_1(I3_1),
        .MSR_Rst(MSR_Rst),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .msr_I(msr_I));
endmodule

(* ORIG_REF_NAME = "MSR_Reg_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MSR_Reg_Bit_722
   (msr_I,
    I3,
    I3_2,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    Clk,
    \Using_FPGA.Native_1 ,
    Address);
  output [0:0]msr_I;
  output I3;
  output I3_2;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input Clk;
  input \Using_FPGA.Native_1 ;
  input [0:0]Address;

  wire [0:0]Address;
  wire Clk;
  wire I3;
  wire I3_2;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire [0:0]msr_I;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRSE_725 MSR_I
       (.Address(Address),
        .Clk(Clk),
        .I3(I3),
        .I3_2(I3_2),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_1 ),
        .msr_I(msr_I));
endmodule

(* ORIG_REF_NAME = "MSR_Reg_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MSR_Reg_Bit_723
   (msr_I,
    I3_0,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Clk,
    \Using_FPGA.Native_2 ,
    \Using_dynamic_instr_Address.old_IE_value_reg );
  output [0:0]msr_I;
  output I3_0;
  output \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Clk;
  input \Using_FPGA.Native_2 ;
  input \Using_dynamic_instr_Address.old_IE_value_reg ;

  wire Clk;
  wire I3_0;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_dynamic_instr_Address.old_IE_value_reg ;
  wire [0:0]msr_I;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRSE_724 MSR_I
       (.Clk(Clk),
        .I3_0(I3_0),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_2 ),
        .\Using_dynamic_instr_Address.old_IE_value_reg (\Using_dynamic_instr_Address.old_IE_value_reg ),
        .msr_I(msr_I));
endmodule

(* C_ADDR_TAG_BITS = "0" *) (* C_ALLOW_DCACHE_WR = "1" *) (* C_ALLOW_ICACHE_WR = "1" *) 
(* C_AREA_OPTIMIZED = "1" *) (* C_ASYNC_INTERRUPT = "1" *) (* C_ASYNC_WAKEUP = "3" *) 
(* C_AVOID_PRIMITIVES = "0" *) (* C_BASE_VECTORS = "64'b0000000000000000000000000000000000000000000000000000000000000000" *) (* C_BRANCH_TARGET_CACHE_SIZE = "0" *) 
(* C_CACHE_BYTE_SIZE = "8192" *) (* C_DADDR_SIZE = "32" *) (* C_DATA_SIZE = "32" *) 
(* C_DCACHE_ADDR_TAG = "0" *) (* C_DCACHE_ALWAYS_USED = "1" *) (* C_DCACHE_BASEADDR = "64'b0000000000000000000000000000000000000000000000000000000000000000" *) 
(* C_DCACHE_BYTE_SIZE = "8192" *) (* C_DCACHE_DATA_WIDTH = "0" *) (* C_DCACHE_FORCE_TAG_LUTRAM = "0" *) 
(* C_DCACHE_HIGHADDR = "64'b0000000000000000000000000000000000111111111111111111111111111111" *) (* C_DCACHE_LINE_LEN = "4" *) (* C_DCACHE_USE_WRITEBACK = "0" *) 
(* C_DCACHE_VICTIMS = "0" *) (* C_DEBUG_COUNTER_WIDTH = "32" *) (* C_DEBUG_ENABLED = "1" *) 
(* C_DEBUG_EVENT_COUNTERS = "5" *) (* C_DEBUG_EXTERNAL_TRACE = "0" *) (* C_DEBUG_INTERFACE = "0" *) 
(* C_DEBUG_LATENCY_COUNTERS = "1" *) (* C_DEBUG_PROFILE_SIZE = "0" *) (* C_DEBUG_TRACE_ASYNC_RESET = "0" *) 
(* C_DEBUG_TRACE_SIZE = "8192" *) (* C_DIV_ZERO_EXCEPTION = "0" *) (* C_DYNAMIC_BUS_SIZING = "0" *) 
(* C_D_AXI = "1" *) (* C_D_LMB = "1" *) (* C_D_LMB_PROTOCOL = "0" *) 
(* C_ECC_USE_CE_EXCEPTION = "0" *) (* C_EDGE_IS_POSITIVE = "1" *) (* C_ENDIANNESS = "1" *) 
(* C_FAMILY = "artix7" *) (* C_FAULT_TOLERANT = "0" *) (* C_FPU_EXCEPTION = "0" *) 
(* C_FREQ = "100000000" *) (* C_FSL_EXCEPTION = "0" *) (* C_FSL_LINKS = "0" *) 
(* C_IADDR_SIZE = "32" *) (* C_ICACHE_ALWAYS_USED = "1" *) (* C_ICACHE_BASEADDR = "64'b0000000000000000000000000000000000000000000000000000000000000000" *) 
(* C_ICACHE_DATA_WIDTH = "0" *) (* C_ICACHE_FORCE_TAG_LUTRAM = "0" *) (* C_ICACHE_HIGHADDR = "64'b0000000000000000000000000000000000111111111111111111111111111111" *) 
(* C_ICACHE_LINE_LEN = "4" *) (* C_ICACHE_STREAMS = "0" *) (* C_ICACHE_VICTIMS = "0" *) 
(* C_ILL_OPCODE_EXCEPTION = "0" *) (* C_IMPRECISE_EXCEPTIONS = "0" *) (* C_INSTANCE = "bd_6665_microblaze_I_0" *) 
(* C_INSTR_SIZE = "32" *) (* C_INTERCONNECT = "2" *) (* C_INTERRUPT_IS_EDGE = "0" *) 
(* C_I_AXI = "0" *) (* C_I_LMB = "1" *) (* C_I_LMB_PROTOCOL = "0" *) 
(* C_LMB_DATA_SIZE = "32" *) (* C_LOCKSTEP_MASTER = "0" *) (* C_LOCKSTEP_SLAVE = "0" *) 
(* C_M0_AXIS_DATA_WIDTH = "32" *) (* C_M10_AXIS_DATA_WIDTH = "32" *) (* C_M11_AXIS_DATA_WIDTH = "32" *) 
(* C_M12_AXIS_DATA_WIDTH = "32" *) (* C_M13_AXIS_DATA_WIDTH = "32" *) (* C_M14_AXIS_DATA_WIDTH = "32" *) 
(* C_M15_AXIS_DATA_WIDTH = "32" *) (* C_M1_AXIS_DATA_WIDTH = "32" *) (* C_M2_AXIS_DATA_WIDTH = "32" *) 
(* C_M3_AXIS_DATA_WIDTH = "32" *) (* C_M4_AXIS_DATA_WIDTH = "32" *) (* C_M5_AXIS_DATA_WIDTH = "32" *) 
(* C_M6_AXIS_DATA_WIDTH = "32" *) (* C_M7_AXIS_DATA_WIDTH = "32" *) (* C_M8_AXIS_DATA_WIDTH = "32" *) 
(* C_M9_AXIS_DATA_WIDTH = "32" *) (* C_MMU_DTLB_SIZE = "4" *) (* C_MMU_ITLB_SIZE = "2" *) 
(* C_MMU_PRIVILEGED_INSTR = "0" *) (* C_MMU_TLB_ACCESS = "3" *) (* C_MMU_ZONES = "16" *) 
(* C_M_AXI_DC_ADDR_WIDTH = "32" *) (* C_M_AXI_DC_ARUSER_WIDTH = "5" *) (* C_M_AXI_DC_AWUSER_WIDTH = "5" *) 
(* C_M_AXI_DC_BUSER_WIDTH = "1" *) (* C_M_AXI_DC_DATA_WIDTH = "32" *) (* C_M_AXI_DC_EXCLUSIVE_ACCESS = "0" *) 
(* C_M_AXI_DC_RUSER_WIDTH = "1" *) (* C_M_AXI_DC_THREAD_ID_WIDTH = "1" *) (* C_M_AXI_DC_USER_VALUE = "31" *) 
(* C_M_AXI_DC_WUSER_WIDTH = "1" *) (* C_M_AXI_DP_ADDR_WIDTH = "32" *) (* C_M_AXI_DP_DATA_WIDTH = "32" *) 
(* C_M_AXI_DP_EXCLUSIVE_ACCESS = "0" *) (* C_M_AXI_DP_THREAD_ID_WIDTH = "1" *) (* C_M_AXI_D_BUS_EXCEPTION = "0" *) 
(* C_M_AXI_IC_ADDR_WIDTH = "32" *) (* C_M_AXI_IC_ARUSER_WIDTH = "5" *) (* C_M_AXI_IC_AWUSER_WIDTH = "5" *) 
(* C_M_AXI_IC_BUSER_WIDTH = "1" *) (* C_M_AXI_IC_DATA_WIDTH = "32" *) (* C_M_AXI_IC_RUSER_WIDTH = "1" *) 
(* C_M_AXI_IC_THREAD_ID_WIDTH = "1" *) (* C_M_AXI_IC_USER_VALUE = "31" *) (* C_M_AXI_IC_WUSER_WIDTH = "1" *) 
(* C_M_AXI_IP_ADDR_WIDTH = "32" *) (* C_M_AXI_IP_DATA_WIDTH = "32" *) (* C_M_AXI_IP_THREAD_ID_WIDTH = "1" *) 
(* C_M_AXI_I_BUS_EXCEPTION = "0" *) (* C_NUMBER_OF_PC_BRK = "1" *) (* C_NUMBER_OF_RD_ADDR_BRK = "0" *) 
(* C_NUMBER_OF_WR_ADDR_BRK = "0" *) (* C_NUM_SYNC_FF_CLK = "2" *) (* C_NUM_SYNC_FF_CLK_DEBUG = "2" *) 
(* C_NUM_SYNC_FF_CLK_IRQ = "1" *) (* C_NUM_SYNC_FF_DBG_CLK = "1" *) (* C_NUM_SYNC_FF_DBG_TRACE_CLK = "2" *) 
(* C_OPCODE_0x0_ILLEGAL = "0" *) (* C_OPTIMIZATION = "0" *) (* C_PC_WIDTH = "16" *) 
(* C_PIADDR_SIZE = "32" *) (* C_PVR = "0" *) (* C_PVR_USER1 = "8'b00000000" *) 
(* C_PVR_USER2 = "0" *) (* C_RESET_MSR = "0" *) (* C_S0_AXIS_DATA_WIDTH = "32" *) 
(* C_S10_AXIS_DATA_WIDTH = "32" *) (* C_S11_AXIS_DATA_WIDTH = "32" *) (* C_S12_AXIS_DATA_WIDTH = "32" *) 
(* C_S13_AXIS_DATA_WIDTH = "32" *) (* C_S14_AXIS_DATA_WIDTH = "32" *) (* C_S15_AXIS_DATA_WIDTH = "32" *) 
(* C_S1_AXIS_DATA_WIDTH = "32" *) (* C_S2_AXIS_DATA_WIDTH = "32" *) (* C_S3_AXIS_DATA_WIDTH = "32" *) 
(* C_S4_AXIS_DATA_WIDTH = "32" *) (* C_S5_AXIS_DATA_WIDTH = "32" *) (* C_S6_AXIS_DATA_WIDTH = "32" *) 
(* C_S7_AXIS_DATA_WIDTH = "32" *) (* C_S8_AXIS_DATA_WIDTH = "32" *) (* C_S9_AXIS_DATA_WIDTH = "32" *) 
(* C_SCO = "0" *) (* C_UNALIGNED_EXCEPTIONS = "0" *) (* C_USE_BARREL = "0" *) 
(* C_USE_BRANCH_TARGET_CACHE = "0" *) (* C_USE_CONFIG_RESET = "0" *) (* C_USE_DCACHE = "0" *) 
(* C_USE_DIV = "0" *) (* C_USE_EXTENDED_FSL_INSTR = "0" *) (* C_USE_EXT_BRK = "0" *) 
(* C_USE_EXT_NM_BRK = "0" *) (* C_USE_FPU = "0" *) (* C_USE_HW_MUL = "0" *) 
(* C_USE_ICACHE = "0" *) (* C_USE_INTERRUPT = "2" *) (* C_USE_MMU = "0" *) 
(* C_USE_MSR_INSTR = "0" *) (* C_USE_NON_SECURE = "0" *) (* C_USE_PCMP_INSTR = "0" *) 
(* C_USE_REORDER_INSTR = "0" *) (* C_USE_STACK_PROTECTION = "0" *) (* DowngradeIPIdentifiedWarnings = "yes" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MicroBlaze
   (RAM_To,
    RAM_From,
    Clk,
    Reset,
    Mb_Reset,
    Config_Reset,
    Scan_Reset_Sel,
    Scan_Reset,
    Scan_En,
    Reset_Mode,
    Non_Secure,
    Interrupt,
    Interrupt_Address,
    Interrupt_Ack,
    Ext_BRK,
    Ext_NM_BRK,
    Pause,
    Pause_Ack,
    Dbg_Continue,
    Dbg_Stop,
    Dbg_Intr,
    MB_Halted,
    MB_Error,
    Wakeup,
    Sleep,
    Hibernate,
    Suspend,
    Dbg_Wakeup,
    LOCKSTEP_Slave_In,
    LOCKSTEP_Master_Out,
    LOCKSTEP_Out,
    Instr_Addr,
    Instr,
    IFetch,
    I_AS,
    IReady,
    IWAIT,
    ICE,
    IUE,
    M_AXI_IP_AWID,
    M_AXI_IP_AWADDR,
    M_AXI_IP_AWLEN,
    M_AXI_IP_AWSIZE,
    M_AXI_IP_AWBURST,
    M_AXI_IP_AWLOCK,
    M_AXI_IP_AWCACHE,
    M_AXI_IP_AWPROT,
    M_AXI_IP_AWQOS,
    M_AXI_IP_AWVALID,
    M_AXI_IP_AWREADY,
    M_AXI_IP_WDATA,
    M_AXI_IP_WSTRB,
    M_AXI_IP_WLAST,
    M_AXI_IP_WVALID,
    M_AXI_IP_WREADY,
    M_AXI_IP_BID,
    M_AXI_IP_BRESP,
    M_AXI_IP_BVALID,
    M_AXI_IP_BREADY,
    M_AXI_IP_ARID,
    M_AXI_IP_ARADDR,
    M_AXI_IP_ARLEN,
    M_AXI_IP_ARSIZE,
    M_AXI_IP_ARBURST,
    M_AXI_IP_ARLOCK,
    M_AXI_IP_ARCACHE,
    M_AXI_IP_ARPROT,
    M_AXI_IP_ARQOS,
    M_AXI_IP_ARVALID,
    M_AXI_IP_ARREADY,
    M_AXI_IP_RID,
    M_AXI_IP_RDATA,
    M_AXI_IP_RRESP,
    M_AXI_IP_RLAST,
    M_AXI_IP_RVALID,
    M_AXI_IP_RREADY,
    Data_Addr,
    Data_Read,
    Data_Write,
    D_AS,
    Read_Strobe,
    Write_Strobe,
    DReady,
    DWait,
    DCE,
    DUE,
    Byte_Enable,
    M_AXI_DP_AWID,
    M_AXI_DP_AWADDR,
    M_AXI_DP_AWLEN,
    M_AXI_DP_AWSIZE,
    M_AXI_DP_AWBURST,
    M_AXI_DP_AWLOCK,
    M_AXI_DP_AWCACHE,
    M_AXI_DP_AWPROT,
    M_AXI_DP_AWQOS,
    M_AXI_DP_AWVALID,
    M_AXI_DP_AWREADY,
    M_AXI_DP_WDATA,
    M_AXI_DP_WSTRB,
    M_AXI_DP_WLAST,
    M_AXI_DP_WVALID,
    M_AXI_DP_WREADY,
    M_AXI_DP_BID,
    M_AXI_DP_BRESP,
    M_AXI_DP_BVALID,
    M_AXI_DP_BREADY,
    M_AXI_DP_ARID,
    M_AXI_DP_ARADDR,
    M_AXI_DP_ARLEN,
    M_AXI_DP_ARSIZE,
    M_AXI_DP_ARBURST,
    M_AXI_DP_ARLOCK,
    M_AXI_DP_ARCACHE,
    M_AXI_DP_ARPROT,
    M_AXI_DP_ARQOS,
    M_AXI_DP_ARVALID,
    M_AXI_DP_ARREADY,
    M_AXI_DP_RID,
    M_AXI_DP_RDATA,
    M_AXI_DP_RRESP,
    M_AXI_DP_RLAST,
    M_AXI_DP_RVALID,
    M_AXI_DP_RREADY,
    Dbg_Disable,
    Dbg_Clk,
    Dbg_TDI,
    Dbg_TDO,
    Dbg_Reg_En,
    Dbg_Shift,
    Dbg_Capture,
    Dbg_Update,
    Debug_Rst,
    Dbg_Trig_In,
    Dbg_Trig_Ack_In,
    Dbg_Trig_Out,
    Dbg_Trig_Ack_Out,
    Dbg_Trace_Clk,
    Dbg_Trace_Data,
    Dbg_Trace_Ready,
    Dbg_Trace_Valid,
    Dbg_AWADDR,
    Dbg_AWVALID,
    Dbg_AWREADY,
    Dbg_WDATA,
    Dbg_WVALID,
    Dbg_WREADY,
    Dbg_BRESP,
    Dbg_BVALID,
    Dbg_BREADY,
    Dbg_ARADDR,
    Dbg_ARVALID,
    Dbg_ARREADY,
    Dbg_RDATA,
    Dbg_RRESP,
    Dbg_RVALID,
    Dbg_RREADY,
    DEBUG_ACLK,
    DEBUG_ARESETN,
    Trace_Instruction,
    Trace_Valid_Instr,
    Trace_PC,
    Trace_Reg_Write,
    Trace_Reg_Addr,
    Trace_MSR_Reg,
    Trace_PID_Reg,
    Trace_New_Reg_Value,
    Trace_Exception_Taken,
    Trace_Exception_Kind,
    Trace_Jump_Taken,
    Trace_Delay_Slot,
    Trace_Data_Address,
    Trace_Data_Write_Value,
    Trace_Data_Byte_Enable,
    Trace_Data_Access,
    Trace_Data_Read,
    Trace_Data_Write,
    Trace_DCache_Req,
    Trace_DCache_Hit,
    Trace_DCache_Rdy,
    Trace_DCache_Read,
    Trace_ICache_Req,
    Trace_ICache_Hit,
    Trace_ICache_Rdy,
    Trace_OF_PipeRun,
    Trace_EX_PipeRun,
    Trace_MEM_PipeRun,
    Trace_MB_Halted,
    Trace_Jump_Hit,
    M0_AXIS_TLAST,
    M0_AXIS_TDATA,
    M0_AXIS_TVALID,
    M0_AXIS_TREADY,
    M1_AXIS_TLAST,
    M1_AXIS_TDATA,
    M1_AXIS_TVALID,
    M1_AXIS_TREADY,
    M2_AXIS_TLAST,
    M2_AXIS_TDATA,
    M2_AXIS_TVALID,
    M2_AXIS_TREADY,
    M3_AXIS_TLAST,
    M3_AXIS_TDATA,
    M3_AXIS_TVALID,
    M3_AXIS_TREADY,
    M4_AXIS_TLAST,
    M4_AXIS_TDATA,
    M4_AXIS_TVALID,
    M4_AXIS_TREADY,
    M5_AXIS_TLAST,
    M5_AXIS_TDATA,
    M5_AXIS_TVALID,
    M5_AXIS_TREADY,
    M6_AXIS_TLAST,
    M6_AXIS_TDATA,
    M6_AXIS_TVALID,
    M6_AXIS_TREADY,
    M7_AXIS_TLAST,
    M7_AXIS_TDATA,
    M7_AXIS_TVALID,
    M7_AXIS_TREADY,
    M8_AXIS_TLAST,
    M8_AXIS_TDATA,
    M8_AXIS_TVALID,
    M8_AXIS_TREADY,
    M9_AXIS_TLAST,
    M9_AXIS_TDATA,
    M9_AXIS_TVALID,
    M9_AXIS_TREADY,
    M10_AXIS_TLAST,
    M10_AXIS_TDATA,
    M10_AXIS_TVALID,
    M10_AXIS_TREADY,
    M11_AXIS_TLAST,
    M11_AXIS_TDATA,
    M11_AXIS_TVALID,
    M11_AXIS_TREADY,
    M12_AXIS_TLAST,
    M12_AXIS_TDATA,
    M12_AXIS_TVALID,
    M12_AXIS_TREADY,
    M13_AXIS_TLAST,
    M13_AXIS_TDATA,
    M13_AXIS_TVALID,
    M13_AXIS_TREADY,
    M14_AXIS_TLAST,
    M14_AXIS_TDATA,
    M14_AXIS_TVALID,
    M14_AXIS_TREADY,
    M15_AXIS_TLAST,
    M15_AXIS_TDATA,
    M15_AXIS_TVALID,
    M15_AXIS_TREADY,
    S0_AXIS_TLAST,
    S0_AXIS_TDATA,
    S0_AXIS_TVALID,
    S0_AXIS_TREADY,
    S1_AXIS_TLAST,
    S1_AXIS_TDATA,
    S1_AXIS_TVALID,
    S1_AXIS_TREADY,
    S2_AXIS_TLAST,
    S2_AXIS_TDATA,
    S2_AXIS_TVALID,
    S2_AXIS_TREADY,
    S3_AXIS_TLAST,
    S3_AXIS_TDATA,
    S3_AXIS_TVALID,
    S3_AXIS_TREADY,
    S4_AXIS_TLAST,
    S4_AXIS_TDATA,
    S4_AXIS_TVALID,
    S4_AXIS_TREADY,
    S5_AXIS_TLAST,
    S5_AXIS_TDATA,
    S5_AXIS_TVALID,
    S5_AXIS_TREADY,
    S6_AXIS_TLAST,
    S6_AXIS_TDATA,
    S6_AXIS_TVALID,
    S6_AXIS_TREADY,
    S7_AXIS_TLAST,
    S7_AXIS_TDATA,
    S7_AXIS_TVALID,
    S7_AXIS_TREADY,
    S8_AXIS_TLAST,
    S8_AXIS_TDATA,
    S8_AXIS_TVALID,
    S8_AXIS_TREADY,
    S9_AXIS_TLAST,
    S9_AXIS_TDATA,
    S9_AXIS_TVALID,
    S9_AXIS_TREADY,
    S10_AXIS_TLAST,
    S10_AXIS_TDATA,
    S10_AXIS_TVALID,
    S10_AXIS_TREADY,
    S11_AXIS_TLAST,
    S11_AXIS_TDATA,
    S11_AXIS_TVALID,
    S11_AXIS_TREADY,
    S12_AXIS_TLAST,
    S12_AXIS_TDATA,
    S12_AXIS_TVALID,
    S12_AXIS_TREADY,
    S13_AXIS_TLAST,
    S13_AXIS_TDATA,
    S13_AXIS_TVALID,
    S13_AXIS_TREADY,
    S14_AXIS_TLAST,
    S14_AXIS_TDATA,
    S14_AXIS_TVALID,
    S14_AXIS_TREADY,
    S15_AXIS_TLAST,
    S15_AXIS_TDATA,
    S15_AXIS_TVALID,
    S15_AXIS_TREADY,
    M_AXI_IC_AWID,
    M_AXI_IC_AWADDR,
    M_AXI_IC_AWLEN,
    M_AXI_IC_AWSIZE,
    M_AXI_IC_AWBURST,
    M_AXI_IC_AWLOCK,
    M_AXI_IC_AWCACHE,
    M_AXI_IC_AWPROT,
    M_AXI_IC_AWQOS,
    M_AXI_IC_AWVALID,
    M_AXI_IC_AWREADY,
    M_AXI_IC_AWUSER,
    M_AXI_IC_AWDOMAIN,
    M_AXI_IC_AWSNOOP,
    M_AXI_IC_AWBAR,
    M_AXI_IC_WDATA,
    M_AXI_IC_WSTRB,
    M_AXI_IC_WLAST,
    M_AXI_IC_WVALID,
    M_AXI_IC_WREADY,
    M_AXI_IC_WUSER,
    M_AXI_IC_BID,
    M_AXI_IC_BRESP,
    M_AXI_IC_BVALID,
    M_AXI_IC_BREADY,
    M_AXI_IC_BUSER,
    M_AXI_IC_WACK,
    M_AXI_IC_ARID,
    M_AXI_IC_ARADDR,
    M_AXI_IC_ARLEN,
    M_AXI_IC_ARSIZE,
    M_AXI_IC_ARBURST,
    M_AXI_IC_ARLOCK,
    M_AXI_IC_ARCACHE,
    M_AXI_IC_ARPROT,
    M_AXI_IC_ARQOS,
    M_AXI_IC_ARVALID,
    M_AXI_IC_ARREADY,
    M_AXI_IC_ARUSER,
    M_AXI_IC_ARDOMAIN,
    M_AXI_IC_ARSNOOP,
    M_AXI_IC_ARBAR,
    M_AXI_IC_RID,
    M_AXI_IC_RDATA,
    M_AXI_IC_RRESP,
    M_AXI_IC_RLAST,
    M_AXI_IC_RVALID,
    M_AXI_IC_RREADY,
    M_AXI_IC_RUSER,
    M_AXI_IC_RACK,
    M_AXI_IC_ACVALID,
    M_AXI_IC_ACADDR,
    M_AXI_IC_ACSNOOP,
    M_AXI_IC_ACPROT,
    M_AXI_IC_ACREADY,
    M_AXI_IC_CRVALID,
    M_AXI_IC_CRRESP,
    M_AXI_IC_CRREADY,
    M_AXI_IC_CDVALID,
    M_AXI_IC_CDDATA,
    M_AXI_IC_CDLAST,
    M_AXI_IC_CDREADY,
    M_AXI_DC_AWID,
    M_AXI_DC_AWADDR,
    M_AXI_DC_AWLEN,
    M_AXI_DC_AWSIZE,
    M_AXI_DC_AWBURST,
    M_AXI_DC_AWLOCK,
    M_AXI_DC_AWCACHE,
    M_AXI_DC_AWPROT,
    M_AXI_DC_AWQOS,
    M_AXI_DC_AWVALID,
    M_AXI_DC_AWREADY,
    M_AXI_DC_AWUSER,
    M_AXI_DC_AWDOMAIN,
    M_AXI_DC_AWSNOOP,
    M_AXI_DC_AWBAR,
    M_AXI_DC_WDATA,
    M_AXI_DC_WSTRB,
    M_AXI_DC_WLAST,
    M_AXI_DC_WVALID,
    M_AXI_DC_WREADY,
    M_AXI_DC_WUSER,
    M_AXI_DC_BRESP,
    M_AXI_DC_BID,
    M_AXI_DC_BVALID,
    M_AXI_DC_BREADY,
    M_AXI_DC_BUSER,
    M_AXI_DC_WACK,
    M_AXI_DC_ARID,
    M_AXI_DC_ARADDR,
    M_AXI_DC_ARLEN,
    M_AXI_DC_ARSIZE,
    M_AXI_DC_ARBURST,
    M_AXI_DC_ARLOCK,
    M_AXI_DC_ARCACHE,
    M_AXI_DC_ARPROT,
    M_AXI_DC_ARQOS,
    M_AXI_DC_ARVALID,
    M_AXI_DC_ARREADY,
    M_AXI_DC_ARUSER,
    M_AXI_DC_ARDOMAIN,
    M_AXI_DC_ARSNOOP,
    M_AXI_DC_ARBAR,
    M_AXI_DC_RID,
    M_AXI_DC_RDATA,
    M_AXI_DC_RRESP,
    M_AXI_DC_RLAST,
    M_AXI_DC_RVALID,
    M_AXI_DC_RREADY,
    M_AXI_DC_RUSER,
    M_AXI_DC_RACK,
    M_AXI_DC_ACVALID,
    M_AXI_DC_ACADDR,
    M_AXI_DC_ACSNOOP,
    M_AXI_DC_ACPROT,
    M_AXI_DC_ACREADY,
    M_AXI_DC_CRVALID,
    M_AXI_DC_CRRESP,
    M_AXI_DC_CRREADY,
    M_AXI_DC_CDVALID,
    M_AXI_DC_CDDATA,
    M_AXI_DC_CDLAST,
    M_AXI_DC_CDREADY);
  input [255:0]RAM_To;
  output [255:0]RAM_From;
  input Clk;
  input Reset;
  input Mb_Reset;
  input Config_Reset;
  input Scan_Reset_Sel;
  input Scan_Reset;
  input Scan_En;
  input [0:1]Reset_Mode;
  input [0:3]Non_Secure;
  input Interrupt;
  input [0:31]Interrupt_Address;
  output [0:1]Interrupt_Ack;
  input Ext_BRK;
  input Ext_NM_BRK;
  input Pause;
  output Pause_Ack;
  output Dbg_Continue;
  input Dbg_Stop;
  output Dbg_Intr;
  output MB_Halted;
  output MB_Error;
  input [0:1]Wakeup;
  output Sleep;
  output Hibernate;
  output Suspend;
  output Dbg_Wakeup;
  input [0:4095]LOCKSTEP_Slave_In;
  output [0:4095]LOCKSTEP_Master_Out;
  output [0:4095]LOCKSTEP_Out;
  output [0:31]Instr_Addr;
  input [0:31]Instr;
  output IFetch;
  output I_AS;
  input IReady;
  input IWAIT;
  input ICE;
  input IUE;
  output [0:0]M_AXI_IP_AWID;
  output [31:0]M_AXI_IP_AWADDR;
  output [7:0]M_AXI_IP_AWLEN;
  output [2:0]M_AXI_IP_AWSIZE;
  output [1:0]M_AXI_IP_AWBURST;
  output M_AXI_IP_AWLOCK;
  output [3:0]M_AXI_IP_AWCACHE;
  output [2:0]M_AXI_IP_AWPROT;
  output [3:0]M_AXI_IP_AWQOS;
  output M_AXI_IP_AWVALID;
  input M_AXI_IP_AWREADY;
  output [31:0]M_AXI_IP_WDATA;
  output [3:0]M_AXI_IP_WSTRB;
  output M_AXI_IP_WLAST;
  output M_AXI_IP_WVALID;
  input M_AXI_IP_WREADY;
  input [0:0]M_AXI_IP_BID;
  input [1:0]M_AXI_IP_BRESP;
  input M_AXI_IP_BVALID;
  output M_AXI_IP_BREADY;
  output [0:0]M_AXI_IP_ARID;
  output [31:0]M_AXI_IP_ARADDR;
  output [7:0]M_AXI_IP_ARLEN;
  output [2:0]M_AXI_IP_ARSIZE;
  output [1:0]M_AXI_IP_ARBURST;
  output M_AXI_IP_ARLOCK;
  output [3:0]M_AXI_IP_ARCACHE;
  output [2:0]M_AXI_IP_ARPROT;
  output [3:0]M_AXI_IP_ARQOS;
  output M_AXI_IP_ARVALID;
  input M_AXI_IP_ARREADY;
  input [0:0]M_AXI_IP_RID;
  input [31:0]M_AXI_IP_RDATA;
  input [1:0]M_AXI_IP_RRESP;
  input M_AXI_IP_RLAST;
  input M_AXI_IP_RVALID;
  output M_AXI_IP_RREADY;
  output [0:31]Data_Addr;
  input [0:31]Data_Read;
  output [0:31]Data_Write;
  output D_AS;
  output Read_Strobe;
  output Write_Strobe;
  input DReady;
  input DWait;
  input DCE;
  input DUE;
  output [0:3]Byte_Enable;
  output [0:0]M_AXI_DP_AWID;
  output [31:0]M_AXI_DP_AWADDR;
  output [7:0]M_AXI_DP_AWLEN;
  output [2:0]M_AXI_DP_AWSIZE;
  output [1:0]M_AXI_DP_AWBURST;
  output M_AXI_DP_AWLOCK;
  output [3:0]M_AXI_DP_AWCACHE;
  output [2:0]M_AXI_DP_AWPROT;
  output [3:0]M_AXI_DP_AWQOS;
  output M_AXI_DP_AWVALID;
  input M_AXI_DP_AWREADY;
  output [31:0]M_AXI_DP_WDATA;
  output [3:0]M_AXI_DP_WSTRB;
  output M_AXI_DP_WLAST;
  output M_AXI_DP_WVALID;
  input M_AXI_DP_WREADY;
  input [0:0]M_AXI_DP_BID;
  input [1:0]M_AXI_DP_BRESP;
  input M_AXI_DP_BVALID;
  output M_AXI_DP_BREADY;
  output [0:0]M_AXI_DP_ARID;
  output [31:0]M_AXI_DP_ARADDR;
  output [7:0]M_AXI_DP_ARLEN;
  output [2:0]M_AXI_DP_ARSIZE;
  output [1:0]M_AXI_DP_ARBURST;
  output M_AXI_DP_ARLOCK;
  output [3:0]M_AXI_DP_ARCACHE;
  output [2:0]M_AXI_DP_ARPROT;
  output [3:0]M_AXI_DP_ARQOS;
  output M_AXI_DP_ARVALID;
  input M_AXI_DP_ARREADY;
  input [0:0]M_AXI_DP_RID;
  input [31:0]M_AXI_DP_RDATA;
  input [1:0]M_AXI_DP_RRESP;
  input M_AXI_DP_RLAST;
  input M_AXI_DP_RVALID;
  output M_AXI_DP_RREADY;
  input Dbg_Disable;
  input Dbg_Clk;
  input Dbg_TDI;
  output Dbg_TDO;
  input [0:7]Dbg_Reg_En;
  input Dbg_Shift;
  input Dbg_Capture;
  input Dbg_Update;
  input Debug_Rst;
  output [0:7]Dbg_Trig_In;
  input [0:7]Dbg_Trig_Ack_In;
  input [0:7]Dbg_Trig_Out;
  output [0:7]Dbg_Trig_Ack_Out;
  input Dbg_Trace_Clk;
  output [0:35]Dbg_Trace_Data;
  input Dbg_Trace_Ready;
  output Dbg_Trace_Valid;
  input [14:2]Dbg_AWADDR;
  input Dbg_AWVALID;
  output Dbg_AWREADY;
  input [31:0]Dbg_WDATA;
  input Dbg_WVALID;
  output Dbg_WREADY;
  output [1:0]Dbg_BRESP;
  output Dbg_BVALID;
  input Dbg_BREADY;
  input [14:2]Dbg_ARADDR;
  input Dbg_ARVALID;
  output Dbg_ARREADY;
  output [31:0]Dbg_RDATA;
  output [1:0]Dbg_RRESP;
  output Dbg_RVALID;
  input Dbg_RREADY;
  input DEBUG_ACLK;
  input DEBUG_ARESETN;
  (* mark_debug = "false" *) output [0:31]Trace_Instruction;
  (* mark_debug = "false" *) output Trace_Valid_Instr;
  (* mark_debug = "false" *) output [0:31]Trace_PC;
  (* mark_debug = "false" *) output Trace_Reg_Write;
  (* mark_debug = "false" *) output [0:4]Trace_Reg_Addr;
  (* mark_debug = "false" *) output [0:14]Trace_MSR_Reg;
  (* mark_debug = "false" *) output [0:7]Trace_PID_Reg;
  (* mark_debug = "false" *) output [0:31]Trace_New_Reg_Value;
  (* mark_debug = "false" *) output Trace_Exception_Taken;
  (* mark_debug = "false" *) output [0:4]Trace_Exception_Kind;
  (* mark_debug = "false" *) output Trace_Jump_Taken;
  (* mark_debug = "false" *) output Trace_Delay_Slot;
  (* mark_debug = "false" *) output [0:31]Trace_Data_Address;
  (* mark_debug = "false" *) output [0:31]Trace_Data_Write_Value;
  (* mark_debug = "false" *) output [0:3]Trace_Data_Byte_Enable;
  (* mark_debug = "false" *) output Trace_Data_Access;
  (* mark_debug = "false" *) output Trace_Data_Read;
  (* mark_debug = "false" *) output Trace_Data_Write;
  (* mark_debug = "false" *) output Trace_DCache_Req;
  (* mark_debug = "false" *) output Trace_DCache_Hit;
  (* mark_debug = "false" *) output Trace_DCache_Rdy;
  (* mark_debug = "false" *) output Trace_DCache_Read;
  (* mark_debug = "false" *) output Trace_ICache_Req;
  (* mark_debug = "false" *) output Trace_ICache_Hit;
  (* mark_debug = "false" *) output Trace_ICache_Rdy;
  (* mark_debug = "false" *) output Trace_OF_PipeRun;
  (* mark_debug = "false" *) output Trace_EX_PipeRun;
  (* mark_debug = "false" *) output Trace_MEM_PipeRun;
  (* mark_debug = "false" *) output Trace_MB_Halted;
  (* mark_debug = "false" *) output Trace_Jump_Hit;
  output M0_AXIS_TLAST;
  output [31:0]M0_AXIS_TDATA;
  output M0_AXIS_TVALID;
  input M0_AXIS_TREADY;
  output M1_AXIS_TLAST;
  output [31:0]M1_AXIS_TDATA;
  output M1_AXIS_TVALID;
  input M1_AXIS_TREADY;
  output M2_AXIS_TLAST;
  output [31:0]M2_AXIS_TDATA;
  output M2_AXIS_TVALID;
  input M2_AXIS_TREADY;
  output M3_AXIS_TLAST;
  output [31:0]M3_AXIS_TDATA;
  output M3_AXIS_TVALID;
  input M3_AXIS_TREADY;
  output M4_AXIS_TLAST;
  output [31:0]M4_AXIS_TDATA;
  output M4_AXIS_TVALID;
  input M4_AXIS_TREADY;
  output M5_AXIS_TLAST;
  output [31:0]M5_AXIS_TDATA;
  output M5_AXIS_TVALID;
  input M5_AXIS_TREADY;
  output M6_AXIS_TLAST;
  output [31:0]M6_AXIS_TDATA;
  output M6_AXIS_TVALID;
  input M6_AXIS_TREADY;
  output M7_AXIS_TLAST;
  output [31:0]M7_AXIS_TDATA;
  output M7_AXIS_TVALID;
  input M7_AXIS_TREADY;
  output M8_AXIS_TLAST;
  output [31:0]M8_AXIS_TDATA;
  output M8_AXIS_TVALID;
  input M8_AXIS_TREADY;
  output M9_AXIS_TLAST;
  output [31:0]M9_AXIS_TDATA;
  output M9_AXIS_TVALID;
  input M9_AXIS_TREADY;
  output M10_AXIS_TLAST;
  output [31:0]M10_AXIS_TDATA;
  output M10_AXIS_TVALID;
  input M10_AXIS_TREADY;
  output M11_AXIS_TLAST;
  output [31:0]M11_AXIS_TDATA;
  output M11_AXIS_TVALID;
  input M11_AXIS_TREADY;
  output M12_AXIS_TLAST;
  output [31:0]M12_AXIS_TDATA;
  output M12_AXIS_TVALID;
  input M12_AXIS_TREADY;
  output M13_AXIS_TLAST;
  output [31:0]M13_AXIS_TDATA;
  output M13_AXIS_TVALID;
  input M13_AXIS_TREADY;
  output M14_AXIS_TLAST;
  output [31:0]M14_AXIS_TDATA;
  output M14_AXIS_TVALID;
  input M14_AXIS_TREADY;
  output M15_AXIS_TLAST;
  output [31:0]M15_AXIS_TDATA;
  output M15_AXIS_TVALID;
  input M15_AXIS_TREADY;
  input S0_AXIS_TLAST;
  input [31:0]S0_AXIS_TDATA;
  input S0_AXIS_TVALID;
  output S0_AXIS_TREADY;
  input S1_AXIS_TLAST;
  input [31:0]S1_AXIS_TDATA;
  input S1_AXIS_TVALID;
  output S1_AXIS_TREADY;
  input S2_AXIS_TLAST;
  input [31:0]S2_AXIS_TDATA;
  input S2_AXIS_TVALID;
  output S2_AXIS_TREADY;
  input S3_AXIS_TLAST;
  input [31:0]S3_AXIS_TDATA;
  input S3_AXIS_TVALID;
  output S3_AXIS_TREADY;
  input S4_AXIS_TLAST;
  input [31:0]S4_AXIS_TDATA;
  input S4_AXIS_TVALID;
  output S4_AXIS_TREADY;
  input S5_AXIS_TLAST;
  input [31:0]S5_AXIS_TDATA;
  input S5_AXIS_TVALID;
  output S5_AXIS_TREADY;
  input S6_AXIS_TLAST;
  input [31:0]S6_AXIS_TDATA;
  input S6_AXIS_TVALID;
  output S6_AXIS_TREADY;
  input S7_AXIS_TLAST;
  input [31:0]S7_AXIS_TDATA;
  input S7_AXIS_TVALID;
  output S7_AXIS_TREADY;
  input S8_AXIS_TLAST;
  input [31:0]S8_AXIS_TDATA;
  input S8_AXIS_TVALID;
  output S8_AXIS_TREADY;
  input S9_AXIS_TLAST;
  input [31:0]S9_AXIS_TDATA;
  input S9_AXIS_TVALID;
  output S9_AXIS_TREADY;
  input S10_AXIS_TLAST;
  input [31:0]S10_AXIS_TDATA;
  input S10_AXIS_TVALID;
  output S10_AXIS_TREADY;
  input S11_AXIS_TLAST;
  input [31:0]S11_AXIS_TDATA;
  input S11_AXIS_TVALID;
  output S11_AXIS_TREADY;
  input S12_AXIS_TLAST;
  input [31:0]S12_AXIS_TDATA;
  input S12_AXIS_TVALID;
  output S12_AXIS_TREADY;
  input S13_AXIS_TLAST;
  input [31:0]S13_AXIS_TDATA;
  input S13_AXIS_TVALID;
  output S13_AXIS_TREADY;
  input S14_AXIS_TLAST;
  input [31:0]S14_AXIS_TDATA;
  input S14_AXIS_TVALID;
  output S14_AXIS_TREADY;
  input S15_AXIS_TLAST;
  input [31:0]S15_AXIS_TDATA;
  input S15_AXIS_TVALID;
  output S15_AXIS_TREADY;
  output [0:0]M_AXI_IC_AWID;
  output [31:0]M_AXI_IC_AWADDR;
  output [7:0]M_AXI_IC_AWLEN;
  output [2:0]M_AXI_IC_AWSIZE;
  output [1:0]M_AXI_IC_AWBURST;
  output M_AXI_IC_AWLOCK;
  output [3:0]M_AXI_IC_AWCACHE;
  output [2:0]M_AXI_IC_AWPROT;
  output [3:0]M_AXI_IC_AWQOS;
  output M_AXI_IC_AWVALID;
  input M_AXI_IC_AWREADY;
  output [4:0]M_AXI_IC_AWUSER;
  output [1:0]M_AXI_IC_AWDOMAIN;
  output [2:0]M_AXI_IC_AWSNOOP;
  output [1:0]M_AXI_IC_AWBAR;
  output [31:0]M_AXI_IC_WDATA;
  output [3:0]M_AXI_IC_WSTRB;
  output M_AXI_IC_WLAST;
  output M_AXI_IC_WVALID;
  input M_AXI_IC_WREADY;
  output [0:0]M_AXI_IC_WUSER;
  input [0:0]M_AXI_IC_BID;
  input [1:0]M_AXI_IC_BRESP;
  input M_AXI_IC_BVALID;
  output M_AXI_IC_BREADY;
  input [0:0]M_AXI_IC_BUSER;
  output M_AXI_IC_WACK;
  output [0:0]M_AXI_IC_ARID;
  output [31:0]M_AXI_IC_ARADDR;
  output [7:0]M_AXI_IC_ARLEN;
  output [2:0]M_AXI_IC_ARSIZE;
  output [1:0]M_AXI_IC_ARBURST;
  output M_AXI_IC_ARLOCK;
  output [3:0]M_AXI_IC_ARCACHE;
  output [2:0]M_AXI_IC_ARPROT;
  output [3:0]M_AXI_IC_ARQOS;
  output M_AXI_IC_ARVALID;
  input M_AXI_IC_ARREADY;
  output [4:0]M_AXI_IC_ARUSER;
  output [1:0]M_AXI_IC_ARDOMAIN;
  output [3:0]M_AXI_IC_ARSNOOP;
  output [1:0]M_AXI_IC_ARBAR;
  input [0:0]M_AXI_IC_RID;
  input [31:0]M_AXI_IC_RDATA;
  input [1:0]M_AXI_IC_RRESP;
  input M_AXI_IC_RLAST;
  input M_AXI_IC_RVALID;
  output M_AXI_IC_RREADY;
  input [0:0]M_AXI_IC_RUSER;
  output M_AXI_IC_RACK;
  input M_AXI_IC_ACVALID;
  input [31:0]M_AXI_IC_ACADDR;
  input [3:0]M_AXI_IC_ACSNOOP;
  input [2:0]M_AXI_IC_ACPROT;
  output M_AXI_IC_ACREADY;
  output M_AXI_IC_CRVALID;
  output [4:0]M_AXI_IC_CRRESP;
  input M_AXI_IC_CRREADY;
  output M_AXI_IC_CDVALID;
  output [31:0]M_AXI_IC_CDDATA;
  output M_AXI_IC_CDLAST;
  input M_AXI_IC_CDREADY;
  output [0:0]M_AXI_DC_AWID;
  output [31:0]M_AXI_DC_AWADDR;
  output [7:0]M_AXI_DC_AWLEN;
  output [2:0]M_AXI_DC_AWSIZE;
  output [1:0]M_AXI_DC_AWBURST;
  output M_AXI_DC_AWLOCK;
  output [3:0]M_AXI_DC_AWCACHE;
  output [2:0]M_AXI_DC_AWPROT;
  output [3:0]M_AXI_DC_AWQOS;
  output M_AXI_DC_AWVALID;
  input M_AXI_DC_AWREADY;
  output [4:0]M_AXI_DC_AWUSER;
  output [1:0]M_AXI_DC_AWDOMAIN;
  output [2:0]M_AXI_DC_AWSNOOP;
  output [1:0]M_AXI_DC_AWBAR;
  output [31:0]M_AXI_DC_WDATA;
  output [3:0]M_AXI_DC_WSTRB;
  output M_AXI_DC_WLAST;
  output M_AXI_DC_WVALID;
  input M_AXI_DC_WREADY;
  output [0:0]M_AXI_DC_WUSER;
  input [1:0]M_AXI_DC_BRESP;
  input [0:0]M_AXI_DC_BID;
  input M_AXI_DC_BVALID;
  output M_AXI_DC_BREADY;
  input [0:0]M_AXI_DC_BUSER;
  output M_AXI_DC_WACK;
  output [0:0]M_AXI_DC_ARID;
  output [31:0]M_AXI_DC_ARADDR;
  output [7:0]M_AXI_DC_ARLEN;
  output [2:0]M_AXI_DC_ARSIZE;
  output [1:0]M_AXI_DC_ARBURST;
  output M_AXI_DC_ARLOCK;
  output [3:0]M_AXI_DC_ARCACHE;
  output [2:0]M_AXI_DC_ARPROT;
  output [3:0]M_AXI_DC_ARQOS;
  output M_AXI_DC_ARVALID;
  input M_AXI_DC_ARREADY;
  output [4:0]M_AXI_DC_ARUSER;
  output [1:0]M_AXI_DC_ARDOMAIN;
  output [3:0]M_AXI_DC_ARSNOOP;
  output [1:0]M_AXI_DC_ARBAR;
  input [0:0]M_AXI_DC_RID;
  input [31:0]M_AXI_DC_RDATA;
  input [1:0]M_AXI_DC_RRESP;
  input M_AXI_DC_RLAST;
  input M_AXI_DC_RVALID;
  output M_AXI_DC_RREADY;
  input [0:0]M_AXI_DC_RUSER;
  output M_AXI_DC_RACK;
  input M_AXI_DC_ACVALID;
  input [31:0]M_AXI_DC_ACADDR;
  input [3:0]M_AXI_DC_ACSNOOP;
  input [2:0]M_AXI_DC_ACPROT;
  output M_AXI_DC_ACREADY;
  output M_AXI_DC_CRVALID;
  output [4:0]M_AXI_DC_CRRESP;
  input M_AXI_DC_CRREADY;
  output M_AXI_DC_CDVALID;
  output [31:0]M_AXI_DC_CDDATA;
  output M_AXI_DC_CDLAST;
  input M_AXI_DC_CDREADY;

  wire \<const0> ;
  wire \<const1> ;
  wire \Area.Core/Implement_Debug_Logic.Master_Core.Debug_Area/Status_Reg_En ;
  wire [0:3]Byte_Enable;
  wire Clk;
  wire Config_Reg_En;
  wire DReady;
  wire DWait;
  wire D_AS;
  wire [0:31]Data_Addr;
  wire [0:31]Data_Read;
  wire Data_Read_Reg_En;
  wire [0:31]Data_Write;
  wire Dbg_Capture;
  wire Dbg_Clk;
  wire [0:7]Dbg_Reg_En;
  wire Dbg_Shift;
  wire Dbg_Stop;
  wire Dbg_TDI;
  wire Dbg_TDO;
  wire Dbg_TDO_INST_0_i_11_n_0;
  wire Dbg_TDO_INST_0_i_26_n_0;
  wire [0:7]Dbg_Trig_Ack_In;
  wire [0:1]\^Dbg_Trig_Ack_Out ;
  wire [0:1]\^Dbg_Trig_In ;
  wire [0:7]Dbg_Trig_Out;
  wire Dbg_Update;
  wire Dbg_Wakeup;
  wire Debug_Rst;
  wire Hibernate;
  wire IFetch;
  wire IReady;
  wire I_AS;
  wire [0:31]Instr;
  wire [16:29]\^Instr_Addr ;
  wire Interrupt;
  wire [0:1]Interrupt_Ack;
  wire [0:31]Interrupt_Address;
  wire [1:46]\^LOCKSTEP_Master_Out ;
  wire [2:3228]\^LOCKSTEP_Out ;
  wire MB_Halted;
  wire M_AXI_DP_ARREADY;
  wire M_AXI_DP_ARVALID;
  wire [31:0]M_AXI_DP_AWADDR;
  wire M_AXI_DP_AWREADY;
  wire M_AXI_DP_AWVALID;
  wire M_AXI_DP_BVALID;
  wire [31:0]M_AXI_DP_RDATA;
  wire M_AXI_DP_RVALID;
  wire [31:0]M_AXI_DP_WDATA;
  wire M_AXI_DP_WREADY;
  wire [3:0]M_AXI_DP_WSTRB;
  wire M_AXI_DP_WVALID;
  wire Mb_Reset;
  wire MicroBlaze_Core_I_n_370;
  wire Pause;
  wire Pause_Ack;
  wire Read_Strobe;
  wire Reset;
  wire [0:1]Reset_Mode;
  wire Scan_En;
  wire Scan_Reset;
  wire Scan_Reset_Sel;
  wire Sleep;
  wire Suspend;
  wire Trace_Data_Access;
  wire [0:31]Trace_Data_Address;
  wire [0:3]Trace_Data_Byte_Enable;
  wire Trace_Data_Read;
  wire Trace_Data_Write;
  wire [0:31]Trace_Data_Write_Value;
  wire Trace_Delay_Slot;
  wire Trace_Exception_Taken;
  wire [0:31]Trace_Instruction;
  wire Trace_Jump_Taken;
  wire [11:13]\^Trace_MSR_Reg ;
  wire [0:31]Trace_New_Reg_Value;
  wire Trace_OF_PipeRun;
  wire [16:29]\^Trace_PC ;
  wire [0:4]Trace_Reg_Addr;
  wire Trace_Reg_Write;
  wire Trace_Valid_Instr;
  wire [0:1]Wakeup;
  wire Write_Strobe;

  assign Dbg_ARREADY = \<const0> ;
  assign Dbg_AWREADY = \<const0> ;
  assign Dbg_BRESP[1] = \<const0> ;
  assign Dbg_BRESP[0] = \<const0> ;
  assign Dbg_BVALID = \<const0> ;
  assign Dbg_Continue = \^LOCKSTEP_Master_Out [12];
  assign Dbg_Intr = \<const0> ;
  assign Dbg_RDATA[31] = \<const0> ;
  assign Dbg_RDATA[30] = \<const0> ;
  assign Dbg_RDATA[29] = \<const0> ;
  assign Dbg_RDATA[28] = \<const0> ;
  assign Dbg_RDATA[27] = \<const0> ;
  assign Dbg_RDATA[26] = \<const0> ;
  assign Dbg_RDATA[25] = \<const0> ;
  assign Dbg_RDATA[24] = \<const0> ;
  assign Dbg_RDATA[23] = \<const0> ;
  assign Dbg_RDATA[22] = \<const0> ;
  assign Dbg_RDATA[21] = \<const0> ;
  assign Dbg_RDATA[20] = \<const0> ;
  assign Dbg_RDATA[19] = \<const0> ;
  assign Dbg_RDATA[18] = \<const0> ;
  assign Dbg_RDATA[17] = \<const0> ;
  assign Dbg_RDATA[16] = \<const0> ;
  assign Dbg_RDATA[15] = \<const0> ;
  assign Dbg_RDATA[14] = \<const0> ;
  assign Dbg_RDATA[13] = \<const0> ;
  assign Dbg_RDATA[12] = \<const0> ;
  assign Dbg_RDATA[11] = \<const0> ;
  assign Dbg_RDATA[10] = \<const0> ;
  assign Dbg_RDATA[9] = \<const0> ;
  assign Dbg_RDATA[8] = \<const0> ;
  assign Dbg_RDATA[7] = \<const0> ;
  assign Dbg_RDATA[6] = \<const0> ;
  assign Dbg_RDATA[5] = \<const0> ;
  assign Dbg_RDATA[4] = \<const0> ;
  assign Dbg_RDATA[3] = \<const0> ;
  assign Dbg_RDATA[2] = \<const0> ;
  assign Dbg_RDATA[1] = \<const0> ;
  assign Dbg_RDATA[0] = \<const0> ;
  assign Dbg_RRESP[1] = \<const0> ;
  assign Dbg_RRESP[0] = \<const0> ;
  assign Dbg_RVALID = \<const0> ;
  assign Dbg_Trace_Data[0] = \<const0> ;
  assign Dbg_Trace_Data[1] = \<const0> ;
  assign Dbg_Trace_Data[2] = \<const0> ;
  assign Dbg_Trace_Data[3] = \<const0> ;
  assign Dbg_Trace_Data[4] = \<const0> ;
  assign Dbg_Trace_Data[5] = \<const0> ;
  assign Dbg_Trace_Data[6] = \<const0> ;
  assign Dbg_Trace_Data[7] = \<const0> ;
  assign Dbg_Trace_Data[8] = \<const0> ;
  assign Dbg_Trace_Data[9] = \<const0> ;
  assign Dbg_Trace_Data[10] = \<const0> ;
  assign Dbg_Trace_Data[11] = \<const0> ;
  assign Dbg_Trace_Data[12] = \<const0> ;
  assign Dbg_Trace_Data[13] = \<const0> ;
  assign Dbg_Trace_Data[14] = \<const0> ;
  assign Dbg_Trace_Data[15] = \<const0> ;
  assign Dbg_Trace_Data[16] = \<const0> ;
  assign Dbg_Trace_Data[17] = \<const0> ;
  assign Dbg_Trace_Data[18] = \<const0> ;
  assign Dbg_Trace_Data[19] = \<const0> ;
  assign Dbg_Trace_Data[20] = \<const0> ;
  assign Dbg_Trace_Data[21] = \<const0> ;
  assign Dbg_Trace_Data[22] = \<const0> ;
  assign Dbg_Trace_Data[23] = \<const0> ;
  assign Dbg_Trace_Data[24] = \<const0> ;
  assign Dbg_Trace_Data[25] = \<const0> ;
  assign Dbg_Trace_Data[26] = \<const0> ;
  assign Dbg_Trace_Data[27] = \<const0> ;
  assign Dbg_Trace_Data[28] = \<const0> ;
  assign Dbg_Trace_Data[29] = \<const0> ;
  assign Dbg_Trace_Data[30] = \<const0> ;
  assign Dbg_Trace_Data[31] = \<const0> ;
  assign Dbg_Trace_Data[32] = \<const0> ;
  assign Dbg_Trace_Data[33] = \<const0> ;
  assign Dbg_Trace_Data[34] = \<const0> ;
  assign Dbg_Trace_Data[35] = \<const0> ;
  assign Dbg_Trace_Valid = \<const0> ;
  assign Dbg_Trig_Ack_Out[0:1] = \^Dbg_Trig_Ack_Out [0:1];
  assign Dbg_Trig_Ack_Out[2] = \<const0> ;
  assign Dbg_Trig_Ack_Out[3] = \<const0> ;
  assign Dbg_Trig_Ack_Out[4] = \<const0> ;
  assign Dbg_Trig_Ack_Out[5] = \<const0> ;
  assign Dbg_Trig_Ack_Out[6] = \<const0> ;
  assign Dbg_Trig_Ack_Out[7] = \<const0> ;
  assign Dbg_Trig_In[0:1] = \^Dbg_Trig_In [0:1];
  assign Dbg_Trig_In[2] = \<const0> ;
  assign Dbg_Trig_In[3] = \<const0> ;
  assign Dbg_Trig_In[4] = \<const0> ;
  assign Dbg_Trig_In[5] = \<const0> ;
  assign Dbg_Trig_In[6] = \<const0> ;
  assign Dbg_Trig_In[7] = \<const0> ;
  assign Dbg_WREADY = \<const0> ;
  assign Instr_Addr[0] = \<const0> ;
  assign Instr_Addr[1] = \<const0> ;
  assign Instr_Addr[2] = \<const0> ;
  assign Instr_Addr[3] = \<const0> ;
  assign Instr_Addr[4] = \<const0> ;
  assign Instr_Addr[5] = \<const0> ;
  assign Instr_Addr[6] = \<const0> ;
  assign Instr_Addr[7] = \<const0> ;
  assign Instr_Addr[8] = \<const0> ;
  assign Instr_Addr[9] = \<const0> ;
  assign Instr_Addr[10] = \<const0> ;
  assign Instr_Addr[11] = \<const0> ;
  assign Instr_Addr[12] = \<const0> ;
  assign Instr_Addr[13] = \<const0> ;
  assign Instr_Addr[14] = \<const0> ;
  assign Instr_Addr[15] = \<const0> ;
  assign Instr_Addr[16:29] = \^Instr_Addr [16:29];
  assign Instr_Addr[30] = \<const0> ;
  assign Instr_Addr[31] = \<const0> ;
  assign LOCKSTEP_Master_Out[0] = \<const0> ;
  assign LOCKSTEP_Master_Out[1:5] = \^LOCKSTEP_Master_Out [1:5];
  assign LOCKSTEP_Master_Out[6] = \<const0> ;
  assign LOCKSTEP_Master_Out[7] = \<const0> ;
  assign LOCKSTEP_Master_Out[8] = \<const0> ;
  assign LOCKSTEP_Master_Out[9] = \^LOCKSTEP_Master_Out [9];
  assign LOCKSTEP_Master_Out[10] = MB_Halted;
  assign LOCKSTEP_Master_Out[11] = Dbg_Wakeup;
  assign LOCKSTEP_Master_Out[12] = \^LOCKSTEP_Master_Out [12];
  assign LOCKSTEP_Master_Out[13] = \<const0> ;
  assign LOCKSTEP_Master_Out[14] = Debug_Rst;
  assign LOCKSTEP_Master_Out[15:46] = \^LOCKSTEP_Master_Out [15:46];
  assign LOCKSTEP_Master_Out[47] = \<const0> ;
  assign LOCKSTEP_Master_Out[48] = \<const0> ;
  assign LOCKSTEP_Master_Out[49] = \<const0> ;
  assign LOCKSTEP_Master_Out[50] = \<const0> ;
  assign LOCKSTEP_Master_Out[51] = \<const0> ;
  assign LOCKSTEP_Master_Out[52] = \<const0> ;
  assign LOCKSTEP_Master_Out[53] = \<const0> ;
  assign LOCKSTEP_Master_Out[54] = \<const0> ;
  assign LOCKSTEP_Master_Out[55] = \<const0> ;
  assign LOCKSTEP_Master_Out[56] = \<const0> ;
  assign LOCKSTEP_Master_Out[57] = \<const0> ;
  assign LOCKSTEP_Master_Out[58] = \<const0> ;
  assign LOCKSTEP_Master_Out[59] = \<const0> ;
  assign LOCKSTEP_Master_Out[60] = \<const0> ;
  assign LOCKSTEP_Master_Out[61] = \<const0> ;
  assign LOCKSTEP_Master_Out[62] = \<const0> ;
  assign LOCKSTEP_Master_Out[63] = \<const0> ;
  assign LOCKSTEP_Master_Out[64] = \<const0> ;
  assign LOCKSTEP_Master_Out[65] = \<const0> ;
  assign LOCKSTEP_Master_Out[66] = \<const0> ;
  assign LOCKSTEP_Master_Out[67] = \<const0> ;
  assign LOCKSTEP_Master_Out[68] = \<const0> ;
  assign LOCKSTEP_Master_Out[69] = \<const0> ;
  assign LOCKSTEP_Master_Out[70] = \<const0> ;
  assign LOCKSTEP_Master_Out[71] = \<const0> ;
  assign LOCKSTEP_Master_Out[72] = \<const0> ;
  assign LOCKSTEP_Master_Out[73] = \<const0> ;
  assign LOCKSTEP_Master_Out[74] = \<const0> ;
  assign LOCKSTEP_Master_Out[75] = \<const0> ;
  assign LOCKSTEP_Master_Out[76] = \<const0> ;
  assign LOCKSTEP_Master_Out[77] = \<const0> ;
  assign LOCKSTEP_Master_Out[78] = \<const0> ;
  assign LOCKSTEP_Master_Out[79] = \<const0> ;
  assign LOCKSTEP_Master_Out[80] = \<const0> ;
  assign LOCKSTEP_Master_Out[81] = \<const0> ;
  assign LOCKSTEP_Master_Out[82] = \<const0> ;
  assign LOCKSTEP_Master_Out[83] = \<const0> ;
  assign LOCKSTEP_Master_Out[84] = \<const0> ;
  assign LOCKSTEP_Master_Out[85] = \<const0> ;
  assign LOCKSTEP_Master_Out[86] = \<const0> ;
  assign LOCKSTEP_Master_Out[87] = \<const0> ;
  assign LOCKSTEP_Master_Out[88] = \<const0> ;
  assign LOCKSTEP_Master_Out[89] = \<const0> ;
  assign LOCKSTEP_Master_Out[90] = \<const0> ;
  assign LOCKSTEP_Master_Out[91] = \<const0> ;
  assign LOCKSTEP_Master_Out[92] = \<const0> ;
  assign LOCKSTEP_Master_Out[93] = \<const0> ;
  assign LOCKSTEP_Master_Out[94] = \<const0> ;
  assign LOCKSTEP_Master_Out[95] = \<const0> ;
  assign LOCKSTEP_Master_Out[96] = \<const0> ;
  assign LOCKSTEP_Master_Out[97] = \<const0> ;
  assign LOCKSTEP_Master_Out[98] = \<const0> ;
  assign LOCKSTEP_Master_Out[99] = \<const0> ;
  assign LOCKSTEP_Master_Out[100] = \<const0> ;
  assign LOCKSTEP_Master_Out[101] = \<const0> ;
  assign LOCKSTEP_Master_Out[102] = \<const0> ;
  assign LOCKSTEP_Master_Out[103] = \<const0> ;
  assign LOCKSTEP_Master_Out[104] = \<const0> ;
  assign LOCKSTEP_Master_Out[105] = \<const0> ;
  assign LOCKSTEP_Master_Out[106] = \<const0> ;
  assign LOCKSTEP_Master_Out[107] = \<const0> ;
  assign LOCKSTEP_Master_Out[108] = \<const0> ;
  assign LOCKSTEP_Master_Out[109] = \<const0> ;
  assign LOCKSTEP_Master_Out[110] = \<const0> ;
  assign LOCKSTEP_Master_Out[111] = \<const0> ;
  assign LOCKSTEP_Master_Out[112] = \<const0> ;
  assign LOCKSTEP_Master_Out[113] = \<const0> ;
  assign LOCKSTEP_Master_Out[114] = \<const0> ;
  assign LOCKSTEP_Master_Out[115] = \<const0> ;
  assign LOCKSTEP_Master_Out[116] = \<const0> ;
  assign LOCKSTEP_Master_Out[117] = \<const0> ;
  assign LOCKSTEP_Master_Out[118] = \<const0> ;
  assign LOCKSTEP_Master_Out[119] = \<const0> ;
  assign LOCKSTEP_Master_Out[120] = \<const0> ;
  assign LOCKSTEP_Master_Out[121] = \<const0> ;
  assign LOCKSTEP_Master_Out[122] = \<const0> ;
  assign LOCKSTEP_Master_Out[123] = \<const0> ;
  assign LOCKSTEP_Master_Out[124] = \<const0> ;
  assign LOCKSTEP_Master_Out[125] = \<const0> ;
  assign LOCKSTEP_Master_Out[126] = \<const0> ;
  assign LOCKSTEP_Master_Out[127] = \<const0> ;
  assign LOCKSTEP_Master_Out[128] = \<const0> ;
  assign LOCKSTEP_Master_Out[129] = \<const0> ;
  assign LOCKSTEP_Master_Out[130] = \<const0> ;
  assign LOCKSTEP_Master_Out[131] = \<const0> ;
  assign LOCKSTEP_Master_Out[132] = \<const0> ;
  assign LOCKSTEP_Master_Out[133] = \<const0> ;
  assign LOCKSTEP_Master_Out[134] = \<const0> ;
  assign LOCKSTEP_Master_Out[135] = \<const0> ;
  assign LOCKSTEP_Master_Out[136] = \<const0> ;
  assign LOCKSTEP_Master_Out[137] = \<const0> ;
  assign LOCKSTEP_Master_Out[138] = \<const0> ;
  assign LOCKSTEP_Master_Out[139] = \<const0> ;
  assign LOCKSTEP_Master_Out[140] = \<const0> ;
  assign LOCKSTEP_Master_Out[141] = \<const0> ;
  assign LOCKSTEP_Master_Out[142] = \<const0> ;
  assign LOCKSTEP_Master_Out[143] = \<const0> ;
  assign LOCKSTEP_Master_Out[144] = \<const0> ;
  assign LOCKSTEP_Master_Out[145] = \<const0> ;
  assign LOCKSTEP_Master_Out[146] = \<const0> ;
  assign LOCKSTEP_Master_Out[147] = \<const0> ;
  assign LOCKSTEP_Master_Out[148] = \<const0> ;
  assign LOCKSTEP_Master_Out[149] = \<const0> ;
  assign LOCKSTEP_Master_Out[150] = \<const0> ;
  assign LOCKSTEP_Master_Out[151] = \<const0> ;
  assign LOCKSTEP_Master_Out[152] = \<const0> ;
  assign LOCKSTEP_Master_Out[153] = \<const0> ;
  assign LOCKSTEP_Master_Out[154] = \<const0> ;
  assign LOCKSTEP_Master_Out[155] = \<const0> ;
  assign LOCKSTEP_Master_Out[156] = \<const0> ;
  assign LOCKSTEP_Master_Out[157] = \<const0> ;
  assign LOCKSTEP_Master_Out[158] = \<const0> ;
  assign LOCKSTEP_Master_Out[159] = \<const0> ;
  assign LOCKSTEP_Master_Out[160] = \<const0> ;
  assign LOCKSTEP_Master_Out[161] = \<const0> ;
  assign LOCKSTEP_Master_Out[162] = \<const0> ;
  assign LOCKSTEP_Master_Out[163] = \<const0> ;
  assign LOCKSTEP_Master_Out[164] = \<const0> ;
  assign LOCKSTEP_Master_Out[165] = \<const0> ;
  assign LOCKSTEP_Master_Out[166] = \<const0> ;
  assign LOCKSTEP_Master_Out[167] = \<const0> ;
  assign LOCKSTEP_Master_Out[168] = \<const0> ;
  assign LOCKSTEP_Master_Out[169] = \<const0> ;
  assign LOCKSTEP_Master_Out[170] = \<const0> ;
  assign LOCKSTEP_Master_Out[171] = \<const0> ;
  assign LOCKSTEP_Master_Out[172] = \<const0> ;
  assign LOCKSTEP_Master_Out[173] = \<const0> ;
  assign LOCKSTEP_Master_Out[174] = \<const0> ;
  assign LOCKSTEP_Master_Out[175] = \<const0> ;
  assign LOCKSTEP_Master_Out[176] = \<const0> ;
  assign LOCKSTEP_Master_Out[177] = \<const0> ;
  assign LOCKSTEP_Master_Out[178] = \<const0> ;
  assign LOCKSTEP_Master_Out[179] = \<const0> ;
  assign LOCKSTEP_Master_Out[180] = \<const0> ;
  assign LOCKSTEP_Master_Out[181] = \<const0> ;
  assign LOCKSTEP_Master_Out[182] = \<const0> ;
  assign LOCKSTEP_Master_Out[183] = \<const0> ;
  assign LOCKSTEP_Master_Out[184] = \<const0> ;
  assign LOCKSTEP_Master_Out[185] = \<const0> ;
  assign LOCKSTEP_Master_Out[186] = \<const0> ;
  assign LOCKSTEP_Master_Out[187] = \<const0> ;
  assign LOCKSTEP_Master_Out[188] = \<const0> ;
  assign LOCKSTEP_Master_Out[189] = \<const0> ;
  assign LOCKSTEP_Master_Out[190] = \<const0> ;
  assign LOCKSTEP_Master_Out[191] = \<const0> ;
  assign LOCKSTEP_Master_Out[192] = \<const0> ;
  assign LOCKSTEP_Master_Out[193] = \<const0> ;
  assign LOCKSTEP_Master_Out[194] = \<const0> ;
  assign LOCKSTEP_Master_Out[195] = \<const0> ;
  assign LOCKSTEP_Master_Out[196] = \<const0> ;
  assign LOCKSTEP_Master_Out[197] = \<const0> ;
  assign LOCKSTEP_Master_Out[198] = \<const0> ;
  assign LOCKSTEP_Master_Out[199] = \<const0> ;
  assign LOCKSTEP_Master_Out[200] = \<const0> ;
  assign LOCKSTEP_Master_Out[201] = \<const0> ;
  assign LOCKSTEP_Master_Out[202] = \<const0> ;
  assign LOCKSTEP_Master_Out[203] = \<const0> ;
  assign LOCKSTEP_Master_Out[204] = \<const0> ;
  assign LOCKSTEP_Master_Out[205] = \<const0> ;
  assign LOCKSTEP_Master_Out[206] = \<const0> ;
  assign LOCKSTEP_Master_Out[207] = \<const0> ;
  assign LOCKSTEP_Master_Out[208] = \<const0> ;
  assign LOCKSTEP_Master_Out[209] = \<const0> ;
  assign LOCKSTEP_Master_Out[210] = \<const0> ;
  assign LOCKSTEP_Master_Out[211] = \<const0> ;
  assign LOCKSTEP_Master_Out[212] = \<const0> ;
  assign LOCKSTEP_Master_Out[213] = \<const0> ;
  assign LOCKSTEP_Master_Out[214] = \<const0> ;
  assign LOCKSTEP_Master_Out[215] = \<const0> ;
  assign LOCKSTEP_Master_Out[216] = \<const0> ;
  assign LOCKSTEP_Master_Out[217] = \<const0> ;
  assign LOCKSTEP_Master_Out[218] = \<const0> ;
  assign LOCKSTEP_Master_Out[219] = \<const0> ;
  assign LOCKSTEP_Master_Out[220] = \<const0> ;
  assign LOCKSTEP_Master_Out[221] = \<const0> ;
  assign LOCKSTEP_Master_Out[222] = \<const0> ;
  assign LOCKSTEP_Master_Out[223] = \<const0> ;
  assign LOCKSTEP_Master_Out[224] = \<const0> ;
  assign LOCKSTEP_Master_Out[225] = \<const0> ;
  assign LOCKSTEP_Master_Out[226] = \<const0> ;
  assign LOCKSTEP_Master_Out[227] = \<const0> ;
  assign LOCKSTEP_Master_Out[228] = \<const0> ;
  assign LOCKSTEP_Master_Out[229] = \<const0> ;
  assign LOCKSTEP_Master_Out[230] = \<const0> ;
  assign LOCKSTEP_Master_Out[231] = \<const0> ;
  assign LOCKSTEP_Master_Out[232] = \<const0> ;
  assign LOCKSTEP_Master_Out[233] = \<const0> ;
  assign LOCKSTEP_Master_Out[234] = \<const0> ;
  assign LOCKSTEP_Master_Out[235] = \<const0> ;
  assign LOCKSTEP_Master_Out[236] = \<const0> ;
  assign LOCKSTEP_Master_Out[237] = \<const0> ;
  assign LOCKSTEP_Master_Out[238] = \<const0> ;
  assign LOCKSTEP_Master_Out[239] = \<const0> ;
  assign LOCKSTEP_Master_Out[240] = \<const0> ;
  assign LOCKSTEP_Master_Out[241] = \<const0> ;
  assign LOCKSTEP_Master_Out[242] = \<const0> ;
  assign LOCKSTEP_Master_Out[243] = \<const0> ;
  assign LOCKSTEP_Master_Out[244] = \<const0> ;
  assign LOCKSTEP_Master_Out[245] = \<const0> ;
  assign LOCKSTEP_Master_Out[246] = \<const0> ;
  assign LOCKSTEP_Master_Out[247] = \<const0> ;
  assign LOCKSTEP_Master_Out[248] = \<const0> ;
  assign LOCKSTEP_Master_Out[249] = \<const0> ;
  assign LOCKSTEP_Master_Out[250] = \<const0> ;
  assign LOCKSTEP_Master_Out[251] = \<const0> ;
  assign LOCKSTEP_Master_Out[252] = \<const0> ;
  assign LOCKSTEP_Master_Out[253] = \<const0> ;
  assign LOCKSTEP_Master_Out[254] = \<const0> ;
  assign LOCKSTEP_Master_Out[255] = \<const0> ;
  assign LOCKSTEP_Master_Out[256] = \<const0> ;
  assign LOCKSTEP_Master_Out[257] = \<const0> ;
  assign LOCKSTEP_Master_Out[258] = \<const0> ;
  assign LOCKSTEP_Master_Out[259] = \<const0> ;
  assign LOCKSTEP_Master_Out[260] = \<const0> ;
  assign LOCKSTEP_Master_Out[261] = \<const0> ;
  assign LOCKSTEP_Master_Out[262] = \<const0> ;
  assign LOCKSTEP_Master_Out[263] = \<const0> ;
  assign LOCKSTEP_Master_Out[264] = \<const0> ;
  assign LOCKSTEP_Master_Out[265] = \<const0> ;
  assign LOCKSTEP_Master_Out[266] = \<const0> ;
  assign LOCKSTEP_Master_Out[267] = \<const0> ;
  assign LOCKSTEP_Master_Out[268] = \<const0> ;
  assign LOCKSTEP_Master_Out[269] = \<const0> ;
  assign LOCKSTEP_Master_Out[270] = \<const0> ;
  assign LOCKSTEP_Master_Out[271] = \<const0> ;
  assign LOCKSTEP_Master_Out[272] = \<const0> ;
  assign LOCKSTEP_Master_Out[273] = \<const0> ;
  assign LOCKSTEP_Master_Out[274] = \<const0> ;
  assign LOCKSTEP_Master_Out[275] = \<const0> ;
  assign LOCKSTEP_Master_Out[276] = \<const0> ;
  assign LOCKSTEP_Master_Out[277] = \<const0> ;
  assign LOCKSTEP_Master_Out[278] = \<const0> ;
  assign LOCKSTEP_Master_Out[279] = \<const0> ;
  assign LOCKSTEP_Master_Out[280] = \<const0> ;
  assign LOCKSTEP_Master_Out[281] = \<const0> ;
  assign LOCKSTEP_Master_Out[282] = \<const0> ;
  assign LOCKSTEP_Master_Out[283] = \<const0> ;
  assign LOCKSTEP_Master_Out[284] = \<const0> ;
  assign LOCKSTEP_Master_Out[285] = \<const0> ;
  assign LOCKSTEP_Master_Out[286] = \<const0> ;
  assign LOCKSTEP_Master_Out[287] = \<const0> ;
  assign LOCKSTEP_Master_Out[288] = \<const0> ;
  assign LOCKSTEP_Master_Out[289] = \<const0> ;
  assign LOCKSTEP_Master_Out[290] = \<const0> ;
  assign LOCKSTEP_Master_Out[291] = \<const0> ;
  assign LOCKSTEP_Master_Out[292] = \<const0> ;
  assign LOCKSTEP_Master_Out[293] = \<const0> ;
  assign LOCKSTEP_Master_Out[294] = \<const0> ;
  assign LOCKSTEP_Master_Out[295] = \<const0> ;
  assign LOCKSTEP_Master_Out[296] = \<const0> ;
  assign LOCKSTEP_Master_Out[297] = \<const0> ;
  assign LOCKSTEP_Master_Out[298] = \<const0> ;
  assign LOCKSTEP_Master_Out[299] = \<const0> ;
  assign LOCKSTEP_Master_Out[300] = \<const0> ;
  assign LOCKSTEP_Master_Out[301] = \<const0> ;
  assign LOCKSTEP_Master_Out[302] = \<const0> ;
  assign LOCKSTEP_Master_Out[303] = \<const0> ;
  assign LOCKSTEP_Master_Out[304] = \<const0> ;
  assign LOCKSTEP_Master_Out[305] = \<const0> ;
  assign LOCKSTEP_Master_Out[306] = \<const0> ;
  assign LOCKSTEP_Master_Out[307] = \<const0> ;
  assign LOCKSTEP_Master_Out[308] = \<const0> ;
  assign LOCKSTEP_Master_Out[309] = \<const0> ;
  assign LOCKSTEP_Master_Out[310] = \<const0> ;
  assign LOCKSTEP_Master_Out[311] = \<const0> ;
  assign LOCKSTEP_Master_Out[312] = \<const0> ;
  assign LOCKSTEP_Master_Out[313] = \<const0> ;
  assign LOCKSTEP_Master_Out[314] = \<const0> ;
  assign LOCKSTEP_Master_Out[315] = \<const0> ;
  assign LOCKSTEP_Master_Out[316] = \<const0> ;
  assign LOCKSTEP_Master_Out[317] = \<const0> ;
  assign LOCKSTEP_Master_Out[318] = \<const0> ;
  assign LOCKSTEP_Master_Out[319] = \<const0> ;
  assign LOCKSTEP_Master_Out[320] = \<const0> ;
  assign LOCKSTEP_Master_Out[321] = \<const0> ;
  assign LOCKSTEP_Master_Out[322] = \<const0> ;
  assign LOCKSTEP_Master_Out[323] = \<const0> ;
  assign LOCKSTEP_Master_Out[324] = \<const0> ;
  assign LOCKSTEP_Master_Out[325] = \<const0> ;
  assign LOCKSTEP_Master_Out[326] = \<const0> ;
  assign LOCKSTEP_Master_Out[327] = \<const0> ;
  assign LOCKSTEP_Master_Out[328] = \<const0> ;
  assign LOCKSTEP_Master_Out[329] = \<const0> ;
  assign LOCKSTEP_Master_Out[330] = \<const0> ;
  assign LOCKSTEP_Master_Out[331] = \<const0> ;
  assign LOCKSTEP_Master_Out[332] = \<const0> ;
  assign LOCKSTEP_Master_Out[333] = \<const0> ;
  assign LOCKSTEP_Master_Out[334] = \<const0> ;
  assign LOCKSTEP_Master_Out[335] = \<const0> ;
  assign LOCKSTEP_Master_Out[336] = \<const0> ;
  assign LOCKSTEP_Master_Out[337] = \<const0> ;
  assign LOCKSTEP_Master_Out[338] = \<const0> ;
  assign LOCKSTEP_Master_Out[339] = \<const0> ;
  assign LOCKSTEP_Master_Out[340] = \<const0> ;
  assign LOCKSTEP_Master_Out[341] = \<const0> ;
  assign LOCKSTEP_Master_Out[342] = \<const0> ;
  assign LOCKSTEP_Master_Out[343] = \<const0> ;
  assign LOCKSTEP_Master_Out[344] = \<const0> ;
  assign LOCKSTEP_Master_Out[345] = \<const0> ;
  assign LOCKSTEP_Master_Out[346] = \<const0> ;
  assign LOCKSTEP_Master_Out[347] = \<const0> ;
  assign LOCKSTEP_Master_Out[348] = \<const0> ;
  assign LOCKSTEP_Master_Out[349] = \<const0> ;
  assign LOCKSTEP_Master_Out[350] = \<const0> ;
  assign LOCKSTEP_Master_Out[351] = \<const0> ;
  assign LOCKSTEP_Master_Out[352] = \<const0> ;
  assign LOCKSTEP_Master_Out[353] = \<const0> ;
  assign LOCKSTEP_Master_Out[354] = \<const0> ;
  assign LOCKSTEP_Master_Out[355] = \<const0> ;
  assign LOCKSTEP_Master_Out[356] = \<const0> ;
  assign LOCKSTEP_Master_Out[357] = \<const0> ;
  assign LOCKSTEP_Master_Out[358] = \<const0> ;
  assign LOCKSTEP_Master_Out[359] = \<const0> ;
  assign LOCKSTEP_Master_Out[360] = \<const0> ;
  assign LOCKSTEP_Master_Out[361] = \<const0> ;
  assign LOCKSTEP_Master_Out[362] = \<const0> ;
  assign LOCKSTEP_Master_Out[363] = \<const0> ;
  assign LOCKSTEP_Master_Out[364] = \<const0> ;
  assign LOCKSTEP_Master_Out[365] = \<const0> ;
  assign LOCKSTEP_Master_Out[366] = \<const0> ;
  assign LOCKSTEP_Master_Out[367] = \<const0> ;
  assign LOCKSTEP_Master_Out[368] = \<const0> ;
  assign LOCKSTEP_Master_Out[369] = \<const0> ;
  assign LOCKSTEP_Master_Out[370] = \<const0> ;
  assign LOCKSTEP_Master_Out[371] = \<const0> ;
  assign LOCKSTEP_Master_Out[372] = \<const0> ;
  assign LOCKSTEP_Master_Out[373] = \<const0> ;
  assign LOCKSTEP_Master_Out[374] = \<const0> ;
  assign LOCKSTEP_Master_Out[375] = \<const0> ;
  assign LOCKSTEP_Master_Out[376] = \<const0> ;
  assign LOCKSTEP_Master_Out[377] = \<const0> ;
  assign LOCKSTEP_Master_Out[378] = \<const0> ;
  assign LOCKSTEP_Master_Out[379] = \<const0> ;
  assign LOCKSTEP_Master_Out[380] = \<const0> ;
  assign LOCKSTEP_Master_Out[381] = \<const0> ;
  assign LOCKSTEP_Master_Out[382] = \<const0> ;
  assign LOCKSTEP_Master_Out[383] = \<const0> ;
  assign LOCKSTEP_Master_Out[384] = \<const0> ;
  assign LOCKSTEP_Master_Out[385] = \<const0> ;
  assign LOCKSTEP_Master_Out[386] = \<const0> ;
  assign LOCKSTEP_Master_Out[387] = \<const0> ;
  assign LOCKSTEP_Master_Out[388] = \<const0> ;
  assign LOCKSTEP_Master_Out[389] = \<const0> ;
  assign LOCKSTEP_Master_Out[390] = \<const0> ;
  assign LOCKSTEP_Master_Out[391] = \<const0> ;
  assign LOCKSTEP_Master_Out[392] = \<const0> ;
  assign LOCKSTEP_Master_Out[393] = \<const0> ;
  assign LOCKSTEP_Master_Out[394] = \<const0> ;
  assign LOCKSTEP_Master_Out[395] = \<const0> ;
  assign LOCKSTEP_Master_Out[396] = \<const0> ;
  assign LOCKSTEP_Master_Out[397] = \<const0> ;
  assign LOCKSTEP_Master_Out[398] = \<const0> ;
  assign LOCKSTEP_Master_Out[399] = \<const0> ;
  assign LOCKSTEP_Master_Out[400] = \<const0> ;
  assign LOCKSTEP_Master_Out[401] = \<const0> ;
  assign LOCKSTEP_Master_Out[402] = \<const0> ;
  assign LOCKSTEP_Master_Out[403] = \<const0> ;
  assign LOCKSTEP_Master_Out[404] = \<const0> ;
  assign LOCKSTEP_Master_Out[405] = \<const0> ;
  assign LOCKSTEP_Master_Out[406] = \<const0> ;
  assign LOCKSTEP_Master_Out[407] = \<const0> ;
  assign LOCKSTEP_Master_Out[408] = \<const0> ;
  assign LOCKSTEP_Master_Out[409] = \<const0> ;
  assign LOCKSTEP_Master_Out[410] = \<const0> ;
  assign LOCKSTEP_Master_Out[411] = \<const0> ;
  assign LOCKSTEP_Master_Out[412] = \<const0> ;
  assign LOCKSTEP_Master_Out[413] = \<const0> ;
  assign LOCKSTEP_Master_Out[414] = \<const0> ;
  assign LOCKSTEP_Master_Out[415] = \<const0> ;
  assign LOCKSTEP_Master_Out[416] = \<const0> ;
  assign LOCKSTEP_Master_Out[417] = \<const0> ;
  assign LOCKSTEP_Master_Out[418] = \<const0> ;
  assign LOCKSTEP_Master_Out[419] = \<const0> ;
  assign LOCKSTEP_Master_Out[420] = \<const0> ;
  assign LOCKSTEP_Master_Out[421] = \<const0> ;
  assign LOCKSTEP_Master_Out[422] = \<const0> ;
  assign LOCKSTEP_Master_Out[423] = \<const0> ;
  assign LOCKSTEP_Master_Out[424] = \<const0> ;
  assign LOCKSTEP_Master_Out[425] = \<const0> ;
  assign LOCKSTEP_Master_Out[426] = \<const0> ;
  assign LOCKSTEP_Master_Out[427] = \<const0> ;
  assign LOCKSTEP_Master_Out[428] = \<const0> ;
  assign LOCKSTEP_Master_Out[429] = \<const0> ;
  assign LOCKSTEP_Master_Out[430] = \<const0> ;
  assign LOCKSTEP_Master_Out[431] = \<const0> ;
  assign LOCKSTEP_Master_Out[432] = \<const0> ;
  assign LOCKSTEP_Master_Out[433] = \<const0> ;
  assign LOCKSTEP_Master_Out[434] = \<const0> ;
  assign LOCKSTEP_Master_Out[435] = \<const0> ;
  assign LOCKSTEP_Master_Out[436] = \<const0> ;
  assign LOCKSTEP_Master_Out[437] = \<const0> ;
  assign LOCKSTEP_Master_Out[438] = \<const0> ;
  assign LOCKSTEP_Master_Out[439] = \<const0> ;
  assign LOCKSTEP_Master_Out[440] = \<const0> ;
  assign LOCKSTEP_Master_Out[441] = \<const0> ;
  assign LOCKSTEP_Master_Out[442] = \<const0> ;
  assign LOCKSTEP_Master_Out[443] = \<const0> ;
  assign LOCKSTEP_Master_Out[444] = \<const0> ;
  assign LOCKSTEP_Master_Out[445] = \<const0> ;
  assign LOCKSTEP_Master_Out[446] = \<const0> ;
  assign LOCKSTEP_Master_Out[447] = \<const0> ;
  assign LOCKSTEP_Master_Out[448] = \<const0> ;
  assign LOCKSTEP_Master_Out[449] = \<const0> ;
  assign LOCKSTEP_Master_Out[450] = \<const0> ;
  assign LOCKSTEP_Master_Out[451] = \<const0> ;
  assign LOCKSTEP_Master_Out[452] = \<const0> ;
  assign LOCKSTEP_Master_Out[453] = \<const0> ;
  assign LOCKSTEP_Master_Out[454] = \<const0> ;
  assign LOCKSTEP_Master_Out[455] = \<const0> ;
  assign LOCKSTEP_Master_Out[456] = \<const0> ;
  assign LOCKSTEP_Master_Out[457] = \<const0> ;
  assign LOCKSTEP_Master_Out[458] = \<const0> ;
  assign LOCKSTEP_Master_Out[459] = \<const0> ;
  assign LOCKSTEP_Master_Out[460] = \<const0> ;
  assign LOCKSTEP_Master_Out[461] = \<const0> ;
  assign LOCKSTEP_Master_Out[462] = \<const0> ;
  assign LOCKSTEP_Master_Out[463] = \<const0> ;
  assign LOCKSTEP_Master_Out[464] = \<const0> ;
  assign LOCKSTEP_Master_Out[465] = \<const0> ;
  assign LOCKSTEP_Master_Out[466] = \<const0> ;
  assign LOCKSTEP_Master_Out[467] = \<const0> ;
  assign LOCKSTEP_Master_Out[468] = \<const0> ;
  assign LOCKSTEP_Master_Out[469] = \<const0> ;
  assign LOCKSTEP_Master_Out[470] = \<const0> ;
  assign LOCKSTEP_Master_Out[471] = \<const0> ;
  assign LOCKSTEP_Master_Out[472] = \<const0> ;
  assign LOCKSTEP_Master_Out[473] = \<const0> ;
  assign LOCKSTEP_Master_Out[474] = \<const0> ;
  assign LOCKSTEP_Master_Out[475] = \<const0> ;
  assign LOCKSTEP_Master_Out[476] = \<const0> ;
  assign LOCKSTEP_Master_Out[477] = \<const0> ;
  assign LOCKSTEP_Master_Out[478] = \<const0> ;
  assign LOCKSTEP_Master_Out[479] = \<const0> ;
  assign LOCKSTEP_Master_Out[480] = \<const0> ;
  assign LOCKSTEP_Master_Out[481] = \<const0> ;
  assign LOCKSTEP_Master_Out[482] = \<const0> ;
  assign LOCKSTEP_Master_Out[483] = \<const0> ;
  assign LOCKSTEP_Master_Out[484] = \<const0> ;
  assign LOCKSTEP_Master_Out[485] = \<const0> ;
  assign LOCKSTEP_Master_Out[486] = \<const0> ;
  assign LOCKSTEP_Master_Out[487] = \<const0> ;
  assign LOCKSTEP_Master_Out[488] = \<const0> ;
  assign LOCKSTEP_Master_Out[489] = \<const0> ;
  assign LOCKSTEP_Master_Out[490] = \<const0> ;
  assign LOCKSTEP_Master_Out[491] = \<const0> ;
  assign LOCKSTEP_Master_Out[492] = \<const0> ;
  assign LOCKSTEP_Master_Out[493] = \<const0> ;
  assign LOCKSTEP_Master_Out[494] = \<const0> ;
  assign LOCKSTEP_Master_Out[495] = \<const0> ;
  assign LOCKSTEP_Master_Out[496] = \<const0> ;
  assign LOCKSTEP_Master_Out[497] = \<const0> ;
  assign LOCKSTEP_Master_Out[498] = \<const0> ;
  assign LOCKSTEP_Master_Out[499] = \<const0> ;
  assign LOCKSTEP_Master_Out[500] = \<const0> ;
  assign LOCKSTEP_Master_Out[501] = \<const0> ;
  assign LOCKSTEP_Master_Out[502] = \<const0> ;
  assign LOCKSTEP_Master_Out[503] = \<const0> ;
  assign LOCKSTEP_Master_Out[504] = \<const0> ;
  assign LOCKSTEP_Master_Out[505] = \<const0> ;
  assign LOCKSTEP_Master_Out[506] = \<const0> ;
  assign LOCKSTEP_Master_Out[507] = \<const0> ;
  assign LOCKSTEP_Master_Out[508] = \<const0> ;
  assign LOCKSTEP_Master_Out[509] = \<const0> ;
  assign LOCKSTEP_Master_Out[510] = \<const0> ;
  assign LOCKSTEP_Master_Out[511] = \<const0> ;
  assign LOCKSTEP_Master_Out[512] = \<const0> ;
  assign LOCKSTEP_Master_Out[513] = \<const0> ;
  assign LOCKSTEP_Master_Out[514] = \<const0> ;
  assign LOCKSTEP_Master_Out[515] = \<const0> ;
  assign LOCKSTEP_Master_Out[516] = \<const0> ;
  assign LOCKSTEP_Master_Out[517] = \<const0> ;
  assign LOCKSTEP_Master_Out[518] = \<const0> ;
  assign LOCKSTEP_Master_Out[519] = \<const0> ;
  assign LOCKSTEP_Master_Out[520] = \<const0> ;
  assign LOCKSTEP_Master_Out[521] = \<const0> ;
  assign LOCKSTEP_Master_Out[522] = \<const0> ;
  assign LOCKSTEP_Master_Out[523] = \<const0> ;
  assign LOCKSTEP_Master_Out[524] = \<const0> ;
  assign LOCKSTEP_Master_Out[525] = \<const0> ;
  assign LOCKSTEP_Master_Out[526] = \<const0> ;
  assign LOCKSTEP_Master_Out[527] = \<const0> ;
  assign LOCKSTEP_Master_Out[528] = \<const0> ;
  assign LOCKSTEP_Master_Out[529] = \<const0> ;
  assign LOCKSTEP_Master_Out[530] = \<const0> ;
  assign LOCKSTEP_Master_Out[531] = \<const0> ;
  assign LOCKSTEP_Master_Out[532] = \<const0> ;
  assign LOCKSTEP_Master_Out[533] = \<const0> ;
  assign LOCKSTEP_Master_Out[534] = \<const0> ;
  assign LOCKSTEP_Master_Out[535] = \<const0> ;
  assign LOCKSTEP_Master_Out[536] = \<const0> ;
  assign LOCKSTEP_Master_Out[537] = \<const0> ;
  assign LOCKSTEP_Master_Out[538] = \<const0> ;
  assign LOCKSTEP_Master_Out[539] = \<const0> ;
  assign LOCKSTEP_Master_Out[540] = \<const0> ;
  assign LOCKSTEP_Master_Out[541] = \<const0> ;
  assign LOCKSTEP_Master_Out[542] = \<const0> ;
  assign LOCKSTEP_Master_Out[543] = \<const0> ;
  assign LOCKSTEP_Master_Out[544] = \<const0> ;
  assign LOCKSTEP_Master_Out[545] = \<const0> ;
  assign LOCKSTEP_Master_Out[546] = \<const0> ;
  assign LOCKSTEP_Master_Out[547] = \<const0> ;
  assign LOCKSTEP_Master_Out[548] = \<const0> ;
  assign LOCKSTEP_Master_Out[549] = \<const0> ;
  assign LOCKSTEP_Master_Out[550] = \<const0> ;
  assign LOCKSTEP_Master_Out[551] = \<const0> ;
  assign LOCKSTEP_Master_Out[552] = \<const0> ;
  assign LOCKSTEP_Master_Out[553] = \<const0> ;
  assign LOCKSTEP_Master_Out[554] = \<const0> ;
  assign LOCKSTEP_Master_Out[555] = \<const0> ;
  assign LOCKSTEP_Master_Out[556] = \<const0> ;
  assign LOCKSTEP_Master_Out[557] = \<const0> ;
  assign LOCKSTEP_Master_Out[558] = \<const0> ;
  assign LOCKSTEP_Master_Out[559] = \<const0> ;
  assign LOCKSTEP_Master_Out[560] = \<const0> ;
  assign LOCKSTEP_Master_Out[561] = \<const0> ;
  assign LOCKSTEP_Master_Out[562] = \<const0> ;
  assign LOCKSTEP_Master_Out[563] = \<const0> ;
  assign LOCKSTEP_Master_Out[564] = \<const0> ;
  assign LOCKSTEP_Master_Out[565] = \<const0> ;
  assign LOCKSTEP_Master_Out[566] = \<const0> ;
  assign LOCKSTEP_Master_Out[567] = \<const0> ;
  assign LOCKSTEP_Master_Out[568] = \<const0> ;
  assign LOCKSTEP_Master_Out[569] = \<const0> ;
  assign LOCKSTEP_Master_Out[570] = \<const0> ;
  assign LOCKSTEP_Master_Out[571] = \<const0> ;
  assign LOCKSTEP_Master_Out[572] = \<const0> ;
  assign LOCKSTEP_Master_Out[573] = \<const0> ;
  assign LOCKSTEP_Master_Out[574] = \<const0> ;
  assign LOCKSTEP_Master_Out[575] = \<const0> ;
  assign LOCKSTEP_Master_Out[576] = \<const0> ;
  assign LOCKSTEP_Master_Out[577] = \<const0> ;
  assign LOCKSTEP_Master_Out[578] = \<const0> ;
  assign LOCKSTEP_Master_Out[579] = \<const0> ;
  assign LOCKSTEP_Master_Out[580] = \<const0> ;
  assign LOCKSTEP_Master_Out[581] = \<const0> ;
  assign LOCKSTEP_Master_Out[582] = \<const0> ;
  assign LOCKSTEP_Master_Out[583] = \<const0> ;
  assign LOCKSTEP_Master_Out[584] = \<const0> ;
  assign LOCKSTEP_Master_Out[585] = \<const0> ;
  assign LOCKSTEP_Master_Out[586] = \<const0> ;
  assign LOCKSTEP_Master_Out[587] = \<const0> ;
  assign LOCKSTEP_Master_Out[588] = \<const0> ;
  assign LOCKSTEP_Master_Out[589] = \<const0> ;
  assign LOCKSTEP_Master_Out[590] = \<const0> ;
  assign LOCKSTEP_Master_Out[591] = \<const0> ;
  assign LOCKSTEP_Master_Out[592] = \<const0> ;
  assign LOCKSTEP_Master_Out[593] = \<const0> ;
  assign LOCKSTEP_Master_Out[594] = \<const0> ;
  assign LOCKSTEP_Master_Out[595] = \<const0> ;
  assign LOCKSTEP_Master_Out[596] = \<const0> ;
  assign LOCKSTEP_Master_Out[597] = \<const0> ;
  assign LOCKSTEP_Master_Out[598] = \<const0> ;
  assign LOCKSTEP_Master_Out[599] = \<const0> ;
  assign LOCKSTEP_Master_Out[600] = \<const0> ;
  assign LOCKSTEP_Master_Out[601] = \<const0> ;
  assign LOCKSTEP_Master_Out[602] = \<const0> ;
  assign LOCKSTEP_Master_Out[603] = \<const0> ;
  assign LOCKSTEP_Master_Out[604] = \<const0> ;
  assign LOCKSTEP_Master_Out[605] = \<const0> ;
  assign LOCKSTEP_Master_Out[606] = \<const0> ;
  assign LOCKSTEP_Master_Out[607] = \<const0> ;
  assign LOCKSTEP_Master_Out[608] = \<const0> ;
  assign LOCKSTEP_Master_Out[609] = \<const0> ;
  assign LOCKSTEP_Master_Out[610] = \<const0> ;
  assign LOCKSTEP_Master_Out[611] = \<const0> ;
  assign LOCKSTEP_Master_Out[612] = \<const0> ;
  assign LOCKSTEP_Master_Out[613] = \<const0> ;
  assign LOCKSTEP_Master_Out[614] = \<const0> ;
  assign LOCKSTEP_Master_Out[615] = \<const0> ;
  assign LOCKSTEP_Master_Out[616] = \<const0> ;
  assign LOCKSTEP_Master_Out[617] = \<const0> ;
  assign LOCKSTEP_Master_Out[618] = \<const0> ;
  assign LOCKSTEP_Master_Out[619] = \<const0> ;
  assign LOCKSTEP_Master_Out[620] = \<const0> ;
  assign LOCKSTEP_Master_Out[621] = \<const0> ;
  assign LOCKSTEP_Master_Out[622] = \<const0> ;
  assign LOCKSTEP_Master_Out[623] = \<const0> ;
  assign LOCKSTEP_Master_Out[624] = \<const0> ;
  assign LOCKSTEP_Master_Out[625] = \<const0> ;
  assign LOCKSTEP_Master_Out[626] = \<const0> ;
  assign LOCKSTEP_Master_Out[627] = \<const0> ;
  assign LOCKSTEP_Master_Out[628] = \<const0> ;
  assign LOCKSTEP_Master_Out[629] = \<const0> ;
  assign LOCKSTEP_Master_Out[630] = \<const0> ;
  assign LOCKSTEP_Master_Out[631] = \<const0> ;
  assign LOCKSTEP_Master_Out[632] = \<const0> ;
  assign LOCKSTEP_Master_Out[633] = \<const0> ;
  assign LOCKSTEP_Master_Out[634] = \<const0> ;
  assign LOCKSTEP_Master_Out[635] = \<const0> ;
  assign LOCKSTEP_Master_Out[636] = \<const0> ;
  assign LOCKSTEP_Master_Out[637] = \<const0> ;
  assign LOCKSTEP_Master_Out[638] = \<const0> ;
  assign LOCKSTEP_Master_Out[639] = \<const0> ;
  assign LOCKSTEP_Master_Out[640] = \<const0> ;
  assign LOCKSTEP_Master_Out[641] = \<const0> ;
  assign LOCKSTEP_Master_Out[642] = \<const0> ;
  assign LOCKSTEP_Master_Out[643] = \<const0> ;
  assign LOCKSTEP_Master_Out[644] = \<const0> ;
  assign LOCKSTEP_Master_Out[645] = \<const0> ;
  assign LOCKSTEP_Master_Out[646] = \<const0> ;
  assign LOCKSTEP_Master_Out[647] = \<const0> ;
  assign LOCKSTEP_Master_Out[648] = \<const0> ;
  assign LOCKSTEP_Master_Out[649] = \<const0> ;
  assign LOCKSTEP_Master_Out[650] = \<const0> ;
  assign LOCKSTEP_Master_Out[651] = \<const0> ;
  assign LOCKSTEP_Master_Out[652] = \<const0> ;
  assign LOCKSTEP_Master_Out[653] = \<const0> ;
  assign LOCKSTEP_Master_Out[654] = \<const0> ;
  assign LOCKSTEP_Master_Out[655] = \<const0> ;
  assign LOCKSTEP_Master_Out[656] = \<const0> ;
  assign LOCKSTEP_Master_Out[657] = \<const0> ;
  assign LOCKSTEP_Master_Out[658] = \<const0> ;
  assign LOCKSTEP_Master_Out[659] = \<const0> ;
  assign LOCKSTEP_Master_Out[660] = \<const0> ;
  assign LOCKSTEP_Master_Out[661] = \<const0> ;
  assign LOCKSTEP_Master_Out[662] = \<const0> ;
  assign LOCKSTEP_Master_Out[663] = \<const0> ;
  assign LOCKSTEP_Master_Out[664] = \<const0> ;
  assign LOCKSTEP_Master_Out[665] = \<const0> ;
  assign LOCKSTEP_Master_Out[666] = \<const0> ;
  assign LOCKSTEP_Master_Out[667] = \<const0> ;
  assign LOCKSTEP_Master_Out[668] = \<const0> ;
  assign LOCKSTEP_Master_Out[669] = \<const0> ;
  assign LOCKSTEP_Master_Out[670] = \<const0> ;
  assign LOCKSTEP_Master_Out[671] = \<const0> ;
  assign LOCKSTEP_Master_Out[672] = \<const0> ;
  assign LOCKSTEP_Master_Out[673] = \<const0> ;
  assign LOCKSTEP_Master_Out[674] = \<const0> ;
  assign LOCKSTEP_Master_Out[675] = \<const0> ;
  assign LOCKSTEP_Master_Out[676] = \<const0> ;
  assign LOCKSTEP_Master_Out[677] = \<const0> ;
  assign LOCKSTEP_Master_Out[678] = \<const0> ;
  assign LOCKSTEP_Master_Out[679] = \<const0> ;
  assign LOCKSTEP_Master_Out[680] = \<const0> ;
  assign LOCKSTEP_Master_Out[681] = \<const0> ;
  assign LOCKSTEP_Master_Out[682] = \<const0> ;
  assign LOCKSTEP_Master_Out[683] = \<const0> ;
  assign LOCKSTEP_Master_Out[684] = \<const0> ;
  assign LOCKSTEP_Master_Out[685] = \<const0> ;
  assign LOCKSTEP_Master_Out[686] = \<const0> ;
  assign LOCKSTEP_Master_Out[687] = \<const0> ;
  assign LOCKSTEP_Master_Out[688] = \<const0> ;
  assign LOCKSTEP_Master_Out[689] = \<const0> ;
  assign LOCKSTEP_Master_Out[690] = \<const0> ;
  assign LOCKSTEP_Master_Out[691] = \<const0> ;
  assign LOCKSTEP_Master_Out[692] = \<const0> ;
  assign LOCKSTEP_Master_Out[693] = \<const0> ;
  assign LOCKSTEP_Master_Out[694] = \<const0> ;
  assign LOCKSTEP_Master_Out[695] = \<const0> ;
  assign LOCKSTEP_Master_Out[696] = \<const0> ;
  assign LOCKSTEP_Master_Out[697] = \<const0> ;
  assign LOCKSTEP_Master_Out[698] = \<const0> ;
  assign LOCKSTEP_Master_Out[699] = \<const0> ;
  assign LOCKSTEP_Master_Out[700] = \<const0> ;
  assign LOCKSTEP_Master_Out[701] = \<const0> ;
  assign LOCKSTEP_Master_Out[702] = \<const0> ;
  assign LOCKSTEP_Master_Out[703] = \<const0> ;
  assign LOCKSTEP_Master_Out[704] = \<const0> ;
  assign LOCKSTEP_Master_Out[705] = \<const0> ;
  assign LOCKSTEP_Master_Out[706] = \<const0> ;
  assign LOCKSTEP_Master_Out[707] = \<const0> ;
  assign LOCKSTEP_Master_Out[708] = \<const0> ;
  assign LOCKSTEP_Master_Out[709] = \<const0> ;
  assign LOCKSTEP_Master_Out[710] = \<const0> ;
  assign LOCKSTEP_Master_Out[711] = \<const0> ;
  assign LOCKSTEP_Master_Out[712] = \<const0> ;
  assign LOCKSTEP_Master_Out[713] = \<const0> ;
  assign LOCKSTEP_Master_Out[714] = \<const0> ;
  assign LOCKSTEP_Master_Out[715] = \<const0> ;
  assign LOCKSTEP_Master_Out[716] = \<const0> ;
  assign LOCKSTEP_Master_Out[717] = \<const0> ;
  assign LOCKSTEP_Master_Out[718] = \<const0> ;
  assign LOCKSTEP_Master_Out[719] = \<const0> ;
  assign LOCKSTEP_Master_Out[720] = \<const0> ;
  assign LOCKSTEP_Master_Out[721] = \<const0> ;
  assign LOCKSTEP_Master_Out[722] = \<const0> ;
  assign LOCKSTEP_Master_Out[723] = \<const0> ;
  assign LOCKSTEP_Master_Out[724] = \<const0> ;
  assign LOCKSTEP_Master_Out[725] = \<const0> ;
  assign LOCKSTEP_Master_Out[726] = \<const0> ;
  assign LOCKSTEP_Master_Out[727] = \<const0> ;
  assign LOCKSTEP_Master_Out[728] = \<const0> ;
  assign LOCKSTEP_Master_Out[729] = \<const0> ;
  assign LOCKSTEP_Master_Out[730] = \<const0> ;
  assign LOCKSTEP_Master_Out[731] = \<const0> ;
  assign LOCKSTEP_Master_Out[732] = \<const0> ;
  assign LOCKSTEP_Master_Out[733] = \<const0> ;
  assign LOCKSTEP_Master_Out[734] = \<const0> ;
  assign LOCKSTEP_Master_Out[735] = \<const0> ;
  assign LOCKSTEP_Master_Out[736] = \<const0> ;
  assign LOCKSTEP_Master_Out[737] = \<const0> ;
  assign LOCKSTEP_Master_Out[738] = \<const0> ;
  assign LOCKSTEP_Master_Out[739] = \<const0> ;
  assign LOCKSTEP_Master_Out[740] = \<const0> ;
  assign LOCKSTEP_Master_Out[741] = \<const0> ;
  assign LOCKSTEP_Master_Out[742] = \<const0> ;
  assign LOCKSTEP_Master_Out[743] = \<const0> ;
  assign LOCKSTEP_Master_Out[744] = \<const0> ;
  assign LOCKSTEP_Master_Out[745] = \<const0> ;
  assign LOCKSTEP_Master_Out[746] = \<const0> ;
  assign LOCKSTEP_Master_Out[747] = \<const0> ;
  assign LOCKSTEP_Master_Out[748] = \<const0> ;
  assign LOCKSTEP_Master_Out[749] = \<const0> ;
  assign LOCKSTEP_Master_Out[750] = \<const0> ;
  assign LOCKSTEP_Master_Out[751] = \<const0> ;
  assign LOCKSTEP_Master_Out[752] = \<const0> ;
  assign LOCKSTEP_Master_Out[753] = \<const0> ;
  assign LOCKSTEP_Master_Out[754] = \<const0> ;
  assign LOCKSTEP_Master_Out[755] = \<const0> ;
  assign LOCKSTEP_Master_Out[756] = \<const0> ;
  assign LOCKSTEP_Master_Out[757] = \<const0> ;
  assign LOCKSTEP_Master_Out[758] = \<const0> ;
  assign LOCKSTEP_Master_Out[759] = \<const0> ;
  assign LOCKSTEP_Master_Out[760] = \<const0> ;
  assign LOCKSTEP_Master_Out[761] = \<const0> ;
  assign LOCKSTEP_Master_Out[762] = \<const0> ;
  assign LOCKSTEP_Master_Out[763] = \<const0> ;
  assign LOCKSTEP_Master_Out[764] = \<const0> ;
  assign LOCKSTEP_Master_Out[765] = \<const0> ;
  assign LOCKSTEP_Master_Out[766] = \<const0> ;
  assign LOCKSTEP_Master_Out[767] = \<const0> ;
  assign LOCKSTEP_Master_Out[768] = \<const0> ;
  assign LOCKSTEP_Master_Out[769] = \<const0> ;
  assign LOCKSTEP_Master_Out[770] = \<const0> ;
  assign LOCKSTEP_Master_Out[771] = \<const0> ;
  assign LOCKSTEP_Master_Out[772] = \<const0> ;
  assign LOCKSTEP_Master_Out[773] = \<const0> ;
  assign LOCKSTEP_Master_Out[774] = \<const0> ;
  assign LOCKSTEP_Master_Out[775] = \<const0> ;
  assign LOCKSTEP_Master_Out[776] = \<const0> ;
  assign LOCKSTEP_Master_Out[777] = \<const0> ;
  assign LOCKSTEP_Master_Out[778] = \<const0> ;
  assign LOCKSTEP_Master_Out[779] = \<const0> ;
  assign LOCKSTEP_Master_Out[780] = \<const0> ;
  assign LOCKSTEP_Master_Out[781] = \<const0> ;
  assign LOCKSTEP_Master_Out[782] = \<const0> ;
  assign LOCKSTEP_Master_Out[783] = \<const0> ;
  assign LOCKSTEP_Master_Out[784] = \<const0> ;
  assign LOCKSTEP_Master_Out[785] = \<const0> ;
  assign LOCKSTEP_Master_Out[786] = \<const0> ;
  assign LOCKSTEP_Master_Out[787] = \<const0> ;
  assign LOCKSTEP_Master_Out[788] = \<const0> ;
  assign LOCKSTEP_Master_Out[789] = \<const0> ;
  assign LOCKSTEP_Master_Out[790] = \<const0> ;
  assign LOCKSTEP_Master_Out[791] = \<const0> ;
  assign LOCKSTEP_Master_Out[792] = \<const0> ;
  assign LOCKSTEP_Master_Out[793] = \<const0> ;
  assign LOCKSTEP_Master_Out[794] = \<const0> ;
  assign LOCKSTEP_Master_Out[795] = \<const0> ;
  assign LOCKSTEP_Master_Out[796] = \<const0> ;
  assign LOCKSTEP_Master_Out[797] = \<const0> ;
  assign LOCKSTEP_Master_Out[798] = \<const0> ;
  assign LOCKSTEP_Master_Out[799] = \<const0> ;
  assign LOCKSTEP_Master_Out[800] = \<const0> ;
  assign LOCKSTEP_Master_Out[801] = \<const0> ;
  assign LOCKSTEP_Master_Out[802] = \<const0> ;
  assign LOCKSTEP_Master_Out[803] = \<const0> ;
  assign LOCKSTEP_Master_Out[804] = \<const0> ;
  assign LOCKSTEP_Master_Out[805] = \<const0> ;
  assign LOCKSTEP_Master_Out[806] = \<const0> ;
  assign LOCKSTEP_Master_Out[807] = \<const0> ;
  assign LOCKSTEP_Master_Out[808] = \<const0> ;
  assign LOCKSTEP_Master_Out[809] = \<const0> ;
  assign LOCKSTEP_Master_Out[810] = \<const0> ;
  assign LOCKSTEP_Master_Out[811] = \<const0> ;
  assign LOCKSTEP_Master_Out[812] = \<const0> ;
  assign LOCKSTEP_Master_Out[813] = \<const0> ;
  assign LOCKSTEP_Master_Out[814] = \<const0> ;
  assign LOCKSTEP_Master_Out[815] = \<const0> ;
  assign LOCKSTEP_Master_Out[816] = \<const0> ;
  assign LOCKSTEP_Master_Out[817] = \<const0> ;
  assign LOCKSTEP_Master_Out[818] = \<const0> ;
  assign LOCKSTEP_Master_Out[819] = \<const0> ;
  assign LOCKSTEP_Master_Out[820] = \<const0> ;
  assign LOCKSTEP_Master_Out[821] = \<const0> ;
  assign LOCKSTEP_Master_Out[822] = \<const0> ;
  assign LOCKSTEP_Master_Out[823] = \<const0> ;
  assign LOCKSTEP_Master_Out[824] = \<const0> ;
  assign LOCKSTEP_Master_Out[825] = \<const0> ;
  assign LOCKSTEP_Master_Out[826] = \<const0> ;
  assign LOCKSTEP_Master_Out[827] = \<const0> ;
  assign LOCKSTEP_Master_Out[828] = \<const0> ;
  assign LOCKSTEP_Master_Out[829] = \<const0> ;
  assign LOCKSTEP_Master_Out[830] = \<const0> ;
  assign LOCKSTEP_Master_Out[831] = \<const0> ;
  assign LOCKSTEP_Master_Out[832] = \<const0> ;
  assign LOCKSTEP_Master_Out[833] = \<const0> ;
  assign LOCKSTEP_Master_Out[834] = \<const0> ;
  assign LOCKSTEP_Master_Out[835] = \<const0> ;
  assign LOCKSTEP_Master_Out[836] = \<const0> ;
  assign LOCKSTEP_Master_Out[837] = \<const0> ;
  assign LOCKSTEP_Master_Out[838] = \<const0> ;
  assign LOCKSTEP_Master_Out[839] = \<const0> ;
  assign LOCKSTEP_Master_Out[840] = \<const0> ;
  assign LOCKSTEP_Master_Out[841] = \<const0> ;
  assign LOCKSTEP_Master_Out[842] = \<const0> ;
  assign LOCKSTEP_Master_Out[843] = \<const0> ;
  assign LOCKSTEP_Master_Out[844] = \<const0> ;
  assign LOCKSTEP_Master_Out[845] = \<const0> ;
  assign LOCKSTEP_Master_Out[846] = \<const0> ;
  assign LOCKSTEP_Master_Out[847] = \<const0> ;
  assign LOCKSTEP_Master_Out[848] = \<const0> ;
  assign LOCKSTEP_Master_Out[849] = \<const0> ;
  assign LOCKSTEP_Master_Out[850] = \<const0> ;
  assign LOCKSTEP_Master_Out[851] = \<const0> ;
  assign LOCKSTEP_Master_Out[852] = \<const0> ;
  assign LOCKSTEP_Master_Out[853] = \<const0> ;
  assign LOCKSTEP_Master_Out[854] = \<const0> ;
  assign LOCKSTEP_Master_Out[855] = \<const0> ;
  assign LOCKSTEP_Master_Out[856] = \<const0> ;
  assign LOCKSTEP_Master_Out[857] = \<const0> ;
  assign LOCKSTEP_Master_Out[858] = \<const0> ;
  assign LOCKSTEP_Master_Out[859] = \<const0> ;
  assign LOCKSTEP_Master_Out[860] = \<const0> ;
  assign LOCKSTEP_Master_Out[861] = \<const0> ;
  assign LOCKSTEP_Master_Out[862] = \<const0> ;
  assign LOCKSTEP_Master_Out[863] = \<const0> ;
  assign LOCKSTEP_Master_Out[864] = \<const0> ;
  assign LOCKSTEP_Master_Out[865] = \<const0> ;
  assign LOCKSTEP_Master_Out[866] = \<const0> ;
  assign LOCKSTEP_Master_Out[867] = \<const0> ;
  assign LOCKSTEP_Master_Out[868] = \<const0> ;
  assign LOCKSTEP_Master_Out[869] = \<const0> ;
  assign LOCKSTEP_Master_Out[870] = \<const0> ;
  assign LOCKSTEP_Master_Out[871] = \<const0> ;
  assign LOCKSTEP_Master_Out[872] = \<const0> ;
  assign LOCKSTEP_Master_Out[873] = \<const0> ;
  assign LOCKSTEP_Master_Out[874] = \<const0> ;
  assign LOCKSTEP_Master_Out[875] = \<const0> ;
  assign LOCKSTEP_Master_Out[876] = \<const0> ;
  assign LOCKSTEP_Master_Out[877] = \<const0> ;
  assign LOCKSTEP_Master_Out[878] = \<const0> ;
  assign LOCKSTEP_Master_Out[879] = \<const0> ;
  assign LOCKSTEP_Master_Out[880] = \<const0> ;
  assign LOCKSTEP_Master_Out[881] = \<const0> ;
  assign LOCKSTEP_Master_Out[882] = \<const0> ;
  assign LOCKSTEP_Master_Out[883] = \<const0> ;
  assign LOCKSTEP_Master_Out[884] = \<const0> ;
  assign LOCKSTEP_Master_Out[885] = \<const0> ;
  assign LOCKSTEP_Master_Out[886] = \<const0> ;
  assign LOCKSTEP_Master_Out[887] = \<const0> ;
  assign LOCKSTEP_Master_Out[888] = \<const0> ;
  assign LOCKSTEP_Master_Out[889] = \<const0> ;
  assign LOCKSTEP_Master_Out[890] = \<const0> ;
  assign LOCKSTEP_Master_Out[891] = \<const0> ;
  assign LOCKSTEP_Master_Out[892] = \<const0> ;
  assign LOCKSTEP_Master_Out[893] = \<const0> ;
  assign LOCKSTEP_Master_Out[894] = \<const0> ;
  assign LOCKSTEP_Master_Out[895] = \<const0> ;
  assign LOCKSTEP_Master_Out[896] = \<const0> ;
  assign LOCKSTEP_Master_Out[897] = \<const0> ;
  assign LOCKSTEP_Master_Out[898] = \<const0> ;
  assign LOCKSTEP_Master_Out[899] = \<const0> ;
  assign LOCKSTEP_Master_Out[900] = \<const0> ;
  assign LOCKSTEP_Master_Out[901] = \<const0> ;
  assign LOCKSTEP_Master_Out[902] = \<const0> ;
  assign LOCKSTEP_Master_Out[903] = \<const0> ;
  assign LOCKSTEP_Master_Out[904] = \<const0> ;
  assign LOCKSTEP_Master_Out[905] = \<const0> ;
  assign LOCKSTEP_Master_Out[906] = \<const0> ;
  assign LOCKSTEP_Master_Out[907] = \<const0> ;
  assign LOCKSTEP_Master_Out[908] = \<const0> ;
  assign LOCKSTEP_Master_Out[909] = \<const0> ;
  assign LOCKSTEP_Master_Out[910] = \<const0> ;
  assign LOCKSTEP_Master_Out[911] = \<const0> ;
  assign LOCKSTEP_Master_Out[912] = \<const0> ;
  assign LOCKSTEP_Master_Out[913] = \<const0> ;
  assign LOCKSTEP_Master_Out[914] = \<const0> ;
  assign LOCKSTEP_Master_Out[915] = \<const0> ;
  assign LOCKSTEP_Master_Out[916] = \<const0> ;
  assign LOCKSTEP_Master_Out[917] = \<const0> ;
  assign LOCKSTEP_Master_Out[918] = \<const0> ;
  assign LOCKSTEP_Master_Out[919] = \<const0> ;
  assign LOCKSTEP_Master_Out[920] = \<const0> ;
  assign LOCKSTEP_Master_Out[921] = \<const0> ;
  assign LOCKSTEP_Master_Out[922] = \<const0> ;
  assign LOCKSTEP_Master_Out[923] = \<const0> ;
  assign LOCKSTEP_Master_Out[924] = \<const0> ;
  assign LOCKSTEP_Master_Out[925] = \<const0> ;
  assign LOCKSTEP_Master_Out[926] = \<const0> ;
  assign LOCKSTEP_Master_Out[927] = \<const0> ;
  assign LOCKSTEP_Master_Out[928] = \<const0> ;
  assign LOCKSTEP_Master_Out[929] = \<const0> ;
  assign LOCKSTEP_Master_Out[930] = \<const0> ;
  assign LOCKSTEP_Master_Out[931] = \<const0> ;
  assign LOCKSTEP_Master_Out[932] = \<const0> ;
  assign LOCKSTEP_Master_Out[933] = \<const0> ;
  assign LOCKSTEP_Master_Out[934] = \<const0> ;
  assign LOCKSTEP_Master_Out[935] = \<const0> ;
  assign LOCKSTEP_Master_Out[936] = \<const0> ;
  assign LOCKSTEP_Master_Out[937] = \<const0> ;
  assign LOCKSTEP_Master_Out[938] = \<const0> ;
  assign LOCKSTEP_Master_Out[939] = \<const0> ;
  assign LOCKSTEP_Master_Out[940] = \<const0> ;
  assign LOCKSTEP_Master_Out[941] = \<const0> ;
  assign LOCKSTEP_Master_Out[942] = \<const0> ;
  assign LOCKSTEP_Master_Out[943] = \<const0> ;
  assign LOCKSTEP_Master_Out[944] = \<const0> ;
  assign LOCKSTEP_Master_Out[945] = \<const0> ;
  assign LOCKSTEP_Master_Out[946] = \<const0> ;
  assign LOCKSTEP_Master_Out[947] = \<const0> ;
  assign LOCKSTEP_Master_Out[948] = \<const0> ;
  assign LOCKSTEP_Master_Out[949] = \<const0> ;
  assign LOCKSTEP_Master_Out[950] = \<const0> ;
  assign LOCKSTEP_Master_Out[951] = \<const0> ;
  assign LOCKSTEP_Master_Out[952] = \<const0> ;
  assign LOCKSTEP_Master_Out[953] = \<const0> ;
  assign LOCKSTEP_Master_Out[954] = \<const0> ;
  assign LOCKSTEP_Master_Out[955] = \<const0> ;
  assign LOCKSTEP_Master_Out[956] = \<const0> ;
  assign LOCKSTEP_Master_Out[957] = \<const0> ;
  assign LOCKSTEP_Master_Out[958] = \<const0> ;
  assign LOCKSTEP_Master_Out[959] = \<const0> ;
  assign LOCKSTEP_Master_Out[960] = \<const0> ;
  assign LOCKSTEP_Master_Out[961] = \<const0> ;
  assign LOCKSTEP_Master_Out[962] = \<const0> ;
  assign LOCKSTEP_Master_Out[963] = \<const0> ;
  assign LOCKSTEP_Master_Out[964] = \<const0> ;
  assign LOCKSTEP_Master_Out[965] = \<const0> ;
  assign LOCKSTEP_Master_Out[966] = \<const0> ;
  assign LOCKSTEP_Master_Out[967] = \<const0> ;
  assign LOCKSTEP_Master_Out[968] = \<const0> ;
  assign LOCKSTEP_Master_Out[969] = \<const0> ;
  assign LOCKSTEP_Master_Out[970] = \<const0> ;
  assign LOCKSTEP_Master_Out[971] = \<const0> ;
  assign LOCKSTEP_Master_Out[972] = \<const0> ;
  assign LOCKSTEP_Master_Out[973] = \<const0> ;
  assign LOCKSTEP_Master_Out[974] = \<const0> ;
  assign LOCKSTEP_Master_Out[975] = \<const0> ;
  assign LOCKSTEP_Master_Out[976] = \<const0> ;
  assign LOCKSTEP_Master_Out[977] = \<const0> ;
  assign LOCKSTEP_Master_Out[978] = \<const0> ;
  assign LOCKSTEP_Master_Out[979] = \<const0> ;
  assign LOCKSTEP_Master_Out[980] = \<const0> ;
  assign LOCKSTEP_Master_Out[981] = \<const0> ;
  assign LOCKSTEP_Master_Out[982] = \<const0> ;
  assign LOCKSTEP_Master_Out[983] = \<const0> ;
  assign LOCKSTEP_Master_Out[984] = \<const0> ;
  assign LOCKSTEP_Master_Out[985] = \<const0> ;
  assign LOCKSTEP_Master_Out[986] = \<const0> ;
  assign LOCKSTEP_Master_Out[987] = \<const0> ;
  assign LOCKSTEP_Master_Out[988] = \<const0> ;
  assign LOCKSTEP_Master_Out[989] = \<const0> ;
  assign LOCKSTEP_Master_Out[990] = \<const0> ;
  assign LOCKSTEP_Master_Out[991] = \<const0> ;
  assign LOCKSTEP_Master_Out[992] = \<const0> ;
  assign LOCKSTEP_Master_Out[993] = \<const0> ;
  assign LOCKSTEP_Master_Out[994] = \<const0> ;
  assign LOCKSTEP_Master_Out[995] = \<const0> ;
  assign LOCKSTEP_Master_Out[996] = \<const0> ;
  assign LOCKSTEP_Master_Out[997] = \<const0> ;
  assign LOCKSTEP_Master_Out[998] = \<const0> ;
  assign LOCKSTEP_Master_Out[999] = \<const0> ;
  assign LOCKSTEP_Master_Out[1000] = \<const0> ;
  assign LOCKSTEP_Master_Out[1001] = \<const0> ;
  assign LOCKSTEP_Master_Out[1002] = \<const0> ;
  assign LOCKSTEP_Master_Out[1003] = \<const0> ;
  assign LOCKSTEP_Master_Out[1004] = \<const0> ;
  assign LOCKSTEP_Master_Out[1005] = \<const0> ;
  assign LOCKSTEP_Master_Out[1006] = \<const0> ;
  assign LOCKSTEP_Master_Out[1007] = \<const0> ;
  assign LOCKSTEP_Master_Out[1008] = \<const0> ;
  assign LOCKSTEP_Master_Out[1009] = \<const0> ;
  assign LOCKSTEP_Master_Out[1010] = \<const0> ;
  assign LOCKSTEP_Master_Out[1011] = \<const0> ;
  assign LOCKSTEP_Master_Out[1012] = \<const0> ;
  assign LOCKSTEP_Master_Out[1013] = \<const0> ;
  assign LOCKSTEP_Master_Out[1014] = \<const0> ;
  assign LOCKSTEP_Master_Out[1015] = \<const0> ;
  assign LOCKSTEP_Master_Out[1016] = \<const0> ;
  assign LOCKSTEP_Master_Out[1017] = \<const0> ;
  assign LOCKSTEP_Master_Out[1018] = \<const0> ;
  assign LOCKSTEP_Master_Out[1019] = \<const0> ;
  assign LOCKSTEP_Master_Out[1020] = \<const0> ;
  assign LOCKSTEP_Master_Out[1021] = \<const0> ;
  assign LOCKSTEP_Master_Out[1022] = \<const0> ;
  assign LOCKSTEP_Master_Out[1023] = \<const0> ;
  assign LOCKSTEP_Master_Out[1024] = \<const0> ;
  assign LOCKSTEP_Master_Out[1025] = \<const0> ;
  assign LOCKSTEP_Master_Out[1026] = \<const0> ;
  assign LOCKSTEP_Master_Out[1027] = \<const0> ;
  assign LOCKSTEP_Master_Out[1028] = \<const0> ;
  assign LOCKSTEP_Master_Out[1029] = \<const0> ;
  assign LOCKSTEP_Master_Out[1030] = \<const0> ;
  assign LOCKSTEP_Master_Out[1031] = \<const0> ;
  assign LOCKSTEP_Master_Out[1032] = \<const0> ;
  assign LOCKSTEP_Master_Out[1033] = \<const0> ;
  assign LOCKSTEP_Master_Out[1034] = \<const0> ;
  assign LOCKSTEP_Master_Out[1035] = \<const0> ;
  assign LOCKSTEP_Master_Out[1036] = \<const0> ;
  assign LOCKSTEP_Master_Out[1037] = \<const0> ;
  assign LOCKSTEP_Master_Out[1038] = \<const0> ;
  assign LOCKSTEP_Master_Out[1039] = \<const0> ;
  assign LOCKSTEP_Master_Out[1040] = \<const0> ;
  assign LOCKSTEP_Master_Out[1041] = \<const0> ;
  assign LOCKSTEP_Master_Out[1042] = \<const0> ;
  assign LOCKSTEP_Master_Out[1043] = \<const0> ;
  assign LOCKSTEP_Master_Out[1044] = \<const0> ;
  assign LOCKSTEP_Master_Out[1045] = \<const0> ;
  assign LOCKSTEP_Master_Out[1046] = \<const0> ;
  assign LOCKSTEP_Master_Out[1047] = \<const0> ;
  assign LOCKSTEP_Master_Out[1048] = \<const0> ;
  assign LOCKSTEP_Master_Out[1049] = \<const0> ;
  assign LOCKSTEP_Master_Out[1050] = \<const0> ;
  assign LOCKSTEP_Master_Out[1051] = \<const0> ;
  assign LOCKSTEP_Master_Out[1052] = \<const0> ;
  assign LOCKSTEP_Master_Out[1053] = \<const0> ;
  assign LOCKSTEP_Master_Out[1054] = \<const0> ;
  assign LOCKSTEP_Master_Out[1055] = \<const0> ;
  assign LOCKSTEP_Master_Out[1056] = \<const0> ;
  assign LOCKSTEP_Master_Out[1057] = \<const0> ;
  assign LOCKSTEP_Master_Out[1058] = \<const0> ;
  assign LOCKSTEP_Master_Out[1059] = \<const0> ;
  assign LOCKSTEP_Master_Out[1060] = \<const0> ;
  assign LOCKSTEP_Master_Out[1061] = \<const0> ;
  assign LOCKSTEP_Master_Out[1062] = \<const0> ;
  assign LOCKSTEP_Master_Out[1063] = \<const0> ;
  assign LOCKSTEP_Master_Out[1064] = \<const0> ;
  assign LOCKSTEP_Master_Out[1065] = \<const0> ;
  assign LOCKSTEP_Master_Out[1066] = \<const0> ;
  assign LOCKSTEP_Master_Out[1067] = \<const0> ;
  assign LOCKSTEP_Master_Out[1068] = \<const0> ;
  assign LOCKSTEP_Master_Out[1069] = \<const0> ;
  assign LOCKSTEP_Master_Out[1070] = \<const0> ;
  assign LOCKSTEP_Master_Out[1071] = \<const0> ;
  assign LOCKSTEP_Master_Out[1072] = \<const0> ;
  assign LOCKSTEP_Master_Out[1073] = \<const0> ;
  assign LOCKSTEP_Master_Out[1074] = \<const0> ;
  assign LOCKSTEP_Master_Out[1075] = \<const0> ;
  assign LOCKSTEP_Master_Out[1076] = \<const0> ;
  assign LOCKSTEP_Master_Out[1077] = \<const0> ;
  assign LOCKSTEP_Master_Out[1078] = \<const0> ;
  assign LOCKSTEP_Master_Out[1079] = \<const0> ;
  assign LOCKSTEP_Master_Out[1080] = \<const0> ;
  assign LOCKSTEP_Master_Out[1081] = \<const0> ;
  assign LOCKSTEP_Master_Out[1082] = \<const0> ;
  assign LOCKSTEP_Master_Out[1083] = \<const0> ;
  assign LOCKSTEP_Master_Out[1084] = \<const0> ;
  assign LOCKSTEP_Master_Out[1085] = \<const0> ;
  assign LOCKSTEP_Master_Out[1086] = \<const0> ;
  assign LOCKSTEP_Master_Out[1087] = \<const0> ;
  assign LOCKSTEP_Master_Out[1088] = \<const0> ;
  assign LOCKSTEP_Master_Out[1089] = \<const0> ;
  assign LOCKSTEP_Master_Out[1090] = \<const0> ;
  assign LOCKSTEP_Master_Out[1091] = \<const0> ;
  assign LOCKSTEP_Master_Out[1092] = \<const0> ;
  assign LOCKSTEP_Master_Out[1093] = \<const0> ;
  assign LOCKSTEP_Master_Out[1094] = \<const0> ;
  assign LOCKSTEP_Master_Out[1095] = \<const0> ;
  assign LOCKSTEP_Master_Out[1096] = \<const0> ;
  assign LOCKSTEP_Master_Out[1097] = \<const0> ;
  assign LOCKSTEP_Master_Out[1098] = \<const0> ;
  assign LOCKSTEP_Master_Out[1099] = \<const0> ;
  assign LOCKSTEP_Master_Out[1100] = \<const0> ;
  assign LOCKSTEP_Master_Out[1101] = \<const0> ;
  assign LOCKSTEP_Master_Out[1102] = \<const0> ;
  assign LOCKSTEP_Master_Out[1103] = \<const0> ;
  assign LOCKSTEP_Master_Out[1104] = \<const0> ;
  assign LOCKSTEP_Master_Out[1105] = \<const0> ;
  assign LOCKSTEP_Master_Out[1106] = \<const0> ;
  assign LOCKSTEP_Master_Out[1107] = \<const0> ;
  assign LOCKSTEP_Master_Out[1108] = \<const0> ;
  assign LOCKSTEP_Master_Out[1109] = \<const0> ;
  assign LOCKSTEP_Master_Out[1110] = \<const0> ;
  assign LOCKSTEP_Master_Out[1111] = \<const0> ;
  assign LOCKSTEP_Master_Out[1112] = \<const0> ;
  assign LOCKSTEP_Master_Out[1113] = \<const0> ;
  assign LOCKSTEP_Master_Out[1114] = \<const0> ;
  assign LOCKSTEP_Master_Out[1115] = \<const0> ;
  assign LOCKSTEP_Master_Out[1116] = \<const0> ;
  assign LOCKSTEP_Master_Out[1117] = \<const0> ;
  assign LOCKSTEP_Master_Out[1118] = \<const0> ;
  assign LOCKSTEP_Master_Out[1119] = \<const0> ;
  assign LOCKSTEP_Master_Out[1120] = \<const0> ;
  assign LOCKSTEP_Master_Out[1121] = \<const0> ;
  assign LOCKSTEP_Master_Out[1122] = \<const0> ;
  assign LOCKSTEP_Master_Out[1123] = \<const0> ;
  assign LOCKSTEP_Master_Out[1124] = \<const0> ;
  assign LOCKSTEP_Master_Out[1125] = \<const0> ;
  assign LOCKSTEP_Master_Out[1126] = \<const0> ;
  assign LOCKSTEP_Master_Out[1127] = \<const0> ;
  assign LOCKSTEP_Master_Out[1128] = \<const0> ;
  assign LOCKSTEP_Master_Out[1129] = \<const0> ;
  assign LOCKSTEP_Master_Out[1130] = \<const0> ;
  assign LOCKSTEP_Master_Out[1131] = \<const0> ;
  assign LOCKSTEP_Master_Out[1132] = \<const0> ;
  assign LOCKSTEP_Master_Out[1133] = \<const0> ;
  assign LOCKSTEP_Master_Out[1134] = \<const0> ;
  assign LOCKSTEP_Master_Out[1135] = \<const0> ;
  assign LOCKSTEP_Master_Out[1136] = \<const0> ;
  assign LOCKSTEP_Master_Out[1137] = \<const0> ;
  assign LOCKSTEP_Master_Out[1138] = \<const0> ;
  assign LOCKSTEP_Master_Out[1139] = \<const0> ;
  assign LOCKSTEP_Master_Out[1140] = \<const0> ;
  assign LOCKSTEP_Master_Out[1141] = \<const0> ;
  assign LOCKSTEP_Master_Out[1142] = \<const0> ;
  assign LOCKSTEP_Master_Out[1143] = \<const0> ;
  assign LOCKSTEP_Master_Out[1144] = \<const0> ;
  assign LOCKSTEP_Master_Out[1145] = \<const0> ;
  assign LOCKSTEP_Master_Out[1146] = \<const0> ;
  assign LOCKSTEP_Master_Out[1147] = \<const0> ;
  assign LOCKSTEP_Master_Out[1148] = \<const0> ;
  assign LOCKSTEP_Master_Out[1149] = \<const0> ;
  assign LOCKSTEP_Master_Out[1150] = \<const0> ;
  assign LOCKSTEP_Master_Out[1151] = \<const0> ;
  assign LOCKSTEP_Master_Out[1152] = \<const0> ;
  assign LOCKSTEP_Master_Out[1153] = \<const0> ;
  assign LOCKSTEP_Master_Out[1154] = \<const0> ;
  assign LOCKSTEP_Master_Out[1155] = \<const0> ;
  assign LOCKSTEP_Master_Out[1156] = \<const0> ;
  assign LOCKSTEP_Master_Out[1157] = \<const0> ;
  assign LOCKSTEP_Master_Out[1158] = \<const0> ;
  assign LOCKSTEP_Master_Out[1159] = \<const0> ;
  assign LOCKSTEP_Master_Out[1160] = \<const0> ;
  assign LOCKSTEP_Master_Out[1161] = \<const0> ;
  assign LOCKSTEP_Master_Out[1162] = \<const0> ;
  assign LOCKSTEP_Master_Out[1163] = \<const0> ;
  assign LOCKSTEP_Master_Out[1164] = \<const0> ;
  assign LOCKSTEP_Master_Out[1165] = \<const0> ;
  assign LOCKSTEP_Master_Out[1166] = \<const0> ;
  assign LOCKSTEP_Master_Out[1167] = \<const0> ;
  assign LOCKSTEP_Master_Out[1168] = \<const0> ;
  assign LOCKSTEP_Master_Out[1169] = \<const0> ;
  assign LOCKSTEP_Master_Out[1170] = \<const0> ;
  assign LOCKSTEP_Master_Out[1171] = \<const0> ;
  assign LOCKSTEP_Master_Out[1172] = \<const0> ;
  assign LOCKSTEP_Master_Out[1173] = \<const0> ;
  assign LOCKSTEP_Master_Out[1174] = \<const0> ;
  assign LOCKSTEP_Master_Out[1175] = \<const0> ;
  assign LOCKSTEP_Master_Out[1176] = \<const0> ;
  assign LOCKSTEP_Master_Out[1177] = \<const0> ;
  assign LOCKSTEP_Master_Out[1178] = \<const0> ;
  assign LOCKSTEP_Master_Out[1179] = \<const0> ;
  assign LOCKSTEP_Master_Out[1180] = \<const0> ;
  assign LOCKSTEP_Master_Out[1181] = \<const0> ;
  assign LOCKSTEP_Master_Out[1182] = \<const0> ;
  assign LOCKSTEP_Master_Out[1183] = \<const0> ;
  assign LOCKSTEP_Master_Out[1184] = \<const0> ;
  assign LOCKSTEP_Master_Out[1185] = \<const0> ;
  assign LOCKSTEP_Master_Out[1186] = \<const0> ;
  assign LOCKSTEP_Master_Out[1187] = \<const0> ;
  assign LOCKSTEP_Master_Out[1188] = \<const0> ;
  assign LOCKSTEP_Master_Out[1189] = \<const0> ;
  assign LOCKSTEP_Master_Out[1190] = \<const0> ;
  assign LOCKSTEP_Master_Out[1191] = \<const0> ;
  assign LOCKSTEP_Master_Out[1192] = \<const0> ;
  assign LOCKSTEP_Master_Out[1193] = \<const0> ;
  assign LOCKSTEP_Master_Out[1194] = \<const0> ;
  assign LOCKSTEP_Master_Out[1195] = \<const0> ;
  assign LOCKSTEP_Master_Out[1196] = \<const0> ;
  assign LOCKSTEP_Master_Out[1197] = \<const0> ;
  assign LOCKSTEP_Master_Out[1198] = \<const0> ;
  assign LOCKSTEP_Master_Out[1199] = \<const0> ;
  assign LOCKSTEP_Master_Out[1200] = \<const0> ;
  assign LOCKSTEP_Master_Out[1201] = \<const0> ;
  assign LOCKSTEP_Master_Out[1202] = \<const0> ;
  assign LOCKSTEP_Master_Out[1203] = \<const0> ;
  assign LOCKSTEP_Master_Out[1204] = \<const0> ;
  assign LOCKSTEP_Master_Out[1205] = \<const0> ;
  assign LOCKSTEP_Master_Out[1206] = \<const0> ;
  assign LOCKSTEP_Master_Out[1207] = \<const0> ;
  assign LOCKSTEP_Master_Out[1208] = \<const0> ;
  assign LOCKSTEP_Master_Out[1209] = \<const0> ;
  assign LOCKSTEP_Master_Out[1210] = \<const0> ;
  assign LOCKSTEP_Master_Out[1211] = \<const0> ;
  assign LOCKSTEP_Master_Out[1212] = \<const0> ;
  assign LOCKSTEP_Master_Out[1213] = \<const0> ;
  assign LOCKSTEP_Master_Out[1214] = \<const0> ;
  assign LOCKSTEP_Master_Out[1215] = \<const0> ;
  assign LOCKSTEP_Master_Out[1216] = \<const0> ;
  assign LOCKSTEP_Master_Out[1217] = \<const0> ;
  assign LOCKSTEP_Master_Out[1218] = \<const0> ;
  assign LOCKSTEP_Master_Out[1219] = \<const0> ;
  assign LOCKSTEP_Master_Out[1220] = \<const0> ;
  assign LOCKSTEP_Master_Out[1221] = \<const0> ;
  assign LOCKSTEP_Master_Out[1222] = \<const0> ;
  assign LOCKSTEP_Master_Out[1223] = \<const0> ;
  assign LOCKSTEP_Master_Out[1224] = \<const0> ;
  assign LOCKSTEP_Master_Out[1225] = \<const0> ;
  assign LOCKSTEP_Master_Out[1226] = \<const0> ;
  assign LOCKSTEP_Master_Out[1227] = \<const0> ;
  assign LOCKSTEP_Master_Out[1228] = \<const0> ;
  assign LOCKSTEP_Master_Out[1229] = \<const0> ;
  assign LOCKSTEP_Master_Out[1230] = \<const0> ;
  assign LOCKSTEP_Master_Out[1231] = \<const0> ;
  assign LOCKSTEP_Master_Out[1232] = \<const0> ;
  assign LOCKSTEP_Master_Out[1233] = \<const0> ;
  assign LOCKSTEP_Master_Out[1234] = \<const0> ;
  assign LOCKSTEP_Master_Out[1235] = \<const0> ;
  assign LOCKSTEP_Master_Out[1236] = \<const0> ;
  assign LOCKSTEP_Master_Out[1237] = \<const0> ;
  assign LOCKSTEP_Master_Out[1238] = \<const0> ;
  assign LOCKSTEP_Master_Out[1239] = \<const0> ;
  assign LOCKSTEP_Master_Out[1240] = \<const0> ;
  assign LOCKSTEP_Master_Out[1241] = \<const0> ;
  assign LOCKSTEP_Master_Out[1242] = \<const0> ;
  assign LOCKSTEP_Master_Out[1243] = \<const0> ;
  assign LOCKSTEP_Master_Out[1244] = \<const0> ;
  assign LOCKSTEP_Master_Out[1245] = \<const0> ;
  assign LOCKSTEP_Master_Out[1246] = \<const0> ;
  assign LOCKSTEP_Master_Out[1247] = \<const0> ;
  assign LOCKSTEP_Master_Out[1248] = \<const0> ;
  assign LOCKSTEP_Master_Out[1249] = \<const0> ;
  assign LOCKSTEP_Master_Out[1250] = \<const0> ;
  assign LOCKSTEP_Master_Out[1251] = \<const0> ;
  assign LOCKSTEP_Master_Out[1252] = \<const0> ;
  assign LOCKSTEP_Master_Out[1253] = \<const0> ;
  assign LOCKSTEP_Master_Out[1254] = \<const0> ;
  assign LOCKSTEP_Master_Out[1255] = \<const0> ;
  assign LOCKSTEP_Master_Out[1256] = \<const0> ;
  assign LOCKSTEP_Master_Out[1257] = \<const0> ;
  assign LOCKSTEP_Master_Out[1258] = \<const0> ;
  assign LOCKSTEP_Master_Out[1259] = \<const0> ;
  assign LOCKSTEP_Master_Out[1260] = \<const0> ;
  assign LOCKSTEP_Master_Out[1261] = \<const0> ;
  assign LOCKSTEP_Master_Out[1262] = \<const0> ;
  assign LOCKSTEP_Master_Out[1263] = \<const0> ;
  assign LOCKSTEP_Master_Out[1264] = \<const0> ;
  assign LOCKSTEP_Master_Out[1265] = \<const0> ;
  assign LOCKSTEP_Master_Out[1266] = \<const0> ;
  assign LOCKSTEP_Master_Out[1267] = \<const0> ;
  assign LOCKSTEP_Master_Out[1268] = \<const0> ;
  assign LOCKSTEP_Master_Out[1269] = \<const0> ;
  assign LOCKSTEP_Master_Out[1270] = \<const0> ;
  assign LOCKSTEP_Master_Out[1271] = \<const0> ;
  assign LOCKSTEP_Master_Out[1272] = \<const0> ;
  assign LOCKSTEP_Master_Out[1273] = \<const0> ;
  assign LOCKSTEP_Master_Out[1274] = \<const0> ;
  assign LOCKSTEP_Master_Out[1275] = \<const0> ;
  assign LOCKSTEP_Master_Out[1276] = \<const0> ;
  assign LOCKSTEP_Master_Out[1277] = \<const0> ;
  assign LOCKSTEP_Master_Out[1278] = \<const0> ;
  assign LOCKSTEP_Master_Out[1279] = \<const0> ;
  assign LOCKSTEP_Master_Out[1280] = \<const0> ;
  assign LOCKSTEP_Master_Out[1281] = \<const0> ;
  assign LOCKSTEP_Master_Out[1282] = \<const0> ;
  assign LOCKSTEP_Master_Out[1283] = \<const0> ;
  assign LOCKSTEP_Master_Out[1284] = \<const0> ;
  assign LOCKSTEP_Master_Out[1285] = \<const0> ;
  assign LOCKSTEP_Master_Out[1286] = \<const0> ;
  assign LOCKSTEP_Master_Out[1287] = \<const0> ;
  assign LOCKSTEP_Master_Out[1288] = \<const0> ;
  assign LOCKSTEP_Master_Out[1289] = \<const0> ;
  assign LOCKSTEP_Master_Out[1290] = \<const0> ;
  assign LOCKSTEP_Master_Out[1291] = \<const0> ;
  assign LOCKSTEP_Master_Out[1292] = \<const0> ;
  assign LOCKSTEP_Master_Out[1293] = \<const0> ;
  assign LOCKSTEP_Master_Out[1294] = \<const0> ;
  assign LOCKSTEP_Master_Out[1295] = \<const0> ;
  assign LOCKSTEP_Master_Out[1296] = \<const0> ;
  assign LOCKSTEP_Master_Out[1297] = \<const0> ;
  assign LOCKSTEP_Master_Out[1298] = \<const0> ;
  assign LOCKSTEP_Master_Out[1299] = \<const0> ;
  assign LOCKSTEP_Master_Out[1300] = \<const0> ;
  assign LOCKSTEP_Master_Out[1301] = \<const0> ;
  assign LOCKSTEP_Master_Out[1302] = \<const0> ;
  assign LOCKSTEP_Master_Out[1303] = \<const0> ;
  assign LOCKSTEP_Master_Out[1304] = \<const0> ;
  assign LOCKSTEP_Master_Out[1305] = \<const0> ;
  assign LOCKSTEP_Master_Out[1306] = \<const0> ;
  assign LOCKSTEP_Master_Out[1307] = \<const0> ;
  assign LOCKSTEP_Master_Out[1308] = \<const0> ;
  assign LOCKSTEP_Master_Out[1309] = \<const0> ;
  assign LOCKSTEP_Master_Out[1310] = \<const0> ;
  assign LOCKSTEP_Master_Out[1311] = \<const0> ;
  assign LOCKSTEP_Master_Out[1312] = \<const0> ;
  assign LOCKSTEP_Master_Out[1313] = \<const0> ;
  assign LOCKSTEP_Master_Out[1314] = \<const0> ;
  assign LOCKSTEP_Master_Out[1315] = \<const0> ;
  assign LOCKSTEP_Master_Out[1316] = \<const0> ;
  assign LOCKSTEP_Master_Out[1317] = \<const0> ;
  assign LOCKSTEP_Master_Out[1318] = \<const0> ;
  assign LOCKSTEP_Master_Out[1319] = \<const0> ;
  assign LOCKSTEP_Master_Out[1320] = \<const0> ;
  assign LOCKSTEP_Master_Out[1321] = \<const0> ;
  assign LOCKSTEP_Master_Out[1322] = \<const0> ;
  assign LOCKSTEP_Master_Out[1323] = \<const0> ;
  assign LOCKSTEP_Master_Out[1324] = \<const0> ;
  assign LOCKSTEP_Master_Out[1325] = \<const0> ;
  assign LOCKSTEP_Master_Out[1326] = \<const0> ;
  assign LOCKSTEP_Master_Out[1327] = \<const0> ;
  assign LOCKSTEP_Master_Out[1328] = \<const0> ;
  assign LOCKSTEP_Master_Out[1329] = \<const0> ;
  assign LOCKSTEP_Master_Out[1330] = \<const0> ;
  assign LOCKSTEP_Master_Out[1331] = \<const0> ;
  assign LOCKSTEP_Master_Out[1332] = \<const0> ;
  assign LOCKSTEP_Master_Out[1333] = \<const0> ;
  assign LOCKSTEP_Master_Out[1334] = \<const0> ;
  assign LOCKSTEP_Master_Out[1335] = \<const0> ;
  assign LOCKSTEP_Master_Out[1336] = \<const0> ;
  assign LOCKSTEP_Master_Out[1337] = \<const0> ;
  assign LOCKSTEP_Master_Out[1338] = \<const0> ;
  assign LOCKSTEP_Master_Out[1339] = \<const0> ;
  assign LOCKSTEP_Master_Out[1340] = \<const0> ;
  assign LOCKSTEP_Master_Out[1341] = \<const0> ;
  assign LOCKSTEP_Master_Out[1342] = \<const0> ;
  assign LOCKSTEP_Master_Out[1343] = \<const0> ;
  assign LOCKSTEP_Master_Out[1344] = \<const0> ;
  assign LOCKSTEP_Master_Out[1345] = \<const0> ;
  assign LOCKSTEP_Master_Out[1346] = \<const0> ;
  assign LOCKSTEP_Master_Out[1347] = \<const0> ;
  assign LOCKSTEP_Master_Out[1348] = \<const0> ;
  assign LOCKSTEP_Master_Out[1349] = \<const0> ;
  assign LOCKSTEP_Master_Out[1350] = \<const0> ;
  assign LOCKSTEP_Master_Out[1351] = \<const0> ;
  assign LOCKSTEP_Master_Out[1352] = \<const0> ;
  assign LOCKSTEP_Master_Out[1353] = \<const0> ;
  assign LOCKSTEP_Master_Out[1354] = \<const0> ;
  assign LOCKSTEP_Master_Out[1355] = \<const0> ;
  assign LOCKSTEP_Master_Out[1356] = \<const0> ;
  assign LOCKSTEP_Master_Out[1357] = \<const0> ;
  assign LOCKSTEP_Master_Out[1358] = \<const0> ;
  assign LOCKSTEP_Master_Out[1359] = \<const0> ;
  assign LOCKSTEP_Master_Out[1360] = \<const0> ;
  assign LOCKSTEP_Master_Out[1361] = \<const0> ;
  assign LOCKSTEP_Master_Out[1362] = \<const0> ;
  assign LOCKSTEP_Master_Out[1363] = \<const0> ;
  assign LOCKSTEP_Master_Out[1364] = \<const0> ;
  assign LOCKSTEP_Master_Out[1365] = \<const0> ;
  assign LOCKSTEP_Master_Out[1366] = \<const0> ;
  assign LOCKSTEP_Master_Out[1367] = \<const0> ;
  assign LOCKSTEP_Master_Out[1368] = \<const0> ;
  assign LOCKSTEP_Master_Out[1369] = \<const0> ;
  assign LOCKSTEP_Master_Out[1370] = \<const0> ;
  assign LOCKSTEP_Master_Out[1371] = \<const0> ;
  assign LOCKSTEP_Master_Out[1372] = \<const0> ;
  assign LOCKSTEP_Master_Out[1373] = \<const0> ;
  assign LOCKSTEP_Master_Out[1374] = \<const0> ;
  assign LOCKSTEP_Master_Out[1375] = \<const0> ;
  assign LOCKSTEP_Master_Out[1376] = \<const0> ;
  assign LOCKSTEP_Master_Out[1377] = \<const0> ;
  assign LOCKSTEP_Master_Out[1378] = \<const0> ;
  assign LOCKSTEP_Master_Out[1379] = \<const0> ;
  assign LOCKSTEP_Master_Out[1380] = \<const0> ;
  assign LOCKSTEP_Master_Out[1381] = \<const0> ;
  assign LOCKSTEP_Master_Out[1382] = \<const0> ;
  assign LOCKSTEP_Master_Out[1383] = \<const0> ;
  assign LOCKSTEP_Master_Out[1384] = \<const0> ;
  assign LOCKSTEP_Master_Out[1385] = \<const0> ;
  assign LOCKSTEP_Master_Out[1386] = \<const0> ;
  assign LOCKSTEP_Master_Out[1387] = \<const0> ;
  assign LOCKSTEP_Master_Out[1388] = \<const0> ;
  assign LOCKSTEP_Master_Out[1389] = \<const0> ;
  assign LOCKSTEP_Master_Out[1390] = \<const0> ;
  assign LOCKSTEP_Master_Out[1391] = \<const0> ;
  assign LOCKSTEP_Master_Out[1392] = \<const0> ;
  assign LOCKSTEP_Master_Out[1393] = \<const0> ;
  assign LOCKSTEP_Master_Out[1394] = \<const0> ;
  assign LOCKSTEP_Master_Out[1395] = \<const0> ;
  assign LOCKSTEP_Master_Out[1396] = \<const0> ;
  assign LOCKSTEP_Master_Out[1397] = \<const0> ;
  assign LOCKSTEP_Master_Out[1398] = \<const0> ;
  assign LOCKSTEP_Master_Out[1399] = \<const0> ;
  assign LOCKSTEP_Master_Out[1400] = \<const0> ;
  assign LOCKSTEP_Master_Out[1401] = \<const0> ;
  assign LOCKSTEP_Master_Out[1402] = \<const0> ;
  assign LOCKSTEP_Master_Out[1403] = \<const0> ;
  assign LOCKSTEP_Master_Out[1404] = \<const0> ;
  assign LOCKSTEP_Master_Out[1405] = \<const0> ;
  assign LOCKSTEP_Master_Out[1406] = \<const0> ;
  assign LOCKSTEP_Master_Out[1407] = \<const0> ;
  assign LOCKSTEP_Master_Out[1408] = \<const0> ;
  assign LOCKSTEP_Master_Out[1409] = \<const0> ;
  assign LOCKSTEP_Master_Out[1410] = \<const0> ;
  assign LOCKSTEP_Master_Out[1411] = \<const0> ;
  assign LOCKSTEP_Master_Out[1412] = \<const0> ;
  assign LOCKSTEP_Master_Out[1413] = \<const0> ;
  assign LOCKSTEP_Master_Out[1414] = \<const0> ;
  assign LOCKSTEP_Master_Out[1415] = \<const0> ;
  assign LOCKSTEP_Master_Out[1416] = \<const0> ;
  assign LOCKSTEP_Master_Out[1417] = \<const0> ;
  assign LOCKSTEP_Master_Out[1418] = \<const0> ;
  assign LOCKSTEP_Master_Out[1419] = \<const0> ;
  assign LOCKSTEP_Master_Out[1420] = \<const0> ;
  assign LOCKSTEP_Master_Out[1421] = \<const0> ;
  assign LOCKSTEP_Master_Out[1422] = \<const0> ;
  assign LOCKSTEP_Master_Out[1423] = \<const0> ;
  assign LOCKSTEP_Master_Out[1424] = \<const0> ;
  assign LOCKSTEP_Master_Out[1425] = \<const0> ;
  assign LOCKSTEP_Master_Out[1426] = \<const0> ;
  assign LOCKSTEP_Master_Out[1427] = \<const0> ;
  assign LOCKSTEP_Master_Out[1428] = \<const0> ;
  assign LOCKSTEP_Master_Out[1429] = \<const0> ;
  assign LOCKSTEP_Master_Out[1430] = \<const0> ;
  assign LOCKSTEP_Master_Out[1431] = \<const0> ;
  assign LOCKSTEP_Master_Out[1432] = \<const0> ;
  assign LOCKSTEP_Master_Out[1433] = \<const0> ;
  assign LOCKSTEP_Master_Out[1434] = \<const0> ;
  assign LOCKSTEP_Master_Out[1435] = \<const0> ;
  assign LOCKSTEP_Master_Out[1436] = \<const0> ;
  assign LOCKSTEP_Master_Out[1437] = \<const0> ;
  assign LOCKSTEP_Master_Out[1438] = \<const0> ;
  assign LOCKSTEP_Master_Out[1439] = \<const0> ;
  assign LOCKSTEP_Master_Out[1440] = \<const0> ;
  assign LOCKSTEP_Master_Out[1441] = \<const0> ;
  assign LOCKSTEP_Master_Out[1442] = \<const0> ;
  assign LOCKSTEP_Master_Out[1443] = \<const0> ;
  assign LOCKSTEP_Master_Out[1444] = \<const0> ;
  assign LOCKSTEP_Master_Out[1445] = \<const0> ;
  assign LOCKSTEP_Master_Out[1446] = \<const0> ;
  assign LOCKSTEP_Master_Out[1447] = \<const0> ;
  assign LOCKSTEP_Master_Out[1448] = \<const0> ;
  assign LOCKSTEP_Master_Out[1449] = \<const0> ;
  assign LOCKSTEP_Master_Out[1450] = \<const0> ;
  assign LOCKSTEP_Master_Out[1451] = \<const0> ;
  assign LOCKSTEP_Master_Out[1452] = \<const0> ;
  assign LOCKSTEP_Master_Out[1453] = \<const0> ;
  assign LOCKSTEP_Master_Out[1454] = \<const0> ;
  assign LOCKSTEP_Master_Out[1455] = \<const0> ;
  assign LOCKSTEP_Master_Out[1456] = \<const0> ;
  assign LOCKSTEP_Master_Out[1457] = \<const0> ;
  assign LOCKSTEP_Master_Out[1458] = \<const0> ;
  assign LOCKSTEP_Master_Out[1459] = \<const0> ;
  assign LOCKSTEP_Master_Out[1460] = \<const0> ;
  assign LOCKSTEP_Master_Out[1461] = \<const0> ;
  assign LOCKSTEP_Master_Out[1462] = \<const0> ;
  assign LOCKSTEP_Master_Out[1463] = \<const0> ;
  assign LOCKSTEP_Master_Out[1464] = \<const0> ;
  assign LOCKSTEP_Master_Out[1465] = \<const0> ;
  assign LOCKSTEP_Master_Out[1466] = \<const0> ;
  assign LOCKSTEP_Master_Out[1467] = \<const0> ;
  assign LOCKSTEP_Master_Out[1468] = \<const0> ;
  assign LOCKSTEP_Master_Out[1469] = \<const0> ;
  assign LOCKSTEP_Master_Out[1470] = \<const0> ;
  assign LOCKSTEP_Master_Out[1471] = \<const0> ;
  assign LOCKSTEP_Master_Out[1472] = \<const0> ;
  assign LOCKSTEP_Master_Out[1473] = \<const0> ;
  assign LOCKSTEP_Master_Out[1474] = \<const0> ;
  assign LOCKSTEP_Master_Out[1475] = \<const0> ;
  assign LOCKSTEP_Master_Out[1476] = \<const0> ;
  assign LOCKSTEP_Master_Out[1477] = \<const0> ;
  assign LOCKSTEP_Master_Out[1478] = \<const0> ;
  assign LOCKSTEP_Master_Out[1479] = \<const0> ;
  assign LOCKSTEP_Master_Out[1480] = \<const0> ;
  assign LOCKSTEP_Master_Out[1481] = \<const0> ;
  assign LOCKSTEP_Master_Out[1482] = \<const0> ;
  assign LOCKSTEP_Master_Out[1483] = \<const0> ;
  assign LOCKSTEP_Master_Out[1484] = \<const0> ;
  assign LOCKSTEP_Master_Out[1485] = \<const0> ;
  assign LOCKSTEP_Master_Out[1486] = \<const0> ;
  assign LOCKSTEP_Master_Out[1487] = \<const0> ;
  assign LOCKSTEP_Master_Out[1488] = \<const0> ;
  assign LOCKSTEP_Master_Out[1489] = \<const0> ;
  assign LOCKSTEP_Master_Out[1490] = \<const0> ;
  assign LOCKSTEP_Master_Out[1491] = \<const0> ;
  assign LOCKSTEP_Master_Out[1492] = \<const0> ;
  assign LOCKSTEP_Master_Out[1493] = \<const0> ;
  assign LOCKSTEP_Master_Out[1494] = \<const0> ;
  assign LOCKSTEP_Master_Out[1495] = \<const0> ;
  assign LOCKSTEP_Master_Out[1496] = \<const0> ;
  assign LOCKSTEP_Master_Out[1497] = \<const0> ;
  assign LOCKSTEP_Master_Out[1498] = \<const0> ;
  assign LOCKSTEP_Master_Out[1499] = \<const0> ;
  assign LOCKSTEP_Master_Out[1500] = \<const0> ;
  assign LOCKSTEP_Master_Out[1501] = \<const0> ;
  assign LOCKSTEP_Master_Out[1502] = \<const0> ;
  assign LOCKSTEP_Master_Out[1503] = \<const0> ;
  assign LOCKSTEP_Master_Out[1504] = \<const0> ;
  assign LOCKSTEP_Master_Out[1505] = \<const0> ;
  assign LOCKSTEP_Master_Out[1506] = \<const0> ;
  assign LOCKSTEP_Master_Out[1507] = \<const0> ;
  assign LOCKSTEP_Master_Out[1508] = \<const0> ;
  assign LOCKSTEP_Master_Out[1509] = \<const0> ;
  assign LOCKSTEP_Master_Out[1510] = \<const0> ;
  assign LOCKSTEP_Master_Out[1511] = \<const0> ;
  assign LOCKSTEP_Master_Out[1512] = \<const0> ;
  assign LOCKSTEP_Master_Out[1513] = \<const0> ;
  assign LOCKSTEP_Master_Out[1514] = \<const0> ;
  assign LOCKSTEP_Master_Out[1515] = \<const0> ;
  assign LOCKSTEP_Master_Out[1516] = \<const0> ;
  assign LOCKSTEP_Master_Out[1517] = \<const0> ;
  assign LOCKSTEP_Master_Out[1518] = \<const0> ;
  assign LOCKSTEP_Master_Out[1519] = \<const0> ;
  assign LOCKSTEP_Master_Out[1520] = \<const0> ;
  assign LOCKSTEP_Master_Out[1521] = \<const0> ;
  assign LOCKSTEP_Master_Out[1522] = \<const0> ;
  assign LOCKSTEP_Master_Out[1523] = \<const0> ;
  assign LOCKSTEP_Master_Out[1524] = \<const0> ;
  assign LOCKSTEP_Master_Out[1525] = \<const0> ;
  assign LOCKSTEP_Master_Out[1526] = \<const0> ;
  assign LOCKSTEP_Master_Out[1527] = \<const0> ;
  assign LOCKSTEP_Master_Out[1528] = \<const0> ;
  assign LOCKSTEP_Master_Out[1529] = \<const0> ;
  assign LOCKSTEP_Master_Out[1530] = \<const0> ;
  assign LOCKSTEP_Master_Out[1531] = \<const0> ;
  assign LOCKSTEP_Master_Out[1532] = \<const0> ;
  assign LOCKSTEP_Master_Out[1533] = \<const0> ;
  assign LOCKSTEP_Master_Out[1534] = \<const0> ;
  assign LOCKSTEP_Master_Out[1535] = \<const0> ;
  assign LOCKSTEP_Master_Out[1536] = \<const0> ;
  assign LOCKSTEP_Master_Out[1537] = \<const0> ;
  assign LOCKSTEP_Master_Out[1538] = \<const0> ;
  assign LOCKSTEP_Master_Out[1539] = \<const0> ;
  assign LOCKSTEP_Master_Out[1540] = \<const0> ;
  assign LOCKSTEP_Master_Out[1541] = \<const0> ;
  assign LOCKSTEP_Master_Out[1542] = \<const0> ;
  assign LOCKSTEP_Master_Out[1543] = \<const0> ;
  assign LOCKSTEP_Master_Out[1544] = \<const0> ;
  assign LOCKSTEP_Master_Out[1545] = \<const0> ;
  assign LOCKSTEP_Master_Out[1546] = \<const0> ;
  assign LOCKSTEP_Master_Out[1547] = \<const0> ;
  assign LOCKSTEP_Master_Out[1548] = \<const0> ;
  assign LOCKSTEP_Master_Out[1549] = \<const0> ;
  assign LOCKSTEP_Master_Out[1550] = \<const0> ;
  assign LOCKSTEP_Master_Out[1551] = \<const0> ;
  assign LOCKSTEP_Master_Out[1552] = \<const0> ;
  assign LOCKSTEP_Master_Out[1553] = \<const0> ;
  assign LOCKSTEP_Master_Out[1554] = \<const0> ;
  assign LOCKSTEP_Master_Out[1555] = \<const0> ;
  assign LOCKSTEP_Master_Out[1556] = \<const0> ;
  assign LOCKSTEP_Master_Out[1557] = \<const0> ;
  assign LOCKSTEP_Master_Out[1558] = \<const0> ;
  assign LOCKSTEP_Master_Out[1559] = \<const0> ;
  assign LOCKSTEP_Master_Out[1560] = \<const0> ;
  assign LOCKSTEP_Master_Out[1561] = \<const0> ;
  assign LOCKSTEP_Master_Out[1562] = \<const0> ;
  assign LOCKSTEP_Master_Out[1563] = \<const0> ;
  assign LOCKSTEP_Master_Out[1564] = \<const0> ;
  assign LOCKSTEP_Master_Out[1565] = \<const0> ;
  assign LOCKSTEP_Master_Out[1566] = \<const0> ;
  assign LOCKSTEP_Master_Out[1567] = \<const0> ;
  assign LOCKSTEP_Master_Out[1568] = \<const0> ;
  assign LOCKSTEP_Master_Out[1569] = \<const0> ;
  assign LOCKSTEP_Master_Out[1570] = \<const0> ;
  assign LOCKSTEP_Master_Out[1571] = \<const0> ;
  assign LOCKSTEP_Master_Out[1572] = \<const0> ;
  assign LOCKSTEP_Master_Out[1573] = \<const0> ;
  assign LOCKSTEP_Master_Out[1574] = \<const0> ;
  assign LOCKSTEP_Master_Out[1575] = \<const0> ;
  assign LOCKSTEP_Master_Out[1576] = \<const0> ;
  assign LOCKSTEP_Master_Out[1577] = \<const0> ;
  assign LOCKSTEP_Master_Out[1578] = \<const0> ;
  assign LOCKSTEP_Master_Out[1579] = \<const0> ;
  assign LOCKSTEP_Master_Out[1580] = \<const0> ;
  assign LOCKSTEP_Master_Out[1581] = \<const0> ;
  assign LOCKSTEP_Master_Out[1582] = \<const0> ;
  assign LOCKSTEP_Master_Out[1583] = \<const0> ;
  assign LOCKSTEP_Master_Out[1584] = \<const0> ;
  assign LOCKSTEP_Master_Out[1585] = \<const0> ;
  assign LOCKSTEP_Master_Out[1586] = \<const0> ;
  assign LOCKSTEP_Master_Out[1587] = \<const0> ;
  assign LOCKSTEP_Master_Out[1588] = \<const0> ;
  assign LOCKSTEP_Master_Out[1589] = \<const0> ;
  assign LOCKSTEP_Master_Out[1590] = \<const0> ;
  assign LOCKSTEP_Master_Out[1591] = \<const0> ;
  assign LOCKSTEP_Master_Out[1592] = \<const0> ;
  assign LOCKSTEP_Master_Out[1593] = \<const0> ;
  assign LOCKSTEP_Master_Out[1594] = \<const0> ;
  assign LOCKSTEP_Master_Out[1595] = \<const0> ;
  assign LOCKSTEP_Master_Out[1596] = \<const0> ;
  assign LOCKSTEP_Master_Out[1597] = \<const0> ;
  assign LOCKSTEP_Master_Out[1598] = \<const0> ;
  assign LOCKSTEP_Master_Out[1599] = \<const0> ;
  assign LOCKSTEP_Master_Out[1600] = \<const0> ;
  assign LOCKSTEP_Master_Out[1601] = \<const0> ;
  assign LOCKSTEP_Master_Out[1602] = \<const0> ;
  assign LOCKSTEP_Master_Out[1603] = \<const0> ;
  assign LOCKSTEP_Master_Out[1604] = \<const0> ;
  assign LOCKSTEP_Master_Out[1605] = \<const0> ;
  assign LOCKSTEP_Master_Out[1606] = \<const0> ;
  assign LOCKSTEP_Master_Out[1607] = \<const0> ;
  assign LOCKSTEP_Master_Out[1608] = \<const0> ;
  assign LOCKSTEP_Master_Out[1609] = \<const0> ;
  assign LOCKSTEP_Master_Out[1610] = \<const0> ;
  assign LOCKSTEP_Master_Out[1611] = \<const0> ;
  assign LOCKSTEP_Master_Out[1612] = \<const0> ;
  assign LOCKSTEP_Master_Out[1613] = \<const0> ;
  assign LOCKSTEP_Master_Out[1614] = \<const0> ;
  assign LOCKSTEP_Master_Out[1615] = \<const0> ;
  assign LOCKSTEP_Master_Out[1616] = \<const0> ;
  assign LOCKSTEP_Master_Out[1617] = \<const0> ;
  assign LOCKSTEP_Master_Out[1618] = \<const0> ;
  assign LOCKSTEP_Master_Out[1619] = \<const0> ;
  assign LOCKSTEP_Master_Out[1620] = \<const0> ;
  assign LOCKSTEP_Master_Out[1621] = \<const0> ;
  assign LOCKSTEP_Master_Out[1622] = \<const0> ;
  assign LOCKSTEP_Master_Out[1623] = \<const0> ;
  assign LOCKSTEP_Master_Out[1624] = \<const0> ;
  assign LOCKSTEP_Master_Out[1625] = \<const0> ;
  assign LOCKSTEP_Master_Out[1626] = \<const0> ;
  assign LOCKSTEP_Master_Out[1627] = \<const0> ;
  assign LOCKSTEP_Master_Out[1628] = \<const0> ;
  assign LOCKSTEP_Master_Out[1629] = \<const0> ;
  assign LOCKSTEP_Master_Out[1630] = \<const0> ;
  assign LOCKSTEP_Master_Out[1631] = \<const0> ;
  assign LOCKSTEP_Master_Out[1632] = \<const0> ;
  assign LOCKSTEP_Master_Out[1633] = \<const0> ;
  assign LOCKSTEP_Master_Out[1634] = \<const0> ;
  assign LOCKSTEP_Master_Out[1635] = \<const0> ;
  assign LOCKSTEP_Master_Out[1636] = \<const0> ;
  assign LOCKSTEP_Master_Out[1637] = \<const0> ;
  assign LOCKSTEP_Master_Out[1638] = \<const0> ;
  assign LOCKSTEP_Master_Out[1639] = \<const0> ;
  assign LOCKSTEP_Master_Out[1640] = \<const0> ;
  assign LOCKSTEP_Master_Out[1641] = \<const0> ;
  assign LOCKSTEP_Master_Out[1642] = \<const0> ;
  assign LOCKSTEP_Master_Out[1643] = \<const0> ;
  assign LOCKSTEP_Master_Out[1644] = \<const0> ;
  assign LOCKSTEP_Master_Out[1645] = \<const0> ;
  assign LOCKSTEP_Master_Out[1646] = \<const0> ;
  assign LOCKSTEP_Master_Out[1647] = \<const0> ;
  assign LOCKSTEP_Master_Out[1648] = \<const0> ;
  assign LOCKSTEP_Master_Out[1649] = \<const0> ;
  assign LOCKSTEP_Master_Out[1650] = \<const0> ;
  assign LOCKSTEP_Master_Out[1651] = \<const0> ;
  assign LOCKSTEP_Master_Out[1652] = \<const0> ;
  assign LOCKSTEP_Master_Out[1653] = \<const0> ;
  assign LOCKSTEP_Master_Out[1654] = \<const0> ;
  assign LOCKSTEP_Master_Out[1655] = \<const0> ;
  assign LOCKSTEP_Master_Out[1656] = \<const0> ;
  assign LOCKSTEP_Master_Out[1657] = \<const0> ;
  assign LOCKSTEP_Master_Out[1658] = \<const0> ;
  assign LOCKSTEP_Master_Out[1659] = \<const0> ;
  assign LOCKSTEP_Master_Out[1660] = \<const0> ;
  assign LOCKSTEP_Master_Out[1661] = \<const0> ;
  assign LOCKSTEP_Master_Out[1662] = \<const0> ;
  assign LOCKSTEP_Master_Out[1663] = \<const0> ;
  assign LOCKSTEP_Master_Out[1664] = \<const0> ;
  assign LOCKSTEP_Master_Out[1665] = \<const0> ;
  assign LOCKSTEP_Master_Out[1666] = \<const0> ;
  assign LOCKSTEP_Master_Out[1667] = \<const0> ;
  assign LOCKSTEP_Master_Out[1668] = \<const0> ;
  assign LOCKSTEP_Master_Out[1669] = \<const0> ;
  assign LOCKSTEP_Master_Out[1670] = \<const0> ;
  assign LOCKSTEP_Master_Out[1671] = \<const0> ;
  assign LOCKSTEP_Master_Out[1672] = \<const0> ;
  assign LOCKSTEP_Master_Out[1673] = \<const0> ;
  assign LOCKSTEP_Master_Out[1674] = \<const0> ;
  assign LOCKSTEP_Master_Out[1675] = \<const0> ;
  assign LOCKSTEP_Master_Out[1676] = \<const0> ;
  assign LOCKSTEP_Master_Out[1677] = \<const0> ;
  assign LOCKSTEP_Master_Out[1678] = \<const0> ;
  assign LOCKSTEP_Master_Out[1679] = \<const0> ;
  assign LOCKSTEP_Master_Out[1680] = \<const0> ;
  assign LOCKSTEP_Master_Out[1681] = \<const0> ;
  assign LOCKSTEP_Master_Out[1682] = \<const0> ;
  assign LOCKSTEP_Master_Out[1683] = \<const0> ;
  assign LOCKSTEP_Master_Out[1684] = \<const0> ;
  assign LOCKSTEP_Master_Out[1685] = \<const0> ;
  assign LOCKSTEP_Master_Out[1686] = \<const0> ;
  assign LOCKSTEP_Master_Out[1687] = \<const0> ;
  assign LOCKSTEP_Master_Out[1688] = \<const0> ;
  assign LOCKSTEP_Master_Out[1689] = \<const0> ;
  assign LOCKSTEP_Master_Out[1690] = \<const0> ;
  assign LOCKSTEP_Master_Out[1691] = \<const0> ;
  assign LOCKSTEP_Master_Out[1692] = \<const0> ;
  assign LOCKSTEP_Master_Out[1693] = \<const0> ;
  assign LOCKSTEP_Master_Out[1694] = \<const0> ;
  assign LOCKSTEP_Master_Out[1695] = \<const0> ;
  assign LOCKSTEP_Master_Out[1696] = \<const0> ;
  assign LOCKSTEP_Master_Out[1697] = \<const0> ;
  assign LOCKSTEP_Master_Out[1698] = \<const0> ;
  assign LOCKSTEP_Master_Out[1699] = \<const0> ;
  assign LOCKSTEP_Master_Out[1700] = \<const0> ;
  assign LOCKSTEP_Master_Out[1701] = \<const0> ;
  assign LOCKSTEP_Master_Out[1702] = \<const0> ;
  assign LOCKSTEP_Master_Out[1703] = \<const0> ;
  assign LOCKSTEP_Master_Out[1704] = \<const0> ;
  assign LOCKSTEP_Master_Out[1705] = \<const0> ;
  assign LOCKSTEP_Master_Out[1706] = \<const0> ;
  assign LOCKSTEP_Master_Out[1707] = \<const0> ;
  assign LOCKSTEP_Master_Out[1708] = \<const0> ;
  assign LOCKSTEP_Master_Out[1709] = \<const0> ;
  assign LOCKSTEP_Master_Out[1710] = \<const0> ;
  assign LOCKSTEP_Master_Out[1711] = \<const0> ;
  assign LOCKSTEP_Master_Out[1712] = \<const0> ;
  assign LOCKSTEP_Master_Out[1713] = \<const0> ;
  assign LOCKSTEP_Master_Out[1714] = \<const0> ;
  assign LOCKSTEP_Master_Out[1715] = \<const0> ;
  assign LOCKSTEP_Master_Out[1716] = \<const0> ;
  assign LOCKSTEP_Master_Out[1717] = \<const0> ;
  assign LOCKSTEP_Master_Out[1718] = \<const0> ;
  assign LOCKSTEP_Master_Out[1719] = \<const0> ;
  assign LOCKSTEP_Master_Out[1720] = \<const0> ;
  assign LOCKSTEP_Master_Out[1721] = \<const0> ;
  assign LOCKSTEP_Master_Out[1722] = \<const0> ;
  assign LOCKSTEP_Master_Out[1723] = \<const0> ;
  assign LOCKSTEP_Master_Out[1724] = \<const0> ;
  assign LOCKSTEP_Master_Out[1725] = \<const0> ;
  assign LOCKSTEP_Master_Out[1726] = \<const0> ;
  assign LOCKSTEP_Master_Out[1727] = \<const0> ;
  assign LOCKSTEP_Master_Out[1728] = \<const0> ;
  assign LOCKSTEP_Master_Out[1729] = \<const0> ;
  assign LOCKSTEP_Master_Out[1730] = \<const0> ;
  assign LOCKSTEP_Master_Out[1731] = \<const0> ;
  assign LOCKSTEP_Master_Out[1732] = \<const0> ;
  assign LOCKSTEP_Master_Out[1733] = \<const0> ;
  assign LOCKSTEP_Master_Out[1734] = \<const0> ;
  assign LOCKSTEP_Master_Out[1735] = \<const0> ;
  assign LOCKSTEP_Master_Out[1736] = \<const0> ;
  assign LOCKSTEP_Master_Out[1737] = \<const0> ;
  assign LOCKSTEP_Master_Out[1738] = \<const0> ;
  assign LOCKSTEP_Master_Out[1739] = \<const0> ;
  assign LOCKSTEP_Master_Out[1740] = \<const0> ;
  assign LOCKSTEP_Master_Out[1741] = \<const0> ;
  assign LOCKSTEP_Master_Out[1742] = \<const0> ;
  assign LOCKSTEP_Master_Out[1743] = \<const0> ;
  assign LOCKSTEP_Master_Out[1744] = \<const0> ;
  assign LOCKSTEP_Master_Out[1745] = \<const0> ;
  assign LOCKSTEP_Master_Out[1746] = \<const0> ;
  assign LOCKSTEP_Master_Out[1747] = \<const0> ;
  assign LOCKSTEP_Master_Out[1748] = \<const0> ;
  assign LOCKSTEP_Master_Out[1749] = \<const0> ;
  assign LOCKSTEP_Master_Out[1750] = \<const0> ;
  assign LOCKSTEP_Master_Out[1751] = \<const0> ;
  assign LOCKSTEP_Master_Out[1752] = \<const0> ;
  assign LOCKSTEP_Master_Out[1753] = \<const0> ;
  assign LOCKSTEP_Master_Out[1754] = \<const0> ;
  assign LOCKSTEP_Master_Out[1755] = \<const0> ;
  assign LOCKSTEP_Master_Out[1756] = \<const0> ;
  assign LOCKSTEP_Master_Out[1757] = \<const0> ;
  assign LOCKSTEP_Master_Out[1758] = \<const0> ;
  assign LOCKSTEP_Master_Out[1759] = \<const0> ;
  assign LOCKSTEP_Master_Out[1760] = \<const0> ;
  assign LOCKSTEP_Master_Out[1761] = \<const0> ;
  assign LOCKSTEP_Master_Out[1762] = \<const0> ;
  assign LOCKSTEP_Master_Out[1763] = \<const0> ;
  assign LOCKSTEP_Master_Out[1764] = \<const0> ;
  assign LOCKSTEP_Master_Out[1765] = \<const0> ;
  assign LOCKSTEP_Master_Out[1766] = \<const0> ;
  assign LOCKSTEP_Master_Out[1767] = \<const0> ;
  assign LOCKSTEP_Master_Out[1768] = \<const0> ;
  assign LOCKSTEP_Master_Out[1769] = \<const0> ;
  assign LOCKSTEP_Master_Out[1770] = \<const0> ;
  assign LOCKSTEP_Master_Out[1771] = \<const0> ;
  assign LOCKSTEP_Master_Out[1772] = \<const0> ;
  assign LOCKSTEP_Master_Out[1773] = \<const0> ;
  assign LOCKSTEP_Master_Out[1774] = \<const0> ;
  assign LOCKSTEP_Master_Out[1775] = \<const0> ;
  assign LOCKSTEP_Master_Out[1776] = \<const0> ;
  assign LOCKSTEP_Master_Out[1777] = \<const0> ;
  assign LOCKSTEP_Master_Out[1778] = \<const0> ;
  assign LOCKSTEP_Master_Out[1779] = \<const0> ;
  assign LOCKSTEP_Master_Out[1780] = \<const0> ;
  assign LOCKSTEP_Master_Out[1781] = \<const0> ;
  assign LOCKSTEP_Master_Out[1782] = \<const0> ;
  assign LOCKSTEP_Master_Out[1783] = \<const0> ;
  assign LOCKSTEP_Master_Out[1784] = \<const0> ;
  assign LOCKSTEP_Master_Out[1785] = \<const0> ;
  assign LOCKSTEP_Master_Out[1786] = \<const0> ;
  assign LOCKSTEP_Master_Out[1787] = \<const0> ;
  assign LOCKSTEP_Master_Out[1788] = \<const0> ;
  assign LOCKSTEP_Master_Out[1789] = \<const0> ;
  assign LOCKSTEP_Master_Out[1790] = \<const0> ;
  assign LOCKSTEP_Master_Out[1791] = \<const0> ;
  assign LOCKSTEP_Master_Out[1792] = \<const0> ;
  assign LOCKSTEP_Master_Out[1793] = \<const0> ;
  assign LOCKSTEP_Master_Out[1794] = \<const0> ;
  assign LOCKSTEP_Master_Out[1795] = \<const0> ;
  assign LOCKSTEP_Master_Out[1796] = \<const0> ;
  assign LOCKSTEP_Master_Out[1797] = \<const0> ;
  assign LOCKSTEP_Master_Out[1798] = \<const0> ;
  assign LOCKSTEP_Master_Out[1799] = \<const0> ;
  assign LOCKSTEP_Master_Out[1800] = \<const0> ;
  assign LOCKSTEP_Master_Out[1801] = \<const0> ;
  assign LOCKSTEP_Master_Out[1802] = \<const0> ;
  assign LOCKSTEP_Master_Out[1803] = \<const0> ;
  assign LOCKSTEP_Master_Out[1804] = \<const0> ;
  assign LOCKSTEP_Master_Out[1805] = \<const0> ;
  assign LOCKSTEP_Master_Out[1806] = \<const0> ;
  assign LOCKSTEP_Master_Out[1807] = \<const0> ;
  assign LOCKSTEP_Master_Out[1808] = \<const0> ;
  assign LOCKSTEP_Master_Out[1809] = \<const0> ;
  assign LOCKSTEP_Master_Out[1810] = \<const0> ;
  assign LOCKSTEP_Master_Out[1811] = \<const0> ;
  assign LOCKSTEP_Master_Out[1812] = \<const0> ;
  assign LOCKSTEP_Master_Out[1813] = \<const0> ;
  assign LOCKSTEP_Master_Out[1814] = \<const0> ;
  assign LOCKSTEP_Master_Out[1815] = \<const0> ;
  assign LOCKSTEP_Master_Out[1816] = \<const0> ;
  assign LOCKSTEP_Master_Out[1817] = \<const0> ;
  assign LOCKSTEP_Master_Out[1818] = \<const0> ;
  assign LOCKSTEP_Master_Out[1819] = \<const0> ;
  assign LOCKSTEP_Master_Out[1820] = \<const0> ;
  assign LOCKSTEP_Master_Out[1821] = \<const0> ;
  assign LOCKSTEP_Master_Out[1822] = \<const0> ;
  assign LOCKSTEP_Master_Out[1823] = \<const0> ;
  assign LOCKSTEP_Master_Out[1824] = \<const0> ;
  assign LOCKSTEP_Master_Out[1825] = \<const0> ;
  assign LOCKSTEP_Master_Out[1826] = \<const0> ;
  assign LOCKSTEP_Master_Out[1827] = \<const0> ;
  assign LOCKSTEP_Master_Out[1828] = \<const0> ;
  assign LOCKSTEP_Master_Out[1829] = \<const0> ;
  assign LOCKSTEP_Master_Out[1830] = \<const0> ;
  assign LOCKSTEP_Master_Out[1831] = \<const0> ;
  assign LOCKSTEP_Master_Out[1832] = \<const0> ;
  assign LOCKSTEP_Master_Out[1833] = \<const0> ;
  assign LOCKSTEP_Master_Out[1834] = \<const0> ;
  assign LOCKSTEP_Master_Out[1835] = \<const0> ;
  assign LOCKSTEP_Master_Out[1836] = \<const0> ;
  assign LOCKSTEP_Master_Out[1837] = \<const0> ;
  assign LOCKSTEP_Master_Out[1838] = \<const0> ;
  assign LOCKSTEP_Master_Out[1839] = \<const0> ;
  assign LOCKSTEP_Master_Out[1840] = \<const0> ;
  assign LOCKSTEP_Master_Out[1841] = \<const0> ;
  assign LOCKSTEP_Master_Out[1842] = \<const0> ;
  assign LOCKSTEP_Master_Out[1843] = \<const0> ;
  assign LOCKSTEP_Master_Out[1844] = \<const0> ;
  assign LOCKSTEP_Master_Out[1845] = \<const0> ;
  assign LOCKSTEP_Master_Out[1846] = \<const0> ;
  assign LOCKSTEP_Master_Out[1847] = \<const0> ;
  assign LOCKSTEP_Master_Out[1848] = \<const0> ;
  assign LOCKSTEP_Master_Out[1849] = \<const0> ;
  assign LOCKSTEP_Master_Out[1850] = \<const0> ;
  assign LOCKSTEP_Master_Out[1851] = \<const0> ;
  assign LOCKSTEP_Master_Out[1852] = \<const0> ;
  assign LOCKSTEP_Master_Out[1853] = \<const0> ;
  assign LOCKSTEP_Master_Out[1854] = \<const0> ;
  assign LOCKSTEP_Master_Out[1855] = \<const0> ;
  assign LOCKSTEP_Master_Out[1856] = \<const0> ;
  assign LOCKSTEP_Master_Out[1857] = \<const0> ;
  assign LOCKSTEP_Master_Out[1858] = \<const0> ;
  assign LOCKSTEP_Master_Out[1859] = \<const0> ;
  assign LOCKSTEP_Master_Out[1860] = \<const0> ;
  assign LOCKSTEP_Master_Out[1861] = \<const0> ;
  assign LOCKSTEP_Master_Out[1862] = \<const0> ;
  assign LOCKSTEP_Master_Out[1863] = \<const0> ;
  assign LOCKSTEP_Master_Out[1864] = \<const0> ;
  assign LOCKSTEP_Master_Out[1865] = \<const0> ;
  assign LOCKSTEP_Master_Out[1866] = \<const0> ;
  assign LOCKSTEP_Master_Out[1867] = \<const0> ;
  assign LOCKSTEP_Master_Out[1868] = \<const0> ;
  assign LOCKSTEP_Master_Out[1869] = \<const0> ;
  assign LOCKSTEP_Master_Out[1870] = \<const0> ;
  assign LOCKSTEP_Master_Out[1871] = \<const0> ;
  assign LOCKSTEP_Master_Out[1872] = \<const0> ;
  assign LOCKSTEP_Master_Out[1873] = \<const0> ;
  assign LOCKSTEP_Master_Out[1874] = \<const0> ;
  assign LOCKSTEP_Master_Out[1875] = \<const0> ;
  assign LOCKSTEP_Master_Out[1876] = \<const0> ;
  assign LOCKSTEP_Master_Out[1877] = \<const0> ;
  assign LOCKSTEP_Master_Out[1878] = \<const0> ;
  assign LOCKSTEP_Master_Out[1879] = \<const0> ;
  assign LOCKSTEP_Master_Out[1880] = \<const0> ;
  assign LOCKSTEP_Master_Out[1881] = \<const0> ;
  assign LOCKSTEP_Master_Out[1882] = \<const0> ;
  assign LOCKSTEP_Master_Out[1883] = \<const0> ;
  assign LOCKSTEP_Master_Out[1884] = \<const0> ;
  assign LOCKSTEP_Master_Out[1885] = \<const0> ;
  assign LOCKSTEP_Master_Out[1886] = \<const0> ;
  assign LOCKSTEP_Master_Out[1887] = \<const0> ;
  assign LOCKSTEP_Master_Out[1888] = \<const0> ;
  assign LOCKSTEP_Master_Out[1889] = \<const0> ;
  assign LOCKSTEP_Master_Out[1890] = \<const0> ;
  assign LOCKSTEP_Master_Out[1891] = \<const0> ;
  assign LOCKSTEP_Master_Out[1892] = \<const0> ;
  assign LOCKSTEP_Master_Out[1893] = \<const0> ;
  assign LOCKSTEP_Master_Out[1894] = \<const0> ;
  assign LOCKSTEP_Master_Out[1895] = \<const0> ;
  assign LOCKSTEP_Master_Out[1896] = \<const0> ;
  assign LOCKSTEP_Master_Out[1897] = \<const0> ;
  assign LOCKSTEP_Master_Out[1898] = \<const0> ;
  assign LOCKSTEP_Master_Out[1899] = \<const0> ;
  assign LOCKSTEP_Master_Out[1900] = \<const0> ;
  assign LOCKSTEP_Master_Out[1901] = \<const0> ;
  assign LOCKSTEP_Master_Out[1902] = \<const0> ;
  assign LOCKSTEP_Master_Out[1903] = \<const0> ;
  assign LOCKSTEP_Master_Out[1904] = \<const0> ;
  assign LOCKSTEP_Master_Out[1905] = \<const0> ;
  assign LOCKSTEP_Master_Out[1906] = \<const0> ;
  assign LOCKSTEP_Master_Out[1907] = \<const0> ;
  assign LOCKSTEP_Master_Out[1908] = \<const0> ;
  assign LOCKSTEP_Master_Out[1909] = \<const0> ;
  assign LOCKSTEP_Master_Out[1910] = \<const0> ;
  assign LOCKSTEP_Master_Out[1911] = \<const0> ;
  assign LOCKSTEP_Master_Out[1912] = \<const0> ;
  assign LOCKSTEP_Master_Out[1913] = \<const0> ;
  assign LOCKSTEP_Master_Out[1914] = \<const0> ;
  assign LOCKSTEP_Master_Out[1915] = \<const0> ;
  assign LOCKSTEP_Master_Out[1916] = \<const0> ;
  assign LOCKSTEP_Master_Out[1917] = \<const0> ;
  assign LOCKSTEP_Master_Out[1918] = \<const0> ;
  assign LOCKSTEP_Master_Out[1919] = \<const0> ;
  assign LOCKSTEP_Master_Out[1920] = \<const0> ;
  assign LOCKSTEP_Master_Out[1921] = \<const0> ;
  assign LOCKSTEP_Master_Out[1922] = \<const0> ;
  assign LOCKSTEP_Master_Out[1923] = \<const0> ;
  assign LOCKSTEP_Master_Out[1924] = \<const0> ;
  assign LOCKSTEP_Master_Out[1925] = \<const0> ;
  assign LOCKSTEP_Master_Out[1926] = \<const0> ;
  assign LOCKSTEP_Master_Out[1927] = \<const0> ;
  assign LOCKSTEP_Master_Out[1928] = \<const0> ;
  assign LOCKSTEP_Master_Out[1929] = \<const0> ;
  assign LOCKSTEP_Master_Out[1930] = \<const0> ;
  assign LOCKSTEP_Master_Out[1931] = \<const0> ;
  assign LOCKSTEP_Master_Out[1932] = \<const0> ;
  assign LOCKSTEP_Master_Out[1933] = \<const0> ;
  assign LOCKSTEP_Master_Out[1934] = \<const0> ;
  assign LOCKSTEP_Master_Out[1935] = \<const0> ;
  assign LOCKSTEP_Master_Out[1936] = \<const0> ;
  assign LOCKSTEP_Master_Out[1937] = \<const0> ;
  assign LOCKSTEP_Master_Out[1938] = \<const0> ;
  assign LOCKSTEP_Master_Out[1939] = \<const0> ;
  assign LOCKSTEP_Master_Out[1940] = \<const0> ;
  assign LOCKSTEP_Master_Out[1941] = \<const0> ;
  assign LOCKSTEP_Master_Out[1942] = \<const0> ;
  assign LOCKSTEP_Master_Out[1943] = \<const0> ;
  assign LOCKSTEP_Master_Out[1944] = \<const0> ;
  assign LOCKSTEP_Master_Out[1945] = \<const0> ;
  assign LOCKSTEP_Master_Out[1946] = \<const0> ;
  assign LOCKSTEP_Master_Out[1947] = \<const0> ;
  assign LOCKSTEP_Master_Out[1948] = \<const0> ;
  assign LOCKSTEP_Master_Out[1949] = \<const0> ;
  assign LOCKSTEP_Master_Out[1950] = \<const0> ;
  assign LOCKSTEP_Master_Out[1951] = \<const0> ;
  assign LOCKSTEP_Master_Out[1952] = \<const0> ;
  assign LOCKSTEP_Master_Out[1953] = \<const0> ;
  assign LOCKSTEP_Master_Out[1954] = \<const0> ;
  assign LOCKSTEP_Master_Out[1955] = \<const0> ;
  assign LOCKSTEP_Master_Out[1956] = \<const0> ;
  assign LOCKSTEP_Master_Out[1957] = \<const0> ;
  assign LOCKSTEP_Master_Out[1958] = \<const0> ;
  assign LOCKSTEP_Master_Out[1959] = \<const0> ;
  assign LOCKSTEP_Master_Out[1960] = \<const0> ;
  assign LOCKSTEP_Master_Out[1961] = \<const0> ;
  assign LOCKSTEP_Master_Out[1962] = \<const0> ;
  assign LOCKSTEP_Master_Out[1963] = \<const0> ;
  assign LOCKSTEP_Master_Out[1964] = \<const0> ;
  assign LOCKSTEP_Master_Out[1965] = \<const0> ;
  assign LOCKSTEP_Master_Out[1966] = \<const0> ;
  assign LOCKSTEP_Master_Out[1967] = \<const0> ;
  assign LOCKSTEP_Master_Out[1968] = \<const0> ;
  assign LOCKSTEP_Master_Out[1969] = \<const0> ;
  assign LOCKSTEP_Master_Out[1970] = \<const0> ;
  assign LOCKSTEP_Master_Out[1971] = \<const0> ;
  assign LOCKSTEP_Master_Out[1972] = \<const0> ;
  assign LOCKSTEP_Master_Out[1973] = \<const0> ;
  assign LOCKSTEP_Master_Out[1974] = \<const0> ;
  assign LOCKSTEP_Master_Out[1975] = \<const0> ;
  assign LOCKSTEP_Master_Out[1976] = \<const0> ;
  assign LOCKSTEP_Master_Out[1977] = \<const0> ;
  assign LOCKSTEP_Master_Out[1978] = \<const0> ;
  assign LOCKSTEP_Master_Out[1979] = \<const0> ;
  assign LOCKSTEP_Master_Out[1980] = \<const0> ;
  assign LOCKSTEP_Master_Out[1981] = \<const0> ;
  assign LOCKSTEP_Master_Out[1982] = \<const0> ;
  assign LOCKSTEP_Master_Out[1983] = \<const0> ;
  assign LOCKSTEP_Master_Out[1984] = \<const0> ;
  assign LOCKSTEP_Master_Out[1985] = \<const0> ;
  assign LOCKSTEP_Master_Out[1986] = \<const0> ;
  assign LOCKSTEP_Master_Out[1987] = \<const0> ;
  assign LOCKSTEP_Master_Out[1988] = \<const0> ;
  assign LOCKSTEP_Master_Out[1989] = \<const0> ;
  assign LOCKSTEP_Master_Out[1990] = \<const0> ;
  assign LOCKSTEP_Master_Out[1991] = \<const0> ;
  assign LOCKSTEP_Master_Out[1992] = \<const0> ;
  assign LOCKSTEP_Master_Out[1993] = \<const0> ;
  assign LOCKSTEP_Master_Out[1994] = \<const0> ;
  assign LOCKSTEP_Master_Out[1995] = \<const0> ;
  assign LOCKSTEP_Master_Out[1996] = \<const0> ;
  assign LOCKSTEP_Master_Out[1997] = \<const0> ;
  assign LOCKSTEP_Master_Out[1998] = \<const0> ;
  assign LOCKSTEP_Master_Out[1999] = \<const0> ;
  assign LOCKSTEP_Master_Out[2000] = \<const0> ;
  assign LOCKSTEP_Master_Out[2001] = \<const0> ;
  assign LOCKSTEP_Master_Out[2002] = \<const0> ;
  assign LOCKSTEP_Master_Out[2003] = \<const0> ;
  assign LOCKSTEP_Master_Out[2004] = \<const0> ;
  assign LOCKSTEP_Master_Out[2005] = \<const0> ;
  assign LOCKSTEP_Master_Out[2006] = \<const0> ;
  assign LOCKSTEP_Master_Out[2007] = \<const0> ;
  assign LOCKSTEP_Master_Out[2008] = \<const0> ;
  assign LOCKSTEP_Master_Out[2009] = \<const0> ;
  assign LOCKSTEP_Master_Out[2010] = \<const0> ;
  assign LOCKSTEP_Master_Out[2011] = \<const0> ;
  assign LOCKSTEP_Master_Out[2012] = \<const0> ;
  assign LOCKSTEP_Master_Out[2013] = \<const0> ;
  assign LOCKSTEP_Master_Out[2014] = \<const0> ;
  assign LOCKSTEP_Master_Out[2015] = \<const0> ;
  assign LOCKSTEP_Master_Out[2016] = \<const0> ;
  assign LOCKSTEP_Master_Out[2017] = \<const0> ;
  assign LOCKSTEP_Master_Out[2018] = \<const0> ;
  assign LOCKSTEP_Master_Out[2019] = \<const0> ;
  assign LOCKSTEP_Master_Out[2020] = \<const0> ;
  assign LOCKSTEP_Master_Out[2021] = \<const0> ;
  assign LOCKSTEP_Master_Out[2022] = \<const0> ;
  assign LOCKSTEP_Master_Out[2023] = \<const0> ;
  assign LOCKSTEP_Master_Out[2024] = \<const0> ;
  assign LOCKSTEP_Master_Out[2025] = \<const0> ;
  assign LOCKSTEP_Master_Out[2026] = \<const0> ;
  assign LOCKSTEP_Master_Out[2027] = \<const0> ;
  assign LOCKSTEP_Master_Out[2028] = \<const0> ;
  assign LOCKSTEP_Master_Out[2029] = \<const0> ;
  assign LOCKSTEP_Master_Out[2030] = \<const0> ;
  assign LOCKSTEP_Master_Out[2031] = \<const0> ;
  assign LOCKSTEP_Master_Out[2032] = \<const0> ;
  assign LOCKSTEP_Master_Out[2033] = \<const0> ;
  assign LOCKSTEP_Master_Out[2034] = \<const0> ;
  assign LOCKSTEP_Master_Out[2035] = \<const0> ;
  assign LOCKSTEP_Master_Out[2036] = \<const0> ;
  assign LOCKSTEP_Master_Out[2037] = \<const0> ;
  assign LOCKSTEP_Master_Out[2038] = \<const0> ;
  assign LOCKSTEP_Master_Out[2039] = \<const0> ;
  assign LOCKSTEP_Master_Out[2040] = \<const0> ;
  assign LOCKSTEP_Master_Out[2041] = \<const0> ;
  assign LOCKSTEP_Master_Out[2042] = \<const0> ;
  assign LOCKSTEP_Master_Out[2043] = \<const0> ;
  assign LOCKSTEP_Master_Out[2044] = \<const0> ;
  assign LOCKSTEP_Master_Out[2045] = \<const0> ;
  assign LOCKSTEP_Master_Out[2046] = \<const0> ;
  assign LOCKSTEP_Master_Out[2047] = \<const0> ;
  assign LOCKSTEP_Master_Out[2048] = \<const0> ;
  assign LOCKSTEP_Master_Out[2049] = \<const0> ;
  assign LOCKSTEP_Master_Out[2050] = \<const0> ;
  assign LOCKSTEP_Master_Out[2051] = \<const0> ;
  assign LOCKSTEP_Master_Out[2052] = \<const0> ;
  assign LOCKSTEP_Master_Out[2053] = \<const0> ;
  assign LOCKSTEP_Master_Out[2054] = \<const0> ;
  assign LOCKSTEP_Master_Out[2055] = \<const0> ;
  assign LOCKSTEP_Master_Out[2056] = \<const0> ;
  assign LOCKSTEP_Master_Out[2057] = \<const0> ;
  assign LOCKSTEP_Master_Out[2058] = \<const0> ;
  assign LOCKSTEP_Master_Out[2059] = \<const0> ;
  assign LOCKSTEP_Master_Out[2060] = \<const0> ;
  assign LOCKSTEP_Master_Out[2061] = \<const0> ;
  assign LOCKSTEP_Master_Out[2062] = \<const0> ;
  assign LOCKSTEP_Master_Out[2063] = \<const0> ;
  assign LOCKSTEP_Master_Out[2064] = \<const0> ;
  assign LOCKSTEP_Master_Out[2065] = \<const0> ;
  assign LOCKSTEP_Master_Out[2066] = \<const0> ;
  assign LOCKSTEP_Master_Out[2067] = \<const0> ;
  assign LOCKSTEP_Master_Out[2068] = \<const0> ;
  assign LOCKSTEP_Master_Out[2069] = \<const0> ;
  assign LOCKSTEP_Master_Out[2070] = \<const0> ;
  assign LOCKSTEP_Master_Out[2071] = \<const0> ;
  assign LOCKSTEP_Master_Out[2072] = \<const0> ;
  assign LOCKSTEP_Master_Out[2073] = \<const0> ;
  assign LOCKSTEP_Master_Out[2074] = \<const0> ;
  assign LOCKSTEP_Master_Out[2075] = \<const0> ;
  assign LOCKSTEP_Master_Out[2076] = \<const0> ;
  assign LOCKSTEP_Master_Out[2077] = \<const0> ;
  assign LOCKSTEP_Master_Out[2078] = \<const0> ;
  assign LOCKSTEP_Master_Out[2079] = \<const0> ;
  assign LOCKSTEP_Master_Out[2080] = \<const0> ;
  assign LOCKSTEP_Master_Out[2081] = \<const0> ;
  assign LOCKSTEP_Master_Out[2082] = \<const0> ;
  assign LOCKSTEP_Master_Out[2083] = \<const0> ;
  assign LOCKSTEP_Master_Out[2084] = \<const0> ;
  assign LOCKSTEP_Master_Out[2085] = \<const0> ;
  assign LOCKSTEP_Master_Out[2086] = \<const0> ;
  assign LOCKSTEP_Master_Out[2087] = \<const0> ;
  assign LOCKSTEP_Master_Out[2088] = \<const0> ;
  assign LOCKSTEP_Master_Out[2089] = \<const0> ;
  assign LOCKSTEP_Master_Out[2090] = \<const0> ;
  assign LOCKSTEP_Master_Out[2091] = \<const0> ;
  assign LOCKSTEP_Master_Out[2092] = \<const0> ;
  assign LOCKSTEP_Master_Out[2093] = \<const0> ;
  assign LOCKSTEP_Master_Out[2094] = \<const0> ;
  assign LOCKSTEP_Master_Out[2095] = \<const0> ;
  assign LOCKSTEP_Master_Out[2096] = \<const0> ;
  assign LOCKSTEP_Master_Out[2097] = \<const0> ;
  assign LOCKSTEP_Master_Out[2098] = \<const0> ;
  assign LOCKSTEP_Master_Out[2099] = \<const0> ;
  assign LOCKSTEP_Master_Out[2100] = \<const0> ;
  assign LOCKSTEP_Master_Out[2101] = \<const0> ;
  assign LOCKSTEP_Master_Out[2102] = \<const0> ;
  assign LOCKSTEP_Master_Out[2103] = \<const0> ;
  assign LOCKSTEP_Master_Out[2104] = \<const0> ;
  assign LOCKSTEP_Master_Out[2105] = \<const0> ;
  assign LOCKSTEP_Master_Out[2106] = \<const0> ;
  assign LOCKSTEP_Master_Out[2107] = \<const0> ;
  assign LOCKSTEP_Master_Out[2108] = \<const0> ;
  assign LOCKSTEP_Master_Out[2109] = \<const0> ;
  assign LOCKSTEP_Master_Out[2110] = \<const0> ;
  assign LOCKSTEP_Master_Out[2111] = \<const0> ;
  assign LOCKSTEP_Master_Out[2112] = \<const0> ;
  assign LOCKSTEP_Master_Out[2113] = \<const0> ;
  assign LOCKSTEP_Master_Out[2114] = \<const0> ;
  assign LOCKSTEP_Master_Out[2115] = \<const0> ;
  assign LOCKSTEP_Master_Out[2116] = \<const0> ;
  assign LOCKSTEP_Master_Out[2117] = \<const0> ;
  assign LOCKSTEP_Master_Out[2118] = \<const0> ;
  assign LOCKSTEP_Master_Out[2119] = \<const0> ;
  assign LOCKSTEP_Master_Out[2120] = \<const0> ;
  assign LOCKSTEP_Master_Out[2121] = \<const0> ;
  assign LOCKSTEP_Master_Out[2122] = \<const0> ;
  assign LOCKSTEP_Master_Out[2123] = \<const0> ;
  assign LOCKSTEP_Master_Out[2124] = \<const0> ;
  assign LOCKSTEP_Master_Out[2125] = \<const0> ;
  assign LOCKSTEP_Master_Out[2126] = \<const0> ;
  assign LOCKSTEP_Master_Out[2127] = \<const0> ;
  assign LOCKSTEP_Master_Out[2128] = \<const0> ;
  assign LOCKSTEP_Master_Out[2129] = \<const0> ;
  assign LOCKSTEP_Master_Out[2130] = \<const0> ;
  assign LOCKSTEP_Master_Out[2131] = \<const0> ;
  assign LOCKSTEP_Master_Out[2132] = \<const0> ;
  assign LOCKSTEP_Master_Out[2133] = \<const0> ;
  assign LOCKSTEP_Master_Out[2134] = \<const0> ;
  assign LOCKSTEP_Master_Out[2135] = \<const0> ;
  assign LOCKSTEP_Master_Out[2136] = \<const0> ;
  assign LOCKSTEP_Master_Out[2137] = \<const0> ;
  assign LOCKSTEP_Master_Out[2138] = \<const0> ;
  assign LOCKSTEP_Master_Out[2139] = \<const0> ;
  assign LOCKSTEP_Master_Out[2140] = \<const0> ;
  assign LOCKSTEP_Master_Out[2141] = \<const0> ;
  assign LOCKSTEP_Master_Out[2142] = \<const0> ;
  assign LOCKSTEP_Master_Out[2143] = \<const0> ;
  assign LOCKSTEP_Master_Out[2144] = \<const0> ;
  assign LOCKSTEP_Master_Out[2145] = \<const0> ;
  assign LOCKSTEP_Master_Out[2146] = \<const0> ;
  assign LOCKSTEP_Master_Out[2147] = \<const0> ;
  assign LOCKSTEP_Master_Out[2148] = \<const0> ;
  assign LOCKSTEP_Master_Out[2149] = \<const0> ;
  assign LOCKSTEP_Master_Out[2150] = \<const0> ;
  assign LOCKSTEP_Master_Out[2151] = \<const0> ;
  assign LOCKSTEP_Master_Out[2152] = \<const0> ;
  assign LOCKSTEP_Master_Out[2153] = \<const0> ;
  assign LOCKSTEP_Master_Out[2154] = \<const0> ;
  assign LOCKSTEP_Master_Out[2155] = \<const0> ;
  assign LOCKSTEP_Master_Out[2156] = \<const0> ;
  assign LOCKSTEP_Master_Out[2157] = \<const0> ;
  assign LOCKSTEP_Master_Out[2158] = \<const0> ;
  assign LOCKSTEP_Master_Out[2159] = \<const0> ;
  assign LOCKSTEP_Master_Out[2160] = \<const0> ;
  assign LOCKSTEP_Master_Out[2161] = \<const0> ;
  assign LOCKSTEP_Master_Out[2162] = \<const0> ;
  assign LOCKSTEP_Master_Out[2163] = \<const0> ;
  assign LOCKSTEP_Master_Out[2164] = \<const0> ;
  assign LOCKSTEP_Master_Out[2165] = \<const0> ;
  assign LOCKSTEP_Master_Out[2166] = \<const0> ;
  assign LOCKSTEP_Master_Out[2167] = \<const0> ;
  assign LOCKSTEP_Master_Out[2168] = \<const0> ;
  assign LOCKSTEP_Master_Out[2169] = \<const0> ;
  assign LOCKSTEP_Master_Out[2170] = \<const0> ;
  assign LOCKSTEP_Master_Out[2171] = \<const0> ;
  assign LOCKSTEP_Master_Out[2172] = \<const0> ;
  assign LOCKSTEP_Master_Out[2173] = \<const0> ;
  assign LOCKSTEP_Master_Out[2174] = \<const0> ;
  assign LOCKSTEP_Master_Out[2175] = \<const0> ;
  assign LOCKSTEP_Master_Out[2176] = \<const0> ;
  assign LOCKSTEP_Master_Out[2177] = \<const0> ;
  assign LOCKSTEP_Master_Out[2178] = \<const0> ;
  assign LOCKSTEP_Master_Out[2179] = \<const0> ;
  assign LOCKSTEP_Master_Out[2180] = \<const0> ;
  assign LOCKSTEP_Master_Out[2181] = \<const0> ;
  assign LOCKSTEP_Master_Out[2182] = \<const0> ;
  assign LOCKSTEP_Master_Out[2183] = \<const0> ;
  assign LOCKSTEP_Master_Out[2184] = \<const0> ;
  assign LOCKSTEP_Master_Out[2185] = \<const0> ;
  assign LOCKSTEP_Master_Out[2186] = \<const0> ;
  assign LOCKSTEP_Master_Out[2187] = \<const0> ;
  assign LOCKSTEP_Master_Out[2188] = \<const0> ;
  assign LOCKSTEP_Master_Out[2189] = \<const0> ;
  assign LOCKSTEP_Master_Out[2190] = \<const0> ;
  assign LOCKSTEP_Master_Out[2191] = \<const0> ;
  assign LOCKSTEP_Master_Out[2192] = \<const0> ;
  assign LOCKSTEP_Master_Out[2193] = \<const0> ;
  assign LOCKSTEP_Master_Out[2194] = \<const0> ;
  assign LOCKSTEP_Master_Out[2195] = \<const0> ;
  assign LOCKSTEP_Master_Out[2196] = \<const0> ;
  assign LOCKSTEP_Master_Out[2197] = \<const0> ;
  assign LOCKSTEP_Master_Out[2198] = \<const0> ;
  assign LOCKSTEP_Master_Out[2199] = \<const0> ;
  assign LOCKSTEP_Master_Out[2200] = \<const0> ;
  assign LOCKSTEP_Master_Out[2201] = \<const0> ;
  assign LOCKSTEP_Master_Out[2202] = \<const0> ;
  assign LOCKSTEP_Master_Out[2203] = \<const0> ;
  assign LOCKSTEP_Master_Out[2204] = \<const0> ;
  assign LOCKSTEP_Master_Out[2205] = \<const0> ;
  assign LOCKSTEP_Master_Out[2206] = \<const0> ;
  assign LOCKSTEP_Master_Out[2207] = \<const0> ;
  assign LOCKSTEP_Master_Out[2208] = \<const0> ;
  assign LOCKSTEP_Master_Out[2209] = \<const0> ;
  assign LOCKSTEP_Master_Out[2210] = \<const0> ;
  assign LOCKSTEP_Master_Out[2211] = \<const0> ;
  assign LOCKSTEP_Master_Out[2212] = \<const0> ;
  assign LOCKSTEP_Master_Out[2213] = \<const0> ;
  assign LOCKSTEP_Master_Out[2214] = \<const0> ;
  assign LOCKSTEP_Master_Out[2215] = \<const0> ;
  assign LOCKSTEP_Master_Out[2216] = \<const0> ;
  assign LOCKSTEP_Master_Out[2217] = \<const0> ;
  assign LOCKSTEP_Master_Out[2218] = \<const0> ;
  assign LOCKSTEP_Master_Out[2219] = \<const0> ;
  assign LOCKSTEP_Master_Out[2220] = \<const0> ;
  assign LOCKSTEP_Master_Out[2221] = \<const0> ;
  assign LOCKSTEP_Master_Out[2222] = \<const0> ;
  assign LOCKSTEP_Master_Out[2223] = \<const0> ;
  assign LOCKSTEP_Master_Out[2224] = \<const0> ;
  assign LOCKSTEP_Master_Out[2225] = \<const0> ;
  assign LOCKSTEP_Master_Out[2226] = \<const0> ;
  assign LOCKSTEP_Master_Out[2227] = \<const0> ;
  assign LOCKSTEP_Master_Out[2228] = \<const0> ;
  assign LOCKSTEP_Master_Out[2229] = \<const0> ;
  assign LOCKSTEP_Master_Out[2230] = \<const0> ;
  assign LOCKSTEP_Master_Out[2231] = \<const0> ;
  assign LOCKSTEP_Master_Out[2232] = \<const0> ;
  assign LOCKSTEP_Master_Out[2233] = \<const0> ;
  assign LOCKSTEP_Master_Out[2234] = \<const0> ;
  assign LOCKSTEP_Master_Out[2235] = \<const0> ;
  assign LOCKSTEP_Master_Out[2236] = \<const0> ;
  assign LOCKSTEP_Master_Out[2237] = \<const0> ;
  assign LOCKSTEP_Master_Out[2238] = \<const0> ;
  assign LOCKSTEP_Master_Out[2239] = \<const0> ;
  assign LOCKSTEP_Master_Out[2240] = \<const0> ;
  assign LOCKSTEP_Master_Out[2241] = \<const0> ;
  assign LOCKSTEP_Master_Out[2242] = \<const0> ;
  assign LOCKSTEP_Master_Out[2243] = \<const0> ;
  assign LOCKSTEP_Master_Out[2244] = \<const0> ;
  assign LOCKSTEP_Master_Out[2245] = \<const0> ;
  assign LOCKSTEP_Master_Out[2246] = \<const0> ;
  assign LOCKSTEP_Master_Out[2247] = \<const0> ;
  assign LOCKSTEP_Master_Out[2248] = \<const0> ;
  assign LOCKSTEP_Master_Out[2249] = \<const0> ;
  assign LOCKSTEP_Master_Out[2250] = \<const0> ;
  assign LOCKSTEP_Master_Out[2251] = \<const0> ;
  assign LOCKSTEP_Master_Out[2252] = \<const0> ;
  assign LOCKSTEP_Master_Out[2253] = \<const0> ;
  assign LOCKSTEP_Master_Out[2254] = \<const0> ;
  assign LOCKSTEP_Master_Out[2255] = \<const0> ;
  assign LOCKSTEP_Master_Out[2256] = \<const0> ;
  assign LOCKSTEP_Master_Out[2257] = \<const0> ;
  assign LOCKSTEP_Master_Out[2258] = \<const0> ;
  assign LOCKSTEP_Master_Out[2259] = \<const0> ;
  assign LOCKSTEP_Master_Out[2260] = \<const0> ;
  assign LOCKSTEP_Master_Out[2261] = \<const0> ;
  assign LOCKSTEP_Master_Out[2262] = \<const0> ;
  assign LOCKSTEP_Master_Out[2263] = \<const0> ;
  assign LOCKSTEP_Master_Out[2264] = \<const0> ;
  assign LOCKSTEP_Master_Out[2265] = \<const0> ;
  assign LOCKSTEP_Master_Out[2266] = \<const0> ;
  assign LOCKSTEP_Master_Out[2267] = \<const0> ;
  assign LOCKSTEP_Master_Out[2268] = \<const0> ;
  assign LOCKSTEP_Master_Out[2269] = \<const0> ;
  assign LOCKSTEP_Master_Out[2270] = \<const0> ;
  assign LOCKSTEP_Master_Out[2271] = \<const0> ;
  assign LOCKSTEP_Master_Out[2272] = \<const0> ;
  assign LOCKSTEP_Master_Out[2273] = \<const0> ;
  assign LOCKSTEP_Master_Out[2274] = \<const0> ;
  assign LOCKSTEP_Master_Out[2275] = \<const0> ;
  assign LOCKSTEP_Master_Out[2276] = \<const0> ;
  assign LOCKSTEP_Master_Out[2277] = \<const0> ;
  assign LOCKSTEP_Master_Out[2278] = \<const0> ;
  assign LOCKSTEP_Master_Out[2279] = \<const0> ;
  assign LOCKSTEP_Master_Out[2280] = \<const0> ;
  assign LOCKSTEP_Master_Out[2281] = \<const0> ;
  assign LOCKSTEP_Master_Out[2282] = \<const0> ;
  assign LOCKSTEP_Master_Out[2283] = \<const0> ;
  assign LOCKSTEP_Master_Out[2284] = \<const0> ;
  assign LOCKSTEP_Master_Out[2285] = \<const0> ;
  assign LOCKSTEP_Master_Out[2286] = \<const0> ;
  assign LOCKSTEP_Master_Out[2287] = \<const0> ;
  assign LOCKSTEP_Master_Out[2288] = \<const0> ;
  assign LOCKSTEP_Master_Out[2289] = \<const0> ;
  assign LOCKSTEP_Master_Out[2290] = \<const0> ;
  assign LOCKSTEP_Master_Out[2291] = \<const0> ;
  assign LOCKSTEP_Master_Out[2292] = \<const0> ;
  assign LOCKSTEP_Master_Out[2293] = \<const0> ;
  assign LOCKSTEP_Master_Out[2294] = \<const0> ;
  assign LOCKSTEP_Master_Out[2295] = \<const0> ;
  assign LOCKSTEP_Master_Out[2296] = \<const0> ;
  assign LOCKSTEP_Master_Out[2297] = \<const0> ;
  assign LOCKSTEP_Master_Out[2298] = \<const0> ;
  assign LOCKSTEP_Master_Out[2299] = \<const0> ;
  assign LOCKSTEP_Master_Out[2300] = \<const0> ;
  assign LOCKSTEP_Master_Out[2301] = \<const0> ;
  assign LOCKSTEP_Master_Out[2302] = \<const0> ;
  assign LOCKSTEP_Master_Out[2303] = \<const0> ;
  assign LOCKSTEP_Master_Out[2304] = \<const0> ;
  assign LOCKSTEP_Master_Out[2305] = \<const0> ;
  assign LOCKSTEP_Master_Out[2306] = \<const0> ;
  assign LOCKSTEP_Master_Out[2307] = \<const0> ;
  assign LOCKSTEP_Master_Out[2308] = \<const0> ;
  assign LOCKSTEP_Master_Out[2309] = \<const0> ;
  assign LOCKSTEP_Master_Out[2310] = \<const0> ;
  assign LOCKSTEP_Master_Out[2311] = \<const0> ;
  assign LOCKSTEP_Master_Out[2312] = \<const0> ;
  assign LOCKSTEP_Master_Out[2313] = \<const0> ;
  assign LOCKSTEP_Master_Out[2314] = \<const0> ;
  assign LOCKSTEP_Master_Out[2315] = \<const0> ;
  assign LOCKSTEP_Master_Out[2316] = \<const0> ;
  assign LOCKSTEP_Master_Out[2317] = \<const0> ;
  assign LOCKSTEP_Master_Out[2318] = \<const0> ;
  assign LOCKSTEP_Master_Out[2319] = \<const0> ;
  assign LOCKSTEP_Master_Out[2320] = \<const0> ;
  assign LOCKSTEP_Master_Out[2321] = \<const0> ;
  assign LOCKSTEP_Master_Out[2322] = \<const0> ;
  assign LOCKSTEP_Master_Out[2323] = \<const0> ;
  assign LOCKSTEP_Master_Out[2324] = \<const0> ;
  assign LOCKSTEP_Master_Out[2325] = \<const0> ;
  assign LOCKSTEP_Master_Out[2326] = \<const0> ;
  assign LOCKSTEP_Master_Out[2327] = \<const0> ;
  assign LOCKSTEP_Master_Out[2328] = \<const0> ;
  assign LOCKSTEP_Master_Out[2329] = \<const0> ;
  assign LOCKSTEP_Master_Out[2330] = \<const0> ;
  assign LOCKSTEP_Master_Out[2331] = \<const0> ;
  assign LOCKSTEP_Master_Out[2332] = \<const0> ;
  assign LOCKSTEP_Master_Out[2333] = \<const0> ;
  assign LOCKSTEP_Master_Out[2334] = \<const0> ;
  assign LOCKSTEP_Master_Out[2335] = \<const0> ;
  assign LOCKSTEP_Master_Out[2336] = \<const0> ;
  assign LOCKSTEP_Master_Out[2337] = \<const0> ;
  assign LOCKSTEP_Master_Out[2338] = \<const0> ;
  assign LOCKSTEP_Master_Out[2339] = \<const0> ;
  assign LOCKSTEP_Master_Out[2340] = \<const0> ;
  assign LOCKSTEP_Master_Out[2341] = \<const0> ;
  assign LOCKSTEP_Master_Out[2342] = \<const0> ;
  assign LOCKSTEP_Master_Out[2343] = \<const0> ;
  assign LOCKSTEP_Master_Out[2344] = \<const0> ;
  assign LOCKSTEP_Master_Out[2345] = \<const0> ;
  assign LOCKSTEP_Master_Out[2346] = \<const0> ;
  assign LOCKSTEP_Master_Out[2347] = \<const0> ;
  assign LOCKSTEP_Master_Out[2348] = \<const0> ;
  assign LOCKSTEP_Master_Out[2349] = \<const0> ;
  assign LOCKSTEP_Master_Out[2350] = \<const0> ;
  assign LOCKSTEP_Master_Out[2351] = \<const0> ;
  assign LOCKSTEP_Master_Out[2352] = \<const0> ;
  assign LOCKSTEP_Master_Out[2353] = \<const0> ;
  assign LOCKSTEP_Master_Out[2354] = \<const0> ;
  assign LOCKSTEP_Master_Out[2355] = \<const0> ;
  assign LOCKSTEP_Master_Out[2356] = \<const0> ;
  assign LOCKSTEP_Master_Out[2357] = \<const0> ;
  assign LOCKSTEP_Master_Out[2358] = \<const0> ;
  assign LOCKSTEP_Master_Out[2359] = \<const0> ;
  assign LOCKSTEP_Master_Out[2360] = \<const0> ;
  assign LOCKSTEP_Master_Out[2361] = \<const0> ;
  assign LOCKSTEP_Master_Out[2362] = \<const0> ;
  assign LOCKSTEP_Master_Out[2363] = \<const0> ;
  assign LOCKSTEP_Master_Out[2364] = \<const0> ;
  assign LOCKSTEP_Master_Out[2365] = \<const0> ;
  assign LOCKSTEP_Master_Out[2366] = \<const0> ;
  assign LOCKSTEP_Master_Out[2367] = \<const0> ;
  assign LOCKSTEP_Master_Out[2368] = \<const0> ;
  assign LOCKSTEP_Master_Out[2369] = \<const0> ;
  assign LOCKSTEP_Master_Out[2370] = \<const0> ;
  assign LOCKSTEP_Master_Out[2371] = \<const0> ;
  assign LOCKSTEP_Master_Out[2372] = \<const0> ;
  assign LOCKSTEP_Master_Out[2373] = \<const0> ;
  assign LOCKSTEP_Master_Out[2374] = \<const0> ;
  assign LOCKSTEP_Master_Out[2375] = \<const0> ;
  assign LOCKSTEP_Master_Out[2376] = \<const0> ;
  assign LOCKSTEP_Master_Out[2377] = \<const0> ;
  assign LOCKSTEP_Master_Out[2378] = \<const0> ;
  assign LOCKSTEP_Master_Out[2379] = \<const0> ;
  assign LOCKSTEP_Master_Out[2380] = \<const0> ;
  assign LOCKSTEP_Master_Out[2381] = \<const0> ;
  assign LOCKSTEP_Master_Out[2382] = \<const0> ;
  assign LOCKSTEP_Master_Out[2383] = \<const0> ;
  assign LOCKSTEP_Master_Out[2384] = \<const0> ;
  assign LOCKSTEP_Master_Out[2385] = \<const0> ;
  assign LOCKSTEP_Master_Out[2386] = \<const0> ;
  assign LOCKSTEP_Master_Out[2387] = \<const0> ;
  assign LOCKSTEP_Master_Out[2388] = \<const0> ;
  assign LOCKSTEP_Master_Out[2389] = \<const0> ;
  assign LOCKSTEP_Master_Out[2390] = \<const0> ;
  assign LOCKSTEP_Master_Out[2391] = \<const0> ;
  assign LOCKSTEP_Master_Out[2392] = \<const0> ;
  assign LOCKSTEP_Master_Out[2393] = \<const0> ;
  assign LOCKSTEP_Master_Out[2394] = \<const0> ;
  assign LOCKSTEP_Master_Out[2395] = \<const0> ;
  assign LOCKSTEP_Master_Out[2396] = \<const0> ;
  assign LOCKSTEP_Master_Out[2397] = \<const0> ;
  assign LOCKSTEP_Master_Out[2398] = \<const0> ;
  assign LOCKSTEP_Master_Out[2399] = \<const0> ;
  assign LOCKSTEP_Master_Out[2400] = \<const0> ;
  assign LOCKSTEP_Master_Out[2401] = \<const0> ;
  assign LOCKSTEP_Master_Out[2402] = \<const0> ;
  assign LOCKSTEP_Master_Out[2403] = \<const0> ;
  assign LOCKSTEP_Master_Out[2404] = \<const0> ;
  assign LOCKSTEP_Master_Out[2405] = \<const0> ;
  assign LOCKSTEP_Master_Out[2406] = \<const0> ;
  assign LOCKSTEP_Master_Out[2407] = \<const0> ;
  assign LOCKSTEP_Master_Out[2408] = \<const0> ;
  assign LOCKSTEP_Master_Out[2409] = \<const0> ;
  assign LOCKSTEP_Master_Out[2410] = \<const0> ;
  assign LOCKSTEP_Master_Out[2411] = \<const0> ;
  assign LOCKSTEP_Master_Out[2412] = \<const0> ;
  assign LOCKSTEP_Master_Out[2413] = \<const0> ;
  assign LOCKSTEP_Master_Out[2414] = \<const0> ;
  assign LOCKSTEP_Master_Out[2415] = \<const0> ;
  assign LOCKSTEP_Master_Out[2416] = \<const0> ;
  assign LOCKSTEP_Master_Out[2417] = \<const0> ;
  assign LOCKSTEP_Master_Out[2418] = \<const0> ;
  assign LOCKSTEP_Master_Out[2419] = \<const0> ;
  assign LOCKSTEP_Master_Out[2420] = \<const0> ;
  assign LOCKSTEP_Master_Out[2421] = \<const0> ;
  assign LOCKSTEP_Master_Out[2422] = \<const0> ;
  assign LOCKSTEP_Master_Out[2423] = \<const0> ;
  assign LOCKSTEP_Master_Out[2424] = \<const0> ;
  assign LOCKSTEP_Master_Out[2425] = \<const0> ;
  assign LOCKSTEP_Master_Out[2426] = \<const0> ;
  assign LOCKSTEP_Master_Out[2427] = \<const0> ;
  assign LOCKSTEP_Master_Out[2428] = \<const0> ;
  assign LOCKSTEP_Master_Out[2429] = \<const0> ;
  assign LOCKSTEP_Master_Out[2430] = \<const0> ;
  assign LOCKSTEP_Master_Out[2431] = \<const0> ;
  assign LOCKSTEP_Master_Out[2432] = \<const0> ;
  assign LOCKSTEP_Master_Out[2433] = \<const0> ;
  assign LOCKSTEP_Master_Out[2434] = \<const0> ;
  assign LOCKSTEP_Master_Out[2435] = \<const0> ;
  assign LOCKSTEP_Master_Out[2436] = \<const0> ;
  assign LOCKSTEP_Master_Out[2437] = \<const0> ;
  assign LOCKSTEP_Master_Out[2438] = \<const0> ;
  assign LOCKSTEP_Master_Out[2439] = \<const0> ;
  assign LOCKSTEP_Master_Out[2440] = \<const0> ;
  assign LOCKSTEP_Master_Out[2441] = \<const0> ;
  assign LOCKSTEP_Master_Out[2442] = \<const0> ;
  assign LOCKSTEP_Master_Out[2443] = \<const0> ;
  assign LOCKSTEP_Master_Out[2444] = \<const0> ;
  assign LOCKSTEP_Master_Out[2445] = \<const0> ;
  assign LOCKSTEP_Master_Out[2446] = \<const0> ;
  assign LOCKSTEP_Master_Out[2447] = \<const0> ;
  assign LOCKSTEP_Master_Out[2448] = \<const0> ;
  assign LOCKSTEP_Master_Out[2449] = \<const0> ;
  assign LOCKSTEP_Master_Out[2450] = \<const0> ;
  assign LOCKSTEP_Master_Out[2451] = \<const0> ;
  assign LOCKSTEP_Master_Out[2452] = \<const0> ;
  assign LOCKSTEP_Master_Out[2453] = \<const0> ;
  assign LOCKSTEP_Master_Out[2454] = \<const0> ;
  assign LOCKSTEP_Master_Out[2455] = \<const0> ;
  assign LOCKSTEP_Master_Out[2456] = \<const0> ;
  assign LOCKSTEP_Master_Out[2457] = \<const0> ;
  assign LOCKSTEP_Master_Out[2458] = \<const0> ;
  assign LOCKSTEP_Master_Out[2459] = \<const0> ;
  assign LOCKSTEP_Master_Out[2460] = \<const0> ;
  assign LOCKSTEP_Master_Out[2461] = \<const0> ;
  assign LOCKSTEP_Master_Out[2462] = \<const0> ;
  assign LOCKSTEP_Master_Out[2463] = \<const0> ;
  assign LOCKSTEP_Master_Out[2464] = \<const0> ;
  assign LOCKSTEP_Master_Out[2465] = \<const0> ;
  assign LOCKSTEP_Master_Out[2466] = \<const0> ;
  assign LOCKSTEP_Master_Out[2467] = \<const0> ;
  assign LOCKSTEP_Master_Out[2468] = \<const0> ;
  assign LOCKSTEP_Master_Out[2469] = \<const0> ;
  assign LOCKSTEP_Master_Out[2470] = \<const0> ;
  assign LOCKSTEP_Master_Out[2471] = \<const0> ;
  assign LOCKSTEP_Master_Out[2472] = \<const0> ;
  assign LOCKSTEP_Master_Out[2473] = \<const0> ;
  assign LOCKSTEP_Master_Out[2474] = \<const0> ;
  assign LOCKSTEP_Master_Out[2475] = \<const0> ;
  assign LOCKSTEP_Master_Out[2476] = \<const0> ;
  assign LOCKSTEP_Master_Out[2477] = \<const0> ;
  assign LOCKSTEP_Master_Out[2478] = \<const0> ;
  assign LOCKSTEP_Master_Out[2479] = \<const0> ;
  assign LOCKSTEP_Master_Out[2480] = \<const0> ;
  assign LOCKSTEP_Master_Out[2481] = \<const0> ;
  assign LOCKSTEP_Master_Out[2482] = \<const0> ;
  assign LOCKSTEP_Master_Out[2483] = \<const0> ;
  assign LOCKSTEP_Master_Out[2484] = \<const0> ;
  assign LOCKSTEP_Master_Out[2485] = \<const0> ;
  assign LOCKSTEP_Master_Out[2486] = \<const0> ;
  assign LOCKSTEP_Master_Out[2487] = \<const0> ;
  assign LOCKSTEP_Master_Out[2488] = \<const0> ;
  assign LOCKSTEP_Master_Out[2489] = \<const0> ;
  assign LOCKSTEP_Master_Out[2490] = \<const0> ;
  assign LOCKSTEP_Master_Out[2491] = \<const0> ;
  assign LOCKSTEP_Master_Out[2492] = \<const0> ;
  assign LOCKSTEP_Master_Out[2493] = \<const0> ;
  assign LOCKSTEP_Master_Out[2494] = \<const0> ;
  assign LOCKSTEP_Master_Out[2495] = \<const0> ;
  assign LOCKSTEP_Master_Out[2496] = \<const0> ;
  assign LOCKSTEP_Master_Out[2497] = \<const0> ;
  assign LOCKSTEP_Master_Out[2498] = \<const0> ;
  assign LOCKSTEP_Master_Out[2499] = \<const0> ;
  assign LOCKSTEP_Master_Out[2500] = \<const0> ;
  assign LOCKSTEP_Master_Out[2501] = \<const0> ;
  assign LOCKSTEP_Master_Out[2502] = \<const0> ;
  assign LOCKSTEP_Master_Out[2503] = \<const0> ;
  assign LOCKSTEP_Master_Out[2504] = \<const0> ;
  assign LOCKSTEP_Master_Out[2505] = \<const0> ;
  assign LOCKSTEP_Master_Out[2506] = \<const0> ;
  assign LOCKSTEP_Master_Out[2507] = \<const0> ;
  assign LOCKSTEP_Master_Out[2508] = \<const0> ;
  assign LOCKSTEP_Master_Out[2509] = \<const0> ;
  assign LOCKSTEP_Master_Out[2510] = \<const0> ;
  assign LOCKSTEP_Master_Out[2511] = \<const0> ;
  assign LOCKSTEP_Master_Out[2512] = \<const0> ;
  assign LOCKSTEP_Master_Out[2513] = \<const0> ;
  assign LOCKSTEP_Master_Out[2514] = \<const0> ;
  assign LOCKSTEP_Master_Out[2515] = \<const0> ;
  assign LOCKSTEP_Master_Out[2516] = \<const0> ;
  assign LOCKSTEP_Master_Out[2517] = \<const0> ;
  assign LOCKSTEP_Master_Out[2518] = \<const0> ;
  assign LOCKSTEP_Master_Out[2519] = \<const0> ;
  assign LOCKSTEP_Master_Out[2520] = \<const0> ;
  assign LOCKSTEP_Master_Out[2521] = \<const0> ;
  assign LOCKSTEP_Master_Out[2522] = \<const0> ;
  assign LOCKSTEP_Master_Out[2523] = \<const0> ;
  assign LOCKSTEP_Master_Out[2524] = \<const0> ;
  assign LOCKSTEP_Master_Out[2525] = \<const0> ;
  assign LOCKSTEP_Master_Out[2526] = \<const0> ;
  assign LOCKSTEP_Master_Out[2527] = \<const0> ;
  assign LOCKSTEP_Master_Out[2528] = \<const0> ;
  assign LOCKSTEP_Master_Out[2529] = \<const0> ;
  assign LOCKSTEP_Master_Out[2530] = \<const0> ;
  assign LOCKSTEP_Master_Out[2531] = \<const0> ;
  assign LOCKSTEP_Master_Out[2532] = \<const0> ;
  assign LOCKSTEP_Master_Out[2533] = \<const0> ;
  assign LOCKSTEP_Master_Out[2534] = \<const0> ;
  assign LOCKSTEP_Master_Out[2535] = \<const0> ;
  assign LOCKSTEP_Master_Out[2536] = \<const0> ;
  assign LOCKSTEP_Master_Out[2537] = \<const0> ;
  assign LOCKSTEP_Master_Out[2538] = \<const0> ;
  assign LOCKSTEP_Master_Out[2539] = \<const0> ;
  assign LOCKSTEP_Master_Out[2540] = \<const0> ;
  assign LOCKSTEP_Master_Out[2541] = \<const0> ;
  assign LOCKSTEP_Master_Out[2542] = \<const0> ;
  assign LOCKSTEP_Master_Out[2543] = \<const0> ;
  assign LOCKSTEP_Master_Out[2544] = \<const0> ;
  assign LOCKSTEP_Master_Out[2545] = \<const0> ;
  assign LOCKSTEP_Master_Out[2546] = \<const0> ;
  assign LOCKSTEP_Master_Out[2547] = \<const0> ;
  assign LOCKSTEP_Master_Out[2548] = \<const0> ;
  assign LOCKSTEP_Master_Out[2549] = \<const0> ;
  assign LOCKSTEP_Master_Out[2550] = \<const0> ;
  assign LOCKSTEP_Master_Out[2551] = \<const0> ;
  assign LOCKSTEP_Master_Out[2552] = \<const0> ;
  assign LOCKSTEP_Master_Out[2553] = \<const0> ;
  assign LOCKSTEP_Master_Out[2554] = \<const0> ;
  assign LOCKSTEP_Master_Out[2555] = \<const0> ;
  assign LOCKSTEP_Master_Out[2556] = \<const0> ;
  assign LOCKSTEP_Master_Out[2557] = \<const0> ;
  assign LOCKSTEP_Master_Out[2558] = \<const0> ;
  assign LOCKSTEP_Master_Out[2559] = \<const0> ;
  assign LOCKSTEP_Master_Out[2560] = \<const0> ;
  assign LOCKSTEP_Master_Out[2561] = \<const0> ;
  assign LOCKSTEP_Master_Out[2562] = \<const0> ;
  assign LOCKSTEP_Master_Out[2563] = \<const0> ;
  assign LOCKSTEP_Master_Out[2564] = \<const0> ;
  assign LOCKSTEP_Master_Out[2565] = \<const0> ;
  assign LOCKSTEP_Master_Out[2566] = \<const0> ;
  assign LOCKSTEP_Master_Out[2567] = \<const0> ;
  assign LOCKSTEP_Master_Out[2568] = \<const0> ;
  assign LOCKSTEP_Master_Out[2569] = \<const0> ;
  assign LOCKSTEP_Master_Out[2570] = \<const0> ;
  assign LOCKSTEP_Master_Out[2571] = \<const0> ;
  assign LOCKSTEP_Master_Out[2572] = \<const0> ;
  assign LOCKSTEP_Master_Out[2573] = \<const0> ;
  assign LOCKSTEP_Master_Out[2574] = \<const0> ;
  assign LOCKSTEP_Master_Out[2575] = \<const0> ;
  assign LOCKSTEP_Master_Out[2576] = \<const0> ;
  assign LOCKSTEP_Master_Out[2577] = \<const0> ;
  assign LOCKSTEP_Master_Out[2578] = \<const0> ;
  assign LOCKSTEP_Master_Out[2579] = \<const0> ;
  assign LOCKSTEP_Master_Out[2580] = \<const0> ;
  assign LOCKSTEP_Master_Out[2581] = \<const0> ;
  assign LOCKSTEP_Master_Out[2582] = \<const0> ;
  assign LOCKSTEP_Master_Out[2583] = \<const0> ;
  assign LOCKSTEP_Master_Out[2584] = \<const0> ;
  assign LOCKSTEP_Master_Out[2585] = \<const0> ;
  assign LOCKSTEP_Master_Out[2586] = \<const0> ;
  assign LOCKSTEP_Master_Out[2587] = \<const0> ;
  assign LOCKSTEP_Master_Out[2588] = \<const0> ;
  assign LOCKSTEP_Master_Out[2589] = \<const0> ;
  assign LOCKSTEP_Master_Out[2590] = \<const0> ;
  assign LOCKSTEP_Master_Out[2591] = \<const0> ;
  assign LOCKSTEP_Master_Out[2592] = \<const0> ;
  assign LOCKSTEP_Master_Out[2593] = \<const0> ;
  assign LOCKSTEP_Master_Out[2594] = \<const0> ;
  assign LOCKSTEP_Master_Out[2595] = \<const0> ;
  assign LOCKSTEP_Master_Out[2596] = \<const0> ;
  assign LOCKSTEP_Master_Out[2597] = \<const0> ;
  assign LOCKSTEP_Master_Out[2598] = \<const0> ;
  assign LOCKSTEP_Master_Out[2599] = \<const0> ;
  assign LOCKSTEP_Master_Out[2600] = \<const0> ;
  assign LOCKSTEP_Master_Out[2601] = \<const0> ;
  assign LOCKSTEP_Master_Out[2602] = \<const0> ;
  assign LOCKSTEP_Master_Out[2603] = \<const0> ;
  assign LOCKSTEP_Master_Out[2604] = \<const0> ;
  assign LOCKSTEP_Master_Out[2605] = \<const0> ;
  assign LOCKSTEP_Master_Out[2606] = \<const0> ;
  assign LOCKSTEP_Master_Out[2607] = \<const0> ;
  assign LOCKSTEP_Master_Out[2608] = \<const0> ;
  assign LOCKSTEP_Master_Out[2609] = \<const0> ;
  assign LOCKSTEP_Master_Out[2610] = \<const0> ;
  assign LOCKSTEP_Master_Out[2611] = \<const0> ;
  assign LOCKSTEP_Master_Out[2612] = \<const0> ;
  assign LOCKSTEP_Master_Out[2613] = \<const0> ;
  assign LOCKSTEP_Master_Out[2614] = \<const0> ;
  assign LOCKSTEP_Master_Out[2615] = \<const0> ;
  assign LOCKSTEP_Master_Out[2616] = \<const0> ;
  assign LOCKSTEP_Master_Out[2617] = \<const0> ;
  assign LOCKSTEP_Master_Out[2618] = \<const0> ;
  assign LOCKSTEP_Master_Out[2619] = \<const0> ;
  assign LOCKSTEP_Master_Out[2620] = \<const0> ;
  assign LOCKSTEP_Master_Out[2621] = \<const0> ;
  assign LOCKSTEP_Master_Out[2622] = \<const0> ;
  assign LOCKSTEP_Master_Out[2623] = \<const0> ;
  assign LOCKSTEP_Master_Out[2624] = \<const0> ;
  assign LOCKSTEP_Master_Out[2625] = \<const0> ;
  assign LOCKSTEP_Master_Out[2626] = \<const0> ;
  assign LOCKSTEP_Master_Out[2627] = \<const0> ;
  assign LOCKSTEP_Master_Out[2628] = \<const0> ;
  assign LOCKSTEP_Master_Out[2629] = \<const0> ;
  assign LOCKSTEP_Master_Out[2630] = \<const0> ;
  assign LOCKSTEP_Master_Out[2631] = \<const0> ;
  assign LOCKSTEP_Master_Out[2632] = \<const0> ;
  assign LOCKSTEP_Master_Out[2633] = \<const0> ;
  assign LOCKSTEP_Master_Out[2634] = \<const0> ;
  assign LOCKSTEP_Master_Out[2635] = \<const0> ;
  assign LOCKSTEP_Master_Out[2636] = \<const0> ;
  assign LOCKSTEP_Master_Out[2637] = \<const0> ;
  assign LOCKSTEP_Master_Out[2638] = \<const0> ;
  assign LOCKSTEP_Master_Out[2639] = \<const0> ;
  assign LOCKSTEP_Master_Out[2640] = \<const0> ;
  assign LOCKSTEP_Master_Out[2641] = \<const0> ;
  assign LOCKSTEP_Master_Out[2642] = \<const0> ;
  assign LOCKSTEP_Master_Out[2643] = \<const0> ;
  assign LOCKSTEP_Master_Out[2644] = \<const0> ;
  assign LOCKSTEP_Master_Out[2645] = \<const0> ;
  assign LOCKSTEP_Master_Out[2646] = \<const0> ;
  assign LOCKSTEP_Master_Out[2647] = \<const0> ;
  assign LOCKSTEP_Master_Out[2648] = \<const0> ;
  assign LOCKSTEP_Master_Out[2649] = \<const0> ;
  assign LOCKSTEP_Master_Out[2650] = \<const0> ;
  assign LOCKSTEP_Master_Out[2651] = \<const0> ;
  assign LOCKSTEP_Master_Out[2652] = \<const0> ;
  assign LOCKSTEP_Master_Out[2653] = \<const0> ;
  assign LOCKSTEP_Master_Out[2654] = \<const0> ;
  assign LOCKSTEP_Master_Out[2655] = \<const0> ;
  assign LOCKSTEP_Master_Out[2656] = \<const0> ;
  assign LOCKSTEP_Master_Out[2657] = \<const0> ;
  assign LOCKSTEP_Master_Out[2658] = \<const0> ;
  assign LOCKSTEP_Master_Out[2659] = \<const0> ;
  assign LOCKSTEP_Master_Out[2660] = \<const0> ;
  assign LOCKSTEP_Master_Out[2661] = \<const0> ;
  assign LOCKSTEP_Master_Out[2662] = \<const0> ;
  assign LOCKSTEP_Master_Out[2663] = \<const0> ;
  assign LOCKSTEP_Master_Out[2664] = \<const0> ;
  assign LOCKSTEP_Master_Out[2665] = \<const0> ;
  assign LOCKSTEP_Master_Out[2666] = \<const0> ;
  assign LOCKSTEP_Master_Out[2667] = \<const0> ;
  assign LOCKSTEP_Master_Out[2668] = \<const0> ;
  assign LOCKSTEP_Master_Out[2669] = \<const0> ;
  assign LOCKSTEP_Master_Out[2670] = \<const0> ;
  assign LOCKSTEP_Master_Out[2671] = \<const0> ;
  assign LOCKSTEP_Master_Out[2672] = \<const0> ;
  assign LOCKSTEP_Master_Out[2673] = \<const0> ;
  assign LOCKSTEP_Master_Out[2674] = \<const0> ;
  assign LOCKSTEP_Master_Out[2675] = \<const0> ;
  assign LOCKSTEP_Master_Out[2676] = \<const0> ;
  assign LOCKSTEP_Master_Out[2677] = \<const0> ;
  assign LOCKSTEP_Master_Out[2678] = \<const0> ;
  assign LOCKSTEP_Master_Out[2679] = \<const0> ;
  assign LOCKSTEP_Master_Out[2680] = \<const0> ;
  assign LOCKSTEP_Master_Out[2681] = \<const0> ;
  assign LOCKSTEP_Master_Out[2682] = \<const0> ;
  assign LOCKSTEP_Master_Out[2683] = \<const0> ;
  assign LOCKSTEP_Master_Out[2684] = \<const0> ;
  assign LOCKSTEP_Master_Out[2685] = \<const0> ;
  assign LOCKSTEP_Master_Out[2686] = \<const0> ;
  assign LOCKSTEP_Master_Out[2687] = \<const0> ;
  assign LOCKSTEP_Master_Out[2688] = \<const0> ;
  assign LOCKSTEP_Master_Out[2689] = \<const0> ;
  assign LOCKSTEP_Master_Out[2690] = \<const0> ;
  assign LOCKSTEP_Master_Out[2691] = \<const0> ;
  assign LOCKSTEP_Master_Out[2692] = \<const0> ;
  assign LOCKSTEP_Master_Out[2693] = \<const0> ;
  assign LOCKSTEP_Master_Out[2694] = \<const0> ;
  assign LOCKSTEP_Master_Out[2695] = \<const0> ;
  assign LOCKSTEP_Master_Out[2696] = \<const0> ;
  assign LOCKSTEP_Master_Out[2697] = \<const0> ;
  assign LOCKSTEP_Master_Out[2698] = \<const0> ;
  assign LOCKSTEP_Master_Out[2699] = \<const0> ;
  assign LOCKSTEP_Master_Out[2700] = \<const0> ;
  assign LOCKSTEP_Master_Out[2701] = \<const0> ;
  assign LOCKSTEP_Master_Out[2702] = \<const0> ;
  assign LOCKSTEP_Master_Out[2703] = \<const0> ;
  assign LOCKSTEP_Master_Out[2704] = \<const0> ;
  assign LOCKSTEP_Master_Out[2705] = \<const0> ;
  assign LOCKSTEP_Master_Out[2706] = \<const0> ;
  assign LOCKSTEP_Master_Out[2707] = \<const0> ;
  assign LOCKSTEP_Master_Out[2708] = \<const0> ;
  assign LOCKSTEP_Master_Out[2709] = \<const0> ;
  assign LOCKSTEP_Master_Out[2710] = \<const0> ;
  assign LOCKSTEP_Master_Out[2711] = \<const0> ;
  assign LOCKSTEP_Master_Out[2712] = \<const0> ;
  assign LOCKSTEP_Master_Out[2713] = \<const0> ;
  assign LOCKSTEP_Master_Out[2714] = \<const0> ;
  assign LOCKSTEP_Master_Out[2715] = \<const0> ;
  assign LOCKSTEP_Master_Out[2716] = \<const0> ;
  assign LOCKSTEP_Master_Out[2717] = \<const0> ;
  assign LOCKSTEP_Master_Out[2718] = \<const0> ;
  assign LOCKSTEP_Master_Out[2719] = \<const0> ;
  assign LOCKSTEP_Master_Out[2720] = \<const0> ;
  assign LOCKSTEP_Master_Out[2721] = \<const0> ;
  assign LOCKSTEP_Master_Out[2722] = \<const0> ;
  assign LOCKSTEP_Master_Out[2723] = \<const0> ;
  assign LOCKSTEP_Master_Out[2724] = \<const0> ;
  assign LOCKSTEP_Master_Out[2725] = \<const0> ;
  assign LOCKSTEP_Master_Out[2726] = \<const0> ;
  assign LOCKSTEP_Master_Out[2727] = \<const0> ;
  assign LOCKSTEP_Master_Out[2728] = \<const0> ;
  assign LOCKSTEP_Master_Out[2729] = \<const0> ;
  assign LOCKSTEP_Master_Out[2730] = \<const0> ;
  assign LOCKSTEP_Master_Out[2731] = \<const0> ;
  assign LOCKSTEP_Master_Out[2732] = \<const0> ;
  assign LOCKSTEP_Master_Out[2733] = \<const0> ;
  assign LOCKSTEP_Master_Out[2734] = \<const0> ;
  assign LOCKSTEP_Master_Out[2735] = \<const0> ;
  assign LOCKSTEP_Master_Out[2736] = \<const0> ;
  assign LOCKSTEP_Master_Out[2737] = \<const0> ;
  assign LOCKSTEP_Master_Out[2738] = \<const0> ;
  assign LOCKSTEP_Master_Out[2739] = \<const0> ;
  assign LOCKSTEP_Master_Out[2740] = \<const0> ;
  assign LOCKSTEP_Master_Out[2741] = \<const0> ;
  assign LOCKSTEP_Master_Out[2742] = \<const0> ;
  assign LOCKSTEP_Master_Out[2743] = \<const0> ;
  assign LOCKSTEP_Master_Out[2744] = \<const0> ;
  assign LOCKSTEP_Master_Out[2745] = \<const0> ;
  assign LOCKSTEP_Master_Out[2746] = \<const0> ;
  assign LOCKSTEP_Master_Out[2747] = \<const0> ;
  assign LOCKSTEP_Master_Out[2748] = \<const0> ;
  assign LOCKSTEP_Master_Out[2749] = \<const0> ;
  assign LOCKSTEP_Master_Out[2750] = \<const0> ;
  assign LOCKSTEP_Master_Out[2751] = \<const0> ;
  assign LOCKSTEP_Master_Out[2752] = \<const0> ;
  assign LOCKSTEP_Master_Out[2753] = \<const0> ;
  assign LOCKSTEP_Master_Out[2754] = \<const0> ;
  assign LOCKSTEP_Master_Out[2755] = \<const0> ;
  assign LOCKSTEP_Master_Out[2756] = \<const0> ;
  assign LOCKSTEP_Master_Out[2757] = \<const0> ;
  assign LOCKSTEP_Master_Out[2758] = \<const0> ;
  assign LOCKSTEP_Master_Out[2759] = \<const0> ;
  assign LOCKSTEP_Master_Out[2760] = \<const0> ;
  assign LOCKSTEP_Master_Out[2761] = \<const0> ;
  assign LOCKSTEP_Master_Out[2762] = \<const0> ;
  assign LOCKSTEP_Master_Out[2763] = \<const0> ;
  assign LOCKSTEP_Master_Out[2764] = \<const0> ;
  assign LOCKSTEP_Master_Out[2765] = \<const0> ;
  assign LOCKSTEP_Master_Out[2766] = \<const0> ;
  assign LOCKSTEP_Master_Out[2767] = \<const0> ;
  assign LOCKSTEP_Master_Out[2768] = \<const0> ;
  assign LOCKSTEP_Master_Out[2769] = \<const0> ;
  assign LOCKSTEP_Master_Out[2770] = \<const0> ;
  assign LOCKSTEP_Master_Out[2771] = \<const0> ;
  assign LOCKSTEP_Master_Out[2772] = \<const0> ;
  assign LOCKSTEP_Master_Out[2773] = \<const0> ;
  assign LOCKSTEP_Master_Out[2774] = \<const0> ;
  assign LOCKSTEP_Master_Out[2775] = \<const0> ;
  assign LOCKSTEP_Master_Out[2776] = \<const0> ;
  assign LOCKSTEP_Master_Out[2777] = \<const0> ;
  assign LOCKSTEP_Master_Out[2778] = \<const0> ;
  assign LOCKSTEP_Master_Out[2779] = \<const0> ;
  assign LOCKSTEP_Master_Out[2780] = \<const0> ;
  assign LOCKSTEP_Master_Out[2781] = \<const0> ;
  assign LOCKSTEP_Master_Out[2782] = \<const0> ;
  assign LOCKSTEP_Master_Out[2783] = \<const0> ;
  assign LOCKSTEP_Master_Out[2784] = \<const0> ;
  assign LOCKSTEP_Master_Out[2785] = \<const0> ;
  assign LOCKSTEP_Master_Out[2786] = \<const0> ;
  assign LOCKSTEP_Master_Out[2787] = \<const0> ;
  assign LOCKSTEP_Master_Out[2788] = \<const0> ;
  assign LOCKSTEP_Master_Out[2789] = \<const0> ;
  assign LOCKSTEP_Master_Out[2790] = \<const0> ;
  assign LOCKSTEP_Master_Out[2791] = \<const0> ;
  assign LOCKSTEP_Master_Out[2792] = \<const0> ;
  assign LOCKSTEP_Master_Out[2793] = \<const0> ;
  assign LOCKSTEP_Master_Out[2794] = \<const0> ;
  assign LOCKSTEP_Master_Out[2795] = \<const0> ;
  assign LOCKSTEP_Master_Out[2796] = \<const0> ;
  assign LOCKSTEP_Master_Out[2797] = \<const0> ;
  assign LOCKSTEP_Master_Out[2798] = \<const0> ;
  assign LOCKSTEP_Master_Out[2799] = \<const0> ;
  assign LOCKSTEP_Master_Out[2800] = \<const0> ;
  assign LOCKSTEP_Master_Out[2801] = \<const0> ;
  assign LOCKSTEP_Master_Out[2802] = \<const0> ;
  assign LOCKSTEP_Master_Out[2803] = \<const0> ;
  assign LOCKSTEP_Master_Out[2804] = \<const0> ;
  assign LOCKSTEP_Master_Out[2805] = \<const0> ;
  assign LOCKSTEP_Master_Out[2806] = \<const0> ;
  assign LOCKSTEP_Master_Out[2807] = \<const0> ;
  assign LOCKSTEP_Master_Out[2808] = \<const0> ;
  assign LOCKSTEP_Master_Out[2809] = \<const0> ;
  assign LOCKSTEP_Master_Out[2810] = \<const0> ;
  assign LOCKSTEP_Master_Out[2811] = \<const0> ;
  assign LOCKSTEP_Master_Out[2812] = \<const0> ;
  assign LOCKSTEP_Master_Out[2813] = \<const0> ;
  assign LOCKSTEP_Master_Out[2814] = \<const0> ;
  assign LOCKSTEP_Master_Out[2815] = \<const0> ;
  assign LOCKSTEP_Master_Out[2816] = \<const0> ;
  assign LOCKSTEP_Master_Out[2817] = \<const0> ;
  assign LOCKSTEP_Master_Out[2818] = \<const0> ;
  assign LOCKSTEP_Master_Out[2819] = \<const0> ;
  assign LOCKSTEP_Master_Out[2820] = \<const0> ;
  assign LOCKSTEP_Master_Out[2821] = \<const0> ;
  assign LOCKSTEP_Master_Out[2822] = \<const0> ;
  assign LOCKSTEP_Master_Out[2823] = \<const0> ;
  assign LOCKSTEP_Master_Out[2824] = \<const0> ;
  assign LOCKSTEP_Master_Out[2825] = \<const0> ;
  assign LOCKSTEP_Master_Out[2826] = \<const0> ;
  assign LOCKSTEP_Master_Out[2827] = \<const0> ;
  assign LOCKSTEP_Master_Out[2828] = \<const0> ;
  assign LOCKSTEP_Master_Out[2829] = \<const0> ;
  assign LOCKSTEP_Master_Out[2830] = \<const0> ;
  assign LOCKSTEP_Master_Out[2831] = \<const0> ;
  assign LOCKSTEP_Master_Out[2832] = \<const0> ;
  assign LOCKSTEP_Master_Out[2833] = \<const0> ;
  assign LOCKSTEP_Master_Out[2834] = \<const0> ;
  assign LOCKSTEP_Master_Out[2835] = \<const0> ;
  assign LOCKSTEP_Master_Out[2836] = \<const0> ;
  assign LOCKSTEP_Master_Out[2837] = \<const0> ;
  assign LOCKSTEP_Master_Out[2838] = \<const0> ;
  assign LOCKSTEP_Master_Out[2839] = \<const0> ;
  assign LOCKSTEP_Master_Out[2840] = \<const0> ;
  assign LOCKSTEP_Master_Out[2841] = \<const0> ;
  assign LOCKSTEP_Master_Out[2842] = \<const0> ;
  assign LOCKSTEP_Master_Out[2843] = \<const0> ;
  assign LOCKSTEP_Master_Out[2844] = \<const0> ;
  assign LOCKSTEP_Master_Out[2845] = \<const0> ;
  assign LOCKSTEP_Master_Out[2846] = \<const0> ;
  assign LOCKSTEP_Master_Out[2847] = \<const0> ;
  assign LOCKSTEP_Master_Out[2848] = \<const0> ;
  assign LOCKSTEP_Master_Out[2849] = \<const0> ;
  assign LOCKSTEP_Master_Out[2850] = \<const0> ;
  assign LOCKSTEP_Master_Out[2851] = \<const0> ;
  assign LOCKSTEP_Master_Out[2852] = \<const0> ;
  assign LOCKSTEP_Master_Out[2853] = \<const0> ;
  assign LOCKSTEP_Master_Out[2854] = \<const0> ;
  assign LOCKSTEP_Master_Out[2855] = \<const0> ;
  assign LOCKSTEP_Master_Out[2856] = \<const0> ;
  assign LOCKSTEP_Master_Out[2857] = \<const0> ;
  assign LOCKSTEP_Master_Out[2858] = \<const0> ;
  assign LOCKSTEP_Master_Out[2859] = \<const0> ;
  assign LOCKSTEP_Master_Out[2860] = \<const0> ;
  assign LOCKSTEP_Master_Out[2861] = \<const0> ;
  assign LOCKSTEP_Master_Out[2862] = \<const0> ;
  assign LOCKSTEP_Master_Out[2863] = \<const0> ;
  assign LOCKSTEP_Master_Out[2864] = \<const0> ;
  assign LOCKSTEP_Master_Out[2865] = \<const0> ;
  assign LOCKSTEP_Master_Out[2866] = \<const0> ;
  assign LOCKSTEP_Master_Out[2867] = \<const0> ;
  assign LOCKSTEP_Master_Out[2868] = \<const0> ;
  assign LOCKSTEP_Master_Out[2869] = \<const0> ;
  assign LOCKSTEP_Master_Out[2870] = \<const0> ;
  assign LOCKSTEP_Master_Out[2871] = \<const0> ;
  assign LOCKSTEP_Master_Out[2872] = \<const0> ;
  assign LOCKSTEP_Master_Out[2873] = \<const0> ;
  assign LOCKSTEP_Master_Out[2874] = \<const0> ;
  assign LOCKSTEP_Master_Out[2875] = \<const0> ;
  assign LOCKSTEP_Master_Out[2876] = \<const0> ;
  assign LOCKSTEP_Master_Out[2877] = \<const0> ;
  assign LOCKSTEP_Master_Out[2878] = \<const0> ;
  assign LOCKSTEP_Master_Out[2879] = \<const0> ;
  assign LOCKSTEP_Master_Out[2880] = \<const0> ;
  assign LOCKSTEP_Master_Out[2881] = \<const0> ;
  assign LOCKSTEP_Master_Out[2882] = \<const0> ;
  assign LOCKSTEP_Master_Out[2883] = \<const0> ;
  assign LOCKSTEP_Master_Out[2884] = \<const0> ;
  assign LOCKSTEP_Master_Out[2885] = \<const0> ;
  assign LOCKSTEP_Master_Out[2886] = \<const0> ;
  assign LOCKSTEP_Master_Out[2887] = \<const0> ;
  assign LOCKSTEP_Master_Out[2888] = \<const0> ;
  assign LOCKSTEP_Master_Out[2889] = \<const0> ;
  assign LOCKSTEP_Master_Out[2890] = \<const0> ;
  assign LOCKSTEP_Master_Out[2891] = \<const0> ;
  assign LOCKSTEP_Master_Out[2892] = \<const0> ;
  assign LOCKSTEP_Master_Out[2893] = \<const0> ;
  assign LOCKSTEP_Master_Out[2894] = \<const0> ;
  assign LOCKSTEP_Master_Out[2895] = \<const0> ;
  assign LOCKSTEP_Master_Out[2896] = \<const0> ;
  assign LOCKSTEP_Master_Out[2897] = \<const0> ;
  assign LOCKSTEP_Master_Out[2898] = \<const0> ;
  assign LOCKSTEP_Master_Out[2899] = \<const0> ;
  assign LOCKSTEP_Master_Out[2900] = \<const0> ;
  assign LOCKSTEP_Master_Out[2901] = \<const0> ;
  assign LOCKSTEP_Master_Out[2902] = \<const0> ;
  assign LOCKSTEP_Master_Out[2903] = \<const0> ;
  assign LOCKSTEP_Master_Out[2904] = \<const0> ;
  assign LOCKSTEP_Master_Out[2905] = \<const0> ;
  assign LOCKSTEP_Master_Out[2906] = \<const0> ;
  assign LOCKSTEP_Master_Out[2907] = \<const0> ;
  assign LOCKSTEP_Master_Out[2908] = \<const0> ;
  assign LOCKSTEP_Master_Out[2909] = \<const0> ;
  assign LOCKSTEP_Master_Out[2910] = \<const0> ;
  assign LOCKSTEP_Master_Out[2911] = \<const0> ;
  assign LOCKSTEP_Master_Out[2912] = \<const0> ;
  assign LOCKSTEP_Master_Out[2913] = \<const0> ;
  assign LOCKSTEP_Master_Out[2914] = \<const0> ;
  assign LOCKSTEP_Master_Out[2915] = \<const0> ;
  assign LOCKSTEP_Master_Out[2916] = \<const0> ;
  assign LOCKSTEP_Master_Out[2917] = \<const0> ;
  assign LOCKSTEP_Master_Out[2918] = \<const0> ;
  assign LOCKSTEP_Master_Out[2919] = \<const0> ;
  assign LOCKSTEP_Master_Out[2920] = \<const0> ;
  assign LOCKSTEP_Master_Out[2921] = \<const0> ;
  assign LOCKSTEP_Master_Out[2922] = \<const0> ;
  assign LOCKSTEP_Master_Out[2923] = \<const0> ;
  assign LOCKSTEP_Master_Out[2924] = \<const0> ;
  assign LOCKSTEP_Master_Out[2925] = \<const0> ;
  assign LOCKSTEP_Master_Out[2926] = \<const0> ;
  assign LOCKSTEP_Master_Out[2927] = \<const0> ;
  assign LOCKSTEP_Master_Out[2928] = \<const0> ;
  assign LOCKSTEP_Master_Out[2929] = \<const0> ;
  assign LOCKSTEP_Master_Out[2930] = \<const0> ;
  assign LOCKSTEP_Master_Out[2931] = \<const0> ;
  assign LOCKSTEP_Master_Out[2932] = \<const0> ;
  assign LOCKSTEP_Master_Out[2933] = \<const0> ;
  assign LOCKSTEP_Master_Out[2934] = \<const0> ;
  assign LOCKSTEP_Master_Out[2935] = \<const0> ;
  assign LOCKSTEP_Master_Out[2936] = \<const0> ;
  assign LOCKSTEP_Master_Out[2937] = \<const0> ;
  assign LOCKSTEP_Master_Out[2938] = \<const0> ;
  assign LOCKSTEP_Master_Out[2939] = \<const0> ;
  assign LOCKSTEP_Master_Out[2940] = \<const0> ;
  assign LOCKSTEP_Master_Out[2941] = \<const0> ;
  assign LOCKSTEP_Master_Out[2942] = \<const0> ;
  assign LOCKSTEP_Master_Out[2943] = \<const0> ;
  assign LOCKSTEP_Master_Out[2944] = \<const0> ;
  assign LOCKSTEP_Master_Out[2945] = \<const0> ;
  assign LOCKSTEP_Master_Out[2946] = \<const0> ;
  assign LOCKSTEP_Master_Out[2947] = \<const0> ;
  assign LOCKSTEP_Master_Out[2948] = \<const0> ;
  assign LOCKSTEP_Master_Out[2949] = \<const0> ;
  assign LOCKSTEP_Master_Out[2950] = \<const0> ;
  assign LOCKSTEP_Master_Out[2951] = \<const0> ;
  assign LOCKSTEP_Master_Out[2952] = \<const0> ;
  assign LOCKSTEP_Master_Out[2953] = \<const0> ;
  assign LOCKSTEP_Master_Out[2954] = \<const0> ;
  assign LOCKSTEP_Master_Out[2955] = \<const0> ;
  assign LOCKSTEP_Master_Out[2956] = \<const0> ;
  assign LOCKSTEP_Master_Out[2957] = \<const0> ;
  assign LOCKSTEP_Master_Out[2958] = \<const0> ;
  assign LOCKSTEP_Master_Out[2959] = \<const0> ;
  assign LOCKSTEP_Master_Out[2960] = \<const0> ;
  assign LOCKSTEP_Master_Out[2961] = \<const0> ;
  assign LOCKSTEP_Master_Out[2962] = \<const0> ;
  assign LOCKSTEP_Master_Out[2963] = \<const0> ;
  assign LOCKSTEP_Master_Out[2964] = \<const0> ;
  assign LOCKSTEP_Master_Out[2965] = \<const0> ;
  assign LOCKSTEP_Master_Out[2966] = \<const0> ;
  assign LOCKSTEP_Master_Out[2967] = \<const0> ;
  assign LOCKSTEP_Master_Out[2968] = \<const0> ;
  assign LOCKSTEP_Master_Out[2969] = \<const0> ;
  assign LOCKSTEP_Master_Out[2970] = \<const0> ;
  assign LOCKSTEP_Master_Out[2971] = \<const0> ;
  assign LOCKSTEP_Master_Out[2972] = \<const0> ;
  assign LOCKSTEP_Master_Out[2973] = \<const0> ;
  assign LOCKSTEP_Master_Out[2974] = \<const0> ;
  assign LOCKSTEP_Master_Out[2975] = \<const0> ;
  assign LOCKSTEP_Master_Out[2976] = \<const0> ;
  assign LOCKSTEP_Master_Out[2977] = \<const0> ;
  assign LOCKSTEP_Master_Out[2978] = \<const0> ;
  assign LOCKSTEP_Master_Out[2979] = \<const0> ;
  assign LOCKSTEP_Master_Out[2980] = \<const0> ;
  assign LOCKSTEP_Master_Out[2981] = \<const0> ;
  assign LOCKSTEP_Master_Out[2982] = \<const0> ;
  assign LOCKSTEP_Master_Out[2983] = \<const0> ;
  assign LOCKSTEP_Master_Out[2984] = \<const0> ;
  assign LOCKSTEP_Master_Out[2985] = \<const0> ;
  assign LOCKSTEP_Master_Out[2986] = \<const0> ;
  assign LOCKSTEP_Master_Out[2987] = \<const0> ;
  assign LOCKSTEP_Master_Out[2988] = \<const0> ;
  assign LOCKSTEP_Master_Out[2989] = \<const0> ;
  assign LOCKSTEP_Master_Out[2990] = \<const0> ;
  assign LOCKSTEP_Master_Out[2991] = \<const0> ;
  assign LOCKSTEP_Master_Out[2992] = \<const0> ;
  assign LOCKSTEP_Master_Out[2993] = \<const0> ;
  assign LOCKSTEP_Master_Out[2994] = \<const0> ;
  assign LOCKSTEP_Master_Out[2995] = \<const0> ;
  assign LOCKSTEP_Master_Out[2996] = \<const0> ;
  assign LOCKSTEP_Master_Out[2997] = \<const0> ;
  assign LOCKSTEP_Master_Out[2998] = \<const0> ;
  assign LOCKSTEP_Master_Out[2999] = \<const0> ;
  assign LOCKSTEP_Master_Out[3000] = \<const0> ;
  assign LOCKSTEP_Master_Out[3001] = \<const0> ;
  assign LOCKSTEP_Master_Out[3002] = \<const0> ;
  assign LOCKSTEP_Master_Out[3003] = \<const0> ;
  assign LOCKSTEP_Master_Out[3004] = \<const0> ;
  assign LOCKSTEP_Master_Out[3005] = \<const0> ;
  assign LOCKSTEP_Master_Out[3006] = \<const0> ;
  assign LOCKSTEP_Master_Out[3007] = \<const0> ;
  assign LOCKSTEP_Master_Out[3008] = \<const0> ;
  assign LOCKSTEP_Master_Out[3009] = \<const0> ;
  assign LOCKSTEP_Master_Out[3010] = \<const0> ;
  assign LOCKSTEP_Master_Out[3011] = \<const0> ;
  assign LOCKSTEP_Master_Out[3012] = \<const0> ;
  assign LOCKSTEP_Master_Out[3013] = \<const0> ;
  assign LOCKSTEP_Master_Out[3014] = \<const0> ;
  assign LOCKSTEP_Master_Out[3015] = \<const0> ;
  assign LOCKSTEP_Master_Out[3016] = \<const0> ;
  assign LOCKSTEP_Master_Out[3017] = \<const0> ;
  assign LOCKSTEP_Master_Out[3018] = \<const0> ;
  assign LOCKSTEP_Master_Out[3019] = \<const0> ;
  assign LOCKSTEP_Master_Out[3020] = \<const0> ;
  assign LOCKSTEP_Master_Out[3021] = \<const0> ;
  assign LOCKSTEP_Master_Out[3022] = \<const0> ;
  assign LOCKSTEP_Master_Out[3023] = \<const0> ;
  assign LOCKSTEP_Master_Out[3024] = \<const0> ;
  assign LOCKSTEP_Master_Out[3025] = \<const0> ;
  assign LOCKSTEP_Master_Out[3026] = \<const0> ;
  assign LOCKSTEP_Master_Out[3027] = \<const0> ;
  assign LOCKSTEP_Master_Out[3028] = \<const0> ;
  assign LOCKSTEP_Master_Out[3029] = \<const0> ;
  assign LOCKSTEP_Master_Out[3030] = \<const0> ;
  assign LOCKSTEP_Master_Out[3031] = \<const0> ;
  assign LOCKSTEP_Master_Out[3032] = \<const0> ;
  assign LOCKSTEP_Master_Out[3033] = \<const0> ;
  assign LOCKSTEP_Master_Out[3034] = \<const0> ;
  assign LOCKSTEP_Master_Out[3035] = \<const0> ;
  assign LOCKSTEP_Master_Out[3036] = \<const0> ;
  assign LOCKSTEP_Master_Out[3037] = \<const0> ;
  assign LOCKSTEP_Master_Out[3038] = \<const0> ;
  assign LOCKSTEP_Master_Out[3039] = \<const0> ;
  assign LOCKSTEP_Master_Out[3040] = \<const0> ;
  assign LOCKSTEP_Master_Out[3041] = \<const0> ;
  assign LOCKSTEP_Master_Out[3042] = \<const0> ;
  assign LOCKSTEP_Master_Out[3043] = \<const0> ;
  assign LOCKSTEP_Master_Out[3044] = \<const0> ;
  assign LOCKSTEP_Master_Out[3045] = \<const0> ;
  assign LOCKSTEP_Master_Out[3046] = \<const0> ;
  assign LOCKSTEP_Master_Out[3047] = \<const0> ;
  assign LOCKSTEP_Master_Out[3048] = \<const0> ;
  assign LOCKSTEP_Master_Out[3049] = \<const0> ;
  assign LOCKSTEP_Master_Out[3050] = \<const0> ;
  assign LOCKSTEP_Master_Out[3051] = \<const0> ;
  assign LOCKSTEP_Master_Out[3052] = \<const0> ;
  assign LOCKSTEP_Master_Out[3053] = \<const0> ;
  assign LOCKSTEP_Master_Out[3054] = \<const0> ;
  assign LOCKSTEP_Master_Out[3055] = \<const0> ;
  assign LOCKSTEP_Master_Out[3056] = \<const0> ;
  assign LOCKSTEP_Master_Out[3057] = \<const0> ;
  assign LOCKSTEP_Master_Out[3058] = \<const0> ;
  assign LOCKSTEP_Master_Out[3059] = \<const0> ;
  assign LOCKSTEP_Master_Out[3060] = \<const0> ;
  assign LOCKSTEP_Master_Out[3061] = \<const0> ;
  assign LOCKSTEP_Master_Out[3062] = \<const0> ;
  assign LOCKSTEP_Master_Out[3063] = \<const0> ;
  assign LOCKSTEP_Master_Out[3064] = \<const0> ;
  assign LOCKSTEP_Master_Out[3065] = \<const0> ;
  assign LOCKSTEP_Master_Out[3066] = \<const0> ;
  assign LOCKSTEP_Master_Out[3067] = \<const0> ;
  assign LOCKSTEP_Master_Out[3068] = \<const0> ;
  assign LOCKSTEP_Master_Out[3069] = \<const0> ;
  assign LOCKSTEP_Master_Out[3070] = \<const0> ;
  assign LOCKSTEP_Master_Out[3071] = \<const0> ;
  assign LOCKSTEP_Master_Out[3072] = \<const0> ;
  assign LOCKSTEP_Master_Out[3073] = \<const0> ;
  assign LOCKSTEP_Master_Out[3074] = \<const0> ;
  assign LOCKSTEP_Master_Out[3075] = \<const0> ;
  assign LOCKSTEP_Master_Out[3076] = \<const0> ;
  assign LOCKSTEP_Master_Out[3077] = \<const0> ;
  assign LOCKSTEP_Master_Out[3078] = \<const0> ;
  assign LOCKSTEP_Master_Out[3079] = \<const0> ;
  assign LOCKSTEP_Master_Out[3080] = \<const0> ;
  assign LOCKSTEP_Master_Out[3081] = \<const0> ;
  assign LOCKSTEP_Master_Out[3082] = \<const0> ;
  assign LOCKSTEP_Master_Out[3083] = \<const0> ;
  assign LOCKSTEP_Master_Out[3084] = \<const0> ;
  assign LOCKSTEP_Master_Out[3085] = \<const0> ;
  assign LOCKSTEP_Master_Out[3086] = \<const0> ;
  assign LOCKSTEP_Master_Out[3087] = \<const0> ;
  assign LOCKSTEP_Master_Out[3088] = \<const0> ;
  assign LOCKSTEP_Master_Out[3089] = \<const0> ;
  assign LOCKSTEP_Master_Out[3090] = \<const0> ;
  assign LOCKSTEP_Master_Out[3091] = \<const0> ;
  assign LOCKSTEP_Master_Out[3092] = \<const0> ;
  assign LOCKSTEP_Master_Out[3093] = \<const0> ;
  assign LOCKSTEP_Master_Out[3094] = \<const0> ;
  assign LOCKSTEP_Master_Out[3095] = \<const0> ;
  assign LOCKSTEP_Master_Out[3096] = \<const0> ;
  assign LOCKSTEP_Master_Out[3097] = \<const0> ;
  assign LOCKSTEP_Master_Out[3098] = \<const0> ;
  assign LOCKSTEP_Master_Out[3099] = \<const0> ;
  assign LOCKSTEP_Master_Out[3100] = \<const0> ;
  assign LOCKSTEP_Master_Out[3101] = \<const0> ;
  assign LOCKSTEP_Master_Out[3102] = \<const0> ;
  assign LOCKSTEP_Master_Out[3103] = \<const0> ;
  assign LOCKSTEP_Master_Out[3104] = \<const0> ;
  assign LOCKSTEP_Master_Out[3105] = \<const0> ;
  assign LOCKSTEP_Master_Out[3106] = \<const0> ;
  assign LOCKSTEP_Master_Out[3107] = \<const0> ;
  assign LOCKSTEP_Master_Out[3108] = \<const0> ;
  assign LOCKSTEP_Master_Out[3109] = \<const0> ;
  assign LOCKSTEP_Master_Out[3110] = \<const0> ;
  assign LOCKSTEP_Master_Out[3111] = \<const0> ;
  assign LOCKSTEP_Master_Out[3112] = \<const0> ;
  assign LOCKSTEP_Master_Out[3113] = \<const0> ;
  assign LOCKSTEP_Master_Out[3114] = \<const0> ;
  assign LOCKSTEP_Master_Out[3115] = \<const0> ;
  assign LOCKSTEP_Master_Out[3116] = \<const0> ;
  assign LOCKSTEP_Master_Out[3117] = \<const0> ;
  assign LOCKSTEP_Master_Out[3118] = \<const0> ;
  assign LOCKSTEP_Master_Out[3119] = \<const0> ;
  assign LOCKSTEP_Master_Out[3120] = \<const0> ;
  assign LOCKSTEP_Master_Out[3121] = \<const0> ;
  assign LOCKSTEP_Master_Out[3122] = \<const0> ;
  assign LOCKSTEP_Master_Out[3123] = \<const0> ;
  assign LOCKSTEP_Master_Out[3124] = \<const0> ;
  assign LOCKSTEP_Master_Out[3125] = \<const0> ;
  assign LOCKSTEP_Master_Out[3126] = \<const0> ;
  assign LOCKSTEP_Master_Out[3127] = \<const0> ;
  assign LOCKSTEP_Master_Out[3128] = \<const0> ;
  assign LOCKSTEP_Master_Out[3129] = \<const0> ;
  assign LOCKSTEP_Master_Out[3130] = \<const0> ;
  assign LOCKSTEP_Master_Out[3131] = \<const0> ;
  assign LOCKSTEP_Master_Out[3132] = \<const0> ;
  assign LOCKSTEP_Master_Out[3133] = \<const0> ;
  assign LOCKSTEP_Master_Out[3134] = \<const0> ;
  assign LOCKSTEP_Master_Out[3135] = \<const0> ;
  assign LOCKSTEP_Master_Out[3136] = \<const0> ;
  assign LOCKSTEP_Master_Out[3137] = \<const0> ;
  assign LOCKSTEP_Master_Out[3138] = \<const0> ;
  assign LOCKSTEP_Master_Out[3139] = \<const0> ;
  assign LOCKSTEP_Master_Out[3140] = \<const0> ;
  assign LOCKSTEP_Master_Out[3141] = \<const0> ;
  assign LOCKSTEP_Master_Out[3142] = \<const0> ;
  assign LOCKSTEP_Master_Out[3143] = \<const0> ;
  assign LOCKSTEP_Master_Out[3144] = \<const0> ;
  assign LOCKSTEP_Master_Out[3145] = \<const0> ;
  assign LOCKSTEP_Master_Out[3146] = \<const0> ;
  assign LOCKSTEP_Master_Out[3147] = \<const0> ;
  assign LOCKSTEP_Master_Out[3148] = \<const0> ;
  assign LOCKSTEP_Master_Out[3149] = \<const0> ;
  assign LOCKSTEP_Master_Out[3150] = \<const0> ;
  assign LOCKSTEP_Master_Out[3151] = \<const0> ;
  assign LOCKSTEP_Master_Out[3152] = \<const0> ;
  assign LOCKSTEP_Master_Out[3153] = \<const0> ;
  assign LOCKSTEP_Master_Out[3154] = \<const0> ;
  assign LOCKSTEP_Master_Out[3155] = \<const0> ;
  assign LOCKSTEP_Master_Out[3156] = \<const0> ;
  assign LOCKSTEP_Master_Out[3157] = \<const0> ;
  assign LOCKSTEP_Master_Out[3158] = \<const0> ;
  assign LOCKSTEP_Master_Out[3159] = \<const0> ;
  assign LOCKSTEP_Master_Out[3160] = \<const0> ;
  assign LOCKSTEP_Master_Out[3161] = \<const0> ;
  assign LOCKSTEP_Master_Out[3162] = \<const0> ;
  assign LOCKSTEP_Master_Out[3163] = \<const0> ;
  assign LOCKSTEP_Master_Out[3164] = \<const0> ;
  assign LOCKSTEP_Master_Out[3165] = \<const0> ;
  assign LOCKSTEP_Master_Out[3166] = \<const0> ;
  assign LOCKSTEP_Master_Out[3167] = \<const0> ;
  assign LOCKSTEP_Master_Out[3168] = \<const0> ;
  assign LOCKSTEP_Master_Out[3169] = \<const0> ;
  assign LOCKSTEP_Master_Out[3170] = \<const0> ;
  assign LOCKSTEP_Master_Out[3171] = \<const0> ;
  assign LOCKSTEP_Master_Out[3172] = \<const0> ;
  assign LOCKSTEP_Master_Out[3173] = \<const0> ;
  assign LOCKSTEP_Master_Out[3174] = \<const0> ;
  assign LOCKSTEP_Master_Out[3175] = \<const0> ;
  assign LOCKSTEP_Master_Out[3176] = \<const0> ;
  assign LOCKSTEP_Master_Out[3177] = \<const0> ;
  assign LOCKSTEP_Master_Out[3178] = \<const0> ;
  assign LOCKSTEP_Master_Out[3179] = \<const0> ;
  assign LOCKSTEP_Master_Out[3180] = \<const0> ;
  assign LOCKSTEP_Master_Out[3181] = \<const0> ;
  assign LOCKSTEP_Master_Out[3182] = \<const0> ;
  assign LOCKSTEP_Master_Out[3183] = \<const0> ;
  assign LOCKSTEP_Master_Out[3184] = \<const0> ;
  assign LOCKSTEP_Master_Out[3185] = \<const0> ;
  assign LOCKSTEP_Master_Out[3186] = \<const0> ;
  assign LOCKSTEP_Master_Out[3187] = \<const0> ;
  assign LOCKSTEP_Master_Out[3188] = \<const0> ;
  assign LOCKSTEP_Master_Out[3189] = \<const0> ;
  assign LOCKSTEP_Master_Out[3190] = \<const0> ;
  assign LOCKSTEP_Master_Out[3191] = \<const0> ;
  assign LOCKSTEP_Master_Out[3192] = \<const0> ;
  assign LOCKSTEP_Master_Out[3193] = \<const0> ;
  assign LOCKSTEP_Master_Out[3194] = \<const0> ;
  assign LOCKSTEP_Master_Out[3195] = \<const0> ;
  assign LOCKSTEP_Master_Out[3196] = \<const0> ;
  assign LOCKSTEP_Master_Out[3197] = \<const0> ;
  assign LOCKSTEP_Master_Out[3198] = \<const0> ;
  assign LOCKSTEP_Master_Out[3199] = \<const0> ;
  assign LOCKSTEP_Master_Out[3200] = \<const0> ;
  assign LOCKSTEP_Master_Out[3201] = \<const0> ;
  assign LOCKSTEP_Master_Out[3202] = \<const0> ;
  assign LOCKSTEP_Master_Out[3203] = \<const0> ;
  assign LOCKSTEP_Master_Out[3204] = \<const0> ;
  assign LOCKSTEP_Master_Out[3205] = \<const0> ;
  assign LOCKSTEP_Master_Out[3206] = \<const0> ;
  assign LOCKSTEP_Master_Out[3207] = \<const0> ;
  assign LOCKSTEP_Master_Out[3208] = \<const0> ;
  assign LOCKSTEP_Master_Out[3209] = \<const0> ;
  assign LOCKSTEP_Master_Out[3210] = \<const0> ;
  assign LOCKSTEP_Master_Out[3211] = \<const0> ;
  assign LOCKSTEP_Master_Out[3212] = \<const0> ;
  assign LOCKSTEP_Master_Out[3213] = \<const0> ;
  assign LOCKSTEP_Master_Out[3214] = \<const0> ;
  assign LOCKSTEP_Master_Out[3215] = \<const0> ;
  assign LOCKSTEP_Master_Out[3216] = \<const0> ;
  assign LOCKSTEP_Master_Out[3217] = \<const0> ;
  assign LOCKSTEP_Master_Out[3218] = \<const0> ;
  assign LOCKSTEP_Master_Out[3219] = \<const0> ;
  assign LOCKSTEP_Master_Out[3220] = \<const0> ;
  assign LOCKSTEP_Master_Out[3221] = \<const0> ;
  assign LOCKSTEP_Master_Out[3222] = \<const0> ;
  assign LOCKSTEP_Master_Out[3223] = \<const0> ;
  assign LOCKSTEP_Master_Out[3224] = \<const0> ;
  assign LOCKSTEP_Master_Out[3225] = \<const0> ;
  assign LOCKSTEP_Master_Out[3226] = \<const0> ;
  assign LOCKSTEP_Master_Out[3227] = \<const0> ;
  assign LOCKSTEP_Master_Out[3228] = \<const0> ;
  assign LOCKSTEP_Master_Out[3229] = \<const0> ;
  assign LOCKSTEP_Master_Out[3230] = \<const0> ;
  assign LOCKSTEP_Master_Out[3231] = \<const0> ;
  assign LOCKSTEP_Master_Out[3232] = \<const0> ;
  assign LOCKSTEP_Master_Out[3233] = \<const0> ;
  assign LOCKSTEP_Master_Out[3234] = \<const0> ;
  assign LOCKSTEP_Master_Out[3235] = \<const0> ;
  assign LOCKSTEP_Master_Out[3236] = \<const0> ;
  assign LOCKSTEP_Master_Out[3237] = \<const0> ;
  assign LOCKSTEP_Master_Out[3238] = \<const0> ;
  assign LOCKSTEP_Master_Out[3239] = \<const0> ;
  assign LOCKSTEP_Master_Out[3240] = \<const0> ;
  assign LOCKSTEP_Master_Out[3241] = \<const0> ;
  assign LOCKSTEP_Master_Out[3242] = \<const0> ;
  assign LOCKSTEP_Master_Out[3243] = \<const0> ;
  assign LOCKSTEP_Master_Out[3244] = \<const0> ;
  assign LOCKSTEP_Master_Out[3245] = \<const0> ;
  assign LOCKSTEP_Master_Out[3246] = \<const0> ;
  assign LOCKSTEP_Master_Out[3247] = \<const0> ;
  assign LOCKSTEP_Master_Out[3248] = \<const0> ;
  assign LOCKSTEP_Master_Out[3249] = \<const0> ;
  assign LOCKSTEP_Master_Out[3250] = \<const0> ;
  assign LOCKSTEP_Master_Out[3251] = \<const0> ;
  assign LOCKSTEP_Master_Out[3252] = \<const0> ;
  assign LOCKSTEP_Master_Out[3253] = \<const0> ;
  assign LOCKSTEP_Master_Out[3254] = \<const0> ;
  assign LOCKSTEP_Master_Out[3255] = \<const0> ;
  assign LOCKSTEP_Master_Out[3256] = \<const0> ;
  assign LOCKSTEP_Master_Out[3257] = \<const0> ;
  assign LOCKSTEP_Master_Out[3258] = \<const0> ;
  assign LOCKSTEP_Master_Out[3259] = \<const0> ;
  assign LOCKSTEP_Master_Out[3260] = \<const0> ;
  assign LOCKSTEP_Master_Out[3261] = \<const0> ;
  assign LOCKSTEP_Master_Out[3262] = \<const0> ;
  assign LOCKSTEP_Master_Out[3263] = \<const0> ;
  assign LOCKSTEP_Master_Out[3264] = \<const0> ;
  assign LOCKSTEP_Master_Out[3265] = \<const0> ;
  assign LOCKSTEP_Master_Out[3266] = \<const0> ;
  assign LOCKSTEP_Master_Out[3267] = \<const0> ;
  assign LOCKSTEP_Master_Out[3268] = \<const0> ;
  assign LOCKSTEP_Master_Out[3269] = \<const0> ;
  assign LOCKSTEP_Master_Out[3270] = \<const0> ;
  assign LOCKSTEP_Master_Out[3271] = \<const0> ;
  assign LOCKSTEP_Master_Out[3272] = \<const0> ;
  assign LOCKSTEP_Master_Out[3273] = \<const0> ;
  assign LOCKSTEP_Master_Out[3274] = \<const0> ;
  assign LOCKSTEP_Master_Out[3275] = \<const0> ;
  assign LOCKSTEP_Master_Out[3276] = \<const0> ;
  assign LOCKSTEP_Master_Out[3277] = \<const0> ;
  assign LOCKSTEP_Master_Out[3278] = \<const0> ;
  assign LOCKSTEP_Master_Out[3279] = \<const0> ;
  assign LOCKSTEP_Master_Out[3280] = \<const0> ;
  assign LOCKSTEP_Master_Out[3281] = \<const0> ;
  assign LOCKSTEP_Master_Out[3282] = \<const0> ;
  assign LOCKSTEP_Master_Out[3283] = \<const0> ;
  assign LOCKSTEP_Master_Out[3284] = \<const0> ;
  assign LOCKSTEP_Master_Out[3285] = \<const0> ;
  assign LOCKSTEP_Master_Out[3286] = \<const0> ;
  assign LOCKSTEP_Master_Out[3287] = \<const0> ;
  assign LOCKSTEP_Master_Out[3288] = \<const0> ;
  assign LOCKSTEP_Master_Out[3289] = \<const0> ;
  assign LOCKSTEP_Master_Out[3290] = \<const0> ;
  assign LOCKSTEP_Master_Out[3291] = \<const0> ;
  assign LOCKSTEP_Master_Out[3292] = \<const0> ;
  assign LOCKSTEP_Master_Out[3293] = \<const0> ;
  assign LOCKSTEP_Master_Out[3294] = \<const0> ;
  assign LOCKSTEP_Master_Out[3295] = \<const0> ;
  assign LOCKSTEP_Master_Out[3296] = \<const0> ;
  assign LOCKSTEP_Master_Out[3297] = \<const0> ;
  assign LOCKSTEP_Master_Out[3298] = \<const0> ;
  assign LOCKSTEP_Master_Out[3299] = \<const0> ;
  assign LOCKSTEP_Master_Out[3300] = \<const0> ;
  assign LOCKSTEP_Master_Out[3301] = \<const0> ;
  assign LOCKSTEP_Master_Out[3302] = \<const0> ;
  assign LOCKSTEP_Master_Out[3303] = \<const0> ;
  assign LOCKSTEP_Master_Out[3304] = \<const0> ;
  assign LOCKSTEP_Master_Out[3305] = \<const0> ;
  assign LOCKSTEP_Master_Out[3306] = \<const0> ;
  assign LOCKSTEP_Master_Out[3307] = \<const0> ;
  assign LOCKSTEP_Master_Out[3308] = \<const0> ;
  assign LOCKSTEP_Master_Out[3309] = \<const0> ;
  assign LOCKSTEP_Master_Out[3310] = \<const0> ;
  assign LOCKSTEP_Master_Out[3311] = \<const0> ;
  assign LOCKSTEP_Master_Out[3312] = \<const0> ;
  assign LOCKSTEP_Master_Out[3313] = \<const0> ;
  assign LOCKSTEP_Master_Out[3314] = \<const0> ;
  assign LOCKSTEP_Master_Out[3315] = \<const0> ;
  assign LOCKSTEP_Master_Out[3316] = \<const0> ;
  assign LOCKSTEP_Master_Out[3317] = \<const0> ;
  assign LOCKSTEP_Master_Out[3318] = \<const0> ;
  assign LOCKSTEP_Master_Out[3319] = \<const0> ;
  assign LOCKSTEP_Master_Out[3320] = \<const0> ;
  assign LOCKSTEP_Master_Out[3321] = \<const0> ;
  assign LOCKSTEP_Master_Out[3322] = \<const0> ;
  assign LOCKSTEP_Master_Out[3323] = \<const0> ;
  assign LOCKSTEP_Master_Out[3324] = \<const0> ;
  assign LOCKSTEP_Master_Out[3325] = \<const0> ;
  assign LOCKSTEP_Master_Out[3326] = \<const0> ;
  assign LOCKSTEP_Master_Out[3327] = \<const0> ;
  assign LOCKSTEP_Master_Out[3328] = \<const0> ;
  assign LOCKSTEP_Master_Out[3329] = \<const0> ;
  assign LOCKSTEP_Master_Out[3330] = \<const0> ;
  assign LOCKSTEP_Master_Out[3331] = \<const0> ;
  assign LOCKSTEP_Master_Out[3332] = \<const0> ;
  assign LOCKSTEP_Master_Out[3333] = \<const0> ;
  assign LOCKSTEP_Master_Out[3334] = \<const0> ;
  assign LOCKSTEP_Master_Out[3335] = \<const0> ;
  assign LOCKSTEP_Master_Out[3336] = \<const0> ;
  assign LOCKSTEP_Master_Out[3337] = \<const0> ;
  assign LOCKSTEP_Master_Out[3338] = \<const0> ;
  assign LOCKSTEP_Master_Out[3339] = \<const0> ;
  assign LOCKSTEP_Master_Out[3340] = \<const0> ;
  assign LOCKSTEP_Master_Out[3341] = \<const0> ;
  assign LOCKSTEP_Master_Out[3342] = \<const0> ;
  assign LOCKSTEP_Master_Out[3343] = \<const0> ;
  assign LOCKSTEP_Master_Out[3344] = \<const0> ;
  assign LOCKSTEP_Master_Out[3345] = \<const0> ;
  assign LOCKSTEP_Master_Out[3346] = \<const0> ;
  assign LOCKSTEP_Master_Out[3347] = \<const0> ;
  assign LOCKSTEP_Master_Out[3348] = \<const0> ;
  assign LOCKSTEP_Master_Out[3349] = \<const0> ;
  assign LOCKSTEP_Master_Out[3350] = \<const0> ;
  assign LOCKSTEP_Master_Out[3351] = \<const0> ;
  assign LOCKSTEP_Master_Out[3352] = \<const0> ;
  assign LOCKSTEP_Master_Out[3353] = \<const0> ;
  assign LOCKSTEP_Master_Out[3354] = \<const0> ;
  assign LOCKSTEP_Master_Out[3355] = \<const0> ;
  assign LOCKSTEP_Master_Out[3356] = \<const0> ;
  assign LOCKSTEP_Master_Out[3357] = \<const0> ;
  assign LOCKSTEP_Master_Out[3358] = \<const0> ;
  assign LOCKSTEP_Master_Out[3359] = \<const0> ;
  assign LOCKSTEP_Master_Out[3360] = \<const0> ;
  assign LOCKSTEP_Master_Out[3361] = \<const0> ;
  assign LOCKSTEP_Master_Out[3362] = \<const0> ;
  assign LOCKSTEP_Master_Out[3363] = \<const0> ;
  assign LOCKSTEP_Master_Out[3364] = \<const0> ;
  assign LOCKSTEP_Master_Out[3365] = \<const0> ;
  assign LOCKSTEP_Master_Out[3366] = \<const0> ;
  assign LOCKSTEP_Master_Out[3367] = \<const0> ;
  assign LOCKSTEP_Master_Out[3368] = \<const0> ;
  assign LOCKSTEP_Master_Out[3369] = \<const0> ;
  assign LOCKSTEP_Master_Out[3370] = \<const0> ;
  assign LOCKSTEP_Master_Out[3371] = \<const0> ;
  assign LOCKSTEP_Master_Out[3372] = \<const0> ;
  assign LOCKSTEP_Master_Out[3373] = \<const0> ;
  assign LOCKSTEP_Master_Out[3374] = \<const0> ;
  assign LOCKSTEP_Master_Out[3375] = \<const0> ;
  assign LOCKSTEP_Master_Out[3376] = \<const0> ;
  assign LOCKSTEP_Master_Out[3377] = \<const0> ;
  assign LOCKSTEP_Master_Out[3378] = \<const0> ;
  assign LOCKSTEP_Master_Out[3379] = \<const0> ;
  assign LOCKSTEP_Master_Out[3380] = \<const0> ;
  assign LOCKSTEP_Master_Out[3381] = \<const0> ;
  assign LOCKSTEP_Master_Out[3382] = \<const0> ;
  assign LOCKSTEP_Master_Out[3383] = \<const0> ;
  assign LOCKSTEP_Master_Out[3384] = \<const0> ;
  assign LOCKSTEP_Master_Out[3385] = \<const0> ;
  assign LOCKSTEP_Master_Out[3386] = \<const0> ;
  assign LOCKSTEP_Master_Out[3387] = \<const0> ;
  assign LOCKSTEP_Master_Out[3388] = \<const0> ;
  assign LOCKSTEP_Master_Out[3389] = \<const0> ;
  assign LOCKSTEP_Master_Out[3390] = \<const0> ;
  assign LOCKSTEP_Master_Out[3391] = \<const0> ;
  assign LOCKSTEP_Master_Out[3392] = \<const0> ;
  assign LOCKSTEP_Master_Out[3393] = \<const0> ;
  assign LOCKSTEP_Master_Out[3394] = \<const0> ;
  assign LOCKSTEP_Master_Out[3395] = \<const0> ;
  assign LOCKSTEP_Master_Out[3396] = \<const0> ;
  assign LOCKSTEP_Master_Out[3397] = \<const0> ;
  assign LOCKSTEP_Master_Out[3398] = \<const0> ;
  assign LOCKSTEP_Master_Out[3399] = \<const0> ;
  assign LOCKSTEP_Master_Out[3400] = \<const0> ;
  assign LOCKSTEP_Master_Out[3401] = \<const0> ;
  assign LOCKSTEP_Master_Out[3402] = \<const0> ;
  assign LOCKSTEP_Master_Out[3403] = \<const0> ;
  assign LOCKSTEP_Master_Out[3404] = \<const0> ;
  assign LOCKSTEP_Master_Out[3405] = \<const0> ;
  assign LOCKSTEP_Master_Out[3406] = \<const0> ;
  assign LOCKSTEP_Master_Out[3407] = \<const0> ;
  assign LOCKSTEP_Master_Out[3408] = \<const0> ;
  assign LOCKSTEP_Master_Out[3409] = \<const0> ;
  assign LOCKSTEP_Master_Out[3410] = \<const0> ;
  assign LOCKSTEP_Master_Out[3411] = \<const0> ;
  assign LOCKSTEP_Master_Out[3412] = \<const0> ;
  assign LOCKSTEP_Master_Out[3413] = \<const0> ;
  assign LOCKSTEP_Master_Out[3414] = \<const0> ;
  assign LOCKSTEP_Master_Out[3415] = \<const0> ;
  assign LOCKSTEP_Master_Out[3416] = \<const0> ;
  assign LOCKSTEP_Master_Out[3417] = \<const0> ;
  assign LOCKSTEP_Master_Out[3418] = \<const0> ;
  assign LOCKSTEP_Master_Out[3419] = \<const0> ;
  assign LOCKSTEP_Master_Out[3420] = \<const0> ;
  assign LOCKSTEP_Master_Out[3421] = \<const0> ;
  assign LOCKSTEP_Master_Out[3422] = \<const0> ;
  assign LOCKSTEP_Master_Out[3423] = \<const0> ;
  assign LOCKSTEP_Master_Out[3424] = \<const0> ;
  assign LOCKSTEP_Master_Out[3425] = \<const0> ;
  assign LOCKSTEP_Master_Out[3426] = \<const0> ;
  assign LOCKSTEP_Master_Out[3427] = \<const0> ;
  assign LOCKSTEP_Master_Out[3428] = \<const0> ;
  assign LOCKSTEP_Master_Out[3429] = \<const0> ;
  assign LOCKSTEP_Master_Out[3430] = \<const0> ;
  assign LOCKSTEP_Master_Out[3431] = \<const0> ;
  assign LOCKSTEP_Master_Out[3432] = \<const0> ;
  assign LOCKSTEP_Master_Out[3433] = \<const0> ;
  assign LOCKSTEP_Master_Out[3434] = \<const0> ;
  assign LOCKSTEP_Master_Out[3435] = \<const0> ;
  assign LOCKSTEP_Master_Out[3436] = \<const0> ;
  assign LOCKSTEP_Master_Out[3437] = \<const0> ;
  assign LOCKSTEP_Master_Out[3438] = \<const0> ;
  assign LOCKSTEP_Master_Out[3439] = \<const0> ;
  assign LOCKSTEP_Master_Out[3440] = \<const0> ;
  assign LOCKSTEP_Master_Out[3441] = \<const0> ;
  assign LOCKSTEP_Master_Out[3442] = \<const0> ;
  assign LOCKSTEP_Master_Out[3443] = \<const0> ;
  assign LOCKSTEP_Master_Out[3444] = \<const0> ;
  assign LOCKSTEP_Master_Out[3445] = \<const0> ;
  assign LOCKSTEP_Master_Out[3446] = \<const0> ;
  assign LOCKSTEP_Master_Out[3447] = \<const0> ;
  assign LOCKSTEP_Master_Out[3448] = \<const0> ;
  assign LOCKSTEP_Master_Out[3449] = \<const0> ;
  assign LOCKSTEP_Master_Out[3450] = \<const0> ;
  assign LOCKSTEP_Master_Out[3451] = \<const0> ;
  assign LOCKSTEP_Master_Out[3452] = \<const0> ;
  assign LOCKSTEP_Master_Out[3453] = \<const0> ;
  assign LOCKSTEP_Master_Out[3454] = \<const0> ;
  assign LOCKSTEP_Master_Out[3455] = \<const0> ;
  assign LOCKSTEP_Master_Out[3456] = \<const0> ;
  assign LOCKSTEP_Master_Out[3457] = \<const0> ;
  assign LOCKSTEP_Master_Out[3458] = \<const0> ;
  assign LOCKSTEP_Master_Out[3459] = \<const0> ;
  assign LOCKSTEP_Master_Out[3460] = \<const0> ;
  assign LOCKSTEP_Master_Out[3461] = \<const0> ;
  assign LOCKSTEP_Master_Out[3462] = \<const0> ;
  assign LOCKSTEP_Master_Out[3463] = \<const0> ;
  assign LOCKSTEP_Master_Out[3464] = \<const0> ;
  assign LOCKSTEP_Master_Out[3465] = \<const0> ;
  assign LOCKSTEP_Master_Out[3466] = \<const0> ;
  assign LOCKSTEP_Master_Out[3467] = \<const0> ;
  assign LOCKSTEP_Master_Out[3468] = \<const0> ;
  assign LOCKSTEP_Master_Out[3469] = \<const0> ;
  assign LOCKSTEP_Master_Out[3470] = \<const0> ;
  assign LOCKSTEP_Master_Out[3471] = \<const0> ;
  assign LOCKSTEP_Master_Out[3472] = \<const0> ;
  assign LOCKSTEP_Master_Out[3473] = \<const0> ;
  assign LOCKSTEP_Master_Out[3474] = \<const0> ;
  assign LOCKSTEP_Master_Out[3475] = \<const0> ;
  assign LOCKSTEP_Master_Out[3476] = \<const0> ;
  assign LOCKSTEP_Master_Out[3477] = \<const0> ;
  assign LOCKSTEP_Master_Out[3478] = \<const0> ;
  assign LOCKSTEP_Master_Out[3479] = \<const0> ;
  assign LOCKSTEP_Master_Out[3480] = \<const0> ;
  assign LOCKSTEP_Master_Out[3481] = \<const0> ;
  assign LOCKSTEP_Master_Out[3482] = \<const0> ;
  assign LOCKSTEP_Master_Out[3483] = \<const0> ;
  assign LOCKSTEP_Master_Out[3484] = \<const0> ;
  assign LOCKSTEP_Master_Out[3485] = \<const0> ;
  assign LOCKSTEP_Master_Out[3486] = \<const0> ;
  assign LOCKSTEP_Master_Out[3487] = \<const0> ;
  assign LOCKSTEP_Master_Out[3488] = \<const0> ;
  assign LOCKSTEP_Master_Out[3489] = \<const0> ;
  assign LOCKSTEP_Master_Out[3490] = \<const0> ;
  assign LOCKSTEP_Master_Out[3491] = \<const0> ;
  assign LOCKSTEP_Master_Out[3492] = \<const0> ;
  assign LOCKSTEP_Master_Out[3493] = \<const0> ;
  assign LOCKSTEP_Master_Out[3494] = \<const0> ;
  assign LOCKSTEP_Master_Out[3495] = \<const0> ;
  assign LOCKSTEP_Master_Out[3496] = \<const0> ;
  assign LOCKSTEP_Master_Out[3497] = \<const0> ;
  assign LOCKSTEP_Master_Out[3498] = \<const0> ;
  assign LOCKSTEP_Master_Out[3499] = \<const0> ;
  assign LOCKSTEP_Master_Out[3500] = \<const0> ;
  assign LOCKSTEP_Master_Out[3501] = \<const0> ;
  assign LOCKSTEP_Master_Out[3502] = \<const0> ;
  assign LOCKSTEP_Master_Out[3503] = \<const0> ;
  assign LOCKSTEP_Master_Out[3504] = \<const0> ;
  assign LOCKSTEP_Master_Out[3505] = \<const0> ;
  assign LOCKSTEP_Master_Out[3506] = \<const0> ;
  assign LOCKSTEP_Master_Out[3507] = \<const0> ;
  assign LOCKSTEP_Master_Out[3508] = \<const0> ;
  assign LOCKSTEP_Master_Out[3509] = \<const0> ;
  assign LOCKSTEP_Master_Out[3510] = \<const0> ;
  assign LOCKSTEP_Master_Out[3511] = \<const0> ;
  assign LOCKSTEP_Master_Out[3512] = \<const0> ;
  assign LOCKSTEP_Master_Out[3513] = \<const0> ;
  assign LOCKSTEP_Master_Out[3514] = \<const0> ;
  assign LOCKSTEP_Master_Out[3515] = \<const0> ;
  assign LOCKSTEP_Master_Out[3516] = \<const0> ;
  assign LOCKSTEP_Master_Out[3517] = \<const0> ;
  assign LOCKSTEP_Master_Out[3518] = \<const0> ;
  assign LOCKSTEP_Master_Out[3519] = \<const0> ;
  assign LOCKSTEP_Master_Out[3520] = \<const0> ;
  assign LOCKSTEP_Master_Out[3521] = \<const0> ;
  assign LOCKSTEP_Master_Out[3522] = \<const0> ;
  assign LOCKSTEP_Master_Out[3523] = \<const0> ;
  assign LOCKSTEP_Master_Out[3524] = \<const0> ;
  assign LOCKSTEP_Master_Out[3525] = \<const0> ;
  assign LOCKSTEP_Master_Out[3526] = \<const0> ;
  assign LOCKSTEP_Master_Out[3527] = \<const0> ;
  assign LOCKSTEP_Master_Out[3528] = \<const0> ;
  assign LOCKSTEP_Master_Out[3529] = \<const0> ;
  assign LOCKSTEP_Master_Out[3530] = \<const0> ;
  assign LOCKSTEP_Master_Out[3531] = \<const0> ;
  assign LOCKSTEP_Master_Out[3532] = \<const0> ;
  assign LOCKSTEP_Master_Out[3533] = \<const0> ;
  assign LOCKSTEP_Master_Out[3534] = \<const0> ;
  assign LOCKSTEP_Master_Out[3535] = \<const0> ;
  assign LOCKSTEP_Master_Out[3536] = \<const0> ;
  assign LOCKSTEP_Master_Out[3537] = \<const0> ;
  assign LOCKSTEP_Master_Out[3538] = \<const0> ;
  assign LOCKSTEP_Master_Out[3539] = \<const0> ;
  assign LOCKSTEP_Master_Out[3540] = \<const0> ;
  assign LOCKSTEP_Master_Out[3541] = \<const0> ;
  assign LOCKSTEP_Master_Out[3542] = \<const0> ;
  assign LOCKSTEP_Master_Out[3543] = \<const0> ;
  assign LOCKSTEP_Master_Out[3544] = \<const0> ;
  assign LOCKSTEP_Master_Out[3545] = \<const0> ;
  assign LOCKSTEP_Master_Out[3546] = \<const0> ;
  assign LOCKSTEP_Master_Out[3547] = \<const0> ;
  assign LOCKSTEP_Master_Out[3548] = \<const0> ;
  assign LOCKSTEP_Master_Out[3549] = \<const0> ;
  assign LOCKSTEP_Master_Out[3550] = \<const0> ;
  assign LOCKSTEP_Master_Out[3551] = \<const0> ;
  assign LOCKSTEP_Master_Out[3552] = \<const0> ;
  assign LOCKSTEP_Master_Out[3553] = \<const0> ;
  assign LOCKSTEP_Master_Out[3554] = \<const0> ;
  assign LOCKSTEP_Master_Out[3555] = \<const0> ;
  assign LOCKSTEP_Master_Out[3556] = \<const0> ;
  assign LOCKSTEP_Master_Out[3557] = \<const0> ;
  assign LOCKSTEP_Master_Out[3558] = \<const0> ;
  assign LOCKSTEP_Master_Out[3559] = \<const0> ;
  assign LOCKSTEP_Master_Out[3560] = \<const0> ;
  assign LOCKSTEP_Master_Out[3561] = \<const0> ;
  assign LOCKSTEP_Master_Out[3562] = \<const0> ;
  assign LOCKSTEP_Master_Out[3563] = \<const0> ;
  assign LOCKSTEP_Master_Out[3564] = \<const0> ;
  assign LOCKSTEP_Master_Out[3565] = \<const0> ;
  assign LOCKSTEP_Master_Out[3566] = \<const0> ;
  assign LOCKSTEP_Master_Out[3567] = \<const0> ;
  assign LOCKSTEP_Master_Out[3568] = \<const0> ;
  assign LOCKSTEP_Master_Out[3569] = \<const0> ;
  assign LOCKSTEP_Master_Out[3570] = \<const0> ;
  assign LOCKSTEP_Master_Out[3571] = \<const0> ;
  assign LOCKSTEP_Master_Out[3572] = \<const0> ;
  assign LOCKSTEP_Master_Out[3573] = \<const0> ;
  assign LOCKSTEP_Master_Out[3574] = \<const0> ;
  assign LOCKSTEP_Master_Out[3575] = \<const0> ;
  assign LOCKSTEP_Master_Out[3576] = \<const0> ;
  assign LOCKSTEP_Master_Out[3577] = \<const0> ;
  assign LOCKSTEP_Master_Out[3578] = \<const0> ;
  assign LOCKSTEP_Master_Out[3579] = \<const0> ;
  assign LOCKSTEP_Master_Out[3580] = \<const0> ;
  assign LOCKSTEP_Master_Out[3581] = \<const0> ;
  assign LOCKSTEP_Master_Out[3582] = \<const0> ;
  assign LOCKSTEP_Master_Out[3583] = \<const0> ;
  assign LOCKSTEP_Master_Out[3584] = \<const0> ;
  assign LOCKSTEP_Master_Out[3585] = \<const0> ;
  assign LOCKSTEP_Master_Out[3586] = \<const0> ;
  assign LOCKSTEP_Master_Out[3587] = \<const0> ;
  assign LOCKSTEP_Master_Out[3588] = \<const0> ;
  assign LOCKSTEP_Master_Out[3589] = \<const0> ;
  assign LOCKSTEP_Master_Out[3590] = \<const0> ;
  assign LOCKSTEP_Master_Out[3591] = \<const0> ;
  assign LOCKSTEP_Master_Out[3592] = \<const0> ;
  assign LOCKSTEP_Master_Out[3593] = \<const0> ;
  assign LOCKSTEP_Master_Out[3594] = \<const0> ;
  assign LOCKSTEP_Master_Out[3595] = \<const0> ;
  assign LOCKSTEP_Master_Out[3596] = \<const0> ;
  assign LOCKSTEP_Master_Out[3597] = \<const0> ;
  assign LOCKSTEP_Master_Out[3598] = \<const0> ;
  assign LOCKSTEP_Master_Out[3599] = \<const0> ;
  assign LOCKSTEP_Master_Out[3600] = \<const0> ;
  assign LOCKSTEP_Master_Out[3601] = \<const0> ;
  assign LOCKSTEP_Master_Out[3602] = \<const0> ;
  assign LOCKSTEP_Master_Out[3603] = \<const0> ;
  assign LOCKSTEP_Master_Out[3604] = \<const0> ;
  assign LOCKSTEP_Master_Out[3605] = \<const0> ;
  assign LOCKSTEP_Master_Out[3606] = \<const0> ;
  assign LOCKSTEP_Master_Out[3607] = \<const0> ;
  assign LOCKSTEP_Master_Out[3608] = \<const0> ;
  assign LOCKSTEP_Master_Out[3609] = \<const0> ;
  assign LOCKSTEP_Master_Out[3610] = \<const0> ;
  assign LOCKSTEP_Master_Out[3611] = \<const0> ;
  assign LOCKSTEP_Master_Out[3612] = \<const0> ;
  assign LOCKSTEP_Master_Out[3613] = \<const0> ;
  assign LOCKSTEP_Master_Out[3614] = \<const0> ;
  assign LOCKSTEP_Master_Out[3615] = \<const0> ;
  assign LOCKSTEP_Master_Out[3616] = \<const0> ;
  assign LOCKSTEP_Master_Out[3617] = \<const0> ;
  assign LOCKSTEP_Master_Out[3618] = \<const0> ;
  assign LOCKSTEP_Master_Out[3619] = \<const0> ;
  assign LOCKSTEP_Master_Out[3620] = \<const0> ;
  assign LOCKSTEP_Master_Out[3621] = \<const0> ;
  assign LOCKSTEP_Master_Out[3622] = \<const0> ;
  assign LOCKSTEP_Master_Out[3623] = \<const0> ;
  assign LOCKSTEP_Master_Out[3624] = \<const0> ;
  assign LOCKSTEP_Master_Out[3625] = \<const0> ;
  assign LOCKSTEP_Master_Out[3626] = \<const0> ;
  assign LOCKSTEP_Master_Out[3627] = \<const0> ;
  assign LOCKSTEP_Master_Out[3628] = \<const0> ;
  assign LOCKSTEP_Master_Out[3629] = \<const0> ;
  assign LOCKSTEP_Master_Out[3630] = \<const0> ;
  assign LOCKSTEP_Master_Out[3631] = \<const0> ;
  assign LOCKSTEP_Master_Out[3632] = \<const0> ;
  assign LOCKSTEP_Master_Out[3633] = \<const0> ;
  assign LOCKSTEP_Master_Out[3634] = \<const0> ;
  assign LOCKSTEP_Master_Out[3635] = \<const0> ;
  assign LOCKSTEP_Master_Out[3636] = \<const0> ;
  assign LOCKSTEP_Master_Out[3637] = \<const0> ;
  assign LOCKSTEP_Master_Out[3638] = \<const0> ;
  assign LOCKSTEP_Master_Out[3639] = \<const0> ;
  assign LOCKSTEP_Master_Out[3640] = \<const0> ;
  assign LOCKSTEP_Master_Out[3641] = \<const0> ;
  assign LOCKSTEP_Master_Out[3642] = \<const0> ;
  assign LOCKSTEP_Master_Out[3643] = \<const0> ;
  assign LOCKSTEP_Master_Out[3644] = \<const0> ;
  assign LOCKSTEP_Master_Out[3645] = \<const0> ;
  assign LOCKSTEP_Master_Out[3646] = \<const0> ;
  assign LOCKSTEP_Master_Out[3647] = \<const0> ;
  assign LOCKSTEP_Master_Out[3648] = \<const0> ;
  assign LOCKSTEP_Master_Out[3649] = \<const0> ;
  assign LOCKSTEP_Master_Out[3650] = \<const0> ;
  assign LOCKSTEP_Master_Out[3651] = \<const0> ;
  assign LOCKSTEP_Master_Out[3652] = \<const0> ;
  assign LOCKSTEP_Master_Out[3653] = \<const0> ;
  assign LOCKSTEP_Master_Out[3654] = \<const0> ;
  assign LOCKSTEP_Master_Out[3655] = \<const0> ;
  assign LOCKSTEP_Master_Out[3656] = \<const0> ;
  assign LOCKSTEP_Master_Out[3657] = \<const0> ;
  assign LOCKSTEP_Master_Out[3658] = \<const0> ;
  assign LOCKSTEP_Master_Out[3659] = \<const0> ;
  assign LOCKSTEP_Master_Out[3660] = \<const0> ;
  assign LOCKSTEP_Master_Out[3661] = \<const0> ;
  assign LOCKSTEP_Master_Out[3662] = \<const0> ;
  assign LOCKSTEP_Master_Out[3663] = \<const0> ;
  assign LOCKSTEP_Master_Out[3664] = \<const0> ;
  assign LOCKSTEP_Master_Out[3665] = \<const0> ;
  assign LOCKSTEP_Master_Out[3666] = \<const0> ;
  assign LOCKSTEP_Master_Out[3667] = \<const0> ;
  assign LOCKSTEP_Master_Out[3668] = \<const0> ;
  assign LOCKSTEP_Master_Out[3669] = \<const0> ;
  assign LOCKSTEP_Master_Out[3670] = \<const0> ;
  assign LOCKSTEP_Master_Out[3671] = \<const0> ;
  assign LOCKSTEP_Master_Out[3672] = \<const0> ;
  assign LOCKSTEP_Master_Out[3673] = \<const0> ;
  assign LOCKSTEP_Master_Out[3674] = \<const0> ;
  assign LOCKSTEP_Master_Out[3675] = \<const0> ;
  assign LOCKSTEP_Master_Out[3676] = \<const0> ;
  assign LOCKSTEP_Master_Out[3677] = \<const0> ;
  assign LOCKSTEP_Master_Out[3678] = \<const0> ;
  assign LOCKSTEP_Master_Out[3679] = \<const0> ;
  assign LOCKSTEP_Master_Out[3680] = \<const0> ;
  assign LOCKSTEP_Master_Out[3681] = \<const0> ;
  assign LOCKSTEP_Master_Out[3682] = \<const0> ;
  assign LOCKSTEP_Master_Out[3683] = \<const0> ;
  assign LOCKSTEP_Master_Out[3684] = \<const0> ;
  assign LOCKSTEP_Master_Out[3685] = \<const0> ;
  assign LOCKSTEP_Master_Out[3686] = \<const0> ;
  assign LOCKSTEP_Master_Out[3687] = \<const0> ;
  assign LOCKSTEP_Master_Out[3688] = \<const0> ;
  assign LOCKSTEP_Master_Out[3689] = \<const0> ;
  assign LOCKSTEP_Master_Out[3690] = \<const0> ;
  assign LOCKSTEP_Master_Out[3691] = \<const0> ;
  assign LOCKSTEP_Master_Out[3692] = \<const0> ;
  assign LOCKSTEP_Master_Out[3693] = \<const0> ;
  assign LOCKSTEP_Master_Out[3694] = \<const0> ;
  assign LOCKSTEP_Master_Out[3695] = \<const0> ;
  assign LOCKSTEP_Master_Out[3696] = \<const0> ;
  assign LOCKSTEP_Master_Out[3697] = \<const0> ;
  assign LOCKSTEP_Master_Out[3698] = \<const0> ;
  assign LOCKSTEP_Master_Out[3699] = \<const0> ;
  assign LOCKSTEP_Master_Out[3700] = \<const0> ;
  assign LOCKSTEP_Master_Out[3701] = \<const0> ;
  assign LOCKSTEP_Master_Out[3702] = \<const0> ;
  assign LOCKSTEP_Master_Out[3703] = \<const0> ;
  assign LOCKSTEP_Master_Out[3704] = \<const0> ;
  assign LOCKSTEP_Master_Out[3705] = \<const0> ;
  assign LOCKSTEP_Master_Out[3706] = \<const0> ;
  assign LOCKSTEP_Master_Out[3707] = \<const0> ;
  assign LOCKSTEP_Master_Out[3708] = \<const0> ;
  assign LOCKSTEP_Master_Out[3709] = \<const0> ;
  assign LOCKSTEP_Master_Out[3710] = \<const0> ;
  assign LOCKSTEP_Master_Out[3711] = \<const0> ;
  assign LOCKSTEP_Master_Out[3712] = \<const0> ;
  assign LOCKSTEP_Master_Out[3713] = \<const0> ;
  assign LOCKSTEP_Master_Out[3714] = \<const0> ;
  assign LOCKSTEP_Master_Out[3715] = \<const0> ;
  assign LOCKSTEP_Master_Out[3716] = \<const0> ;
  assign LOCKSTEP_Master_Out[3717] = \<const0> ;
  assign LOCKSTEP_Master_Out[3718] = \<const0> ;
  assign LOCKSTEP_Master_Out[3719] = \<const0> ;
  assign LOCKSTEP_Master_Out[3720] = \<const0> ;
  assign LOCKSTEP_Master_Out[3721] = \<const0> ;
  assign LOCKSTEP_Master_Out[3722] = \<const0> ;
  assign LOCKSTEP_Master_Out[3723] = \<const0> ;
  assign LOCKSTEP_Master_Out[3724] = \<const0> ;
  assign LOCKSTEP_Master_Out[3725] = \<const0> ;
  assign LOCKSTEP_Master_Out[3726] = \<const0> ;
  assign LOCKSTEP_Master_Out[3727] = \<const0> ;
  assign LOCKSTEP_Master_Out[3728] = \<const0> ;
  assign LOCKSTEP_Master_Out[3729] = \<const0> ;
  assign LOCKSTEP_Master_Out[3730] = \<const0> ;
  assign LOCKSTEP_Master_Out[3731] = \<const0> ;
  assign LOCKSTEP_Master_Out[3732] = \<const0> ;
  assign LOCKSTEP_Master_Out[3733] = \<const0> ;
  assign LOCKSTEP_Master_Out[3734] = \<const0> ;
  assign LOCKSTEP_Master_Out[3735] = \<const0> ;
  assign LOCKSTEP_Master_Out[3736] = \<const0> ;
  assign LOCKSTEP_Master_Out[3737] = \<const0> ;
  assign LOCKSTEP_Master_Out[3738] = \<const0> ;
  assign LOCKSTEP_Master_Out[3739] = \<const0> ;
  assign LOCKSTEP_Master_Out[3740] = \<const0> ;
  assign LOCKSTEP_Master_Out[3741] = \<const0> ;
  assign LOCKSTEP_Master_Out[3742] = \<const0> ;
  assign LOCKSTEP_Master_Out[3743] = \<const0> ;
  assign LOCKSTEP_Master_Out[3744] = \<const0> ;
  assign LOCKSTEP_Master_Out[3745] = \<const0> ;
  assign LOCKSTEP_Master_Out[3746] = \<const0> ;
  assign LOCKSTEP_Master_Out[3747] = \<const0> ;
  assign LOCKSTEP_Master_Out[3748] = \<const0> ;
  assign LOCKSTEP_Master_Out[3749] = \<const0> ;
  assign LOCKSTEP_Master_Out[3750] = \<const0> ;
  assign LOCKSTEP_Master_Out[3751] = \<const0> ;
  assign LOCKSTEP_Master_Out[3752] = \<const0> ;
  assign LOCKSTEP_Master_Out[3753] = \<const0> ;
  assign LOCKSTEP_Master_Out[3754] = \<const0> ;
  assign LOCKSTEP_Master_Out[3755] = \<const0> ;
  assign LOCKSTEP_Master_Out[3756] = \<const0> ;
  assign LOCKSTEP_Master_Out[3757] = \<const0> ;
  assign LOCKSTEP_Master_Out[3758] = \<const0> ;
  assign LOCKSTEP_Master_Out[3759] = \<const0> ;
  assign LOCKSTEP_Master_Out[3760] = \<const0> ;
  assign LOCKSTEP_Master_Out[3761] = \<const0> ;
  assign LOCKSTEP_Master_Out[3762] = \<const0> ;
  assign LOCKSTEP_Master_Out[3763] = \<const0> ;
  assign LOCKSTEP_Master_Out[3764] = \<const0> ;
  assign LOCKSTEP_Master_Out[3765] = \<const0> ;
  assign LOCKSTEP_Master_Out[3766] = \<const0> ;
  assign LOCKSTEP_Master_Out[3767] = \<const0> ;
  assign LOCKSTEP_Master_Out[3768] = \<const0> ;
  assign LOCKSTEP_Master_Out[3769] = \<const0> ;
  assign LOCKSTEP_Master_Out[3770] = \<const0> ;
  assign LOCKSTEP_Master_Out[3771] = \<const0> ;
  assign LOCKSTEP_Master_Out[3772] = \<const0> ;
  assign LOCKSTEP_Master_Out[3773] = \<const0> ;
  assign LOCKSTEP_Master_Out[3774] = \<const0> ;
  assign LOCKSTEP_Master_Out[3775] = \<const0> ;
  assign LOCKSTEP_Master_Out[3776] = \<const0> ;
  assign LOCKSTEP_Master_Out[3777] = \<const0> ;
  assign LOCKSTEP_Master_Out[3778] = \<const0> ;
  assign LOCKSTEP_Master_Out[3779] = \<const0> ;
  assign LOCKSTEP_Master_Out[3780] = \<const0> ;
  assign LOCKSTEP_Master_Out[3781] = \<const0> ;
  assign LOCKSTEP_Master_Out[3782] = \<const0> ;
  assign LOCKSTEP_Master_Out[3783] = \<const0> ;
  assign LOCKSTEP_Master_Out[3784] = \<const0> ;
  assign LOCKSTEP_Master_Out[3785] = \<const0> ;
  assign LOCKSTEP_Master_Out[3786] = \<const0> ;
  assign LOCKSTEP_Master_Out[3787] = \<const0> ;
  assign LOCKSTEP_Master_Out[3788] = \<const0> ;
  assign LOCKSTEP_Master_Out[3789] = \<const0> ;
  assign LOCKSTEP_Master_Out[3790] = \<const0> ;
  assign LOCKSTEP_Master_Out[3791] = \<const0> ;
  assign LOCKSTEP_Master_Out[3792] = \<const0> ;
  assign LOCKSTEP_Master_Out[3793] = \<const0> ;
  assign LOCKSTEP_Master_Out[3794] = \<const0> ;
  assign LOCKSTEP_Master_Out[3795] = \<const0> ;
  assign LOCKSTEP_Master_Out[3796] = \<const0> ;
  assign LOCKSTEP_Master_Out[3797] = \<const0> ;
  assign LOCKSTEP_Master_Out[3798] = \<const0> ;
  assign LOCKSTEP_Master_Out[3799] = \<const0> ;
  assign LOCKSTEP_Master_Out[3800] = \<const0> ;
  assign LOCKSTEP_Master_Out[3801] = \<const0> ;
  assign LOCKSTEP_Master_Out[3802] = \<const0> ;
  assign LOCKSTEP_Master_Out[3803] = \<const0> ;
  assign LOCKSTEP_Master_Out[3804] = \<const0> ;
  assign LOCKSTEP_Master_Out[3805] = \<const0> ;
  assign LOCKSTEP_Master_Out[3806] = \<const0> ;
  assign LOCKSTEP_Master_Out[3807] = \<const0> ;
  assign LOCKSTEP_Master_Out[3808] = \<const0> ;
  assign LOCKSTEP_Master_Out[3809] = \<const0> ;
  assign LOCKSTEP_Master_Out[3810] = \<const0> ;
  assign LOCKSTEP_Master_Out[3811] = \<const0> ;
  assign LOCKSTEP_Master_Out[3812] = \<const0> ;
  assign LOCKSTEP_Master_Out[3813] = \<const0> ;
  assign LOCKSTEP_Master_Out[3814] = \<const0> ;
  assign LOCKSTEP_Master_Out[3815] = \<const0> ;
  assign LOCKSTEP_Master_Out[3816] = \<const0> ;
  assign LOCKSTEP_Master_Out[3817] = \<const0> ;
  assign LOCKSTEP_Master_Out[3818] = \<const0> ;
  assign LOCKSTEP_Master_Out[3819] = \<const0> ;
  assign LOCKSTEP_Master_Out[3820] = \<const0> ;
  assign LOCKSTEP_Master_Out[3821] = \<const0> ;
  assign LOCKSTEP_Master_Out[3822] = \<const0> ;
  assign LOCKSTEP_Master_Out[3823] = \<const0> ;
  assign LOCKSTEP_Master_Out[3824] = \<const0> ;
  assign LOCKSTEP_Master_Out[3825] = \<const0> ;
  assign LOCKSTEP_Master_Out[3826] = \<const0> ;
  assign LOCKSTEP_Master_Out[3827] = \<const0> ;
  assign LOCKSTEP_Master_Out[3828] = \<const0> ;
  assign LOCKSTEP_Master_Out[3829] = \<const0> ;
  assign LOCKSTEP_Master_Out[3830] = \<const0> ;
  assign LOCKSTEP_Master_Out[3831] = \<const0> ;
  assign LOCKSTEP_Master_Out[3832] = \<const0> ;
  assign LOCKSTEP_Master_Out[3833] = \<const0> ;
  assign LOCKSTEP_Master_Out[3834] = \<const0> ;
  assign LOCKSTEP_Master_Out[3835] = \<const0> ;
  assign LOCKSTEP_Master_Out[3836] = \<const0> ;
  assign LOCKSTEP_Master_Out[3837] = \<const0> ;
  assign LOCKSTEP_Master_Out[3838] = \<const0> ;
  assign LOCKSTEP_Master_Out[3839] = \<const0> ;
  assign LOCKSTEP_Master_Out[3840] = \<const0> ;
  assign LOCKSTEP_Master_Out[3841] = \<const0> ;
  assign LOCKSTEP_Master_Out[3842] = \<const0> ;
  assign LOCKSTEP_Master_Out[3843] = \<const0> ;
  assign LOCKSTEP_Master_Out[3844] = \<const0> ;
  assign LOCKSTEP_Master_Out[3845] = \<const0> ;
  assign LOCKSTEP_Master_Out[3846] = \<const0> ;
  assign LOCKSTEP_Master_Out[3847] = \<const0> ;
  assign LOCKSTEP_Master_Out[3848] = \<const0> ;
  assign LOCKSTEP_Master_Out[3849] = \<const0> ;
  assign LOCKSTEP_Master_Out[3850] = \<const0> ;
  assign LOCKSTEP_Master_Out[3851] = \<const0> ;
  assign LOCKSTEP_Master_Out[3852] = \<const0> ;
  assign LOCKSTEP_Master_Out[3853] = \<const0> ;
  assign LOCKSTEP_Master_Out[3854] = \<const0> ;
  assign LOCKSTEP_Master_Out[3855] = \<const0> ;
  assign LOCKSTEP_Master_Out[3856] = \<const0> ;
  assign LOCKSTEP_Master_Out[3857] = \<const0> ;
  assign LOCKSTEP_Master_Out[3858] = \<const0> ;
  assign LOCKSTEP_Master_Out[3859] = \<const0> ;
  assign LOCKSTEP_Master_Out[3860] = \<const0> ;
  assign LOCKSTEP_Master_Out[3861] = \<const0> ;
  assign LOCKSTEP_Master_Out[3862] = \<const0> ;
  assign LOCKSTEP_Master_Out[3863] = \<const0> ;
  assign LOCKSTEP_Master_Out[3864] = \<const0> ;
  assign LOCKSTEP_Master_Out[3865] = \<const0> ;
  assign LOCKSTEP_Master_Out[3866] = \<const0> ;
  assign LOCKSTEP_Master_Out[3867] = \<const0> ;
  assign LOCKSTEP_Master_Out[3868] = \<const0> ;
  assign LOCKSTEP_Master_Out[3869] = \<const0> ;
  assign LOCKSTEP_Master_Out[3870] = \<const0> ;
  assign LOCKSTEP_Master_Out[3871] = \<const0> ;
  assign LOCKSTEP_Master_Out[3872] = \<const0> ;
  assign LOCKSTEP_Master_Out[3873] = \<const0> ;
  assign LOCKSTEP_Master_Out[3874] = \<const0> ;
  assign LOCKSTEP_Master_Out[3875] = \<const0> ;
  assign LOCKSTEP_Master_Out[3876] = \<const0> ;
  assign LOCKSTEP_Master_Out[3877] = \<const0> ;
  assign LOCKSTEP_Master_Out[3878] = \<const0> ;
  assign LOCKSTEP_Master_Out[3879] = \<const0> ;
  assign LOCKSTEP_Master_Out[3880] = \<const0> ;
  assign LOCKSTEP_Master_Out[3881] = \<const0> ;
  assign LOCKSTEP_Master_Out[3882] = \<const0> ;
  assign LOCKSTEP_Master_Out[3883] = \<const0> ;
  assign LOCKSTEP_Master_Out[3884] = \<const0> ;
  assign LOCKSTEP_Master_Out[3885] = \<const0> ;
  assign LOCKSTEP_Master_Out[3886] = \<const0> ;
  assign LOCKSTEP_Master_Out[3887] = \<const0> ;
  assign LOCKSTEP_Master_Out[3888] = \<const0> ;
  assign LOCKSTEP_Master_Out[3889] = \<const0> ;
  assign LOCKSTEP_Master_Out[3890] = \<const0> ;
  assign LOCKSTEP_Master_Out[3891] = \<const0> ;
  assign LOCKSTEP_Master_Out[3892] = \<const0> ;
  assign LOCKSTEP_Master_Out[3893] = \<const0> ;
  assign LOCKSTEP_Master_Out[3894] = \<const0> ;
  assign LOCKSTEP_Master_Out[3895] = \<const0> ;
  assign LOCKSTEP_Master_Out[3896] = \<const0> ;
  assign LOCKSTEP_Master_Out[3897] = \<const0> ;
  assign LOCKSTEP_Master_Out[3898] = \<const0> ;
  assign LOCKSTEP_Master_Out[3899] = \<const0> ;
  assign LOCKSTEP_Master_Out[3900] = \<const0> ;
  assign LOCKSTEP_Master_Out[3901] = \<const0> ;
  assign LOCKSTEP_Master_Out[3902] = \<const0> ;
  assign LOCKSTEP_Master_Out[3903] = \<const0> ;
  assign LOCKSTEP_Master_Out[3904] = \<const0> ;
  assign LOCKSTEP_Master_Out[3905] = \<const0> ;
  assign LOCKSTEP_Master_Out[3906] = \<const0> ;
  assign LOCKSTEP_Master_Out[3907] = \<const0> ;
  assign LOCKSTEP_Master_Out[3908] = \<const0> ;
  assign LOCKSTEP_Master_Out[3909] = \<const0> ;
  assign LOCKSTEP_Master_Out[3910] = \<const0> ;
  assign LOCKSTEP_Master_Out[3911] = \<const0> ;
  assign LOCKSTEP_Master_Out[3912] = \<const0> ;
  assign LOCKSTEP_Master_Out[3913] = \<const0> ;
  assign LOCKSTEP_Master_Out[3914] = \<const0> ;
  assign LOCKSTEP_Master_Out[3915] = \<const0> ;
  assign LOCKSTEP_Master_Out[3916] = \<const0> ;
  assign LOCKSTEP_Master_Out[3917] = \<const0> ;
  assign LOCKSTEP_Master_Out[3918] = \<const0> ;
  assign LOCKSTEP_Master_Out[3919] = \<const0> ;
  assign LOCKSTEP_Master_Out[3920] = \<const0> ;
  assign LOCKSTEP_Master_Out[3921] = \<const0> ;
  assign LOCKSTEP_Master_Out[3922] = \<const0> ;
  assign LOCKSTEP_Master_Out[3923] = \<const0> ;
  assign LOCKSTEP_Master_Out[3924] = \<const0> ;
  assign LOCKSTEP_Master_Out[3925] = \<const0> ;
  assign LOCKSTEP_Master_Out[3926] = \<const0> ;
  assign LOCKSTEP_Master_Out[3927] = \<const0> ;
  assign LOCKSTEP_Master_Out[3928] = \<const0> ;
  assign LOCKSTEP_Master_Out[3929] = \<const0> ;
  assign LOCKSTEP_Master_Out[3930] = \<const0> ;
  assign LOCKSTEP_Master_Out[3931] = \<const0> ;
  assign LOCKSTEP_Master_Out[3932] = \<const0> ;
  assign LOCKSTEP_Master_Out[3933] = \<const0> ;
  assign LOCKSTEP_Master_Out[3934] = \<const0> ;
  assign LOCKSTEP_Master_Out[3935] = \<const0> ;
  assign LOCKSTEP_Master_Out[3936] = \<const0> ;
  assign LOCKSTEP_Master_Out[3937] = \<const0> ;
  assign LOCKSTEP_Master_Out[3938] = \<const0> ;
  assign LOCKSTEP_Master_Out[3939] = \<const0> ;
  assign LOCKSTEP_Master_Out[3940] = \<const0> ;
  assign LOCKSTEP_Master_Out[3941] = \<const0> ;
  assign LOCKSTEP_Master_Out[3942] = \<const0> ;
  assign LOCKSTEP_Master_Out[3943] = \<const0> ;
  assign LOCKSTEP_Master_Out[3944] = \<const0> ;
  assign LOCKSTEP_Master_Out[3945] = \<const0> ;
  assign LOCKSTEP_Master_Out[3946] = \<const0> ;
  assign LOCKSTEP_Master_Out[3947] = \<const0> ;
  assign LOCKSTEP_Master_Out[3948] = \<const0> ;
  assign LOCKSTEP_Master_Out[3949] = \<const0> ;
  assign LOCKSTEP_Master_Out[3950] = \<const0> ;
  assign LOCKSTEP_Master_Out[3951] = \<const0> ;
  assign LOCKSTEP_Master_Out[3952] = \<const0> ;
  assign LOCKSTEP_Master_Out[3953] = \<const0> ;
  assign LOCKSTEP_Master_Out[3954] = \<const0> ;
  assign LOCKSTEP_Master_Out[3955] = \<const0> ;
  assign LOCKSTEP_Master_Out[3956] = \<const0> ;
  assign LOCKSTEP_Master_Out[3957] = \<const0> ;
  assign LOCKSTEP_Master_Out[3958] = \<const0> ;
  assign LOCKSTEP_Master_Out[3959] = \<const0> ;
  assign LOCKSTEP_Master_Out[3960] = \<const0> ;
  assign LOCKSTEP_Master_Out[3961] = \<const0> ;
  assign LOCKSTEP_Master_Out[3962] = \<const0> ;
  assign LOCKSTEP_Master_Out[3963] = \<const0> ;
  assign LOCKSTEP_Master_Out[3964] = \<const0> ;
  assign LOCKSTEP_Master_Out[3965] = \<const0> ;
  assign LOCKSTEP_Master_Out[3966] = \<const0> ;
  assign LOCKSTEP_Master_Out[3967] = \<const0> ;
  assign LOCKSTEP_Master_Out[3968] = \<const0> ;
  assign LOCKSTEP_Master_Out[3969] = \<const0> ;
  assign LOCKSTEP_Master_Out[3970] = \<const0> ;
  assign LOCKSTEP_Master_Out[3971] = \<const0> ;
  assign LOCKSTEP_Master_Out[3972] = \<const0> ;
  assign LOCKSTEP_Master_Out[3973] = \<const0> ;
  assign LOCKSTEP_Master_Out[3974] = \<const0> ;
  assign LOCKSTEP_Master_Out[3975] = \<const0> ;
  assign LOCKSTEP_Master_Out[3976] = \<const0> ;
  assign LOCKSTEP_Master_Out[3977] = \<const0> ;
  assign LOCKSTEP_Master_Out[3978] = \<const0> ;
  assign LOCKSTEP_Master_Out[3979] = \<const0> ;
  assign LOCKSTEP_Master_Out[3980] = \<const0> ;
  assign LOCKSTEP_Master_Out[3981] = \<const0> ;
  assign LOCKSTEP_Master_Out[3982] = \<const0> ;
  assign LOCKSTEP_Master_Out[3983] = \<const0> ;
  assign LOCKSTEP_Master_Out[3984] = \<const0> ;
  assign LOCKSTEP_Master_Out[3985] = \<const0> ;
  assign LOCKSTEP_Master_Out[3986] = \<const0> ;
  assign LOCKSTEP_Master_Out[3987] = \<const0> ;
  assign LOCKSTEP_Master_Out[3988] = \<const0> ;
  assign LOCKSTEP_Master_Out[3989] = \<const0> ;
  assign LOCKSTEP_Master_Out[3990] = \<const0> ;
  assign LOCKSTEP_Master_Out[3991] = \<const0> ;
  assign LOCKSTEP_Master_Out[3992] = \<const0> ;
  assign LOCKSTEP_Master_Out[3993] = \<const0> ;
  assign LOCKSTEP_Master_Out[3994] = \<const0> ;
  assign LOCKSTEP_Master_Out[3995] = \<const0> ;
  assign LOCKSTEP_Master_Out[3996] = \<const0> ;
  assign LOCKSTEP_Master_Out[3997] = \<const0> ;
  assign LOCKSTEP_Master_Out[3998] = \<const0> ;
  assign LOCKSTEP_Master_Out[3999] = \<const0> ;
  assign LOCKSTEP_Master_Out[4000] = \<const0> ;
  assign LOCKSTEP_Master_Out[4001] = \<const0> ;
  assign LOCKSTEP_Master_Out[4002] = \<const0> ;
  assign LOCKSTEP_Master_Out[4003] = \<const0> ;
  assign LOCKSTEP_Master_Out[4004] = \<const0> ;
  assign LOCKSTEP_Master_Out[4005] = \<const0> ;
  assign LOCKSTEP_Master_Out[4006] = \<const0> ;
  assign LOCKSTEP_Master_Out[4007] = \<const0> ;
  assign LOCKSTEP_Master_Out[4008] = \<const0> ;
  assign LOCKSTEP_Master_Out[4009] = \<const0> ;
  assign LOCKSTEP_Master_Out[4010] = \<const0> ;
  assign LOCKSTEP_Master_Out[4011] = \<const0> ;
  assign LOCKSTEP_Master_Out[4012] = \<const0> ;
  assign LOCKSTEP_Master_Out[4013] = \<const0> ;
  assign LOCKSTEP_Master_Out[4014] = \<const0> ;
  assign LOCKSTEP_Master_Out[4015] = \<const0> ;
  assign LOCKSTEP_Master_Out[4016] = \<const0> ;
  assign LOCKSTEP_Master_Out[4017] = \<const0> ;
  assign LOCKSTEP_Master_Out[4018] = \<const0> ;
  assign LOCKSTEP_Master_Out[4019] = \<const0> ;
  assign LOCKSTEP_Master_Out[4020] = \<const0> ;
  assign LOCKSTEP_Master_Out[4021] = \<const0> ;
  assign LOCKSTEP_Master_Out[4022] = \<const0> ;
  assign LOCKSTEP_Master_Out[4023] = \<const0> ;
  assign LOCKSTEP_Master_Out[4024] = \<const0> ;
  assign LOCKSTEP_Master_Out[4025] = \<const0> ;
  assign LOCKSTEP_Master_Out[4026] = \<const0> ;
  assign LOCKSTEP_Master_Out[4027] = \<const0> ;
  assign LOCKSTEP_Master_Out[4028] = \<const0> ;
  assign LOCKSTEP_Master_Out[4029] = \<const0> ;
  assign LOCKSTEP_Master_Out[4030] = \<const0> ;
  assign LOCKSTEP_Master_Out[4031] = \<const0> ;
  assign LOCKSTEP_Master_Out[4032] = \<const0> ;
  assign LOCKSTEP_Master_Out[4033] = \<const0> ;
  assign LOCKSTEP_Master_Out[4034] = \<const0> ;
  assign LOCKSTEP_Master_Out[4035] = \<const0> ;
  assign LOCKSTEP_Master_Out[4036] = \<const0> ;
  assign LOCKSTEP_Master_Out[4037] = \<const0> ;
  assign LOCKSTEP_Master_Out[4038] = \<const0> ;
  assign LOCKSTEP_Master_Out[4039] = \<const0> ;
  assign LOCKSTEP_Master_Out[4040] = \<const0> ;
  assign LOCKSTEP_Master_Out[4041] = \<const0> ;
  assign LOCKSTEP_Master_Out[4042] = \<const0> ;
  assign LOCKSTEP_Master_Out[4043] = \<const0> ;
  assign LOCKSTEP_Master_Out[4044] = \<const0> ;
  assign LOCKSTEP_Master_Out[4045] = \<const0> ;
  assign LOCKSTEP_Master_Out[4046] = \<const0> ;
  assign LOCKSTEP_Master_Out[4047] = \<const0> ;
  assign LOCKSTEP_Master_Out[4048] = \<const0> ;
  assign LOCKSTEP_Master_Out[4049] = \<const0> ;
  assign LOCKSTEP_Master_Out[4050] = \<const0> ;
  assign LOCKSTEP_Master_Out[4051] = \<const0> ;
  assign LOCKSTEP_Master_Out[4052] = \<const0> ;
  assign LOCKSTEP_Master_Out[4053] = \<const0> ;
  assign LOCKSTEP_Master_Out[4054] = \<const0> ;
  assign LOCKSTEP_Master_Out[4055] = \<const0> ;
  assign LOCKSTEP_Master_Out[4056] = \<const0> ;
  assign LOCKSTEP_Master_Out[4057] = \<const0> ;
  assign LOCKSTEP_Master_Out[4058] = \<const0> ;
  assign LOCKSTEP_Master_Out[4059] = \<const0> ;
  assign LOCKSTEP_Master_Out[4060] = \<const0> ;
  assign LOCKSTEP_Master_Out[4061] = \<const0> ;
  assign LOCKSTEP_Master_Out[4062] = \<const0> ;
  assign LOCKSTEP_Master_Out[4063] = \<const0> ;
  assign LOCKSTEP_Master_Out[4064] = \<const0> ;
  assign LOCKSTEP_Master_Out[4065] = \<const0> ;
  assign LOCKSTEP_Master_Out[4066] = \<const0> ;
  assign LOCKSTEP_Master_Out[4067] = \<const0> ;
  assign LOCKSTEP_Master_Out[4068] = \<const0> ;
  assign LOCKSTEP_Master_Out[4069] = \<const0> ;
  assign LOCKSTEP_Master_Out[4070] = \<const0> ;
  assign LOCKSTEP_Master_Out[4071] = \<const0> ;
  assign LOCKSTEP_Master_Out[4072] = \<const0> ;
  assign LOCKSTEP_Master_Out[4073] = \<const0> ;
  assign LOCKSTEP_Master_Out[4074] = \<const0> ;
  assign LOCKSTEP_Master_Out[4075] = \<const0> ;
  assign LOCKSTEP_Master_Out[4076] = \<const0> ;
  assign LOCKSTEP_Master_Out[4077] = \<const0> ;
  assign LOCKSTEP_Master_Out[4078] = \<const0> ;
  assign LOCKSTEP_Master_Out[4079] = \<const0> ;
  assign LOCKSTEP_Master_Out[4080] = \<const0> ;
  assign LOCKSTEP_Master_Out[4081] = \<const0> ;
  assign LOCKSTEP_Master_Out[4082] = \<const0> ;
  assign LOCKSTEP_Master_Out[4083] = \<const0> ;
  assign LOCKSTEP_Master_Out[4084] = \<const0> ;
  assign LOCKSTEP_Master_Out[4085] = \<const0> ;
  assign LOCKSTEP_Master_Out[4086] = \<const0> ;
  assign LOCKSTEP_Master_Out[4087] = \<const0> ;
  assign LOCKSTEP_Master_Out[4088] = \<const0> ;
  assign LOCKSTEP_Master_Out[4089] = \<const0> ;
  assign LOCKSTEP_Master_Out[4090] = \<const0> ;
  assign LOCKSTEP_Master_Out[4091] = \<const0> ;
  assign LOCKSTEP_Master_Out[4092] = \<const0> ;
  assign LOCKSTEP_Master_Out[4093] = \<const0> ;
  assign LOCKSTEP_Master_Out[4094] = \<const0> ;
  assign LOCKSTEP_Master_Out[4095] = \<const0> ;
  assign LOCKSTEP_Out[0] = \^LOCKSTEP_Out [3228];
  assign LOCKSTEP_Out[1] = \<const0> ;
  assign LOCKSTEP_Out[2:3] = \^LOCKSTEP_Out [2:3];
  assign LOCKSTEP_Out[4] = \<const0> ;
  assign LOCKSTEP_Out[5] = \<const0> ;
  assign LOCKSTEP_Out[6] = \<const0> ;
  assign LOCKSTEP_Out[7] = \<const0> ;
  assign LOCKSTEP_Out[8] = \<const0> ;
  assign LOCKSTEP_Out[9] = \<const0> ;
  assign LOCKSTEP_Out[10] = \<const0> ;
  assign LOCKSTEP_Out[11] = \<const0> ;
  assign LOCKSTEP_Out[12] = \<const0> ;
  assign LOCKSTEP_Out[13] = \<const0> ;
  assign LOCKSTEP_Out[14] = \<const0> ;
  assign LOCKSTEP_Out[15] = \<const0> ;
  assign LOCKSTEP_Out[16] = \<const0> ;
  assign LOCKSTEP_Out[17] = \<const0> ;
  assign LOCKSTEP_Out[18] = \<const0> ;
  assign LOCKSTEP_Out[19] = \<const0> ;
  assign LOCKSTEP_Out[20:33] = \^LOCKSTEP_Out [20:33];
  assign LOCKSTEP_Out[34] = \<const0> ;
  assign LOCKSTEP_Out[35] = \<const0> ;
  assign LOCKSTEP_Out[36] = \<const0> ;
  assign LOCKSTEP_Out[37] = \<const0> ;
  assign LOCKSTEP_Out[38] = \<const0> ;
  assign LOCKSTEP_Out[39] = \<const0> ;
  assign LOCKSTEP_Out[40] = \<const0> ;
  assign LOCKSTEP_Out[41] = \<const0> ;
  assign LOCKSTEP_Out[42] = \<const0> ;
  assign LOCKSTEP_Out[43] = \<const0> ;
  assign LOCKSTEP_Out[44] = \<const0> ;
  assign LOCKSTEP_Out[45] = \<const0> ;
  assign LOCKSTEP_Out[46] = \<const0> ;
  assign LOCKSTEP_Out[47] = \<const0> ;
  assign LOCKSTEP_Out[48] = \<const0> ;
  assign LOCKSTEP_Out[49] = \<const0> ;
  assign LOCKSTEP_Out[50] = \<const0> ;
  assign LOCKSTEP_Out[51] = \<const0> ;
  assign LOCKSTEP_Out[52] = \<const0> ;
  assign LOCKSTEP_Out[53] = \<const0> ;
  assign LOCKSTEP_Out[54] = \<const0> ;
  assign LOCKSTEP_Out[55] = \<const0> ;
  assign LOCKSTEP_Out[56] = \<const0> ;
  assign LOCKSTEP_Out[57] = \<const0> ;
  assign LOCKSTEP_Out[58] = \<const0> ;
  assign LOCKSTEP_Out[59] = \<const0> ;
  assign LOCKSTEP_Out[60] = \<const0> ;
  assign LOCKSTEP_Out[61] = \<const0> ;
  assign LOCKSTEP_Out[62] = \<const0> ;
  assign LOCKSTEP_Out[63] = \<const0> ;
  assign LOCKSTEP_Out[64] = \<const0> ;
  assign LOCKSTEP_Out[65] = \<const0> ;
  assign LOCKSTEP_Out[66] = \<const0> ;
  assign LOCKSTEP_Out[67] = \<const0> ;
  assign LOCKSTEP_Out[68:99] = \^LOCKSTEP_Out [68:99];
  assign LOCKSTEP_Out[100] = \<const0> ;
  assign LOCKSTEP_Out[101] = \<const0> ;
  assign LOCKSTEP_Out[102] = \<const0> ;
  assign LOCKSTEP_Out[103] = \<const0> ;
  assign LOCKSTEP_Out[104] = \<const0> ;
  assign LOCKSTEP_Out[105] = \<const0> ;
  assign LOCKSTEP_Out[106] = \<const0> ;
  assign LOCKSTEP_Out[107] = \<const0> ;
  assign LOCKSTEP_Out[108] = \<const0> ;
  assign LOCKSTEP_Out[109] = \<const0> ;
  assign LOCKSTEP_Out[110] = \<const0> ;
  assign LOCKSTEP_Out[111] = \<const0> ;
  assign LOCKSTEP_Out[112] = \<const0> ;
  assign LOCKSTEP_Out[113] = \<const0> ;
  assign LOCKSTEP_Out[114] = \<const0> ;
  assign LOCKSTEP_Out[115] = \<const0> ;
  assign LOCKSTEP_Out[116] = \<const0> ;
  assign LOCKSTEP_Out[117] = \<const0> ;
  assign LOCKSTEP_Out[118] = \<const0> ;
  assign LOCKSTEP_Out[119] = \<const0> ;
  assign LOCKSTEP_Out[120] = \<const0> ;
  assign LOCKSTEP_Out[121] = \<const0> ;
  assign LOCKSTEP_Out[122] = \<const0> ;
  assign LOCKSTEP_Out[123] = \<const0> ;
  assign LOCKSTEP_Out[124] = \<const0> ;
  assign LOCKSTEP_Out[125] = \<const0> ;
  assign LOCKSTEP_Out[126] = \<const0> ;
  assign LOCKSTEP_Out[127] = \<const0> ;
  assign LOCKSTEP_Out[128] = \<const0> ;
  assign LOCKSTEP_Out[129] = \<const0> ;
  assign LOCKSTEP_Out[130] = \<const0> ;
  assign LOCKSTEP_Out[131] = \<const0> ;
  assign LOCKSTEP_Out[132:163] = \^LOCKSTEP_Out [132:163];
  assign LOCKSTEP_Out[164] = \<const0> ;
  assign LOCKSTEP_Out[165] = \<const0> ;
  assign LOCKSTEP_Out[166] = \<const0> ;
  assign LOCKSTEP_Out[167] = \<const0> ;
  assign LOCKSTEP_Out[168] = \<const0> ;
  assign LOCKSTEP_Out[169] = \<const0> ;
  assign LOCKSTEP_Out[170] = \<const0> ;
  assign LOCKSTEP_Out[171] = \<const0> ;
  assign LOCKSTEP_Out[172] = \<const0> ;
  assign LOCKSTEP_Out[173] = \<const0> ;
  assign LOCKSTEP_Out[174] = \<const0> ;
  assign LOCKSTEP_Out[175] = \<const0> ;
  assign LOCKSTEP_Out[176] = \<const0> ;
  assign LOCKSTEP_Out[177] = \<const0> ;
  assign LOCKSTEP_Out[178] = \<const0> ;
  assign LOCKSTEP_Out[179] = \<const0> ;
  assign LOCKSTEP_Out[180] = \<const0> ;
  assign LOCKSTEP_Out[181] = \<const0> ;
  assign LOCKSTEP_Out[182] = \<const0> ;
  assign LOCKSTEP_Out[183] = \<const0> ;
  assign LOCKSTEP_Out[184] = \<const0> ;
  assign LOCKSTEP_Out[185] = \<const0> ;
  assign LOCKSTEP_Out[186] = \<const0> ;
  assign LOCKSTEP_Out[187] = \<const0> ;
  assign LOCKSTEP_Out[188] = \<const0> ;
  assign LOCKSTEP_Out[189] = \<const0> ;
  assign LOCKSTEP_Out[190] = \<const0> ;
  assign LOCKSTEP_Out[191] = \<const0> ;
  assign LOCKSTEP_Out[192] = \<const0> ;
  assign LOCKSTEP_Out[193] = \<const0> ;
  assign LOCKSTEP_Out[194] = \<const0> ;
  assign LOCKSTEP_Out[195] = \<const0> ;
  assign LOCKSTEP_Out[196:202] = \^LOCKSTEP_Out [196:202];
  assign LOCKSTEP_Out[203] = \<const0> ;
  assign LOCKSTEP_Out[204] = \<const0> ;
  assign LOCKSTEP_Out[205] = \<const0> ;
  assign LOCKSTEP_Out[206] = \<const0> ;
  assign LOCKSTEP_Out[207] = \<const0> ;
  assign LOCKSTEP_Out[208] = \<const0> ;
  assign LOCKSTEP_Out[209] = \<const0> ;
  assign LOCKSTEP_Out[210] = \<const0> ;
  assign LOCKSTEP_Out[211] = \<const0> ;
  assign LOCKSTEP_Out[212] = \<const0> ;
  assign LOCKSTEP_Out[213] = \<const0> ;
  assign LOCKSTEP_Out[214] = \<const0> ;
  assign LOCKSTEP_Out[215] = \<const0> ;
  assign LOCKSTEP_Out[216] = \<const0> ;
  assign LOCKSTEP_Out[217] = \<const0> ;
  assign LOCKSTEP_Out[218] = \<const0> ;
  assign LOCKSTEP_Out[219] = \<const0> ;
  assign LOCKSTEP_Out[220] = \<const0> ;
  assign LOCKSTEP_Out[221] = \<const0> ;
  assign LOCKSTEP_Out[222] = \<const0> ;
  assign LOCKSTEP_Out[223] = \<const0> ;
  assign LOCKSTEP_Out[224] = \<const0> ;
  assign LOCKSTEP_Out[225] = \<const0> ;
  assign LOCKSTEP_Out[226] = \<const0> ;
  assign LOCKSTEP_Out[227] = \<const0> ;
  assign LOCKSTEP_Out[228] = \<const0> ;
  assign LOCKSTEP_Out[229] = \<const0> ;
  assign LOCKSTEP_Out[230] = \<const0> ;
  assign LOCKSTEP_Out[231] = \<const0> ;
  assign LOCKSTEP_Out[232] = \<const0> ;
  assign LOCKSTEP_Out[233] = \<const0> ;
  assign LOCKSTEP_Out[234] = \<const0> ;
  assign LOCKSTEP_Out[235] = \<const0> ;
  assign LOCKSTEP_Out[236] = \<const0> ;
  assign LOCKSTEP_Out[237] = \<const0> ;
  assign LOCKSTEP_Out[238] = \<const0> ;
  assign LOCKSTEP_Out[239] = \<const0> ;
  assign LOCKSTEP_Out[240] = \<const0> ;
  assign LOCKSTEP_Out[241] = \<const0> ;
  assign LOCKSTEP_Out[242] = \<const0> ;
  assign LOCKSTEP_Out[243] = \<const0> ;
  assign LOCKSTEP_Out[244] = \<const0> ;
  assign LOCKSTEP_Out[245] = \<const0> ;
  assign LOCKSTEP_Out[246] = \<const0> ;
  assign LOCKSTEP_Out[247] = \<const0> ;
  assign LOCKSTEP_Out[248] = \<const0> ;
  assign LOCKSTEP_Out[249] = \<const0> ;
  assign LOCKSTEP_Out[250] = \<const0> ;
  assign LOCKSTEP_Out[251] = \<const0> ;
  assign LOCKSTEP_Out[252] = \<const0> ;
  assign LOCKSTEP_Out[253] = \<const0> ;
  assign LOCKSTEP_Out[254] = \<const0> ;
  assign LOCKSTEP_Out[255] = \<const0> ;
  assign LOCKSTEP_Out[256] = \<const0> ;
  assign LOCKSTEP_Out[257] = \<const0> ;
  assign LOCKSTEP_Out[258] = \<const0> ;
  assign LOCKSTEP_Out[259] = \<const0> ;
  assign LOCKSTEP_Out[260] = \<const0> ;
  assign LOCKSTEP_Out[261] = \<const0> ;
  assign LOCKSTEP_Out[262] = \<const0> ;
  assign LOCKSTEP_Out[263] = \<const0> ;
  assign LOCKSTEP_Out[264] = \<const0> ;
  assign LOCKSTEP_Out[265] = \<const0> ;
  assign LOCKSTEP_Out[266] = \<const0> ;
  assign LOCKSTEP_Out[267] = \<const0> ;
  assign LOCKSTEP_Out[268] = \<const0> ;
  assign LOCKSTEP_Out[269] = \<const0> ;
  assign LOCKSTEP_Out[270] = \<const0> ;
  assign LOCKSTEP_Out[271] = \<const0> ;
  assign LOCKSTEP_Out[272] = \<const0> ;
  assign LOCKSTEP_Out[273] = \<const0> ;
  assign LOCKSTEP_Out[274] = \<const0> ;
  assign LOCKSTEP_Out[275] = \<const0> ;
  assign LOCKSTEP_Out[276] = \<const0> ;
  assign LOCKSTEP_Out[277] = \<const0> ;
  assign LOCKSTEP_Out[278] = \<const0> ;
  assign LOCKSTEP_Out[279] = \<const0> ;
  assign LOCKSTEP_Out[280] = \<const0> ;
  assign LOCKSTEP_Out[281] = \<const0> ;
  assign LOCKSTEP_Out[282] = \<const0> ;
  assign LOCKSTEP_Out[283] = \<const0> ;
  assign LOCKSTEP_Out[284] = \<const0> ;
  assign LOCKSTEP_Out[285] = \<const0> ;
  assign LOCKSTEP_Out[286] = \<const0> ;
  assign LOCKSTEP_Out[287] = \<const0> ;
  assign LOCKSTEP_Out[288] = \<const0> ;
  assign LOCKSTEP_Out[289] = \<const0> ;
  assign LOCKSTEP_Out[290] = \<const0> ;
  assign LOCKSTEP_Out[291] = \<const0> ;
  assign LOCKSTEP_Out[292] = \<const0> ;
  assign LOCKSTEP_Out[293] = \<const0> ;
  assign LOCKSTEP_Out[294] = \<const0> ;
  assign LOCKSTEP_Out[295] = \<const0> ;
  assign LOCKSTEP_Out[296] = \<const0> ;
  assign LOCKSTEP_Out[297] = \<const0> ;
  assign LOCKSTEP_Out[298] = \<const0> ;
  assign LOCKSTEP_Out[299] = \<const0> ;
  assign LOCKSTEP_Out[300] = \<const0> ;
  assign LOCKSTEP_Out[301] = \<const0> ;
  assign LOCKSTEP_Out[302] = \<const0> ;
  assign LOCKSTEP_Out[303] = \<const0> ;
  assign LOCKSTEP_Out[304] = \<const0> ;
  assign LOCKSTEP_Out[305] = \<const0> ;
  assign LOCKSTEP_Out[306] = \<const0> ;
  assign LOCKSTEP_Out[307] = \<const0> ;
  assign LOCKSTEP_Out[308] = \<const0> ;
  assign LOCKSTEP_Out[309] = \<const0> ;
  assign LOCKSTEP_Out[310] = \<const0> ;
  assign LOCKSTEP_Out[311] = \<const0> ;
  assign LOCKSTEP_Out[312] = \<const0> ;
  assign LOCKSTEP_Out[313] = \<const0> ;
  assign LOCKSTEP_Out[314] = \<const0> ;
  assign LOCKSTEP_Out[315] = \<const0> ;
  assign LOCKSTEP_Out[316] = \<const0> ;
  assign LOCKSTEP_Out[317] = \<const0> ;
  assign LOCKSTEP_Out[318] = \<const0> ;
  assign LOCKSTEP_Out[319] = \<const0> ;
  assign LOCKSTEP_Out[320] = \<const0> ;
  assign LOCKSTEP_Out[321] = \<const0> ;
  assign LOCKSTEP_Out[322] = \<const0> ;
  assign LOCKSTEP_Out[323] = \<const0> ;
  assign LOCKSTEP_Out[324] = \<const0> ;
  assign LOCKSTEP_Out[325] = \<const0> ;
  assign LOCKSTEP_Out[326] = \<const0> ;
  assign LOCKSTEP_Out[327] = \<const0> ;
  assign LOCKSTEP_Out[328] = \<const0> ;
  assign LOCKSTEP_Out[329] = \<const0> ;
  assign LOCKSTEP_Out[330] = \<const0> ;
  assign LOCKSTEP_Out[331] = \<const0> ;
  assign LOCKSTEP_Out[332] = \<const0> ;
  assign LOCKSTEP_Out[333] = \<const0> ;
  assign LOCKSTEP_Out[334] = \<const0> ;
  assign LOCKSTEP_Out[335] = \<const0> ;
  assign LOCKSTEP_Out[336] = \<const0> ;
  assign LOCKSTEP_Out[337] = \<const0> ;
  assign LOCKSTEP_Out[338] = \<const0> ;
  assign LOCKSTEP_Out[339] = \<const0> ;
  assign LOCKSTEP_Out[340] = \<const0> ;
  assign LOCKSTEP_Out[341] = \<const0> ;
  assign LOCKSTEP_Out[342] = \<const0> ;
  assign LOCKSTEP_Out[343] = \<const0> ;
  assign LOCKSTEP_Out[344] = \<const0> ;
  assign LOCKSTEP_Out[345] = \<const0> ;
  assign LOCKSTEP_Out[346] = \<const0> ;
  assign LOCKSTEP_Out[347] = \<const0> ;
  assign LOCKSTEP_Out[348] = \<const0> ;
  assign LOCKSTEP_Out[349] = \<const0> ;
  assign LOCKSTEP_Out[350] = \<const0> ;
  assign LOCKSTEP_Out[351] = \<const0> ;
  assign LOCKSTEP_Out[352] = \<const0> ;
  assign LOCKSTEP_Out[353] = \<const0> ;
  assign LOCKSTEP_Out[354] = \<const0> ;
  assign LOCKSTEP_Out[355] = \<const0> ;
  assign LOCKSTEP_Out[356] = \<const0> ;
  assign LOCKSTEP_Out[357] = \<const0> ;
  assign LOCKSTEP_Out[358] = \<const0> ;
  assign LOCKSTEP_Out[359] = \<const0> ;
  assign LOCKSTEP_Out[360] = \<const0> ;
  assign LOCKSTEP_Out[361] = \<const0> ;
  assign LOCKSTEP_Out[362] = \<const0> ;
  assign LOCKSTEP_Out[363] = \<const0> ;
  assign LOCKSTEP_Out[364] = \<const0> ;
  assign LOCKSTEP_Out[365] = \<const0> ;
  assign LOCKSTEP_Out[366] = \<const0> ;
  assign LOCKSTEP_Out[367] = \<const0> ;
  assign LOCKSTEP_Out[368] = \<const0> ;
  assign LOCKSTEP_Out[369] = \<const0> ;
  assign LOCKSTEP_Out[370] = \<const0> ;
  assign LOCKSTEP_Out[371] = \<const0> ;
  assign LOCKSTEP_Out[372] = \<const0> ;
  assign LOCKSTEP_Out[373] = \<const0> ;
  assign LOCKSTEP_Out[374] = \<const0> ;
  assign LOCKSTEP_Out[375] = \<const0> ;
  assign LOCKSTEP_Out[376] = \<const0> ;
  assign LOCKSTEP_Out[377] = \<const0> ;
  assign LOCKSTEP_Out[378] = \<const0> ;
  assign LOCKSTEP_Out[379] = \<const0> ;
  assign LOCKSTEP_Out[380] = \<const0> ;
  assign LOCKSTEP_Out[381] = \<const0> ;
  assign LOCKSTEP_Out[382] = \<const0> ;
  assign LOCKSTEP_Out[383] = \<const0> ;
  assign LOCKSTEP_Out[384] = \<const0> ;
  assign LOCKSTEP_Out[385] = \<const0> ;
  assign LOCKSTEP_Out[386] = \<const0> ;
  assign LOCKSTEP_Out[387] = \<const0> ;
  assign LOCKSTEP_Out[388] = \<const0> ;
  assign LOCKSTEP_Out[389] = \<const0> ;
  assign LOCKSTEP_Out[390] = \<const0> ;
  assign LOCKSTEP_Out[391] = \<const0> ;
  assign LOCKSTEP_Out[392] = \<const0> ;
  assign LOCKSTEP_Out[393] = \<const0> ;
  assign LOCKSTEP_Out[394] = \<const0> ;
  assign LOCKSTEP_Out[395] = \<const0> ;
  assign LOCKSTEP_Out[396] = \<const0> ;
  assign LOCKSTEP_Out[397] = \<const0> ;
  assign LOCKSTEP_Out[398] = \<const0> ;
  assign LOCKSTEP_Out[399] = \<const0> ;
  assign LOCKSTEP_Out[400] = \<const0> ;
  assign LOCKSTEP_Out[401] = \<const0> ;
  assign LOCKSTEP_Out[402] = \<const0> ;
  assign LOCKSTEP_Out[403] = \<const0> ;
  assign LOCKSTEP_Out[404] = \<const0> ;
  assign LOCKSTEP_Out[405] = \<const0> ;
  assign LOCKSTEP_Out[406] = \<const0> ;
  assign LOCKSTEP_Out[407] = \<const0> ;
  assign LOCKSTEP_Out[408] = \<const0> ;
  assign LOCKSTEP_Out[409] = \<const0> ;
  assign LOCKSTEP_Out[410] = \<const0> ;
  assign LOCKSTEP_Out[411] = \<const0> ;
  assign LOCKSTEP_Out[412] = \<const0> ;
  assign LOCKSTEP_Out[413] = \<const0> ;
  assign LOCKSTEP_Out[414] = \<const0> ;
  assign LOCKSTEP_Out[415] = \<const0> ;
  assign LOCKSTEP_Out[416] = \<const0> ;
  assign LOCKSTEP_Out[417] = \<const0> ;
  assign LOCKSTEP_Out[418] = \<const0> ;
  assign LOCKSTEP_Out[419] = \<const0> ;
  assign LOCKSTEP_Out[420] = \<const0> ;
  assign LOCKSTEP_Out[421] = \<const0> ;
  assign LOCKSTEP_Out[422] = \<const0> ;
  assign LOCKSTEP_Out[423] = \<const0> ;
  assign LOCKSTEP_Out[424] = \<const0> ;
  assign LOCKSTEP_Out[425] = \<const0> ;
  assign LOCKSTEP_Out[426] = \<const0> ;
  assign LOCKSTEP_Out[427] = \<const0> ;
  assign LOCKSTEP_Out[428] = \<const0> ;
  assign LOCKSTEP_Out[429] = \<const0> ;
  assign LOCKSTEP_Out[430] = \<const0> ;
  assign LOCKSTEP_Out[431] = \<const0> ;
  assign LOCKSTEP_Out[432] = \<const0> ;
  assign LOCKSTEP_Out[433] = \<const0> ;
  assign LOCKSTEP_Out[434] = \<const0> ;
  assign LOCKSTEP_Out[435] = \<const0> ;
  assign LOCKSTEP_Out[436] = \<const0> ;
  assign LOCKSTEP_Out[437] = \<const0> ;
  assign LOCKSTEP_Out[438] = \<const0> ;
  assign LOCKSTEP_Out[439] = \<const0> ;
  assign LOCKSTEP_Out[440] = \<const0> ;
  assign LOCKSTEP_Out[441] = \<const0> ;
  assign LOCKSTEP_Out[442] = \<const0> ;
  assign LOCKSTEP_Out[443] = \<const0> ;
  assign LOCKSTEP_Out[444] = \<const0> ;
  assign LOCKSTEP_Out[445] = \<const0> ;
  assign LOCKSTEP_Out[446] = \<const0> ;
  assign LOCKSTEP_Out[447] = \<const0> ;
  assign LOCKSTEP_Out[448] = \<const0> ;
  assign LOCKSTEP_Out[449] = \<const0> ;
  assign LOCKSTEP_Out[450] = \<const0> ;
  assign LOCKSTEP_Out[451] = \<const0> ;
  assign LOCKSTEP_Out[452] = \<const0> ;
  assign LOCKSTEP_Out[453] = \<const0> ;
  assign LOCKSTEP_Out[454] = \<const0> ;
  assign LOCKSTEP_Out[455] = \<const0> ;
  assign LOCKSTEP_Out[456] = \<const0> ;
  assign LOCKSTEP_Out[457] = \<const0> ;
  assign LOCKSTEP_Out[458] = \<const0> ;
  assign LOCKSTEP_Out[459] = \<const0> ;
  assign LOCKSTEP_Out[460] = \<const0> ;
  assign LOCKSTEP_Out[461] = \<const0> ;
  assign LOCKSTEP_Out[462] = \<const0> ;
  assign LOCKSTEP_Out[463] = \<const0> ;
  assign LOCKSTEP_Out[464] = \<const0> ;
  assign LOCKSTEP_Out[465] = \<const0> ;
  assign LOCKSTEP_Out[466:497] = \^LOCKSTEP_Out [632:663];
  assign LOCKSTEP_Out[498] = \<const0> ;
  assign LOCKSTEP_Out[499] = \<const0> ;
  assign LOCKSTEP_Out[500] = \<const0> ;
  assign LOCKSTEP_Out[501] = \<const0> ;
  assign LOCKSTEP_Out[502] = \<const0> ;
  assign LOCKSTEP_Out[503] = \<const0> ;
  assign LOCKSTEP_Out[504] = \<const0> ;
  assign LOCKSTEP_Out[505] = \<const0> ;
  assign LOCKSTEP_Out[506] = \<const0> ;
  assign LOCKSTEP_Out[507] = \<const0> ;
  assign LOCKSTEP_Out[508] = \<const0> ;
  assign LOCKSTEP_Out[509] = \<const0> ;
  assign LOCKSTEP_Out[510] = \<const0> ;
  assign LOCKSTEP_Out[511] = \<const0> ;
  assign LOCKSTEP_Out[512] = \<const0> ;
  assign LOCKSTEP_Out[513] = \<const0> ;
  assign LOCKSTEP_Out[514] = \<const0> ;
  assign LOCKSTEP_Out[515] = \<const0> ;
  assign LOCKSTEP_Out[516] = \<const0> ;
  assign LOCKSTEP_Out[517] = \<const0> ;
  assign LOCKSTEP_Out[518] = \<const0> ;
  assign LOCKSTEP_Out[519] = \<const0> ;
  assign LOCKSTEP_Out[520] = \<const0> ;
  assign LOCKSTEP_Out[521] = \<const0> ;
  assign LOCKSTEP_Out[522] = \<const0> ;
  assign LOCKSTEP_Out[523] = \<const0> ;
  assign LOCKSTEP_Out[524] = \<const0> ;
  assign LOCKSTEP_Out[525] = \<const0> ;
  assign LOCKSTEP_Out[526] = \<const0> ;
  assign LOCKSTEP_Out[527] = \<const0> ;
  assign LOCKSTEP_Out[528] = \<const0> ;
  assign LOCKSTEP_Out[529] = \<const0> ;
  assign LOCKSTEP_Out[530] = \<const0> ;
  assign LOCKSTEP_Out[531] = \<const0> ;
  assign LOCKSTEP_Out[532] = \<const0> ;
  assign LOCKSTEP_Out[533] = \<const0> ;
  assign LOCKSTEP_Out[534] = \<const0> ;
  assign LOCKSTEP_Out[535] = \<const0> ;
  assign LOCKSTEP_Out[536] = \<const0> ;
  assign LOCKSTEP_Out[537] = \<const0> ;
  assign LOCKSTEP_Out[538] = \<const0> ;
  assign LOCKSTEP_Out[539] = \^LOCKSTEP_Out [542];
  assign LOCKSTEP_Out[540] = \<const0> ;
  assign LOCKSTEP_Out[541] = \<const0> ;
  assign LOCKSTEP_Out[542] = \^LOCKSTEP_Out [542];
  assign LOCKSTEP_Out[543] = \<const0> ;
  assign LOCKSTEP_Out[544] = \<const0> ;
  assign LOCKSTEP_Out[545] = \<const0> ;
  assign LOCKSTEP_Out[546] = \^LOCKSTEP_Out [542];
  assign LOCKSTEP_Out[547] = \^LOCKSTEP_Out [542];
  assign LOCKSTEP_Out[548] = \<const0> ;
  assign LOCKSTEP_Out[549] = \<const0> ;
  assign LOCKSTEP_Out[550] = \<const0> ;
  assign LOCKSTEP_Out[551] = \^LOCKSTEP_Out [542];
  assign LOCKSTEP_Out[552] = \<const0> ;
  assign LOCKSTEP_Out[553] = \<const0> ;
  assign LOCKSTEP_Out[554] = \<const0> ;
  assign LOCKSTEP_Out[555:587] = \^LOCKSTEP_Out [555:587];
  assign LOCKSTEP_Out[588] = \<const0> ;
  assign LOCKSTEP_Out[589] = \<const0> ;
  assign LOCKSTEP_Out[590] = \<const0> ;
  assign LOCKSTEP_Out[591] = \<const0> ;
  assign LOCKSTEP_Out[592] = \<const0> ;
  assign LOCKSTEP_Out[593] = \<const0> ;
  assign LOCKSTEP_Out[594] = \<const0> ;
  assign LOCKSTEP_Out[595] = \<const0> ;
  assign LOCKSTEP_Out[596] = \<const0> ;
  assign LOCKSTEP_Out[597] = \<const0> ;
  assign LOCKSTEP_Out[598] = \<const0> ;
  assign LOCKSTEP_Out[599] = \<const0> ;
  assign LOCKSTEP_Out[600] = \<const0> ;
  assign LOCKSTEP_Out[601] = \<const0> ;
  assign LOCKSTEP_Out[602] = \<const0> ;
  assign LOCKSTEP_Out[603] = \<const0> ;
  assign LOCKSTEP_Out[604] = \<const0> ;
  assign LOCKSTEP_Out[605] = \<const0> ;
  assign LOCKSTEP_Out[606] = \<const0> ;
  assign LOCKSTEP_Out[607] = \<const0> ;
  assign LOCKSTEP_Out[608] = \<const0> ;
  assign LOCKSTEP_Out[609] = \<const0> ;
  assign LOCKSTEP_Out[610] = \<const0> ;
  assign LOCKSTEP_Out[611] = \<const0> ;
  assign LOCKSTEP_Out[612] = \<const0> ;
  assign LOCKSTEP_Out[613] = \<const0> ;
  assign LOCKSTEP_Out[614] = \<const0> ;
  assign LOCKSTEP_Out[615] = \<const0> ;
  assign LOCKSTEP_Out[616] = \<const0> ;
  assign LOCKSTEP_Out[617] = \<const0> ;
  assign LOCKSTEP_Out[618] = \<const0> ;
  assign LOCKSTEP_Out[619] = \<const0> ;
  assign LOCKSTEP_Out[620:623] = \^LOCKSTEP_Out [620:623];
  assign LOCKSTEP_Out[624] = \<const0> ;
  assign LOCKSTEP_Out[625] = \<const0> ;
  assign LOCKSTEP_Out[626] = \<const0> ;
  assign LOCKSTEP_Out[627] = \<const0> ;
  assign LOCKSTEP_Out[628] = \^LOCKSTEP_Out [542];
  assign LOCKSTEP_Out[629] = \^LOCKSTEP_Out [629];
  assign LOCKSTEP_Out[630] = \^LOCKSTEP_Out [542];
  assign LOCKSTEP_Out[631] = \<const0> ;
  assign LOCKSTEP_Out[632:663] = \^LOCKSTEP_Out [632:663];
  assign LOCKSTEP_Out[664] = \<const0> ;
  assign LOCKSTEP_Out[665] = \<const0> ;
  assign LOCKSTEP_Out[666] = \<const0> ;
  assign LOCKSTEP_Out[667] = \<const0> ;
  assign LOCKSTEP_Out[668] = \<const0> ;
  assign LOCKSTEP_Out[669] = \<const0> ;
  assign LOCKSTEP_Out[670] = \<const0> ;
  assign LOCKSTEP_Out[671] = \<const0> ;
  assign LOCKSTEP_Out[672] = \<const0> ;
  assign LOCKSTEP_Out[673] = \<const0> ;
  assign LOCKSTEP_Out[674] = \<const0> ;
  assign LOCKSTEP_Out[675] = \<const0> ;
  assign LOCKSTEP_Out[676] = \<const0> ;
  assign LOCKSTEP_Out[677] = \<const0> ;
  assign LOCKSTEP_Out[678] = \<const0> ;
  assign LOCKSTEP_Out[679] = \<const0> ;
  assign LOCKSTEP_Out[680] = \<const0> ;
  assign LOCKSTEP_Out[681] = \<const0> ;
  assign LOCKSTEP_Out[682] = \<const0> ;
  assign LOCKSTEP_Out[683] = \<const0> ;
  assign LOCKSTEP_Out[684] = \<const0> ;
  assign LOCKSTEP_Out[685] = \<const0> ;
  assign LOCKSTEP_Out[686] = \<const0> ;
  assign LOCKSTEP_Out[687] = \<const0> ;
  assign LOCKSTEP_Out[688] = \<const0> ;
  assign LOCKSTEP_Out[689] = \<const0> ;
  assign LOCKSTEP_Out[690] = \<const0> ;
  assign LOCKSTEP_Out[691] = \<const0> ;
  assign LOCKSTEP_Out[692] = \<const0> ;
  assign LOCKSTEP_Out[693] = \<const0> ;
  assign LOCKSTEP_Out[694] = \<const0> ;
  assign LOCKSTEP_Out[695] = \<const0> ;
  assign LOCKSTEP_Out[696] = \<const0> ;
  assign LOCKSTEP_Out[697] = \<const0> ;
  assign LOCKSTEP_Out[698] = \<const0> ;
  assign LOCKSTEP_Out[699] = \<const0> ;
  assign LOCKSTEP_Out[700] = \<const0> ;
  assign LOCKSTEP_Out[701] = \<const0> ;
  assign LOCKSTEP_Out[702] = \<const0> ;
  assign LOCKSTEP_Out[703] = \<const0> ;
  assign LOCKSTEP_Out[704] = \<const0> ;
  assign LOCKSTEP_Out[705] = \^LOCKSTEP_Out [542];
  assign LOCKSTEP_Out[706] = \<const0> ;
  assign LOCKSTEP_Out[707] = \<const0> ;
  assign LOCKSTEP_Out[708] = \^LOCKSTEP_Out [542];
  assign LOCKSTEP_Out[709] = \<const0> ;
  assign LOCKSTEP_Out[710] = \<const0> ;
  assign LOCKSTEP_Out[711] = \<const0> ;
  assign LOCKSTEP_Out[712] = \^LOCKSTEP_Out [542];
  assign LOCKSTEP_Out[713] = \^LOCKSTEP_Out [542];
  assign LOCKSTEP_Out[714] = \<const0> ;
  assign LOCKSTEP_Out[715] = \<const0> ;
  assign LOCKSTEP_Out[716] = \<const0> ;
  assign LOCKSTEP_Out[717] = \^LOCKSTEP_Out [542];
  assign LOCKSTEP_Out[718] = \<const0> ;
  assign LOCKSTEP_Out[719] = \<const0> ;
  assign LOCKSTEP_Out[720] = \<const0> ;
  assign LOCKSTEP_Out[721] = \^LOCKSTEP_Out [721];
  assign LOCKSTEP_Out[722] = \^LOCKSTEP_Out [542];
  assign LOCKSTEP_Out[723] = \<const0> ;
  assign LOCKSTEP_Out[724] = \<const0> ;
  assign LOCKSTEP_Out[725] = \<const0> ;
  assign LOCKSTEP_Out[726] = \<const0> ;
  assign LOCKSTEP_Out[727] = \<const0> ;
  assign LOCKSTEP_Out[728] = \<const0> ;
  assign LOCKSTEP_Out[729] = \<const0> ;
  assign LOCKSTEP_Out[730] = \<const0> ;
  assign LOCKSTEP_Out[731] = \<const0> ;
  assign LOCKSTEP_Out[732] = \<const0> ;
  assign LOCKSTEP_Out[733] = \<const0> ;
  assign LOCKSTEP_Out[734] = \<const0> ;
  assign LOCKSTEP_Out[735] = \<const0> ;
  assign LOCKSTEP_Out[736] = \<const0> ;
  assign LOCKSTEP_Out[737] = \<const0> ;
  assign LOCKSTEP_Out[738] = \<const0> ;
  assign LOCKSTEP_Out[739] = \<const0> ;
  assign LOCKSTEP_Out[740] = \<const0> ;
  assign LOCKSTEP_Out[741] = \<const0> ;
  assign LOCKSTEP_Out[742] = \<const0> ;
  assign LOCKSTEP_Out[743] = \<const0> ;
  assign LOCKSTEP_Out[744] = \<const0> ;
  assign LOCKSTEP_Out[745] = \<const0> ;
  assign LOCKSTEP_Out[746] = \<const0> ;
  assign LOCKSTEP_Out[747] = \<const0> ;
  assign LOCKSTEP_Out[748] = \<const0> ;
  assign LOCKSTEP_Out[749] = \<const0> ;
  assign LOCKSTEP_Out[750] = \<const0> ;
  assign LOCKSTEP_Out[751] = \<const0> ;
  assign LOCKSTEP_Out[752] = \<const0> ;
  assign LOCKSTEP_Out[753] = \<const0> ;
  assign LOCKSTEP_Out[754] = \<const0> ;
  assign LOCKSTEP_Out[755] = \<const0> ;
  assign LOCKSTEP_Out[756] = \<const0> ;
  assign LOCKSTEP_Out[757] = \<const0> ;
  assign LOCKSTEP_Out[758] = \<const0> ;
  assign LOCKSTEP_Out[759] = \<const0> ;
  assign LOCKSTEP_Out[760] = \<const0> ;
  assign LOCKSTEP_Out[761] = \<const0> ;
  assign LOCKSTEP_Out[762] = \<const0> ;
  assign LOCKSTEP_Out[763] = \<const0> ;
  assign LOCKSTEP_Out[764] = \<const0> ;
  assign LOCKSTEP_Out[765] = \<const0> ;
  assign LOCKSTEP_Out[766] = \<const0> ;
  assign LOCKSTEP_Out[767] = \<const0> ;
  assign LOCKSTEP_Out[768] = \<const0> ;
  assign LOCKSTEP_Out[769] = \<const0> ;
  assign LOCKSTEP_Out[770] = \<const0> ;
  assign LOCKSTEP_Out[771] = \<const0> ;
  assign LOCKSTEP_Out[772] = \<const0> ;
  assign LOCKSTEP_Out[773] = \<const0> ;
  assign LOCKSTEP_Out[774] = \<const0> ;
  assign LOCKSTEP_Out[775] = \<const0> ;
  assign LOCKSTEP_Out[776] = \<const0> ;
  assign LOCKSTEP_Out[777] = \<const0> ;
  assign LOCKSTEP_Out[778] = \<const0> ;
  assign LOCKSTEP_Out[779] = \<const0> ;
  assign LOCKSTEP_Out[780] = \<const0> ;
  assign LOCKSTEP_Out[781] = \<const0> ;
  assign LOCKSTEP_Out[782] = \<const0> ;
  assign LOCKSTEP_Out[783] = \<const0> ;
  assign LOCKSTEP_Out[784] = \<const0> ;
  assign LOCKSTEP_Out[785] = \<const0> ;
  assign LOCKSTEP_Out[786] = \<const0> ;
  assign LOCKSTEP_Out[787] = \<const0> ;
  assign LOCKSTEP_Out[788] = \<const0> ;
  assign LOCKSTEP_Out[789] = \<const0> ;
  assign LOCKSTEP_Out[790] = \<const0> ;
  assign LOCKSTEP_Out[791] = \<const0> ;
  assign LOCKSTEP_Out[792] = \<const0> ;
  assign LOCKSTEP_Out[793] = \<const0> ;
  assign LOCKSTEP_Out[794] = \<const0> ;
  assign LOCKSTEP_Out[795] = \<const0> ;
  assign LOCKSTEP_Out[796] = \<const0> ;
  assign LOCKSTEP_Out[797] = \<const0> ;
  assign LOCKSTEP_Out[798] = \<const0> ;
  assign LOCKSTEP_Out[799] = \<const0> ;
  assign LOCKSTEP_Out[800] = \<const0> ;
  assign LOCKSTEP_Out[801] = \<const0> ;
  assign LOCKSTEP_Out[802] = \<const0> ;
  assign LOCKSTEP_Out[803] = \<const0> ;
  assign LOCKSTEP_Out[804] = \<const0> ;
  assign LOCKSTEP_Out[805] = \<const0> ;
  assign LOCKSTEP_Out[806] = \<const0> ;
  assign LOCKSTEP_Out[807] = \<const0> ;
  assign LOCKSTEP_Out[808] = \<const0> ;
  assign LOCKSTEP_Out[809] = \<const0> ;
  assign LOCKSTEP_Out[810] = \<const0> ;
  assign LOCKSTEP_Out[811] = \<const0> ;
  assign LOCKSTEP_Out[812] = \<const0> ;
  assign LOCKSTEP_Out[813] = \<const0> ;
  assign LOCKSTEP_Out[814] = \<const0> ;
  assign LOCKSTEP_Out[815] = \<const0> ;
  assign LOCKSTEP_Out[816] = \<const0> ;
  assign LOCKSTEP_Out[817] = \<const0> ;
  assign LOCKSTEP_Out[818] = \<const0> ;
  assign LOCKSTEP_Out[819] = \<const0> ;
  assign LOCKSTEP_Out[820] = \<const0> ;
  assign LOCKSTEP_Out[821] = \<const0> ;
  assign LOCKSTEP_Out[822] = \<const0> ;
  assign LOCKSTEP_Out[823] = \<const0> ;
  assign LOCKSTEP_Out[824] = \<const0> ;
  assign LOCKSTEP_Out[825] = \<const0> ;
  assign LOCKSTEP_Out[826] = \<const0> ;
  assign LOCKSTEP_Out[827] = \<const0> ;
  assign LOCKSTEP_Out[828] = \<const0> ;
  assign LOCKSTEP_Out[829] = \<const0> ;
  assign LOCKSTEP_Out[830] = \<const0> ;
  assign LOCKSTEP_Out[831] = \<const0> ;
  assign LOCKSTEP_Out[832] = \<const0> ;
  assign LOCKSTEP_Out[833] = \<const0> ;
  assign LOCKSTEP_Out[834] = \<const0> ;
  assign LOCKSTEP_Out[835] = \<const0> ;
  assign LOCKSTEP_Out[836] = \<const0> ;
  assign LOCKSTEP_Out[837] = \<const0> ;
  assign LOCKSTEP_Out[838] = \<const0> ;
  assign LOCKSTEP_Out[839] = \<const0> ;
  assign LOCKSTEP_Out[840] = \<const0> ;
  assign LOCKSTEP_Out[841] = \<const0> ;
  assign LOCKSTEP_Out[842] = \<const0> ;
  assign LOCKSTEP_Out[843] = \<const0> ;
  assign LOCKSTEP_Out[844] = \<const0> ;
  assign LOCKSTEP_Out[845] = \<const0> ;
  assign LOCKSTEP_Out[846] = \<const0> ;
  assign LOCKSTEP_Out[847] = \<const0> ;
  assign LOCKSTEP_Out[848] = \<const0> ;
  assign LOCKSTEP_Out[849] = \<const0> ;
  assign LOCKSTEP_Out[850] = \<const0> ;
  assign LOCKSTEP_Out[851] = \<const0> ;
  assign LOCKSTEP_Out[852] = \<const0> ;
  assign LOCKSTEP_Out[853] = \<const0> ;
  assign LOCKSTEP_Out[854] = \<const0> ;
  assign LOCKSTEP_Out[855] = \<const0> ;
  assign LOCKSTEP_Out[856] = \<const0> ;
  assign LOCKSTEP_Out[857] = \<const0> ;
  assign LOCKSTEP_Out[858] = \<const0> ;
  assign LOCKSTEP_Out[859] = \<const0> ;
  assign LOCKSTEP_Out[860] = \<const0> ;
  assign LOCKSTEP_Out[861] = \<const0> ;
  assign LOCKSTEP_Out[862] = \<const0> ;
  assign LOCKSTEP_Out[863] = \<const0> ;
  assign LOCKSTEP_Out[864] = \<const0> ;
  assign LOCKSTEP_Out[865] = \<const0> ;
  assign LOCKSTEP_Out[866] = \<const0> ;
  assign LOCKSTEP_Out[867] = \<const0> ;
  assign LOCKSTEP_Out[868] = \<const0> ;
  assign LOCKSTEP_Out[869] = \<const0> ;
  assign LOCKSTEP_Out[870] = \<const0> ;
  assign LOCKSTEP_Out[871] = \<const0> ;
  assign LOCKSTEP_Out[872] = \<const0> ;
  assign LOCKSTEP_Out[873] = \<const0> ;
  assign LOCKSTEP_Out[874] = \<const0> ;
  assign LOCKSTEP_Out[875] = \<const0> ;
  assign LOCKSTEP_Out[876] = \<const0> ;
  assign LOCKSTEP_Out[877] = \<const0> ;
  assign LOCKSTEP_Out[878] = \<const0> ;
  assign LOCKSTEP_Out[879] = \<const0> ;
  assign LOCKSTEP_Out[880] = \<const0> ;
  assign LOCKSTEP_Out[881] = \<const0> ;
  assign LOCKSTEP_Out[882] = \<const0> ;
  assign LOCKSTEP_Out[883] = \<const0> ;
  assign LOCKSTEP_Out[884] = \<const0> ;
  assign LOCKSTEP_Out[885] = \<const0> ;
  assign LOCKSTEP_Out[886] = \<const0> ;
  assign LOCKSTEP_Out[887] = \<const0> ;
  assign LOCKSTEP_Out[888] = \<const0> ;
  assign LOCKSTEP_Out[889] = \<const0> ;
  assign LOCKSTEP_Out[890] = \<const0> ;
  assign LOCKSTEP_Out[891] = \<const0> ;
  assign LOCKSTEP_Out[892] = \<const0> ;
  assign LOCKSTEP_Out[893] = \<const0> ;
  assign LOCKSTEP_Out[894] = \<const0> ;
  assign LOCKSTEP_Out[895] = \<const0> ;
  assign LOCKSTEP_Out[896] = \<const0> ;
  assign LOCKSTEP_Out[897] = \<const0> ;
  assign LOCKSTEP_Out[898] = \<const0> ;
  assign LOCKSTEP_Out[899] = \<const0> ;
  assign LOCKSTEP_Out[900] = \<const0> ;
  assign LOCKSTEP_Out[901] = \<const0> ;
  assign LOCKSTEP_Out[902] = \<const0> ;
  assign LOCKSTEP_Out[903] = \<const0> ;
  assign LOCKSTEP_Out[904] = \<const0> ;
  assign LOCKSTEP_Out[905] = \<const0> ;
  assign LOCKSTEP_Out[906] = \<const0> ;
  assign LOCKSTEP_Out[907] = \<const0> ;
  assign LOCKSTEP_Out[908] = \<const0> ;
  assign LOCKSTEP_Out[909] = \<const0> ;
  assign LOCKSTEP_Out[910] = \<const0> ;
  assign LOCKSTEP_Out[911] = \<const0> ;
  assign LOCKSTEP_Out[912] = \<const0> ;
  assign LOCKSTEP_Out[913] = \<const0> ;
  assign LOCKSTEP_Out[914] = \<const0> ;
  assign LOCKSTEP_Out[915] = \<const0> ;
  assign LOCKSTEP_Out[916] = \<const0> ;
  assign LOCKSTEP_Out[917] = \<const0> ;
  assign LOCKSTEP_Out[918] = \<const0> ;
  assign LOCKSTEP_Out[919] = \<const0> ;
  assign LOCKSTEP_Out[920] = \<const0> ;
  assign LOCKSTEP_Out[921] = \<const0> ;
  assign LOCKSTEP_Out[922] = \<const0> ;
  assign LOCKSTEP_Out[923] = \<const0> ;
  assign LOCKSTEP_Out[924] = \<const0> ;
  assign LOCKSTEP_Out[925] = \<const0> ;
  assign LOCKSTEP_Out[926] = \<const0> ;
  assign LOCKSTEP_Out[927] = \<const0> ;
  assign LOCKSTEP_Out[928] = \<const0> ;
  assign LOCKSTEP_Out[929] = \<const0> ;
  assign LOCKSTEP_Out[930] = \<const0> ;
  assign LOCKSTEP_Out[931] = \<const0> ;
  assign LOCKSTEP_Out[932] = \<const0> ;
  assign LOCKSTEP_Out[933] = \<const0> ;
  assign LOCKSTEP_Out[934] = \<const0> ;
  assign LOCKSTEP_Out[935] = \<const0> ;
  assign LOCKSTEP_Out[936] = \<const0> ;
  assign LOCKSTEP_Out[937] = \<const0> ;
  assign LOCKSTEP_Out[938] = \<const0> ;
  assign LOCKSTEP_Out[939] = \<const0> ;
  assign LOCKSTEP_Out[940] = \<const0> ;
  assign LOCKSTEP_Out[941] = \<const0> ;
  assign LOCKSTEP_Out[942] = \<const0> ;
  assign LOCKSTEP_Out[943] = \<const0> ;
  assign LOCKSTEP_Out[944] = \<const0> ;
  assign LOCKSTEP_Out[945] = \<const0> ;
  assign LOCKSTEP_Out[946] = \<const0> ;
  assign LOCKSTEP_Out[947] = \<const0> ;
  assign LOCKSTEP_Out[948] = \<const0> ;
  assign LOCKSTEP_Out[949] = \<const0> ;
  assign LOCKSTEP_Out[950] = \<const0> ;
  assign LOCKSTEP_Out[951] = \<const0> ;
  assign LOCKSTEP_Out[952] = \<const0> ;
  assign LOCKSTEP_Out[953] = \<const0> ;
  assign LOCKSTEP_Out[954] = \<const0> ;
  assign LOCKSTEP_Out[955] = \<const0> ;
  assign LOCKSTEP_Out[956] = \<const0> ;
  assign LOCKSTEP_Out[957] = \<const0> ;
  assign LOCKSTEP_Out[958] = \<const0> ;
  assign LOCKSTEP_Out[959] = \<const0> ;
  assign LOCKSTEP_Out[960] = \<const0> ;
  assign LOCKSTEP_Out[961] = \<const0> ;
  assign LOCKSTEP_Out[962] = \<const0> ;
  assign LOCKSTEP_Out[963] = \<const0> ;
  assign LOCKSTEP_Out[964] = \<const0> ;
  assign LOCKSTEP_Out[965] = \<const0> ;
  assign LOCKSTEP_Out[966] = \<const0> ;
  assign LOCKSTEP_Out[967] = \<const0> ;
  assign LOCKSTEP_Out[968] = \<const0> ;
  assign LOCKSTEP_Out[969] = \<const0> ;
  assign LOCKSTEP_Out[970] = \<const0> ;
  assign LOCKSTEP_Out[971] = \<const0> ;
  assign LOCKSTEP_Out[972] = \<const0> ;
  assign LOCKSTEP_Out[973] = \<const0> ;
  assign LOCKSTEP_Out[974] = \<const0> ;
  assign LOCKSTEP_Out[975] = \<const0> ;
  assign LOCKSTEP_Out[976] = \<const0> ;
  assign LOCKSTEP_Out[977] = \<const0> ;
  assign LOCKSTEP_Out[978] = \<const0> ;
  assign LOCKSTEP_Out[979] = \<const0> ;
  assign LOCKSTEP_Out[980] = \<const0> ;
  assign LOCKSTEP_Out[981] = \<const0> ;
  assign LOCKSTEP_Out[982] = \<const0> ;
  assign LOCKSTEP_Out[983] = \<const0> ;
  assign LOCKSTEP_Out[984] = \<const0> ;
  assign LOCKSTEP_Out[985] = \<const0> ;
  assign LOCKSTEP_Out[986] = \<const0> ;
  assign LOCKSTEP_Out[987] = \<const0> ;
  assign LOCKSTEP_Out[988] = \<const0> ;
  assign LOCKSTEP_Out[989] = \<const0> ;
  assign LOCKSTEP_Out[990] = \<const0> ;
  assign LOCKSTEP_Out[991] = \<const0> ;
  assign LOCKSTEP_Out[992] = \<const0> ;
  assign LOCKSTEP_Out[993] = \<const0> ;
  assign LOCKSTEP_Out[994] = \<const0> ;
  assign LOCKSTEP_Out[995] = \<const0> ;
  assign LOCKSTEP_Out[996] = \<const0> ;
  assign LOCKSTEP_Out[997] = \<const0> ;
  assign LOCKSTEP_Out[998] = \<const0> ;
  assign LOCKSTEP_Out[999] = \<const0> ;
  assign LOCKSTEP_Out[1000] = \<const0> ;
  assign LOCKSTEP_Out[1001] = \<const0> ;
  assign LOCKSTEP_Out[1002] = \<const0> ;
  assign LOCKSTEP_Out[1003] = \<const0> ;
  assign LOCKSTEP_Out[1004] = \<const0> ;
  assign LOCKSTEP_Out[1005] = \<const0> ;
  assign LOCKSTEP_Out[1006] = \<const0> ;
  assign LOCKSTEP_Out[1007] = \<const0> ;
  assign LOCKSTEP_Out[1008] = \<const0> ;
  assign LOCKSTEP_Out[1009] = \<const0> ;
  assign LOCKSTEP_Out[1010] = \<const0> ;
  assign LOCKSTEP_Out[1011] = \<const0> ;
  assign LOCKSTEP_Out[1012] = \<const0> ;
  assign LOCKSTEP_Out[1013] = \<const0> ;
  assign LOCKSTEP_Out[1014] = \<const0> ;
  assign LOCKSTEP_Out[1015] = \<const0> ;
  assign LOCKSTEP_Out[1016] = \<const0> ;
  assign LOCKSTEP_Out[1017] = \<const0> ;
  assign LOCKSTEP_Out[1018] = \<const0> ;
  assign LOCKSTEP_Out[1019] = \<const0> ;
  assign LOCKSTEP_Out[1020] = \<const0> ;
  assign LOCKSTEP_Out[1021] = \<const0> ;
  assign LOCKSTEP_Out[1022] = \<const0> ;
  assign LOCKSTEP_Out[1023] = \<const0> ;
  assign LOCKSTEP_Out[1024] = \<const0> ;
  assign LOCKSTEP_Out[1025] = \<const0> ;
  assign LOCKSTEP_Out[1026] = \<const0> ;
  assign LOCKSTEP_Out[1027] = \<const0> ;
  assign LOCKSTEP_Out[1028] = \<const0> ;
  assign LOCKSTEP_Out[1029] = \<const0> ;
  assign LOCKSTEP_Out[1030] = \<const0> ;
  assign LOCKSTEP_Out[1031] = \<const0> ;
  assign LOCKSTEP_Out[1032] = \<const0> ;
  assign LOCKSTEP_Out[1033] = \<const0> ;
  assign LOCKSTEP_Out[1034] = \<const0> ;
  assign LOCKSTEP_Out[1035] = \<const0> ;
  assign LOCKSTEP_Out[1036] = \<const0> ;
  assign LOCKSTEP_Out[1037] = \<const0> ;
  assign LOCKSTEP_Out[1038] = \<const0> ;
  assign LOCKSTEP_Out[1039] = \<const0> ;
  assign LOCKSTEP_Out[1040] = \<const0> ;
  assign LOCKSTEP_Out[1041] = \<const0> ;
  assign LOCKSTEP_Out[1042] = \<const0> ;
  assign LOCKSTEP_Out[1043] = \<const0> ;
  assign LOCKSTEP_Out[1044] = \<const0> ;
  assign LOCKSTEP_Out[1045] = \<const0> ;
  assign LOCKSTEP_Out[1046] = \<const0> ;
  assign LOCKSTEP_Out[1047] = \<const0> ;
  assign LOCKSTEP_Out[1048] = \<const0> ;
  assign LOCKSTEP_Out[1049] = \<const0> ;
  assign LOCKSTEP_Out[1050] = \<const0> ;
  assign LOCKSTEP_Out[1051] = \<const0> ;
  assign LOCKSTEP_Out[1052] = \<const0> ;
  assign LOCKSTEP_Out[1053] = \<const0> ;
  assign LOCKSTEP_Out[1054] = \<const0> ;
  assign LOCKSTEP_Out[1055] = \<const0> ;
  assign LOCKSTEP_Out[1056] = \<const0> ;
  assign LOCKSTEP_Out[1057] = \<const0> ;
  assign LOCKSTEP_Out[1058] = \<const0> ;
  assign LOCKSTEP_Out[1059] = \<const0> ;
  assign LOCKSTEP_Out[1060] = \<const0> ;
  assign LOCKSTEP_Out[1061] = \<const0> ;
  assign LOCKSTEP_Out[1062] = \<const0> ;
  assign LOCKSTEP_Out[1063] = \<const0> ;
  assign LOCKSTEP_Out[1064] = \<const0> ;
  assign LOCKSTEP_Out[1065] = \<const0> ;
  assign LOCKSTEP_Out[1066] = \<const0> ;
  assign LOCKSTEP_Out[1067] = \<const0> ;
  assign LOCKSTEP_Out[1068] = \<const0> ;
  assign LOCKSTEP_Out[1069] = \<const0> ;
  assign LOCKSTEP_Out[1070] = \<const0> ;
  assign LOCKSTEP_Out[1071] = \<const0> ;
  assign LOCKSTEP_Out[1072] = \<const0> ;
  assign LOCKSTEP_Out[1073] = \<const0> ;
  assign LOCKSTEP_Out[1074] = \<const0> ;
  assign LOCKSTEP_Out[1075] = \<const0> ;
  assign LOCKSTEP_Out[1076] = \<const0> ;
  assign LOCKSTEP_Out[1077] = \<const0> ;
  assign LOCKSTEP_Out[1078] = \<const0> ;
  assign LOCKSTEP_Out[1079] = \<const0> ;
  assign LOCKSTEP_Out[1080] = \<const0> ;
  assign LOCKSTEP_Out[1081] = \<const0> ;
  assign LOCKSTEP_Out[1082] = \<const0> ;
  assign LOCKSTEP_Out[1083] = \<const0> ;
  assign LOCKSTEP_Out[1084] = \<const0> ;
  assign LOCKSTEP_Out[1085] = \<const0> ;
  assign LOCKSTEP_Out[1086] = \<const0> ;
  assign LOCKSTEP_Out[1087] = \<const0> ;
  assign LOCKSTEP_Out[1088] = \<const0> ;
  assign LOCKSTEP_Out[1089] = \<const0> ;
  assign LOCKSTEP_Out[1090] = \<const0> ;
  assign LOCKSTEP_Out[1091] = \<const0> ;
  assign LOCKSTEP_Out[1092] = \<const0> ;
  assign LOCKSTEP_Out[1093] = \<const0> ;
  assign LOCKSTEP_Out[1094] = \<const0> ;
  assign LOCKSTEP_Out[1095] = \<const0> ;
  assign LOCKSTEP_Out[1096] = \<const0> ;
  assign LOCKSTEP_Out[1097] = \<const0> ;
  assign LOCKSTEP_Out[1098] = \<const0> ;
  assign LOCKSTEP_Out[1099] = \<const0> ;
  assign LOCKSTEP_Out[1100] = \<const0> ;
  assign LOCKSTEP_Out[1101] = \<const0> ;
  assign LOCKSTEP_Out[1102] = \<const0> ;
  assign LOCKSTEP_Out[1103] = \<const0> ;
  assign LOCKSTEP_Out[1104] = \<const0> ;
  assign LOCKSTEP_Out[1105] = \<const0> ;
  assign LOCKSTEP_Out[1106] = \<const0> ;
  assign LOCKSTEP_Out[1107] = \<const0> ;
  assign LOCKSTEP_Out[1108] = \<const0> ;
  assign LOCKSTEP_Out[1109] = \<const0> ;
  assign LOCKSTEP_Out[1110] = \<const0> ;
  assign LOCKSTEP_Out[1111] = \<const0> ;
  assign LOCKSTEP_Out[1112] = \<const0> ;
  assign LOCKSTEP_Out[1113] = \<const0> ;
  assign LOCKSTEP_Out[1114] = \<const0> ;
  assign LOCKSTEP_Out[1115] = \<const0> ;
  assign LOCKSTEP_Out[1116] = \<const0> ;
  assign LOCKSTEP_Out[1117] = \<const0> ;
  assign LOCKSTEP_Out[1118] = \<const0> ;
  assign LOCKSTEP_Out[1119] = \<const0> ;
  assign LOCKSTEP_Out[1120] = \<const0> ;
  assign LOCKSTEP_Out[1121] = \<const0> ;
  assign LOCKSTEP_Out[1122] = \<const0> ;
  assign LOCKSTEP_Out[1123] = \<const0> ;
  assign LOCKSTEP_Out[1124] = \<const0> ;
  assign LOCKSTEP_Out[1125] = \<const0> ;
  assign LOCKSTEP_Out[1126] = \<const0> ;
  assign LOCKSTEP_Out[1127] = \<const0> ;
  assign LOCKSTEP_Out[1128] = \<const0> ;
  assign LOCKSTEP_Out[1129] = \<const0> ;
  assign LOCKSTEP_Out[1130] = \<const0> ;
  assign LOCKSTEP_Out[1131] = \<const0> ;
  assign LOCKSTEP_Out[1132] = \<const0> ;
  assign LOCKSTEP_Out[1133] = \<const0> ;
  assign LOCKSTEP_Out[1134] = \<const0> ;
  assign LOCKSTEP_Out[1135] = \<const0> ;
  assign LOCKSTEP_Out[1136] = \<const0> ;
  assign LOCKSTEP_Out[1137] = \<const0> ;
  assign LOCKSTEP_Out[1138] = \<const0> ;
  assign LOCKSTEP_Out[1139] = \<const0> ;
  assign LOCKSTEP_Out[1140] = \<const0> ;
  assign LOCKSTEP_Out[1141] = \<const0> ;
  assign LOCKSTEP_Out[1142] = \<const0> ;
  assign LOCKSTEP_Out[1143] = \<const0> ;
  assign LOCKSTEP_Out[1144] = \<const0> ;
  assign LOCKSTEP_Out[1145] = \<const0> ;
  assign LOCKSTEP_Out[1146] = \<const0> ;
  assign LOCKSTEP_Out[1147] = \<const0> ;
  assign LOCKSTEP_Out[1148] = \<const0> ;
  assign LOCKSTEP_Out[1149] = \<const0> ;
  assign LOCKSTEP_Out[1150] = \<const0> ;
  assign LOCKSTEP_Out[1151] = \<const0> ;
  assign LOCKSTEP_Out[1152] = \<const0> ;
  assign LOCKSTEP_Out[1153] = \<const0> ;
  assign LOCKSTEP_Out[1154] = \<const0> ;
  assign LOCKSTEP_Out[1155] = \<const0> ;
  assign LOCKSTEP_Out[1156] = \<const0> ;
  assign LOCKSTEP_Out[1157] = \<const0> ;
  assign LOCKSTEP_Out[1158] = \<const0> ;
  assign LOCKSTEP_Out[1159] = \<const0> ;
  assign LOCKSTEP_Out[1160] = \<const0> ;
  assign LOCKSTEP_Out[1161] = \<const0> ;
  assign LOCKSTEP_Out[1162] = \<const0> ;
  assign LOCKSTEP_Out[1163] = \<const0> ;
  assign LOCKSTEP_Out[1164] = \<const0> ;
  assign LOCKSTEP_Out[1165] = \<const0> ;
  assign LOCKSTEP_Out[1166] = \<const0> ;
  assign LOCKSTEP_Out[1167] = \<const0> ;
  assign LOCKSTEP_Out[1168] = \<const0> ;
  assign LOCKSTEP_Out[1169] = \<const0> ;
  assign LOCKSTEP_Out[1170] = \<const0> ;
  assign LOCKSTEP_Out[1171] = \<const0> ;
  assign LOCKSTEP_Out[1172] = \<const0> ;
  assign LOCKSTEP_Out[1173] = \<const0> ;
  assign LOCKSTEP_Out[1174] = \<const0> ;
  assign LOCKSTEP_Out[1175] = \<const0> ;
  assign LOCKSTEP_Out[1176] = \<const0> ;
  assign LOCKSTEP_Out[1177] = \<const0> ;
  assign LOCKSTEP_Out[1178] = \<const0> ;
  assign LOCKSTEP_Out[1179] = \<const0> ;
  assign LOCKSTEP_Out[1180] = \<const0> ;
  assign LOCKSTEP_Out[1181] = \<const0> ;
  assign LOCKSTEP_Out[1182] = \<const0> ;
  assign LOCKSTEP_Out[1183] = \<const0> ;
  assign LOCKSTEP_Out[1184] = \<const0> ;
  assign LOCKSTEP_Out[1185] = \<const0> ;
  assign LOCKSTEP_Out[1186] = \<const0> ;
  assign LOCKSTEP_Out[1187] = \<const0> ;
  assign LOCKSTEP_Out[1188] = \<const0> ;
  assign LOCKSTEP_Out[1189] = \<const0> ;
  assign LOCKSTEP_Out[1190] = \<const0> ;
  assign LOCKSTEP_Out[1191] = \<const0> ;
  assign LOCKSTEP_Out[1192] = \<const0> ;
  assign LOCKSTEP_Out[1193] = \<const0> ;
  assign LOCKSTEP_Out[1194] = \<const0> ;
  assign LOCKSTEP_Out[1195] = \<const0> ;
  assign LOCKSTEP_Out[1196] = \<const0> ;
  assign LOCKSTEP_Out[1197] = \<const0> ;
  assign LOCKSTEP_Out[1198] = \<const0> ;
  assign LOCKSTEP_Out[1199] = \<const0> ;
  assign LOCKSTEP_Out[1200] = \<const0> ;
  assign LOCKSTEP_Out[1201] = \<const0> ;
  assign LOCKSTEP_Out[1202] = \<const0> ;
  assign LOCKSTEP_Out[1203] = \<const0> ;
  assign LOCKSTEP_Out[1204] = \<const0> ;
  assign LOCKSTEP_Out[1205] = \<const0> ;
  assign LOCKSTEP_Out[1206] = \<const0> ;
  assign LOCKSTEP_Out[1207] = \<const0> ;
  assign LOCKSTEP_Out[1208] = \<const0> ;
  assign LOCKSTEP_Out[1209] = \<const0> ;
  assign LOCKSTEP_Out[1210] = \<const0> ;
  assign LOCKSTEP_Out[1211] = \<const0> ;
  assign LOCKSTEP_Out[1212] = \<const0> ;
  assign LOCKSTEP_Out[1213] = \<const0> ;
  assign LOCKSTEP_Out[1214] = \<const0> ;
  assign LOCKSTEP_Out[1215] = \<const0> ;
  assign LOCKSTEP_Out[1216] = \<const0> ;
  assign LOCKSTEP_Out[1217] = \<const0> ;
  assign LOCKSTEP_Out[1218] = \<const0> ;
  assign LOCKSTEP_Out[1219] = \<const0> ;
  assign LOCKSTEP_Out[1220] = \<const0> ;
  assign LOCKSTEP_Out[1221] = \<const0> ;
  assign LOCKSTEP_Out[1222] = \<const0> ;
  assign LOCKSTEP_Out[1223] = \<const0> ;
  assign LOCKSTEP_Out[1224] = \<const0> ;
  assign LOCKSTEP_Out[1225] = \<const0> ;
  assign LOCKSTEP_Out[1226] = \<const0> ;
  assign LOCKSTEP_Out[1227] = \<const0> ;
  assign LOCKSTEP_Out[1228] = \<const0> ;
  assign LOCKSTEP_Out[1229] = \<const0> ;
  assign LOCKSTEP_Out[1230] = \<const0> ;
  assign LOCKSTEP_Out[1231] = \<const0> ;
  assign LOCKSTEP_Out[1232] = \<const0> ;
  assign LOCKSTEP_Out[1233] = \<const0> ;
  assign LOCKSTEP_Out[1234] = \<const0> ;
  assign LOCKSTEP_Out[1235] = \<const0> ;
  assign LOCKSTEP_Out[1236] = \<const0> ;
  assign LOCKSTEP_Out[1237] = \<const0> ;
  assign LOCKSTEP_Out[1238] = \<const0> ;
  assign LOCKSTEP_Out[1239] = \<const0> ;
  assign LOCKSTEP_Out[1240] = \<const0> ;
  assign LOCKSTEP_Out[1241] = \<const0> ;
  assign LOCKSTEP_Out[1242] = \<const0> ;
  assign LOCKSTEP_Out[1243] = \<const0> ;
  assign LOCKSTEP_Out[1244] = \<const0> ;
  assign LOCKSTEP_Out[1245] = \<const0> ;
  assign LOCKSTEP_Out[1246] = \<const0> ;
  assign LOCKSTEP_Out[1247] = \<const0> ;
  assign LOCKSTEP_Out[1248] = \<const0> ;
  assign LOCKSTEP_Out[1249] = \<const0> ;
  assign LOCKSTEP_Out[1250] = \<const0> ;
  assign LOCKSTEP_Out[1251] = \<const0> ;
  assign LOCKSTEP_Out[1252] = \<const0> ;
  assign LOCKSTEP_Out[1253] = \<const0> ;
  assign LOCKSTEP_Out[1254] = \<const0> ;
  assign LOCKSTEP_Out[1255] = \<const0> ;
  assign LOCKSTEP_Out[1256] = \<const0> ;
  assign LOCKSTEP_Out[1257] = \<const0> ;
  assign LOCKSTEP_Out[1258] = \<const0> ;
  assign LOCKSTEP_Out[1259] = \<const0> ;
  assign LOCKSTEP_Out[1260] = \<const0> ;
  assign LOCKSTEP_Out[1261] = \<const0> ;
  assign LOCKSTEP_Out[1262] = \<const0> ;
  assign LOCKSTEP_Out[1263] = \<const0> ;
  assign LOCKSTEP_Out[1264] = \<const0> ;
  assign LOCKSTEP_Out[1265] = \<const0> ;
  assign LOCKSTEP_Out[1266] = \<const0> ;
  assign LOCKSTEP_Out[1267] = \<const0> ;
  assign LOCKSTEP_Out[1268] = \<const0> ;
  assign LOCKSTEP_Out[1269] = \<const0> ;
  assign LOCKSTEP_Out[1270] = \<const0> ;
  assign LOCKSTEP_Out[1271] = \<const0> ;
  assign LOCKSTEP_Out[1272] = \<const0> ;
  assign LOCKSTEP_Out[1273] = \<const0> ;
  assign LOCKSTEP_Out[1274] = \<const0> ;
  assign LOCKSTEP_Out[1275] = \<const0> ;
  assign LOCKSTEP_Out[1276] = \<const0> ;
  assign LOCKSTEP_Out[1277] = \<const0> ;
  assign LOCKSTEP_Out[1278] = \<const0> ;
  assign LOCKSTEP_Out[1279] = \<const0> ;
  assign LOCKSTEP_Out[1280] = \<const0> ;
  assign LOCKSTEP_Out[1281] = \<const0> ;
  assign LOCKSTEP_Out[1282] = \<const0> ;
  assign LOCKSTEP_Out[1283] = \<const0> ;
  assign LOCKSTEP_Out[1284] = \<const0> ;
  assign LOCKSTEP_Out[1285] = \<const0> ;
  assign LOCKSTEP_Out[1286] = \<const0> ;
  assign LOCKSTEP_Out[1287] = \<const0> ;
  assign LOCKSTEP_Out[1288] = \<const0> ;
  assign LOCKSTEP_Out[1289] = \<const0> ;
  assign LOCKSTEP_Out[1290] = \<const0> ;
  assign LOCKSTEP_Out[1291] = \<const0> ;
  assign LOCKSTEP_Out[1292] = \<const0> ;
  assign LOCKSTEP_Out[1293] = \<const0> ;
  assign LOCKSTEP_Out[1294] = \<const0> ;
  assign LOCKSTEP_Out[1295] = \<const0> ;
  assign LOCKSTEP_Out[1296] = \<const0> ;
  assign LOCKSTEP_Out[1297] = \<const0> ;
  assign LOCKSTEP_Out[1298] = \<const0> ;
  assign LOCKSTEP_Out[1299] = \<const0> ;
  assign LOCKSTEP_Out[1300] = \<const0> ;
  assign LOCKSTEP_Out[1301] = \<const0> ;
  assign LOCKSTEP_Out[1302] = \<const0> ;
  assign LOCKSTEP_Out[1303] = \<const0> ;
  assign LOCKSTEP_Out[1304] = \<const0> ;
  assign LOCKSTEP_Out[1305] = \<const0> ;
  assign LOCKSTEP_Out[1306] = \<const0> ;
  assign LOCKSTEP_Out[1307] = \<const0> ;
  assign LOCKSTEP_Out[1308] = \<const0> ;
  assign LOCKSTEP_Out[1309] = \<const0> ;
  assign LOCKSTEP_Out[1310] = \<const0> ;
  assign LOCKSTEP_Out[1311] = \<const0> ;
  assign LOCKSTEP_Out[1312] = \<const0> ;
  assign LOCKSTEP_Out[1313] = \<const0> ;
  assign LOCKSTEP_Out[1314] = \<const0> ;
  assign LOCKSTEP_Out[1315] = \<const0> ;
  assign LOCKSTEP_Out[1316] = \<const0> ;
  assign LOCKSTEP_Out[1317] = \<const0> ;
  assign LOCKSTEP_Out[1318] = \<const0> ;
  assign LOCKSTEP_Out[1319] = \<const0> ;
  assign LOCKSTEP_Out[1320] = \<const0> ;
  assign LOCKSTEP_Out[1321] = \<const0> ;
  assign LOCKSTEP_Out[1322] = \<const0> ;
  assign LOCKSTEP_Out[1323] = \<const0> ;
  assign LOCKSTEP_Out[1324] = \<const0> ;
  assign LOCKSTEP_Out[1325] = \<const0> ;
  assign LOCKSTEP_Out[1326] = \<const0> ;
  assign LOCKSTEP_Out[1327] = \<const0> ;
  assign LOCKSTEP_Out[1328] = \<const0> ;
  assign LOCKSTEP_Out[1329] = \<const0> ;
  assign LOCKSTEP_Out[1330] = \<const0> ;
  assign LOCKSTEP_Out[1331] = \<const0> ;
  assign LOCKSTEP_Out[1332] = \<const0> ;
  assign LOCKSTEP_Out[1333] = \<const0> ;
  assign LOCKSTEP_Out[1334] = \<const0> ;
  assign LOCKSTEP_Out[1335] = \<const0> ;
  assign LOCKSTEP_Out[1336] = \<const0> ;
  assign LOCKSTEP_Out[1337] = \<const0> ;
  assign LOCKSTEP_Out[1338] = \<const0> ;
  assign LOCKSTEP_Out[1339] = \<const0> ;
  assign LOCKSTEP_Out[1340] = \<const0> ;
  assign LOCKSTEP_Out[1341] = \<const0> ;
  assign LOCKSTEP_Out[1342] = \<const0> ;
  assign LOCKSTEP_Out[1343] = \<const0> ;
  assign LOCKSTEP_Out[1344] = \<const0> ;
  assign LOCKSTEP_Out[1345] = \<const0> ;
  assign LOCKSTEP_Out[1346] = \<const0> ;
  assign LOCKSTEP_Out[1347] = \<const0> ;
  assign LOCKSTEP_Out[1348] = \<const0> ;
  assign LOCKSTEP_Out[1349] = \<const0> ;
  assign LOCKSTEP_Out[1350] = \<const0> ;
  assign LOCKSTEP_Out[1351] = \<const0> ;
  assign LOCKSTEP_Out[1352] = \<const0> ;
  assign LOCKSTEP_Out[1353] = \<const0> ;
  assign LOCKSTEP_Out[1354] = \<const0> ;
  assign LOCKSTEP_Out[1355] = \<const0> ;
  assign LOCKSTEP_Out[1356] = \<const0> ;
  assign LOCKSTEP_Out[1357] = \<const0> ;
  assign LOCKSTEP_Out[1358] = \<const0> ;
  assign LOCKSTEP_Out[1359] = \<const0> ;
  assign LOCKSTEP_Out[1360] = \<const0> ;
  assign LOCKSTEP_Out[1361] = \<const0> ;
  assign LOCKSTEP_Out[1362] = \<const0> ;
  assign LOCKSTEP_Out[1363] = \<const0> ;
  assign LOCKSTEP_Out[1364] = \<const0> ;
  assign LOCKSTEP_Out[1365] = \<const0> ;
  assign LOCKSTEP_Out[1366] = \<const0> ;
  assign LOCKSTEP_Out[1367] = \<const0> ;
  assign LOCKSTEP_Out[1368] = \<const0> ;
  assign LOCKSTEP_Out[1369] = \<const0> ;
  assign LOCKSTEP_Out[1370] = \<const0> ;
  assign LOCKSTEP_Out[1371] = \<const0> ;
  assign LOCKSTEP_Out[1372] = \<const0> ;
  assign LOCKSTEP_Out[1373] = \<const0> ;
  assign LOCKSTEP_Out[1374] = \<const0> ;
  assign LOCKSTEP_Out[1375] = \<const0> ;
  assign LOCKSTEP_Out[1376] = \<const0> ;
  assign LOCKSTEP_Out[1377] = \<const0> ;
  assign LOCKSTEP_Out[1378] = \<const0> ;
  assign LOCKSTEP_Out[1379] = \<const0> ;
  assign LOCKSTEP_Out[1380] = \<const0> ;
  assign LOCKSTEP_Out[1381] = \<const0> ;
  assign LOCKSTEP_Out[1382] = \<const0> ;
  assign LOCKSTEP_Out[1383] = \<const0> ;
  assign LOCKSTEP_Out[1384] = \<const0> ;
  assign LOCKSTEP_Out[1385] = \<const0> ;
  assign LOCKSTEP_Out[1386] = \<const0> ;
  assign LOCKSTEP_Out[1387] = \<const0> ;
  assign LOCKSTEP_Out[1388] = \<const0> ;
  assign LOCKSTEP_Out[1389] = \<const0> ;
  assign LOCKSTEP_Out[1390] = \<const0> ;
  assign LOCKSTEP_Out[1391] = \<const0> ;
  assign LOCKSTEP_Out[1392] = \<const0> ;
  assign LOCKSTEP_Out[1393] = \<const0> ;
  assign LOCKSTEP_Out[1394] = \<const0> ;
  assign LOCKSTEP_Out[1395] = \<const0> ;
  assign LOCKSTEP_Out[1396] = \<const0> ;
  assign LOCKSTEP_Out[1397] = \<const0> ;
  assign LOCKSTEP_Out[1398] = \<const0> ;
  assign LOCKSTEP_Out[1399] = \<const0> ;
  assign LOCKSTEP_Out[1400] = \<const0> ;
  assign LOCKSTEP_Out[1401] = \<const0> ;
  assign LOCKSTEP_Out[1402] = \<const0> ;
  assign LOCKSTEP_Out[1403] = \<const0> ;
  assign LOCKSTEP_Out[1404] = \<const0> ;
  assign LOCKSTEP_Out[1405] = \<const0> ;
  assign LOCKSTEP_Out[1406] = \<const0> ;
  assign LOCKSTEP_Out[1407] = \<const0> ;
  assign LOCKSTEP_Out[1408] = \<const0> ;
  assign LOCKSTEP_Out[1409] = \<const0> ;
  assign LOCKSTEP_Out[1410] = \<const0> ;
  assign LOCKSTEP_Out[1411] = \<const0> ;
  assign LOCKSTEP_Out[1412] = \<const0> ;
  assign LOCKSTEP_Out[1413] = \<const0> ;
  assign LOCKSTEP_Out[1414] = \<const0> ;
  assign LOCKSTEP_Out[1415] = \<const0> ;
  assign LOCKSTEP_Out[1416] = \<const0> ;
  assign LOCKSTEP_Out[1417] = \<const0> ;
  assign LOCKSTEP_Out[1418] = \<const0> ;
  assign LOCKSTEP_Out[1419] = \<const0> ;
  assign LOCKSTEP_Out[1420] = \<const0> ;
  assign LOCKSTEP_Out[1421] = \<const0> ;
  assign LOCKSTEP_Out[1422] = \<const0> ;
  assign LOCKSTEP_Out[1423] = \<const0> ;
  assign LOCKSTEP_Out[1424] = \<const0> ;
  assign LOCKSTEP_Out[1425] = \<const0> ;
  assign LOCKSTEP_Out[1426] = \<const0> ;
  assign LOCKSTEP_Out[1427] = \<const0> ;
  assign LOCKSTEP_Out[1428] = \<const0> ;
  assign LOCKSTEP_Out[1429] = \<const0> ;
  assign LOCKSTEP_Out[1430] = \<const0> ;
  assign LOCKSTEP_Out[1431] = \<const0> ;
  assign LOCKSTEP_Out[1432] = \<const0> ;
  assign LOCKSTEP_Out[1433] = \<const0> ;
  assign LOCKSTEP_Out[1434] = \<const0> ;
  assign LOCKSTEP_Out[1435] = \<const0> ;
  assign LOCKSTEP_Out[1436] = \<const0> ;
  assign LOCKSTEP_Out[1437] = \<const0> ;
  assign LOCKSTEP_Out[1438] = \<const0> ;
  assign LOCKSTEP_Out[1439] = \<const0> ;
  assign LOCKSTEP_Out[1440] = \<const0> ;
  assign LOCKSTEP_Out[1441] = \<const0> ;
  assign LOCKSTEP_Out[1442] = \<const0> ;
  assign LOCKSTEP_Out[1443] = \<const0> ;
  assign LOCKSTEP_Out[1444] = \<const0> ;
  assign LOCKSTEP_Out[1445] = \<const0> ;
  assign LOCKSTEP_Out[1446] = \<const0> ;
  assign LOCKSTEP_Out[1447] = \<const0> ;
  assign LOCKSTEP_Out[1448] = \<const0> ;
  assign LOCKSTEP_Out[1449] = \<const0> ;
  assign LOCKSTEP_Out[1450] = \<const0> ;
  assign LOCKSTEP_Out[1451] = \<const0> ;
  assign LOCKSTEP_Out[1452] = \<const0> ;
  assign LOCKSTEP_Out[1453] = \<const0> ;
  assign LOCKSTEP_Out[1454] = \<const0> ;
  assign LOCKSTEP_Out[1455] = \<const0> ;
  assign LOCKSTEP_Out[1456] = \<const0> ;
  assign LOCKSTEP_Out[1457] = \<const0> ;
  assign LOCKSTEP_Out[1458] = \<const0> ;
  assign LOCKSTEP_Out[1459] = \<const0> ;
  assign LOCKSTEP_Out[1460] = \<const0> ;
  assign LOCKSTEP_Out[1461] = \<const0> ;
  assign LOCKSTEP_Out[1462] = \<const0> ;
  assign LOCKSTEP_Out[1463] = \<const0> ;
  assign LOCKSTEP_Out[1464] = \<const0> ;
  assign LOCKSTEP_Out[1465] = \<const0> ;
  assign LOCKSTEP_Out[1466] = \<const0> ;
  assign LOCKSTEP_Out[1467] = \<const0> ;
  assign LOCKSTEP_Out[1468] = \<const0> ;
  assign LOCKSTEP_Out[1469] = \<const0> ;
  assign LOCKSTEP_Out[1470] = \<const0> ;
  assign LOCKSTEP_Out[1471] = \<const0> ;
  assign LOCKSTEP_Out[1472] = \<const0> ;
  assign LOCKSTEP_Out[1473] = \<const0> ;
  assign LOCKSTEP_Out[1474] = \<const0> ;
  assign LOCKSTEP_Out[1475] = \<const0> ;
  assign LOCKSTEP_Out[1476] = \<const0> ;
  assign LOCKSTEP_Out[1477] = \<const0> ;
  assign LOCKSTEP_Out[1478] = \<const0> ;
  assign LOCKSTEP_Out[1479] = \<const0> ;
  assign LOCKSTEP_Out[1480] = \<const0> ;
  assign LOCKSTEP_Out[1481] = \<const0> ;
  assign LOCKSTEP_Out[1482] = \<const0> ;
  assign LOCKSTEP_Out[1483] = \<const0> ;
  assign LOCKSTEP_Out[1484] = \<const0> ;
  assign LOCKSTEP_Out[1485] = \<const0> ;
  assign LOCKSTEP_Out[1486] = \<const0> ;
  assign LOCKSTEP_Out[1487] = \<const0> ;
  assign LOCKSTEP_Out[1488] = \<const0> ;
  assign LOCKSTEP_Out[1489] = \<const0> ;
  assign LOCKSTEP_Out[1490] = \<const0> ;
  assign LOCKSTEP_Out[1491] = \<const0> ;
  assign LOCKSTEP_Out[1492] = \<const0> ;
  assign LOCKSTEP_Out[1493] = \<const0> ;
  assign LOCKSTEP_Out[1494] = \<const0> ;
  assign LOCKSTEP_Out[1495] = \<const0> ;
  assign LOCKSTEP_Out[1496] = \<const0> ;
  assign LOCKSTEP_Out[1497] = \<const0> ;
  assign LOCKSTEP_Out[1498] = \<const0> ;
  assign LOCKSTEP_Out[1499] = \<const0> ;
  assign LOCKSTEP_Out[1500] = \<const0> ;
  assign LOCKSTEP_Out[1501] = \<const0> ;
  assign LOCKSTEP_Out[1502] = \<const0> ;
  assign LOCKSTEP_Out[1503] = \<const0> ;
  assign LOCKSTEP_Out[1504] = \<const0> ;
  assign LOCKSTEP_Out[1505] = \<const0> ;
  assign LOCKSTEP_Out[1506] = \<const0> ;
  assign LOCKSTEP_Out[1507] = \<const0> ;
  assign LOCKSTEP_Out[1508] = \<const0> ;
  assign LOCKSTEP_Out[1509] = \<const0> ;
  assign LOCKSTEP_Out[1510] = \<const0> ;
  assign LOCKSTEP_Out[1511] = \<const0> ;
  assign LOCKSTEP_Out[1512] = \<const0> ;
  assign LOCKSTEP_Out[1513] = \<const0> ;
  assign LOCKSTEP_Out[1514] = \<const0> ;
  assign LOCKSTEP_Out[1515] = \<const0> ;
  assign LOCKSTEP_Out[1516] = \<const0> ;
  assign LOCKSTEP_Out[1517] = \<const0> ;
  assign LOCKSTEP_Out[1518] = \<const0> ;
  assign LOCKSTEP_Out[1519] = \<const0> ;
  assign LOCKSTEP_Out[1520] = \<const0> ;
  assign LOCKSTEP_Out[1521] = \<const0> ;
  assign LOCKSTEP_Out[1522] = \<const0> ;
  assign LOCKSTEP_Out[1523] = \<const0> ;
  assign LOCKSTEP_Out[1524] = \<const0> ;
  assign LOCKSTEP_Out[1525] = \<const0> ;
  assign LOCKSTEP_Out[1526] = \<const0> ;
  assign LOCKSTEP_Out[1527] = \<const0> ;
  assign LOCKSTEP_Out[1528] = \<const0> ;
  assign LOCKSTEP_Out[1529] = \<const0> ;
  assign LOCKSTEP_Out[1530] = \<const0> ;
  assign LOCKSTEP_Out[1531] = \<const0> ;
  assign LOCKSTEP_Out[1532] = \<const0> ;
  assign LOCKSTEP_Out[1533] = \<const0> ;
  assign LOCKSTEP_Out[1534] = \<const0> ;
  assign LOCKSTEP_Out[1535] = \<const0> ;
  assign LOCKSTEP_Out[1536] = \<const0> ;
  assign LOCKSTEP_Out[1537] = \<const0> ;
  assign LOCKSTEP_Out[1538] = \<const0> ;
  assign LOCKSTEP_Out[1539] = \<const0> ;
  assign LOCKSTEP_Out[1540] = \<const0> ;
  assign LOCKSTEP_Out[1541] = \<const0> ;
  assign LOCKSTEP_Out[1542] = \<const0> ;
  assign LOCKSTEP_Out[1543] = \<const0> ;
  assign LOCKSTEP_Out[1544] = \<const0> ;
  assign LOCKSTEP_Out[1545] = \<const0> ;
  assign LOCKSTEP_Out[1546] = \<const0> ;
  assign LOCKSTEP_Out[1547] = \<const0> ;
  assign LOCKSTEP_Out[1548] = \<const0> ;
  assign LOCKSTEP_Out[1549] = \<const0> ;
  assign LOCKSTEP_Out[1550] = \<const0> ;
  assign LOCKSTEP_Out[1551] = \<const0> ;
  assign LOCKSTEP_Out[1552] = \<const0> ;
  assign LOCKSTEP_Out[1553] = \<const0> ;
  assign LOCKSTEP_Out[1554] = \<const0> ;
  assign LOCKSTEP_Out[1555] = \<const0> ;
  assign LOCKSTEP_Out[1556] = \<const0> ;
  assign LOCKSTEP_Out[1557] = \<const0> ;
  assign LOCKSTEP_Out[1558] = \<const0> ;
  assign LOCKSTEP_Out[1559] = \<const0> ;
  assign LOCKSTEP_Out[1560] = \<const0> ;
  assign LOCKSTEP_Out[1561] = \<const0> ;
  assign LOCKSTEP_Out[1562] = \<const0> ;
  assign LOCKSTEP_Out[1563] = \<const0> ;
  assign LOCKSTEP_Out[1564] = \<const0> ;
  assign LOCKSTEP_Out[1565] = \<const0> ;
  assign LOCKSTEP_Out[1566] = \<const0> ;
  assign LOCKSTEP_Out[1567] = \<const0> ;
  assign LOCKSTEP_Out[1568] = \<const0> ;
  assign LOCKSTEP_Out[1569] = \<const0> ;
  assign LOCKSTEP_Out[1570] = \<const0> ;
  assign LOCKSTEP_Out[1571] = \<const0> ;
  assign LOCKSTEP_Out[1572] = \<const0> ;
  assign LOCKSTEP_Out[1573] = \<const0> ;
  assign LOCKSTEP_Out[1574] = \<const0> ;
  assign LOCKSTEP_Out[1575] = \<const0> ;
  assign LOCKSTEP_Out[1576] = \<const0> ;
  assign LOCKSTEP_Out[1577] = \<const0> ;
  assign LOCKSTEP_Out[1578] = \<const0> ;
  assign LOCKSTEP_Out[1579] = \<const0> ;
  assign LOCKSTEP_Out[1580] = \<const0> ;
  assign LOCKSTEP_Out[1581] = \<const0> ;
  assign LOCKSTEP_Out[1582] = \<const0> ;
  assign LOCKSTEP_Out[1583] = \<const0> ;
  assign LOCKSTEP_Out[1584] = \<const0> ;
  assign LOCKSTEP_Out[1585] = \<const0> ;
  assign LOCKSTEP_Out[1586] = \<const0> ;
  assign LOCKSTEP_Out[1587] = \<const0> ;
  assign LOCKSTEP_Out[1588] = \<const0> ;
  assign LOCKSTEP_Out[1589] = \<const0> ;
  assign LOCKSTEP_Out[1590] = \<const0> ;
  assign LOCKSTEP_Out[1591] = \<const0> ;
  assign LOCKSTEP_Out[1592] = \<const0> ;
  assign LOCKSTEP_Out[1593] = \<const0> ;
  assign LOCKSTEP_Out[1594] = \<const0> ;
  assign LOCKSTEP_Out[1595] = \<const0> ;
  assign LOCKSTEP_Out[1596] = \<const0> ;
  assign LOCKSTEP_Out[1597] = \<const0> ;
  assign LOCKSTEP_Out[1598] = \<const0> ;
  assign LOCKSTEP_Out[1599] = \<const0> ;
  assign LOCKSTEP_Out[1600] = \<const0> ;
  assign LOCKSTEP_Out[1601] = \<const0> ;
  assign LOCKSTEP_Out[1602] = \<const0> ;
  assign LOCKSTEP_Out[1603] = \<const0> ;
  assign LOCKSTEP_Out[1604] = \<const0> ;
  assign LOCKSTEP_Out[1605] = \<const0> ;
  assign LOCKSTEP_Out[1606] = \<const0> ;
  assign LOCKSTEP_Out[1607] = \<const0> ;
  assign LOCKSTEP_Out[1608] = \<const0> ;
  assign LOCKSTEP_Out[1609] = \<const0> ;
  assign LOCKSTEP_Out[1610] = \<const0> ;
  assign LOCKSTEP_Out[1611] = \<const0> ;
  assign LOCKSTEP_Out[1612] = \<const0> ;
  assign LOCKSTEP_Out[1613] = \<const0> ;
  assign LOCKSTEP_Out[1614] = \<const0> ;
  assign LOCKSTEP_Out[1615] = \<const0> ;
  assign LOCKSTEP_Out[1616] = \<const0> ;
  assign LOCKSTEP_Out[1617] = \<const0> ;
  assign LOCKSTEP_Out[1618] = \<const0> ;
  assign LOCKSTEP_Out[1619] = \<const0> ;
  assign LOCKSTEP_Out[1620] = \<const0> ;
  assign LOCKSTEP_Out[1621] = \<const0> ;
  assign LOCKSTEP_Out[1622] = \<const0> ;
  assign LOCKSTEP_Out[1623] = \<const0> ;
  assign LOCKSTEP_Out[1624] = \<const0> ;
  assign LOCKSTEP_Out[1625] = \<const0> ;
  assign LOCKSTEP_Out[1626] = \<const0> ;
  assign LOCKSTEP_Out[1627] = \<const0> ;
  assign LOCKSTEP_Out[1628] = \<const0> ;
  assign LOCKSTEP_Out[1629] = \<const0> ;
  assign LOCKSTEP_Out[1630] = \<const0> ;
  assign LOCKSTEP_Out[1631] = \<const0> ;
  assign LOCKSTEP_Out[1632] = \<const0> ;
  assign LOCKSTEP_Out[1633] = \<const0> ;
  assign LOCKSTEP_Out[1634] = \<const0> ;
  assign LOCKSTEP_Out[1635] = \<const0> ;
  assign LOCKSTEP_Out[1636] = \<const0> ;
  assign LOCKSTEP_Out[1637] = \<const0> ;
  assign LOCKSTEP_Out[1638] = \<const0> ;
  assign LOCKSTEP_Out[1639] = \<const0> ;
  assign LOCKSTEP_Out[1640] = \<const0> ;
  assign LOCKSTEP_Out[1641] = \<const0> ;
  assign LOCKSTEP_Out[1642] = \<const0> ;
  assign LOCKSTEP_Out[1643] = \<const0> ;
  assign LOCKSTEP_Out[1644] = \<const0> ;
  assign LOCKSTEP_Out[1645] = \<const0> ;
  assign LOCKSTEP_Out[1646] = \<const0> ;
  assign LOCKSTEP_Out[1647] = \<const0> ;
  assign LOCKSTEP_Out[1648] = \<const0> ;
  assign LOCKSTEP_Out[1649] = \<const0> ;
  assign LOCKSTEP_Out[1650] = \<const0> ;
  assign LOCKSTEP_Out[1651] = \<const0> ;
  assign LOCKSTEP_Out[1652] = \<const0> ;
  assign LOCKSTEP_Out[1653] = \<const0> ;
  assign LOCKSTEP_Out[1654] = \<const0> ;
  assign LOCKSTEP_Out[1655] = \<const0> ;
  assign LOCKSTEP_Out[1656] = \<const0> ;
  assign LOCKSTEP_Out[1657] = \<const0> ;
  assign LOCKSTEP_Out[1658] = \<const0> ;
  assign LOCKSTEP_Out[1659] = \<const0> ;
  assign LOCKSTEP_Out[1660] = \<const0> ;
  assign LOCKSTEP_Out[1661] = \<const0> ;
  assign LOCKSTEP_Out[1662] = \<const0> ;
  assign LOCKSTEP_Out[1663] = \<const0> ;
  assign LOCKSTEP_Out[1664] = \<const0> ;
  assign LOCKSTEP_Out[1665] = \<const0> ;
  assign LOCKSTEP_Out[1666] = \<const0> ;
  assign LOCKSTEP_Out[1667] = \<const0> ;
  assign LOCKSTEP_Out[1668] = \<const0> ;
  assign LOCKSTEP_Out[1669] = \<const0> ;
  assign LOCKSTEP_Out[1670] = \<const0> ;
  assign LOCKSTEP_Out[1671] = \<const0> ;
  assign LOCKSTEP_Out[1672] = \<const0> ;
  assign LOCKSTEP_Out[1673] = \<const0> ;
  assign LOCKSTEP_Out[1674] = \<const0> ;
  assign LOCKSTEP_Out[1675] = \<const0> ;
  assign LOCKSTEP_Out[1676] = \<const0> ;
  assign LOCKSTEP_Out[1677] = \<const0> ;
  assign LOCKSTEP_Out[1678] = \<const0> ;
  assign LOCKSTEP_Out[1679] = \<const0> ;
  assign LOCKSTEP_Out[1680] = \<const0> ;
  assign LOCKSTEP_Out[1681] = \<const0> ;
  assign LOCKSTEP_Out[1682] = \<const0> ;
  assign LOCKSTEP_Out[1683] = \<const0> ;
  assign LOCKSTEP_Out[1684] = \<const0> ;
  assign LOCKSTEP_Out[1685] = \<const0> ;
  assign LOCKSTEP_Out[1686] = \<const0> ;
  assign LOCKSTEP_Out[1687] = \<const0> ;
  assign LOCKSTEP_Out[1688] = \<const0> ;
  assign LOCKSTEP_Out[1689] = \<const0> ;
  assign LOCKSTEP_Out[1690] = \<const0> ;
  assign LOCKSTEP_Out[1691] = \<const0> ;
  assign LOCKSTEP_Out[1692] = \<const0> ;
  assign LOCKSTEP_Out[1693] = \<const0> ;
  assign LOCKSTEP_Out[1694] = \<const0> ;
  assign LOCKSTEP_Out[1695] = \<const0> ;
  assign LOCKSTEP_Out[1696] = \<const0> ;
  assign LOCKSTEP_Out[1697] = \<const0> ;
  assign LOCKSTEP_Out[1698] = \<const0> ;
  assign LOCKSTEP_Out[1699] = \<const0> ;
  assign LOCKSTEP_Out[1700] = \<const0> ;
  assign LOCKSTEP_Out[1701] = \<const0> ;
  assign LOCKSTEP_Out[1702] = \<const0> ;
  assign LOCKSTEP_Out[1703] = \<const0> ;
  assign LOCKSTEP_Out[1704] = \<const0> ;
  assign LOCKSTEP_Out[1705] = \<const0> ;
  assign LOCKSTEP_Out[1706] = \<const0> ;
  assign LOCKSTEP_Out[1707] = \<const0> ;
  assign LOCKSTEP_Out[1708] = \<const0> ;
  assign LOCKSTEP_Out[1709] = \<const0> ;
  assign LOCKSTEP_Out[1710] = \<const0> ;
  assign LOCKSTEP_Out[1711] = \<const0> ;
  assign LOCKSTEP_Out[1712] = \<const0> ;
  assign LOCKSTEP_Out[1713] = \<const0> ;
  assign LOCKSTEP_Out[1714] = \<const0> ;
  assign LOCKSTEP_Out[1715] = \<const0> ;
  assign LOCKSTEP_Out[1716] = \<const0> ;
  assign LOCKSTEP_Out[1717] = \<const0> ;
  assign LOCKSTEP_Out[1718] = \<const0> ;
  assign LOCKSTEP_Out[1719] = \<const0> ;
  assign LOCKSTEP_Out[1720] = \<const0> ;
  assign LOCKSTEP_Out[1721] = \<const0> ;
  assign LOCKSTEP_Out[1722] = \<const0> ;
  assign LOCKSTEP_Out[1723] = \<const0> ;
  assign LOCKSTEP_Out[1724] = \<const0> ;
  assign LOCKSTEP_Out[1725] = \<const0> ;
  assign LOCKSTEP_Out[1726] = \<const0> ;
  assign LOCKSTEP_Out[1727] = \<const0> ;
  assign LOCKSTEP_Out[1728] = \<const0> ;
  assign LOCKSTEP_Out[1729] = \<const0> ;
  assign LOCKSTEP_Out[1730] = \<const0> ;
  assign LOCKSTEP_Out[1731] = \<const0> ;
  assign LOCKSTEP_Out[1732] = \<const0> ;
  assign LOCKSTEP_Out[1733] = \<const0> ;
  assign LOCKSTEP_Out[1734] = \<const0> ;
  assign LOCKSTEP_Out[1735] = \<const0> ;
  assign LOCKSTEP_Out[1736] = \<const0> ;
  assign LOCKSTEP_Out[1737] = \<const0> ;
  assign LOCKSTEP_Out[1738] = \<const0> ;
  assign LOCKSTEP_Out[1739] = \<const0> ;
  assign LOCKSTEP_Out[1740] = \<const0> ;
  assign LOCKSTEP_Out[1741] = \<const0> ;
  assign LOCKSTEP_Out[1742] = \<const0> ;
  assign LOCKSTEP_Out[1743] = \<const0> ;
  assign LOCKSTEP_Out[1744] = \<const0> ;
  assign LOCKSTEP_Out[1745] = \<const0> ;
  assign LOCKSTEP_Out[1746] = \<const0> ;
  assign LOCKSTEP_Out[1747] = \<const0> ;
  assign LOCKSTEP_Out[1748] = \<const0> ;
  assign LOCKSTEP_Out[1749] = \<const0> ;
  assign LOCKSTEP_Out[1750] = \<const0> ;
  assign LOCKSTEP_Out[1751] = \<const0> ;
  assign LOCKSTEP_Out[1752] = \<const0> ;
  assign LOCKSTEP_Out[1753] = \<const0> ;
  assign LOCKSTEP_Out[1754] = \<const0> ;
  assign LOCKSTEP_Out[1755] = \<const0> ;
  assign LOCKSTEP_Out[1756] = \<const0> ;
  assign LOCKSTEP_Out[1757] = \<const0> ;
  assign LOCKSTEP_Out[1758] = \<const0> ;
  assign LOCKSTEP_Out[1759] = \<const0> ;
  assign LOCKSTEP_Out[1760] = \<const0> ;
  assign LOCKSTEP_Out[1761] = \<const0> ;
  assign LOCKSTEP_Out[1762] = \<const0> ;
  assign LOCKSTEP_Out[1763] = \<const0> ;
  assign LOCKSTEP_Out[1764] = \<const0> ;
  assign LOCKSTEP_Out[1765] = \<const0> ;
  assign LOCKSTEP_Out[1766] = \<const0> ;
  assign LOCKSTEP_Out[1767] = \<const0> ;
  assign LOCKSTEP_Out[1768] = \<const0> ;
  assign LOCKSTEP_Out[1769] = \<const0> ;
  assign LOCKSTEP_Out[1770] = \<const0> ;
  assign LOCKSTEP_Out[1771] = \<const0> ;
  assign LOCKSTEP_Out[1772] = \<const0> ;
  assign LOCKSTEP_Out[1773] = \<const0> ;
  assign LOCKSTEP_Out[1774] = \<const0> ;
  assign LOCKSTEP_Out[1775] = \<const0> ;
  assign LOCKSTEP_Out[1776] = \<const0> ;
  assign LOCKSTEP_Out[1777] = \<const0> ;
  assign LOCKSTEP_Out[1778] = \<const0> ;
  assign LOCKSTEP_Out[1779] = \<const0> ;
  assign LOCKSTEP_Out[1780] = \<const0> ;
  assign LOCKSTEP_Out[1781] = \<const0> ;
  assign LOCKSTEP_Out[1782] = \<const0> ;
  assign LOCKSTEP_Out[1783] = \<const0> ;
  assign LOCKSTEP_Out[1784] = \<const0> ;
  assign LOCKSTEP_Out[1785] = \<const0> ;
  assign LOCKSTEP_Out[1786] = \<const0> ;
  assign LOCKSTEP_Out[1787] = \<const0> ;
  assign LOCKSTEP_Out[1788] = \<const0> ;
  assign LOCKSTEP_Out[1789] = \<const0> ;
  assign LOCKSTEP_Out[1790] = \<const0> ;
  assign LOCKSTEP_Out[1791] = \<const0> ;
  assign LOCKSTEP_Out[1792] = \<const0> ;
  assign LOCKSTEP_Out[1793] = \<const0> ;
  assign LOCKSTEP_Out[1794] = \<const0> ;
  assign LOCKSTEP_Out[1795] = \<const0> ;
  assign LOCKSTEP_Out[1796] = \<const0> ;
  assign LOCKSTEP_Out[1797] = \<const0> ;
  assign LOCKSTEP_Out[1798] = \<const0> ;
  assign LOCKSTEP_Out[1799] = \<const0> ;
  assign LOCKSTEP_Out[1800] = \<const0> ;
  assign LOCKSTEP_Out[1801] = \<const0> ;
  assign LOCKSTEP_Out[1802] = \<const0> ;
  assign LOCKSTEP_Out[1803] = \<const0> ;
  assign LOCKSTEP_Out[1804] = \<const0> ;
  assign LOCKSTEP_Out[1805] = \<const0> ;
  assign LOCKSTEP_Out[1806] = \<const0> ;
  assign LOCKSTEP_Out[1807] = \<const0> ;
  assign LOCKSTEP_Out[1808] = \<const0> ;
  assign LOCKSTEP_Out[1809] = \<const0> ;
  assign LOCKSTEP_Out[1810] = \<const0> ;
  assign LOCKSTEP_Out[1811] = \<const0> ;
  assign LOCKSTEP_Out[1812] = \<const0> ;
  assign LOCKSTEP_Out[1813] = \<const0> ;
  assign LOCKSTEP_Out[1814] = \<const0> ;
  assign LOCKSTEP_Out[1815] = \<const0> ;
  assign LOCKSTEP_Out[1816] = \<const0> ;
  assign LOCKSTEP_Out[1817] = \<const0> ;
  assign LOCKSTEP_Out[1818] = \<const0> ;
  assign LOCKSTEP_Out[1819] = \<const0> ;
  assign LOCKSTEP_Out[1820] = \<const0> ;
  assign LOCKSTEP_Out[1821] = \<const0> ;
  assign LOCKSTEP_Out[1822] = \<const0> ;
  assign LOCKSTEP_Out[1823] = \<const0> ;
  assign LOCKSTEP_Out[1824] = \<const0> ;
  assign LOCKSTEP_Out[1825] = \<const0> ;
  assign LOCKSTEP_Out[1826] = \<const0> ;
  assign LOCKSTEP_Out[1827] = \<const0> ;
  assign LOCKSTEP_Out[1828] = \<const0> ;
  assign LOCKSTEP_Out[1829] = \<const0> ;
  assign LOCKSTEP_Out[1830] = \<const0> ;
  assign LOCKSTEP_Out[1831] = \<const0> ;
  assign LOCKSTEP_Out[1832] = \<const0> ;
  assign LOCKSTEP_Out[1833] = \<const0> ;
  assign LOCKSTEP_Out[1834] = \<const0> ;
  assign LOCKSTEP_Out[1835] = \<const0> ;
  assign LOCKSTEP_Out[1836] = \<const0> ;
  assign LOCKSTEP_Out[1837] = \<const0> ;
  assign LOCKSTEP_Out[1838] = \<const0> ;
  assign LOCKSTEP_Out[1839] = \<const0> ;
  assign LOCKSTEP_Out[1840] = \<const0> ;
  assign LOCKSTEP_Out[1841] = \<const0> ;
  assign LOCKSTEP_Out[1842] = \<const0> ;
  assign LOCKSTEP_Out[1843] = \<const0> ;
  assign LOCKSTEP_Out[1844] = \<const0> ;
  assign LOCKSTEP_Out[1845] = \<const0> ;
  assign LOCKSTEP_Out[1846] = \<const0> ;
  assign LOCKSTEP_Out[1847] = \<const0> ;
  assign LOCKSTEP_Out[1848] = \<const0> ;
  assign LOCKSTEP_Out[1849] = \<const0> ;
  assign LOCKSTEP_Out[1850] = \<const0> ;
  assign LOCKSTEP_Out[1851] = \<const0> ;
  assign LOCKSTEP_Out[1852] = \<const0> ;
  assign LOCKSTEP_Out[1853] = \<const0> ;
  assign LOCKSTEP_Out[1854] = \<const0> ;
  assign LOCKSTEP_Out[1855] = \<const0> ;
  assign LOCKSTEP_Out[1856] = \<const0> ;
  assign LOCKSTEP_Out[1857] = \<const0> ;
  assign LOCKSTEP_Out[1858] = \<const0> ;
  assign LOCKSTEP_Out[1859] = \<const0> ;
  assign LOCKSTEP_Out[1860] = \<const0> ;
  assign LOCKSTEP_Out[1861] = \<const0> ;
  assign LOCKSTEP_Out[1862] = \<const0> ;
  assign LOCKSTEP_Out[1863] = \<const0> ;
  assign LOCKSTEP_Out[1864] = \<const0> ;
  assign LOCKSTEP_Out[1865] = \<const0> ;
  assign LOCKSTEP_Out[1866] = \<const0> ;
  assign LOCKSTEP_Out[1867] = \<const0> ;
  assign LOCKSTEP_Out[1868] = \<const0> ;
  assign LOCKSTEP_Out[1869] = \<const0> ;
  assign LOCKSTEP_Out[1870] = \<const0> ;
  assign LOCKSTEP_Out[1871] = \<const0> ;
  assign LOCKSTEP_Out[1872] = \<const0> ;
  assign LOCKSTEP_Out[1873] = \<const0> ;
  assign LOCKSTEP_Out[1874] = \<const0> ;
  assign LOCKSTEP_Out[1875] = \<const0> ;
  assign LOCKSTEP_Out[1876] = \<const0> ;
  assign LOCKSTEP_Out[1877] = \<const0> ;
  assign LOCKSTEP_Out[1878] = \<const0> ;
  assign LOCKSTEP_Out[1879] = \<const0> ;
  assign LOCKSTEP_Out[1880] = \<const0> ;
  assign LOCKSTEP_Out[1881] = \<const0> ;
  assign LOCKSTEP_Out[1882] = \<const0> ;
  assign LOCKSTEP_Out[1883] = \<const0> ;
  assign LOCKSTEP_Out[1884] = \<const0> ;
  assign LOCKSTEP_Out[1885] = \<const0> ;
  assign LOCKSTEP_Out[1886] = \<const0> ;
  assign LOCKSTEP_Out[1887] = \<const0> ;
  assign LOCKSTEP_Out[1888] = \<const0> ;
  assign LOCKSTEP_Out[1889] = \<const0> ;
  assign LOCKSTEP_Out[1890] = \<const0> ;
  assign LOCKSTEP_Out[1891] = \<const0> ;
  assign LOCKSTEP_Out[1892] = \<const0> ;
  assign LOCKSTEP_Out[1893] = \<const0> ;
  assign LOCKSTEP_Out[1894] = \<const0> ;
  assign LOCKSTEP_Out[1895] = \<const0> ;
  assign LOCKSTEP_Out[1896] = \<const0> ;
  assign LOCKSTEP_Out[1897] = \<const0> ;
  assign LOCKSTEP_Out[1898] = \<const0> ;
  assign LOCKSTEP_Out[1899] = \<const0> ;
  assign LOCKSTEP_Out[1900] = \<const0> ;
  assign LOCKSTEP_Out[1901] = \<const0> ;
  assign LOCKSTEP_Out[1902] = \<const0> ;
  assign LOCKSTEP_Out[1903] = \<const0> ;
  assign LOCKSTEP_Out[1904] = \<const0> ;
  assign LOCKSTEP_Out[1905] = \<const0> ;
  assign LOCKSTEP_Out[1906] = \<const0> ;
  assign LOCKSTEP_Out[1907] = \<const0> ;
  assign LOCKSTEP_Out[1908] = \<const0> ;
  assign LOCKSTEP_Out[1909] = \<const0> ;
  assign LOCKSTEP_Out[1910] = \<const0> ;
  assign LOCKSTEP_Out[1911] = \<const0> ;
  assign LOCKSTEP_Out[1912] = \<const0> ;
  assign LOCKSTEP_Out[1913] = \<const0> ;
  assign LOCKSTEP_Out[1914] = \<const0> ;
  assign LOCKSTEP_Out[1915] = \<const0> ;
  assign LOCKSTEP_Out[1916] = \<const0> ;
  assign LOCKSTEP_Out[1917] = \<const0> ;
  assign LOCKSTEP_Out[1918] = \<const0> ;
  assign LOCKSTEP_Out[1919] = \<const0> ;
  assign LOCKSTEP_Out[1920] = \<const0> ;
  assign LOCKSTEP_Out[1921] = \<const0> ;
  assign LOCKSTEP_Out[1922] = \<const0> ;
  assign LOCKSTEP_Out[1923] = \<const0> ;
  assign LOCKSTEP_Out[1924] = \<const0> ;
  assign LOCKSTEP_Out[1925] = \<const0> ;
  assign LOCKSTEP_Out[1926] = \<const0> ;
  assign LOCKSTEP_Out[1927] = \<const0> ;
  assign LOCKSTEP_Out[1928] = \<const0> ;
  assign LOCKSTEP_Out[1929] = \<const0> ;
  assign LOCKSTEP_Out[1930] = \<const0> ;
  assign LOCKSTEP_Out[1931] = \<const0> ;
  assign LOCKSTEP_Out[1932] = \<const0> ;
  assign LOCKSTEP_Out[1933] = \<const0> ;
  assign LOCKSTEP_Out[1934] = \<const0> ;
  assign LOCKSTEP_Out[1935] = \<const0> ;
  assign LOCKSTEP_Out[1936] = \<const0> ;
  assign LOCKSTEP_Out[1937] = \<const0> ;
  assign LOCKSTEP_Out[1938] = \<const0> ;
  assign LOCKSTEP_Out[1939] = \<const0> ;
  assign LOCKSTEP_Out[1940] = \<const0> ;
  assign LOCKSTEP_Out[1941] = \<const0> ;
  assign LOCKSTEP_Out[1942] = \<const0> ;
  assign LOCKSTEP_Out[1943] = \<const0> ;
  assign LOCKSTEP_Out[1944] = \<const0> ;
  assign LOCKSTEP_Out[1945] = \<const0> ;
  assign LOCKSTEP_Out[1946] = \<const0> ;
  assign LOCKSTEP_Out[1947] = \<const0> ;
  assign LOCKSTEP_Out[1948] = \<const0> ;
  assign LOCKSTEP_Out[1949] = \<const0> ;
  assign LOCKSTEP_Out[1950] = \<const0> ;
  assign LOCKSTEP_Out[1951] = \<const0> ;
  assign LOCKSTEP_Out[1952] = \<const0> ;
  assign LOCKSTEP_Out[1953] = \<const0> ;
  assign LOCKSTEP_Out[1954] = \<const0> ;
  assign LOCKSTEP_Out[1955] = \<const0> ;
  assign LOCKSTEP_Out[1956] = \<const0> ;
  assign LOCKSTEP_Out[1957] = \<const0> ;
  assign LOCKSTEP_Out[1958] = \<const0> ;
  assign LOCKSTEP_Out[1959] = \<const0> ;
  assign LOCKSTEP_Out[1960] = \<const0> ;
  assign LOCKSTEP_Out[1961] = \<const0> ;
  assign LOCKSTEP_Out[1962] = \<const0> ;
  assign LOCKSTEP_Out[1963] = \<const0> ;
  assign LOCKSTEP_Out[1964] = \<const0> ;
  assign LOCKSTEP_Out[1965] = \<const0> ;
  assign LOCKSTEP_Out[1966] = \<const0> ;
  assign LOCKSTEP_Out[1967] = \<const0> ;
  assign LOCKSTEP_Out[1968] = \<const0> ;
  assign LOCKSTEP_Out[1969] = \<const0> ;
  assign LOCKSTEP_Out[1970] = \<const0> ;
  assign LOCKSTEP_Out[1971] = \<const0> ;
  assign LOCKSTEP_Out[1972] = \<const0> ;
  assign LOCKSTEP_Out[1973] = \<const0> ;
  assign LOCKSTEP_Out[1974] = \<const0> ;
  assign LOCKSTEP_Out[1975] = \<const0> ;
  assign LOCKSTEP_Out[1976] = \<const0> ;
  assign LOCKSTEP_Out[1977] = \<const0> ;
  assign LOCKSTEP_Out[1978] = \<const0> ;
  assign LOCKSTEP_Out[1979] = \<const0> ;
  assign LOCKSTEP_Out[1980] = \<const0> ;
  assign LOCKSTEP_Out[1981] = \<const0> ;
  assign LOCKSTEP_Out[1982] = \<const0> ;
  assign LOCKSTEP_Out[1983] = \<const0> ;
  assign LOCKSTEP_Out[1984] = \<const0> ;
  assign LOCKSTEP_Out[1985] = \<const0> ;
  assign LOCKSTEP_Out[1986] = \<const0> ;
  assign LOCKSTEP_Out[1987] = \<const0> ;
  assign LOCKSTEP_Out[1988] = \<const0> ;
  assign LOCKSTEP_Out[1989] = \<const0> ;
  assign LOCKSTEP_Out[1990] = \<const0> ;
  assign LOCKSTEP_Out[1991] = \<const0> ;
  assign LOCKSTEP_Out[1992] = \<const0> ;
  assign LOCKSTEP_Out[1993] = \<const0> ;
  assign LOCKSTEP_Out[1994] = \<const0> ;
  assign LOCKSTEP_Out[1995] = \<const0> ;
  assign LOCKSTEP_Out[1996] = \<const0> ;
  assign LOCKSTEP_Out[1997] = \<const0> ;
  assign LOCKSTEP_Out[1998] = \<const0> ;
  assign LOCKSTEP_Out[1999] = \<const0> ;
  assign LOCKSTEP_Out[2000] = \<const0> ;
  assign LOCKSTEP_Out[2001] = \<const0> ;
  assign LOCKSTEP_Out[2002] = \<const0> ;
  assign LOCKSTEP_Out[2003] = \<const0> ;
  assign LOCKSTEP_Out[2004] = \<const0> ;
  assign LOCKSTEP_Out[2005] = \<const0> ;
  assign LOCKSTEP_Out[2006] = \<const0> ;
  assign LOCKSTEP_Out[2007] = \<const0> ;
  assign LOCKSTEP_Out[2008] = \<const0> ;
  assign LOCKSTEP_Out[2009] = \<const0> ;
  assign LOCKSTEP_Out[2010] = \<const0> ;
  assign LOCKSTEP_Out[2011] = \<const0> ;
  assign LOCKSTEP_Out[2012] = \<const0> ;
  assign LOCKSTEP_Out[2013] = \<const0> ;
  assign LOCKSTEP_Out[2014] = \<const0> ;
  assign LOCKSTEP_Out[2015] = \<const0> ;
  assign LOCKSTEP_Out[2016] = \<const0> ;
  assign LOCKSTEP_Out[2017] = \<const0> ;
  assign LOCKSTEP_Out[2018] = \<const0> ;
  assign LOCKSTEP_Out[2019] = \<const0> ;
  assign LOCKSTEP_Out[2020] = \<const0> ;
  assign LOCKSTEP_Out[2021] = \<const0> ;
  assign LOCKSTEP_Out[2022] = \<const0> ;
  assign LOCKSTEP_Out[2023] = \<const0> ;
  assign LOCKSTEP_Out[2024] = \<const0> ;
  assign LOCKSTEP_Out[2025] = \<const0> ;
  assign LOCKSTEP_Out[2026] = \<const0> ;
  assign LOCKSTEP_Out[2027] = \<const0> ;
  assign LOCKSTEP_Out[2028] = \<const0> ;
  assign LOCKSTEP_Out[2029] = \<const0> ;
  assign LOCKSTEP_Out[2030] = \<const0> ;
  assign LOCKSTEP_Out[2031] = \<const0> ;
  assign LOCKSTEP_Out[2032] = \<const0> ;
  assign LOCKSTEP_Out[2033] = \<const0> ;
  assign LOCKSTEP_Out[2034] = \<const0> ;
  assign LOCKSTEP_Out[2035] = \<const0> ;
  assign LOCKSTEP_Out[2036] = \<const0> ;
  assign LOCKSTEP_Out[2037] = \<const0> ;
  assign LOCKSTEP_Out[2038] = \<const0> ;
  assign LOCKSTEP_Out[2039] = \<const0> ;
  assign LOCKSTEP_Out[2040] = \<const0> ;
  assign LOCKSTEP_Out[2041] = \<const0> ;
  assign LOCKSTEP_Out[2042] = \<const0> ;
  assign LOCKSTEP_Out[2043] = \<const0> ;
  assign LOCKSTEP_Out[2044] = \<const0> ;
  assign LOCKSTEP_Out[2045] = \<const0> ;
  assign LOCKSTEP_Out[2046] = \<const0> ;
  assign LOCKSTEP_Out[2047] = \<const0> ;
  assign LOCKSTEP_Out[2048] = \<const0> ;
  assign LOCKSTEP_Out[2049] = \<const0> ;
  assign LOCKSTEP_Out[2050] = \<const0> ;
  assign LOCKSTEP_Out[2051] = \<const0> ;
  assign LOCKSTEP_Out[2052] = \<const0> ;
  assign LOCKSTEP_Out[2053] = \<const0> ;
  assign LOCKSTEP_Out[2054] = \<const0> ;
  assign LOCKSTEP_Out[2055] = \<const0> ;
  assign LOCKSTEP_Out[2056] = \<const0> ;
  assign LOCKSTEP_Out[2057] = \<const0> ;
  assign LOCKSTEP_Out[2058] = \<const0> ;
  assign LOCKSTEP_Out[2059] = \<const0> ;
  assign LOCKSTEP_Out[2060] = \<const0> ;
  assign LOCKSTEP_Out[2061] = \<const0> ;
  assign LOCKSTEP_Out[2062] = \<const0> ;
  assign LOCKSTEP_Out[2063] = \<const0> ;
  assign LOCKSTEP_Out[2064] = \<const0> ;
  assign LOCKSTEP_Out[2065] = \<const0> ;
  assign LOCKSTEP_Out[2066] = \<const0> ;
  assign LOCKSTEP_Out[2067] = \<const0> ;
  assign LOCKSTEP_Out[2068] = \<const0> ;
  assign LOCKSTEP_Out[2069] = \<const0> ;
  assign LOCKSTEP_Out[2070] = \<const0> ;
  assign LOCKSTEP_Out[2071] = \<const0> ;
  assign LOCKSTEP_Out[2072] = \<const0> ;
  assign LOCKSTEP_Out[2073] = \<const0> ;
  assign LOCKSTEP_Out[2074] = \<const0> ;
  assign LOCKSTEP_Out[2075] = \<const0> ;
  assign LOCKSTEP_Out[2076] = \<const0> ;
  assign LOCKSTEP_Out[2077] = \<const0> ;
  assign LOCKSTEP_Out[2078] = \<const0> ;
  assign LOCKSTEP_Out[2079] = \<const0> ;
  assign LOCKSTEP_Out[2080] = \<const0> ;
  assign LOCKSTEP_Out[2081] = \<const0> ;
  assign LOCKSTEP_Out[2082] = \<const0> ;
  assign LOCKSTEP_Out[2083] = \<const0> ;
  assign LOCKSTEP_Out[2084] = \<const0> ;
  assign LOCKSTEP_Out[2085] = \<const0> ;
  assign LOCKSTEP_Out[2086] = \<const0> ;
  assign LOCKSTEP_Out[2087] = \<const0> ;
  assign LOCKSTEP_Out[2088] = \<const0> ;
  assign LOCKSTEP_Out[2089] = \<const0> ;
  assign LOCKSTEP_Out[2090] = \<const0> ;
  assign LOCKSTEP_Out[2091] = \<const0> ;
  assign LOCKSTEP_Out[2092] = \<const0> ;
  assign LOCKSTEP_Out[2093] = \<const0> ;
  assign LOCKSTEP_Out[2094] = \<const0> ;
  assign LOCKSTEP_Out[2095] = \<const0> ;
  assign LOCKSTEP_Out[2096] = \<const0> ;
  assign LOCKSTEP_Out[2097] = \<const0> ;
  assign LOCKSTEP_Out[2098] = \<const0> ;
  assign LOCKSTEP_Out[2099] = \<const0> ;
  assign LOCKSTEP_Out[2100] = \<const0> ;
  assign LOCKSTEP_Out[2101] = \<const0> ;
  assign LOCKSTEP_Out[2102] = \<const0> ;
  assign LOCKSTEP_Out[2103] = \<const0> ;
  assign LOCKSTEP_Out[2104] = \<const0> ;
  assign LOCKSTEP_Out[2105] = \<const0> ;
  assign LOCKSTEP_Out[2106] = \<const0> ;
  assign LOCKSTEP_Out[2107] = \<const0> ;
  assign LOCKSTEP_Out[2108] = \<const0> ;
  assign LOCKSTEP_Out[2109] = \<const0> ;
  assign LOCKSTEP_Out[2110] = \<const0> ;
  assign LOCKSTEP_Out[2111] = \<const0> ;
  assign LOCKSTEP_Out[2112] = \<const0> ;
  assign LOCKSTEP_Out[2113] = \<const0> ;
  assign LOCKSTEP_Out[2114] = \<const0> ;
  assign LOCKSTEP_Out[2115] = \<const0> ;
  assign LOCKSTEP_Out[2116] = \<const0> ;
  assign LOCKSTEP_Out[2117] = \<const0> ;
  assign LOCKSTEP_Out[2118] = \<const0> ;
  assign LOCKSTEP_Out[2119] = \<const0> ;
  assign LOCKSTEP_Out[2120] = \<const0> ;
  assign LOCKSTEP_Out[2121] = \<const0> ;
  assign LOCKSTEP_Out[2122] = \<const0> ;
  assign LOCKSTEP_Out[2123] = \<const0> ;
  assign LOCKSTEP_Out[2124] = \<const0> ;
  assign LOCKSTEP_Out[2125] = \<const0> ;
  assign LOCKSTEP_Out[2126] = \<const0> ;
  assign LOCKSTEP_Out[2127] = \<const0> ;
  assign LOCKSTEP_Out[2128] = \<const0> ;
  assign LOCKSTEP_Out[2129] = \<const0> ;
  assign LOCKSTEP_Out[2130] = \<const0> ;
  assign LOCKSTEP_Out[2131] = \<const0> ;
  assign LOCKSTEP_Out[2132] = \<const0> ;
  assign LOCKSTEP_Out[2133] = \<const0> ;
  assign LOCKSTEP_Out[2134] = \<const0> ;
  assign LOCKSTEP_Out[2135] = \<const0> ;
  assign LOCKSTEP_Out[2136] = \<const0> ;
  assign LOCKSTEP_Out[2137] = \<const0> ;
  assign LOCKSTEP_Out[2138] = \<const0> ;
  assign LOCKSTEP_Out[2139] = \<const0> ;
  assign LOCKSTEP_Out[2140] = \<const0> ;
  assign LOCKSTEP_Out[2141] = \<const0> ;
  assign LOCKSTEP_Out[2142] = \<const0> ;
  assign LOCKSTEP_Out[2143] = \<const0> ;
  assign LOCKSTEP_Out[2144] = \<const0> ;
  assign LOCKSTEP_Out[2145] = \<const0> ;
  assign LOCKSTEP_Out[2146] = \<const0> ;
  assign LOCKSTEP_Out[2147] = \<const0> ;
  assign LOCKSTEP_Out[2148] = \<const0> ;
  assign LOCKSTEP_Out[2149] = \<const0> ;
  assign LOCKSTEP_Out[2150] = \<const0> ;
  assign LOCKSTEP_Out[2151] = \<const0> ;
  assign LOCKSTEP_Out[2152] = \<const0> ;
  assign LOCKSTEP_Out[2153] = \<const0> ;
  assign LOCKSTEP_Out[2154] = \<const0> ;
  assign LOCKSTEP_Out[2155] = \<const0> ;
  assign LOCKSTEP_Out[2156] = \<const0> ;
  assign LOCKSTEP_Out[2157] = \<const0> ;
  assign LOCKSTEP_Out[2158] = \<const0> ;
  assign LOCKSTEP_Out[2159] = \<const0> ;
  assign LOCKSTEP_Out[2160] = \<const0> ;
  assign LOCKSTEP_Out[2161] = \<const0> ;
  assign LOCKSTEP_Out[2162] = \<const0> ;
  assign LOCKSTEP_Out[2163] = \<const0> ;
  assign LOCKSTEP_Out[2164] = \<const0> ;
  assign LOCKSTEP_Out[2165] = \<const0> ;
  assign LOCKSTEP_Out[2166] = \<const0> ;
  assign LOCKSTEP_Out[2167] = \<const0> ;
  assign LOCKSTEP_Out[2168] = \<const0> ;
  assign LOCKSTEP_Out[2169] = \<const0> ;
  assign LOCKSTEP_Out[2170] = \<const0> ;
  assign LOCKSTEP_Out[2171] = \<const0> ;
  assign LOCKSTEP_Out[2172] = \<const0> ;
  assign LOCKSTEP_Out[2173] = \<const0> ;
  assign LOCKSTEP_Out[2174] = \<const0> ;
  assign LOCKSTEP_Out[2175] = \<const0> ;
  assign LOCKSTEP_Out[2176] = \<const0> ;
  assign LOCKSTEP_Out[2177] = \<const0> ;
  assign LOCKSTEP_Out[2178] = \<const0> ;
  assign LOCKSTEP_Out[2179] = \<const0> ;
  assign LOCKSTEP_Out[2180] = \<const0> ;
  assign LOCKSTEP_Out[2181] = \<const0> ;
  assign LOCKSTEP_Out[2182] = \<const0> ;
  assign LOCKSTEP_Out[2183] = \<const0> ;
  assign LOCKSTEP_Out[2184] = \<const0> ;
  assign LOCKSTEP_Out[2185] = \<const0> ;
  assign LOCKSTEP_Out[2186] = \<const0> ;
  assign LOCKSTEP_Out[2187] = \<const0> ;
  assign LOCKSTEP_Out[2188] = \<const0> ;
  assign LOCKSTEP_Out[2189] = \<const0> ;
  assign LOCKSTEP_Out[2190] = \<const0> ;
  assign LOCKSTEP_Out[2191] = \<const0> ;
  assign LOCKSTEP_Out[2192] = \<const0> ;
  assign LOCKSTEP_Out[2193] = \<const0> ;
  assign LOCKSTEP_Out[2194] = \<const0> ;
  assign LOCKSTEP_Out[2195] = \<const0> ;
  assign LOCKSTEP_Out[2196] = \<const0> ;
  assign LOCKSTEP_Out[2197] = \<const0> ;
  assign LOCKSTEP_Out[2198] = \<const0> ;
  assign LOCKSTEP_Out[2199] = \<const0> ;
  assign LOCKSTEP_Out[2200] = \<const0> ;
  assign LOCKSTEP_Out[2201] = \<const0> ;
  assign LOCKSTEP_Out[2202] = \<const0> ;
  assign LOCKSTEP_Out[2203] = \<const0> ;
  assign LOCKSTEP_Out[2204] = \<const0> ;
  assign LOCKSTEP_Out[2205] = \<const0> ;
  assign LOCKSTEP_Out[2206] = \<const0> ;
  assign LOCKSTEP_Out[2207] = \<const0> ;
  assign LOCKSTEP_Out[2208] = \<const0> ;
  assign LOCKSTEP_Out[2209] = \<const0> ;
  assign LOCKSTEP_Out[2210] = \<const0> ;
  assign LOCKSTEP_Out[2211] = \<const0> ;
  assign LOCKSTEP_Out[2212] = \<const0> ;
  assign LOCKSTEP_Out[2213] = \<const0> ;
  assign LOCKSTEP_Out[2214] = \<const0> ;
  assign LOCKSTEP_Out[2215] = \<const0> ;
  assign LOCKSTEP_Out[2216] = \<const0> ;
  assign LOCKSTEP_Out[2217] = \<const0> ;
  assign LOCKSTEP_Out[2218] = \<const0> ;
  assign LOCKSTEP_Out[2219] = \<const0> ;
  assign LOCKSTEP_Out[2220] = \<const0> ;
  assign LOCKSTEP_Out[2221] = \<const0> ;
  assign LOCKSTEP_Out[2222] = \<const0> ;
  assign LOCKSTEP_Out[2223] = \<const0> ;
  assign LOCKSTEP_Out[2224] = \<const0> ;
  assign LOCKSTEP_Out[2225] = \<const0> ;
  assign LOCKSTEP_Out[2226] = \<const0> ;
  assign LOCKSTEP_Out[2227] = \<const0> ;
  assign LOCKSTEP_Out[2228] = \<const0> ;
  assign LOCKSTEP_Out[2229] = \<const0> ;
  assign LOCKSTEP_Out[2230] = \<const0> ;
  assign LOCKSTEP_Out[2231] = \<const0> ;
  assign LOCKSTEP_Out[2232] = \<const0> ;
  assign LOCKSTEP_Out[2233] = \<const0> ;
  assign LOCKSTEP_Out[2234] = \<const0> ;
  assign LOCKSTEP_Out[2235] = \<const0> ;
  assign LOCKSTEP_Out[2236] = \<const0> ;
  assign LOCKSTEP_Out[2237] = \<const0> ;
  assign LOCKSTEP_Out[2238] = \<const0> ;
  assign LOCKSTEP_Out[2239] = \<const0> ;
  assign LOCKSTEP_Out[2240] = \<const0> ;
  assign LOCKSTEP_Out[2241] = \<const0> ;
  assign LOCKSTEP_Out[2242] = \<const0> ;
  assign LOCKSTEP_Out[2243] = \<const0> ;
  assign LOCKSTEP_Out[2244] = \<const0> ;
  assign LOCKSTEP_Out[2245] = \<const0> ;
  assign LOCKSTEP_Out[2246] = \<const0> ;
  assign LOCKSTEP_Out[2247] = \<const0> ;
  assign LOCKSTEP_Out[2248] = \<const0> ;
  assign LOCKSTEP_Out[2249] = \<const0> ;
  assign LOCKSTEP_Out[2250] = \<const0> ;
  assign LOCKSTEP_Out[2251] = \<const0> ;
  assign LOCKSTEP_Out[2252] = \<const0> ;
  assign LOCKSTEP_Out[2253] = \<const0> ;
  assign LOCKSTEP_Out[2254] = \<const0> ;
  assign LOCKSTEP_Out[2255] = \<const0> ;
  assign LOCKSTEP_Out[2256] = \<const0> ;
  assign LOCKSTEP_Out[2257] = \<const0> ;
  assign LOCKSTEP_Out[2258] = \<const0> ;
  assign LOCKSTEP_Out[2259] = \<const0> ;
  assign LOCKSTEP_Out[2260] = \<const0> ;
  assign LOCKSTEP_Out[2261] = \<const0> ;
  assign LOCKSTEP_Out[2262] = \<const0> ;
  assign LOCKSTEP_Out[2263] = \<const0> ;
  assign LOCKSTEP_Out[2264] = \<const0> ;
  assign LOCKSTEP_Out[2265] = \<const0> ;
  assign LOCKSTEP_Out[2266] = \<const0> ;
  assign LOCKSTEP_Out[2267] = \<const0> ;
  assign LOCKSTEP_Out[2268] = \<const0> ;
  assign LOCKSTEP_Out[2269] = \<const0> ;
  assign LOCKSTEP_Out[2270] = \<const0> ;
  assign LOCKSTEP_Out[2271] = \<const0> ;
  assign LOCKSTEP_Out[2272] = \<const0> ;
  assign LOCKSTEP_Out[2273] = \<const0> ;
  assign LOCKSTEP_Out[2274] = \<const0> ;
  assign LOCKSTEP_Out[2275] = \<const0> ;
  assign LOCKSTEP_Out[2276] = \<const0> ;
  assign LOCKSTEP_Out[2277] = \<const0> ;
  assign LOCKSTEP_Out[2278] = \<const0> ;
  assign LOCKSTEP_Out[2279] = \<const0> ;
  assign LOCKSTEP_Out[2280] = \<const0> ;
  assign LOCKSTEP_Out[2281] = \<const0> ;
  assign LOCKSTEP_Out[2282] = \<const0> ;
  assign LOCKSTEP_Out[2283] = \<const0> ;
  assign LOCKSTEP_Out[2284] = \<const0> ;
  assign LOCKSTEP_Out[2285] = \<const0> ;
  assign LOCKSTEP_Out[2286] = \<const0> ;
  assign LOCKSTEP_Out[2287] = \<const0> ;
  assign LOCKSTEP_Out[2288] = \<const0> ;
  assign LOCKSTEP_Out[2289] = \<const0> ;
  assign LOCKSTEP_Out[2290] = \<const0> ;
  assign LOCKSTEP_Out[2291] = \<const0> ;
  assign LOCKSTEP_Out[2292] = \<const0> ;
  assign LOCKSTEP_Out[2293] = \<const0> ;
  assign LOCKSTEP_Out[2294] = \<const0> ;
  assign LOCKSTEP_Out[2295] = \<const0> ;
  assign LOCKSTEP_Out[2296] = \<const0> ;
  assign LOCKSTEP_Out[2297] = \<const0> ;
  assign LOCKSTEP_Out[2298] = \<const0> ;
  assign LOCKSTEP_Out[2299] = \<const0> ;
  assign LOCKSTEP_Out[2300] = \<const0> ;
  assign LOCKSTEP_Out[2301] = \<const0> ;
  assign LOCKSTEP_Out[2302] = \<const0> ;
  assign LOCKSTEP_Out[2303] = \<const0> ;
  assign LOCKSTEP_Out[2304] = \<const0> ;
  assign LOCKSTEP_Out[2305] = \<const0> ;
  assign LOCKSTEP_Out[2306] = \<const0> ;
  assign LOCKSTEP_Out[2307] = \<const0> ;
  assign LOCKSTEP_Out[2308] = \<const0> ;
  assign LOCKSTEP_Out[2309] = \<const0> ;
  assign LOCKSTEP_Out[2310] = \<const0> ;
  assign LOCKSTEP_Out[2311] = \<const0> ;
  assign LOCKSTEP_Out[2312] = \<const0> ;
  assign LOCKSTEP_Out[2313] = \<const0> ;
  assign LOCKSTEP_Out[2314] = \<const0> ;
  assign LOCKSTEP_Out[2315] = \<const0> ;
  assign LOCKSTEP_Out[2316] = \<const0> ;
  assign LOCKSTEP_Out[2317] = \<const0> ;
  assign LOCKSTEP_Out[2318] = \<const0> ;
  assign LOCKSTEP_Out[2319] = \<const0> ;
  assign LOCKSTEP_Out[2320] = \<const0> ;
  assign LOCKSTEP_Out[2321] = \<const0> ;
  assign LOCKSTEP_Out[2322] = \<const0> ;
  assign LOCKSTEP_Out[2323] = \<const0> ;
  assign LOCKSTEP_Out[2324] = \<const0> ;
  assign LOCKSTEP_Out[2325] = \<const0> ;
  assign LOCKSTEP_Out[2326] = \<const0> ;
  assign LOCKSTEP_Out[2327] = \<const0> ;
  assign LOCKSTEP_Out[2328] = \<const0> ;
  assign LOCKSTEP_Out[2329] = \<const0> ;
  assign LOCKSTEP_Out[2330] = \<const0> ;
  assign LOCKSTEP_Out[2331] = \<const0> ;
  assign LOCKSTEP_Out[2332] = \<const0> ;
  assign LOCKSTEP_Out[2333] = \<const0> ;
  assign LOCKSTEP_Out[2334] = \<const0> ;
  assign LOCKSTEP_Out[2335] = \<const0> ;
  assign LOCKSTEP_Out[2336] = \<const0> ;
  assign LOCKSTEP_Out[2337] = \<const0> ;
  assign LOCKSTEP_Out[2338] = \<const0> ;
  assign LOCKSTEP_Out[2339] = \<const0> ;
  assign LOCKSTEP_Out[2340] = \<const0> ;
  assign LOCKSTEP_Out[2341] = \<const0> ;
  assign LOCKSTEP_Out[2342] = \<const0> ;
  assign LOCKSTEP_Out[2343] = \<const0> ;
  assign LOCKSTEP_Out[2344] = \<const0> ;
  assign LOCKSTEP_Out[2345] = \<const0> ;
  assign LOCKSTEP_Out[2346] = \<const0> ;
  assign LOCKSTEP_Out[2347] = \<const0> ;
  assign LOCKSTEP_Out[2348] = \<const0> ;
  assign LOCKSTEP_Out[2349] = \<const0> ;
  assign LOCKSTEP_Out[2350] = \<const0> ;
  assign LOCKSTEP_Out[2351] = \<const0> ;
  assign LOCKSTEP_Out[2352] = \<const0> ;
  assign LOCKSTEP_Out[2353] = \<const0> ;
  assign LOCKSTEP_Out[2354] = \<const0> ;
  assign LOCKSTEP_Out[2355] = \<const0> ;
  assign LOCKSTEP_Out[2356] = \<const0> ;
  assign LOCKSTEP_Out[2357] = \<const0> ;
  assign LOCKSTEP_Out[2358] = \<const0> ;
  assign LOCKSTEP_Out[2359] = \<const0> ;
  assign LOCKSTEP_Out[2360] = \<const0> ;
  assign LOCKSTEP_Out[2361] = \<const0> ;
  assign LOCKSTEP_Out[2362] = \<const0> ;
  assign LOCKSTEP_Out[2363] = \<const0> ;
  assign LOCKSTEP_Out[2364] = \<const0> ;
  assign LOCKSTEP_Out[2365] = \<const0> ;
  assign LOCKSTEP_Out[2366] = \<const0> ;
  assign LOCKSTEP_Out[2367] = \<const0> ;
  assign LOCKSTEP_Out[2368] = \<const0> ;
  assign LOCKSTEP_Out[2369] = \<const0> ;
  assign LOCKSTEP_Out[2370] = \<const0> ;
  assign LOCKSTEP_Out[2371] = \<const0> ;
  assign LOCKSTEP_Out[2372] = \<const0> ;
  assign LOCKSTEP_Out[2373] = \<const0> ;
  assign LOCKSTEP_Out[2374] = \<const0> ;
  assign LOCKSTEP_Out[2375] = \<const0> ;
  assign LOCKSTEP_Out[2376] = \<const0> ;
  assign LOCKSTEP_Out[2377] = \<const0> ;
  assign LOCKSTEP_Out[2378] = \<const0> ;
  assign LOCKSTEP_Out[2379] = \<const0> ;
  assign LOCKSTEP_Out[2380] = \<const0> ;
  assign LOCKSTEP_Out[2381] = \<const0> ;
  assign LOCKSTEP_Out[2382] = \<const0> ;
  assign LOCKSTEP_Out[2383] = \<const0> ;
  assign LOCKSTEP_Out[2384] = \<const0> ;
  assign LOCKSTEP_Out[2385] = \<const0> ;
  assign LOCKSTEP_Out[2386] = \<const0> ;
  assign LOCKSTEP_Out[2387] = \<const0> ;
  assign LOCKSTEP_Out[2388] = \<const0> ;
  assign LOCKSTEP_Out[2389] = \<const0> ;
  assign LOCKSTEP_Out[2390] = \<const0> ;
  assign LOCKSTEP_Out[2391] = \<const0> ;
  assign LOCKSTEP_Out[2392] = \<const0> ;
  assign LOCKSTEP_Out[2393] = \<const0> ;
  assign LOCKSTEP_Out[2394] = \<const0> ;
  assign LOCKSTEP_Out[2395] = \<const0> ;
  assign LOCKSTEP_Out[2396] = \<const0> ;
  assign LOCKSTEP_Out[2397] = \<const0> ;
  assign LOCKSTEP_Out[2398] = \<const0> ;
  assign LOCKSTEP_Out[2399] = \<const0> ;
  assign LOCKSTEP_Out[2400] = \<const0> ;
  assign LOCKSTEP_Out[2401] = \<const0> ;
  assign LOCKSTEP_Out[2402] = \<const0> ;
  assign LOCKSTEP_Out[2403] = \<const0> ;
  assign LOCKSTEP_Out[2404] = \<const0> ;
  assign LOCKSTEP_Out[2405] = \<const0> ;
  assign LOCKSTEP_Out[2406] = \<const0> ;
  assign LOCKSTEP_Out[2407] = \<const0> ;
  assign LOCKSTEP_Out[2408] = \<const0> ;
  assign LOCKSTEP_Out[2409] = \<const0> ;
  assign LOCKSTEP_Out[2410] = \<const0> ;
  assign LOCKSTEP_Out[2411] = \<const0> ;
  assign LOCKSTEP_Out[2412] = \<const0> ;
  assign LOCKSTEP_Out[2413] = \<const0> ;
  assign LOCKSTEP_Out[2414] = \<const0> ;
  assign LOCKSTEP_Out[2415] = \<const0> ;
  assign LOCKSTEP_Out[2416] = \<const0> ;
  assign LOCKSTEP_Out[2417] = \<const0> ;
  assign LOCKSTEP_Out[2418] = \<const0> ;
  assign LOCKSTEP_Out[2419] = \<const0> ;
  assign LOCKSTEP_Out[2420] = \<const0> ;
  assign LOCKSTEP_Out[2421] = \<const0> ;
  assign LOCKSTEP_Out[2422] = \<const0> ;
  assign LOCKSTEP_Out[2423] = \<const0> ;
  assign LOCKSTEP_Out[2424] = \<const0> ;
  assign LOCKSTEP_Out[2425] = \<const0> ;
  assign LOCKSTEP_Out[2426] = \<const0> ;
  assign LOCKSTEP_Out[2427] = \<const0> ;
  assign LOCKSTEP_Out[2428] = \<const0> ;
  assign LOCKSTEP_Out[2429] = \<const0> ;
  assign LOCKSTEP_Out[2430] = \<const0> ;
  assign LOCKSTEP_Out[2431] = \<const0> ;
  assign LOCKSTEP_Out[2432] = \<const0> ;
  assign LOCKSTEP_Out[2433] = \<const0> ;
  assign LOCKSTEP_Out[2434] = \<const0> ;
  assign LOCKSTEP_Out[2435] = \<const0> ;
  assign LOCKSTEP_Out[2436] = \<const0> ;
  assign LOCKSTEP_Out[2437] = \<const0> ;
  assign LOCKSTEP_Out[2438] = \<const0> ;
  assign LOCKSTEP_Out[2439] = \<const0> ;
  assign LOCKSTEP_Out[2440] = \<const0> ;
  assign LOCKSTEP_Out[2441] = \<const0> ;
  assign LOCKSTEP_Out[2442] = \<const0> ;
  assign LOCKSTEP_Out[2443] = \<const0> ;
  assign LOCKSTEP_Out[2444] = \<const0> ;
  assign LOCKSTEP_Out[2445] = \<const0> ;
  assign LOCKSTEP_Out[2446] = \<const0> ;
  assign LOCKSTEP_Out[2447] = \<const0> ;
  assign LOCKSTEP_Out[2448] = \<const0> ;
  assign LOCKSTEP_Out[2449] = \<const0> ;
  assign LOCKSTEP_Out[2450] = \<const0> ;
  assign LOCKSTEP_Out[2451] = \<const0> ;
  assign LOCKSTEP_Out[2452] = \<const0> ;
  assign LOCKSTEP_Out[2453] = \<const0> ;
  assign LOCKSTEP_Out[2454] = \<const0> ;
  assign LOCKSTEP_Out[2455] = \<const0> ;
  assign LOCKSTEP_Out[2456] = \<const0> ;
  assign LOCKSTEP_Out[2457] = \<const0> ;
  assign LOCKSTEP_Out[2458] = \<const0> ;
  assign LOCKSTEP_Out[2459] = \<const0> ;
  assign LOCKSTEP_Out[2460] = \<const0> ;
  assign LOCKSTEP_Out[2461] = \<const0> ;
  assign LOCKSTEP_Out[2462] = \<const0> ;
  assign LOCKSTEP_Out[2463] = \<const0> ;
  assign LOCKSTEP_Out[2464] = \<const0> ;
  assign LOCKSTEP_Out[2465] = \<const0> ;
  assign LOCKSTEP_Out[2466] = \<const0> ;
  assign LOCKSTEP_Out[2467] = \<const0> ;
  assign LOCKSTEP_Out[2468] = \<const0> ;
  assign LOCKSTEP_Out[2469] = \<const0> ;
  assign LOCKSTEP_Out[2470] = \<const0> ;
  assign LOCKSTEP_Out[2471] = \<const0> ;
  assign LOCKSTEP_Out[2472] = \<const0> ;
  assign LOCKSTEP_Out[2473] = \<const0> ;
  assign LOCKSTEP_Out[2474] = \<const0> ;
  assign LOCKSTEP_Out[2475] = \<const0> ;
  assign LOCKSTEP_Out[2476] = \<const0> ;
  assign LOCKSTEP_Out[2477] = \<const0> ;
  assign LOCKSTEP_Out[2478] = \<const0> ;
  assign LOCKSTEP_Out[2479] = \<const0> ;
  assign LOCKSTEP_Out[2480] = \<const0> ;
  assign LOCKSTEP_Out[2481] = \<const0> ;
  assign LOCKSTEP_Out[2482] = \<const0> ;
  assign LOCKSTEP_Out[2483] = \<const0> ;
  assign LOCKSTEP_Out[2484] = \<const0> ;
  assign LOCKSTEP_Out[2485] = \<const0> ;
  assign LOCKSTEP_Out[2486] = \<const0> ;
  assign LOCKSTEP_Out[2487] = \<const0> ;
  assign LOCKSTEP_Out[2488] = \<const0> ;
  assign LOCKSTEP_Out[2489] = \<const0> ;
  assign LOCKSTEP_Out[2490] = \<const0> ;
  assign LOCKSTEP_Out[2491] = \<const0> ;
  assign LOCKSTEP_Out[2492] = \<const0> ;
  assign LOCKSTEP_Out[2493] = \<const0> ;
  assign LOCKSTEP_Out[2494] = \<const0> ;
  assign LOCKSTEP_Out[2495] = \<const0> ;
  assign LOCKSTEP_Out[2496] = \<const0> ;
  assign LOCKSTEP_Out[2497] = \<const0> ;
  assign LOCKSTEP_Out[2498] = \<const0> ;
  assign LOCKSTEP_Out[2499] = \<const0> ;
  assign LOCKSTEP_Out[2500] = \<const0> ;
  assign LOCKSTEP_Out[2501] = \<const0> ;
  assign LOCKSTEP_Out[2502] = \<const0> ;
  assign LOCKSTEP_Out[2503] = \<const0> ;
  assign LOCKSTEP_Out[2504] = \<const0> ;
  assign LOCKSTEP_Out[2505] = \<const0> ;
  assign LOCKSTEP_Out[2506] = \<const0> ;
  assign LOCKSTEP_Out[2507] = \<const0> ;
  assign LOCKSTEP_Out[2508] = \<const0> ;
  assign LOCKSTEP_Out[2509] = \<const0> ;
  assign LOCKSTEP_Out[2510] = \<const0> ;
  assign LOCKSTEP_Out[2511] = \<const0> ;
  assign LOCKSTEP_Out[2512] = \<const0> ;
  assign LOCKSTEP_Out[2513] = \<const0> ;
  assign LOCKSTEP_Out[2514] = \<const0> ;
  assign LOCKSTEP_Out[2515] = \<const0> ;
  assign LOCKSTEP_Out[2516] = \<const0> ;
  assign LOCKSTEP_Out[2517] = \<const0> ;
  assign LOCKSTEP_Out[2518] = \<const0> ;
  assign LOCKSTEP_Out[2519] = \<const0> ;
  assign LOCKSTEP_Out[2520] = \<const0> ;
  assign LOCKSTEP_Out[2521] = \<const0> ;
  assign LOCKSTEP_Out[2522] = \<const0> ;
  assign LOCKSTEP_Out[2523] = \<const0> ;
  assign LOCKSTEP_Out[2524] = \<const0> ;
  assign LOCKSTEP_Out[2525] = \<const0> ;
  assign LOCKSTEP_Out[2526] = \<const0> ;
  assign LOCKSTEP_Out[2527] = \<const0> ;
  assign LOCKSTEP_Out[2528] = \<const0> ;
  assign LOCKSTEP_Out[2529] = \<const0> ;
  assign LOCKSTEP_Out[2530] = \<const0> ;
  assign LOCKSTEP_Out[2531] = \<const0> ;
  assign LOCKSTEP_Out[2532] = \<const0> ;
  assign LOCKSTEP_Out[2533] = \<const0> ;
  assign LOCKSTEP_Out[2534] = \<const0> ;
  assign LOCKSTEP_Out[2535] = \<const0> ;
  assign LOCKSTEP_Out[2536] = \<const0> ;
  assign LOCKSTEP_Out[2537] = \<const0> ;
  assign LOCKSTEP_Out[2538] = \<const0> ;
  assign LOCKSTEP_Out[2539] = \<const0> ;
  assign LOCKSTEP_Out[2540] = \<const0> ;
  assign LOCKSTEP_Out[2541] = \<const0> ;
  assign LOCKSTEP_Out[2542] = \<const0> ;
  assign LOCKSTEP_Out[2543] = \<const0> ;
  assign LOCKSTEP_Out[2544] = \<const0> ;
  assign LOCKSTEP_Out[2545] = \<const0> ;
  assign LOCKSTEP_Out[2546] = \<const0> ;
  assign LOCKSTEP_Out[2547] = \<const0> ;
  assign LOCKSTEP_Out[2548] = \<const0> ;
  assign LOCKSTEP_Out[2549] = \<const0> ;
  assign LOCKSTEP_Out[2550] = \<const0> ;
  assign LOCKSTEP_Out[2551] = \<const0> ;
  assign LOCKSTEP_Out[2552] = \<const0> ;
  assign LOCKSTEP_Out[2553] = \<const0> ;
  assign LOCKSTEP_Out[2554] = \<const0> ;
  assign LOCKSTEP_Out[2555] = \<const0> ;
  assign LOCKSTEP_Out[2556] = \<const0> ;
  assign LOCKSTEP_Out[2557] = \<const0> ;
  assign LOCKSTEP_Out[2558] = \<const0> ;
  assign LOCKSTEP_Out[2559] = \<const0> ;
  assign LOCKSTEP_Out[2560] = \<const0> ;
  assign LOCKSTEP_Out[2561] = \<const0> ;
  assign LOCKSTEP_Out[2562] = \<const0> ;
  assign LOCKSTEP_Out[2563] = \<const0> ;
  assign LOCKSTEP_Out[2564] = \<const0> ;
  assign LOCKSTEP_Out[2565] = \<const0> ;
  assign LOCKSTEP_Out[2566] = \<const0> ;
  assign LOCKSTEP_Out[2567] = \<const0> ;
  assign LOCKSTEP_Out[2568] = \<const0> ;
  assign LOCKSTEP_Out[2569] = \<const0> ;
  assign LOCKSTEP_Out[2570] = \<const0> ;
  assign LOCKSTEP_Out[2571] = \<const0> ;
  assign LOCKSTEP_Out[2572] = \<const0> ;
  assign LOCKSTEP_Out[2573] = \<const0> ;
  assign LOCKSTEP_Out[2574] = \<const0> ;
  assign LOCKSTEP_Out[2575] = \<const0> ;
  assign LOCKSTEP_Out[2576] = \<const0> ;
  assign LOCKSTEP_Out[2577] = \<const0> ;
  assign LOCKSTEP_Out[2578] = \<const0> ;
  assign LOCKSTEP_Out[2579] = \<const0> ;
  assign LOCKSTEP_Out[2580] = \<const0> ;
  assign LOCKSTEP_Out[2581] = \<const0> ;
  assign LOCKSTEP_Out[2582] = \<const0> ;
  assign LOCKSTEP_Out[2583] = \<const0> ;
  assign LOCKSTEP_Out[2584] = \<const0> ;
  assign LOCKSTEP_Out[2585] = \<const0> ;
  assign LOCKSTEP_Out[2586] = \<const0> ;
  assign LOCKSTEP_Out[2587] = \<const0> ;
  assign LOCKSTEP_Out[2588] = \<const0> ;
  assign LOCKSTEP_Out[2589] = \<const0> ;
  assign LOCKSTEP_Out[2590] = \<const0> ;
  assign LOCKSTEP_Out[2591] = \<const0> ;
  assign LOCKSTEP_Out[2592] = \<const0> ;
  assign LOCKSTEP_Out[2593] = \<const0> ;
  assign LOCKSTEP_Out[2594] = \<const0> ;
  assign LOCKSTEP_Out[2595] = \<const0> ;
  assign LOCKSTEP_Out[2596] = \<const0> ;
  assign LOCKSTEP_Out[2597] = \<const0> ;
  assign LOCKSTEP_Out[2598] = \<const0> ;
  assign LOCKSTEP_Out[2599] = \<const0> ;
  assign LOCKSTEP_Out[2600] = \<const0> ;
  assign LOCKSTEP_Out[2601] = \<const0> ;
  assign LOCKSTEP_Out[2602] = \<const0> ;
  assign LOCKSTEP_Out[2603] = \<const0> ;
  assign LOCKSTEP_Out[2604] = \<const0> ;
  assign LOCKSTEP_Out[2605] = \<const0> ;
  assign LOCKSTEP_Out[2606] = \<const0> ;
  assign LOCKSTEP_Out[2607] = \<const0> ;
  assign LOCKSTEP_Out[2608] = \<const0> ;
  assign LOCKSTEP_Out[2609] = \<const0> ;
  assign LOCKSTEP_Out[2610] = \<const0> ;
  assign LOCKSTEP_Out[2611] = \<const0> ;
  assign LOCKSTEP_Out[2612] = \<const0> ;
  assign LOCKSTEP_Out[2613] = \<const0> ;
  assign LOCKSTEP_Out[2614] = \<const0> ;
  assign LOCKSTEP_Out[2615] = \<const0> ;
  assign LOCKSTEP_Out[2616] = \<const0> ;
  assign LOCKSTEP_Out[2617] = \<const0> ;
  assign LOCKSTEP_Out[2618] = \<const0> ;
  assign LOCKSTEP_Out[2619] = \<const0> ;
  assign LOCKSTEP_Out[2620] = \<const0> ;
  assign LOCKSTEP_Out[2621] = \<const0> ;
  assign LOCKSTEP_Out[2622] = \<const0> ;
  assign LOCKSTEP_Out[2623] = \<const0> ;
  assign LOCKSTEP_Out[2624] = \<const0> ;
  assign LOCKSTEP_Out[2625] = \<const0> ;
  assign LOCKSTEP_Out[2626] = \<const0> ;
  assign LOCKSTEP_Out[2627] = \<const0> ;
  assign LOCKSTEP_Out[2628] = \<const0> ;
  assign LOCKSTEP_Out[2629] = \<const0> ;
  assign LOCKSTEP_Out[2630] = \<const0> ;
  assign LOCKSTEP_Out[2631] = \<const0> ;
  assign LOCKSTEP_Out[2632] = \<const0> ;
  assign LOCKSTEP_Out[2633] = \<const0> ;
  assign LOCKSTEP_Out[2634] = \<const0> ;
  assign LOCKSTEP_Out[2635] = \<const0> ;
  assign LOCKSTEP_Out[2636] = \<const0> ;
  assign LOCKSTEP_Out[2637] = \<const0> ;
  assign LOCKSTEP_Out[2638] = \<const0> ;
  assign LOCKSTEP_Out[2639] = \<const0> ;
  assign LOCKSTEP_Out[2640] = \<const0> ;
  assign LOCKSTEP_Out[2641] = \<const0> ;
  assign LOCKSTEP_Out[2642] = \<const0> ;
  assign LOCKSTEP_Out[2643] = \<const0> ;
  assign LOCKSTEP_Out[2644] = \<const0> ;
  assign LOCKSTEP_Out[2645] = \<const0> ;
  assign LOCKSTEP_Out[2646] = \<const0> ;
  assign LOCKSTEP_Out[2647] = \<const0> ;
  assign LOCKSTEP_Out[2648] = \<const0> ;
  assign LOCKSTEP_Out[2649] = \<const0> ;
  assign LOCKSTEP_Out[2650] = \<const0> ;
  assign LOCKSTEP_Out[2651] = \<const0> ;
  assign LOCKSTEP_Out[2652] = \<const0> ;
  assign LOCKSTEP_Out[2653] = \<const0> ;
  assign LOCKSTEP_Out[2654] = \<const0> ;
  assign LOCKSTEP_Out[2655] = \<const0> ;
  assign LOCKSTEP_Out[2656] = \<const0> ;
  assign LOCKSTEP_Out[2657] = \<const0> ;
  assign LOCKSTEP_Out[2658] = \<const0> ;
  assign LOCKSTEP_Out[2659] = \<const0> ;
  assign LOCKSTEP_Out[2660] = \<const0> ;
  assign LOCKSTEP_Out[2661] = \<const0> ;
  assign LOCKSTEP_Out[2662] = \<const0> ;
  assign LOCKSTEP_Out[2663] = \<const0> ;
  assign LOCKSTEP_Out[2664] = \<const0> ;
  assign LOCKSTEP_Out[2665] = \<const0> ;
  assign LOCKSTEP_Out[2666] = \<const0> ;
  assign LOCKSTEP_Out[2667] = \<const0> ;
  assign LOCKSTEP_Out[2668] = \<const0> ;
  assign LOCKSTEP_Out[2669] = \<const0> ;
  assign LOCKSTEP_Out[2670] = \<const0> ;
  assign LOCKSTEP_Out[2671] = \<const0> ;
  assign LOCKSTEP_Out[2672] = \<const0> ;
  assign LOCKSTEP_Out[2673] = \<const0> ;
  assign LOCKSTEP_Out[2674] = \<const0> ;
  assign LOCKSTEP_Out[2675] = \<const0> ;
  assign LOCKSTEP_Out[2676] = \<const0> ;
  assign LOCKSTEP_Out[2677] = \<const0> ;
  assign LOCKSTEP_Out[2678] = \<const0> ;
  assign LOCKSTEP_Out[2679] = \<const0> ;
  assign LOCKSTEP_Out[2680] = \<const0> ;
  assign LOCKSTEP_Out[2681] = \<const0> ;
  assign LOCKSTEP_Out[2682] = \<const0> ;
  assign LOCKSTEP_Out[2683] = \<const0> ;
  assign LOCKSTEP_Out[2684] = \<const0> ;
  assign LOCKSTEP_Out[2685] = \<const0> ;
  assign LOCKSTEP_Out[2686] = \<const0> ;
  assign LOCKSTEP_Out[2687] = \<const0> ;
  assign LOCKSTEP_Out[2688] = \<const0> ;
  assign LOCKSTEP_Out[2689] = \<const0> ;
  assign LOCKSTEP_Out[2690] = \<const0> ;
  assign LOCKSTEP_Out[2691] = \<const0> ;
  assign LOCKSTEP_Out[2692] = \<const0> ;
  assign LOCKSTEP_Out[2693] = \<const0> ;
  assign LOCKSTEP_Out[2694] = \<const0> ;
  assign LOCKSTEP_Out[2695] = \<const0> ;
  assign LOCKSTEP_Out[2696] = \<const0> ;
  assign LOCKSTEP_Out[2697] = \<const0> ;
  assign LOCKSTEP_Out[2698] = \<const0> ;
  assign LOCKSTEP_Out[2699] = \<const0> ;
  assign LOCKSTEP_Out[2700] = \<const0> ;
  assign LOCKSTEP_Out[2701] = \<const0> ;
  assign LOCKSTEP_Out[2702] = \<const0> ;
  assign LOCKSTEP_Out[2703] = \<const0> ;
  assign LOCKSTEP_Out[2704] = \<const0> ;
  assign LOCKSTEP_Out[2705] = \<const0> ;
  assign LOCKSTEP_Out[2706] = \<const0> ;
  assign LOCKSTEP_Out[2707] = \<const0> ;
  assign LOCKSTEP_Out[2708] = \<const0> ;
  assign LOCKSTEP_Out[2709] = \<const0> ;
  assign LOCKSTEP_Out[2710] = \<const0> ;
  assign LOCKSTEP_Out[2711] = \<const0> ;
  assign LOCKSTEP_Out[2712] = \<const0> ;
  assign LOCKSTEP_Out[2713] = \<const0> ;
  assign LOCKSTEP_Out[2714] = \<const0> ;
  assign LOCKSTEP_Out[2715] = \<const0> ;
  assign LOCKSTEP_Out[2716] = \<const0> ;
  assign LOCKSTEP_Out[2717] = \<const0> ;
  assign LOCKSTEP_Out[2718] = \<const0> ;
  assign LOCKSTEP_Out[2719] = \<const0> ;
  assign LOCKSTEP_Out[2720] = \<const0> ;
  assign LOCKSTEP_Out[2721] = \<const0> ;
  assign LOCKSTEP_Out[2722] = \<const0> ;
  assign LOCKSTEP_Out[2723] = \<const0> ;
  assign LOCKSTEP_Out[2724] = \<const0> ;
  assign LOCKSTEP_Out[2725] = \<const0> ;
  assign LOCKSTEP_Out[2726] = \<const0> ;
  assign LOCKSTEP_Out[2727] = \<const0> ;
  assign LOCKSTEP_Out[2728] = \<const0> ;
  assign LOCKSTEP_Out[2729] = \<const0> ;
  assign LOCKSTEP_Out[2730] = \<const0> ;
  assign LOCKSTEP_Out[2731] = \<const0> ;
  assign LOCKSTEP_Out[2732] = \<const0> ;
  assign LOCKSTEP_Out[2733] = \<const0> ;
  assign LOCKSTEP_Out[2734] = \<const0> ;
  assign LOCKSTEP_Out[2735] = \<const0> ;
  assign LOCKSTEP_Out[2736] = \<const0> ;
  assign LOCKSTEP_Out[2737] = \<const0> ;
  assign LOCKSTEP_Out[2738] = \<const0> ;
  assign LOCKSTEP_Out[2739] = \<const0> ;
  assign LOCKSTEP_Out[2740] = \<const0> ;
  assign LOCKSTEP_Out[2741] = \<const0> ;
  assign LOCKSTEP_Out[2742] = \<const0> ;
  assign LOCKSTEP_Out[2743] = \<const0> ;
  assign LOCKSTEP_Out[2744] = \<const0> ;
  assign LOCKSTEP_Out[2745] = \<const0> ;
  assign LOCKSTEP_Out[2746] = \<const0> ;
  assign LOCKSTEP_Out[2747] = \<const0> ;
  assign LOCKSTEP_Out[2748] = \<const0> ;
  assign LOCKSTEP_Out[2749] = \<const0> ;
  assign LOCKSTEP_Out[2750] = \<const0> ;
  assign LOCKSTEP_Out[2751] = \<const0> ;
  assign LOCKSTEP_Out[2752] = \<const0> ;
  assign LOCKSTEP_Out[2753] = \<const0> ;
  assign LOCKSTEP_Out[2754] = \<const0> ;
  assign LOCKSTEP_Out[2755] = \<const0> ;
  assign LOCKSTEP_Out[2756] = \<const0> ;
  assign LOCKSTEP_Out[2757] = \<const0> ;
  assign LOCKSTEP_Out[2758] = \<const0> ;
  assign LOCKSTEP_Out[2759] = \<const0> ;
  assign LOCKSTEP_Out[2760] = \<const0> ;
  assign LOCKSTEP_Out[2761] = \<const0> ;
  assign LOCKSTEP_Out[2762] = \<const0> ;
  assign LOCKSTEP_Out[2763] = \<const0> ;
  assign LOCKSTEP_Out[2764] = \<const0> ;
  assign LOCKSTEP_Out[2765] = \<const0> ;
  assign LOCKSTEP_Out[2766] = \<const0> ;
  assign LOCKSTEP_Out[2767] = \<const0> ;
  assign LOCKSTEP_Out[2768] = \<const0> ;
  assign LOCKSTEP_Out[2769] = \<const0> ;
  assign LOCKSTEP_Out[2770] = \<const0> ;
  assign LOCKSTEP_Out[2771] = \<const0> ;
  assign LOCKSTEP_Out[2772] = \<const0> ;
  assign LOCKSTEP_Out[2773] = \<const0> ;
  assign LOCKSTEP_Out[2774] = \<const0> ;
  assign LOCKSTEP_Out[2775] = \<const0> ;
  assign LOCKSTEP_Out[2776] = \<const0> ;
  assign LOCKSTEP_Out[2777] = \<const0> ;
  assign LOCKSTEP_Out[2778] = \<const0> ;
  assign LOCKSTEP_Out[2779] = \<const0> ;
  assign LOCKSTEP_Out[2780] = \<const0> ;
  assign LOCKSTEP_Out[2781] = \<const0> ;
  assign LOCKSTEP_Out[2782] = \<const0> ;
  assign LOCKSTEP_Out[2783] = \<const0> ;
  assign LOCKSTEP_Out[2784] = \<const0> ;
  assign LOCKSTEP_Out[2785] = \<const0> ;
  assign LOCKSTEP_Out[2786] = \<const0> ;
  assign LOCKSTEP_Out[2787] = \<const0> ;
  assign LOCKSTEP_Out[2788] = \<const0> ;
  assign LOCKSTEP_Out[2789] = \<const0> ;
  assign LOCKSTEP_Out[2790] = \<const0> ;
  assign LOCKSTEP_Out[2791] = \<const0> ;
  assign LOCKSTEP_Out[2792] = \<const0> ;
  assign LOCKSTEP_Out[2793] = \<const0> ;
  assign LOCKSTEP_Out[2794] = \<const0> ;
  assign LOCKSTEP_Out[2795] = \<const0> ;
  assign LOCKSTEP_Out[2796] = \<const0> ;
  assign LOCKSTEP_Out[2797] = \<const0> ;
  assign LOCKSTEP_Out[2798] = \<const0> ;
  assign LOCKSTEP_Out[2799] = \<const0> ;
  assign LOCKSTEP_Out[2800] = \<const0> ;
  assign LOCKSTEP_Out[2801] = \<const0> ;
  assign LOCKSTEP_Out[2802] = \<const0> ;
  assign LOCKSTEP_Out[2803] = \<const0> ;
  assign LOCKSTEP_Out[2804] = \<const0> ;
  assign LOCKSTEP_Out[2805] = \<const0> ;
  assign LOCKSTEP_Out[2806] = \<const0> ;
  assign LOCKSTEP_Out[2807] = \<const0> ;
  assign LOCKSTEP_Out[2808] = \<const0> ;
  assign LOCKSTEP_Out[2809] = \<const0> ;
  assign LOCKSTEP_Out[2810] = \<const0> ;
  assign LOCKSTEP_Out[2811] = \<const0> ;
  assign LOCKSTEP_Out[2812] = \<const0> ;
  assign LOCKSTEP_Out[2813] = \<const0> ;
  assign LOCKSTEP_Out[2814] = \<const0> ;
  assign LOCKSTEP_Out[2815] = \<const0> ;
  assign LOCKSTEP_Out[2816] = \<const0> ;
  assign LOCKSTEP_Out[2817] = \<const0> ;
  assign LOCKSTEP_Out[2818] = \<const0> ;
  assign LOCKSTEP_Out[2819] = \<const0> ;
  assign LOCKSTEP_Out[2820] = \<const0> ;
  assign LOCKSTEP_Out[2821] = \<const0> ;
  assign LOCKSTEP_Out[2822] = \<const0> ;
  assign LOCKSTEP_Out[2823] = \<const0> ;
  assign LOCKSTEP_Out[2824] = \<const0> ;
  assign LOCKSTEP_Out[2825] = \<const0> ;
  assign LOCKSTEP_Out[2826] = \<const0> ;
  assign LOCKSTEP_Out[2827] = \<const0> ;
  assign LOCKSTEP_Out[2828] = \<const0> ;
  assign LOCKSTEP_Out[2829] = \<const0> ;
  assign LOCKSTEP_Out[2830] = \<const0> ;
  assign LOCKSTEP_Out[2831] = \<const0> ;
  assign LOCKSTEP_Out[2832] = \<const0> ;
  assign LOCKSTEP_Out[2833] = \<const0> ;
  assign LOCKSTEP_Out[2834] = \<const0> ;
  assign LOCKSTEP_Out[2835] = \<const0> ;
  assign LOCKSTEP_Out[2836] = \<const0> ;
  assign LOCKSTEP_Out[2837] = \<const0> ;
  assign LOCKSTEP_Out[2838] = \<const0> ;
  assign LOCKSTEP_Out[2839] = \<const0> ;
  assign LOCKSTEP_Out[2840] = \<const0> ;
  assign LOCKSTEP_Out[2841] = \<const0> ;
  assign LOCKSTEP_Out[2842] = \<const0> ;
  assign LOCKSTEP_Out[2843] = \<const0> ;
  assign LOCKSTEP_Out[2844] = \<const0> ;
  assign LOCKSTEP_Out[2845] = \<const0> ;
  assign LOCKSTEP_Out[2846] = \<const0> ;
  assign LOCKSTEP_Out[2847] = \<const0> ;
  assign LOCKSTEP_Out[2848] = \<const0> ;
  assign LOCKSTEP_Out[2849] = \<const0> ;
  assign LOCKSTEP_Out[2850] = \<const0> ;
  assign LOCKSTEP_Out[2851] = \<const0> ;
  assign LOCKSTEP_Out[2852] = \<const0> ;
  assign LOCKSTEP_Out[2853] = \<const0> ;
  assign LOCKSTEP_Out[2854] = \<const0> ;
  assign LOCKSTEP_Out[2855] = \<const0> ;
  assign LOCKSTEP_Out[2856] = \<const0> ;
  assign LOCKSTEP_Out[2857] = \<const0> ;
  assign LOCKSTEP_Out[2858] = \<const0> ;
  assign LOCKSTEP_Out[2859] = \<const0> ;
  assign LOCKSTEP_Out[2860] = \<const0> ;
  assign LOCKSTEP_Out[2861] = \<const0> ;
  assign LOCKSTEP_Out[2862] = \<const0> ;
  assign LOCKSTEP_Out[2863] = \<const0> ;
  assign LOCKSTEP_Out[2864] = \<const0> ;
  assign LOCKSTEP_Out[2865] = \<const0> ;
  assign LOCKSTEP_Out[2866] = \<const0> ;
  assign LOCKSTEP_Out[2867] = \<const0> ;
  assign LOCKSTEP_Out[2868] = \<const0> ;
  assign LOCKSTEP_Out[2869] = \<const0> ;
  assign LOCKSTEP_Out[2870] = \<const0> ;
  assign LOCKSTEP_Out[2871] = \<const0> ;
  assign LOCKSTEP_Out[2872] = \<const0> ;
  assign LOCKSTEP_Out[2873] = \<const0> ;
  assign LOCKSTEP_Out[2874] = \<const0> ;
  assign LOCKSTEP_Out[2875] = \<const0> ;
  assign LOCKSTEP_Out[2876] = \<const0> ;
  assign LOCKSTEP_Out[2877] = \<const0> ;
  assign LOCKSTEP_Out[2878] = \<const0> ;
  assign LOCKSTEP_Out[2879] = \<const0> ;
  assign LOCKSTEP_Out[2880] = \<const0> ;
  assign LOCKSTEP_Out[2881:2913] = \^LOCKSTEP_Out [2881:2913];
  assign LOCKSTEP_Out[2914] = \<const0> ;
  assign LOCKSTEP_Out[2915] = \<const0> ;
  assign LOCKSTEP_Out[2916] = \<const0> ;
  assign LOCKSTEP_Out[2917] = \<const0> ;
  assign LOCKSTEP_Out[2918] = \<const0> ;
  assign LOCKSTEP_Out[2919] = \<const0> ;
  assign LOCKSTEP_Out[2920] = \<const0> ;
  assign LOCKSTEP_Out[2921] = \<const0> ;
  assign LOCKSTEP_Out[2922] = \<const0> ;
  assign LOCKSTEP_Out[2923] = \<const0> ;
  assign LOCKSTEP_Out[2924] = \<const0> ;
  assign LOCKSTEP_Out[2925] = \<const0> ;
  assign LOCKSTEP_Out[2926] = \<const0> ;
  assign LOCKSTEP_Out[2927] = \<const0> ;
  assign LOCKSTEP_Out[2928] = \<const0> ;
  assign LOCKSTEP_Out[2929] = \<const0> ;
  assign LOCKSTEP_Out[2930:2943] = \^LOCKSTEP_Out [2930:2943];
  assign LOCKSTEP_Out[2944] = \<const0> ;
  assign LOCKSTEP_Out[2945] = \<const0> ;
  assign LOCKSTEP_Out[2946] = \<const0> ;
  assign LOCKSTEP_Out[2947] = \<const0> ;
  assign LOCKSTEP_Out[2948] = \<const0> ;
  assign LOCKSTEP_Out[2949] = \<const0> ;
  assign LOCKSTEP_Out[2950] = \<const0> ;
  assign LOCKSTEP_Out[2951] = \<const0> ;
  assign LOCKSTEP_Out[2952] = \<const0> ;
  assign LOCKSTEP_Out[2953] = \<const0> ;
  assign LOCKSTEP_Out[2954] = \<const0> ;
  assign LOCKSTEP_Out[2955] = \<const0> ;
  assign LOCKSTEP_Out[2956] = \<const0> ;
  assign LOCKSTEP_Out[2957] = \<const0> ;
  assign LOCKSTEP_Out[2958] = \<const0> ;
  assign LOCKSTEP_Out[2959] = \<const0> ;
  assign LOCKSTEP_Out[2960] = \<const0> ;
  assign LOCKSTEP_Out[2961] = \<const0> ;
  assign LOCKSTEP_Out[2962] = \<const0> ;
  assign LOCKSTEP_Out[2963] = \<const0> ;
  assign LOCKSTEP_Out[2964] = \<const0> ;
  assign LOCKSTEP_Out[2965] = \<const0> ;
  assign LOCKSTEP_Out[2966] = \<const0> ;
  assign LOCKSTEP_Out[2967] = \<const0> ;
  assign LOCKSTEP_Out[2968] = \<const0> ;
  assign LOCKSTEP_Out[2969] = \<const0> ;
  assign LOCKSTEP_Out[2970] = \<const0> ;
  assign LOCKSTEP_Out[2971] = \<const0> ;
  assign LOCKSTEP_Out[2972] = \<const0> ;
  assign LOCKSTEP_Out[2973] = \<const0> ;
  assign LOCKSTEP_Out[2974] = \<const0> ;
  assign LOCKSTEP_Out[2975] = \<const0> ;
  assign LOCKSTEP_Out[2976] = \<const0> ;
  assign LOCKSTEP_Out[2977] = \<const0> ;
  assign LOCKSTEP_Out[2978:2983] = \^LOCKSTEP_Out [2978:2983];
  assign LOCKSTEP_Out[2984] = \<const0> ;
  assign LOCKSTEP_Out[2985] = \<const0> ;
  assign LOCKSTEP_Out[2986] = \<const0> ;
  assign LOCKSTEP_Out[2987] = \<const0> ;
  assign LOCKSTEP_Out[2988] = \<const0> ;
  assign LOCKSTEP_Out[2989] = \<const0> ;
  assign LOCKSTEP_Out[2990] = \<const0> ;
  assign LOCKSTEP_Out[2991] = \<const0> ;
  assign LOCKSTEP_Out[2992] = \<const0> ;
  assign LOCKSTEP_Out[2993] = \<const0> ;
  assign LOCKSTEP_Out[2994] = \<const0> ;
  assign LOCKSTEP_Out[2995:2997] = \^LOCKSTEP_Out [2995:2997];
  assign LOCKSTEP_Out[2998] = \<const0> ;
  assign LOCKSTEP_Out[2999] = \<const0> ;
  assign LOCKSTEP_Out[3000] = \<const0> ;
  assign LOCKSTEP_Out[3001] = \<const0> ;
  assign LOCKSTEP_Out[3002] = \<const0> ;
  assign LOCKSTEP_Out[3003] = \<const0> ;
  assign LOCKSTEP_Out[3004] = \<const0> ;
  assign LOCKSTEP_Out[3005] = \<const0> ;
  assign LOCKSTEP_Out[3006] = \<const0> ;
  assign LOCKSTEP_Out[3007:3038] = \^LOCKSTEP_Out [3007:3038];
  assign LOCKSTEP_Out[3039] = \<const0> ;
  assign LOCKSTEP_Out[3040] = \<const0> ;
  assign LOCKSTEP_Out[3041] = \<const0> ;
  assign LOCKSTEP_Out[3042] = \<const0> ;
  assign LOCKSTEP_Out[3043] = \<const0> ;
  assign LOCKSTEP_Out[3044] = \<const0> ;
  assign LOCKSTEP_Out[3045] = \<const0> ;
  assign LOCKSTEP_Out[3046] = \<const0> ;
  assign LOCKSTEP_Out[3047] = \<const0> ;
  assign LOCKSTEP_Out[3048] = \<const0> ;
  assign LOCKSTEP_Out[3049] = \<const0> ;
  assign LOCKSTEP_Out[3050] = \<const0> ;
  assign LOCKSTEP_Out[3051] = \<const0> ;
  assign LOCKSTEP_Out[3052] = \<const0> ;
  assign LOCKSTEP_Out[3053] = \<const0> ;
  assign LOCKSTEP_Out[3054] = \<const0> ;
  assign LOCKSTEP_Out[3055] = \<const0> ;
  assign LOCKSTEP_Out[3056] = \<const0> ;
  assign LOCKSTEP_Out[3057] = \<const0> ;
  assign LOCKSTEP_Out[3058] = \<const0> ;
  assign LOCKSTEP_Out[3059] = \<const0> ;
  assign LOCKSTEP_Out[3060] = \<const0> ;
  assign LOCKSTEP_Out[3061] = \<const0> ;
  assign LOCKSTEP_Out[3062] = \<const0> ;
  assign LOCKSTEP_Out[3063] = \<const0> ;
  assign LOCKSTEP_Out[3064] = \<const0> ;
  assign LOCKSTEP_Out[3065] = \<const0> ;
  assign LOCKSTEP_Out[3066] = \<const0> ;
  assign LOCKSTEP_Out[3067] = \<const0> ;
  assign LOCKSTEP_Out[3068] = \<const0> ;
  assign LOCKSTEP_Out[3069] = \<const0> ;
  assign LOCKSTEP_Out[3070] = \<const0> ;
  assign LOCKSTEP_Out[3071] = \^LOCKSTEP_Out [3073];
  assign LOCKSTEP_Out[3072] = \<const0> ;
  assign LOCKSTEP_Out[3073] = \^LOCKSTEP_Out [3073];
  assign LOCKSTEP_Out[3074] = \<const0> ;
  assign LOCKSTEP_Out[3075] = \^LOCKSTEP_Out [3073];
  assign LOCKSTEP_Out[3076] = \<const0> ;
  assign LOCKSTEP_Out[3077:3110] = \^LOCKSTEP_Out [3077:3110];
  assign LOCKSTEP_Out[3111] = \<const0> ;
  assign LOCKSTEP_Out[3112] = \<const0> ;
  assign LOCKSTEP_Out[3113] = \<const0> ;
  assign LOCKSTEP_Out[3114] = \<const0> ;
  assign LOCKSTEP_Out[3115] = \<const0> ;
  assign LOCKSTEP_Out[3116] = \<const0> ;
  assign LOCKSTEP_Out[3117] = \<const0> ;
  assign LOCKSTEP_Out[3118] = \<const0> ;
  assign LOCKSTEP_Out[3119] = \<const0> ;
  assign LOCKSTEP_Out[3120] = \<const0> ;
  assign LOCKSTEP_Out[3121] = \<const0> ;
  assign LOCKSTEP_Out[3122] = \<const0> ;
  assign LOCKSTEP_Out[3123] = \<const0> ;
  assign LOCKSTEP_Out[3124] = \<const0> ;
  assign LOCKSTEP_Out[3125] = \<const0> ;
  assign LOCKSTEP_Out[3126] = \<const0> ;
  assign LOCKSTEP_Out[3127] = \<const0> ;
  assign LOCKSTEP_Out[3128] = \<const0> ;
  assign LOCKSTEP_Out[3129] = \<const0> ;
  assign LOCKSTEP_Out[3130] = \<const0> ;
  assign LOCKSTEP_Out[3131] = \<const0> ;
  assign LOCKSTEP_Out[3132] = \<const0> ;
  assign LOCKSTEP_Out[3133] = \<const0> ;
  assign LOCKSTEP_Out[3134] = \<const0> ;
  assign LOCKSTEP_Out[3135] = \<const0> ;
  assign LOCKSTEP_Out[3136] = \<const0> ;
  assign LOCKSTEP_Out[3137] = \<const0> ;
  assign LOCKSTEP_Out[3138] = \<const0> ;
  assign LOCKSTEP_Out[3139] = \<const0> ;
  assign LOCKSTEP_Out[3140] = \<const0> ;
  assign LOCKSTEP_Out[3141] = \<const0> ;
  assign LOCKSTEP_Out[3142] = \<const0> ;
  assign LOCKSTEP_Out[3143:3174] = \^LOCKSTEP_Out [3143:3174];
  assign LOCKSTEP_Out[3175] = \<const0> ;
  assign LOCKSTEP_Out[3176] = \<const0> ;
  assign LOCKSTEP_Out[3177] = \<const0> ;
  assign LOCKSTEP_Out[3178] = \<const0> ;
  assign LOCKSTEP_Out[3179] = \<const0> ;
  assign LOCKSTEP_Out[3180] = \<const0> ;
  assign LOCKSTEP_Out[3181] = \<const0> ;
  assign LOCKSTEP_Out[3182] = \<const0> ;
  assign LOCKSTEP_Out[3183] = \<const0> ;
  assign LOCKSTEP_Out[3184] = \<const0> ;
  assign LOCKSTEP_Out[3185] = \<const0> ;
  assign LOCKSTEP_Out[3186] = \<const0> ;
  assign LOCKSTEP_Out[3187] = \<const0> ;
  assign LOCKSTEP_Out[3188] = \<const0> ;
  assign LOCKSTEP_Out[3189] = \<const0> ;
  assign LOCKSTEP_Out[3190] = \<const0> ;
  assign LOCKSTEP_Out[3191] = \<const0> ;
  assign LOCKSTEP_Out[3192] = \<const0> ;
  assign LOCKSTEP_Out[3193] = \<const0> ;
  assign LOCKSTEP_Out[3194] = \<const0> ;
  assign LOCKSTEP_Out[3195] = \<const0> ;
  assign LOCKSTEP_Out[3196] = \<const0> ;
  assign LOCKSTEP_Out[3197] = \<const0> ;
  assign LOCKSTEP_Out[3198] = \<const0> ;
  assign LOCKSTEP_Out[3199] = \<const0> ;
  assign LOCKSTEP_Out[3200] = \<const0> ;
  assign LOCKSTEP_Out[3201] = \<const0> ;
  assign LOCKSTEP_Out[3202] = \<const0> ;
  assign LOCKSTEP_Out[3203] = \<const0> ;
  assign LOCKSTEP_Out[3204] = \<const0> ;
  assign LOCKSTEP_Out[3205] = \<const0> ;
  assign LOCKSTEP_Out[3206] = \<const0> ;
  assign LOCKSTEP_Out[3207:3210] = \^LOCKSTEP_Out [3207:3210];
  assign LOCKSTEP_Out[3211] = \<const0> ;
  assign LOCKSTEP_Out[3212] = \<const0> ;
  assign LOCKSTEP_Out[3213] = \<const0> ;
  assign LOCKSTEP_Out[3214] = \<const0> ;
  assign LOCKSTEP_Out[3215:3217] = \^LOCKSTEP_Out [3215:3217];
  assign LOCKSTEP_Out[3218] = \<const0> ;
  assign LOCKSTEP_Out[3219] = \<const0> ;
  assign LOCKSTEP_Out[3220] = \<const0> ;
  assign LOCKSTEP_Out[3221] = \<const0> ;
  assign LOCKSTEP_Out[3222] = \<const0> ;
  assign LOCKSTEP_Out[3223] = \<const0> ;
  assign LOCKSTEP_Out[3224] = \<const0> ;
  assign LOCKSTEP_Out[3225] = \^LOCKSTEP_Out [3225];
  assign LOCKSTEP_Out[3226] = \^LOCKSTEP_Out [542];
  assign LOCKSTEP_Out[3227] = \^LOCKSTEP_Out [542];
  assign LOCKSTEP_Out[3228] = \^LOCKSTEP_Out [3228];
  assign LOCKSTEP_Out[3229] = \<const0> ;
  assign LOCKSTEP_Out[3230] = \<const0> ;
  assign LOCKSTEP_Out[3231] = \<const0> ;
  assign LOCKSTEP_Out[3232] = \<const0> ;
  assign LOCKSTEP_Out[3233] = \<const0> ;
  assign LOCKSTEP_Out[3234] = \<const0> ;
  assign LOCKSTEP_Out[3235] = \<const0> ;
  assign LOCKSTEP_Out[3236] = \<const0> ;
  assign LOCKSTEP_Out[3237] = \<const0> ;
  assign LOCKSTEP_Out[3238] = \<const0> ;
  assign LOCKSTEP_Out[3239] = \<const0> ;
  assign LOCKSTEP_Out[3240] = \<const0> ;
  assign LOCKSTEP_Out[3241] = \<const0> ;
  assign LOCKSTEP_Out[3242] = \<const0> ;
  assign LOCKSTEP_Out[3243] = \<const0> ;
  assign LOCKSTEP_Out[3244] = \<const0> ;
  assign LOCKSTEP_Out[3245] = \<const0> ;
  assign LOCKSTEP_Out[3246] = \<const0> ;
  assign LOCKSTEP_Out[3247] = \<const0> ;
  assign LOCKSTEP_Out[3248] = \<const0> ;
  assign LOCKSTEP_Out[3249] = \<const0> ;
  assign LOCKSTEP_Out[3250] = \<const0> ;
  assign LOCKSTEP_Out[3251] = \<const0> ;
  assign LOCKSTEP_Out[3252] = \<const0> ;
  assign LOCKSTEP_Out[3253] = \<const0> ;
  assign LOCKSTEP_Out[3254] = \<const0> ;
  assign LOCKSTEP_Out[3255] = \<const0> ;
  assign LOCKSTEP_Out[3256] = \<const0> ;
  assign LOCKSTEP_Out[3257] = \<const0> ;
  assign LOCKSTEP_Out[3258] = \<const0> ;
  assign LOCKSTEP_Out[3259] = \<const0> ;
  assign LOCKSTEP_Out[3260] = \<const0> ;
  assign LOCKSTEP_Out[3261] = \<const0> ;
  assign LOCKSTEP_Out[3262] = \<const0> ;
  assign LOCKSTEP_Out[3263] = \<const0> ;
  assign LOCKSTEP_Out[3264] = \<const0> ;
  assign LOCKSTEP_Out[3265] = \<const0> ;
  assign LOCKSTEP_Out[3266] = \<const0> ;
  assign LOCKSTEP_Out[3267] = \<const0> ;
  assign LOCKSTEP_Out[3268] = \<const0> ;
  assign LOCKSTEP_Out[3269] = \<const0> ;
  assign LOCKSTEP_Out[3270] = \<const0> ;
  assign LOCKSTEP_Out[3271] = \<const0> ;
  assign LOCKSTEP_Out[3272] = \<const0> ;
  assign LOCKSTEP_Out[3273] = \<const0> ;
  assign LOCKSTEP_Out[3274] = \<const0> ;
  assign LOCKSTEP_Out[3275] = \<const0> ;
  assign LOCKSTEP_Out[3276] = \<const0> ;
  assign LOCKSTEP_Out[3277] = \<const0> ;
  assign LOCKSTEP_Out[3278] = \<const0> ;
  assign LOCKSTEP_Out[3279] = \<const0> ;
  assign LOCKSTEP_Out[3280] = \<const0> ;
  assign LOCKSTEP_Out[3281] = \<const0> ;
  assign LOCKSTEP_Out[3282] = \<const0> ;
  assign LOCKSTEP_Out[3283] = \<const0> ;
  assign LOCKSTEP_Out[3284] = \<const0> ;
  assign LOCKSTEP_Out[3285] = \<const0> ;
  assign LOCKSTEP_Out[3286] = \<const0> ;
  assign LOCKSTEP_Out[3287] = \<const0> ;
  assign LOCKSTEP_Out[3288] = \<const0> ;
  assign LOCKSTEP_Out[3289] = \<const0> ;
  assign LOCKSTEP_Out[3290] = \<const0> ;
  assign LOCKSTEP_Out[3291] = \<const0> ;
  assign LOCKSTEP_Out[3292] = \<const0> ;
  assign LOCKSTEP_Out[3293] = \<const0> ;
  assign LOCKSTEP_Out[3294] = \<const0> ;
  assign LOCKSTEP_Out[3295] = \<const0> ;
  assign LOCKSTEP_Out[3296] = \<const0> ;
  assign LOCKSTEP_Out[3297] = \<const0> ;
  assign LOCKSTEP_Out[3298] = \<const0> ;
  assign LOCKSTEP_Out[3299] = \<const0> ;
  assign LOCKSTEP_Out[3300] = \<const0> ;
  assign LOCKSTEP_Out[3301] = \<const0> ;
  assign LOCKSTEP_Out[3302] = \<const0> ;
  assign LOCKSTEP_Out[3303] = \<const0> ;
  assign LOCKSTEP_Out[3304] = \<const0> ;
  assign LOCKSTEP_Out[3305] = \<const0> ;
  assign LOCKSTEP_Out[3306] = \<const0> ;
  assign LOCKSTEP_Out[3307] = \<const0> ;
  assign LOCKSTEP_Out[3308] = \<const0> ;
  assign LOCKSTEP_Out[3309] = \<const0> ;
  assign LOCKSTEP_Out[3310] = \<const0> ;
  assign LOCKSTEP_Out[3311] = \<const0> ;
  assign LOCKSTEP_Out[3312] = \<const0> ;
  assign LOCKSTEP_Out[3313] = \<const0> ;
  assign LOCKSTEP_Out[3314] = \<const0> ;
  assign LOCKSTEP_Out[3315] = \<const0> ;
  assign LOCKSTEP_Out[3316] = \<const0> ;
  assign LOCKSTEP_Out[3317] = \<const0> ;
  assign LOCKSTEP_Out[3318] = \<const0> ;
  assign LOCKSTEP_Out[3319] = \<const0> ;
  assign LOCKSTEP_Out[3320] = \<const0> ;
  assign LOCKSTEP_Out[3321] = \<const0> ;
  assign LOCKSTEP_Out[3322] = \<const0> ;
  assign LOCKSTEP_Out[3323] = \<const0> ;
  assign LOCKSTEP_Out[3324] = \<const0> ;
  assign LOCKSTEP_Out[3325] = \<const0> ;
  assign LOCKSTEP_Out[3326] = \<const0> ;
  assign LOCKSTEP_Out[3327] = \<const0> ;
  assign LOCKSTEP_Out[3328] = \<const0> ;
  assign LOCKSTEP_Out[3329] = \<const0> ;
  assign LOCKSTEP_Out[3330] = \<const0> ;
  assign LOCKSTEP_Out[3331] = \<const0> ;
  assign LOCKSTEP_Out[3332] = \<const0> ;
  assign LOCKSTEP_Out[3333] = \<const0> ;
  assign LOCKSTEP_Out[3334] = \<const0> ;
  assign LOCKSTEP_Out[3335] = \<const0> ;
  assign LOCKSTEP_Out[3336] = \<const0> ;
  assign LOCKSTEP_Out[3337] = \<const0> ;
  assign LOCKSTEP_Out[3338] = \<const0> ;
  assign LOCKSTEP_Out[3339] = \<const0> ;
  assign LOCKSTEP_Out[3340] = \<const0> ;
  assign LOCKSTEP_Out[3341] = \<const0> ;
  assign LOCKSTEP_Out[3342] = \<const0> ;
  assign LOCKSTEP_Out[3343] = \<const0> ;
  assign LOCKSTEP_Out[3344] = \<const0> ;
  assign LOCKSTEP_Out[3345] = \<const0> ;
  assign LOCKSTEP_Out[3346] = \<const0> ;
  assign LOCKSTEP_Out[3347] = \<const0> ;
  assign LOCKSTEP_Out[3348] = \<const0> ;
  assign LOCKSTEP_Out[3349] = \<const0> ;
  assign LOCKSTEP_Out[3350] = \<const0> ;
  assign LOCKSTEP_Out[3351] = \<const0> ;
  assign LOCKSTEP_Out[3352] = \<const0> ;
  assign LOCKSTEP_Out[3353] = \<const0> ;
  assign LOCKSTEP_Out[3354] = \<const0> ;
  assign LOCKSTEP_Out[3355] = \<const0> ;
  assign LOCKSTEP_Out[3356] = \<const0> ;
  assign LOCKSTEP_Out[3357] = \<const0> ;
  assign LOCKSTEP_Out[3358] = \<const0> ;
  assign LOCKSTEP_Out[3359] = \<const0> ;
  assign LOCKSTEP_Out[3360] = \<const0> ;
  assign LOCKSTEP_Out[3361] = \<const0> ;
  assign LOCKSTEP_Out[3362] = \<const0> ;
  assign LOCKSTEP_Out[3363] = \<const0> ;
  assign LOCKSTEP_Out[3364] = \<const0> ;
  assign LOCKSTEP_Out[3365] = \<const0> ;
  assign LOCKSTEP_Out[3366] = \<const0> ;
  assign LOCKSTEP_Out[3367] = \<const0> ;
  assign LOCKSTEP_Out[3368] = \<const0> ;
  assign LOCKSTEP_Out[3369] = \<const0> ;
  assign LOCKSTEP_Out[3370] = \<const0> ;
  assign LOCKSTEP_Out[3371] = \<const0> ;
  assign LOCKSTEP_Out[3372] = \<const0> ;
  assign LOCKSTEP_Out[3373] = \<const0> ;
  assign LOCKSTEP_Out[3374] = \<const0> ;
  assign LOCKSTEP_Out[3375] = \<const0> ;
  assign LOCKSTEP_Out[3376] = \<const0> ;
  assign LOCKSTEP_Out[3377] = \<const0> ;
  assign LOCKSTEP_Out[3378] = \<const0> ;
  assign LOCKSTEP_Out[3379] = \<const0> ;
  assign LOCKSTEP_Out[3380] = \<const0> ;
  assign LOCKSTEP_Out[3381] = \<const0> ;
  assign LOCKSTEP_Out[3382] = \<const0> ;
  assign LOCKSTEP_Out[3383] = \<const0> ;
  assign LOCKSTEP_Out[3384] = \<const0> ;
  assign LOCKSTEP_Out[3385] = \<const0> ;
  assign LOCKSTEP_Out[3386] = \<const0> ;
  assign LOCKSTEP_Out[3387] = \<const0> ;
  assign LOCKSTEP_Out[3388] = \<const0> ;
  assign LOCKSTEP_Out[3389] = \<const0> ;
  assign LOCKSTEP_Out[3390] = \<const0> ;
  assign LOCKSTEP_Out[3391] = \<const0> ;
  assign LOCKSTEP_Out[3392] = \<const0> ;
  assign LOCKSTEP_Out[3393] = \<const0> ;
  assign LOCKSTEP_Out[3394] = \<const0> ;
  assign LOCKSTEP_Out[3395] = \<const0> ;
  assign LOCKSTEP_Out[3396] = \<const0> ;
  assign LOCKSTEP_Out[3397] = \<const0> ;
  assign LOCKSTEP_Out[3398] = \<const0> ;
  assign LOCKSTEP_Out[3399] = \<const0> ;
  assign LOCKSTEP_Out[3400] = \<const0> ;
  assign LOCKSTEP_Out[3401] = \<const0> ;
  assign LOCKSTEP_Out[3402] = \<const0> ;
  assign LOCKSTEP_Out[3403] = \<const0> ;
  assign LOCKSTEP_Out[3404] = \<const0> ;
  assign LOCKSTEP_Out[3405] = \<const0> ;
  assign LOCKSTEP_Out[3406] = \<const0> ;
  assign LOCKSTEP_Out[3407] = \<const0> ;
  assign LOCKSTEP_Out[3408] = \<const0> ;
  assign LOCKSTEP_Out[3409] = \<const0> ;
  assign LOCKSTEP_Out[3410] = \<const0> ;
  assign LOCKSTEP_Out[3411] = \<const0> ;
  assign LOCKSTEP_Out[3412] = \<const0> ;
  assign LOCKSTEP_Out[3413] = \<const0> ;
  assign LOCKSTEP_Out[3414] = \<const0> ;
  assign LOCKSTEP_Out[3415] = \<const0> ;
  assign LOCKSTEP_Out[3416] = \<const0> ;
  assign LOCKSTEP_Out[3417] = \<const0> ;
  assign LOCKSTEP_Out[3418] = \<const0> ;
  assign LOCKSTEP_Out[3419] = \<const0> ;
  assign LOCKSTEP_Out[3420] = \<const0> ;
  assign LOCKSTEP_Out[3421] = \<const0> ;
  assign LOCKSTEP_Out[3422] = \<const0> ;
  assign LOCKSTEP_Out[3423] = \<const0> ;
  assign LOCKSTEP_Out[3424] = \<const0> ;
  assign LOCKSTEP_Out[3425] = \<const0> ;
  assign LOCKSTEP_Out[3426] = \<const0> ;
  assign LOCKSTEP_Out[3427] = \<const0> ;
  assign LOCKSTEP_Out[3428] = \<const0> ;
  assign LOCKSTEP_Out[3429] = \<const0> ;
  assign LOCKSTEP_Out[3430] = \<const0> ;
  assign LOCKSTEP_Out[3431] = \<const0> ;
  assign LOCKSTEP_Out[3432] = \<const0> ;
  assign LOCKSTEP_Out[3433] = \<const0> ;
  assign LOCKSTEP_Out[3434] = \<const0> ;
  assign LOCKSTEP_Out[3435] = \<const0> ;
  assign LOCKSTEP_Out[3436] = \<const0> ;
  assign LOCKSTEP_Out[3437] = \<const0> ;
  assign LOCKSTEP_Out[3438] = \<const0> ;
  assign LOCKSTEP_Out[3439] = \<const0> ;
  assign LOCKSTEP_Out[3440] = \<const0> ;
  assign LOCKSTEP_Out[3441] = \<const0> ;
  assign LOCKSTEP_Out[3442] = \<const0> ;
  assign LOCKSTEP_Out[3443] = \<const0> ;
  assign LOCKSTEP_Out[3444] = \<const0> ;
  assign LOCKSTEP_Out[3445] = \<const0> ;
  assign LOCKSTEP_Out[3446] = \<const0> ;
  assign LOCKSTEP_Out[3447] = \<const0> ;
  assign LOCKSTEP_Out[3448] = \<const0> ;
  assign LOCKSTEP_Out[3449] = \<const0> ;
  assign LOCKSTEP_Out[3450] = \<const0> ;
  assign LOCKSTEP_Out[3451] = \<const0> ;
  assign LOCKSTEP_Out[3452] = \<const0> ;
  assign LOCKSTEP_Out[3453] = \<const0> ;
  assign LOCKSTEP_Out[3454] = \<const0> ;
  assign LOCKSTEP_Out[3455] = \<const0> ;
  assign LOCKSTEP_Out[3456] = \<const0> ;
  assign LOCKSTEP_Out[3457] = \<const0> ;
  assign LOCKSTEP_Out[3458] = \<const0> ;
  assign LOCKSTEP_Out[3459] = \<const0> ;
  assign LOCKSTEP_Out[3460] = \<const0> ;
  assign LOCKSTEP_Out[3461] = \<const0> ;
  assign LOCKSTEP_Out[3462] = \<const0> ;
  assign LOCKSTEP_Out[3463] = \<const0> ;
  assign LOCKSTEP_Out[3464] = \<const0> ;
  assign LOCKSTEP_Out[3465] = \<const0> ;
  assign LOCKSTEP_Out[3466] = \<const0> ;
  assign LOCKSTEP_Out[3467] = \<const0> ;
  assign LOCKSTEP_Out[3468] = \<const0> ;
  assign LOCKSTEP_Out[3469] = \<const0> ;
  assign LOCKSTEP_Out[3470] = \<const0> ;
  assign LOCKSTEP_Out[3471] = \<const0> ;
  assign LOCKSTEP_Out[3472] = \<const0> ;
  assign LOCKSTEP_Out[3473] = \<const0> ;
  assign LOCKSTEP_Out[3474] = \<const0> ;
  assign LOCKSTEP_Out[3475] = \<const0> ;
  assign LOCKSTEP_Out[3476] = \<const0> ;
  assign LOCKSTEP_Out[3477] = \<const0> ;
  assign LOCKSTEP_Out[3478] = \<const0> ;
  assign LOCKSTEP_Out[3479] = \<const0> ;
  assign LOCKSTEP_Out[3480] = \<const0> ;
  assign LOCKSTEP_Out[3481] = \<const0> ;
  assign LOCKSTEP_Out[3482] = \<const0> ;
  assign LOCKSTEP_Out[3483] = \<const0> ;
  assign LOCKSTEP_Out[3484] = \<const0> ;
  assign LOCKSTEP_Out[3485] = \<const0> ;
  assign LOCKSTEP_Out[3486] = \<const0> ;
  assign LOCKSTEP_Out[3487] = \<const0> ;
  assign LOCKSTEP_Out[3488] = \<const0> ;
  assign LOCKSTEP_Out[3489] = \<const0> ;
  assign LOCKSTEP_Out[3490] = \<const0> ;
  assign LOCKSTEP_Out[3491] = \<const0> ;
  assign LOCKSTEP_Out[3492] = \<const0> ;
  assign LOCKSTEP_Out[3493] = \<const0> ;
  assign LOCKSTEP_Out[3494] = \<const0> ;
  assign LOCKSTEP_Out[3495] = \<const0> ;
  assign LOCKSTEP_Out[3496] = \<const0> ;
  assign LOCKSTEP_Out[3497] = \<const0> ;
  assign LOCKSTEP_Out[3498] = \<const0> ;
  assign LOCKSTEP_Out[3499] = \<const0> ;
  assign LOCKSTEP_Out[3500] = \<const0> ;
  assign LOCKSTEP_Out[3501] = \<const0> ;
  assign LOCKSTEP_Out[3502] = \<const0> ;
  assign LOCKSTEP_Out[3503] = \<const0> ;
  assign LOCKSTEP_Out[3504] = \<const0> ;
  assign LOCKSTEP_Out[3505] = \<const0> ;
  assign LOCKSTEP_Out[3506] = \<const0> ;
  assign LOCKSTEP_Out[3507] = \<const0> ;
  assign LOCKSTEP_Out[3508] = \<const0> ;
  assign LOCKSTEP_Out[3509] = \<const0> ;
  assign LOCKSTEP_Out[3510] = \<const0> ;
  assign LOCKSTEP_Out[3511] = \<const0> ;
  assign LOCKSTEP_Out[3512] = \<const0> ;
  assign LOCKSTEP_Out[3513] = \<const0> ;
  assign LOCKSTEP_Out[3514] = \<const0> ;
  assign LOCKSTEP_Out[3515] = \<const0> ;
  assign LOCKSTEP_Out[3516] = \<const0> ;
  assign LOCKSTEP_Out[3517] = \<const0> ;
  assign LOCKSTEP_Out[3518] = \<const0> ;
  assign LOCKSTEP_Out[3519] = \<const0> ;
  assign LOCKSTEP_Out[3520] = \<const0> ;
  assign LOCKSTEP_Out[3521] = \<const0> ;
  assign LOCKSTEP_Out[3522] = \<const0> ;
  assign LOCKSTEP_Out[3523] = \<const0> ;
  assign LOCKSTEP_Out[3524] = \<const0> ;
  assign LOCKSTEP_Out[3525] = \<const0> ;
  assign LOCKSTEP_Out[3526] = \<const0> ;
  assign LOCKSTEP_Out[3527] = \<const0> ;
  assign LOCKSTEP_Out[3528] = \<const0> ;
  assign LOCKSTEP_Out[3529] = \<const0> ;
  assign LOCKSTEP_Out[3530] = \<const0> ;
  assign LOCKSTEP_Out[3531] = \<const0> ;
  assign LOCKSTEP_Out[3532] = \<const0> ;
  assign LOCKSTEP_Out[3533] = \<const0> ;
  assign LOCKSTEP_Out[3534] = \<const0> ;
  assign LOCKSTEP_Out[3535] = \<const0> ;
  assign LOCKSTEP_Out[3536] = \<const0> ;
  assign LOCKSTEP_Out[3537] = \<const0> ;
  assign LOCKSTEP_Out[3538] = \<const0> ;
  assign LOCKSTEP_Out[3539] = \<const0> ;
  assign LOCKSTEP_Out[3540] = \<const0> ;
  assign LOCKSTEP_Out[3541] = \<const0> ;
  assign LOCKSTEP_Out[3542] = \<const0> ;
  assign LOCKSTEP_Out[3543] = \<const0> ;
  assign LOCKSTEP_Out[3544] = \<const0> ;
  assign LOCKSTEP_Out[3545] = \<const0> ;
  assign LOCKSTEP_Out[3546] = \<const0> ;
  assign LOCKSTEP_Out[3547] = \<const0> ;
  assign LOCKSTEP_Out[3548] = \<const0> ;
  assign LOCKSTEP_Out[3549] = \<const0> ;
  assign LOCKSTEP_Out[3550] = \<const0> ;
  assign LOCKSTEP_Out[3551] = \<const0> ;
  assign LOCKSTEP_Out[3552] = \<const0> ;
  assign LOCKSTEP_Out[3553] = \<const0> ;
  assign LOCKSTEP_Out[3554] = \<const0> ;
  assign LOCKSTEP_Out[3555] = \<const0> ;
  assign LOCKSTEP_Out[3556] = \<const0> ;
  assign LOCKSTEP_Out[3557] = \<const0> ;
  assign LOCKSTEP_Out[3558] = \<const0> ;
  assign LOCKSTEP_Out[3559] = \<const0> ;
  assign LOCKSTEP_Out[3560] = \<const0> ;
  assign LOCKSTEP_Out[3561] = \<const0> ;
  assign LOCKSTEP_Out[3562] = \<const0> ;
  assign LOCKSTEP_Out[3563] = \<const0> ;
  assign LOCKSTEP_Out[3564] = \<const0> ;
  assign LOCKSTEP_Out[3565] = \<const0> ;
  assign LOCKSTEP_Out[3566] = \<const0> ;
  assign LOCKSTEP_Out[3567] = \<const0> ;
  assign LOCKSTEP_Out[3568] = \<const0> ;
  assign LOCKSTEP_Out[3569] = \<const0> ;
  assign LOCKSTEP_Out[3570] = \<const0> ;
  assign LOCKSTEP_Out[3571] = \<const0> ;
  assign LOCKSTEP_Out[3572] = \<const0> ;
  assign LOCKSTEP_Out[3573] = \<const0> ;
  assign LOCKSTEP_Out[3574] = \<const0> ;
  assign LOCKSTEP_Out[3575] = \<const0> ;
  assign LOCKSTEP_Out[3576] = \<const0> ;
  assign LOCKSTEP_Out[3577] = \<const0> ;
  assign LOCKSTEP_Out[3578] = \<const0> ;
  assign LOCKSTEP_Out[3579] = \<const0> ;
  assign LOCKSTEP_Out[3580] = \<const0> ;
  assign LOCKSTEP_Out[3581] = \<const0> ;
  assign LOCKSTEP_Out[3582] = \<const0> ;
  assign LOCKSTEP_Out[3583] = \<const0> ;
  assign LOCKSTEP_Out[3584] = \<const0> ;
  assign LOCKSTEP_Out[3585] = \<const0> ;
  assign LOCKSTEP_Out[3586] = \<const0> ;
  assign LOCKSTEP_Out[3587] = \<const0> ;
  assign LOCKSTEP_Out[3588] = \<const0> ;
  assign LOCKSTEP_Out[3589] = \<const0> ;
  assign LOCKSTEP_Out[3590] = \<const0> ;
  assign LOCKSTEP_Out[3591] = \<const0> ;
  assign LOCKSTEP_Out[3592] = \<const0> ;
  assign LOCKSTEP_Out[3593] = \<const0> ;
  assign LOCKSTEP_Out[3594] = \<const0> ;
  assign LOCKSTEP_Out[3595] = \<const0> ;
  assign LOCKSTEP_Out[3596] = \<const0> ;
  assign LOCKSTEP_Out[3597] = \<const0> ;
  assign LOCKSTEP_Out[3598] = \<const0> ;
  assign LOCKSTEP_Out[3599] = \<const0> ;
  assign LOCKSTEP_Out[3600] = \<const0> ;
  assign LOCKSTEP_Out[3601] = \<const0> ;
  assign LOCKSTEP_Out[3602] = \<const0> ;
  assign LOCKSTEP_Out[3603] = \<const0> ;
  assign LOCKSTEP_Out[3604] = \<const0> ;
  assign LOCKSTEP_Out[3605] = \<const0> ;
  assign LOCKSTEP_Out[3606] = \<const0> ;
  assign LOCKSTEP_Out[3607] = \<const0> ;
  assign LOCKSTEP_Out[3608] = \<const0> ;
  assign LOCKSTEP_Out[3609] = \<const0> ;
  assign LOCKSTEP_Out[3610] = \<const0> ;
  assign LOCKSTEP_Out[3611] = \<const0> ;
  assign LOCKSTEP_Out[3612] = \<const0> ;
  assign LOCKSTEP_Out[3613] = \<const0> ;
  assign LOCKSTEP_Out[3614] = \<const0> ;
  assign LOCKSTEP_Out[3615] = \<const0> ;
  assign LOCKSTEP_Out[3616] = \<const0> ;
  assign LOCKSTEP_Out[3617] = \<const0> ;
  assign LOCKSTEP_Out[3618] = \<const0> ;
  assign LOCKSTEP_Out[3619] = \<const0> ;
  assign LOCKSTEP_Out[3620] = \<const0> ;
  assign LOCKSTEP_Out[3621] = \<const0> ;
  assign LOCKSTEP_Out[3622] = \<const0> ;
  assign LOCKSTEP_Out[3623] = \<const0> ;
  assign LOCKSTEP_Out[3624] = \<const0> ;
  assign LOCKSTEP_Out[3625] = \<const0> ;
  assign LOCKSTEP_Out[3626] = \<const0> ;
  assign LOCKSTEP_Out[3627] = \<const0> ;
  assign LOCKSTEP_Out[3628] = \<const0> ;
  assign LOCKSTEP_Out[3629] = \<const0> ;
  assign LOCKSTEP_Out[3630] = \<const0> ;
  assign LOCKSTEP_Out[3631] = \<const0> ;
  assign LOCKSTEP_Out[3632] = \<const0> ;
  assign LOCKSTEP_Out[3633] = \<const0> ;
  assign LOCKSTEP_Out[3634] = \<const0> ;
  assign LOCKSTEP_Out[3635] = \<const0> ;
  assign LOCKSTEP_Out[3636] = \<const0> ;
  assign LOCKSTEP_Out[3637] = \<const0> ;
  assign LOCKSTEP_Out[3638] = \<const0> ;
  assign LOCKSTEP_Out[3639] = \<const0> ;
  assign LOCKSTEP_Out[3640] = \<const0> ;
  assign LOCKSTEP_Out[3641] = \<const0> ;
  assign LOCKSTEP_Out[3642] = \<const0> ;
  assign LOCKSTEP_Out[3643] = \<const0> ;
  assign LOCKSTEP_Out[3644] = \<const0> ;
  assign LOCKSTEP_Out[3645] = \<const0> ;
  assign LOCKSTEP_Out[3646] = \<const0> ;
  assign LOCKSTEP_Out[3647] = \<const0> ;
  assign LOCKSTEP_Out[3648] = \<const0> ;
  assign LOCKSTEP_Out[3649] = \<const0> ;
  assign LOCKSTEP_Out[3650] = \<const0> ;
  assign LOCKSTEP_Out[3651] = \<const0> ;
  assign LOCKSTEP_Out[3652] = \<const0> ;
  assign LOCKSTEP_Out[3653] = \<const0> ;
  assign LOCKSTEP_Out[3654] = \<const0> ;
  assign LOCKSTEP_Out[3655] = \<const0> ;
  assign LOCKSTEP_Out[3656] = \<const0> ;
  assign LOCKSTEP_Out[3657] = \<const0> ;
  assign LOCKSTEP_Out[3658] = \<const0> ;
  assign LOCKSTEP_Out[3659] = \<const0> ;
  assign LOCKSTEP_Out[3660] = \<const0> ;
  assign LOCKSTEP_Out[3661] = \<const0> ;
  assign LOCKSTEP_Out[3662] = \<const0> ;
  assign LOCKSTEP_Out[3663] = \<const0> ;
  assign LOCKSTEP_Out[3664] = \<const0> ;
  assign LOCKSTEP_Out[3665] = \<const0> ;
  assign LOCKSTEP_Out[3666] = \<const0> ;
  assign LOCKSTEP_Out[3667] = \<const0> ;
  assign LOCKSTEP_Out[3668] = \<const0> ;
  assign LOCKSTEP_Out[3669] = \<const0> ;
  assign LOCKSTEP_Out[3670] = \<const0> ;
  assign LOCKSTEP_Out[3671] = \<const0> ;
  assign LOCKSTEP_Out[3672] = \<const0> ;
  assign LOCKSTEP_Out[3673] = \<const0> ;
  assign LOCKSTEP_Out[3674] = \<const0> ;
  assign LOCKSTEP_Out[3675] = \<const0> ;
  assign LOCKSTEP_Out[3676] = \<const0> ;
  assign LOCKSTEP_Out[3677] = \<const0> ;
  assign LOCKSTEP_Out[3678] = \<const0> ;
  assign LOCKSTEP_Out[3679] = \<const0> ;
  assign LOCKSTEP_Out[3680] = \<const0> ;
  assign LOCKSTEP_Out[3681] = \<const0> ;
  assign LOCKSTEP_Out[3682] = \<const0> ;
  assign LOCKSTEP_Out[3683] = \<const0> ;
  assign LOCKSTEP_Out[3684] = \<const0> ;
  assign LOCKSTEP_Out[3685] = \<const0> ;
  assign LOCKSTEP_Out[3686] = \<const0> ;
  assign LOCKSTEP_Out[3687] = \<const0> ;
  assign LOCKSTEP_Out[3688] = \<const0> ;
  assign LOCKSTEP_Out[3689] = \<const0> ;
  assign LOCKSTEP_Out[3690] = \<const0> ;
  assign LOCKSTEP_Out[3691] = \<const0> ;
  assign LOCKSTEP_Out[3692] = \<const0> ;
  assign LOCKSTEP_Out[3693] = \<const0> ;
  assign LOCKSTEP_Out[3694] = \<const0> ;
  assign LOCKSTEP_Out[3695] = \<const0> ;
  assign LOCKSTEP_Out[3696] = \<const0> ;
  assign LOCKSTEP_Out[3697] = \<const0> ;
  assign LOCKSTEP_Out[3698] = \<const0> ;
  assign LOCKSTEP_Out[3699] = \<const0> ;
  assign LOCKSTEP_Out[3700] = \<const0> ;
  assign LOCKSTEP_Out[3701] = \<const0> ;
  assign LOCKSTEP_Out[3702] = \<const0> ;
  assign LOCKSTEP_Out[3703] = \<const0> ;
  assign LOCKSTEP_Out[3704] = \<const0> ;
  assign LOCKSTEP_Out[3705] = \<const0> ;
  assign LOCKSTEP_Out[3706] = \<const0> ;
  assign LOCKSTEP_Out[3707] = \<const0> ;
  assign LOCKSTEP_Out[3708] = \<const0> ;
  assign LOCKSTEP_Out[3709] = \<const0> ;
  assign LOCKSTEP_Out[3710] = \<const0> ;
  assign LOCKSTEP_Out[3711] = \<const0> ;
  assign LOCKSTEP_Out[3712] = \<const0> ;
  assign LOCKSTEP_Out[3713] = \<const0> ;
  assign LOCKSTEP_Out[3714] = \<const0> ;
  assign LOCKSTEP_Out[3715] = \<const0> ;
  assign LOCKSTEP_Out[3716] = \<const0> ;
  assign LOCKSTEP_Out[3717] = \<const0> ;
  assign LOCKSTEP_Out[3718] = \<const0> ;
  assign LOCKSTEP_Out[3719] = \<const0> ;
  assign LOCKSTEP_Out[3720] = \<const0> ;
  assign LOCKSTEP_Out[3721] = \<const0> ;
  assign LOCKSTEP_Out[3722] = \<const0> ;
  assign LOCKSTEP_Out[3723] = \<const0> ;
  assign LOCKSTEP_Out[3724] = \<const0> ;
  assign LOCKSTEP_Out[3725] = \<const0> ;
  assign LOCKSTEP_Out[3726] = \<const0> ;
  assign LOCKSTEP_Out[3727] = \<const0> ;
  assign LOCKSTEP_Out[3728] = \<const0> ;
  assign LOCKSTEP_Out[3729] = \<const0> ;
  assign LOCKSTEP_Out[3730] = \<const0> ;
  assign LOCKSTEP_Out[3731] = \<const0> ;
  assign LOCKSTEP_Out[3732] = \<const0> ;
  assign LOCKSTEP_Out[3733] = \<const0> ;
  assign LOCKSTEP_Out[3734] = \<const0> ;
  assign LOCKSTEP_Out[3735] = \<const0> ;
  assign LOCKSTEP_Out[3736] = \<const0> ;
  assign LOCKSTEP_Out[3737] = \<const0> ;
  assign LOCKSTEP_Out[3738] = \<const0> ;
  assign LOCKSTEP_Out[3739] = \<const0> ;
  assign LOCKSTEP_Out[3740] = \<const0> ;
  assign LOCKSTEP_Out[3741] = \<const0> ;
  assign LOCKSTEP_Out[3742] = \<const0> ;
  assign LOCKSTEP_Out[3743] = \<const0> ;
  assign LOCKSTEP_Out[3744] = \<const0> ;
  assign LOCKSTEP_Out[3745] = \<const0> ;
  assign LOCKSTEP_Out[3746] = \<const0> ;
  assign LOCKSTEP_Out[3747] = \<const0> ;
  assign LOCKSTEP_Out[3748] = \<const0> ;
  assign LOCKSTEP_Out[3749] = \<const0> ;
  assign LOCKSTEP_Out[3750] = \<const0> ;
  assign LOCKSTEP_Out[3751] = \<const0> ;
  assign LOCKSTEP_Out[3752] = \<const0> ;
  assign LOCKSTEP_Out[3753] = \<const0> ;
  assign LOCKSTEP_Out[3754] = \<const0> ;
  assign LOCKSTEP_Out[3755] = \<const0> ;
  assign LOCKSTEP_Out[3756] = \<const0> ;
  assign LOCKSTEP_Out[3757] = \<const0> ;
  assign LOCKSTEP_Out[3758] = \<const0> ;
  assign LOCKSTEP_Out[3759] = \<const0> ;
  assign LOCKSTEP_Out[3760] = \<const0> ;
  assign LOCKSTEP_Out[3761] = \<const0> ;
  assign LOCKSTEP_Out[3762] = \<const0> ;
  assign LOCKSTEP_Out[3763] = \<const0> ;
  assign LOCKSTEP_Out[3764] = \<const0> ;
  assign LOCKSTEP_Out[3765] = \<const0> ;
  assign LOCKSTEP_Out[3766] = \<const0> ;
  assign LOCKSTEP_Out[3767] = \<const0> ;
  assign LOCKSTEP_Out[3768] = \<const0> ;
  assign LOCKSTEP_Out[3769] = \<const0> ;
  assign LOCKSTEP_Out[3770] = \<const0> ;
  assign LOCKSTEP_Out[3771] = \<const0> ;
  assign LOCKSTEP_Out[3772] = \<const0> ;
  assign LOCKSTEP_Out[3773] = \<const0> ;
  assign LOCKSTEP_Out[3774] = \<const0> ;
  assign LOCKSTEP_Out[3775] = \<const0> ;
  assign LOCKSTEP_Out[3776] = \<const0> ;
  assign LOCKSTEP_Out[3777] = \<const0> ;
  assign LOCKSTEP_Out[3778] = \<const0> ;
  assign LOCKSTEP_Out[3779] = \<const0> ;
  assign LOCKSTEP_Out[3780] = \<const0> ;
  assign LOCKSTEP_Out[3781] = \<const0> ;
  assign LOCKSTEP_Out[3782] = \<const0> ;
  assign LOCKSTEP_Out[3783] = \<const0> ;
  assign LOCKSTEP_Out[3784] = \<const0> ;
  assign LOCKSTEP_Out[3785] = \<const0> ;
  assign LOCKSTEP_Out[3786] = \<const0> ;
  assign LOCKSTEP_Out[3787] = \<const0> ;
  assign LOCKSTEP_Out[3788] = \<const0> ;
  assign LOCKSTEP_Out[3789] = \<const0> ;
  assign LOCKSTEP_Out[3790] = \<const0> ;
  assign LOCKSTEP_Out[3791] = \<const0> ;
  assign LOCKSTEP_Out[3792] = \<const0> ;
  assign LOCKSTEP_Out[3793] = \<const0> ;
  assign LOCKSTEP_Out[3794] = \<const0> ;
  assign LOCKSTEP_Out[3795] = \<const0> ;
  assign LOCKSTEP_Out[3796] = \<const0> ;
  assign LOCKSTEP_Out[3797] = \<const0> ;
  assign LOCKSTEP_Out[3798] = \<const0> ;
  assign LOCKSTEP_Out[3799] = \<const0> ;
  assign LOCKSTEP_Out[3800] = \<const0> ;
  assign LOCKSTEP_Out[3801] = \<const0> ;
  assign LOCKSTEP_Out[3802] = \<const0> ;
  assign LOCKSTEP_Out[3803] = \<const0> ;
  assign LOCKSTEP_Out[3804] = \<const0> ;
  assign LOCKSTEP_Out[3805] = \<const0> ;
  assign LOCKSTEP_Out[3806] = \<const0> ;
  assign LOCKSTEP_Out[3807] = \<const0> ;
  assign LOCKSTEP_Out[3808] = \<const0> ;
  assign LOCKSTEP_Out[3809] = \<const0> ;
  assign LOCKSTEP_Out[3810] = \<const0> ;
  assign LOCKSTEP_Out[3811] = \<const0> ;
  assign LOCKSTEP_Out[3812] = \<const0> ;
  assign LOCKSTEP_Out[3813] = \<const0> ;
  assign LOCKSTEP_Out[3814] = \<const0> ;
  assign LOCKSTEP_Out[3815] = \<const0> ;
  assign LOCKSTEP_Out[3816] = \<const0> ;
  assign LOCKSTEP_Out[3817] = \<const0> ;
  assign LOCKSTEP_Out[3818] = \<const0> ;
  assign LOCKSTEP_Out[3819] = \<const0> ;
  assign LOCKSTEP_Out[3820] = \<const0> ;
  assign LOCKSTEP_Out[3821] = \<const0> ;
  assign LOCKSTEP_Out[3822] = \<const0> ;
  assign LOCKSTEP_Out[3823] = \<const0> ;
  assign LOCKSTEP_Out[3824] = \<const0> ;
  assign LOCKSTEP_Out[3825] = \<const0> ;
  assign LOCKSTEP_Out[3826] = \<const0> ;
  assign LOCKSTEP_Out[3827] = \<const0> ;
  assign LOCKSTEP_Out[3828] = \<const0> ;
  assign LOCKSTEP_Out[3829] = \<const0> ;
  assign LOCKSTEP_Out[3830] = \<const0> ;
  assign LOCKSTEP_Out[3831] = \<const0> ;
  assign LOCKSTEP_Out[3832] = \<const0> ;
  assign LOCKSTEP_Out[3833] = \<const0> ;
  assign LOCKSTEP_Out[3834] = \<const0> ;
  assign LOCKSTEP_Out[3835] = \<const0> ;
  assign LOCKSTEP_Out[3836] = \<const0> ;
  assign LOCKSTEP_Out[3837] = \<const0> ;
  assign LOCKSTEP_Out[3838] = \<const0> ;
  assign LOCKSTEP_Out[3839] = \<const0> ;
  assign LOCKSTEP_Out[3840] = \<const0> ;
  assign LOCKSTEP_Out[3841] = \<const0> ;
  assign LOCKSTEP_Out[3842] = \<const0> ;
  assign LOCKSTEP_Out[3843] = \<const0> ;
  assign LOCKSTEP_Out[3844] = \<const0> ;
  assign LOCKSTEP_Out[3845] = \<const0> ;
  assign LOCKSTEP_Out[3846] = \<const0> ;
  assign LOCKSTEP_Out[3847] = \<const0> ;
  assign LOCKSTEP_Out[3848] = \<const0> ;
  assign LOCKSTEP_Out[3849] = \<const0> ;
  assign LOCKSTEP_Out[3850] = \<const0> ;
  assign LOCKSTEP_Out[3851] = \<const0> ;
  assign LOCKSTEP_Out[3852] = \<const0> ;
  assign LOCKSTEP_Out[3853] = \<const0> ;
  assign LOCKSTEP_Out[3854] = \<const0> ;
  assign LOCKSTEP_Out[3855] = \<const0> ;
  assign LOCKSTEP_Out[3856] = \<const0> ;
  assign LOCKSTEP_Out[3857] = \<const0> ;
  assign LOCKSTEP_Out[3858] = \<const0> ;
  assign LOCKSTEP_Out[3859] = \<const0> ;
  assign LOCKSTEP_Out[3860] = \<const0> ;
  assign LOCKSTEP_Out[3861] = \<const0> ;
  assign LOCKSTEP_Out[3862] = \<const0> ;
  assign LOCKSTEP_Out[3863] = \<const0> ;
  assign LOCKSTEP_Out[3864] = \<const0> ;
  assign LOCKSTEP_Out[3865] = \<const0> ;
  assign LOCKSTEP_Out[3866] = \<const0> ;
  assign LOCKSTEP_Out[3867] = \<const0> ;
  assign LOCKSTEP_Out[3868] = \<const0> ;
  assign LOCKSTEP_Out[3869] = \<const0> ;
  assign LOCKSTEP_Out[3870] = \<const0> ;
  assign LOCKSTEP_Out[3871] = \<const0> ;
  assign LOCKSTEP_Out[3872] = \<const0> ;
  assign LOCKSTEP_Out[3873] = \<const0> ;
  assign LOCKSTEP_Out[3874] = \<const0> ;
  assign LOCKSTEP_Out[3875] = \<const0> ;
  assign LOCKSTEP_Out[3876] = \<const0> ;
  assign LOCKSTEP_Out[3877] = \<const0> ;
  assign LOCKSTEP_Out[3878] = \<const0> ;
  assign LOCKSTEP_Out[3879] = \<const0> ;
  assign LOCKSTEP_Out[3880] = \<const0> ;
  assign LOCKSTEP_Out[3881] = \<const0> ;
  assign LOCKSTEP_Out[3882] = \<const0> ;
  assign LOCKSTEP_Out[3883] = \<const0> ;
  assign LOCKSTEP_Out[3884] = \<const0> ;
  assign LOCKSTEP_Out[3885] = \<const0> ;
  assign LOCKSTEP_Out[3886] = \<const0> ;
  assign LOCKSTEP_Out[3887] = \<const0> ;
  assign LOCKSTEP_Out[3888] = \<const0> ;
  assign LOCKSTEP_Out[3889] = \<const0> ;
  assign LOCKSTEP_Out[3890] = \<const0> ;
  assign LOCKSTEP_Out[3891] = \<const0> ;
  assign LOCKSTEP_Out[3892] = \<const0> ;
  assign LOCKSTEP_Out[3893] = \<const0> ;
  assign LOCKSTEP_Out[3894] = \<const0> ;
  assign LOCKSTEP_Out[3895] = \<const0> ;
  assign LOCKSTEP_Out[3896] = \<const0> ;
  assign LOCKSTEP_Out[3897] = \<const0> ;
  assign LOCKSTEP_Out[3898] = \<const0> ;
  assign LOCKSTEP_Out[3899] = \<const0> ;
  assign LOCKSTEP_Out[3900] = \<const0> ;
  assign LOCKSTEP_Out[3901] = \<const0> ;
  assign LOCKSTEP_Out[3902] = \<const0> ;
  assign LOCKSTEP_Out[3903] = \<const0> ;
  assign LOCKSTEP_Out[3904] = \<const0> ;
  assign LOCKSTEP_Out[3905] = \<const0> ;
  assign LOCKSTEP_Out[3906] = \<const0> ;
  assign LOCKSTEP_Out[3907] = \<const0> ;
  assign LOCKSTEP_Out[3908] = \<const0> ;
  assign LOCKSTEP_Out[3909] = \<const0> ;
  assign LOCKSTEP_Out[3910] = \<const0> ;
  assign LOCKSTEP_Out[3911] = \<const0> ;
  assign LOCKSTEP_Out[3912] = \<const0> ;
  assign LOCKSTEP_Out[3913] = \<const0> ;
  assign LOCKSTEP_Out[3914] = \<const0> ;
  assign LOCKSTEP_Out[3915] = \<const0> ;
  assign LOCKSTEP_Out[3916] = \<const0> ;
  assign LOCKSTEP_Out[3917] = \<const0> ;
  assign LOCKSTEP_Out[3918] = \<const0> ;
  assign LOCKSTEP_Out[3919] = \<const0> ;
  assign LOCKSTEP_Out[3920] = \<const0> ;
  assign LOCKSTEP_Out[3921] = \<const0> ;
  assign LOCKSTEP_Out[3922] = \<const0> ;
  assign LOCKSTEP_Out[3923] = \<const0> ;
  assign LOCKSTEP_Out[3924] = \<const0> ;
  assign LOCKSTEP_Out[3925] = \<const0> ;
  assign LOCKSTEP_Out[3926] = \<const0> ;
  assign LOCKSTEP_Out[3927] = \<const0> ;
  assign LOCKSTEP_Out[3928] = \<const0> ;
  assign LOCKSTEP_Out[3929] = \<const0> ;
  assign LOCKSTEP_Out[3930] = \<const0> ;
  assign LOCKSTEP_Out[3931] = \<const0> ;
  assign LOCKSTEP_Out[3932] = \<const0> ;
  assign LOCKSTEP_Out[3933] = \<const0> ;
  assign LOCKSTEP_Out[3934] = \<const0> ;
  assign LOCKSTEP_Out[3935] = \<const0> ;
  assign LOCKSTEP_Out[3936] = \<const0> ;
  assign LOCKSTEP_Out[3937] = \<const0> ;
  assign LOCKSTEP_Out[3938] = \<const0> ;
  assign LOCKSTEP_Out[3939] = \<const0> ;
  assign LOCKSTEP_Out[3940] = \<const0> ;
  assign LOCKSTEP_Out[3941] = \<const0> ;
  assign LOCKSTEP_Out[3942] = \<const0> ;
  assign LOCKSTEP_Out[3943] = \<const0> ;
  assign LOCKSTEP_Out[3944] = \<const0> ;
  assign LOCKSTEP_Out[3945] = \<const0> ;
  assign LOCKSTEP_Out[3946] = \<const0> ;
  assign LOCKSTEP_Out[3947] = \<const0> ;
  assign LOCKSTEP_Out[3948] = \<const0> ;
  assign LOCKSTEP_Out[3949] = \<const0> ;
  assign LOCKSTEP_Out[3950] = \<const0> ;
  assign LOCKSTEP_Out[3951] = \<const0> ;
  assign LOCKSTEP_Out[3952] = \<const0> ;
  assign LOCKSTEP_Out[3953] = \<const0> ;
  assign LOCKSTEP_Out[3954] = \<const0> ;
  assign LOCKSTEP_Out[3955] = \<const0> ;
  assign LOCKSTEP_Out[3956] = \<const0> ;
  assign LOCKSTEP_Out[3957] = \<const0> ;
  assign LOCKSTEP_Out[3958] = \<const0> ;
  assign LOCKSTEP_Out[3959] = \<const0> ;
  assign LOCKSTEP_Out[3960] = \<const0> ;
  assign LOCKSTEP_Out[3961] = \<const0> ;
  assign LOCKSTEP_Out[3962] = \<const0> ;
  assign LOCKSTEP_Out[3963] = \<const0> ;
  assign LOCKSTEP_Out[3964] = \<const0> ;
  assign LOCKSTEP_Out[3965] = \<const0> ;
  assign LOCKSTEP_Out[3966] = \<const0> ;
  assign LOCKSTEP_Out[3967] = \<const0> ;
  assign LOCKSTEP_Out[3968] = \<const0> ;
  assign LOCKSTEP_Out[3969] = \<const0> ;
  assign LOCKSTEP_Out[3970] = \<const0> ;
  assign LOCKSTEP_Out[3971] = \<const0> ;
  assign LOCKSTEP_Out[3972] = \<const0> ;
  assign LOCKSTEP_Out[3973] = \<const0> ;
  assign LOCKSTEP_Out[3974] = \<const0> ;
  assign LOCKSTEP_Out[3975] = \<const0> ;
  assign LOCKSTEP_Out[3976] = \<const0> ;
  assign LOCKSTEP_Out[3977] = \<const0> ;
  assign LOCKSTEP_Out[3978] = \<const0> ;
  assign LOCKSTEP_Out[3979] = \<const0> ;
  assign LOCKSTEP_Out[3980] = \<const0> ;
  assign LOCKSTEP_Out[3981] = \<const0> ;
  assign LOCKSTEP_Out[3982] = \<const0> ;
  assign LOCKSTEP_Out[3983] = \<const0> ;
  assign LOCKSTEP_Out[3984] = \<const0> ;
  assign LOCKSTEP_Out[3985] = \<const0> ;
  assign LOCKSTEP_Out[3986] = \<const0> ;
  assign LOCKSTEP_Out[3987] = \<const0> ;
  assign LOCKSTEP_Out[3988] = \<const0> ;
  assign LOCKSTEP_Out[3989] = \<const0> ;
  assign LOCKSTEP_Out[3990] = \<const0> ;
  assign LOCKSTEP_Out[3991] = \<const0> ;
  assign LOCKSTEP_Out[3992] = \<const0> ;
  assign LOCKSTEP_Out[3993] = \<const0> ;
  assign LOCKSTEP_Out[3994] = \<const0> ;
  assign LOCKSTEP_Out[3995] = \<const0> ;
  assign LOCKSTEP_Out[3996] = \<const0> ;
  assign LOCKSTEP_Out[3997] = \<const0> ;
  assign LOCKSTEP_Out[3998] = \<const0> ;
  assign LOCKSTEP_Out[3999] = \<const0> ;
  assign LOCKSTEP_Out[4000] = \<const0> ;
  assign LOCKSTEP_Out[4001] = \<const0> ;
  assign LOCKSTEP_Out[4002] = \<const0> ;
  assign LOCKSTEP_Out[4003] = \<const0> ;
  assign LOCKSTEP_Out[4004] = \<const0> ;
  assign LOCKSTEP_Out[4005] = \<const0> ;
  assign LOCKSTEP_Out[4006] = \<const0> ;
  assign LOCKSTEP_Out[4007] = \<const0> ;
  assign LOCKSTEP_Out[4008] = \<const0> ;
  assign LOCKSTEP_Out[4009] = \<const0> ;
  assign LOCKSTEP_Out[4010] = \<const0> ;
  assign LOCKSTEP_Out[4011] = \<const0> ;
  assign LOCKSTEP_Out[4012] = \<const0> ;
  assign LOCKSTEP_Out[4013] = \<const0> ;
  assign LOCKSTEP_Out[4014] = \<const0> ;
  assign LOCKSTEP_Out[4015] = \<const0> ;
  assign LOCKSTEP_Out[4016] = \<const0> ;
  assign LOCKSTEP_Out[4017] = \<const0> ;
  assign LOCKSTEP_Out[4018] = \<const0> ;
  assign LOCKSTEP_Out[4019] = \<const0> ;
  assign LOCKSTEP_Out[4020] = \<const0> ;
  assign LOCKSTEP_Out[4021] = \<const0> ;
  assign LOCKSTEP_Out[4022] = \<const0> ;
  assign LOCKSTEP_Out[4023] = \<const0> ;
  assign LOCKSTEP_Out[4024] = \<const0> ;
  assign LOCKSTEP_Out[4025] = \<const0> ;
  assign LOCKSTEP_Out[4026] = \<const0> ;
  assign LOCKSTEP_Out[4027] = \<const0> ;
  assign LOCKSTEP_Out[4028] = \<const0> ;
  assign LOCKSTEP_Out[4029] = \<const0> ;
  assign LOCKSTEP_Out[4030] = \<const0> ;
  assign LOCKSTEP_Out[4031] = \<const0> ;
  assign LOCKSTEP_Out[4032] = \<const0> ;
  assign LOCKSTEP_Out[4033] = \<const0> ;
  assign LOCKSTEP_Out[4034] = \<const0> ;
  assign LOCKSTEP_Out[4035] = \<const0> ;
  assign LOCKSTEP_Out[4036] = \<const0> ;
  assign LOCKSTEP_Out[4037] = \<const0> ;
  assign LOCKSTEP_Out[4038] = \<const0> ;
  assign LOCKSTEP_Out[4039] = \<const0> ;
  assign LOCKSTEP_Out[4040] = \<const0> ;
  assign LOCKSTEP_Out[4041] = \<const0> ;
  assign LOCKSTEP_Out[4042] = \<const0> ;
  assign LOCKSTEP_Out[4043] = \<const0> ;
  assign LOCKSTEP_Out[4044] = \<const0> ;
  assign LOCKSTEP_Out[4045] = \<const0> ;
  assign LOCKSTEP_Out[4046] = \<const0> ;
  assign LOCKSTEP_Out[4047] = \<const0> ;
  assign LOCKSTEP_Out[4048] = \<const0> ;
  assign LOCKSTEP_Out[4049] = \<const0> ;
  assign LOCKSTEP_Out[4050] = \<const0> ;
  assign LOCKSTEP_Out[4051] = \<const0> ;
  assign LOCKSTEP_Out[4052] = \<const0> ;
  assign LOCKSTEP_Out[4053] = \<const0> ;
  assign LOCKSTEP_Out[4054] = \<const0> ;
  assign LOCKSTEP_Out[4055] = \<const0> ;
  assign LOCKSTEP_Out[4056] = \<const0> ;
  assign LOCKSTEP_Out[4057] = \<const0> ;
  assign LOCKSTEP_Out[4058] = \<const0> ;
  assign LOCKSTEP_Out[4059] = \<const0> ;
  assign LOCKSTEP_Out[4060] = \<const0> ;
  assign LOCKSTEP_Out[4061] = \<const0> ;
  assign LOCKSTEP_Out[4062] = \<const0> ;
  assign LOCKSTEP_Out[4063] = \<const0> ;
  assign LOCKSTEP_Out[4064] = \<const0> ;
  assign LOCKSTEP_Out[4065] = \<const0> ;
  assign LOCKSTEP_Out[4066] = \<const0> ;
  assign LOCKSTEP_Out[4067] = \<const0> ;
  assign LOCKSTEP_Out[4068] = \<const0> ;
  assign LOCKSTEP_Out[4069] = \<const0> ;
  assign LOCKSTEP_Out[4070] = \<const0> ;
  assign LOCKSTEP_Out[4071] = \<const0> ;
  assign LOCKSTEP_Out[4072] = \<const0> ;
  assign LOCKSTEP_Out[4073] = \<const0> ;
  assign LOCKSTEP_Out[4074] = \<const0> ;
  assign LOCKSTEP_Out[4075] = \<const0> ;
  assign LOCKSTEP_Out[4076] = \<const0> ;
  assign LOCKSTEP_Out[4077] = \<const0> ;
  assign LOCKSTEP_Out[4078] = \<const0> ;
  assign LOCKSTEP_Out[4079] = \<const0> ;
  assign LOCKSTEP_Out[4080] = \<const0> ;
  assign LOCKSTEP_Out[4081] = \<const0> ;
  assign LOCKSTEP_Out[4082] = \<const0> ;
  assign LOCKSTEP_Out[4083] = \<const0> ;
  assign LOCKSTEP_Out[4084] = \<const0> ;
  assign LOCKSTEP_Out[4085] = \<const0> ;
  assign LOCKSTEP_Out[4086] = \<const0> ;
  assign LOCKSTEP_Out[4087] = \<const0> ;
  assign LOCKSTEP_Out[4088] = \<const0> ;
  assign LOCKSTEP_Out[4089] = \<const0> ;
  assign LOCKSTEP_Out[4090] = \<const0> ;
  assign LOCKSTEP_Out[4091] = \<const0> ;
  assign LOCKSTEP_Out[4092] = \<const0> ;
  assign LOCKSTEP_Out[4093] = \<const0> ;
  assign LOCKSTEP_Out[4094] = \<const0> ;
  assign LOCKSTEP_Out[4095] = \<const0> ;
  assign M0_AXIS_TDATA[31] = \<const0> ;
  assign M0_AXIS_TDATA[30] = \<const0> ;
  assign M0_AXIS_TDATA[29] = \<const0> ;
  assign M0_AXIS_TDATA[28] = \<const0> ;
  assign M0_AXIS_TDATA[27] = \<const0> ;
  assign M0_AXIS_TDATA[26] = \<const0> ;
  assign M0_AXIS_TDATA[25] = \<const0> ;
  assign M0_AXIS_TDATA[24] = \<const0> ;
  assign M0_AXIS_TDATA[23] = \<const0> ;
  assign M0_AXIS_TDATA[22] = \<const0> ;
  assign M0_AXIS_TDATA[21] = \<const0> ;
  assign M0_AXIS_TDATA[20] = \<const0> ;
  assign M0_AXIS_TDATA[19] = \<const0> ;
  assign M0_AXIS_TDATA[18] = \<const0> ;
  assign M0_AXIS_TDATA[17] = \<const0> ;
  assign M0_AXIS_TDATA[16] = \<const0> ;
  assign M0_AXIS_TDATA[15] = \<const0> ;
  assign M0_AXIS_TDATA[14] = \<const0> ;
  assign M0_AXIS_TDATA[13] = \<const0> ;
  assign M0_AXIS_TDATA[12] = \<const0> ;
  assign M0_AXIS_TDATA[11] = \<const0> ;
  assign M0_AXIS_TDATA[10] = \<const0> ;
  assign M0_AXIS_TDATA[9] = \<const0> ;
  assign M0_AXIS_TDATA[8] = \<const0> ;
  assign M0_AXIS_TDATA[7] = \<const0> ;
  assign M0_AXIS_TDATA[6] = \<const0> ;
  assign M0_AXIS_TDATA[5] = \<const0> ;
  assign M0_AXIS_TDATA[4] = \<const0> ;
  assign M0_AXIS_TDATA[3] = \<const0> ;
  assign M0_AXIS_TDATA[2] = \<const0> ;
  assign M0_AXIS_TDATA[1] = \<const0> ;
  assign M0_AXIS_TDATA[0] = \<const0> ;
  assign M0_AXIS_TLAST = \<const0> ;
  assign M0_AXIS_TVALID = \<const0> ;
  assign M10_AXIS_TDATA[31] = \<const0> ;
  assign M10_AXIS_TDATA[30] = \<const0> ;
  assign M10_AXIS_TDATA[29] = \<const0> ;
  assign M10_AXIS_TDATA[28] = \<const0> ;
  assign M10_AXIS_TDATA[27] = \<const0> ;
  assign M10_AXIS_TDATA[26] = \<const0> ;
  assign M10_AXIS_TDATA[25] = \<const0> ;
  assign M10_AXIS_TDATA[24] = \<const0> ;
  assign M10_AXIS_TDATA[23] = \<const0> ;
  assign M10_AXIS_TDATA[22] = \<const0> ;
  assign M10_AXIS_TDATA[21] = \<const0> ;
  assign M10_AXIS_TDATA[20] = \<const0> ;
  assign M10_AXIS_TDATA[19] = \<const0> ;
  assign M10_AXIS_TDATA[18] = \<const0> ;
  assign M10_AXIS_TDATA[17] = \<const0> ;
  assign M10_AXIS_TDATA[16] = \<const0> ;
  assign M10_AXIS_TDATA[15] = \<const0> ;
  assign M10_AXIS_TDATA[14] = \<const0> ;
  assign M10_AXIS_TDATA[13] = \<const0> ;
  assign M10_AXIS_TDATA[12] = \<const0> ;
  assign M10_AXIS_TDATA[11] = \<const0> ;
  assign M10_AXIS_TDATA[10] = \<const0> ;
  assign M10_AXIS_TDATA[9] = \<const0> ;
  assign M10_AXIS_TDATA[8] = \<const0> ;
  assign M10_AXIS_TDATA[7] = \<const0> ;
  assign M10_AXIS_TDATA[6] = \<const0> ;
  assign M10_AXIS_TDATA[5] = \<const0> ;
  assign M10_AXIS_TDATA[4] = \<const0> ;
  assign M10_AXIS_TDATA[3] = \<const0> ;
  assign M10_AXIS_TDATA[2] = \<const0> ;
  assign M10_AXIS_TDATA[1] = \<const0> ;
  assign M10_AXIS_TDATA[0] = \<const0> ;
  assign M10_AXIS_TLAST = \<const0> ;
  assign M10_AXIS_TVALID = \<const0> ;
  assign M11_AXIS_TDATA[31] = \<const0> ;
  assign M11_AXIS_TDATA[30] = \<const0> ;
  assign M11_AXIS_TDATA[29] = \<const0> ;
  assign M11_AXIS_TDATA[28] = \<const0> ;
  assign M11_AXIS_TDATA[27] = \<const0> ;
  assign M11_AXIS_TDATA[26] = \<const0> ;
  assign M11_AXIS_TDATA[25] = \<const0> ;
  assign M11_AXIS_TDATA[24] = \<const0> ;
  assign M11_AXIS_TDATA[23] = \<const0> ;
  assign M11_AXIS_TDATA[22] = \<const0> ;
  assign M11_AXIS_TDATA[21] = \<const0> ;
  assign M11_AXIS_TDATA[20] = \<const0> ;
  assign M11_AXIS_TDATA[19] = \<const0> ;
  assign M11_AXIS_TDATA[18] = \<const0> ;
  assign M11_AXIS_TDATA[17] = \<const0> ;
  assign M11_AXIS_TDATA[16] = \<const0> ;
  assign M11_AXIS_TDATA[15] = \<const0> ;
  assign M11_AXIS_TDATA[14] = \<const0> ;
  assign M11_AXIS_TDATA[13] = \<const0> ;
  assign M11_AXIS_TDATA[12] = \<const0> ;
  assign M11_AXIS_TDATA[11] = \<const0> ;
  assign M11_AXIS_TDATA[10] = \<const0> ;
  assign M11_AXIS_TDATA[9] = \<const0> ;
  assign M11_AXIS_TDATA[8] = \<const0> ;
  assign M11_AXIS_TDATA[7] = \<const0> ;
  assign M11_AXIS_TDATA[6] = \<const0> ;
  assign M11_AXIS_TDATA[5] = \<const0> ;
  assign M11_AXIS_TDATA[4] = \<const0> ;
  assign M11_AXIS_TDATA[3] = \<const0> ;
  assign M11_AXIS_TDATA[2] = \<const0> ;
  assign M11_AXIS_TDATA[1] = \<const0> ;
  assign M11_AXIS_TDATA[0] = \<const0> ;
  assign M11_AXIS_TLAST = \<const0> ;
  assign M11_AXIS_TVALID = \<const0> ;
  assign M12_AXIS_TDATA[31] = \<const0> ;
  assign M12_AXIS_TDATA[30] = \<const0> ;
  assign M12_AXIS_TDATA[29] = \<const0> ;
  assign M12_AXIS_TDATA[28] = \<const0> ;
  assign M12_AXIS_TDATA[27] = \<const0> ;
  assign M12_AXIS_TDATA[26] = \<const0> ;
  assign M12_AXIS_TDATA[25] = \<const0> ;
  assign M12_AXIS_TDATA[24] = \<const0> ;
  assign M12_AXIS_TDATA[23] = \<const0> ;
  assign M12_AXIS_TDATA[22] = \<const0> ;
  assign M12_AXIS_TDATA[21] = \<const0> ;
  assign M12_AXIS_TDATA[20] = \<const0> ;
  assign M12_AXIS_TDATA[19] = \<const0> ;
  assign M12_AXIS_TDATA[18] = \<const0> ;
  assign M12_AXIS_TDATA[17] = \<const0> ;
  assign M12_AXIS_TDATA[16] = \<const0> ;
  assign M12_AXIS_TDATA[15] = \<const0> ;
  assign M12_AXIS_TDATA[14] = \<const0> ;
  assign M12_AXIS_TDATA[13] = \<const0> ;
  assign M12_AXIS_TDATA[12] = \<const0> ;
  assign M12_AXIS_TDATA[11] = \<const0> ;
  assign M12_AXIS_TDATA[10] = \<const0> ;
  assign M12_AXIS_TDATA[9] = \<const0> ;
  assign M12_AXIS_TDATA[8] = \<const0> ;
  assign M12_AXIS_TDATA[7] = \<const0> ;
  assign M12_AXIS_TDATA[6] = \<const0> ;
  assign M12_AXIS_TDATA[5] = \<const0> ;
  assign M12_AXIS_TDATA[4] = \<const0> ;
  assign M12_AXIS_TDATA[3] = \<const0> ;
  assign M12_AXIS_TDATA[2] = \<const0> ;
  assign M12_AXIS_TDATA[1] = \<const0> ;
  assign M12_AXIS_TDATA[0] = \<const0> ;
  assign M12_AXIS_TLAST = \<const0> ;
  assign M12_AXIS_TVALID = \<const0> ;
  assign M13_AXIS_TDATA[31] = \<const0> ;
  assign M13_AXIS_TDATA[30] = \<const0> ;
  assign M13_AXIS_TDATA[29] = \<const0> ;
  assign M13_AXIS_TDATA[28] = \<const0> ;
  assign M13_AXIS_TDATA[27] = \<const0> ;
  assign M13_AXIS_TDATA[26] = \<const0> ;
  assign M13_AXIS_TDATA[25] = \<const0> ;
  assign M13_AXIS_TDATA[24] = \<const0> ;
  assign M13_AXIS_TDATA[23] = \<const0> ;
  assign M13_AXIS_TDATA[22] = \<const0> ;
  assign M13_AXIS_TDATA[21] = \<const0> ;
  assign M13_AXIS_TDATA[20] = \<const0> ;
  assign M13_AXIS_TDATA[19] = \<const0> ;
  assign M13_AXIS_TDATA[18] = \<const0> ;
  assign M13_AXIS_TDATA[17] = \<const0> ;
  assign M13_AXIS_TDATA[16] = \<const0> ;
  assign M13_AXIS_TDATA[15] = \<const0> ;
  assign M13_AXIS_TDATA[14] = \<const0> ;
  assign M13_AXIS_TDATA[13] = \<const0> ;
  assign M13_AXIS_TDATA[12] = \<const0> ;
  assign M13_AXIS_TDATA[11] = \<const0> ;
  assign M13_AXIS_TDATA[10] = \<const0> ;
  assign M13_AXIS_TDATA[9] = \<const0> ;
  assign M13_AXIS_TDATA[8] = \<const0> ;
  assign M13_AXIS_TDATA[7] = \<const0> ;
  assign M13_AXIS_TDATA[6] = \<const0> ;
  assign M13_AXIS_TDATA[5] = \<const0> ;
  assign M13_AXIS_TDATA[4] = \<const0> ;
  assign M13_AXIS_TDATA[3] = \<const0> ;
  assign M13_AXIS_TDATA[2] = \<const0> ;
  assign M13_AXIS_TDATA[1] = \<const0> ;
  assign M13_AXIS_TDATA[0] = \<const0> ;
  assign M13_AXIS_TLAST = \<const0> ;
  assign M13_AXIS_TVALID = \<const0> ;
  assign M14_AXIS_TDATA[31] = \<const0> ;
  assign M14_AXIS_TDATA[30] = \<const0> ;
  assign M14_AXIS_TDATA[29] = \<const0> ;
  assign M14_AXIS_TDATA[28] = \<const0> ;
  assign M14_AXIS_TDATA[27] = \<const0> ;
  assign M14_AXIS_TDATA[26] = \<const0> ;
  assign M14_AXIS_TDATA[25] = \<const0> ;
  assign M14_AXIS_TDATA[24] = \<const0> ;
  assign M14_AXIS_TDATA[23] = \<const0> ;
  assign M14_AXIS_TDATA[22] = \<const0> ;
  assign M14_AXIS_TDATA[21] = \<const0> ;
  assign M14_AXIS_TDATA[20] = \<const0> ;
  assign M14_AXIS_TDATA[19] = \<const0> ;
  assign M14_AXIS_TDATA[18] = \<const0> ;
  assign M14_AXIS_TDATA[17] = \<const0> ;
  assign M14_AXIS_TDATA[16] = \<const0> ;
  assign M14_AXIS_TDATA[15] = \<const0> ;
  assign M14_AXIS_TDATA[14] = \<const0> ;
  assign M14_AXIS_TDATA[13] = \<const0> ;
  assign M14_AXIS_TDATA[12] = \<const0> ;
  assign M14_AXIS_TDATA[11] = \<const0> ;
  assign M14_AXIS_TDATA[10] = \<const0> ;
  assign M14_AXIS_TDATA[9] = \<const0> ;
  assign M14_AXIS_TDATA[8] = \<const0> ;
  assign M14_AXIS_TDATA[7] = \<const0> ;
  assign M14_AXIS_TDATA[6] = \<const0> ;
  assign M14_AXIS_TDATA[5] = \<const0> ;
  assign M14_AXIS_TDATA[4] = \<const0> ;
  assign M14_AXIS_TDATA[3] = \<const0> ;
  assign M14_AXIS_TDATA[2] = \<const0> ;
  assign M14_AXIS_TDATA[1] = \<const0> ;
  assign M14_AXIS_TDATA[0] = \<const0> ;
  assign M14_AXIS_TLAST = \<const0> ;
  assign M14_AXIS_TVALID = \<const0> ;
  assign M15_AXIS_TDATA[31] = \<const0> ;
  assign M15_AXIS_TDATA[30] = \<const0> ;
  assign M15_AXIS_TDATA[29] = \<const0> ;
  assign M15_AXIS_TDATA[28] = \<const0> ;
  assign M15_AXIS_TDATA[27] = \<const0> ;
  assign M15_AXIS_TDATA[26] = \<const0> ;
  assign M15_AXIS_TDATA[25] = \<const0> ;
  assign M15_AXIS_TDATA[24] = \<const0> ;
  assign M15_AXIS_TDATA[23] = \<const0> ;
  assign M15_AXIS_TDATA[22] = \<const0> ;
  assign M15_AXIS_TDATA[21] = \<const0> ;
  assign M15_AXIS_TDATA[20] = \<const0> ;
  assign M15_AXIS_TDATA[19] = \<const0> ;
  assign M15_AXIS_TDATA[18] = \<const0> ;
  assign M15_AXIS_TDATA[17] = \<const0> ;
  assign M15_AXIS_TDATA[16] = \<const0> ;
  assign M15_AXIS_TDATA[15] = \<const0> ;
  assign M15_AXIS_TDATA[14] = \<const0> ;
  assign M15_AXIS_TDATA[13] = \<const0> ;
  assign M15_AXIS_TDATA[12] = \<const0> ;
  assign M15_AXIS_TDATA[11] = \<const0> ;
  assign M15_AXIS_TDATA[10] = \<const0> ;
  assign M15_AXIS_TDATA[9] = \<const0> ;
  assign M15_AXIS_TDATA[8] = \<const0> ;
  assign M15_AXIS_TDATA[7] = \<const0> ;
  assign M15_AXIS_TDATA[6] = \<const0> ;
  assign M15_AXIS_TDATA[5] = \<const0> ;
  assign M15_AXIS_TDATA[4] = \<const0> ;
  assign M15_AXIS_TDATA[3] = \<const0> ;
  assign M15_AXIS_TDATA[2] = \<const0> ;
  assign M15_AXIS_TDATA[1] = \<const0> ;
  assign M15_AXIS_TDATA[0] = \<const0> ;
  assign M15_AXIS_TLAST = \<const0> ;
  assign M15_AXIS_TVALID = \<const0> ;
  assign M1_AXIS_TDATA[31] = \<const0> ;
  assign M1_AXIS_TDATA[30] = \<const0> ;
  assign M1_AXIS_TDATA[29] = \<const0> ;
  assign M1_AXIS_TDATA[28] = \<const0> ;
  assign M1_AXIS_TDATA[27] = \<const0> ;
  assign M1_AXIS_TDATA[26] = \<const0> ;
  assign M1_AXIS_TDATA[25] = \<const0> ;
  assign M1_AXIS_TDATA[24] = \<const0> ;
  assign M1_AXIS_TDATA[23] = \<const0> ;
  assign M1_AXIS_TDATA[22] = \<const0> ;
  assign M1_AXIS_TDATA[21] = \<const0> ;
  assign M1_AXIS_TDATA[20] = \<const0> ;
  assign M1_AXIS_TDATA[19] = \<const0> ;
  assign M1_AXIS_TDATA[18] = \<const0> ;
  assign M1_AXIS_TDATA[17] = \<const0> ;
  assign M1_AXIS_TDATA[16] = \<const0> ;
  assign M1_AXIS_TDATA[15] = \<const0> ;
  assign M1_AXIS_TDATA[14] = \<const0> ;
  assign M1_AXIS_TDATA[13] = \<const0> ;
  assign M1_AXIS_TDATA[12] = \<const0> ;
  assign M1_AXIS_TDATA[11] = \<const0> ;
  assign M1_AXIS_TDATA[10] = \<const0> ;
  assign M1_AXIS_TDATA[9] = \<const0> ;
  assign M1_AXIS_TDATA[8] = \<const0> ;
  assign M1_AXIS_TDATA[7] = \<const0> ;
  assign M1_AXIS_TDATA[6] = \<const0> ;
  assign M1_AXIS_TDATA[5] = \<const0> ;
  assign M1_AXIS_TDATA[4] = \<const0> ;
  assign M1_AXIS_TDATA[3] = \<const0> ;
  assign M1_AXIS_TDATA[2] = \<const0> ;
  assign M1_AXIS_TDATA[1] = \<const0> ;
  assign M1_AXIS_TDATA[0] = \<const0> ;
  assign M1_AXIS_TLAST = \<const0> ;
  assign M1_AXIS_TVALID = \<const0> ;
  assign M2_AXIS_TDATA[31] = \<const0> ;
  assign M2_AXIS_TDATA[30] = \<const0> ;
  assign M2_AXIS_TDATA[29] = \<const0> ;
  assign M2_AXIS_TDATA[28] = \<const0> ;
  assign M2_AXIS_TDATA[27] = \<const0> ;
  assign M2_AXIS_TDATA[26] = \<const0> ;
  assign M2_AXIS_TDATA[25] = \<const0> ;
  assign M2_AXIS_TDATA[24] = \<const0> ;
  assign M2_AXIS_TDATA[23] = \<const0> ;
  assign M2_AXIS_TDATA[22] = \<const0> ;
  assign M2_AXIS_TDATA[21] = \<const0> ;
  assign M2_AXIS_TDATA[20] = \<const0> ;
  assign M2_AXIS_TDATA[19] = \<const0> ;
  assign M2_AXIS_TDATA[18] = \<const0> ;
  assign M2_AXIS_TDATA[17] = \<const0> ;
  assign M2_AXIS_TDATA[16] = \<const0> ;
  assign M2_AXIS_TDATA[15] = \<const0> ;
  assign M2_AXIS_TDATA[14] = \<const0> ;
  assign M2_AXIS_TDATA[13] = \<const0> ;
  assign M2_AXIS_TDATA[12] = \<const0> ;
  assign M2_AXIS_TDATA[11] = \<const0> ;
  assign M2_AXIS_TDATA[10] = \<const0> ;
  assign M2_AXIS_TDATA[9] = \<const0> ;
  assign M2_AXIS_TDATA[8] = \<const0> ;
  assign M2_AXIS_TDATA[7] = \<const0> ;
  assign M2_AXIS_TDATA[6] = \<const0> ;
  assign M2_AXIS_TDATA[5] = \<const0> ;
  assign M2_AXIS_TDATA[4] = \<const0> ;
  assign M2_AXIS_TDATA[3] = \<const0> ;
  assign M2_AXIS_TDATA[2] = \<const0> ;
  assign M2_AXIS_TDATA[1] = \<const0> ;
  assign M2_AXIS_TDATA[0] = \<const0> ;
  assign M2_AXIS_TLAST = \<const0> ;
  assign M2_AXIS_TVALID = \<const0> ;
  assign M3_AXIS_TDATA[31] = \<const0> ;
  assign M3_AXIS_TDATA[30] = \<const0> ;
  assign M3_AXIS_TDATA[29] = \<const0> ;
  assign M3_AXIS_TDATA[28] = \<const0> ;
  assign M3_AXIS_TDATA[27] = \<const0> ;
  assign M3_AXIS_TDATA[26] = \<const0> ;
  assign M3_AXIS_TDATA[25] = \<const0> ;
  assign M3_AXIS_TDATA[24] = \<const0> ;
  assign M3_AXIS_TDATA[23] = \<const0> ;
  assign M3_AXIS_TDATA[22] = \<const0> ;
  assign M3_AXIS_TDATA[21] = \<const0> ;
  assign M3_AXIS_TDATA[20] = \<const0> ;
  assign M3_AXIS_TDATA[19] = \<const0> ;
  assign M3_AXIS_TDATA[18] = \<const0> ;
  assign M3_AXIS_TDATA[17] = \<const0> ;
  assign M3_AXIS_TDATA[16] = \<const0> ;
  assign M3_AXIS_TDATA[15] = \<const0> ;
  assign M3_AXIS_TDATA[14] = \<const0> ;
  assign M3_AXIS_TDATA[13] = \<const0> ;
  assign M3_AXIS_TDATA[12] = \<const0> ;
  assign M3_AXIS_TDATA[11] = \<const0> ;
  assign M3_AXIS_TDATA[10] = \<const0> ;
  assign M3_AXIS_TDATA[9] = \<const0> ;
  assign M3_AXIS_TDATA[8] = \<const0> ;
  assign M3_AXIS_TDATA[7] = \<const0> ;
  assign M3_AXIS_TDATA[6] = \<const0> ;
  assign M3_AXIS_TDATA[5] = \<const0> ;
  assign M3_AXIS_TDATA[4] = \<const0> ;
  assign M3_AXIS_TDATA[3] = \<const0> ;
  assign M3_AXIS_TDATA[2] = \<const0> ;
  assign M3_AXIS_TDATA[1] = \<const0> ;
  assign M3_AXIS_TDATA[0] = \<const0> ;
  assign M3_AXIS_TLAST = \<const0> ;
  assign M3_AXIS_TVALID = \<const0> ;
  assign M4_AXIS_TDATA[31] = \<const0> ;
  assign M4_AXIS_TDATA[30] = \<const0> ;
  assign M4_AXIS_TDATA[29] = \<const0> ;
  assign M4_AXIS_TDATA[28] = \<const0> ;
  assign M4_AXIS_TDATA[27] = \<const0> ;
  assign M4_AXIS_TDATA[26] = \<const0> ;
  assign M4_AXIS_TDATA[25] = \<const0> ;
  assign M4_AXIS_TDATA[24] = \<const0> ;
  assign M4_AXIS_TDATA[23] = \<const0> ;
  assign M4_AXIS_TDATA[22] = \<const0> ;
  assign M4_AXIS_TDATA[21] = \<const0> ;
  assign M4_AXIS_TDATA[20] = \<const0> ;
  assign M4_AXIS_TDATA[19] = \<const0> ;
  assign M4_AXIS_TDATA[18] = \<const0> ;
  assign M4_AXIS_TDATA[17] = \<const0> ;
  assign M4_AXIS_TDATA[16] = \<const0> ;
  assign M4_AXIS_TDATA[15] = \<const0> ;
  assign M4_AXIS_TDATA[14] = \<const0> ;
  assign M4_AXIS_TDATA[13] = \<const0> ;
  assign M4_AXIS_TDATA[12] = \<const0> ;
  assign M4_AXIS_TDATA[11] = \<const0> ;
  assign M4_AXIS_TDATA[10] = \<const0> ;
  assign M4_AXIS_TDATA[9] = \<const0> ;
  assign M4_AXIS_TDATA[8] = \<const0> ;
  assign M4_AXIS_TDATA[7] = \<const0> ;
  assign M4_AXIS_TDATA[6] = \<const0> ;
  assign M4_AXIS_TDATA[5] = \<const0> ;
  assign M4_AXIS_TDATA[4] = \<const0> ;
  assign M4_AXIS_TDATA[3] = \<const0> ;
  assign M4_AXIS_TDATA[2] = \<const0> ;
  assign M4_AXIS_TDATA[1] = \<const0> ;
  assign M4_AXIS_TDATA[0] = \<const0> ;
  assign M4_AXIS_TLAST = \<const0> ;
  assign M4_AXIS_TVALID = \<const0> ;
  assign M5_AXIS_TDATA[31] = \<const0> ;
  assign M5_AXIS_TDATA[30] = \<const0> ;
  assign M5_AXIS_TDATA[29] = \<const0> ;
  assign M5_AXIS_TDATA[28] = \<const0> ;
  assign M5_AXIS_TDATA[27] = \<const0> ;
  assign M5_AXIS_TDATA[26] = \<const0> ;
  assign M5_AXIS_TDATA[25] = \<const0> ;
  assign M5_AXIS_TDATA[24] = \<const0> ;
  assign M5_AXIS_TDATA[23] = \<const0> ;
  assign M5_AXIS_TDATA[22] = \<const0> ;
  assign M5_AXIS_TDATA[21] = \<const0> ;
  assign M5_AXIS_TDATA[20] = \<const0> ;
  assign M5_AXIS_TDATA[19] = \<const0> ;
  assign M5_AXIS_TDATA[18] = \<const0> ;
  assign M5_AXIS_TDATA[17] = \<const0> ;
  assign M5_AXIS_TDATA[16] = \<const0> ;
  assign M5_AXIS_TDATA[15] = \<const0> ;
  assign M5_AXIS_TDATA[14] = \<const0> ;
  assign M5_AXIS_TDATA[13] = \<const0> ;
  assign M5_AXIS_TDATA[12] = \<const0> ;
  assign M5_AXIS_TDATA[11] = \<const0> ;
  assign M5_AXIS_TDATA[10] = \<const0> ;
  assign M5_AXIS_TDATA[9] = \<const0> ;
  assign M5_AXIS_TDATA[8] = \<const0> ;
  assign M5_AXIS_TDATA[7] = \<const0> ;
  assign M5_AXIS_TDATA[6] = \<const0> ;
  assign M5_AXIS_TDATA[5] = \<const0> ;
  assign M5_AXIS_TDATA[4] = \<const0> ;
  assign M5_AXIS_TDATA[3] = \<const0> ;
  assign M5_AXIS_TDATA[2] = \<const0> ;
  assign M5_AXIS_TDATA[1] = \<const0> ;
  assign M5_AXIS_TDATA[0] = \<const0> ;
  assign M5_AXIS_TLAST = \<const0> ;
  assign M5_AXIS_TVALID = \<const0> ;
  assign M6_AXIS_TDATA[31] = \<const0> ;
  assign M6_AXIS_TDATA[30] = \<const0> ;
  assign M6_AXIS_TDATA[29] = \<const0> ;
  assign M6_AXIS_TDATA[28] = \<const0> ;
  assign M6_AXIS_TDATA[27] = \<const0> ;
  assign M6_AXIS_TDATA[26] = \<const0> ;
  assign M6_AXIS_TDATA[25] = \<const0> ;
  assign M6_AXIS_TDATA[24] = \<const0> ;
  assign M6_AXIS_TDATA[23] = \<const0> ;
  assign M6_AXIS_TDATA[22] = \<const0> ;
  assign M6_AXIS_TDATA[21] = \<const0> ;
  assign M6_AXIS_TDATA[20] = \<const0> ;
  assign M6_AXIS_TDATA[19] = \<const0> ;
  assign M6_AXIS_TDATA[18] = \<const0> ;
  assign M6_AXIS_TDATA[17] = \<const0> ;
  assign M6_AXIS_TDATA[16] = \<const0> ;
  assign M6_AXIS_TDATA[15] = \<const0> ;
  assign M6_AXIS_TDATA[14] = \<const0> ;
  assign M6_AXIS_TDATA[13] = \<const0> ;
  assign M6_AXIS_TDATA[12] = \<const0> ;
  assign M6_AXIS_TDATA[11] = \<const0> ;
  assign M6_AXIS_TDATA[10] = \<const0> ;
  assign M6_AXIS_TDATA[9] = \<const0> ;
  assign M6_AXIS_TDATA[8] = \<const0> ;
  assign M6_AXIS_TDATA[7] = \<const0> ;
  assign M6_AXIS_TDATA[6] = \<const0> ;
  assign M6_AXIS_TDATA[5] = \<const0> ;
  assign M6_AXIS_TDATA[4] = \<const0> ;
  assign M6_AXIS_TDATA[3] = \<const0> ;
  assign M6_AXIS_TDATA[2] = \<const0> ;
  assign M6_AXIS_TDATA[1] = \<const0> ;
  assign M6_AXIS_TDATA[0] = \<const0> ;
  assign M6_AXIS_TLAST = \<const0> ;
  assign M6_AXIS_TVALID = \<const0> ;
  assign M7_AXIS_TDATA[31] = \<const0> ;
  assign M7_AXIS_TDATA[30] = \<const0> ;
  assign M7_AXIS_TDATA[29] = \<const0> ;
  assign M7_AXIS_TDATA[28] = \<const0> ;
  assign M7_AXIS_TDATA[27] = \<const0> ;
  assign M7_AXIS_TDATA[26] = \<const0> ;
  assign M7_AXIS_TDATA[25] = \<const0> ;
  assign M7_AXIS_TDATA[24] = \<const0> ;
  assign M7_AXIS_TDATA[23] = \<const0> ;
  assign M7_AXIS_TDATA[22] = \<const0> ;
  assign M7_AXIS_TDATA[21] = \<const0> ;
  assign M7_AXIS_TDATA[20] = \<const0> ;
  assign M7_AXIS_TDATA[19] = \<const0> ;
  assign M7_AXIS_TDATA[18] = \<const0> ;
  assign M7_AXIS_TDATA[17] = \<const0> ;
  assign M7_AXIS_TDATA[16] = \<const0> ;
  assign M7_AXIS_TDATA[15] = \<const0> ;
  assign M7_AXIS_TDATA[14] = \<const0> ;
  assign M7_AXIS_TDATA[13] = \<const0> ;
  assign M7_AXIS_TDATA[12] = \<const0> ;
  assign M7_AXIS_TDATA[11] = \<const0> ;
  assign M7_AXIS_TDATA[10] = \<const0> ;
  assign M7_AXIS_TDATA[9] = \<const0> ;
  assign M7_AXIS_TDATA[8] = \<const0> ;
  assign M7_AXIS_TDATA[7] = \<const0> ;
  assign M7_AXIS_TDATA[6] = \<const0> ;
  assign M7_AXIS_TDATA[5] = \<const0> ;
  assign M7_AXIS_TDATA[4] = \<const0> ;
  assign M7_AXIS_TDATA[3] = \<const0> ;
  assign M7_AXIS_TDATA[2] = \<const0> ;
  assign M7_AXIS_TDATA[1] = \<const0> ;
  assign M7_AXIS_TDATA[0] = \<const0> ;
  assign M7_AXIS_TLAST = \<const0> ;
  assign M7_AXIS_TVALID = \<const0> ;
  assign M8_AXIS_TDATA[31] = \<const0> ;
  assign M8_AXIS_TDATA[30] = \<const0> ;
  assign M8_AXIS_TDATA[29] = \<const0> ;
  assign M8_AXIS_TDATA[28] = \<const0> ;
  assign M8_AXIS_TDATA[27] = \<const0> ;
  assign M8_AXIS_TDATA[26] = \<const0> ;
  assign M8_AXIS_TDATA[25] = \<const0> ;
  assign M8_AXIS_TDATA[24] = \<const0> ;
  assign M8_AXIS_TDATA[23] = \<const0> ;
  assign M8_AXIS_TDATA[22] = \<const0> ;
  assign M8_AXIS_TDATA[21] = \<const0> ;
  assign M8_AXIS_TDATA[20] = \<const0> ;
  assign M8_AXIS_TDATA[19] = \<const0> ;
  assign M8_AXIS_TDATA[18] = \<const0> ;
  assign M8_AXIS_TDATA[17] = \<const0> ;
  assign M8_AXIS_TDATA[16] = \<const0> ;
  assign M8_AXIS_TDATA[15] = \<const0> ;
  assign M8_AXIS_TDATA[14] = \<const0> ;
  assign M8_AXIS_TDATA[13] = \<const0> ;
  assign M8_AXIS_TDATA[12] = \<const0> ;
  assign M8_AXIS_TDATA[11] = \<const0> ;
  assign M8_AXIS_TDATA[10] = \<const0> ;
  assign M8_AXIS_TDATA[9] = \<const0> ;
  assign M8_AXIS_TDATA[8] = \<const0> ;
  assign M8_AXIS_TDATA[7] = \<const0> ;
  assign M8_AXIS_TDATA[6] = \<const0> ;
  assign M8_AXIS_TDATA[5] = \<const0> ;
  assign M8_AXIS_TDATA[4] = \<const0> ;
  assign M8_AXIS_TDATA[3] = \<const0> ;
  assign M8_AXIS_TDATA[2] = \<const0> ;
  assign M8_AXIS_TDATA[1] = \<const0> ;
  assign M8_AXIS_TDATA[0] = \<const0> ;
  assign M8_AXIS_TLAST = \<const0> ;
  assign M8_AXIS_TVALID = \<const0> ;
  assign M9_AXIS_TDATA[31] = \<const0> ;
  assign M9_AXIS_TDATA[30] = \<const0> ;
  assign M9_AXIS_TDATA[29] = \<const0> ;
  assign M9_AXIS_TDATA[28] = \<const0> ;
  assign M9_AXIS_TDATA[27] = \<const0> ;
  assign M9_AXIS_TDATA[26] = \<const0> ;
  assign M9_AXIS_TDATA[25] = \<const0> ;
  assign M9_AXIS_TDATA[24] = \<const0> ;
  assign M9_AXIS_TDATA[23] = \<const0> ;
  assign M9_AXIS_TDATA[22] = \<const0> ;
  assign M9_AXIS_TDATA[21] = \<const0> ;
  assign M9_AXIS_TDATA[20] = \<const0> ;
  assign M9_AXIS_TDATA[19] = \<const0> ;
  assign M9_AXIS_TDATA[18] = \<const0> ;
  assign M9_AXIS_TDATA[17] = \<const0> ;
  assign M9_AXIS_TDATA[16] = \<const0> ;
  assign M9_AXIS_TDATA[15] = \<const0> ;
  assign M9_AXIS_TDATA[14] = \<const0> ;
  assign M9_AXIS_TDATA[13] = \<const0> ;
  assign M9_AXIS_TDATA[12] = \<const0> ;
  assign M9_AXIS_TDATA[11] = \<const0> ;
  assign M9_AXIS_TDATA[10] = \<const0> ;
  assign M9_AXIS_TDATA[9] = \<const0> ;
  assign M9_AXIS_TDATA[8] = \<const0> ;
  assign M9_AXIS_TDATA[7] = \<const0> ;
  assign M9_AXIS_TDATA[6] = \<const0> ;
  assign M9_AXIS_TDATA[5] = \<const0> ;
  assign M9_AXIS_TDATA[4] = \<const0> ;
  assign M9_AXIS_TDATA[3] = \<const0> ;
  assign M9_AXIS_TDATA[2] = \<const0> ;
  assign M9_AXIS_TDATA[1] = \<const0> ;
  assign M9_AXIS_TDATA[0] = \<const0> ;
  assign M9_AXIS_TLAST = \<const0> ;
  assign M9_AXIS_TVALID = \<const0> ;
  assign MB_Error = \<const0> ;
  assign M_AXI_DC_ACREADY = \<const0> ;
  assign M_AXI_DC_ARADDR[31] = \<const0> ;
  assign M_AXI_DC_ARADDR[30] = \<const0> ;
  assign M_AXI_DC_ARADDR[29] = \<const0> ;
  assign M_AXI_DC_ARADDR[28] = \<const0> ;
  assign M_AXI_DC_ARADDR[27] = \<const0> ;
  assign M_AXI_DC_ARADDR[26] = \<const0> ;
  assign M_AXI_DC_ARADDR[25] = \<const0> ;
  assign M_AXI_DC_ARADDR[24] = \<const0> ;
  assign M_AXI_DC_ARADDR[23] = \<const0> ;
  assign M_AXI_DC_ARADDR[22] = \<const0> ;
  assign M_AXI_DC_ARADDR[21] = \<const0> ;
  assign M_AXI_DC_ARADDR[20] = \<const0> ;
  assign M_AXI_DC_ARADDR[19] = \<const0> ;
  assign M_AXI_DC_ARADDR[18] = \<const0> ;
  assign M_AXI_DC_ARADDR[17] = \<const0> ;
  assign M_AXI_DC_ARADDR[16] = \<const0> ;
  assign M_AXI_DC_ARADDR[15] = \<const0> ;
  assign M_AXI_DC_ARADDR[14] = \<const0> ;
  assign M_AXI_DC_ARADDR[13] = \<const0> ;
  assign M_AXI_DC_ARADDR[12] = \<const0> ;
  assign M_AXI_DC_ARADDR[11] = \<const0> ;
  assign M_AXI_DC_ARADDR[10] = \<const0> ;
  assign M_AXI_DC_ARADDR[9] = \<const0> ;
  assign M_AXI_DC_ARADDR[8] = \<const0> ;
  assign M_AXI_DC_ARADDR[7] = \<const0> ;
  assign M_AXI_DC_ARADDR[6] = \<const0> ;
  assign M_AXI_DC_ARADDR[5] = \<const0> ;
  assign M_AXI_DC_ARADDR[4] = \<const0> ;
  assign M_AXI_DC_ARADDR[3] = \<const0> ;
  assign M_AXI_DC_ARADDR[2] = \<const0> ;
  assign M_AXI_DC_ARADDR[1] = \<const0> ;
  assign M_AXI_DC_ARADDR[0] = \<const0> ;
  assign M_AXI_DC_ARBAR[1] = \<const0> ;
  assign M_AXI_DC_ARBAR[0] = \<const0> ;
  assign M_AXI_DC_ARBURST[1] = \<const0> ;
  assign M_AXI_DC_ARBURST[0] = \<const0> ;
  assign M_AXI_DC_ARCACHE[3] = \<const0> ;
  assign M_AXI_DC_ARCACHE[2] = \<const0> ;
  assign M_AXI_DC_ARCACHE[1] = \<const0> ;
  assign M_AXI_DC_ARCACHE[0] = \<const0> ;
  assign M_AXI_DC_ARDOMAIN[1] = \<const0> ;
  assign M_AXI_DC_ARDOMAIN[0] = \<const0> ;
  assign M_AXI_DC_ARID[0] = \<const0> ;
  assign M_AXI_DC_ARLEN[7] = \<const0> ;
  assign M_AXI_DC_ARLEN[6] = \<const0> ;
  assign M_AXI_DC_ARLEN[5] = \<const0> ;
  assign M_AXI_DC_ARLEN[4] = \<const0> ;
  assign M_AXI_DC_ARLEN[3] = \<const0> ;
  assign M_AXI_DC_ARLEN[2] = \<const0> ;
  assign M_AXI_DC_ARLEN[1] = \<const0> ;
  assign M_AXI_DC_ARLEN[0] = \<const0> ;
  assign M_AXI_DC_ARLOCK = \<const0> ;
  assign M_AXI_DC_ARPROT[2] = \<const0> ;
  assign M_AXI_DC_ARPROT[1] = \<const0> ;
  assign M_AXI_DC_ARPROT[0] = \<const0> ;
  assign M_AXI_DC_ARQOS[3] = \<const0> ;
  assign M_AXI_DC_ARQOS[2] = \<const0> ;
  assign M_AXI_DC_ARQOS[1] = \<const0> ;
  assign M_AXI_DC_ARQOS[0] = \<const0> ;
  assign M_AXI_DC_ARSIZE[2] = \<const0> ;
  assign M_AXI_DC_ARSIZE[1] = \<const0> ;
  assign M_AXI_DC_ARSIZE[0] = \<const0> ;
  assign M_AXI_DC_ARSNOOP[3] = \<const0> ;
  assign M_AXI_DC_ARSNOOP[2] = \<const0> ;
  assign M_AXI_DC_ARSNOOP[1] = \<const0> ;
  assign M_AXI_DC_ARSNOOP[0] = \<const0> ;
  assign M_AXI_DC_ARUSER[4] = \<const0> ;
  assign M_AXI_DC_ARUSER[3] = \<const0> ;
  assign M_AXI_DC_ARUSER[2] = \<const0> ;
  assign M_AXI_DC_ARUSER[1] = \<const0> ;
  assign M_AXI_DC_ARUSER[0] = \<const0> ;
  assign M_AXI_DC_ARVALID = \<const0> ;
  assign M_AXI_DC_AWADDR[31] = \<const0> ;
  assign M_AXI_DC_AWADDR[30] = \<const0> ;
  assign M_AXI_DC_AWADDR[29] = \<const0> ;
  assign M_AXI_DC_AWADDR[28] = \<const0> ;
  assign M_AXI_DC_AWADDR[27] = \<const0> ;
  assign M_AXI_DC_AWADDR[26] = \<const0> ;
  assign M_AXI_DC_AWADDR[25] = \<const0> ;
  assign M_AXI_DC_AWADDR[24] = \<const0> ;
  assign M_AXI_DC_AWADDR[23] = \<const0> ;
  assign M_AXI_DC_AWADDR[22] = \<const0> ;
  assign M_AXI_DC_AWADDR[21] = \<const0> ;
  assign M_AXI_DC_AWADDR[20] = \<const0> ;
  assign M_AXI_DC_AWADDR[19] = \<const0> ;
  assign M_AXI_DC_AWADDR[18] = \<const0> ;
  assign M_AXI_DC_AWADDR[17] = \<const0> ;
  assign M_AXI_DC_AWADDR[16] = \<const0> ;
  assign M_AXI_DC_AWADDR[15] = \<const0> ;
  assign M_AXI_DC_AWADDR[14] = \<const0> ;
  assign M_AXI_DC_AWADDR[13] = \<const0> ;
  assign M_AXI_DC_AWADDR[12] = \<const0> ;
  assign M_AXI_DC_AWADDR[11] = \<const0> ;
  assign M_AXI_DC_AWADDR[10] = \<const0> ;
  assign M_AXI_DC_AWADDR[9] = \<const0> ;
  assign M_AXI_DC_AWADDR[8] = \<const0> ;
  assign M_AXI_DC_AWADDR[7] = \<const0> ;
  assign M_AXI_DC_AWADDR[6] = \<const0> ;
  assign M_AXI_DC_AWADDR[5] = \<const0> ;
  assign M_AXI_DC_AWADDR[4] = \<const0> ;
  assign M_AXI_DC_AWADDR[3] = \<const0> ;
  assign M_AXI_DC_AWADDR[2] = \<const0> ;
  assign M_AXI_DC_AWADDR[1] = \<const0> ;
  assign M_AXI_DC_AWADDR[0] = \<const0> ;
  assign M_AXI_DC_AWBAR[1] = \<const0> ;
  assign M_AXI_DC_AWBAR[0] = \<const0> ;
  assign M_AXI_DC_AWBURST[1] = \<const0> ;
  assign M_AXI_DC_AWBURST[0] = \<const0> ;
  assign M_AXI_DC_AWCACHE[3] = \<const0> ;
  assign M_AXI_DC_AWCACHE[2] = \<const0> ;
  assign M_AXI_DC_AWCACHE[1] = \<const0> ;
  assign M_AXI_DC_AWCACHE[0] = \<const0> ;
  assign M_AXI_DC_AWDOMAIN[1] = \<const0> ;
  assign M_AXI_DC_AWDOMAIN[0] = \<const0> ;
  assign M_AXI_DC_AWID[0] = \<const0> ;
  assign M_AXI_DC_AWLEN[7] = \<const0> ;
  assign M_AXI_DC_AWLEN[6] = \<const0> ;
  assign M_AXI_DC_AWLEN[5] = \<const0> ;
  assign M_AXI_DC_AWLEN[4] = \<const0> ;
  assign M_AXI_DC_AWLEN[3] = \<const0> ;
  assign M_AXI_DC_AWLEN[2] = \<const0> ;
  assign M_AXI_DC_AWLEN[1] = \<const0> ;
  assign M_AXI_DC_AWLEN[0] = \<const0> ;
  assign M_AXI_DC_AWLOCK = \<const0> ;
  assign M_AXI_DC_AWPROT[2] = \<const0> ;
  assign M_AXI_DC_AWPROT[1] = \<const0> ;
  assign M_AXI_DC_AWPROT[0] = \<const0> ;
  assign M_AXI_DC_AWQOS[3] = \<const0> ;
  assign M_AXI_DC_AWQOS[2] = \<const0> ;
  assign M_AXI_DC_AWQOS[1] = \<const0> ;
  assign M_AXI_DC_AWQOS[0] = \<const0> ;
  assign M_AXI_DC_AWSIZE[2] = \<const0> ;
  assign M_AXI_DC_AWSIZE[1] = \<const0> ;
  assign M_AXI_DC_AWSIZE[0] = \<const0> ;
  assign M_AXI_DC_AWSNOOP[2] = \<const0> ;
  assign M_AXI_DC_AWSNOOP[1] = \<const0> ;
  assign M_AXI_DC_AWSNOOP[0] = \<const0> ;
  assign M_AXI_DC_AWUSER[4] = \<const0> ;
  assign M_AXI_DC_AWUSER[3] = \<const0> ;
  assign M_AXI_DC_AWUSER[2] = \<const0> ;
  assign M_AXI_DC_AWUSER[1] = \<const0> ;
  assign M_AXI_DC_AWUSER[0] = \<const0> ;
  assign M_AXI_DC_AWVALID = \<const0> ;
  assign M_AXI_DC_BREADY = \<const0> ;
  assign M_AXI_DC_CDDATA[31] = \<const0> ;
  assign M_AXI_DC_CDDATA[30] = \<const0> ;
  assign M_AXI_DC_CDDATA[29] = \<const0> ;
  assign M_AXI_DC_CDDATA[28] = \<const0> ;
  assign M_AXI_DC_CDDATA[27] = \<const0> ;
  assign M_AXI_DC_CDDATA[26] = \<const0> ;
  assign M_AXI_DC_CDDATA[25] = \<const0> ;
  assign M_AXI_DC_CDDATA[24] = \<const0> ;
  assign M_AXI_DC_CDDATA[23] = \<const0> ;
  assign M_AXI_DC_CDDATA[22] = \<const0> ;
  assign M_AXI_DC_CDDATA[21] = \<const0> ;
  assign M_AXI_DC_CDDATA[20] = \<const0> ;
  assign M_AXI_DC_CDDATA[19] = \<const0> ;
  assign M_AXI_DC_CDDATA[18] = \<const0> ;
  assign M_AXI_DC_CDDATA[17] = \<const0> ;
  assign M_AXI_DC_CDDATA[16] = \<const0> ;
  assign M_AXI_DC_CDDATA[15] = \<const0> ;
  assign M_AXI_DC_CDDATA[14] = \<const0> ;
  assign M_AXI_DC_CDDATA[13] = \<const0> ;
  assign M_AXI_DC_CDDATA[12] = \<const0> ;
  assign M_AXI_DC_CDDATA[11] = \<const0> ;
  assign M_AXI_DC_CDDATA[10] = \<const0> ;
  assign M_AXI_DC_CDDATA[9] = \<const0> ;
  assign M_AXI_DC_CDDATA[8] = \<const0> ;
  assign M_AXI_DC_CDDATA[7] = \<const0> ;
  assign M_AXI_DC_CDDATA[6] = \<const0> ;
  assign M_AXI_DC_CDDATA[5] = \<const0> ;
  assign M_AXI_DC_CDDATA[4] = \<const0> ;
  assign M_AXI_DC_CDDATA[3] = \<const0> ;
  assign M_AXI_DC_CDDATA[2] = \<const0> ;
  assign M_AXI_DC_CDDATA[1] = \<const0> ;
  assign M_AXI_DC_CDDATA[0] = \<const0> ;
  assign M_AXI_DC_CDLAST = \<const0> ;
  assign M_AXI_DC_CDVALID = \<const0> ;
  assign M_AXI_DC_CRRESP[4] = \<const0> ;
  assign M_AXI_DC_CRRESP[3] = \<const0> ;
  assign M_AXI_DC_CRRESP[2] = \<const0> ;
  assign M_AXI_DC_CRRESP[1] = \<const0> ;
  assign M_AXI_DC_CRRESP[0] = \<const0> ;
  assign M_AXI_DC_CRVALID = \<const0> ;
  assign M_AXI_DC_RACK = \<const0> ;
  assign M_AXI_DC_RREADY = \<const0> ;
  assign M_AXI_DC_WACK = \<const0> ;
  assign M_AXI_DC_WDATA[31] = \<const0> ;
  assign M_AXI_DC_WDATA[30] = \<const0> ;
  assign M_AXI_DC_WDATA[29] = \<const0> ;
  assign M_AXI_DC_WDATA[28] = \<const0> ;
  assign M_AXI_DC_WDATA[27] = \<const0> ;
  assign M_AXI_DC_WDATA[26] = \<const0> ;
  assign M_AXI_DC_WDATA[25] = \<const0> ;
  assign M_AXI_DC_WDATA[24] = \<const0> ;
  assign M_AXI_DC_WDATA[23] = \<const0> ;
  assign M_AXI_DC_WDATA[22] = \<const0> ;
  assign M_AXI_DC_WDATA[21] = \<const0> ;
  assign M_AXI_DC_WDATA[20] = \<const0> ;
  assign M_AXI_DC_WDATA[19] = \<const0> ;
  assign M_AXI_DC_WDATA[18] = \<const0> ;
  assign M_AXI_DC_WDATA[17] = \<const0> ;
  assign M_AXI_DC_WDATA[16] = \<const0> ;
  assign M_AXI_DC_WDATA[15] = \<const0> ;
  assign M_AXI_DC_WDATA[14] = \<const0> ;
  assign M_AXI_DC_WDATA[13] = \<const0> ;
  assign M_AXI_DC_WDATA[12] = \<const0> ;
  assign M_AXI_DC_WDATA[11] = \<const0> ;
  assign M_AXI_DC_WDATA[10] = \<const0> ;
  assign M_AXI_DC_WDATA[9] = \<const0> ;
  assign M_AXI_DC_WDATA[8] = \<const0> ;
  assign M_AXI_DC_WDATA[7] = \<const0> ;
  assign M_AXI_DC_WDATA[6] = \<const0> ;
  assign M_AXI_DC_WDATA[5] = \<const0> ;
  assign M_AXI_DC_WDATA[4] = \<const0> ;
  assign M_AXI_DC_WDATA[3] = \<const0> ;
  assign M_AXI_DC_WDATA[2] = \<const0> ;
  assign M_AXI_DC_WDATA[1] = \<const0> ;
  assign M_AXI_DC_WDATA[0] = \<const0> ;
  assign M_AXI_DC_WLAST = \<const0> ;
  assign M_AXI_DC_WSTRB[3] = \<const0> ;
  assign M_AXI_DC_WSTRB[2] = \<const0> ;
  assign M_AXI_DC_WSTRB[1] = \<const0> ;
  assign M_AXI_DC_WSTRB[0] = \<const0> ;
  assign M_AXI_DC_WUSER[0] = \<const0> ;
  assign M_AXI_DC_WVALID = \<const0> ;
  assign M_AXI_DP_ARADDR[31:0] = M_AXI_DP_AWADDR;
  assign M_AXI_DP_ARBURST[1] = \<const0> ;
  assign M_AXI_DP_ARBURST[0] = \<const1> ;
  assign M_AXI_DP_ARCACHE[3] = \<const0> ;
  assign M_AXI_DP_ARCACHE[2] = \<const0> ;
  assign M_AXI_DP_ARCACHE[1] = \<const1> ;
  assign M_AXI_DP_ARCACHE[0] = \<const1> ;
  assign M_AXI_DP_ARID[0] = \<const0> ;
  assign M_AXI_DP_ARLEN[7] = \<const0> ;
  assign M_AXI_DP_ARLEN[6] = \<const0> ;
  assign M_AXI_DP_ARLEN[5] = \<const0> ;
  assign M_AXI_DP_ARLEN[4] = \<const0> ;
  assign M_AXI_DP_ARLEN[3] = \<const0> ;
  assign M_AXI_DP_ARLEN[2] = \<const0> ;
  assign M_AXI_DP_ARLEN[1] = \<const0> ;
  assign M_AXI_DP_ARLEN[0] = \<const0> ;
  assign M_AXI_DP_ARLOCK = \<const0> ;
  assign M_AXI_DP_ARPROT[2] = \<const0> ;
  assign M_AXI_DP_ARPROT[1] = \<const0> ;
  assign M_AXI_DP_ARPROT[0] = \<const0> ;
  assign M_AXI_DP_ARQOS[3] = \<const1> ;
  assign M_AXI_DP_ARQOS[2] = \<const0> ;
  assign M_AXI_DP_ARQOS[1] = \<const0> ;
  assign M_AXI_DP_ARQOS[0] = \<const0> ;
  assign M_AXI_DP_ARSIZE[2] = \<const0> ;
  assign M_AXI_DP_ARSIZE[1] = \<const1> ;
  assign M_AXI_DP_ARSIZE[0] = \<const0> ;
  assign M_AXI_DP_AWBURST[1] = \<const0> ;
  assign M_AXI_DP_AWBURST[0] = \<const1> ;
  assign M_AXI_DP_AWCACHE[3] = \<const0> ;
  assign M_AXI_DP_AWCACHE[2] = \<const0> ;
  assign M_AXI_DP_AWCACHE[1] = \<const1> ;
  assign M_AXI_DP_AWCACHE[0] = \<const1> ;
  assign M_AXI_DP_AWID[0] = \<const0> ;
  assign M_AXI_DP_AWLEN[7] = \<const0> ;
  assign M_AXI_DP_AWLEN[6] = \<const0> ;
  assign M_AXI_DP_AWLEN[5] = \<const0> ;
  assign M_AXI_DP_AWLEN[4] = \<const0> ;
  assign M_AXI_DP_AWLEN[3] = \<const0> ;
  assign M_AXI_DP_AWLEN[2] = \<const0> ;
  assign M_AXI_DP_AWLEN[1] = \<const0> ;
  assign M_AXI_DP_AWLEN[0] = \<const0> ;
  assign M_AXI_DP_AWLOCK = \<const0> ;
  assign M_AXI_DP_AWPROT[2] = \<const0> ;
  assign M_AXI_DP_AWPROT[1] = \<const0> ;
  assign M_AXI_DP_AWPROT[0] = \<const0> ;
  assign M_AXI_DP_AWQOS[3] = \<const1> ;
  assign M_AXI_DP_AWQOS[2] = \<const0> ;
  assign M_AXI_DP_AWQOS[1] = \<const0> ;
  assign M_AXI_DP_AWQOS[0] = \<const0> ;
  assign M_AXI_DP_AWSIZE[2] = \<const0> ;
  assign M_AXI_DP_AWSIZE[1] = \<const1> ;
  assign M_AXI_DP_AWSIZE[0] = \<const0> ;
  assign M_AXI_DP_BREADY = \<const1> ;
  assign M_AXI_DP_RREADY = \<const1> ;
  assign M_AXI_DP_WLAST = \<const1> ;
  assign M_AXI_IC_ACREADY = \<const0> ;
  assign M_AXI_IC_ARADDR[31] = \<const0> ;
  assign M_AXI_IC_ARADDR[30] = \<const0> ;
  assign M_AXI_IC_ARADDR[29] = \<const0> ;
  assign M_AXI_IC_ARADDR[28] = \<const0> ;
  assign M_AXI_IC_ARADDR[27] = \<const0> ;
  assign M_AXI_IC_ARADDR[26] = \<const0> ;
  assign M_AXI_IC_ARADDR[25] = \<const0> ;
  assign M_AXI_IC_ARADDR[24] = \<const0> ;
  assign M_AXI_IC_ARADDR[23] = \<const0> ;
  assign M_AXI_IC_ARADDR[22] = \<const0> ;
  assign M_AXI_IC_ARADDR[21] = \<const0> ;
  assign M_AXI_IC_ARADDR[20] = \<const0> ;
  assign M_AXI_IC_ARADDR[19] = \<const0> ;
  assign M_AXI_IC_ARADDR[18] = \<const0> ;
  assign M_AXI_IC_ARADDR[17] = \<const0> ;
  assign M_AXI_IC_ARADDR[16] = \<const0> ;
  assign M_AXI_IC_ARADDR[15] = \<const0> ;
  assign M_AXI_IC_ARADDR[14] = \<const0> ;
  assign M_AXI_IC_ARADDR[13] = \<const0> ;
  assign M_AXI_IC_ARADDR[12] = \<const0> ;
  assign M_AXI_IC_ARADDR[11] = \<const0> ;
  assign M_AXI_IC_ARADDR[10] = \<const0> ;
  assign M_AXI_IC_ARADDR[9] = \<const0> ;
  assign M_AXI_IC_ARADDR[8] = \<const0> ;
  assign M_AXI_IC_ARADDR[7] = \<const0> ;
  assign M_AXI_IC_ARADDR[6] = \<const0> ;
  assign M_AXI_IC_ARADDR[5] = \<const0> ;
  assign M_AXI_IC_ARADDR[4] = \<const0> ;
  assign M_AXI_IC_ARADDR[3] = \<const0> ;
  assign M_AXI_IC_ARADDR[2] = \<const0> ;
  assign M_AXI_IC_ARADDR[1] = \<const0> ;
  assign M_AXI_IC_ARADDR[0] = \<const0> ;
  assign M_AXI_IC_ARBAR[1] = \<const0> ;
  assign M_AXI_IC_ARBAR[0] = \<const0> ;
  assign M_AXI_IC_ARBURST[1] = \<const0> ;
  assign M_AXI_IC_ARBURST[0] = \<const0> ;
  assign M_AXI_IC_ARCACHE[3] = \<const0> ;
  assign M_AXI_IC_ARCACHE[2] = \<const0> ;
  assign M_AXI_IC_ARCACHE[1] = \<const0> ;
  assign M_AXI_IC_ARCACHE[0] = \<const0> ;
  assign M_AXI_IC_ARDOMAIN[1] = \<const0> ;
  assign M_AXI_IC_ARDOMAIN[0] = \<const0> ;
  assign M_AXI_IC_ARID[0] = \<const0> ;
  assign M_AXI_IC_ARLEN[7] = \<const0> ;
  assign M_AXI_IC_ARLEN[6] = \<const0> ;
  assign M_AXI_IC_ARLEN[5] = \<const0> ;
  assign M_AXI_IC_ARLEN[4] = \<const0> ;
  assign M_AXI_IC_ARLEN[3] = \<const0> ;
  assign M_AXI_IC_ARLEN[2] = \<const0> ;
  assign M_AXI_IC_ARLEN[1] = \<const0> ;
  assign M_AXI_IC_ARLEN[0] = \<const0> ;
  assign M_AXI_IC_ARLOCK = \<const0> ;
  assign M_AXI_IC_ARPROT[2] = \<const0> ;
  assign M_AXI_IC_ARPROT[1] = \<const0> ;
  assign M_AXI_IC_ARPROT[0] = \<const0> ;
  assign M_AXI_IC_ARQOS[3] = \<const0> ;
  assign M_AXI_IC_ARQOS[2] = \<const0> ;
  assign M_AXI_IC_ARQOS[1] = \<const0> ;
  assign M_AXI_IC_ARQOS[0] = \<const0> ;
  assign M_AXI_IC_ARSIZE[2] = \<const0> ;
  assign M_AXI_IC_ARSIZE[1] = \<const0> ;
  assign M_AXI_IC_ARSIZE[0] = \<const0> ;
  assign M_AXI_IC_ARSNOOP[3] = \<const0> ;
  assign M_AXI_IC_ARSNOOP[2] = \<const0> ;
  assign M_AXI_IC_ARSNOOP[1] = \<const0> ;
  assign M_AXI_IC_ARSNOOP[0] = \<const0> ;
  assign M_AXI_IC_ARUSER[4] = \<const0> ;
  assign M_AXI_IC_ARUSER[3] = \<const0> ;
  assign M_AXI_IC_ARUSER[2] = \<const0> ;
  assign M_AXI_IC_ARUSER[1] = \<const0> ;
  assign M_AXI_IC_ARUSER[0] = \<const0> ;
  assign M_AXI_IC_ARVALID = \<const0> ;
  assign M_AXI_IC_AWADDR[31] = \<const0> ;
  assign M_AXI_IC_AWADDR[30] = \<const0> ;
  assign M_AXI_IC_AWADDR[29] = \<const0> ;
  assign M_AXI_IC_AWADDR[28] = \<const0> ;
  assign M_AXI_IC_AWADDR[27] = \<const0> ;
  assign M_AXI_IC_AWADDR[26] = \<const0> ;
  assign M_AXI_IC_AWADDR[25] = \<const0> ;
  assign M_AXI_IC_AWADDR[24] = \<const0> ;
  assign M_AXI_IC_AWADDR[23] = \<const0> ;
  assign M_AXI_IC_AWADDR[22] = \<const0> ;
  assign M_AXI_IC_AWADDR[21] = \<const0> ;
  assign M_AXI_IC_AWADDR[20] = \<const0> ;
  assign M_AXI_IC_AWADDR[19] = \<const0> ;
  assign M_AXI_IC_AWADDR[18] = \<const0> ;
  assign M_AXI_IC_AWADDR[17] = \<const0> ;
  assign M_AXI_IC_AWADDR[16] = \<const0> ;
  assign M_AXI_IC_AWADDR[15] = \<const0> ;
  assign M_AXI_IC_AWADDR[14] = \<const0> ;
  assign M_AXI_IC_AWADDR[13] = \<const0> ;
  assign M_AXI_IC_AWADDR[12] = \<const0> ;
  assign M_AXI_IC_AWADDR[11] = \<const0> ;
  assign M_AXI_IC_AWADDR[10] = \<const0> ;
  assign M_AXI_IC_AWADDR[9] = \<const0> ;
  assign M_AXI_IC_AWADDR[8] = \<const0> ;
  assign M_AXI_IC_AWADDR[7] = \<const0> ;
  assign M_AXI_IC_AWADDR[6] = \<const0> ;
  assign M_AXI_IC_AWADDR[5] = \<const0> ;
  assign M_AXI_IC_AWADDR[4] = \<const0> ;
  assign M_AXI_IC_AWADDR[3] = \<const0> ;
  assign M_AXI_IC_AWADDR[2] = \<const0> ;
  assign M_AXI_IC_AWADDR[1] = \<const0> ;
  assign M_AXI_IC_AWADDR[0] = \<const0> ;
  assign M_AXI_IC_AWBAR[1] = \<const0> ;
  assign M_AXI_IC_AWBAR[0] = \<const0> ;
  assign M_AXI_IC_AWBURST[1] = \<const0> ;
  assign M_AXI_IC_AWBURST[0] = \<const0> ;
  assign M_AXI_IC_AWCACHE[3] = \<const0> ;
  assign M_AXI_IC_AWCACHE[2] = \<const0> ;
  assign M_AXI_IC_AWCACHE[1] = \<const0> ;
  assign M_AXI_IC_AWCACHE[0] = \<const0> ;
  assign M_AXI_IC_AWDOMAIN[1] = \<const0> ;
  assign M_AXI_IC_AWDOMAIN[0] = \<const0> ;
  assign M_AXI_IC_AWID[0] = \<const0> ;
  assign M_AXI_IC_AWLEN[7] = \<const0> ;
  assign M_AXI_IC_AWLEN[6] = \<const0> ;
  assign M_AXI_IC_AWLEN[5] = \<const0> ;
  assign M_AXI_IC_AWLEN[4] = \<const0> ;
  assign M_AXI_IC_AWLEN[3] = \<const0> ;
  assign M_AXI_IC_AWLEN[2] = \<const0> ;
  assign M_AXI_IC_AWLEN[1] = \<const0> ;
  assign M_AXI_IC_AWLEN[0] = \<const0> ;
  assign M_AXI_IC_AWLOCK = \<const0> ;
  assign M_AXI_IC_AWPROT[2] = \<const0> ;
  assign M_AXI_IC_AWPROT[1] = \<const0> ;
  assign M_AXI_IC_AWPROT[0] = \<const0> ;
  assign M_AXI_IC_AWQOS[3] = \<const0> ;
  assign M_AXI_IC_AWQOS[2] = \<const0> ;
  assign M_AXI_IC_AWQOS[1] = \<const0> ;
  assign M_AXI_IC_AWQOS[0] = \<const0> ;
  assign M_AXI_IC_AWSIZE[2] = \<const0> ;
  assign M_AXI_IC_AWSIZE[1] = \<const0> ;
  assign M_AXI_IC_AWSIZE[0] = \<const0> ;
  assign M_AXI_IC_AWSNOOP[2] = \<const0> ;
  assign M_AXI_IC_AWSNOOP[1] = \<const0> ;
  assign M_AXI_IC_AWSNOOP[0] = \<const0> ;
  assign M_AXI_IC_AWUSER[4] = \<const0> ;
  assign M_AXI_IC_AWUSER[3] = \<const0> ;
  assign M_AXI_IC_AWUSER[2] = \<const0> ;
  assign M_AXI_IC_AWUSER[1] = \<const0> ;
  assign M_AXI_IC_AWUSER[0] = \<const0> ;
  assign M_AXI_IC_AWVALID = \<const0> ;
  assign M_AXI_IC_BREADY = \<const0> ;
  assign M_AXI_IC_CDDATA[31] = \<const0> ;
  assign M_AXI_IC_CDDATA[30] = \<const0> ;
  assign M_AXI_IC_CDDATA[29] = \<const0> ;
  assign M_AXI_IC_CDDATA[28] = \<const0> ;
  assign M_AXI_IC_CDDATA[27] = \<const0> ;
  assign M_AXI_IC_CDDATA[26] = \<const0> ;
  assign M_AXI_IC_CDDATA[25] = \<const0> ;
  assign M_AXI_IC_CDDATA[24] = \<const0> ;
  assign M_AXI_IC_CDDATA[23] = \<const0> ;
  assign M_AXI_IC_CDDATA[22] = \<const0> ;
  assign M_AXI_IC_CDDATA[21] = \<const0> ;
  assign M_AXI_IC_CDDATA[20] = \<const0> ;
  assign M_AXI_IC_CDDATA[19] = \<const0> ;
  assign M_AXI_IC_CDDATA[18] = \<const0> ;
  assign M_AXI_IC_CDDATA[17] = \<const0> ;
  assign M_AXI_IC_CDDATA[16] = \<const0> ;
  assign M_AXI_IC_CDDATA[15] = \<const0> ;
  assign M_AXI_IC_CDDATA[14] = \<const0> ;
  assign M_AXI_IC_CDDATA[13] = \<const0> ;
  assign M_AXI_IC_CDDATA[12] = \<const0> ;
  assign M_AXI_IC_CDDATA[11] = \<const0> ;
  assign M_AXI_IC_CDDATA[10] = \<const0> ;
  assign M_AXI_IC_CDDATA[9] = \<const0> ;
  assign M_AXI_IC_CDDATA[8] = \<const0> ;
  assign M_AXI_IC_CDDATA[7] = \<const0> ;
  assign M_AXI_IC_CDDATA[6] = \<const0> ;
  assign M_AXI_IC_CDDATA[5] = \<const0> ;
  assign M_AXI_IC_CDDATA[4] = \<const0> ;
  assign M_AXI_IC_CDDATA[3] = \<const0> ;
  assign M_AXI_IC_CDDATA[2] = \<const0> ;
  assign M_AXI_IC_CDDATA[1] = \<const0> ;
  assign M_AXI_IC_CDDATA[0] = \<const0> ;
  assign M_AXI_IC_CDLAST = \<const0> ;
  assign M_AXI_IC_CDVALID = \<const0> ;
  assign M_AXI_IC_CRRESP[4] = \<const0> ;
  assign M_AXI_IC_CRRESP[3] = \<const0> ;
  assign M_AXI_IC_CRRESP[2] = \<const0> ;
  assign M_AXI_IC_CRRESP[1] = \<const0> ;
  assign M_AXI_IC_CRRESP[0] = \<const0> ;
  assign M_AXI_IC_CRVALID = \<const0> ;
  assign M_AXI_IC_RACK = \<const0> ;
  assign M_AXI_IC_RREADY = \<const0> ;
  assign M_AXI_IC_WACK = \<const0> ;
  assign M_AXI_IC_WDATA[31] = \<const0> ;
  assign M_AXI_IC_WDATA[30] = \<const0> ;
  assign M_AXI_IC_WDATA[29] = \<const0> ;
  assign M_AXI_IC_WDATA[28] = \<const0> ;
  assign M_AXI_IC_WDATA[27] = \<const0> ;
  assign M_AXI_IC_WDATA[26] = \<const0> ;
  assign M_AXI_IC_WDATA[25] = \<const0> ;
  assign M_AXI_IC_WDATA[24] = \<const0> ;
  assign M_AXI_IC_WDATA[23] = \<const0> ;
  assign M_AXI_IC_WDATA[22] = \<const0> ;
  assign M_AXI_IC_WDATA[21] = \<const0> ;
  assign M_AXI_IC_WDATA[20] = \<const0> ;
  assign M_AXI_IC_WDATA[19] = \<const0> ;
  assign M_AXI_IC_WDATA[18] = \<const0> ;
  assign M_AXI_IC_WDATA[17] = \<const0> ;
  assign M_AXI_IC_WDATA[16] = \<const0> ;
  assign M_AXI_IC_WDATA[15] = \<const0> ;
  assign M_AXI_IC_WDATA[14] = \<const0> ;
  assign M_AXI_IC_WDATA[13] = \<const0> ;
  assign M_AXI_IC_WDATA[12] = \<const0> ;
  assign M_AXI_IC_WDATA[11] = \<const0> ;
  assign M_AXI_IC_WDATA[10] = \<const0> ;
  assign M_AXI_IC_WDATA[9] = \<const0> ;
  assign M_AXI_IC_WDATA[8] = \<const0> ;
  assign M_AXI_IC_WDATA[7] = \<const0> ;
  assign M_AXI_IC_WDATA[6] = \<const0> ;
  assign M_AXI_IC_WDATA[5] = \<const0> ;
  assign M_AXI_IC_WDATA[4] = \<const0> ;
  assign M_AXI_IC_WDATA[3] = \<const0> ;
  assign M_AXI_IC_WDATA[2] = \<const0> ;
  assign M_AXI_IC_WDATA[1] = \<const0> ;
  assign M_AXI_IC_WDATA[0] = \<const0> ;
  assign M_AXI_IC_WLAST = \<const0> ;
  assign M_AXI_IC_WSTRB[3] = \<const0> ;
  assign M_AXI_IC_WSTRB[2] = \<const0> ;
  assign M_AXI_IC_WSTRB[1] = \<const0> ;
  assign M_AXI_IC_WSTRB[0] = \<const0> ;
  assign M_AXI_IC_WUSER[0] = \<const0> ;
  assign M_AXI_IC_WVALID = \<const0> ;
  assign M_AXI_IP_ARADDR[31] = \<const0> ;
  assign M_AXI_IP_ARADDR[30] = \<const0> ;
  assign M_AXI_IP_ARADDR[29] = \<const0> ;
  assign M_AXI_IP_ARADDR[28] = \<const0> ;
  assign M_AXI_IP_ARADDR[27] = \<const0> ;
  assign M_AXI_IP_ARADDR[26] = \<const0> ;
  assign M_AXI_IP_ARADDR[25] = \<const0> ;
  assign M_AXI_IP_ARADDR[24] = \<const0> ;
  assign M_AXI_IP_ARADDR[23] = \<const0> ;
  assign M_AXI_IP_ARADDR[22] = \<const0> ;
  assign M_AXI_IP_ARADDR[21] = \<const0> ;
  assign M_AXI_IP_ARADDR[20] = \<const0> ;
  assign M_AXI_IP_ARADDR[19] = \<const0> ;
  assign M_AXI_IP_ARADDR[18] = \<const0> ;
  assign M_AXI_IP_ARADDR[17] = \<const0> ;
  assign M_AXI_IP_ARADDR[16] = \<const0> ;
  assign M_AXI_IP_ARADDR[15] = \<const0> ;
  assign M_AXI_IP_ARADDR[14] = \<const0> ;
  assign M_AXI_IP_ARADDR[13] = \<const0> ;
  assign M_AXI_IP_ARADDR[12] = \<const0> ;
  assign M_AXI_IP_ARADDR[11] = \<const0> ;
  assign M_AXI_IP_ARADDR[10] = \<const0> ;
  assign M_AXI_IP_ARADDR[9] = \<const0> ;
  assign M_AXI_IP_ARADDR[8] = \<const0> ;
  assign M_AXI_IP_ARADDR[7] = \<const0> ;
  assign M_AXI_IP_ARADDR[6] = \<const0> ;
  assign M_AXI_IP_ARADDR[5] = \<const0> ;
  assign M_AXI_IP_ARADDR[4] = \<const0> ;
  assign M_AXI_IP_ARADDR[3] = \<const0> ;
  assign M_AXI_IP_ARADDR[2] = \<const0> ;
  assign M_AXI_IP_ARADDR[1] = \<const0> ;
  assign M_AXI_IP_ARADDR[0] = \<const0> ;
  assign M_AXI_IP_ARBURST[1] = \<const0> ;
  assign M_AXI_IP_ARBURST[0] = \<const0> ;
  assign M_AXI_IP_ARCACHE[3] = \<const0> ;
  assign M_AXI_IP_ARCACHE[2] = \<const0> ;
  assign M_AXI_IP_ARCACHE[1] = \<const0> ;
  assign M_AXI_IP_ARCACHE[0] = \<const0> ;
  assign M_AXI_IP_ARID[0] = \<const0> ;
  assign M_AXI_IP_ARLEN[7] = \<const0> ;
  assign M_AXI_IP_ARLEN[6] = \<const0> ;
  assign M_AXI_IP_ARLEN[5] = \<const0> ;
  assign M_AXI_IP_ARLEN[4] = \<const0> ;
  assign M_AXI_IP_ARLEN[3] = \<const0> ;
  assign M_AXI_IP_ARLEN[2] = \<const0> ;
  assign M_AXI_IP_ARLEN[1] = \<const0> ;
  assign M_AXI_IP_ARLEN[0] = \<const0> ;
  assign M_AXI_IP_ARLOCK = \<const0> ;
  assign M_AXI_IP_ARPROT[2] = \<const0> ;
  assign M_AXI_IP_ARPROT[1] = \<const0> ;
  assign M_AXI_IP_ARPROT[0] = \<const0> ;
  assign M_AXI_IP_ARQOS[3] = \<const0> ;
  assign M_AXI_IP_ARQOS[2] = \<const0> ;
  assign M_AXI_IP_ARQOS[1] = \<const0> ;
  assign M_AXI_IP_ARQOS[0] = \<const0> ;
  assign M_AXI_IP_ARSIZE[2] = \<const0> ;
  assign M_AXI_IP_ARSIZE[1] = \<const0> ;
  assign M_AXI_IP_ARSIZE[0] = \<const0> ;
  assign M_AXI_IP_ARVALID = \<const0> ;
  assign M_AXI_IP_AWADDR[31] = \<const0> ;
  assign M_AXI_IP_AWADDR[30] = \<const0> ;
  assign M_AXI_IP_AWADDR[29] = \<const0> ;
  assign M_AXI_IP_AWADDR[28] = \<const0> ;
  assign M_AXI_IP_AWADDR[27] = \<const0> ;
  assign M_AXI_IP_AWADDR[26] = \<const0> ;
  assign M_AXI_IP_AWADDR[25] = \<const0> ;
  assign M_AXI_IP_AWADDR[24] = \<const0> ;
  assign M_AXI_IP_AWADDR[23] = \<const0> ;
  assign M_AXI_IP_AWADDR[22] = \<const0> ;
  assign M_AXI_IP_AWADDR[21] = \<const0> ;
  assign M_AXI_IP_AWADDR[20] = \<const0> ;
  assign M_AXI_IP_AWADDR[19] = \<const0> ;
  assign M_AXI_IP_AWADDR[18] = \<const0> ;
  assign M_AXI_IP_AWADDR[17] = \<const0> ;
  assign M_AXI_IP_AWADDR[16] = \<const0> ;
  assign M_AXI_IP_AWADDR[15] = \<const0> ;
  assign M_AXI_IP_AWADDR[14] = \<const0> ;
  assign M_AXI_IP_AWADDR[13] = \<const0> ;
  assign M_AXI_IP_AWADDR[12] = \<const0> ;
  assign M_AXI_IP_AWADDR[11] = \<const0> ;
  assign M_AXI_IP_AWADDR[10] = \<const0> ;
  assign M_AXI_IP_AWADDR[9] = \<const0> ;
  assign M_AXI_IP_AWADDR[8] = \<const0> ;
  assign M_AXI_IP_AWADDR[7] = \<const0> ;
  assign M_AXI_IP_AWADDR[6] = \<const0> ;
  assign M_AXI_IP_AWADDR[5] = \<const0> ;
  assign M_AXI_IP_AWADDR[4] = \<const0> ;
  assign M_AXI_IP_AWADDR[3] = \<const0> ;
  assign M_AXI_IP_AWADDR[2] = \<const0> ;
  assign M_AXI_IP_AWADDR[1] = \<const0> ;
  assign M_AXI_IP_AWADDR[0] = \<const0> ;
  assign M_AXI_IP_AWBURST[1] = \<const0> ;
  assign M_AXI_IP_AWBURST[0] = \<const0> ;
  assign M_AXI_IP_AWCACHE[3] = \<const0> ;
  assign M_AXI_IP_AWCACHE[2] = \<const0> ;
  assign M_AXI_IP_AWCACHE[1] = \<const0> ;
  assign M_AXI_IP_AWCACHE[0] = \<const0> ;
  assign M_AXI_IP_AWID[0] = \<const0> ;
  assign M_AXI_IP_AWLEN[7] = \<const0> ;
  assign M_AXI_IP_AWLEN[6] = \<const0> ;
  assign M_AXI_IP_AWLEN[5] = \<const0> ;
  assign M_AXI_IP_AWLEN[4] = \<const0> ;
  assign M_AXI_IP_AWLEN[3] = \<const0> ;
  assign M_AXI_IP_AWLEN[2] = \<const0> ;
  assign M_AXI_IP_AWLEN[1] = \<const0> ;
  assign M_AXI_IP_AWLEN[0] = \<const0> ;
  assign M_AXI_IP_AWLOCK = \<const0> ;
  assign M_AXI_IP_AWPROT[2] = \<const0> ;
  assign M_AXI_IP_AWPROT[1] = \<const0> ;
  assign M_AXI_IP_AWPROT[0] = \<const0> ;
  assign M_AXI_IP_AWQOS[3] = \<const0> ;
  assign M_AXI_IP_AWQOS[2] = \<const0> ;
  assign M_AXI_IP_AWQOS[1] = \<const0> ;
  assign M_AXI_IP_AWQOS[0] = \<const0> ;
  assign M_AXI_IP_AWSIZE[2] = \<const0> ;
  assign M_AXI_IP_AWSIZE[1] = \<const0> ;
  assign M_AXI_IP_AWSIZE[0] = \<const0> ;
  assign M_AXI_IP_AWVALID = \<const0> ;
  assign M_AXI_IP_BREADY = \<const0> ;
  assign M_AXI_IP_RREADY = \<const0> ;
  assign M_AXI_IP_WDATA[31] = \<const0> ;
  assign M_AXI_IP_WDATA[30] = \<const0> ;
  assign M_AXI_IP_WDATA[29] = \<const0> ;
  assign M_AXI_IP_WDATA[28] = \<const0> ;
  assign M_AXI_IP_WDATA[27] = \<const0> ;
  assign M_AXI_IP_WDATA[26] = \<const0> ;
  assign M_AXI_IP_WDATA[25] = \<const0> ;
  assign M_AXI_IP_WDATA[24] = \<const0> ;
  assign M_AXI_IP_WDATA[23] = \<const0> ;
  assign M_AXI_IP_WDATA[22] = \<const0> ;
  assign M_AXI_IP_WDATA[21] = \<const0> ;
  assign M_AXI_IP_WDATA[20] = \<const0> ;
  assign M_AXI_IP_WDATA[19] = \<const0> ;
  assign M_AXI_IP_WDATA[18] = \<const0> ;
  assign M_AXI_IP_WDATA[17] = \<const0> ;
  assign M_AXI_IP_WDATA[16] = \<const0> ;
  assign M_AXI_IP_WDATA[15] = \<const0> ;
  assign M_AXI_IP_WDATA[14] = \<const0> ;
  assign M_AXI_IP_WDATA[13] = \<const0> ;
  assign M_AXI_IP_WDATA[12] = \<const0> ;
  assign M_AXI_IP_WDATA[11] = \<const0> ;
  assign M_AXI_IP_WDATA[10] = \<const0> ;
  assign M_AXI_IP_WDATA[9] = \<const0> ;
  assign M_AXI_IP_WDATA[8] = \<const0> ;
  assign M_AXI_IP_WDATA[7] = \<const0> ;
  assign M_AXI_IP_WDATA[6] = \<const0> ;
  assign M_AXI_IP_WDATA[5] = \<const0> ;
  assign M_AXI_IP_WDATA[4] = \<const0> ;
  assign M_AXI_IP_WDATA[3] = \<const0> ;
  assign M_AXI_IP_WDATA[2] = \<const0> ;
  assign M_AXI_IP_WDATA[1] = \<const0> ;
  assign M_AXI_IP_WDATA[0] = \<const0> ;
  assign M_AXI_IP_WLAST = \<const0> ;
  assign M_AXI_IP_WSTRB[3] = \<const0> ;
  assign M_AXI_IP_WSTRB[2] = \<const0> ;
  assign M_AXI_IP_WSTRB[1] = \<const0> ;
  assign M_AXI_IP_WSTRB[0] = \<const0> ;
  assign M_AXI_IP_WVALID = \<const0> ;
  assign RAM_From[255] = \<const0> ;
  assign RAM_From[254] = \<const0> ;
  assign RAM_From[253] = \<const0> ;
  assign RAM_From[252] = \<const0> ;
  assign RAM_From[251] = \<const0> ;
  assign RAM_From[250] = \<const0> ;
  assign RAM_From[249] = \<const0> ;
  assign RAM_From[248] = \<const0> ;
  assign RAM_From[247] = \<const0> ;
  assign RAM_From[246] = \<const0> ;
  assign RAM_From[245] = \<const0> ;
  assign RAM_From[244] = \<const0> ;
  assign RAM_From[243] = \<const0> ;
  assign RAM_From[242] = \<const0> ;
  assign RAM_From[241] = \<const0> ;
  assign RAM_From[240] = \<const0> ;
  assign RAM_From[239] = \<const0> ;
  assign RAM_From[238] = \<const0> ;
  assign RAM_From[237] = \<const0> ;
  assign RAM_From[236] = \<const0> ;
  assign RAM_From[235] = \<const0> ;
  assign RAM_From[234] = \<const0> ;
  assign RAM_From[233] = \<const0> ;
  assign RAM_From[232] = \<const0> ;
  assign RAM_From[231] = \<const0> ;
  assign RAM_From[230] = \<const0> ;
  assign RAM_From[229] = \<const0> ;
  assign RAM_From[228] = \<const0> ;
  assign RAM_From[227] = \<const0> ;
  assign RAM_From[226] = \<const0> ;
  assign RAM_From[225] = \<const0> ;
  assign RAM_From[224] = \<const0> ;
  assign RAM_From[223] = \<const0> ;
  assign RAM_From[222] = \<const0> ;
  assign RAM_From[221] = \<const0> ;
  assign RAM_From[220] = \<const0> ;
  assign RAM_From[219] = \<const0> ;
  assign RAM_From[218] = \<const0> ;
  assign RAM_From[217] = \<const0> ;
  assign RAM_From[216] = \<const0> ;
  assign RAM_From[215] = \<const0> ;
  assign RAM_From[214] = \<const0> ;
  assign RAM_From[213] = \<const0> ;
  assign RAM_From[212] = \<const0> ;
  assign RAM_From[211] = \<const0> ;
  assign RAM_From[210] = \<const0> ;
  assign RAM_From[209] = \<const0> ;
  assign RAM_From[208] = \<const0> ;
  assign RAM_From[207] = \<const0> ;
  assign RAM_From[206] = \<const0> ;
  assign RAM_From[205] = \<const0> ;
  assign RAM_From[204] = \<const0> ;
  assign RAM_From[203] = \<const0> ;
  assign RAM_From[202] = \<const0> ;
  assign RAM_From[201] = \<const0> ;
  assign RAM_From[200] = \<const0> ;
  assign RAM_From[199] = \<const0> ;
  assign RAM_From[198] = \<const0> ;
  assign RAM_From[197] = \<const0> ;
  assign RAM_From[196] = \<const0> ;
  assign RAM_From[195] = \<const0> ;
  assign RAM_From[194] = \<const0> ;
  assign RAM_From[193] = \<const0> ;
  assign RAM_From[192] = \<const0> ;
  assign RAM_From[191] = \<const0> ;
  assign RAM_From[190] = \<const0> ;
  assign RAM_From[189] = \<const0> ;
  assign RAM_From[188] = \<const0> ;
  assign RAM_From[187] = \<const0> ;
  assign RAM_From[186] = \<const0> ;
  assign RAM_From[185] = \<const0> ;
  assign RAM_From[184] = \<const0> ;
  assign RAM_From[183] = \<const0> ;
  assign RAM_From[182] = \<const0> ;
  assign RAM_From[181] = \<const0> ;
  assign RAM_From[180] = \<const0> ;
  assign RAM_From[179] = \<const0> ;
  assign RAM_From[178] = \<const0> ;
  assign RAM_From[177] = \<const0> ;
  assign RAM_From[176] = \<const0> ;
  assign RAM_From[175] = \<const0> ;
  assign RAM_From[174] = \<const0> ;
  assign RAM_From[173] = \<const0> ;
  assign RAM_From[172] = \<const0> ;
  assign RAM_From[171] = \<const0> ;
  assign RAM_From[170] = \<const0> ;
  assign RAM_From[169] = \<const0> ;
  assign RAM_From[168] = \<const0> ;
  assign RAM_From[167] = \<const0> ;
  assign RAM_From[166] = \<const0> ;
  assign RAM_From[165] = \<const0> ;
  assign RAM_From[164] = \<const0> ;
  assign RAM_From[163] = \<const0> ;
  assign RAM_From[162] = \<const0> ;
  assign RAM_From[161] = \<const0> ;
  assign RAM_From[160] = \<const0> ;
  assign RAM_From[159] = \<const0> ;
  assign RAM_From[158] = \<const0> ;
  assign RAM_From[157] = \<const0> ;
  assign RAM_From[156] = \<const0> ;
  assign RAM_From[155] = \<const0> ;
  assign RAM_From[154] = \<const0> ;
  assign RAM_From[153] = \<const0> ;
  assign RAM_From[152] = \<const0> ;
  assign RAM_From[151] = \<const0> ;
  assign RAM_From[150] = \<const0> ;
  assign RAM_From[149] = \<const0> ;
  assign RAM_From[148] = \<const0> ;
  assign RAM_From[147] = \<const0> ;
  assign RAM_From[146] = \<const0> ;
  assign RAM_From[145] = \<const0> ;
  assign RAM_From[144] = \<const0> ;
  assign RAM_From[143] = \<const0> ;
  assign RAM_From[142] = \<const0> ;
  assign RAM_From[141] = \<const0> ;
  assign RAM_From[140] = \<const0> ;
  assign RAM_From[139] = \<const0> ;
  assign RAM_From[138] = \<const0> ;
  assign RAM_From[137] = \<const0> ;
  assign RAM_From[136] = \<const0> ;
  assign RAM_From[135] = \<const0> ;
  assign RAM_From[134] = \<const0> ;
  assign RAM_From[133] = \<const0> ;
  assign RAM_From[132] = \<const0> ;
  assign RAM_From[131] = \<const0> ;
  assign RAM_From[130] = \<const0> ;
  assign RAM_From[129] = \<const0> ;
  assign RAM_From[128] = \<const0> ;
  assign RAM_From[127] = \<const0> ;
  assign RAM_From[126] = \<const0> ;
  assign RAM_From[125] = \<const0> ;
  assign RAM_From[124] = \<const0> ;
  assign RAM_From[123] = \<const0> ;
  assign RAM_From[122] = \<const0> ;
  assign RAM_From[121] = \<const0> ;
  assign RAM_From[120] = \<const0> ;
  assign RAM_From[119] = \<const0> ;
  assign RAM_From[118] = \<const0> ;
  assign RAM_From[117] = \<const0> ;
  assign RAM_From[116] = \<const0> ;
  assign RAM_From[115] = \<const0> ;
  assign RAM_From[114] = \<const0> ;
  assign RAM_From[113] = \<const0> ;
  assign RAM_From[112] = \<const0> ;
  assign RAM_From[111] = \<const0> ;
  assign RAM_From[110] = \<const0> ;
  assign RAM_From[109] = \<const0> ;
  assign RAM_From[108] = \<const0> ;
  assign RAM_From[107] = \<const0> ;
  assign RAM_From[106] = \<const0> ;
  assign RAM_From[105] = \<const0> ;
  assign RAM_From[104] = \<const0> ;
  assign RAM_From[103] = \<const0> ;
  assign RAM_From[102] = \<const0> ;
  assign RAM_From[101] = \<const0> ;
  assign RAM_From[100] = \<const0> ;
  assign RAM_From[99] = \<const0> ;
  assign RAM_From[98] = \<const0> ;
  assign RAM_From[97] = \<const0> ;
  assign RAM_From[96] = \<const0> ;
  assign RAM_From[95] = \<const0> ;
  assign RAM_From[94] = \<const0> ;
  assign RAM_From[93] = \<const0> ;
  assign RAM_From[92] = \<const0> ;
  assign RAM_From[91] = \<const0> ;
  assign RAM_From[90] = \<const0> ;
  assign RAM_From[89] = \<const0> ;
  assign RAM_From[88] = \<const0> ;
  assign RAM_From[87] = \<const0> ;
  assign RAM_From[86] = \<const0> ;
  assign RAM_From[85] = \<const0> ;
  assign RAM_From[84] = \<const0> ;
  assign RAM_From[83] = \<const0> ;
  assign RAM_From[82] = \<const0> ;
  assign RAM_From[81] = \<const0> ;
  assign RAM_From[80] = \<const0> ;
  assign RAM_From[79] = \<const0> ;
  assign RAM_From[78] = \<const0> ;
  assign RAM_From[77] = \<const0> ;
  assign RAM_From[76] = \<const0> ;
  assign RAM_From[75] = \<const0> ;
  assign RAM_From[74] = \<const0> ;
  assign RAM_From[73] = \<const0> ;
  assign RAM_From[72] = \<const0> ;
  assign RAM_From[71] = \<const0> ;
  assign RAM_From[70] = \<const0> ;
  assign RAM_From[69] = \<const0> ;
  assign RAM_From[68] = \<const0> ;
  assign RAM_From[67] = \<const0> ;
  assign RAM_From[66] = \<const0> ;
  assign RAM_From[65] = \<const0> ;
  assign RAM_From[64] = \<const0> ;
  assign RAM_From[63] = \<const0> ;
  assign RAM_From[62] = \<const0> ;
  assign RAM_From[61] = \<const0> ;
  assign RAM_From[60] = \<const0> ;
  assign RAM_From[59] = \<const0> ;
  assign RAM_From[58] = \<const0> ;
  assign RAM_From[57] = \<const0> ;
  assign RAM_From[56] = \<const0> ;
  assign RAM_From[55] = \<const0> ;
  assign RAM_From[54] = \<const0> ;
  assign RAM_From[53] = \<const0> ;
  assign RAM_From[52] = \<const0> ;
  assign RAM_From[51] = \<const0> ;
  assign RAM_From[50] = \<const0> ;
  assign RAM_From[49] = \<const0> ;
  assign RAM_From[48] = \<const0> ;
  assign RAM_From[47] = \<const0> ;
  assign RAM_From[46] = \<const0> ;
  assign RAM_From[45] = \<const0> ;
  assign RAM_From[44] = \<const0> ;
  assign RAM_From[43] = \<const0> ;
  assign RAM_From[42] = \<const0> ;
  assign RAM_From[41] = \<const0> ;
  assign RAM_From[40] = \<const0> ;
  assign RAM_From[39] = \<const0> ;
  assign RAM_From[38] = \<const0> ;
  assign RAM_From[37] = \<const0> ;
  assign RAM_From[36] = \<const0> ;
  assign RAM_From[35] = \<const0> ;
  assign RAM_From[34] = \<const0> ;
  assign RAM_From[33] = \<const0> ;
  assign RAM_From[32] = \<const0> ;
  assign RAM_From[31] = \<const0> ;
  assign RAM_From[30] = \<const0> ;
  assign RAM_From[29] = \<const0> ;
  assign RAM_From[28] = \<const0> ;
  assign RAM_From[27] = \<const0> ;
  assign RAM_From[26] = \<const0> ;
  assign RAM_From[25] = \<const0> ;
  assign RAM_From[24] = \<const0> ;
  assign RAM_From[23] = \<const0> ;
  assign RAM_From[22] = \<const0> ;
  assign RAM_From[21] = \<const0> ;
  assign RAM_From[20] = \<const0> ;
  assign RAM_From[19] = \<const0> ;
  assign RAM_From[18] = \<const0> ;
  assign RAM_From[17] = \<const0> ;
  assign RAM_From[16] = \<const0> ;
  assign RAM_From[15] = \<const0> ;
  assign RAM_From[14] = \<const0> ;
  assign RAM_From[13] = \<const0> ;
  assign RAM_From[12] = \<const0> ;
  assign RAM_From[11] = \<const0> ;
  assign RAM_From[10] = \<const0> ;
  assign RAM_From[9] = \<const0> ;
  assign RAM_From[8] = \<const0> ;
  assign RAM_From[7] = \<const0> ;
  assign RAM_From[6] = \<const0> ;
  assign RAM_From[5] = \<const0> ;
  assign RAM_From[4] = \<const0> ;
  assign RAM_From[3] = \<const0> ;
  assign RAM_From[2] = \<const0> ;
  assign RAM_From[1] = \<const0> ;
  assign RAM_From[0] = \<const0> ;
  assign S0_AXIS_TREADY = \<const0> ;
  assign S10_AXIS_TREADY = \<const0> ;
  assign S11_AXIS_TREADY = \<const0> ;
  assign S12_AXIS_TREADY = \<const0> ;
  assign S13_AXIS_TREADY = \<const0> ;
  assign S14_AXIS_TREADY = \<const0> ;
  assign S15_AXIS_TREADY = \<const0> ;
  assign S1_AXIS_TREADY = \<const0> ;
  assign S2_AXIS_TREADY = \<const0> ;
  assign S3_AXIS_TREADY = \<const0> ;
  assign S4_AXIS_TREADY = \<const0> ;
  assign S5_AXIS_TREADY = \<const0> ;
  assign S6_AXIS_TREADY = \<const0> ;
  assign S7_AXIS_TREADY = \<const0> ;
  assign S8_AXIS_TREADY = \<const0> ;
  assign S9_AXIS_TREADY = \<const0> ;
  assign Trace_DCache_Hit = \<const0> ;
  assign Trace_DCache_Rdy = \<const0> ;
  assign Trace_DCache_Read = \<const0> ;
  assign Trace_DCache_Req = \<const0> ;
  assign Trace_EX_PipeRun = \<const1> ;
  assign Trace_Exception_Kind[0] = \<const0> ;
  assign Trace_Exception_Kind[1] = Trace_Exception_Taken;
  assign Trace_Exception_Kind[2] = \<const0> ;
  assign Trace_Exception_Kind[3] = Trace_Exception_Taken;
  assign Trace_Exception_Kind[4] = \<const0> ;
  assign Trace_ICache_Hit = \<const0> ;
  assign Trace_ICache_Rdy = \<const0> ;
  assign Trace_ICache_Req = \<const0> ;
  assign Trace_Jump_Hit = \<const0> ;
  assign Trace_MB_Halted = MB_Halted;
  assign Trace_MEM_PipeRun = \<const1> ;
  assign Trace_MSR_Reg[0] = \<const0> ;
  assign Trace_MSR_Reg[1] = \<const0> ;
  assign Trace_MSR_Reg[2] = \<const0> ;
  assign Trace_MSR_Reg[3] = \<const0> ;
  assign Trace_MSR_Reg[4] = \<const0> ;
  assign Trace_MSR_Reg[5] = \<const0> ;
  assign Trace_MSR_Reg[6] = \<const0> ;
  assign Trace_MSR_Reg[7] = \<const0> ;
  assign Trace_MSR_Reg[8] = \<const0> ;
  assign Trace_MSR_Reg[9] = \<const0> ;
  assign Trace_MSR_Reg[10] = \<const0> ;
  assign Trace_MSR_Reg[11:13] = \^Trace_MSR_Reg [11:13];
  assign Trace_MSR_Reg[14] = \<const0> ;
  assign Trace_PC[0] = \<const0> ;
  assign Trace_PC[1] = \<const0> ;
  assign Trace_PC[2] = \<const0> ;
  assign Trace_PC[3] = \<const0> ;
  assign Trace_PC[4] = \<const0> ;
  assign Trace_PC[5] = \<const0> ;
  assign Trace_PC[6] = \<const0> ;
  assign Trace_PC[7] = \<const0> ;
  assign Trace_PC[8] = \<const0> ;
  assign Trace_PC[9] = \<const0> ;
  assign Trace_PC[10] = \<const0> ;
  assign Trace_PC[11] = \<const0> ;
  assign Trace_PC[12] = \<const0> ;
  assign Trace_PC[13] = \<const0> ;
  assign Trace_PC[14] = \<const0> ;
  assign Trace_PC[15] = \<const0> ;
  assign Trace_PC[16:29] = \^Trace_PC [16:29];
  assign Trace_PC[30] = \<const0> ;
  assign Trace_PC[31] = \<const0> ;
  assign Trace_PID_Reg[0] = \<const0> ;
  assign Trace_PID_Reg[1] = \<const0> ;
  assign Trace_PID_Reg[2] = \<const0> ;
  assign Trace_PID_Reg[3] = \<const0> ;
  assign Trace_PID_Reg[4] = \<const0> ;
  assign Trace_PID_Reg[5] = \<const0> ;
  assign Trace_PID_Reg[6] = \<const0> ;
  assign Trace_PID_Reg[7] = \<const0> ;
  LUT5 #(
    .INIT(32'h00000040)) 
    Dbg_TDO_INST_0_i_1
       (.I0(MicroBlaze_Core_I_n_370),
        .I1(Dbg_Reg_En[6]),
        .I2(Dbg_Reg_En[7]),
        .I3(Dbg_Reg_En[4]),
        .I4(Dbg_Reg_En[5]),
        .O(\Area.Core/Implement_Debug_Logic.Master_Core.Debug_Area/Status_Reg_En ));
  (* SOFT_HLUTNM = "soft_lutpair104" *) 
  LUT4 #(
    .INIT(16'hFFFE)) 
    Dbg_TDO_INST_0_i_11
       (.I0(Dbg_Reg_En[7]),
        .I1(Dbg_Reg_En[4]),
        .I2(Dbg_Reg_En[0]),
        .I3(Dbg_Reg_En[2]),
        .O(Dbg_TDO_INST_0_i_11_n_0));
  LUT5 #(
    .INIT(32'h00004000)) 
    Dbg_TDO_INST_0_i_14
       (.I0(Dbg_Reg_En[1]),
        .I1(Dbg_Reg_En[6]),
        .I2(Dbg_Reg_En[5]),
        .I3(Dbg_Reg_En[7]),
        .I4(Dbg_TDO_INST_0_i_26_n_0),
        .O(Config_Reg_En));
  (* SOFT_HLUTNM = "soft_lutpair104" *) 
  LUT4 #(
    .INIT(16'hFFFE)) 
    Dbg_TDO_INST_0_i_26
       (.I0(Dbg_Reg_En[3]),
        .I1(Dbg_Reg_En[4]),
        .I2(Dbg_Reg_En[0]),
        .I3(Dbg_Reg_En[2]),
        .O(Dbg_TDO_INST_0_i_26_n_0));
  LUT5 #(
    .INIT(32'h00001000)) 
    Dbg_TDO_INST_0_i_4
       (.I0(Dbg_Reg_En[1]),
        .I1(Dbg_Reg_En[3]),
        .I2(Dbg_Reg_En[5]),
        .I3(Dbg_Reg_En[6]),
        .I4(Dbg_TDO_INST_0_i_11_n_0),
        .O(Data_Read_Reg_En));
  GND GND
       (.G(\<const0> ));
  FDRE \LOCKSTEP_Out_reg[0] 
       (.C(Clk),
        .CE(1'b1),
        .D(MB_Halted),
        .Q(\^LOCKSTEP_Out [3228]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[132] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[0]),
        .Q(\^LOCKSTEP_Out [132]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[133] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[1]),
        .Q(\^LOCKSTEP_Out [133]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[134] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[2]),
        .Q(\^LOCKSTEP_Out [134]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[135] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[3]),
        .Q(\^LOCKSTEP_Out [135]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[136] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[4]),
        .Q(\^LOCKSTEP_Out [136]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[137] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[5]),
        .Q(\^LOCKSTEP_Out [137]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[138] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[6]),
        .Q(\^LOCKSTEP_Out [138]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[139] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[7]),
        .Q(\^LOCKSTEP_Out [139]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[140] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[8]),
        .Q(\^LOCKSTEP_Out [140]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[141] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[9]),
        .Q(\^LOCKSTEP_Out [141]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[142] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[10]),
        .Q(\^LOCKSTEP_Out [142]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[143] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[11]),
        .Q(\^LOCKSTEP_Out [143]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[144] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[12]),
        .Q(\^LOCKSTEP_Out [144]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[145] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[13]),
        .Q(\^LOCKSTEP_Out [145]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[146] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[14]),
        .Q(\^LOCKSTEP_Out [146]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[147] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[15]),
        .Q(\^LOCKSTEP_Out [147]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[148] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[16]),
        .Q(\^LOCKSTEP_Out [148]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[149] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[17]),
        .Q(\^LOCKSTEP_Out [149]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[150] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[18]),
        .Q(\^LOCKSTEP_Out [150]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[151] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[19]),
        .Q(\^LOCKSTEP_Out [151]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[152] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[20]),
        .Q(\^LOCKSTEP_Out [152]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[153] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[21]),
        .Q(\^LOCKSTEP_Out [153]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[154] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[22]),
        .Q(\^LOCKSTEP_Out [154]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[155] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[23]),
        .Q(\^LOCKSTEP_Out [155]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[156] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[24]),
        .Q(\^LOCKSTEP_Out [156]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[157] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[25]),
        .Q(\^LOCKSTEP_Out [157]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[158] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[26]),
        .Q(\^LOCKSTEP_Out [158]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[159] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[27]),
        .Q(\^LOCKSTEP_Out [159]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[160] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[28]),
        .Q(\^LOCKSTEP_Out [160]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[161] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[29]),
        .Q(\^LOCKSTEP_Out [161]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[162] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[30]),
        .Q(\^LOCKSTEP_Out [162]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[163] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[31]),
        .Q(\^LOCKSTEP_Out [163]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[196] 
       (.C(Clk),
        .CE(1'b1),
        .D(D_AS),
        .Q(\^LOCKSTEP_Out [196]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[197] 
       (.C(Clk),
        .CE(1'b1),
        .D(Read_Strobe),
        .Q(\^LOCKSTEP_Out [197]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[198] 
       (.C(Clk),
        .CE(1'b1),
        .D(Write_Strobe),
        .Q(\^LOCKSTEP_Out [198]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[199] 
       (.C(Clk),
        .CE(1'b1),
        .D(Byte_Enable[0]),
        .Q(\^LOCKSTEP_Out [199]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[200] 
       (.C(Clk),
        .CE(1'b1),
        .D(Byte_Enable[1]),
        .Q(\^LOCKSTEP_Out [200]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[201] 
       (.C(Clk),
        .CE(1'b1),
        .D(Byte_Enable[2]),
        .Q(\^LOCKSTEP_Out [201]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[202] 
       (.C(Clk),
        .CE(1'b1),
        .D(Byte_Enable[3]),
        .Q(\^LOCKSTEP_Out [202]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[20] 
       (.C(Clk),
        .CE(1'b1),
        .D(\^Instr_Addr [16]),
        .Q(\^LOCKSTEP_Out [20]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[21] 
       (.C(Clk),
        .CE(1'b1),
        .D(\^Instr_Addr [17]),
        .Q(\^LOCKSTEP_Out [21]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[22] 
       (.C(Clk),
        .CE(1'b1),
        .D(\^Instr_Addr [18]),
        .Q(\^LOCKSTEP_Out [22]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[23] 
       (.C(Clk),
        .CE(1'b1),
        .D(\^Instr_Addr [19]),
        .Q(\^LOCKSTEP_Out [23]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[24] 
       (.C(Clk),
        .CE(1'b1),
        .D(\^Instr_Addr [20]),
        .Q(\^LOCKSTEP_Out [24]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[25] 
       (.C(Clk),
        .CE(1'b1),
        .D(\^Instr_Addr [21]),
        .Q(\^LOCKSTEP_Out [25]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[26] 
       (.C(Clk),
        .CE(1'b1),
        .D(\^Instr_Addr [22]),
        .Q(\^LOCKSTEP_Out [26]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[27] 
       (.C(Clk),
        .CE(1'b1),
        .D(\^Instr_Addr [23]),
        .Q(\^LOCKSTEP_Out [27]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2881] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[0]),
        .Q(\^LOCKSTEP_Out [2881]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2882] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[1]),
        .Q(\^LOCKSTEP_Out [2882]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2883] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[2]),
        .Q(\^LOCKSTEP_Out [2883]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2884] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[3]),
        .Q(\^LOCKSTEP_Out [2884]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2885] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[4]),
        .Q(\^LOCKSTEP_Out [2885]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2886] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[5]),
        .Q(\^LOCKSTEP_Out [2886]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2887] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[6]),
        .Q(\^LOCKSTEP_Out [2887]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2888] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[7]),
        .Q(\^LOCKSTEP_Out [2888]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2889] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[8]),
        .Q(\^LOCKSTEP_Out [2889]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2890] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[9]),
        .Q(\^LOCKSTEP_Out [2890]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2891] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[10]),
        .Q(\^LOCKSTEP_Out [2891]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2892] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[11]),
        .Q(\^LOCKSTEP_Out [2892]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2893] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[12]),
        .Q(\^LOCKSTEP_Out [2893]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2894] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[13]),
        .Q(\^LOCKSTEP_Out [2894]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2895] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[14]),
        .Q(\^LOCKSTEP_Out [2895]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2896] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[15]),
        .Q(\^LOCKSTEP_Out [2896]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2897] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[16]),
        .Q(\^LOCKSTEP_Out [2897]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2898] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[17]),
        .Q(\^LOCKSTEP_Out [2898]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2899] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[18]),
        .Q(\^LOCKSTEP_Out [2899]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[28] 
       (.C(Clk),
        .CE(1'b1),
        .D(\^Instr_Addr [24]),
        .Q(\^LOCKSTEP_Out [28]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2900] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[19]),
        .Q(\^LOCKSTEP_Out [2900]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2901] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[20]),
        .Q(\^LOCKSTEP_Out [2901]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2902] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[21]),
        .Q(\^LOCKSTEP_Out [2902]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2903] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[22]),
        .Q(\^LOCKSTEP_Out [2903]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2904] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[23]),
        .Q(\^LOCKSTEP_Out [2904]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2905] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[24]),
        .Q(\^LOCKSTEP_Out [2905]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2906] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[25]),
        .Q(\^LOCKSTEP_Out [2906]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2907] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[26]),
        .Q(\^LOCKSTEP_Out [2907]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2908] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[27]),
        .Q(\^LOCKSTEP_Out [2908]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2909] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[28]),
        .Q(\^LOCKSTEP_Out [2909]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2910] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[29]),
        .Q(\^LOCKSTEP_Out [2910]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2911] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[30]),
        .Q(\^LOCKSTEP_Out [2911]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2912] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[31]),
        .Q(\^LOCKSTEP_Out [2912]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2913] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Valid_Instr),
        .Q(\^LOCKSTEP_Out [2913]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2930] 
       (.C(Clk),
        .CE(1'b1),
        .D(\^Trace_PC [16]),
        .Q(\^LOCKSTEP_Out [2930]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2931] 
       (.C(Clk),
        .CE(1'b1),
        .D(\^Trace_PC [17]),
        .Q(\^LOCKSTEP_Out [2931]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2932] 
       (.C(Clk),
        .CE(1'b1),
        .D(\^Trace_PC [18]),
        .Q(\^LOCKSTEP_Out [2932]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2933] 
       (.C(Clk),
        .CE(1'b1),
        .D(\^Trace_PC [19]),
        .Q(\^LOCKSTEP_Out [2933]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2934] 
       (.C(Clk),
        .CE(1'b1),
        .D(\^Trace_PC [20]),
        .Q(\^LOCKSTEP_Out [2934]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2935] 
       (.C(Clk),
        .CE(1'b1),
        .D(\^Trace_PC [21]),
        .Q(\^LOCKSTEP_Out [2935]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2936] 
       (.C(Clk),
        .CE(1'b1),
        .D(\^Trace_PC [22]),
        .Q(\^LOCKSTEP_Out [2936]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2937] 
       (.C(Clk),
        .CE(1'b1),
        .D(\^Trace_PC [23]),
        .Q(\^LOCKSTEP_Out [2937]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2938] 
       (.C(Clk),
        .CE(1'b1),
        .D(\^Trace_PC [24]),
        .Q(\^LOCKSTEP_Out [2938]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2939] 
       (.C(Clk),
        .CE(1'b1),
        .D(\^Trace_PC [25]),
        .Q(\^LOCKSTEP_Out [2939]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2940] 
       (.C(Clk),
        .CE(1'b1),
        .D(\^Trace_PC [26]),
        .Q(\^LOCKSTEP_Out [2940]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2941] 
       (.C(Clk),
        .CE(1'b1),
        .D(\^Trace_PC [27]),
        .Q(\^LOCKSTEP_Out [2941]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2942] 
       (.C(Clk),
        .CE(1'b1),
        .D(\^Trace_PC [28]),
        .Q(\^LOCKSTEP_Out [2942]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2943] 
       (.C(Clk),
        .CE(1'b1),
        .D(\^Trace_PC [29]),
        .Q(\^LOCKSTEP_Out [2943]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2978] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Reg_Write),
        .Q(\^LOCKSTEP_Out [2978]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2979] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Reg_Addr[0]),
        .Q(\^LOCKSTEP_Out [2979]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2980] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Reg_Addr[1]),
        .Q(\^LOCKSTEP_Out [2980]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2981] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Reg_Addr[2]),
        .Q(\^LOCKSTEP_Out [2981]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2982] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Reg_Addr[3]),
        .Q(\^LOCKSTEP_Out [2982]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2983] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Reg_Addr[4]),
        .Q(\^LOCKSTEP_Out [2983]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2995] 
       (.C(Clk),
        .CE(1'b1),
        .D(\^Trace_MSR_Reg [11]),
        .Q(\^LOCKSTEP_Out [2995]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2996] 
       (.C(Clk),
        .CE(1'b1),
        .D(\^Trace_MSR_Reg [12]),
        .Q(\^LOCKSTEP_Out [2996]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2997] 
       (.C(Clk),
        .CE(1'b1),
        .D(\^Trace_MSR_Reg [13]),
        .Q(\^LOCKSTEP_Out [2997]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[29] 
       (.C(Clk),
        .CE(1'b1),
        .D(\^Instr_Addr [25]),
        .Q(\^LOCKSTEP_Out [29]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(IFetch),
        .Q(\^LOCKSTEP_Out [2]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3007] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[0]),
        .Q(\^LOCKSTEP_Out [3007]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3008] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[1]),
        .Q(\^LOCKSTEP_Out [3008]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3009] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[2]),
        .Q(\^LOCKSTEP_Out [3009]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3010] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[3]),
        .Q(\^LOCKSTEP_Out [3010]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3011] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[4]),
        .Q(\^LOCKSTEP_Out [3011]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3012] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[5]),
        .Q(\^LOCKSTEP_Out [3012]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3013] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[6]),
        .Q(\^LOCKSTEP_Out [3013]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3014] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[7]),
        .Q(\^LOCKSTEP_Out [3014]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3015] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[8]),
        .Q(\^LOCKSTEP_Out [3015]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3016] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[9]),
        .Q(\^LOCKSTEP_Out [3016]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3017] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[10]),
        .Q(\^LOCKSTEP_Out [3017]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3018] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[11]),
        .Q(\^LOCKSTEP_Out [3018]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3019] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[12]),
        .Q(\^LOCKSTEP_Out [3019]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3020] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[13]),
        .Q(\^LOCKSTEP_Out [3020]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3021] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[14]),
        .Q(\^LOCKSTEP_Out [3021]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3022] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[15]),
        .Q(\^LOCKSTEP_Out [3022]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3023] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[16]),
        .Q(\^LOCKSTEP_Out [3023]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3024] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[17]),
        .Q(\^LOCKSTEP_Out [3024]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3025] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[18]),
        .Q(\^LOCKSTEP_Out [3025]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3026] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[19]),
        .Q(\^LOCKSTEP_Out [3026]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3027] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[20]),
        .Q(\^LOCKSTEP_Out [3027]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3028] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[21]),
        .Q(\^LOCKSTEP_Out [3028]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3029] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[22]),
        .Q(\^LOCKSTEP_Out [3029]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3030] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[23]),
        .Q(\^LOCKSTEP_Out [3030]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3031] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[24]),
        .Q(\^LOCKSTEP_Out [3031]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3032] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[25]),
        .Q(\^LOCKSTEP_Out [3032]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3033] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[26]),
        .Q(\^LOCKSTEP_Out [3033]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3034] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[27]),
        .Q(\^LOCKSTEP_Out [3034]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3035] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[28]),
        .Q(\^LOCKSTEP_Out [3035]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3036] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[29]),
        .Q(\^LOCKSTEP_Out [3036]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3037] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[30]),
        .Q(\^LOCKSTEP_Out [3037]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3038] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[31]),
        .Q(\^LOCKSTEP_Out [3038]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3071] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Exception_Taken),
        .Q(\^LOCKSTEP_Out [3073]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3077] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Jump_Taken),
        .Q(\^LOCKSTEP_Out [3077]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3078] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Delay_Slot),
        .Q(\^LOCKSTEP_Out [3078]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3079] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[0]),
        .Q(\^LOCKSTEP_Out [3079]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3080] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[1]),
        .Q(\^LOCKSTEP_Out [3080]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3081] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[2]),
        .Q(\^LOCKSTEP_Out [3081]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3082] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[3]),
        .Q(\^LOCKSTEP_Out [3082]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3083] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[4]),
        .Q(\^LOCKSTEP_Out [3083]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3084] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[5]),
        .Q(\^LOCKSTEP_Out [3084]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3085] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[6]),
        .Q(\^LOCKSTEP_Out [3085]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3086] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[7]),
        .Q(\^LOCKSTEP_Out [3086]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3087] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[8]),
        .Q(\^LOCKSTEP_Out [3087]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3088] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[9]),
        .Q(\^LOCKSTEP_Out [3088]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3089] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[10]),
        .Q(\^LOCKSTEP_Out [3089]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3090] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[11]),
        .Q(\^LOCKSTEP_Out [3090]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3091] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[12]),
        .Q(\^LOCKSTEP_Out [3091]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3092] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[13]),
        .Q(\^LOCKSTEP_Out [3092]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3093] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[14]),
        .Q(\^LOCKSTEP_Out [3093]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3094] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[15]),
        .Q(\^LOCKSTEP_Out [3094]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3095] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[16]),
        .Q(\^LOCKSTEP_Out [3095]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3096] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[17]),
        .Q(\^LOCKSTEP_Out [3096]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3097] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[18]),
        .Q(\^LOCKSTEP_Out [3097]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3098] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[19]),
        .Q(\^LOCKSTEP_Out [3098]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3099] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[20]),
        .Q(\^LOCKSTEP_Out [3099]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[30] 
       (.C(Clk),
        .CE(1'b1),
        .D(\^Instr_Addr [26]),
        .Q(\^LOCKSTEP_Out [30]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3100] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[21]),
        .Q(\^LOCKSTEP_Out [3100]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3101] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[22]),
        .Q(\^LOCKSTEP_Out [3101]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3102] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[23]),
        .Q(\^LOCKSTEP_Out [3102]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3103] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[24]),
        .Q(\^LOCKSTEP_Out [3103]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3104] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[25]),
        .Q(\^LOCKSTEP_Out [3104]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3105] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[26]),
        .Q(\^LOCKSTEP_Out [3105]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3106] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[27]),
        .Q(\^LOCKSTEP_Out [3106]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3107] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[28]),
        .Q(\^LOCKSTEP_Out [3107]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3108] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[29]),
        .Q(\^LOCKSTEP_Out [3108]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3109] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[30]),
        .Q(\^LOCKSTEP_Out [3109]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3110] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[31]),
        .Q(\^LOCKSTEP_Out [3110]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3143] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[0]),
        .Q(\^LOCKSTEP_Out [3143]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3144] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[1]),
        .Q(\^LOCKSTEP_Out [3144]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3145] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[2]),
        .Q(\^LOCKSTEP_Out [3145]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3146] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[3]),
        .Q(\^LOCKSTEP_Out [3146]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3147] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[4]),
        .Q(\^LOCKSTEP_Out [3147]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3148] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[5]),
        .Q(\^LOCKSTEP_Out [3148]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3149] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[6]),
        .Q(\^LOCKSTEP_Out [3149]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3150] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[7]),
        .Q(\^LOCKSTEP_Out [3150]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3151] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[8]),
        .Q(\^LOCKSTEP_Out [3151]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3152] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[9]),
        .Q(\^LOCKSTEP_Out [3152]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3153] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[10]),
        .Q(\^LOCKSTEP_Out [3153]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3154] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[11]),
        .Q(\^LOCKSTEP_Out [3154]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3155] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[12]),
        .Q(\^LOCKSTEP_Out [3155]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3156] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[13]),
        .Q(\^LOCKSTEP_Out [3156]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3157] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[14]),
        .Q(\^LOCKSTEP_Out [3157]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3158] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[15]),
        .Q(\^LOCKSTEP_Out [3158]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3159] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[16]),
        .Q(\^LOCKSTEP_Out [3159]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3160] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[17]),
        .Q(\^LOCKSTEP_Out [3160]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3161] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[18]),
        .Q(\^LOCKSTEP_Out [3161]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3162] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[19]),
        .Q(\^LOCKSTEP_Out [3162]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3163] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[20]),
        .Q(\^LOCKSTEP_Out [3163]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3164] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[21]),
        .Q(\^LOCKSTEP_Out [3164]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3165] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[22]),
        .Q(\^LOCKSTEP_Out [3165]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3166] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[23]),
        .Q(\^LOCKSTEP_Out [3166]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3167] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[24]),
        .Q(\^LOCKSTEP_Out [3167]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3168] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[25]),
        .Q(\^LOCKSTEP_Out [3168]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3169] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[26]),
        .Q(\^LOCKSTEP_Out [3169]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3170] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[27]),
        .Q(\^LOCKSTEP_Out [3170]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3171] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[28]),
        .Q(\^LOCKSTEP_Out [3171]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3172] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[29]),
        .Q(\^LOCKSTEP_Out [3172]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3173] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[30]),
        .Q(\^LOCKSTEP_Out [3173]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3174] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[31]),
        .Q(\^LOCKSTEP_Out [3174]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[31] 
       (.C(Clk),
        .CE(1'b1),
        .D(\^Instr_Addr [27]),
        .Q(\^LOCKSTEP_Out [31]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3207] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Byte_Enable[0]),
        .Q(\^LOCKSTEP_Out [3207]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3208] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Byte_Enable[1]),
        .Q(\^LOCKSTEP_Out [3208]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3209] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Byte_Enable[2]),
        .Q(\^LOCKSTEP_Out [3209]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3210] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Byte_Enable[3]),
        .Q(\^LOCKSTEP_Out [3210]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3215] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Access),
        .Q(\^LOCKSTEP_Out [3215]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3216] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Read),
        .Q(\^LOCKSTEP_Out [3216]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3217] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write),
        .Q(\^LOCKSTEP_Out [3217]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3225] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_OF_PipeRun),
        .Q(\^LOCKSTEP_Out [3225]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[32] 
       (.C(Clk),
        .CE(1'b1),
        .D(\^Instr_Addr [28]),
        .Q(\^LOCKSTEP_Out [32]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[33] 
       (.C(Clk),
        .CE(1'b1),
        .D(\^Instr_Addr [29]),
        .Q(\^LOCKSTEP_Out [33]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3] 
       (.C(Clk),
        .CE(1'b1),
        .D(I_AS),
        .Q(\^LOCKSTEP_Out [3]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[466] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_AWADDR[31]),
        .Q(\^LOCKSTEP_Out [632]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[467] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_AWADDR[30]),
        .Q(\^LOCKSTEP_Out [633]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[468] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_AWADDR[29]),
        .Q(\^LOCKSTEP_Out [634]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[469] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_AWADDR[28]),
        .Q(\^LOCKSTEP_Out [635]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[470] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_AWADDR[27]),
        .Q(\^LOCKSTEP_Out [636]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[471] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_AWADDR[26]),
        .Q(\^LOCKSTEP_Out [637]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[472] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_AWADDR[25]),
        .Q(\^LOCKSTEP_Out [638]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[473] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_AWADDR[24]),
        .Q(\^LOCKSTEP_Out [639]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[474] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_AWADDR[23]),
        .Q(\^LOCKSTEP_Out [640]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[475] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_AWADDR[22]),
        .Q(\^LOCKSTEP_Out [641]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[476] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_AWADDR[21]),
        .Q(\^LOCKSTEP_Out [642]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[477] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_AWADDR[20]),
        .Q(\^LOCKSTEP_Out [643]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[478] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_AWADDR[19]),
        .Q(\^LOCKSTEP_Out [644]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[479] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_AWADDR[18]),
        .Q(\^LOCKSTEP_Out [645]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[480] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_AWADDR[17]),
        .Q(\^LOCKSTEP_Out [646]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[481] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_AWADDR[16]),
        .Q(\^LOCKSTEP_Out [647]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[482] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_AWADDR[15]),
        .Q(\^LOCKSTEP_Out [648]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[483] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_AWADDR[14]),
        .Q(\^LOCKSTEP_Out [649]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[484] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_AWADDR[13]),
        .Q(\^LOCKSTEP_Out [650]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[485] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_AWADDR[12]),
        .Q(\^LOCKSTEP_Out [651]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[486] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_AWADDR[11]),
        .Q(\^LOCKSTEP_Out [652]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[487] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_AWADDR[10]),
        .Q(\^LOCKSTEP_Out [653]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[488] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_AWADDR[9]),
        .Q(\^LOCKSTEP_Out [654]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[489] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_AWADDR[8]),
        .Q(\^LOCKSTEP_Out [655]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[490] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_AWADDR[7]),
        .Q(\^LOCKSTEP_Out [656]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[491] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_AWADDR[6]),
        .Q(\^LOCKSTEP_Out [657]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[492] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_AWADDR[5]),
        .Q(\^LOCKSTEP_Out [658]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[493] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_AWADDR[4]),
        .Q(\^LOCKSTEP_Out [659]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[494] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_AWADDR[3]),
        .Q(\^LOCKSTEP_Out [660]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[495] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_AWADDR[2]),
        .Q(\^LOCKSTEP_Out [661]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[496] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_AWADDR[1]),
        .Q(\^LOCKSTEP_Out [662]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[497] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_AWADDR[0]),
        .Q(\^LOCKSTEP_Out [663]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[539] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b1),
        .Q(\^LOCKSTEP_Out [542]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[555] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_AWVALID),
        .Q(\^LOCKSTEP_Out [555]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[556] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[31]),
        .Q(\^LOCKSTEP_Out [556]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[557] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[30]),
        .Q(\^LOCKSTEP_Out [557]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[558] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[29]),
        .Q(\^LOCKSTEP_Out [558]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[559] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[28]),
        .Q(\^LOCKSTEP_Out [559]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[560] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[27]),
        .Q(\^LOCKSTEP_Out [560]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[561] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[26]),
        .Q(\^LOCKSTEP_Out [561]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[562] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[25]),
        .Q(\^LOCKSTEP_Out [562]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[563] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[24]),
        .Q(\^LOCKSTEP_Out [563]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[564] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[23]),
        .Q(\^LOCKSTEP_Out [564]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[565] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[22]),
        .Q(\^LOCKSTEP_Out [565]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[566] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[21]),
        .Q(\^LOCKSTEP_Out [566]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[567] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[20]),
        .Q(\^LOCKSTEP_Out [567]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[568] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[19]),
        .Q(\^LOCKSTEP_Out [568]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[569] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[18]),
        .Q(\^LOCKSTEP_Out [569]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[570] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[17]),
        .Q(\^LOCKSTEP_Out [570]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[571] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[16]),
        .Q(\^LOCKSTEP_Out [571]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[572] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[15]),
        .Q(\^LOCKSTEP_Out [572]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[573] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[14]),
        .Q(\^LOCKSTEP_Out [573]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[574] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[13]),
        .Q(\^LOCKSTEP_Out [574]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[575] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[12]),
        .Q(\^LOCKSTEP_Out [575]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[576] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[11]),
        .Q(\^LOCKSTEP_Out [576]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[577] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[10]),
        .Q(\^LOCKSTEP_Out [577]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[578] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[9]),
        .Q(\^LOCKSTEP_Out [578]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[579] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[8]),
        .Q(\^LOCKSTEP_Out [579]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[580] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[7]),
        .Q(\^LOCKSTEP_Out [580]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[581] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[6]),
        .Q(\^LOCKSTEP_Out [581]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[582] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[5]),
        .Q(\^LOCKSTEP_Out [582]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[583] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[4]),
        .Q(\^LOCKSTEP_Out [583]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[584] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[3]),
        .Q(\^LOCKSTEP_Out [584]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[585] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[2]),
        .Q(\^LOCKSTEP_Out [585]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[586] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[1]),
        .Q(\^LOCKSTEP_Out [586]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[587] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[0]),
        .Q(\^LOCKSTEP_Out [587]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[620] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WSTRB[3]),
        .Q(\^LOCKSTEP_Out [620]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[621] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WSTRB[2]),
        .Q(\^LOCKSTEP_Out [621]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[622] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WSTRB[1]),
        .Q(\^LOCKSTEP_Out [622]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[623] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WSTRB[0]),
        .Q(\^LOCKSTEP_Out [623]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[629] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WVALID),
        .Q(\^LOCKSTEP_Out [629]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[68] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[0]),
        .Q(\^LOCKSTEP_Out [68]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[69] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[1]),
        .Q(\^LOCKSTEP_Out [69]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[70] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[2]),
        .Q(\^LOCKSTEP_Out [70]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[71] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[3]),
        .Q(\^LOCKSTEP_Out [71]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[721] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_ARVALID),
        .Q(\^LOCKSTEP_Out [721]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[72] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[4]),
        .Q(\^LOCKSTEP_Out [72]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[73] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[5]),
        .Q(\^LOCKSTEP_Out [73]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[74] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[6]),
        .Q(\^LOCKSTEP_Out [74]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[75] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[7]),
        .Q(\^LOCKSTEP_Out [75]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[76] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[8]),
        .Q(\^LOCKSTEP_Out [76]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[77] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[9]),
        .Q(\^LOCKSTEP_Out [77]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[78] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[10]),
        .Q(\^LOCKSTEP_Out [78]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[79] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[11]),
        .Q(\^LOCKSTEP_Out [79]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[80] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[12]),
        .Q(\^LOCKSTEP_Out [80]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[81] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[13]),
        .Q(\^LOCKSTEP_Out [81]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[82] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[14]),
        .Q(\^LOCKSTEP_Out [82]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[83] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[15]),
        .Q(\^LOCKSTEP_Out [83]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[84] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[16]),
        .Q(\^LOCKSTEP_Out [84]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[85] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[17]),
        .Q(\^LOCKSTEP_Out [85]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[86] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[18]),
        .Q(\^LOCKSTEP_Out [86]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[87] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[19]),
        .Q(\^LOCKSTEP_Out [87]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[88] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[20]),
        .Q(\^LOCKSTEP_Out [88]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[89] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[21]),
        .Q(\^LOCKSTEP_Out [89]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[90] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[22]),
        .Q(\^LOCKSTEP_Out [90]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[91] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[23]),
        .Q(\^LOCKSTEP_Out [91]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[92] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[24]),
        .Q(\^LOCKSTEP_Out [92]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[93] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[25]),
        .Q(\^LOCKSTEP_Out [93]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[94] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[26]),
        .Q(\^LOCKSTEP_Out [94]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[95] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[27]),
        .Q(\^LOCKSTEP_Out [95]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[96] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[28]),
        .Q(\^LOCKSTEP_Out [96]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[97] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[29]),
        .Q(\^LOCKSTEP_Out [97]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[98] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[30]),
        .Q(\^LOCKSTEP_Out [98]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[99] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[31]),
        .Q(\^LOCKSTEP_Out [99]),
        .R(Reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MicroBlaze_Core MicroBlaze_Core_I
       (.Clk(Clk),
        .Config_Reg_En(Config_Reg_En),
        .D({MB_Halted,IFetch,I_AS,\^Instr_Addr [16],\^Instr_Addr [17],\^Instr_Addr [18],\^Instr_Addr [19],\^Instr_Addr [20],\^Instr_Addr [21],\^Instr_Addr [22],\^Instr_Addr [23],\^Instr_Addr [24],\^Instr_Addr [25],\^Instr_Addr [26],\^Instr_Addr [27],\^Instr_Addr [28],\^Instr_Addr [29],Data_Addr[0],Data_Addr[1],Data_Addr[2],Data_Addr[3],Data_Addr[4],Data_Addr[5],Data_Addr[6],Data_Addr[7],Data_Addr[8],Data_Addr[9],Data_Addr[10],Data_Addr[11],Data_Addr[12],Data_Addr[13],Data_Addr[14],Data_Addr[15],Data_Addr[16],Data_Addr[17],Data_Addr[18],Data_Addr[19],Data_Addr[20],Data_Addr[21],Data_Addr[22],Data_Addr[23],Data_Addr[24],Data_Addr[25],Data_Addr[26],Data_Addr[27],Data_Addr[28],Data_Addr[29],Data_Addr[30],Data_Addr[31],Data_Write[0],Data_Write[1],Data_Write[2],Data_Write[3],Data_Write[4],Data_Write[5],Data_Write[6],Data_Write[7],Data_Write[8],Data_Write[9],Data_Write[10],Data_Write[11],Data_Write[12],Data_Write[13],Data_Write[14],Data_Write[15],Data_Write[16],Data_Write[17],Data_Write[18],Data_Write[19],Data_Write[20],Data_Write[21],Data_Write[22],Data_Write[23],Data_Write[24],Data_Write[25],Data_Write[26],Data_Write[27],Data_Write[28],Data_Write[29],Data_Write[30],Data_Write[31],D_AS,Read_Strobe,Write_Strobe,Byte_Enable[0],Byte_Enable[1],Byte_Enable[2],Byte_Enable[3],M_AXI_DP_AWADDR,M_AXI_DP_AWVALID,M_AXI_DP_WDATA,M_AXI_DP_WSTRB,M_AXI_DP_WVALID,M_AXI_DP_ARVALID,Trace_Instruction[0],Trace_Instruction[1],Trace_Instruction[2],Trace_Instruction[3],Trace_Instruction[4],Trace_Instruction[5],Trace_Instruction[6],Trace_Instruction[7],Trace_Instruction[8],Trace_Instruction[9],Trace_Instruction[10],Trace_Instruction[11],Trace_Instruction[12],Trace_Instruction[13],Trace_Instruction[14],Trace_Instruction[15],Trace_Instruction[16],Trace_Instruction[17],Trace_Instruction[18],Trace_Instruction[19],Trace_Instruction[20],Trace_Instruction[21],Trace_Instruction[22],Trace_Instruction[23],Trace_Instruction[24],Trace_Instruction[25],Trace_Instruction[26],Trace_Instruction[27],Trace_Instruction[28],Trace_Instruction[29],Trace_Instruction[30],Trace_Instruction[31],Trace_Valid_Instr,\^Trace_PC [16],\^Trace_PC [17],\^Trace_PC [18],\^Trace_PC [19],\^Trace_PC [20],\^Trace_PC [21],\^Trace_PC [22],\^Trace_PC [23],\^Trace_PC [24],\^Trace_PC [25],\^Trace_PC [26],\^Trace_PC [27],\^Trace_PC [28],\^Trace_PC [29],Trace_Reg_Write,Trace_Reg_Addr[0],Trace_Reg_Addr[1],Trace_Reg_Addr[2],Trace_Reg_Addr[3],Trace_Reg_Addr[4],\^Trace_MSR_Reg [11],\^Trace_MSR_Reg [12],\^Trace_MSR_Reg [13],Trace_New_Reg_Value[0],Trace_New_Reg_Value[1],Trace_New_Reg_Value[2],Trace_New_Reg_Value[3],Trace_New_Reg_Value[4],Trace_New_Reg_Value[5],Trace_New_Reg_Value[6],Trace_New_Reg_Value[7],Trace_New_Reg_Value[8],Trace_New_Reg_Value[9],Trace_New_Reg_Value[10],Trace_New_Reg_Value[11],Trace_New_Reg_Value[12],Trace_New_Reg_Value[13],Trace_New_Reg_Value[14],Trace_New_Reg_Value[15],Trace_New_Reg_Value[16],Trace_New_Reg_Value[17],Trace_New_Reg_Value[18],Trace_New_Reg_Value[19],Trace_New_Reg_Value[20],Trace_New_Reg_Value[21],Trace_New_Reg_Value[22],Trace_New_Reg_Value[23],Trace_New_Reg_Value[24],Trace_New_Reg_Value[25],Trace_New_Reg_Value[26],Trace_New_Reg_Value[27],Trace_New_Reg_Value[28],Trace_New_Reg_Value[29],Trace_New_Reg_Value[30],Trace_New_Reg_Value[31],Trace_Exception_Taken,Trace_Jump_Taken,Trace_Delay_Slot,Trace_Data_Address[0],Trace_Data_Address[1],Trace_Data_Address[2],Trace_Data_Address[3],Trace_Data_Address[4],Trace_Data_Address[5],Trace_Data_Address[6],Trace_Data_Address[7],Trace_Data_Address[8],Trace_Data_Address[9],Trace_Data_Address[10],Trace_Data_Address[11],Trace_Data_Address[12],Trace_Data_Address[13],Trace_Data_Address[14],Trace_Data_Address[15],Trace_Data_Address[16],Trace_Data_Address[17],Trace_Data_Address[18],Trace_Data_Address[19],Trace_Data_Address[20],Trace_Data_Address[21],Trace_Data_Address[22],Trace_Data_Address[23],Trace_Data_Address[24],Trace_Data_Address[25],Trace_Data_Address[26],Trace_Data_Address[27],Trace_Data_Address[28],Trace_Data_Address[29],Trace_Data_Address[30],Trace_Data_Address[31],Trace_Data_Write_Value[0],Trace_Data_Write_Value[1],Trace_Data_Write_Value[2],Trace_Data_Write_Value[3],Trace_Data_Write_Value[4],Trace_Data_Write_Value[5],Trace_Data_Write_Value[6],Trace_Data_Write_Value[7],Trace_Data_Write_Value[8],Trace_Data_Write_Value[9],Trace_Data_Write_Value[10],Trace_Data_Write_Value[11],Trace_Data_Write_Value[12],Trace_Data_Write_Value[13],Trace_Data_Write_Value[14],Trace_Data_Write_Value[15],Trace_Data_Write_Value[16],Trace_Data_Write_Value[17],Trace_Data_Write_Value[18],Trace_Data_Write_Value[19],Trace_Data_Write_Value[20],Trace_Data_Write_Value[21],Trace_Data_Write_Value[22],Trace_Data_Write_Value[23],Trace_Data_Write_Value[24],Trace_Data_Write_Value[25],Trace_Data_Write_Value[26],Trace_Data_Write_Value[27],Trace_Data_Write_Value[28],Trace_Data_Write_Value[29],Trace_Data_Write_Value[30],Trace_Data_Write_Value[31],Trace_Data_Byte_Enable[0],Trace_Data_Byte_Enable[1],Trace_Data_Byte_Enable[2],Trace_Data_Byte_Enable[3],Trace_Data_Access,Trace_Data_Read,Trace_Data_Write,Trace_OF_PipeRun}),
        .DReady(DReady),
        .DWait(DWait),
        .Data_Read(Data_Read),
        .Data_Read_Reg_En(Data_Read_Reg_En),
        .Dbg_Capture(Dbg_Capture),
        .Dbg_Clk(Dbg_Clk),
        .Dbg_Reg_En(Dbg_Reg_En),
        .Dbg_Shift(Dbg_Shift),
        .Dbg_Stop(Dbg_Stop),
        .Dbg_TDI(Dbg_TDI),
        .Dbg_TDO(Dbg_TDO),
        .Dbg_Trig_Ack_In({Dbg_Trig_Ack_In[0],Dbg_Trig_Ack_In[1]}),
        .Dbg_Trig_Ack_Out({\^Dbg_Trig_Ack_Out [0],\^Dbg_Trig_Ack_Out [1]}),
        .Dbg_Trig_In({\^Dbg_Trig_In [0],\^Dbg_Trig_In [1]}),
        .Dbg_Trig_Out({Dbg_Trig_Out[0],Dbg_Trig_Out[1]}),
        .Dbg_Update(Dbg_Update),
        .Debug_Rst(Debug_Rst),
        .Hibernate(Hibernate),
        .IReady(IReady),
        .Instr(Instr),
        .Interrupt(Interrupt),
        .Interrupt_Ack(Interrupt_Ack),
        .Interrupt_Address(Interrupt_Address),
        .LOCKSTEP_Master_Out({\^LOCKSTEP_Master_Out [1],\^LOCKSTEP_Master_Out [3],\^LOCKSTEP_Master_Out [4],\^LOCKSTEP_Master_Out [5],Dbg_Wakeup,\^LOCKSTEP_Master_Out [12],\^LOCKSTEP_Master_Out [15],\^LOCKSTEP_Master_Out [16],\^LOCKSTEP_Master_Out [17],\^LOCKSTEP_Master_Out [18],\^LOCKSTEP_Master_Out [19],\^LOCKSTEP_Master_Out [20],\^LOCKSTEP_Master_Out [21],\^LOCKSTEP_Master_Out [22],\^LOCKSTEP_Master_Out [23],\^LOCKSTEP_Master_Out [24],\^LOCKSTEP_Master_Out [25],\^LOCKSTEP_Master_Out [26],\^LOCKSTEP_Master_Out [27],\^LOCKSTEP_Master_Out [28],\^LOCKSTEP_Master_Out [29],\^LOCKSTEP_Master_Out [30],\^LOCKSTEP_Master_Out [31],\^LOCKSTEP_Master_Out [32],\^LOCKSTEP_Master_Out [33],\^LOCKSTEP_Master_Out [34],\^LOCKSTEP_Master_Out [35],\^LOCKSTEP_Master_Out [36],\^LOCKSTEP_Master_Out [37],\^LOCKSTEP_Master_Out [38],\^LOCKSTEP_Master_Out [39],\^LOCKSTEP_Master_Out [40],\^LOCKSTEP_Master_Out [41],\^LOCKSTEP_Master_Out [42],\^LOCKSTEP_Master_Out [43],\^LOCKSTEP_Master_Out [44],\^LOCKSTEP_Master_Out [45],\^LOCKSTEP_Master_Out [46]}),
        .M_AXI_DP_ARREADY(M_AXI_DP_ARREADY),
        .M_AXI_DP_AWREADY(M_AXI_DP_AWREADY),
        .M_AXI_DP_BVALID(M_AXI_DP_BVALID),
        .M_AXI_DP_RDATA(M_AXI_DP_RDATA),
        .M_AXI_DP_RVALID(M_AXI_DP_RVALID),
        .M_AXI_DP_WREADY(M_AXI_DP_WREADY),
        .Mb_Reset(Mb_Reset),
        .Pause(Pause),
        .Pause_Ack(Pause_Ack),
        .Reset(Reset),
        .Reset_Mode(Reset_Mode),
        .Scan_En(Scan_En),
        .Scan_Reset(Scan_Reset),
        .Scan_Reset_Sel(Scan_Reset_Sel),
        .Sleep(Sleep),
        .Status_Reg_En(\Area.Core/Implement_Debug_Logic.Master_Core.Debug_Area/Status_Reg_En ),
        .Suspend(Suspend),
        .\Use_Serial_Unified_Completion.completion_block_reg (MicroBlaze_Core_I_n_370),
        .\Using_FPGA.Native (\^LOCKSTEP_Master_Out [9]),
        .\Using_FPGA.Native_0 (\^LOCKSTEP_Master_Out [2]),
        .Wakeup(Wakeup));
  VCC VCC
       (.P(\<const1> ));
endmodule

module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MicroBlaze_Area
   (D,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    Pause_Ack,
    Sleep,
    LOCKSTEP_Master_Out,
    Hibernate,
    Suspend,
    Dbg_Trig_In,
    Dbg_Trig_Ack_Out,
    \Use_Serial_Unified_Completion.completion_block_reg ,
    Dbg_TDO,
    Interrupt_Ack,
    Clk,
    sync_reset,
    Dbg_Clk,
    Pause,
    Dbg_Update,
    Dbg_Trig_Ack_In,
    Dbg_Trig_Out,
    Dbg_Stop,
    Dbg_Capture,
    Data_Read_Reg_En,
    Config_Reg_En,
    Dbg_Reg_En,
    Dbg_Shift,
    Status_Reg_En,
    IReady,
    wakeup_i,
    Reset_Mode,
    Scan_En,
    Scan_Reset,
    Scan_Reset_Sel,
    Dbg_TDI,
    Instr,
    M_AXI_DP_RVALID,
    M_AXI_DP_RDATA,
    DReady,
    M_AXI_DP_BVALID,
    M_AXI_DP_WREADY,
    M_AXI_DP_AWREADY,
    M_AXI_DP_ARREADY,
    Interrupt,
    DWait,
    Interrupt_Address,
    Data_Read);
  output [321:0]D;
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  output Pause_Ack;
  output Sleep;
  output [37:0]LOCKSTEP_Master_Out;
  output Hibernate;
  output Suspend;
  output [1:0]Dbg_Trig_In;
  output [1:0]Dbg_Trig_Ack_Out;
  output \Use_Serial_Unified_Completion.completion_block_reg ;
  output Dbg_TDO;
  output [0:1]Interrupt_Ack;
  input Clk;
  input sync_reset;
  input Dbg_Clk;
  input Pause;
  input Dbg_Update;
  input [1:0]Dbg_Trig_Ack_In;
  input [1:0]Dbg_Trig_Out;
  input Dbg_Stop;
  input Dbg_Capture;
  input Data_Read_Reg_En;
  input Config_Reg_En;
  input [0:7]Dbg_Reg_En;
  input Dbg_Shift;
  input Status_Reg_En;
  input IReady;
  input [0:1]wakeup_i;
  input [0:1]Reset_Mode;
  input Scan_En;
  input Scan_Reset;
  input Scan_Reset_Sel;
  input Dbg_TDI;
  input [0:31]Instr;
  input M_AXI_DP_RVALID;
  input [31:0]M_AXI_DP_RDATA;
  input DReady;
  input M_AXI_DP_BVALID;
  input M_AXI_DP_WREADY;
  input M_AXI_DP_AWREADY;
  input M_AXI_DP_ARREADY;
  input Interrupt;
  input DWait;
  input [0:31]Interrupt_Address;
  input [0:31]Data_Read;

  wire Clk;
  wire Config_Reg_En;
  wire [321:0]D;
  wire DReady;
  wire DReady0_out;
  wire DWait;
  wire Data_Flow_I_n_162;
  wire Data_Flow_I_n_163;
  wire Data_Flow_I_n_164;
  wire Data_Flow_I_n_165;
  wire Data_Flow_I_n_166;
  wire Data_Flow_I_n_167;
  wire Data_Flow_I_n_168;
  wire Data_Flow_I_n_169;
  wire Data_Flow_I_n_170;
  wire Data_Flow_I_n_171;
  wire Data_Flow_I_n_172;
  wire Data_Flow_I_n_173;
  wire Data_Flow_I_n_174;
  wire Data_Flow_I_n_175;
  wire Data_Flow_I_n_176;
  wire Data_Flow_I_n_21;
  wire Data_Flow_I_n_22;
  wire Data_Flow_I_n_23;
  wire Data_Flow_I_n_27;
  wire Data_Flow_I_n_28;
  wire Data_Flow_I_n_29;
  wire Data_Flow_I_n_3;
  wire Data_Flow_I_n_30;
  wire Data_Flow_I_n_31;
  wire Data_Flow_I_n_32;
  wire Data_Flow_I_n_33;
  wire Data_Flow_I_n_34;
  wire Data_Flow_I_n_35;
  wire Data_Flow_I_n_36;
  wire Data_Flow_I_n_37;
  wire Data_Flow_I_n_38;
  wire Data_Flow_I_n_39;
  wire Data_Flow_I_n_4;
  wire Data_Flow_I_n_40;
  wire Data_Flow_I_n_41;
  wire Data_Flow_I_n_42;
  wire Data_Flow_I_n_43;
  wire Data_Flow_I_n_44;
  wire Data_Flow_I_n_45;
  wire Data_Flow_I_n_46;
  wire Data_Flow_I_n_47;
  wire Data_Flow_I_n_48;
  wire Data_Flow_I_n_49;
  wire Data_Flow_I_n_50;
  wire Data_Flow_I_n_51;
  wire Data_Flow_I_n_52;
  wire Data_Flow_I_n_53;
  wire Data_Flow_I_n_54;
  wire Data_Flow_I_n_55;
  wire Data_Flow_I_n_56;
  wire Data_Flow_I_n_57;
  wire Data_Flow_I_n_58;
  wire Data_Flow_I_n_59;
  wire Data_Flow_I_n_6;
  wire Data_Flow_I_n_60;
  wire Data_Flow_I_n_61;
  wire [0:31]Data_Read;
  wire [0:15]Data_Read0_out;
  wire Data_Read_Reg_En;
  wire Dbg_Capture;
  wire Dbg_Clk;
  wire [0:7]Dbg_Reg_En;
  wire Dbg_Shift;
  wire Dbg_Stop;
  wire Dbg_TDI;
  wire Dbg_TDO;
  wire [1:0]Dbg_Trig_Ack_In;
  wire [1:0]Dbg_Trig_Ack_Out;
  wire [1:0]Dbg_Trig_In;
  wire [1:0]Dbg_Trig_Out;
  wire Dbg_Update;
  wire Decode_I_n_100;
  wire Decode_I_n_134;
  wire Decode_I_n_138;
  wire Decode_I_n_143;
  wire Decode_I_n_147;
  wire Decode_I_n_150;
  wire Decode_I_n_151;
  wire Decode_I_n_152;
  wire Decode_I_n_153;
  wire Decode_I_n_25;
  wire Decode_I_n_56;
  wire Decode_I_n_57;
  wire Decode_I_n_58;
  wire Decode_I_n_59;
  wire Decode_I_n_69;
  wire Decode_I_n_70;
  wire Decode_I_n_71;
  wire Decode_I_n_72;
  wire Decode_I_n_73;
  wire Decode_I_n_74;
  wire Decode_I_n_75;
  wire Decode_I_n_76;
  wire Decode_I_n_79;
  wire Decode_I_n_80;
  wire Decode_I_n_81;
  wire Decode_I_n_82;
  wire Decode_I_n_83;
  wire Decode_I_n_84;
  wire Decode_I_n_85;
  wire Decode_I_n_86;
  wire Decode_I_n_87;
  wire Decode_I_n_88;
  wire Decode_I_n_89;
  wire Decode_I_n_90;
  wire Decode_I_n_91;
  wire Decode_I_n_92;
  wire Decode_I_n_93;
  wire Decode_I_n_94;
  wire Decode_I_n_95;
  wire Decode_I_n_96;
  wire Decode_I_n_97;
  wire Decode_I_n_98;
  wire Decode_I_n_99;
  wire Hibernate;
  wire IReady;
  wire IReady1_out;
  wire \Implement_Debug_Logic.Master_Core.Debug_Area_n_43 ;
  wire \Implement_Debug_Logic.Master_Core.Debug_Area_n_55 ;
  wire \Implement_Debug_Logic.Master_Core.Debug_Area_n_56 ;
  wire \Implement_Debug_Logic.Master_Core.Debug_Area_n_57 ;
  wire \Implement_Debug_Logic.Master_Core.Debug_Area_n_59 ;
  wire \Implement_Debug_Logic.Master_Core.Debug_Area_n_60 ;
  wire \Implement_Debug_Logic.Master_Core.Debug_Area_n_61 ;
  wire [0:31]Instr;
  wire Interrupt;
  wire [0:1]Interrupt_Ack;
  wire [0:31]Interrupt_Address;
  wire [37:0]LOCKSTEP_Master_Out;
  wire MEM_DAXI_Data_Strobe;
  wire \MSR_Reg_I/MSR_Rst ;
  wire \MSR_Reg_I/New_Value ;
  wire M_AXI_DP_ARREADY;
  wire M_AXI_DP_AWREADY;
  wire M_AXI_DP_BVALID;
  wire [31:0]M_AXI_DP_RDATA;
  wire M_AXI_DP_RVALID;
  wire M_AXI_DP_WREADY;
  wire O;
  wire [0:2]Op1_Low;
  wire \Operand_Select_I/Imm_Reg ;
  wire \Operand_Select_I/OpSelect_Bits[0].Operand_Select_Bit_I/D ;
  wire \Operand_Select_I/OpSelect_Bits[10].Operand_Select_Bit_I/D ;
  wire \Operand_Select_I/OpSelect_Bits[11].Operand_Select_Bit_I/D ;
  wire \Operand_Select_I/OpSelect_Bits[12].Operand_Select_Bit_I/D ;
  wire \Operand_Select_I/OpSelect_Bits[13].Operand_Select_Bit_I/D ;
  wire \Operand_Select_I/OpSelect_Bits[14].Operand_Select_Bit_I/D ;
  wire \Operand_Select_I/OpSelect_Bits[15].Operand_Select_Bit_I/D ;
  wire \Operand_Select_I/OpSelect_Bits[16].Operand_Select_Bit_I/D ;
  wire \Operand_Select_I/OpSelect_Bits[17].Operand_Select_Bit_I/D ;
  wire \Operand_Select_I/OpSelect_Bits[18].Operand_Select_Bit_I/D ;
  wire \Operand_Select_I/OpSelect_Bits[19].Operand_Select_Bit_I/D ;
  wire \Operand_Select_I/OpSelect_Bits[1].Operand_Select_Bit_I/D ;
  wire \Operand_Select_I/OpSelect_Bits[20].Operand_Select_Bit_I/D ;
  wire \Operand_Select_I/OpSelect_Bits[21].Operand_Select_Bit_I/D ;
  wire \Operand_Select_I/OpSelect_Bits[22].Operand_Select_Bit_I/D ;
  wire \Operand_Select_I/OpSelect_Bits[23].Operand_Select_Bit_I/D ;
  wire \Operand_Select_I/OpSelect_Bits[24].Operand_Select_Bit_I/D ;
  wire \Operand_Select_I/OpSelect_Bits[25].Operand_Select_Bit_I/D ;
  wire \Operand_Select_I/OpSelect_Bits[26].Operand_Select_Bit_I/D ;
  wire \Operand_Select_I/OpSelect_Bits[27].Operand_Select_Bit_I/D ;
  wire \Operand_Select_I/OpSelect_Bits[28].Operand_Select_Bit_I/D ;
  wire \Operand_Select_I/OpSelect_Bits[29].Operand_Select_Bit_I/D ;
  wire \Operand_Select_I/OpSelect_Bits[2].Operand_Select_Bit_I/D ;
  wire \Operand_Select_I/OpSelect_Bits[30].Operand_Select_Bit_I/D ;
  wire \Operand_Select_I/OpSelect_Bits[31].Operand_Select_Bit_I/D ;
  wire \Operand_Select_I/OpSelect_Bits[3].Operand_Select_Bit_I/D ;
  wire \Operand_Select_I/OpSelect_Bits[4].Operand_Select_Bit_I/D ;
  wire \Operand_Select_I/OpSelect_Bits[5].Operand_Select_Bit_I/D ;
  wire \Operand_Select_I/OpSelect_Bits[6].Operand_Select_Bit_I/D ;
  wire \Operand_Select_I/OpSelect_Bits[7].Operand_Select_Bit_I/D ;
  wire \Operand_Select_I/OpSelect_Bits[8].Operand_Select_Bit_I/D ;
  wire \Operand_Select_I/OpSelect_Bits[9].Operand_Select_Bit_I/D ;
  wire [16:29]PC_EX_i;
  wire [16:29]PC_OF;
  wire Pause;
  wire Pause_Ack;
  wire \PreFetch_Buffer_I/S ;
  wire [0:1]Reset_Mode;
  wire Scan_En;
  wire Scan_Reset;
  wire Scan_Reset_Sel;
  wire \Shift_Logic_Module_I/Shifted ;
  wire Sleep;
  wire Sleep_Decode;
  wire Status_Reg_En;
  wire Suspend;
  wire Unsigned_Op;
  wire \Use_Serial_Unified_Completion.completion_block_reg ;
  wire \Using_Ext_Databus.DAXI_Interface_I1_n_73 ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire Valid_Instr_i;
  wire [8:31]WB_DAXI_Read_Data;
  wire alu_Carry_32;
  wire [0:1]alu_Op;
  wire branch_with_delay;
  wire [1:3]buffer_Addr;
  wire carry_In;
  wire compare_Instr;
  wire dbg_brki_hit;
  wire dbg_brki_hit0;
  wire dbg_clean_stop;
  wire dbg_pause;
  wire delay_slot_instr;
  wire [30:30]exception_kind;
  wire [16:31]extend_Data_Read;
  wire force_stop_cmd_hold;
  wire force_stop_cmd_hold0;
  wire force_stop_cmd_i;
  wire has_inhibit_EX;
  wire imm_Instr;
  wire [0:15]imm_Value;
  wire [6:7]instr_ex;
  wire isbyte;
  wire isdoublet;
  wire jump;
  wire load_Store_i;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire mem_Strobe;
  wire mem_access;
  wire [28:30]msr_I;
  wire [0:31]mux_Instr_Read;
  wire of_PipeRun;
  wire ok_To_Stop;
  wire opsel1_SPR;
  wire pc_Incr;
  wire pc_Write;
  wire [0:23]raw_Data_Write;
  wire [0:4]reg1_Addr;
  wire reg_Test_Equal;
  wire reg_Test_Equal_N;
  wire reg_Write_I;
  wire reg_Write_dbg;
  wire reg_write_I;
  wire reg_zero;
  wire register_write;
  wire res_Forward1;
  wire res_Forward2;
  wire [0:1]result_Sel;
  wire select_Logic;
  wire sext16;
  wire sext8;
  wire sign_Extend;
  wire sync_reset;
  wire trace_reg_write_novalid;
  wire use_Imm_Reg;
  wire valid_Fetch;
  wire [0:1]wakeup_i;
  wire [0:4]write_Addr;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Byte_Doublet_Handle Byte_Doublet_Handle_I
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[0] (Data_Flow_I_n_4),
        .\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] ({raw_Data_Write,D[248],D[247],D[246],D[245],D[244],D[243],D[242],D[241]}),
        .D({D[274:249],D[237:234]}),
        .DReady(DReady),
        .Data_Read({Data_Read[8],Data_Read[9],Data_Read[10],Data_Read[11],Data_Read[12],Data_Read[13],Data_Read[14],Data_Read[15],Data_Read[24],Data_Read[25],Data_Read[26],Data_Read[27],Data_Read[28],Data_Read[29],Data_Read[30],Data_Read[31]}),
        .EX_Op2(Data_Flow_I_n_3),
        .O(O),
        .Op1_Low({Op1_Low[1],Op1_Low[2]}),
        .Q({WB_DAXI_Read_Data[8],WB_DAXI_Read_Data[9],WB_DAXI_Read_Data[10],WB_DAXI_Read_Data[11],WB_DAXI_Read_Data[12],WB_DAXI_Read_Data[13],WB_DAXI_Read_Data[14],WB_DAXI_Read_Data[15],WB_DAXI_Read_Data[24],WB_DAXI_Read_Data[25],WB_DAXI_Read_Data[26],WB_DAXI_Read_Data[27],WB_DAXI_Read_Data[28],WB_DAXI_Read_Data[29],WB_DAXI_Read_Data[30],WB_DAXI_Read_Data[31]}),
        .\Using_FPGA.Native ({extend_Data_Read[16],extend_Data_Read[17],extend_Data_Read[18],extend_Data_Read[19],extend_Data_Read[20],extend_Data_Read[21],extend_Data_Read[22],extend_Data_Read[23]}),
        .extend_Data_Read({extend_Data_Read[24],extend_Data_Read[25],extend_Data_Read[26],extend_Data_Read[27],extend_Data_Read[28],extend_Data_Read[29],extend_Data_Read[30],extend_Data_Read[31]}),
        .isbyte(isbyte),
        .isdoublet(isdoublet));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Data_Flow Data_Flow_I
       (.\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] ({write_Addr[0],write_Addr[1],write_Addr[2],write_Addr[3],write_Addr[4]}),
        .Address({PC_OF[16],PC_OF[17],PC_OF[18],PC_OF[19],PC_OF[20],PC_OF[21],PC_OF[22],PC_OF[23],PC_OF[24],PC_OF[25],PC_OF[26],PC_OF[27],PC_OF[28],PC_OF[29]}),
        .Buffer_Addr({buffer_Addr[1],buffer_Addr[2],buffer_Addr[3]}),
        .Clk(Clk),
        .D({Data_Flow_I_n_60,Data_Flow_I_n_61}),
        .DI(pc_Incr),
        .D_0(\Operand_Select_I/OpSelect_Bits[31].Operand_Select_Bit_I/D ),
        .D_1(\Operand_Select_I/OpSelect_Bits[30].Operand_Select_Bit_I/D ),
        .D_10(\Operand_Select_I/OpSelect_Bits[21].Operand_Select_Bit_I/D ),
        .D_11(\Operand_Select_I/OpSelect_Bits[20].Operand_Select_Bit_I/D ),
        .D_12(\Operand_Select_I/OpSelect_Bits[19].Operand_Select_Bit_I/D ),
        .D_13(\Operand_Select_I/OpSelect_Bits[18].Operand_Select_Bit_I/D ),
        .D_14(\Operand_Select_I/OpSelect_Bits[17].Operand_Select_Bit_I/D ),
        .D_15(\Operand_Select_I/OpSelect_Bits[16].Operand_Select_Bit_I/D ),
        .D_16(\Operand_Select_I/OpSelect_Bits[15].Operand_Select_Bit_I/D ),
        .D_17(\Operand_Select_I/OpSelect_Bits[14].Operand_Select_Bit_I/D ),
        .D_18(\Operand_Select_I/OpSelect_Bits[13].Operand_Select_Bit_I/D ),
        .D_19(\Operand_Select_I/OpSelect_Bits[12].Operand_Select_Bit_I/D ),
        .D_2(\Operand_Select_I/OpSelect_Bits[29].Operand_Select_Bit_I/D ),
        .D_20(\Operand_Select_I/OpSelect_Bits[11].Operand_Select_Bit_I/D ),
        .D_21(\Operand_Select_I/OpSelect_Bits[10].Operand_Select_Bit_I/D ),
        .D_22(\Operand_Select_I/OpSelect_Bits[9].Operand_Select_Bit_I/D ),
        .D_23(\Operand_Select_I/OpSelect_Bits[8].Operand_Select_Bit_I/D ),
        .D_24(\Operand_Select_I/OpSelect_Bits[7].Operand_Select_Bit_I/D ),
        .D_25(\Operand_Select_I/OpSelect_Bits[6].Operand_Select_Bit_I/D ),
        .D_26(\Operand_Select_I/OpSelect_Bits[5].Operand_Select_Bit_I/D ),
        .D_27(\Operand_Select_I/OpSelect_Bits[4].Operand_Select_Bit_I/D ),
        .D_28(\Operand_Select_I/OpSelect_Bits[3].Operand_Select_Bit_I/D ),
        .D_29(\Operand_Select_I/OpSelect_Bits[2].Operand_Select_Bit_I/D ),
        .D_3(\Operand_Select_I/OpSelect_Bits[28].Operand_Select_Bit_I/D ),
        .D_30(\Operand_Select_I/OpSelect_Bits[1].Operand_Select_Bit_I/D ),
        .D_31(\Operand_Select_I/OpSelect_Bits[0].Operand_Select_Bit_I/D ),
        .D_4(\Operand_Select_I/OpSelect_Bits[27].Operand_Select_Bit_I/D ),
        .D_5(\Operand_Select_I/OpSelect_Bits[26].Operand_Select_Bit_I/D ),
        .D_6(\Operand_Select_I/OpSelect_Bits[25].Operand_Select_Bit_I/D ),
        .D_7(\Operand_Select_I/OpSelect_Bits[24].Operand_Select_Bit_I/D ),
        .D_8(\Operand_Select_I/OpSelect_Bits[23].Operand_Select_Bit_I/D ),
        .D_9(\Operand_Select_I/OpSelect_Bits[22].Operand_Select_Bit_I/D ),
        .Data_Read0_out({Data_Read0_out[0],Data_Read0_out[1],Data_Read0_out[2],Data_Read0_out[3],Data_Read0_out[4],Data_Read0_out[5],Data_Read0_out[6],Data_Read0_out[7],Data_Read0_out[8],Data_Read0_out[9],Data_Read0_out[10],Data_Read0_out[11],Data_Read0_out[12],Data_Read0_out[13],Data_Read0_out[14],Data_Read0_out[15]}),
        .Data_Read_Mask(Decode_I_n_152),
        .Data_Write({raw_Data_Write[0],raw_Data_Write[1],raw_Data_Write[2],raw_Data_Write[3],raw_Data_Write[4],raw_Data_Write[5],raw_Data_Write[6],raw_Data_Write[7],raw_Data_Write[8],raw_Data_Write[9],raw_Data_Write[10],raw_Data_Write[11],raw_Data_Write[12],raw_Data_Write[13],raw_Data_Write[14],raw_Data_Write[15],raw_Data_Write[16],raw_Data_Write[17],raw_Data_Write[18],raw_Data_Write[19],raw_Data_Write[20],raw_Data_Write[21],raw_Data_Write[22],raw_Data_Write[23]}),
        .E(imm_Instr),
        .EX_Op2(Data_Flow_I_n_3),
        .IReady(valid_Fetch),
        .Interrupt_Address(Interrupt_Address),
        .LO(alu_Carry_32),
        .Logic_Oper({Decode_I_n_56,Decode_I_n_57}),
        .MSR_Rst(\MSR_Reg_I/MSR_Rst ),
        .Op1_Low(Op1_Low),
        .Op1_Shift(\MSR_Reg_I/New_Value ),
        .PC_EX_i({PC_EX_i[16],PC_EX_i[17],PC_EX_i[18],PC_EX_i[19],PC_EX_i[20],PC_EX_i[21],PC_EX_i[22],PC_EX_i[23],PC_EX_i[24],PC_EX_i[25],PC_EX_i[26],PC_EX_i[27],PC_EX_i[28],PC_EX_i[29]}),
        .PC_Write(pc_Write),
        .Q({result_Sel[0],result_Sel[1]}),
        .Reg_Test_Equal(reg_Test_Equal),
        .Reg_Write(reg_write_I),
        .Reg_zero(reg_zero),
        .Select_Logic(select_Logic),
        .Shift_Oper(sign_Extend),
        .Shifted(\Shift_Logic_Module_I/Shifted ),
        .\Size_17to32.imm_Reg_reg[0] ({Data_Flow_I_n_162,Data_Flow_I_n_163,Data_Flow_I_n_164,Data_Flow_I_n_165,Data_Flow_I_n_166,Data_Flow_I_n_167,Data_Flow_I_n_168,Data_Flow_I_n_169,Data_Flow_I_n_170,Data_Flow_I_n_171,Data_Flow_I_n_172,Data_Flow_I_n_173,Data_Flow_I_n_174,Data_Flow_I_n_175,Data_Flow_I_n_176,\Operand_Select_I/Imm_Reg }),
        .Unsigned_Op(Unsigned_Op),
        .\Using_FPGA.Native (Data_Flow_I_n_4),
        .\Using_FPGA.Native_0 (Data_Flow_I_n_6),
        .\Using_FPGA.Native_1 (Data_Flow_I_n_21),
        .\Using_FPGA.Native_10 (Decode_I_n_72),
        .\Using_FPGA.Native_11 (Decode_I_n_134),
        .\Using_FPGA.Native_12 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_13 (Decode_I_n_151),
        .\Using_FPGA.Native_14 (Decode_I_n_153),
        .\Using_FPGA.Native_2 (Data_Flow_I_n_22),
        .\Using_FPGA.Native_3 (Data_Flow_I_n_23),
        .\Using_FPGA.Native_4 (Data_Flow_I_n_27),
        .\Using_FPGA.Native_5 ({D[318:275],D[248:241],D[106:75]}),
        .\Using_FPGA.Native_6 (Decode_I_n_70),
        .\Using_FPGA.Native_7 (Decode_I_n_143),
        .\Using_FPGA.Native_8 (Decode_I_n_71),
        .\Using_FPGA.Native_9 (Decode_I_n_150),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (Data_Flow_I_n_28),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_0 (Data_Flow_I_n_29),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_1 (Data_Flow_I_n_30),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_10 (Data_Flow_I_n_39),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_11 (Data_Flow_I_n_40),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_12 (Data_Flow_I_n_41),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_13 (Data_Flow_I_n_42),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_14 (Data_Flow_I_n_43),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_15 (Data_Flow_I_n_44),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_16 (Data_Flow_I_n_45),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_17 (Data_Flow_I_n_46),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_18 (Data_Flow_I_n_47),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_19 (Data_Flow_I_n_48),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_2 (Data_Flow_I_n_31),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_20 (Data_Flow_I_n_49),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_21 (Data_Flow_I_n_50),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_22 (Data_Flow_I_n_51),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_23 (Data_Flow_I_n_52),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_24 (Data_Flow_I_n_53),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_25 (Data_Flow_I_n_54),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_26 (Data_Flow_I_n_55),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_27 (Data_Flow_I_n_56),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_28 (Data_Flow_I_n_57),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_29 (Data_Flow_I_n_58),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_3 (Data_Flow_I_n_32),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_30 (Data_Flow_I_n_59),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_4 (Data_Flow_I_n_33),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_5 (Data_Flow_I_n_34),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_6 (Data_Flow_I_n_35),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_7 (Data_Flow_I_n_36),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_8 (Data_Flow_I_n_37),
        .\Using_FPGA.take_Intr_2nd_Phase_reg_9 (Data_Flow_I_n_38),
        .\Using_dynamic_instr_Address.old_IE_value_reg (LOCKSTEP_Master_Out[36]),
        .alu_Op(alu_Op),
        .carry_In(carry_In),
        .compare_Instr(compare_Instr),
        .\data_rd_reg_reg[29] (\Implement_Debug_Logic.Master_Core.Debug_Area_n_43 ),
        .\data_rd_reg_reg[29]_0 (LOCKSTEP_Master_Out[34]),
        .exception_kind(exception_kind),
        .extend_Data_Read({extend_Data_Read[16],extend_Data_Read[17],extend_Data_Read[18],extend_Data_Read[19],extend_Data_Read[20],extend_Data_Read[21],extend_Data_Read[22],extend_Data_Read[23],extend_Data_Read[24],extend_Data_Read[25],extend_Data_Read[26],extend_Data_Read[27],extend_Data_Read[28],extend_Data_Read[29],extend_Data_Read[30],extend_Data_Read[31]}),
        .imm_Value(imm_Value),
        .jump(jump),
        .lopt(lopt),
        .lopt_1(Op1_Low[2]),
        .lopt_2(lopt_1),
        .lopt_3(lopt_2),
        .lopt_4(lopt_3),
        .lopt_5(lopt_4),
        .lopt_6(lopt_5),
        .lopt_7(lopt_6),
        .lopt_8(lopt_7),
        .msr_I({msr_I[28],msr_I[29],msr_I[30]}),
        .of_PipeRun(of_PipeRun),
        .opsel1_SPR(opsel1_SPR),
        .reg1_Addr(reg1_Addr),
        .reg_Test_Equal_N(reg_Test_Equal_N),
        .register_write(register_write),
        .res_Forward1(res_Forward1),
        .res_Forward2(res_Forward2),
        .sext16(sext16),
        .sext8(sext8),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Decode Decode_I
       (.\Area_Debug_Control.dbg_brki_hit_i_2 (\Implement_Debug_Logic.Master_Core.Debug_Area_n_61 ),
        .\Area_Debug_Control.normal_stop_cmd_hold_reg (Decode_I_n_138),
        .Buffer_Addr({buffer_Addr[1],buffer_Addr[2],buffer_Addr[3]}),
        .Clk(Clk),
        .D({D[320:319],D[240:238],D[130],D[115]}),
        .DI(pc_Incr),
        .DReady(DReady),
        .DReady0_out(DReady0_out),
        .D_0(\Operand_Select_I/OpSelect_Bits[0].Operand_Select_Bit_I/D ),
        .D_1(\Operand_Select_I/OpSelect_Bits[1].Operand_Select_Bit_I/D ),
        .D_10(\Operand_Select_I/OpSelect_Bits[10].Operand_Select_Bit_I/D ),
        .D_11(\Operand_Select_I/OpSelect_Bits[11].Operand_Select_Bit_I/D ),
        .D_12(\Operand_Select_I/OpSelect_Bits[12].Operand_Select_Bit_I/D ),
        .D_13(\Operand_Select_I/OpSelect_Bits[13].Operand_Select_Bit_I/D ),
        .D_14(\Operand_Select_I/OpSelect_Bits[14].Operand_Select_Bit_I/D ),
        .D_15(\Operand_Select_I/OpSelect_Bits[15].Operand_Select_Bit_I/D ),
        .D_16(\Operand_Select_I/OpSelect_Bits[16].Operand_Select_Bit_I/D ),
        .D_17(\Operand_Select_I/OpSelect_Bits[17].Operand_Select_Bit_I/D ),
        .D_18(\Operand_Select_I/OpSelect_Bits[18].Operand_Select_Bit_I/D ),
        .D_19(\Operand_Select_I/OpSelect_Bits[19].Operand_Select_Bit_I/D ),
        .D_2(\Operand_Select_I/OpSelect_Bits[2].Operand_Select_Bit_I/D ),
        .D_20(\Operand_Select_I/OpSelect_Bits[20].Operand_Select_Bit_I/D ),
        .D_21(\Operand_Select_I/OpSelect_Bits[21].Operand_Select_Bit_I/D ),
        .D_22(\Operand_Select_I/OpSelect_Bits[22].Operand_Select_Bit_I/D ),
        .D_23(\Operand_Select_I/OpSelect_Bits[23].Operand_Select_Bit_I/D ),
        .D_24(\Operand_Select_I/OpSelect_Bits[24].Operand_Select_Bit_I/D ),
        .D_25(\Operand_Select_I/OpSelect_Bits[25].Operand_Select_Bit_I/D ),
        .D_26(\Operand_Select_I/OpSelect_Bits[26].Operand_Select_Bit_I/D ),
        .D_27(\Operand_Select_I/OpSelect_Bits[27].Operand_Select_Bit_I/D ),
        .D_28(\Operand_Select_I/OpSelect_Bits[28].Operand_Select_Bit_I/D ),
        .D_29(\Operand_Select_I/OpSelect_Bits[29].Operand_Select_Bit_I/D ),
        .D_3(\Operand_Select_I/OpSelect_Bits[3].Operand_Select_Bit_I/D ),
        .D_30(\Operand_Select_I/OpSelect_Bits[30].Operand_Select_Bit_I/D ),
        .D_31(\Operand_Select_I/OpSelect_Bits[31].Operand_Select_Bit_I/D ),
        .D_4(\Operand_Select_I/OpSelect_Bits[4].Operand_Select_Bit_I/D ),
        .D_5(\Operand_Select_I/OpSelect_Bits[5].Operand_Select_Bit_I/D ),
        .D_6(\Operand_Select_I/OpSelect_Bits[6].Operand_Select_Bit_I/D ),
        .D_7(\Operand_Select_I/OpSelect_Bits[7].Operand_Select_Bit_I/D ),
        .D_8(\Operand_Select_I/OpSelect_Bits[8].Operand_Select_Bit_I/D ),
        .D_9(\Operand_Select_I/OpSelect_Bits[9].Operand_Select_Bit_I/D ),
        .Data_Read_Mask(Decode_I_n_152),
        .E(imm_Instr),
        .Hibernate(Hibernate),
        .IReady(valid_Fetch),
        .IReady1_out(IReady1_out),
        .Interrupt(Interrupt),
        .Interrupt_Ack(Interrupt_Ack),
        .LO(alu_Carry_32),
        .LOCKSTEP_Master_Out(LOCKSTEP_Master_Out[37]),
        .\LOCKSTEP_Out_reg[3] (\Implement_Debug_Logic.Master_Core.Debug_Area_n_59 ),
        .Logic_Oper({Decode_I_n_56,Decode_I_n_57}),
        .MEM_DAXI_Data_Strobe(MEM_DAXI_Data_Strobe),
        .MSR_Rst(\MSR_Reg_I/MSR_Rst ),
        .Op1_Low(Op1_Low),
        .Op1_Shift(\MSR_Reg_I/New_Value ),
        .PC_Write(pc_Write),
        .Pause_Ack(Pause_Ack),
        .Pause_Ack_reg_0(\Implement_Debug_Logic.Master_Core.Debug_Area_n_56 ),
        .Q({Decode_I_n_73,Decode_I_n_74,Decode_I_n_75,Decode_I_n_76,instr_ex[6],instr_ex[7],Decode_I_n_79,Decode_I_n_80,Decode_I_n_81,Decode_I_n_82,Decode_I_n_83,Decode_I_n_84,Decode_I_n_85,Decode_I_n_86,Decode_I_n_87,Decode_I_n_88,Decode_I_n_89,Decode_I_n_90,Decode_I_n_91,Decode_I_n_92,Decode_I_n_93,Decode_I_n_94,Decode_I_n_95,Decode_I_n_96,Decode_I_n_97,Decode_I_n_98,Decode_I_n_99,Decode_I_n_100}),
        .Reg_Test_Equal(reg_Test_Equal),
        .Reg_Write(reg_write_I),
        .Reg_zero(reg_zero),
        .\Result_Sel_reg[0]_0 ({result_Sel[0],result_Sel[1]}),
        .S(\PreFetch_Buffer_I/S ),
        .Select_Logic(select_Logic),
        .Shift_Oper(sign_Extend),
        .Shifted(\Shift_Logic_Module_I/Shifted ),
        .Sleep_Decode(Sleep_Decode),
        .Suspend(Suspend),
        .Unsigned_Op(Unsigned_Op),
        .\Use_Async_Reset.sync_reset_reg (Decode_I_n_150),
        .\Using_Ext_Databus.mem_access_reg (\Using_Ext_Databus.DAXI_Interface_I1_n_73 ),
        .\Using_FPGA.Native (Decode_I_n_71),
        .\Using_FPGA.Native_0 (Decode_I_n_134),
        .\Using_FPGA.Native_1 (Decode_I_n_151),
        .\Using_FPGA.Native_10 (Data_Flow_I_n_32),
        .\Using_FPGA.Native_11 (Data_Flow_I_n_33),
        .\Using_FPGA.Native_12 (Data_Flow_I_n_34),
        .\Using_FPGA.Native_13 (Data_Flow_I_n_35),
        .\Using_FPGA.Native_14 (Data_Flow_I_n_36),
        .\Using_FPGA.Native_15 (Data_Flow_I_n_37),
        .\Using_FPGA.Native_16 (Data_Flow_I_n_38),
        .\Using_FPGA.Native_17 (Data_Flow_I_n_39),
        .\Using_FPGA.Native_18 (Data_Flow_I_n_40),
        .\Using_FPGA.Native_19 (Data_Flow_I_n_41),
        .\Using_FPGA.Native_2 (Decode_I_n_153),
        .\Using_FPGA.Native_20 (Data_Flow_I_n_42),
        .\Using_FPGA.Native_21 (Data_Flow_I_n_43),
        .\Using_FPGA.Native_22 (Data_Flow_I_n_44),
        .\Using_FPGA.Native_23 (Data_Flow_I_n_45),
        .\Using_FPGA.Native_24 (Data_Flow_I_n_46),
        .\Using_FPGA.Native_25 (Data_Flow_I_n_47),
        .\Using_FPGA.Native_26 (Data_Flow_I_n_48),
        .\Using_FPGA.Native_27 (Data_Flow_I_n_49),
        .\Using_FPGA.Native_28 (Data_Flow_I_n_50),
        .\Using_FPGA.Native_29 (Data_Flow_I_n_51),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_30 (Data_Flow_I_n_52),
        .\Using_FPGA.Native_31 (Data_Flow_I_n_53),
        .\Using_FPGA.Native_32 (Data_Flow_I_n_54),
        .\Using_FPGA.Native_33 (Data_Flow_I_n_55),
        .\Using_FPGA.Native_34 (Data_Flow_I_n_56),
        .\Using_FPGA.Native_35 (Data_Flow_I_n_57),
        .\Using_FPGA.Native_36 (Data_Flow_I_n_58),
        .\Using_FPGA.Native_37 (Data_Flow_I_n_59),
        .\Using_FPGA.Native_38 (\Implement_Debug_Logic.Master_Core.Debug_Area_n_60 ),
        .\Using_FPGA.Native_39 (Data_Flow_I_n_6),
        .\Using_FPGA.Native_4 (Data_Flow_I_n_23),
        .\Using_FPGA.Native_40 (Data_Flow_I_n_21),
        .\Using_FPGA.Native_41 (Data_Flow_I_n_22),
        .\Using_FPGA.Native_5 (Data_Flow_I_n_28),
        .\Using_FPGA.Native_6 ({Data_Flow_I_n_162,Data_Flow_I_n_163,Data_Flow_I_n_164,Data_Flow_I_n_165,Data_Flow_I_n_166,Data_Flow_I_n_167,Data_Flow_I_n_168,Data_Flow_I_n_169,Data_Flow_I_n_170,Data_Flow_I_n_171,Data_Flow_I_n_172,Data_Flow_I_n_173,Data_Flow_I_n_174,Data_Flow_I_n_175,Data_Flow_I_n_176,\Operand_Select_I/Imm_Reg }),
        .\Using_FPGA.Native_7 (Data_Flow_I_n_29),
        .\Using_FPGA.Native_8 (Data_Flow_I_n_30),
        .\Using_FPGA.Native_9 (Data_Flow_I_n_31),
        .\Using_FPGA.enable_Interrupts_I_reg_0 (Decode_I_n_72),
        .\Using_FPGA.set_BIP_I_reg_0 (Decode_I_n_70),
        .\Using_dynamic_instr_Address.Interrupt_Ack_reg[1]_0 (LOCKSTEP_Master_Out[36]),
        .\Using_dynamic_instr_Address.old_IE_value_reg_0 (Data_Flow_I_n_27),
        .Valid_Instr_i(Valid_Instr_i),
        .Y(mux_Instr_Read),
        .alu_Op(alu_Op),
        .branch_with_delay(branch_with_delay),
        .break_Pipe_i_reg_0({msr_I[28],msr_I[29],msr_I[30]}),
        .carry_In(carry_In),
        .compare_Instr(compare_Instr),
        .dbg_brki_hit(dbg_brki_hit),
        .dbg_brki_hit0(dbg_brki_hit0),
        .dbg_clean_stop(dbg_clean_stop),
        .dbg_pause(dbg_pause),
        .delay_slot_instr_reg(LOCKSTEP_Master_Out[34]),
        .ex_Valid_reg_0(Decode_I_n_143),
        .ex_Valid_reg_1(\Using_FPGA.Native_0 ),
        .exception_kind(exception_kind),
        .force_stop_cmd_hold(force_stop_cmd_hold),
        .force_stop_cmd_hold0(force_stop_cmd_hold0),
        .force_stop_cmd_i(force_stop_cmd_i),
        .has_inhibit_EX(has_inhibit_EX),
        .imm_Value(imm_Value),
        .inHibit_EX_reg_0(\Implement_Debug_Logic.Master_Core.Debug_Area_n_57 ),
        .\instr_EX_i_reg[25]_0 (Decode_I_n_58),
        .\instr_EX_i_reg[26]_0 (Decode_I_n_59),
        .is_swx_I_reg_0(Decode_I_n_69),
        .is_swx_I_reg_1(mem_Strobe),
        .is_swx_I_reg_2(Decode_I_n_147),
        .isbyte(isbyte),
        .isdoublet(isdoublet),
        .jump(jump),
        .load_Store_i(load_Store_i),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .mem_access(mem_access),
        .missed_IFetch_reg_0(IReady),
        .missed_IFetch_reg_1(LOCKSTEP_Master_Out[35]),
        .nonvalid_IFetch_n_reg_0(Decode_I_n_25),
        .of_PipeRun(of_PipeRun),
        .ok_To_Stop(ok_To_Stop),
        .opsel1_SPR(opsel1_SPR),
        .reg1_Addr(reg1_Addr),
        .reg_Test_Equal_N(reg_Test_Equal_N),
        .reg_Write_I(reg_Write_I),
        .reg_Write_dbg(reg_Write_dbg),
        .res_Forward1(res_Forward1),
        .res_Forward2(res_Forward2),
        .sext16(sext16),
        .sext8(sext8),
        .sync_reset(sync_reset),
        .trace_reg_write_novalid(trace_reg_write_novalid),
        .use_Imm_Reg(use_Imm_Reg),
        .using_Imm_reg_0(\Implement_Debug_Logic.Master_Core.Debug_Area_n_55 ),
        .wakeup_i(wakeup_i),
        .\write_Addr_I_reg[0]_0 ({write_Addr[0],write_Addr[1],write_Addr[2],write_Addr[3],write_Addr[4]}));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Debug \Implement_Debug_Logic.Master_Core.Debug_Area 
       (.Address({PC_OF[16],PC_OF[17],PC_OF[18],PC_OF[19],PC_OF[20],PC_OF[21],PC_OF[22],PC_OF[23],PC_OF[24],PC_OF[25],PC_OF[26],PC_OF[27],PC_OF[28],PC_OF[29]}),
        .\Area_Debug_Control.normal_stop_cmd_hold_reg_0 (\Implement_Debug_Logic.Master_Core.Debug_Area_n_60 ),
        .Clk(Clk),
        .Config_Reg_En(Config_Reg_En),
        .D(D[321]),
        .Data_Read_Reg_En(Data_Read_Reg_En),
        .Dbg_Capture(Dbg_Capture),
        .Dbg_Clk(Dbg_Clk),
        .Dbg_Reg_En(Dbg_Reg_En),
        .Dbg_Shift(Dbg_Shift),
        .Dbg_Stop(Dbg_Stop),
        .Dbg_TDI(Dbg_TDI),
        .Dbg_TDO(Dbg_TDO),
        .Dbg_Trig_Ack_In(Dbg_Trig_Ack_In),
        .Dbg_Trig_Ack_Out(Dbg_Trig_Ack_Out),
        .Dbg_Trig_In(Dbg_Trig_In),
        .Dbg_Trig_Out(Dbg_Trig_Out),
        .Dbg_Update(Dbg_Update),
        .IReady(IReady),
        .IReady1_out(IReady1_out),
        .LOCKSTEP_Master_Out(LOCKSTEP_Master_Out[36:0]),
        .PC_EX_i({PC_EX_i[16],PC_EX_i[17],PC_EX_i[18],PC_EX_i[19],PC_EX_i[20],PC_EX_i[21],PC_EX_i[22],PC_EX_i[23],PC_EX_i[24],PC_EX_i[25],PC_EX_i[26],PC_EX_i[27]}),
        .Pause(Pause),
        .Q(\Implement_Debug_Logic.Master_Core.Debug_Area_n_61 ),
        .Reset_Mode(Reset_Mode),
        .S(\PreFetch_Buffer_I/S ),
        .Scan_En(Scan_En),
        .Scan_Reset(Scan_Reset),
        .Scan_Reset_Sel(Scan_Reset_Sel),
        .\Serial_Dbg_Intf.if_debug_ready_i_reg_0 (\Implement_Debug_Logic.Master_Core.Debug_Area_n_57 ),
        .\Serial_Dbg_Intf.status_reg_reg[22]_0 (mem_Strobe),
        .\Serial_Dbg_Intf.status_reg_reg[25]_0 ({D[320],D[130],D[106:79],D[76:74]}),
        .Sleep(Sleep),
        .Sleep_Decode(Sleep_Decode),
        .Status_Reg_En(Status_Reg_En),
        .\Use_Async_Reset.sync_reset_reg (\Implement_Debug_Logic.Master_Core.Debug_Area_n_55 ),
        .\Use_Async_Reset.sync_reset_reg_0 (\Implement_Debug_Logic.Master_Core.Debug_Area_n_59 ),
        .\Use_Serial_Unified_Completion.completion_block_reg (\Use_Serial_Unified_Completion.completion_block_reg ),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Implement_Debug_Logic.Master_Core.Debug_Area_n_56 ),
        .\Using_FPGA.Native_2 (Decode_I_n_138),
        .Valid_Instr_i(Valid_Instr_i),
        .branch_with_delay(branch_with_delay),
        .\data_rd_reg_reg[28]_0 ({Data_Flow_I_n_60,Data_Flow_I_n_61}),
        .\data_rd_reg_reg[30]_0 (msr_I[30]),
        .dbg_brki_hit(dbg_brki_hit),
        .dbg_brki_hit0(dbg_brki_hit0),
        .dbg_clean_stop(dbg_clean_stop),
        .dbg_pause(dbg_pause),
        .delay_slot_instr_reg_0(delay_slot_instr),
        .delay_slot_instr_reg_1(Decode_I_n_153),
        .force_stop_cmd_hold(force_stop_cmd_hold),
        .force_stop_cmd_hold0(force_stop_cmd_hold0),
        .force_stop_cmd_i(force_stop_cmd_i),
        .has_inhibit_EX(has_inhibit_EX),
        .inHibit_EX_reg(Decode_I_n_25),
        .jump(jump),
        .load_Store_i(load_Store_i),
        .of_PipeRun(of_PipeRun),
        .ok_To_Stop(ok_To_Stop),
        .read_register_MSR_1_reg_0(\Implement_Debug_Logic.Master_Core.Debug_Area_n_43 ),
        .reg_Write_dbg(reg_Write_dbg),
        .register_write(register_write),
        .sync_reset(sync_reset),
        .use_Imm_Reg(use_Imm_Reg),
        .wakeup_i(wakeup_i));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_DAXI_interface \Using_Ext_Databus.DAXI_Interface_I1 
       (.\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31]_0 ({D[304:241],D[237:234]}),
        .Clk(Clk),
        .D(D[233:163]),
        .DReady(DReady),
        .DReady0_out(DReady0_out),
        .DWait(DWait),
        .Data_Read({Data_Read[0],Data_Read[1],Data_Read[2],Data_Read[3],Data_Read[4],Data_Read[5],Data_Read[6],Data_Read[7],Data_Read[8],Data_Read[9],Data_Read[10],Data_Read[11],Data_Read[12],Data_Read[13],Data_Read[14],Data_Read[15],Data_Read[16],Data_Read[17],Data_Read[18],Data_Read[19],Data_Read[20],Data_Read[21],Data_Read[22],Data_Read[23]}),
        .Data_Read0_out({Data_Read0_out[0],Data_Read0_out[1],Data_Read0_out[2],Data_Read0_out[3],Data_Read0_out[4],Data_Read0_out[5],Data_Read0_out[6],Data_Read0_out[7],Data_Read0_out[8],Data_Read0_out[9],Data_Read0_out[10],Data_Read0_out[11],Data_Read0_out[12],Data_Read0_out[13],Data_Read0_out[14],Data_Read0_out[15]}),
        .MEM_DAXI_Data_Strobe(MEM_DAXI_Data_Strobe),
        .M_AXI_DP_ARREADY(M_AXI_DP_ARREADY),
        .M_AXI_DP_AWREADY(M_AXI_DP_AWREADY),
        .M_AXI_DP_BVALID(M_AXI_DP_BVALID),
        .M_AXI_DP_RDATA(M_AXI_DP_RDATA),
        .M_AXI_DP_RVALID(M_AXI_DP_RVALID),
        .M_AXI_DP_WREADY(M_AXI_DP_WREADY),
        .M_AXI_DP_WVALID_i_reg_0(D[238]),
        .O(O),
        .Q({WB_DAXI_Read_Data[8],WB_DAXI_Read_Data[9],WB_DAXI_Read_Data[10],WB_DAXI_Read_Data[11],WB_DAXI_Read_Data[12],WB_DAXI_Read_Data[13],WB_DAXI_Read_Data[14],WB_DAXI_Read_Data[15],WB_DAXI_Read_Data[24],WB_DAXI_Read_Data[25],WB_DAXI_Read_Data[26],WB_DAXI_Read_Data[27],WB_DAXI_Read_Data[28],WB_DAXI_Read_Data[29],WB_DAXI_Read_Data[30],WB_DAXI_Read_Data[31]}),
        .active_access_reg_0(Decode_I_n_147),
        .extend_Data_Read({extend_Data_Read[16],extend_Data_Read[17],extend_Data_Read[18],extend_Data_Read[19],extend_Data_Read[20],extend_Data_Read[21],extend_Data_Read[22],extend_Data_Read[23]}),
        .mem_access(mem_access),
        .mem_access_completed_reg_0(\Using_Ext_Databus.DAXI_Interface_I1_n_73 ),
        .sync_reset(sync_reset));
  FDRE \Using_Ext_Databus.mem_access_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(Decode_I_n_69),
        .Q(mem_access),
        .R(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_instr_mux instr_mux_I1
       (.Instr(Instr),
        .LOCKSTEP_Master_Out({LOCKSTEP_Master_Out[35],LOCKSTEP_Master_Out[31:0]}),
        .Y(mux_Instr_Read));
  FDRE trace_data_access_i_reg
       (.C(Clk),
        .CE(1'b1),
        .D(mem_Strobe),
        .Q(D[3]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[0] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[304]),
        .Q(D[71]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[10] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[294]),
        .Q(D[61]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[11] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[293]),
        .Q(D[60]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[12] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[292]),
        .Q(D[59]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[13] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[291]),
        .Q(D[58]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[14] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[290]),
        .Q(D[57]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[15] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[289]),
        .Q(D[56]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[16] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[288]),
        .Q(D[55]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[17] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[287]),
        .Q(D[54]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[18] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[286]),
        .Q(D[53]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[19] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[285]),
        .Q(D[52]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[303]),
        .Q(D[70]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[20] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[284]),
        .Q(D[51]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[21] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[283]),
        .Q(D[50]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[22] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[282]),
        .Q(D[49]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[23] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[281]),
        .Q(D[48]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[24] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[280]),
        .Q(D[47]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[25] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[279]),
        .Q(D[46]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[26] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[278]),
        .Q(D[45]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[27] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[277]),
        .Q(D[44]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[28] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[276]),
        .Q(D[43]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[29] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[275]),
        .Q(D[42]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[302]),
        .Q(D[69]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[30] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[274]),
        .Q(D[41]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[31] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[273]),
        .Q(D[40]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[3] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[301]),
        .Q(D[68]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[4] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[300]),
        .Q(D[67]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[5] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[299]),
        .Q(D[66]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[6] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[298]),
        .Q(D[65]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[7] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[297]),
        .Q(D[64]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[8] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[296]),
        .Q(D[63]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[9] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[295]),
        .Q(D[62]),
        .R(1'b0));
  FDRE \trace_data_byte_enable_i_reg[0] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[237]),
        .Q(D[7]),
        .R(1'b0));
  FDRE \trace_data_byte_enable_i_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[236]),
        .Q(D[6]),
        .R(1'b0));
  FDRE \trace_data_byte_enable_i_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[235]),
        .Q(D[5]),
        .R(1'b0));
  FDRE \trace_data_byte_enable_i_reg[3] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[234]),
        .Q(D[4]),
        .R(1'b0));
  FDRE trace_data_read_i_reg
       (.C(Clk),
        .CE(1'b1),
        .D(D[239]),
        .Q(D[2]),
        .R(1'b0));
  FDRE trace_data_write_i_reg
       (.C(Clk),
        .CE(1'b1),
        .D(D[238]),
        .Q(D[1]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[0] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[272]),
        .Q(D[39]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[10] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[262]),
        .Q(D[29]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[11] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[261]),
        .Q(D[28]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[12] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[260]),
        .Q(D[27]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[13] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[259]),
        .Q(D[26]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[14] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[258]),
        .Q(D[25]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[15] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[257]),
        .Q(D[24]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[16] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[256]),
        .Q(D[23]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[17] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[255]),
        .Q(D[22]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[18] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[254]),
        .Q(D[21]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[19] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[253]),
        .Q(D[20]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[271]),
        .Q(D[38]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[20] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[252]),
        .Q(D[19]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[21] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[251]),
        .Q(D[18]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[22] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[250]),
        .Q(D[17]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[23] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[249]),
        .Q(D[16]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[24] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[248]),
        .Q(D[15]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[25] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[247]),
        .Q(D[14]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[26] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[246]),
        .Q(D[13]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[27] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[245]),
        .Q(D[12]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[28] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[244]),
        .Q(D[11]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[29] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[243]),
        .Q(D[10]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[270]),
        .Q(D[37]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[30] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[242]),
        .Q(D[9]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[31] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[241]),
        .Q(D[8]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[3] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[269]),
        .Q(D[36]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[4] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[268]),
        .Q(D[35]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[5] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[267]),
        .Q(D[34]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[6] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[266]),
        .Q(D[33]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[7] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[265]),
        .Q(D[32]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[8] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[264]),
        .Q(D[31]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[9] 
       (.C(Clk),
        .CE(1'b1),
        .D(D[263]),
        .Q(D[30]),
        .R(1'b0));
  FDRE trace_delay_slot_i_reg
       (.C(Clk),
        .CE(1'b1),
        .D(delay_slot_instr),
        .Q(D[72]),
        .R(1'b0));
  FDRE trace_exception_taken_i_reg
       (.C(Clk),
        .CE(1'b1),
        .D(exception_kind),
        .Q(D[74]),
        .R(1'b0));
  FDRE \trace_instruction_i_reg[0] 
       (.C(Clk),
        .CE(1'b1),
        .D(Decode_I_n_73),
        .Q(D[162]),
        .R(1'b0));
  FDRE \trace_instruction_i_reg[10] 
       (.C(Clk),
        .CE(1'b1),
        .D(Decode_I_n_81),
        .Q(D[152]),
        .R(1'b0));
  FDRE \trace_instruction_i_reg[11] 
       (.C(Clk),
        .CE(1'b1),
        .D(Decode_I_n_82),
        .Q(D[151]),
        .R(1'b0));
  FDRE \trace_instruction_i_reg[12] 
       (.C(Clk),
        .CE(1'b1),
        .D(Decode_I_n_83),
        .Q(D[150]),
        .R(1'b0));
  FDRE \trace_instruction_i_reg[13] 
       (.C(Clk),
        .CE(1'b1),
        .D(Decode_I_n_84),
        .Q(D[149]),
        .R(1'b0));
  FDRE \trace_instruction_i_reg[14] 
       (.C(Clk),
        .CE(1'b1),
        .D(Decode_I_n_85),
        .Q(D[148]),
        .R(1'b0));
  FDRE \trace_instruction_i_reg[15] 
       (.C(Clk),
        .CE(1'b1),
        .D(Decode_I_n_86),
        .Q(D[147]),
        .R(1'b0));
  FDRE \trace_instruction_i_reg[16] 
       (.C(Clk),
        .CE(1'b1),
        .D(Decode_I_n_87),
        .Q(D[146]),
        .R(1'b0));
  FDRE \trace_instruction_i_reg[17] 
       (.C(Clk),
        .CE(1'b1),
        .D(Decode_I_n_88),
        .Q(D[145]),
        .R(1'b0));
  FDRE \trace_instruction_i_reg[18] 
       (.C(Clk),
        .CE(1'b1),
        .D(Decode_I_n_89),
        .Q(D[144]),
        .R(1'b0));
  FDRE \trace_instruction_i_reg[19] 
       (.C(Clk),
        .CE(1'b1),
        .D(Decode_I_n_90),
        .Q(D[143]),
        .R(1'b0));
  FDRE \trace_instruction_i_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(Decode_I_n_74),
        .Q(D[161]),
        .R(1'b0));
  FDRE \trace_instruction_i_reg[20] 
       (.C(Clk),
        .CE(1'b1),
        .D(Decode_I_n_91),
        .Q(D[142]),
        .R(1'b0));
  FDRE \trace_instruction_i_reg[21] 
       (.C(Clk),
        .CE(1'b1),
        .D(Decode_I_n_92),
        .Q(D[141]),
        .R(1'b0));
  FDRE \trace_instruction_i_reg[22] 
       (.C(Clk),
        .CE(1'b1),
        .D(Decode_I_n_93),
        .Q(D[140]),
        .R(1'b0));
  FDRE \trace_instruction_i_reg[23] 
       (.C(Clk),
        .CE(1'b1),
        .D(Decode_I_n_94),
        .Q(D[139]),
        .R(1'b0));
  FDRE \trace_instruction_i_reg[24] 
       (.C(Clk),
        .CE(1'b1),
        .D(Decode_I_n_95),
        .Q(D[138]),
        .R(1'b0));
  FDRE \trace_instruction_i_reg[25] 
       (.C(Clk),
        .CE(1'b1),
        .D(Decode_I_n_58),
        .Q(D[137]),
        .R(1'b0));
  FDRE \trace_instruction_i_reg[26] 
       (.C(Clk),
        .CE(1'b1),
        .D(Decode_I_n_59),
        .Q(D[136]),
        .R(1'b0));
  FDRE \trace_instruction_i_reg[27] 
       (.C(Clk),
        .CE(1'b1),
        .D(Decode_I_n_96),
        .Q(D[135]),
        .R(1'b0));
  FDRE \trace_instruction_i_reg[28] 
       (.C(Clk),
        .CE(1'b1),
        .D(Decode_I_n_97),
        .Q(D[134]),
        .R(1'b0));
  FDRE \trace_instruction_i_reg[29] 
       (.C(Clk),
        .CE(1'b1),
        .D(Decode_I_n_98),
        .Q(D[133]),
        .R(1'b0));
  FDRE \trace_instruction_i_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(Decode_I_n_75),
        .Q(D[160]),
        .R(1'b0));
  FDRE \trace_instruction_i_reg[30] 
       (.C(Clk),
        .CE(1'b1),
        .D(Decode_I_n_99),
        .Q(D[132]),
        .R(1'b0));
  FDRE \trace_instruction_i_reg[31] 
       (.C(Clk),
        .CE(1'b1),
        .D(Decode_I_n_100),
        .Q(D[131]),
        .R(1'b0));
  FDRE \trace_instruction_i_reg[3] 
       (.C(Clk),
        .CE(1'b1),
        .D(Decode_I_n_76),
        .Q(D[159]),
        .R(1'b0));
  FDRE \trace_instruction_i_reg[4] 
       (.C(Clk),
        .CE(1'b1),
        .D(Decode_I_n_56),
        .Q(D[158]),
        .R(1'b0));
  FDRE \trace_instruction_i_reg[5] 
       (.C(Clk),
        .CE(1'b1),
        .D(Decode_I_n_57),
        .Q(D[157]),
        .R(1'b0));
  FDRE \trace_instruction_i_reg[6] 
       (.C(Clk),
        .CE(1'b1),
        .D(instr_ex[6]),
        .Q(D[156]),
        .R(1'b0));
  FDRE \trace_instruction_i_reg[7] 
       (.C(Clk),
        .CE(1'b1),
        .D(instr_ex[7]),
        .Q(D[155]),
        .R(1'b0));
  FDRE \trace_instruction_i_reg[8] 
       (.C(Clk),
        .CE(1'b1),
        .D(Decode_I_n_79),
        .Q(D[154]),
        .R(1'b0));
  FDRE \trace_instruction_i_reg[9] 
       (.C(Clk),
        .CE(1'b1),
        .D(Decode_I_n_80),
        .Q(D[153]),
        .R(1'b0));
  FDRE trace_jump_taken_i_reg
       (.C(Clk),
        .CE(1'b1),
        .D(jump),
        .Q(D[73]),
        .R(1'b0));
  FDRE \trace_msr_reg_i_reg[11] 
       (.C(Clk),
        .CE(1'b1),
        .D(msr_I[28]),
        .Q(D[109]),
        .R(1'b0));
  FDRE \trace_msr_reg_i_reg[12] 
       (.C(Clk),
        .CE(1'b1),
        .D(msr_I[29]),
        .Q(D[108]),
        .R(1'b0));
  FDRE \trace_msr_reg_i_reg[13] 
       (.C(Clk),
        .CE(1'b1),
        .D(msr_I[30]),
        .Q(D[107]),
        .R(1'b0));
  FDRE trace_of_piperun_i_reg
       (.C(Clk),
        .CE(1'b1),
        .D(of_PipeRun),
        .Q(D[0]),
        .R(1'b0));
  FDRE \trace_pc_i_reg[16] 
       (.C(Clk),
        .CE(1'b1),
        .D(PC_EX_i[16]),
        .Q(D[129]),
        .R(1'b0));
  FDRE \trace_pc_i_reg[17] 
       (.C(Clk),
        .CE(1'b1),
        .D(PC_EX_i[17]),
        .Q(D[128]),
        .R(1'b0));
  FDRE \trace_pc_i_reg[18] 
       (.C(Clk),
        .CE(1'b1),
        .D(PC_EX_i[18]),
        .Q(D[127]),
        .R(1'b0));
  FDRE \trace_pc_i_reg[19] 
       (.C(Clk),
        .CE(1'b1),
        .D(PC_EX_i[19]),
        .Q(D[126]),
        .R(1'b0));
  FDRE \trace_pc_i_reg[20] 
       (.C(Clk),
        .CE(1'b1),
        .D(PC_EX_i[20]),
        .Q(D[125]),
        .R(1'b0));
  FDRE \trace_pc_i_reg[21] 
       (.C(Clk),
        .CE(1'b1),
        .D(PC_EX_i[21]),
        .Q(D[124]),
        .R(1'b0));
  FDRE \trace_pc_i_reg[22] 
       (.C(Clk),
        .CE(1'b1),
        .D(PC_EX_i[22]),
        .Q(D[123]),
        .R(1'b0));
  FDRE \trace_pc_i_reg[23] 
       (.C(Clk),
        .CE(1'b1),
        .D(PC_EX_i[23]),
        .Q(D[122]),
        .R(1'b0));
  FDRE \trace_pc_i_reg[24] 
       (.C(Clk),
        .CE(1'b1),
        .D(PC_EX_i[24]),
        .Q(D[121]),
        .R(1'b0));
  FDRE \trace_pc_i_reg[25] 
       (.C(Clk),
        .CE(1'b1),
        .D(PC_EX_i[25]),
        .Q(D[120]),
        .R(1'b0));
  FDRE \trace_pc_i_reg[26] 
       (.C(Clk),
        .CE(1'b1),
        .D(PC_EX_i[26]),
        .Q(D[119]),
        .R(1'b0));
  FDRE \trace_pc_i_reg[27] 
       (.C(Clk),
        .CE(1'b1),
        .D(PC_EX_i[27]),
        .Q(D[118]),
        .R(1'b0));
  FDRE \trace_pc_i_reg[28] 
       (.C(Clk),
        .CE(1'b1),
        .D(PC_EX_i[28]),
        .Q(D[117]),
        .R(1'b0));
  FDRE \trace_pc_i_reg[29] 
       (.C(Clk),
        .CE(1'b1),
        .D(PC_EX_i[29]),
        .Q(D[116]),
        .R(1'b0));
  FDRE \trace_reg_addr_i_reg[0] 
       (.C(Clk),
        .CE(1'b1),
        .D(write_Addr[0]),
        .Q(D[114]),
        .R(1'b0));
  FDRE \trace_reg_addr_i_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(write_Addr[1]),
        .Q(D[113]),
        .R(1'b0));
  FDRE \trace_reg_addr_i_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(write_Addr[2]),
        .Q(D[112]),
        .R(1'b0));
  FDRE \trace_reg_addr_i_reg[3] 
       (.C(Clk),
        .CE(1'b1),
        .D(write_Addr[3]),
        .Q(D[111]),
        .R(1'b0));
  FDRE \trace_reg_addr_i_reg[4] 
       (.C(Clk),
        .CE(1'b1),
        .D(write_Addr[4]),
        .Q(D[110]),
        .R(1'b0));
  FDRE trace_reg_write_novalid_reg
       (.C(Clk),
        .CE(1'b1),
        .D(reg_Write_I),
        .Q(trace_reg_write_novalid),
        .R(1'b0));
endmodule

module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MicroBlaze_Core
   (D,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    Pause_Ack,
    Sleep,
    LOCKSTEP_Master_Out,
    Hibernate,
    Suspend,
    Dbg_Trig_In,
    Dbg_Trig_Ack_Out,
    \Use_Serial_Unified_Completion.completion_block_reg ,
    Dbg_TDO,
    Interrupt_Ack,
    Clk,
    Dbg_Clk,
    Reset,
    Mb_Reset,
    Debug_Rst,
    Pause,
    Dbg_Update,
    Dbg_Trig_Ack_In,
    Dbg_Trig_Out,
    Dbg_Stop,
    Dbg_Capture,
    Data_Read_Reg_En,
    Config_Reg_En,
    Dbg_Reg_En,
    Dbg_Shift,
    Status_Reg_En,
    IReady,
    Reset_Mode,
    Scan_En,
    Scan_Reset,
    Scan_Reset_Sel,
    Dbg_TDI,
    Instr,
    Wakeup,
    M_AXI_DP_RVALID,
    M_AXI_DP_RDATA,
    DReady,
    M_AXI_DP_BVALID,
    M_AXI_DP_WREADY,
    M_AXI_DP_AWREADY,
    M_AXI_DP_ARREADY,
    Interrupt,
    DWait,
    Interrupt_Address,
    Data_Read);
  output [321:0]D;
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  output Pause_Ack;
  output Sleep;
  output [37:0]LOCKSTEP_Master_Out;
  output Hibernate;
  output Suspend;
  output [1:0]Dbg_Trig_In;
  output [1:0]Dbg_Trig_Ack_Out;
  output \Use_Serial_Unified_Completion.completion_block_reg ;
  output Dbg_TDO;
  output [0:1]Interrupt_Ack;
  input Clk;
  input Dbg_Clk;
  input Reset;
  input Mb_Reset;
  input Debug_Rst;
  input Pause;
  input Dbg_Update;
  input [1:0]Dbg_Trig_Ack_In;
  input [1:0]Dbg_Trig_Out;
  input Dbg_Stop;
  input Dbg_Capture;
  input Data_Read_Reg_En;
  input Config_Reg_En;
  input [0:7]Dbg_Reg_En;
  input Dbg_Shift;
  input Status_Reg_En;
  input IReady;
  input [0:1]Reset_Mode;
  input Scan_En;
  input Scan_Reset;
  input Scan_Reset_Sel;
  input Dbg_TDI;
  input [0:31]Instr;
  input [0:1]Wakeup;
  input M_AXI_DP_RVALID;
  input [31:0]M_AXI_DP_RDATA;
  input DReady;
  input M_AXI_DP_BVALID;
  input M_AXI_DP_WREADY;
  input M_AXI_DP_AWREADY;
  input M_AXI_DP_ARREADY;
  input Interrupt;
  input DWait;
  input [0:31]Interrupt_Address;
  input [0:31]Data_Read;

  wire Clk;
  wire Config_Reg_En;
  wire [321:0]D;
  wire DReady;
  wire DWait;
  wire [0:31]Data_Read;
  wire Data_Read_Reg_En;
  wire Dbg_Capture;
  wire Dbg_Clk;
  wire [0:7]Dbg_Reg_En;
  wire Dbg_Shift;
  wire Dbg_Stop;
  wire Dbg_TDI;
  wire Dbg_TDO;
  wire [1:0]Dbg_Trig_Ack_In;
  wire [1:0]Dbg_Trig_Ack_Out;
  wire [1:0]Dbg_Trig_In;
  wire [1:0]Dbg_Trig_Out;
  wire Dbg_Update;
  wire Debug_Rst;
  wire Hibernate;
  wire IReady;
  wire [0:31]Instr;
  wire Interrupt;
  wire [0:1]Interrupt_Ack;
  wire [0:31]Interrupt_Address;
  wire [37:0]LOCKSTEP_Master_Out;
  wire M_AXI_DP_ARREADY;
  wire M_AXI_DP_AWREADY;
  wire M_AXI_DP_BVALID;
  wire [31:0]M_AXI_DP_RDATA;
  wire M_AXI_DP_RVALID;
  wire M_AXI_DP_WREADY;
  wire Mb_Reset;
  wire Pause;
  wire Pause_Ack;
  wire Reset;
  wire [0:1]Reset_Mode;
  wire Scan_En;
  wire Scan_Reset;
  wire Scan_Reset_Sel;
  wire Sleep;
  wire Status_Reg_En;
  wire Suspend;
  wire Synced;
  wire \Use_Serial_Unified_Completion.completion_block_reg ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [0:1]Wakeup;
  wire reset_temp__0;
  wire sync_reset;
  wire [0:1]wakeup_i;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MicroBlaze_Area \Area.Core 
       (.Clk(Clk),
        .Config_Reg_En(Config_Reg_En),
        .D(D),
        .DReady(DReady),
        .DWait(DWait),
        .Data_Read(Data_Read),
        .Data_Read_Reg_En(Data_Read_Reg_En),
        .Dbg_Capture(Dbg_Capture),
        .Dbg_Clk(Dbg_Clk),
        .Dbg_Reg_En(Dbg_Reg_En),
        .Dbg_Shift(Dbg_Shift),
        .Dbg_Stop(Dbg_Stop),
        .Dbg_TDI(Dbg_TDI),
        .Dbg_TDO(Dbg_TDO),
        .Dbg_Trig_Ack_In(Dbg_Trig_Ack_In),
        .Dbg_Trig_Ack_Out(Dbg_Trig_Ack_Out),
        .Dbg_Trig_In(Dbg_Trig_In),
        .Dbg_Trig_Out(Dbg_Trig_Out),
        .Dbg_Update(Dbg_Update),
        .Hibernate(Hibernate),
        .IReady(IReady),
        .Instr(Instr),
        .Interrupt(Interrupt),
        .Interrupt_Ack(Interrupt_Ack),
        .Interrupt_Address(Interrupt_Address),
        .LOCKSTEP_Master_Out(LOCKSTEP_Master_Out),
        .M_AXI_DP_ARREADY(M_AXI_DP_ARREADY),
        .M_AXI_DP_AWREADY(M_AXI_DP_AWREADY),
        .M_AXI_DP_BVALID(M_AXI_DP_BVALID),
        .M_AXI_DP_RDATA(M_AXI_DP_RDATA),
        .M_AXI_DP_RVALID(M_AXI_DP_RVALID),
        .M_AXI_DP_WREADY(M_AXI_DP_WREADY),
        .Pause(Pause),
        .Pause_Ack(Pause_Ack),
        .Reset_Mode(Reset_Mode),
        .Scan_En(Scan_En),
        .Scan_Reset(Scan_Reset),
        .Scan_Reset_Sel(Scan_Reset_Sel),
        .Sleep(Sleep),
        .Status_Reg_En(Status_Reg_En),
        .Suspend(Suspend),
        .\Use_Serial_Unified_Completion.completion_block_reg (\Use_Serial_Unified_Completion.completion_block_reg ),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .sync_reset(sync_reset),
        .wakeup_i(wakeup_i));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_mb_sync_bit Reset_DFF
       (.Clk(Clk),
        .out(Synced),
        .reset_temp(reset_temp__0));
  FDRE #(
    .INIT(1'b1)) 
    \Use_Async_Reset.sync_reset_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(Synced),
        .Q(sync_reset),
        .R(1'b0));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_mb_sync_bit_1 \Using_Async_Wakeup_0.Wakeup_DFF 
       (.Clk(Clk),
        .SR(sync_reset),
        .Wakeup(Wakeup[0]),
        .out(wakeup_i[0]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_mb_sync_bit_2 \Using_Async_Wakeup_1.Wakeup_DFF 
       (.Clk(Clk),
        .SR(sync_reset),
        .Wakeup(Wakeup[1]),
        .out(wakeup_i[1]));
  LUT3 #(
    .INIT(8'hFE)) 
    reset_temp
       (.I0(Reset),
        .I1(Mb_Reset),
        .I2(Debug_Rst),
        .O(reset_temp__0));
endmodule

module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Operand_Select
   (Op1_Logic,
    EX_Op2,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Op2,
    Shifted,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 ,
    \Using_FPGA.Native_5 ,
    \Using_FPGA.Native_6 ,
    op2_C,
    \Using_FPGA.Native_7 ,
    \Using_FPGA.Native_8 ,
    \Using_FPGA.Native_9 ,
    \Using_FPGA.Native_10 ,
    \Using_FPGA.Native_11 ,
    \Using_FPGA.Native_12 ,
    \Using_FPGA.Native_13 ,
    \Using_FPGA.Native_14 ,
    \Using_FPGA.Native_15 ,
    \Using_FPGA.Native_16 ,
    \Using_FPGA.Native_17 ,
    \Using_FPGA.Native_18 ,
    \Using_FPGA.Native_19 ,
    \Using_FPGA.Native_20 ,
    \Using_FPGA.Native_21 ,
    \Using_FPGA.Native_22 ,
    \Using_FPGA.Native_23 ,
    \Using_FPGA.Native_24 ,
    \Using_FPGA.Native_25 ,
    \Using_FPGA.Native_26 ,
    \Using_FPGA.Native_27 ,
    \Using_FPGA.Native_28 ,
    \Using_FPGA.Native_29 ,
    \Using_FPGA.Native_30 ,
    \Using_FPGA.Native_31 ,
    \Using_FPGA.Native_32 ,
    \Using_FPGA.Native_33 ,
    \Using_FPGA.Native_34 ,
    \Using_FPGA.Native_35 ,
    \Using_FPGA.Native_36 ,
    \Using_FPGA.Native_37 ,
    \Using_FPGA.Native_38 ,
    \Using_FPGA.Native_39 ,
    \Using_FPGA.Native_40 ,
    \Using_FPGA.Native_41 ,
    \Using_FPGA.Native_42 ,
    \Using_FPGA.Native_43 ,
    \Using_FPGA.Native_44 ,
    \Using_FPGA.Native_45 ,
    \Using_FPGA.Native_46 ,
    \Using_FPGA.Native_47 ,
    \Using_FPGA.Native_48 ,
    \Using_FPGA.Native_49 ,
    \Using_FPGA.Native_50 ,
    \Using_FPGA.Native_51 ,
    \Using_FPGA.Native_52 ,
    \Using_FPGA.Native_53 ,
    \Using_FPGA.Native_54 ,
    \Using_FPGA.Native_55 ,
    \Using_FPGA.Native_56 ,
    \Using_FPGA.Native_57 ,
    \Using_FPGA.Native_58 ,
    \Using_FPGA.Native_59 ,
    \Using_FPGA.Native_60 ,
    S,
    Sext,
    \Using_FPGA.Native_61 ,
    Compare_Instr_reg,
    \Using_FPGA.Native_62 ,
    \Size_17to32.imm_Reg_reg[0]_0 ,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    opsel1_SPR,
    sync_reset,
    of_PipeRun,
    Clk,
    D_0,
    I3,
    D_1,
    I3_0,
    D_2,
    I3_1,
    D_3,
    I3_2,
    D_4,
    I3_3,
    D_5,
    I3_4,
    D_6,
    I3_5,
    D_7,
    Address,
    D_8,
    D_9,
    D_10,
    D_11,
    D_12,
    D_13,
    D_14,
    D_15,
    D_16,
    D_17,
    D_18,
    D_19,
    D_20,
    D_21,
    D_22,
    D_23,
    D_24,
    D_25,
    D_26,
    D_27,
    D_28,
    D_29,
    D_30,
    I3_6,
    D_31,
    compare_Instr,
    \Using_FPGA.Native_63 ,
    sext16,
    sext8,
    E,
    imm_Value);
  output Op1_Logic;
  output EX_Op2;
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  output \Using_FPGA.Native_1 ;
  output \Using_FPGA.Native_2 ;
  output Op2;
  output Shifted;
  output \Using_FPGA.Native_3 ;
  output \Using_FPGA.Native_4 ;
  output \Using_FPGA.Native_5 ;
  output \Using_FPGA.Native_6 ;
  output [27:0]op2_C;
  output \Using_FPGA.Native_7 ;
  output \Using_FPGA.Native_8 ;
  output \Using_FPGA.Native_9 ;
  output \Using_FPGA.Native_10 ;
  output \Using_FPGA.Native_11 ;
  output \Using_FPGA.Native_12 ;
  output \Using_FPGA.Native_13 ;
  output \Using_FPGA.Native_14 ;
  output \Using_FPGA.Native_15 ;
  output \Using_FPGA.Native_16 ;
  output \Using_FPGA.Native_17 ;
  output \Using_FPGA.Native_18 ;
  output \Using_FPGA.Native_19 ;
  output \Using_FPGA.Native_20 ;
  output \Using_FPGA.Native_21 ;
  output \Using_FPGA.Native_22 ;
  output \Using_FPGA.Native_23 ;
  output \Using_FPGA.Native_24 ;
  output \Using_FPGA.Native_25 ;
  output \Using_FPGA.Native_26 ;
  output \Using_FPGA.Native_27 ;
  output \Using_FPGA.Native_28 ;
  output \Using_FPGA.Native_29 ;
  output \Using_FPGA.Native_30 ;
  output \Using_FPGA.Native_31 ;
  output \Using_FPGA.Native_32 ;
  output \Using_FPGA.Native_33 ;
  output \Using_FPGA.Native_34 ;
  output \Using_FPGA.Native_35 ;
  output \Using_FPGA.Native_36 ;
  output \Using_FPGA.Native_37 ;
  output \Using_FPGA.Native_38 ;
  output \Using_FPGA.Native_39 ;
  output \Using_FPGA.Native_40 ;
  output \Using_FPGA.Native_41 ;
  output \Using_FPGA.Native_42 ;
  output \Using_FPGA.Native_43 ;
  output \Using_FPGA.Native_44 ;
  output \Using_FPGA.Native_45 ;
  output \Using_FPGA.Native_46 ;
  output \Using_FPGA.Native_47 ;
  output \Using_FPGA.Native_48 ;
  output \Using_FPGA.Native_49 ;
  output \Using_FPGA.Native_50 ;
  output \Using_FPGA.Native_51 ;
  output \Using_FPGA.Native_52 ;
  output \Using_FPGA.Native_53 ;
  output \Using_FPGA.Native_54 ;
  output \Using_FPGA.Native_55 ;
  output \Using_FPGA.Native_56 ;
  output \Using_FPGA.Native_57 ;
  output \Using_FPGA.Native_58 ;
  output \Using_FPGA.Native_59 ;
  output \Using_FPGA.Native_60 ;
  output S;
  output Sext;
  output \Using_FPGA.Native_61 ;
  output Compare_Instr_reg;
  output \Using_FPGA.Native_62 ;
  output [15:0]\Size_17to32.imm_Reg_reg[0]_0 ;
  input [0:31]Reg1_Data;
  input [0:31]ex_Result;
  input res_Forward1;
  input opsel1_SPR;
  input sync_reset;
  input of_PipeRun;
  input Clk;
  input D_0;
  input I3;
  input D_1;
  input I3_0;
  input D_2;
  input I3_1;
  input D_3;
  input I3_2;
  input D_4;
  input I3_3;
  input D_5;
  input I3_4;
  input D_6;
  input I3_5;
  input D_7;
  input [7:0]Address;
  input D_8;
  input D_9;
  input D_10;
  input D_11;
  input D_12;
  input D_13;
  input D_14;
  input D_15;
  input D_16;
  input D_17;
  input D_18;
  input D_19;
  input D_20;
  input D_21;
  input D_22;
  input D_23;
  input D_24;
  input D_25;
  input D_26;
  input D_27;
  input D_28;
  input D_29;
  input D_30;
  input I3_6;
  input D_31;
  input compare_Instr;
  input \Using_FPGA.Native_63 ;
  input sext16;
  input sext8;
  input [0:0]E;
  input [0:15]imm_Value;

  wire [7:0]Address;
  wire Clk;
  wire Compare_Instr_reg;
  wire D_0;
  wire D_1;
  wire D_10;
  wire D_11;
  wire D_12;
  wire D_13;
  wire D_14;
  wire D_15;
  wire D_16;
  wire D_17;
  wire D_18;
  wire D_19;
  wire D_2;
  wire D_20;
  wire D_21;
  wire D_22;
  wire D_23;
  wire D_24;
  wire D_25;
  wire D_26;
  wire D_27;
  wire D_28;
  wire D_29;
  wire D_3;
  wire D_30;
  wire D_31;
  wire D_4;
  wire D_5;
  wire D_6;
  wire D_7;
  wire D_8;
  wire D_9;
  wire [0:0]E;
  wire EX_Op2;
  wire I3;
  wire I3_0;
  wire I3_1;
  wire I3_2;
  wire I3_3;
  wire I3_4;
  wire I3_5;
  wire I3_6;
  wire Op1_Logic;
  wire Op2;
  wire \OpSelect_Bits[31].Operand_Select_Bit_I_n_1 ;
  wire [0:31]Reg1_Data;
  wire S;
  wire Sext;
  wire Shifted;
  wire [15:0]\Size_17to32.imm_Reg_reg[0]_0 ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_10 ;
  wire \Using_FPGA.Native_11 ;
  wire \Using_FPGA.Native_12 ;
  wire \Using_FPGA.Native_13 ;
  wire \Using_FPGA.Native_14 ;
  wire \Using_FPGA.Native_15 ;
  wire \Using_FPGA.Native_16 ;
  wire \Using_FPGA.Native_17 ;
  wire \Using_FPGA.Native_18 ;
  wire \Using_FPGA.Native_19 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_20 ;
  wire \Using_FPGA.Native_21 ;
  wire \Using_FPGA.Native_22 ;
  wire \Using_FPGA.Native_23 ;
  wire \Using_FPGA.Native_24 ;
  wire \Using_FPGA.Native_25 ;
  wire \Using_FPGA.Native_26 ;
  wire \Using_FPGA.Native_27 ;
  wire \Using_FPGA.Native_28 ;
  wire \Using_FPGA.Native_29 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_30 ;
  wire \Using_FPGA.Native_31 ;
  wire \Using_FPGA.Native_32 ;
  wire \Using_FPGA.Native_33 ;
  wire \Using_FPGA.Native_34 ;
  wire \Using_FPGA.Native_35 ;
  wire \Using_FPGA.Native_36 ;
  wire \Using_FPGA.Native_37 ;
  wire \Using_FPGA.Native_38 ;
  wire \Using_FPGA.Native_39 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_40 ;
  wire \Using_FPGA.Native_41 ;
  wire \Using_FPGA.Native_42 ;
  wire \Using_FPGA.Native_43 ;
  wire \Using_FPGA.Native_44 ;
  wire \Using_FPGA.Native_45 ;
  wire \Using_FPGA.Native_46 ;
  wire \Using_FPGA.Native_47 ;
  wire \Using_FPGA.Native_48 ;
  wire \Using_FPGA.Native_49 ;
  wire \Using_FPGA.Native_5 ;
  wire \Using_FPGA.Native_50 ;
  wire \Using_FPGA.Native_51 ;
  wire \Using_FPGA.Native_52 ;
  wire \Using_FPGA.Native_53 ;
  wire \Using_FPGA.Native_54 ;
  wire \Using_FPGA.Native_55 ;
  wire \Using_FPGA.Native_56 ;
  wire \Using_FPGA.Native_57 ;
  wire \Using_FPGA.Native_58 ;
  wire \Using_FPGA.Native_59 ;
  wire \Using_FPGA.Native_6 ;
  wire \Using_FPGA.Native_60 ;
  wire \Using_FPGA.Native_61 ;
  wire \Using_FPGA.Native_62 ;
  wire \Using_FPGA.Native_63 ;
  wire \Using_FPGA.Native_7 ;
  wire \Using_FPGA.Native_8 ;
  wire \Using_FPGA.Native_9 ;
  wire compare_Instr;
  wire [0:31]ex_Result;
  wire [0:15]imm_Value;
  wire of_PipeRun;
  wire [27:0]op2_C;
  wire opsel1_SPR;
  wire res_Forward1;
  wire sext16;
  wire sext8;
  wire sync_reset;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Operand_Select_Bit__parameterized12 \OpSelect_Bits[0].Operand_Select_Bit_I 
       (.Clk(Clk),
        .Compare_Instr_reg(Compare_Instr_reg),
        .D_31(D_31),
        .I3_6(I3_6),
        .Reg1_Data(Reg1_Data[0]),
        .S(S),
        .\Using_FPGA.Native (\Using_FPGA.Native_59 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_60 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_63 ),
        .compare_Instr(compare_Instr),
        .ex_Result(ex_Result[0]),
        .of_PipeRun(of_PipeRun),
        .op2_C(op2_C[27]),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Operand_Select_Bit__parameterized10 \OpSelect_Bits[10].Operand_Select_Bit_I 
       (.Clk(Clk),
        .D_21(D_21),
        .Reg1_Data(Reg1_Data[10]),
        .\Using_FPGA.Native (\Using_FPGA.Native_39 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_40 ),
        .ex_Result(ex_Result[10]),
        .of_PipeRun(of_PipeRun),
        .op2_C(op2_C[17]),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Operand_Select_Bit__parameterized10_570 \OpSelect_Bits[11].Operand_Select_Bit_I 
       (.Clk(Clk),
        .D_20(D_20),
        .Reg1_Data(Reg1_Data[11]),
        .\Using_FPGA.Native (\Using_FPGA.Native_37 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_38 ),
        .ex_Result(ex_Result[11]),
        .of_PipeRun(of_PipeRun),
        .op2_C(op2_C[16]),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Operand_Select_Bit__parameterized10_571 \OpSelect_Bits[12].Operand_Select_Bit_I 
       (.Clk(Clk),
        .D_19(D_19),
        .Reg1_Data(Reg1_Data[12]),
        .\Using_FPGA.Native (\Using_FPGA.Native_35 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_36 ),
        .ex_Result(ex_Result[12]),
        .of_PipeRun(of_PipeRun),
        .op2_C(op2_C[15]),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Operand_Select_Bit__parameterized10_572 \OpSelect_Bits[13].Operand_Select_Bit_I 
       (.Clk(Clk),
        .D_18(D_18),
        .Reg1_Data(Reg1_Data[13]),
        .\Using_FPGA.Native (\Using_FPGA.Native_33 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_34 ),
        .ex_Result(ex_Result[13]),
        .of_PipeRun(of_PipeRun),
        .op2_C(op2_C[14]),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Operand_Select_Bit__parameterized10_573 \OpSelect_Bits[14].Operand_Select_Bit_I 
       (.Clk(Clk),
        .D_17(D_17),
        .Reg1_Data(Reg1_Data[14]),
        .\Using_FPGA.Native (\Using_FPGA.Native_31 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_32 ),
        .ex_Result(ex_Result[14]),
        .of_PipeRun(of_PipeRun),
        .op2_C(op2_C[13]),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Operand_Select_Bit__parameterized10_574 \OpSelect_Bits[15].Operand_Select_Bit_I 
       (.Clk(Clk),
        .D_16(D_16),
        .Reg1_Data(Reg1_Data[15]),
        .\Using_FPGA.Native (\Using_FPGA.Native_29 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_30 ),
        .ex_Result(ex_Result[15]),
        .of_PipeRun(of_PipeRun),
        .op2_C(op2_C[12]),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Operand_Select_Bit__parameterized8 \OpSelect_Bits[16].Operand_Select_Bit_I 
       (.Address(Address[7]),
        .Clk(Clk),
        .D_15(D_15),
        .Reg1_Data(Reg1_Data[16]),
        .Sext(Sext),
        .\Using_FPGA.Native (\Using_FPGA.Native_27 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_28 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_63 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_11 ),
        .ex_Result(ex_Result[16]),
        .of_PipeRun(of_PipeRun),
        .op2_C(op2_C[11]),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1),
        .sext16(sext16),
        .sext8(sext8),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Operand_Select_Bit__parameterized8_575 \OpSelect_Bits[17].Operand_Select_Bit_I 
       (.Address(Address[6]),
        .Clk(Clk),
        .D_14(D_14),
        .Reg1_Data(Reg1_Data[17]),
        .\Using_FPGA.Native (\Using_FPGA.Native_25 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_26 ),
        .ex_Result(ex_Result[17]),
        .of_PipeRun(of_PipeRun),
        .op2_C(op2_C[10]),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Operand_Select_Bit__parameterized8_576 \OpSelect_Bits[18].Operand_Select_Bit_I 
       (.Address(Address[5]),
        .Clk(Clk),
        .D_13(D_13),
        .Reg1_Data(Reg1_Data[18]),
        .\Using_FPGA.Native (\Using_FPGA.Native_23 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_24 ),
        .ex_Result(ex_Result[18]),
        .of_PipeRun(of_PipeRun),
        .op2_C(op2_C[9]),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Operand_Select_Bit__parameterized8_577 \OpSelect_Bits[19].Operand_Select_Bit_I 
       (.Address(Address[4]),
        .Clk(Clk),
        .D_12(D_12),
        .Reg1_Data(Reg1_Data[19]),
        .\Using_FPGA.Native (\Using_FPGA.Native_21 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_22 ),
        .ex_Result(ex_Result[19]),
        .of_PipeRun(of_PipeRun),
        .op2_C(op2_C[8]),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Operand_Select_Bit__parameterized10_578 \OpSelect_Bits[1].Operand_Select_Bit_I 
       (.Clk(Clk),
        .D_30(D_30),
        .Reg1_Data(Reg1_Data[1]),
        .\Using_FPGA.Native (\Using_FPGA.Native_57 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_58 ),
        .ex_Result(ex_Result[1]),
        .of_PipeRun(of_PipeRun),
        .op2_C(op2_C[26]),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Operand_Select_Bit__parameterized8_579 \OpSelect_Bits[20].Operand_Select_Bit_I 
       (.Address(Address[3]),
        .Clk(Clk),
        .D_11(D_11),
        .Reg1_Data(Reg1_Data[20]),
        .\Using_FPGA.Native (\Using_FPGA.Native_19 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_20 ),
        .ex_Result(ex_Result[20]),
        .of_PipeRun(of_PipeRun),
        .op2_C(op2_C[7]),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Operand_Select_Bit__parameterized8_580 \OpSelect_Bits[21].Operand_Select_Bit_I 
       (.Address(Address[2]),
        .Clk(Clk),
        .D_10(D_10),
        .Reg1_Data(Reg1_Data[21]),
        .\Using_FPGA.Native (\Using_FPGA.Native_17 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_18 ),
        .ex_Result(ex_Result[21]),
        .of_PipeRun(of_PipeRun),
        .op2_C(op2_C[6]),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Operand_Select_Bit__parameterized8_581 \OpSelect_Bits[22].Operand_Select_Bit_I 
       (.Address(Address[1]),
        .Clk(Clk),
        .D_9(D_9),
        .Reg1_Data(Reg1_Data[22]),
        .\Using_FPGA.Native (\Using_FPGA.Native_15 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_16 ),
        .ex_Result(ex_Result[22]),
        .of_PipeRun(of_PipeRun),
        .op2_C(op2_C[5]),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Operand_Select_Bit__parameterized8_582 \OpSelect_Bits[23].Operand_Select_Bit_I 
       (.Address(Address[0]),
        .Clk(Clk),
        .D_8(D_8),
        .Reg1_Data(Reg1_Data[23]),
        .\Using_FPGA.Native (\Using_FPGA.Native_13 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_14 ),
        .ex_Result(ex_Result[23]),
        .of_PipeRun(of_PipeRun),
        .op2_C(op2_C[4]),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Operand_Select_Bit \OpSelect_Bits[24].Operand_Select_Bit_I 
       (.Clk(Clk),
        .D_7(D_7),
        .I3_5(I3_5),
        .Reg1_Data(Reg1_Data[24]),
        .\Using_FPGA.Native (\Using_FPGA.Native_11 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_12 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_61 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_63 ),
        .ex_Result(ex_Result[24]),
        .of_PipeRun(of_PipeRun),
        .op2_C(op2_C[3]),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1),
        .sext8(sext8),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Operand_Select_Bit_583 \OpSelect_Bits[25].Operand_Select_Bit_I 
       (.Clk(Clk),
        .D_6(D_6),
        .I3_4(I3_4),
        .Reg1_Data(Reg1_Data[25]),
        .\Using_FPGA.Native (\Using_FPGA.Native_9 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_10 ),
        .ex_Result(ex_Result[25]),
        .of_PipeRun(of_PipeRun),
        .op2_C(op2_C[2]),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Operand_Select_Bit__parameterized6 \OpSelect_Bits[26].Operand_Select_Bit_I 
       (.Clk(Clk),
        .D_5(D_5),
        .I3_3(I3_3),
        .Reg1_Data(Reg1_Data[26]),
        .\Using_FPGA.Native (\Using_FPGA.Native_7 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_8 ),
        .ex_Result(ex_Result[26]),
        .of_PipeRun(of_PipeRun),
        .op2_C(op2_C[1]),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Operand_Select_Bit__parameterized4 \OpSelect_Bits[27].Operand_Select_Bit_I 
       (.Clk(Clk),
        .D_4(D_4),
        .I3_2(I3_2),
        .Reg1_Data(Reg1_Data[27]),
        .\Using_FPGA.Native (\Using_FPGA.Native_5 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_6 ),
        .ex_Result(ex_Result[27]),
        .of_PipeRun(of_PipeRun),
        .op2_C(op2_C[0]),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Operand_Select_Bit__parameterized2 \OpSelect_Bits[28].Operand_Select_Bit_I 
       (.Clk(Clk),
        .D_3(D_3),
        .I3_1(I3_1),
        .Reg1_Data(Reg1_Data[28]),
        .Shifted(Shifted),
        .\Using_FPGA.Native (\Using_FPGA.Native_3 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_4 ),
        .ex_Result(ex_Result[28]),
        .of_PipeRun(of_PipeRun),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Operand_Select_Bit_584 \OpSelect_Bits[29].Operand_Select_Bit_I 
       (.Clk(Clk),
        .D_2(D_2),
        .I3_0(I3_0),
        .Op2(Op2),
        .Reg1_Data(Reg1_Data[29]),
        .\Using_FPGA.Native (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_2 ),
        .ex_Result(ex_Result[29]),
        .of_PipeRun(of_PipeRun),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Operand_Select_Bit__parameterized10_585 \OpSelect_Bits[2].Operand_Select_Bit_I 
       (.Clk(Clk),
        .D_29(D_29),
        .Reg1_Data(Reg1_Data[2]),
        .\Using_FPGA.Native (\Using_FPGA.Native_55 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_56 ),
        .ex_Result(ex_Result[2]),
        .of_PipeRun(of_PipeRun),
        .op2_C(op2_C[25]),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Operand_Select_Bit_586 \OpSelect_Bits[30].Operand_Select_Bit_I 
       (.Clk(Clk),
        .D_1(D_1),
        .I3(I3),
        .Reg1_Data(Reg1_Data[30]),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_62 ),
        .\Using_FPGA.Native_2 (\OpSelect_Bits[31].Operand_Select_Bit_I_n_1 ),
        .ex_Result(ex_Result[30]),
        .of_PipeRun(of_PipeRun),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Operand_Select_Bit_587 \OpSelect_Bits[31].Operand_Select_Bit_I 
       (.Clk(Clk),
        .D_0(D_0),
        .EX_Op2(EX_Op2),
        .Op1_Logic(Op1_Logic),
        .Reg1_Data(Reg1_Data[31]),
        .\Using_FPGA.Native (\OpSelect_Bits[31].Operand_Select_Bit_I_n_1 ),
        .ex_Result(ex_Result[31]),
        .of_PipeRun(of_PipeRun),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Operand_Select_Bit__parameterized10_588 \OpSelect_Bits[3].Operand_Select_Bit_I 
       (.Clk(Clk),
        .D_28(D_28),
        .Reg1_Data(Reg1_Data[3]),
        .\Using_FPGA.Native (\Using_FPGA.Native_53 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_54 ),
        .ex_Result(ex_Result[3]),
        .of_PipeRun(of_PipeRun),
        .op2_C(op2_C[24]),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Operand_Select_Bit__parameterized10_589 \OpSelect_Bits[4].Operand_Select_Bit_I 
       (.Clk(Clk),
        .D_27(D_27),
        .Reg1_Data(Reg1_Data[4]),
        .\Using_FPGA.Native (\Using_FPGA.Native_51 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_52 ),
        .ex_Result(ex_Result[4]),
        .of_PipeRun(of_PipeRun),
        .op2_C(op2_C[23]),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Operand_Select_Bit__parameterized10_590 \OpSelect_Bits[5].Operand_Select_Bit_I 
       (.Clk(Clk),
        .D_26(D_26),
        .Reg1_Data(Reg1_Data[5]),
        .\Using_FPGA.Native (\Using_FPGA.Native_49 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_50 ),
        .ex_Result(ex_Result[5]),
        .of_PipeRun(of_PipeRun),
        .op2_C(op2_C[22]),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Operand_Select_Bit__parameterized10_591 \OpSelect_Bits[6].Operand_Select_Bit_I 
       (.Clk(Clk),
        .D_25(D_25),
        .Reg1_Data(Reg1_Data[6]),
        .\Using_FPGA.Native (\Using_FPGA.Native_47 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_48 ),
        .ex_Result(ex_Result[6]),
        .of_PipeRun(of_PipeRun),
        .op2_C(op2_C[21]),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Operand_Select_Bit__parameterized10_592 \OpSelect_Bits[7].Operand_Select_Bit_I 
       (.Clk(Clk),
        .D_24(D_24),
        .Reg1_Data(Reg1_Data[7]),
        .\Using_FPGA.Native (\Using_FPGA.Native_45 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_46 ),
        .ex_Result(ex_Result[7]),
        .of_PipeRun(of_PipeRun),
        .op2_C(op2_C[20]),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Operand_Select_Bit__parameterized10_593 \OpSelect_Bits[8].Operand_Select_Bit_I 
       (.Clk(Clk),
        .D_23(D_23),
        .Reg1_Data(Reg1_Data[8]),
        .\Using_FPGA.Native (\Using_FPGA.Native_43 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_44 ),
        .ex_Result(ex_Result[8]),
        .of_PipeRun(of_PipeRun),
        .op2_C(op2_C[19]),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Operand_Select_Bit__parameterized10_594 \OpSelect_Bits[9].Operand_Select_Bit_I 
       (.Clk(Clk),
        .D_22(D_22),
        .Reg1_Data(Reg1_Data[9]),
        .\Using_FPGA.Native (\Using_FPGA.Native_41 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_42 ),
        .ex_Result(ex_Result[9]),
        .of_PipeRun(of_PipeRun),
        .op2_C(op2_C[18]),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1),
        .sync_reset(sync_reset));
  FDRE \Size_17to32.imm_Reg_reg[0] 
       (.C(Clk),
        .CE(E),
        .D(imm_Value[0]),
        .Q(\Size_17to32.imm_Reg_reg[0]_0 [15]),
        .R(sync_reset));
  FDRE \Size_17to32.imm_Reg_reg[10] 
       (.C(Clk),
        .CE(E),
        .D(imm_Value[10]),
        .Q(\Size_17to32.imm_Reg_reg[0]_0 [5]),
        .R(sync_reset));
  FDRE \Size_17to32.imm_Reg_reg[11] 
       (.C(Clk),
        .CE(E),
        .D(imm_Value[11]),
        .Q(\Size_17to32.imm_Reg_reg[0]_0 [4]),
        .R(sync_reset));
  FDRE \Size_17to32.imm_Reg_reg[12] 
       (.C(Clk),
        .CE(E),
        .D(imm_Value[12]),
        .Q(\Size_17to32.imm_Reg_reg[0]_0 [3]),
        .R(sync_reset));
  FDRE \Size_17to32.imm_Reg_reg[13] 
       (.C(Clk),
        .CE(E),
        .D(imm_Value[13]),
        .Q(\Size_17to32.imm_Reg_reg[0]_0 [2]),
        .R(sync_reset));
  FDRE \Size_17to32.imm_Reg_reg[14] 
       (.C(Clk),
        .CE(E),
        .D(imm_Value[14]),
        .Q(\Size_17to32.imm_Reg_reg[0]_0 [1]),
        .R(sync_reset));
  FDRE \Size_17to32.imm_Reg_reg[15] 
       (.C(Clk),
        .CE(E),
        .D(imm_Value[15]),
        .Q(\Size_17to32.imm_Reg_reg[0]_0 [0]),
        .R(sync_reset));
  FDRE \Size_17to32.imm_Reg_reg[1] 
       (.C(Clk),
        .CE(E),
        .D(imm_Value[1]),
        .Q(\Size_17to32.imm_Reg_reg[0]_0 [14]),
        .R(sync_reset));
  FDRE \Size_17to32.imm_Reg_reg[2] 
       (.C(Clk),
        .CE(E),
        .D(imm_Value[2]),
        .Q(\Size_17to32.imm_Reg_reg[0]_0 [13]),
        .R(sync_reset));
  FDRE \Size_17to32.imm_Reg_reg[3] 
       (.C(Clk),
        .CE(E),
        .D(imm_Value[3]),
        .Q(\Size_17to32.imm_Reg_reg[0]_0 [12]),
        .R(sync_reset));
  FDRE \Size_17to32.imm_Reg_reg[4] 
       (.C(Clk),
        .CE(E),
        .D(imm_Value[4]),
        .Q(\Size_17to32.imm_Reg_reg[0]_0 [11]),
        .R(sync_reset));
  FDRE \Size_17to32.imm_Reg_reg[5] 
       (.C(Clk),
        .CE(E),
        .D(imm_Value[5]),
        .Q(\Size_17to32.imm_Reg_reg[0]_0 [10]),
        .R(sync_reset));
  FDRE \Size_17to32.imm_Reg_reg[6] 
       (.C(Clk),
        .CE(E),
        .D(imm_Value[6]),
        .Q(\Size_17to32.imm_Reg_reg[0]_0 [9]),
        .R(sync_reset));
  FDRE \Size_17to32.imm_Reg_reg[7] 
       (.C(Clk),
        .CE(E),
        .D(imm_Value[7]),
        .Q(\Size_17to32.imm_Reg_reg[0]_0 [8]),
        .R(sync_reset));
  FDRE \Size_17to32.imm_Reg_reg[8] 
       (.C(Clk),
        .CE(E),
        .D(imm_Value[8]),
        .Q(\Size_17to32.imm_Reg_reg[0]_0 [7]),
        .R(sync_reset));
  FDRE \Size_17to32.imm_Reg_reg[9] 
       (.C(Clk),
        .CE(E),
        .D(imm_Value[9]),
        .Q(\Size_17to32.imm_Reg_reg[0]_0 [6]),
        .R(sync_reset));
endmodule

module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Operand_Select_Bit
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    op2_C,
    \Using_FPGA.Native_1 ,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    I3_5,
    opsel1_SPR,
    sync_reset,
    of_PipeRun,
    Clk,
    D_7,
    \Using_FPGA.Native_2 ,
    sext8);
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  output [0:0]op2_C;
  output \Using_FPGA.Native_1 ;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input I3_5;
  input opsel1_SPR;
  input sync_reset;
  input of_PipeRun;
  input Clk;
  input D_7;
  input \Using_FPGA.Native_2 ;
  input sext8;

  wire Clk;
  wire D_7;
  wire I3_5;
  wire [0:0]Reg1_Data;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire [0:0]ex_Result;
  wire of_PipeRun;
  wire op1_I;
  wire op1_Reg;
  wire [0:0]op2_C;
  wire opsel1_SPR;
  wire res_Forward1;
  wire sext8;
  wire sync_reset;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2_654 \Both_PC_and_MSR.Op1_LUT6 
       (.I3_5(I3_5),
        .Reg1_Data(Reg1_Data),
        .ex_Result(ex_Result),
        .op1_I(op1_I),
        .op1_Reg(op1_Reg),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_655 Op1_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_2 ),
        .of_PipeRun(of_PipeRun),
        .op1_I(op1_I),
        .sext8(sext8),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_656 Op1_Reg_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .of_PipeRun(of_PipeRun),
        .op1_Reg(op1_Reg),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FDE_657 Op2_DFF
       (.Clk(Clk),
        .D_7(D_7),
        .of_PipeRun(of_PipeRun),
        .op2_C(op2_C));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Operand_Select_Bit_583
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    op2_C,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    I3_4,
    opsel1_SPR,
    sync_reset,
    of_PipeRun,
    Clk,
    D_6);
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  output [0:0]op2_C;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input I3_4;
  input opsel1_SPR;
  input sync_reset;
  input of_PipeRun;
  input Clk;
  input D_6;

  wire Clk;
  wire D_6;
  wire I3_4;
  wire [0:0]Reg1_Data;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire of_PipeRun;
  wire op1_I;
  wire op1_Reg;
  wire [0:0]op2_C;
  wire opsel1_SPR;
  wire res_Forward1;
  wire sync_reset;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2_650 \Both_PC_and_MSR.Op1_LUT6 
       (.I3_4(I3_4),
        .Reg1_Data(Reg1_Data),
        .ex_Result(ex_Result),
        .op1_I(op1_I),
        .op1_Reg(op1_Reg),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_651 Op1_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .of_PipeRun(of_PipeRun),
        .op1_I(op1_I),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_652 Op1_Reg_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .of_PipeRun(of_PipeRun),
        .op1_Reg(op1_Reg),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FDE_653 Op2_DFF
       (.Clk(Clk),
        .D_6(D_6),
        .of_PipeRun(of_PipeRun),
        .op2_C(op2_C));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Operand_Select_Bit_584
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    Op2,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    I3_0,
    opsel1_SPR,
    sync_reset,
    of_PipeRun,
    Clk,
    D_2);
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  output Op2;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input I3_0;
  input opsel1_SPR;
  input sync_reset;
  input of_PipeRun;
  input Clk;
  input D_2;

  wire Clk;
  wire D_2;
  wire I3_0;
  wire Op2;
  wire [0:0]Reg1_Data;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire of_PipeRun;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;
  wire sync_reset;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2_634 \Both_PC_and_MSR.Op1_LUT6 
       (.I3_0(I3_0),
        .Reg1_Data(Reg1_Data),
        .ex_Result(ex_Result),
        .op1_I(op1_I),
        .op1_Reg(op1_Reg),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_635 Op1_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .of_PipeRun(of_PipeRun),
        .op1_I(op1_I),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_636 Op1_Reg_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .of_PipeRun(of_PipeRun),
        .op1_Reg(op1_Reg),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FDE_637 Op2_DFF
       (.Clk(Clk),
        .D_2(D_2),
        .Op2(Op2),
        .of_PipeRun(of_PipeRun));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Operand_Select_Bit_586
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    I3,
    opsel1_SPR,
    sync_reset,
    of_PipeRun,
    Clk,
    D_1,
    \Using_FPGA.Native_2 );
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  output \Using_FPGA.Native_1 ;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input I3;
  input opsel1_SPR;
  input sync_reset;
  input of_PipeRun;
  input Clk;
  input D_1;
  input \Using_FPGA.Native_2 ;

  wire Clk;
  wire D_1;
  wire I3;
  wire [0:0]Reg1_Data;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire [0:0]ex_Result;
  wire of_PipeRun;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;
  wire sync_reset;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2_626 \Both_PC_and_MSR.Op1_LUT6 
       (.I3(I3),
        .Reg1_Data(Reg1_Data),
        .ex_Result(ex_Result),
        .op1_I(op1_I),
        .op1_Reg(op1_Reg),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_627 Op1_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .of_PipeRun(of_PipeRun),
        .op1_I(op1_I),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_628 Op1_Reg_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_2 ),
        .of_PipeRun(of_PipeRun),
        .op1_Reg(op1_Reg),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FDE_629 Op2_DFF
       (.Clk(Clk),
        .D_1(D_1),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .of_PipeRun(of_PipeRun));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Operand_Select_Bit_587
   (Op1_Logic,
    \Using_FPGA.Native ,
    EX_Op2,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    opsel1_SPR,
    sync_reset,
    of_PipeRun,
    Clk,
    D_0);
  output Op1_Logic;
  output \Using_FPGA.Native ;
  output EX_Op2;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input opsel1_SPR;
  input sync_reset;
  input of_PipeRun;
  input Clk;
  input D_0;

  wire Clk;
  wire D_0;
  wire EX_Op2;
  wire Op1_Logic;
  wire [0:0]Reg1_Data;
  wire \Using_FPGA.Native ;
  wire [0:0]ex_Result;
  wire of_PipeRun;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;
  wire sync_reset;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2_622 \Both_PC_and_MSR.Op1_LUT6 
       (.Reg1_Data(Reg1_Data),
        .ex_Result(ex_Result),
        .op1_I(op1_I),
        .op1_Reg(op1_Reg),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_623 Op1_DFF
       (.Clk(Clk),
        .Op1_Logic(Op1_Logic),
        .of_PipeRun(of_PipeRun),
        .op1_I(op1_I),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_624 Op1_Reg_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .of_PipeRun(of_PipeRun),
        .op1_Reg(op1_Reg),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FDE_625 Op2_DFF
       (.Clk(Clk),
        .D_0(D_0),
        .EX_Op2(EX_Op2),
        .of_PipeRun(of_PipeRun));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Operand_Select_Bit__parameterized10
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    op2_C,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    opsel1_SPR,
    sync_reset,
    of_PipeRun,
    Clk,
    D_21);
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  output [0:0]op2_C;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input opsel1_SPR;
  input sync_reset;
  input of_PipeRun;
  input Clk;
  input D_21;

  wire Clk;
  wire D_21;
  wire [0:0]Reg1_Data;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire of_PipeRun;
  wire op1_I;
  wire op1_Reg;
  wire [0:0]op2_C;
  wire opsel1_SPR;
  wire res_Forward1;
  wire sync_reset;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2_714 \Only_PC.Op1_LUT6 
       (.Reg1_Data(Reg1_Data),
        .ex_Result(ex_Result),
        .op1_I(op1_I),
        .op1_Reg(op1_Reg),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_715 Op1_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .of_PipeRun(of_PipeRun),
        .op1_I(op1_I),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_716 Op1_Reg_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .of_PipeRun(of_PipeRun),
        .op1_Reg(op1_Reg),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FDE_717 Op2_DFF
       (.Clk(Clk),
        .D_21(D_21),
        .of_PipeRun(of_PipeRun),
        .op2_C(op2_C));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Operand_Select_Bit__parameterized10_570
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    op2_C,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    opsel1_SPR,
    sync_reset,
    of_PipeRun,
    Clk,
    D_20);
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  output [0:0]op2_C;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input opsel1_SPR;
  input sync_reset;
  input of_PipeRun;
  input Clk;
  input D_20;

  wire Clk;
  wire D_20;
  wire [0:0]Reg1_Data;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire of_PipeRun;
  wire op1_I;
  wire op1_Reg;
  wire [0:0]op2_C;
  wire opsel1_SPR;
  wire res_Forward1;
  wire sync_reset;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2_710 \Only_PC.Op1_LUT6 
       (.Reg1_Data(Reg1_Data),
        .ex_Result(ex_Result),
        .op1_I(op1_I),
        .op1_Reg(op1_Reg),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_711 Op1_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .of_PipeRun(of_PipeRun),
        .op1_I(op1_I),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_712 Op1_Reg_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .of_PipeRun(of_PipeRun),
        .op1_Reg(op1_Reg),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FDE_713 Op2_DFF
       (.Clk(Clk),
        .D_20(D_20),
        .of_PipeRun(of_PipeRun),
        .op2_C(op2_C));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Operand_Select_Bit__parameterized10_571
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    op2_C,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    opsel1_SPR,
    sync_reset,
    of_PipeRun,
    Clk,
    D_19);
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  output [0:0]op2_C;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input opsel1_SPR;
  input sync_reset;
  input of_PipeRun;
  input Clk;
  input D_19;

  wire Clk;
  wire D_19;
  wire [0:0]Reg1_Data;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire of_PipeRun;
  wire op1_I;
  wire op1_Reg;
  wire [0:0]op2_C;
  wire opsel1_SPR;
  wire res_Forward1;
  wire sync_reset;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2_706 \Only_PC.Op1_LUT6 
       (.Reg1_Data(Reg1_Data),
        .ex_Result(ex_Result),
        .op1_I(op1_I),
        .op1_Reg(op1_Reg),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_707 Op1_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .of_PipeRun(of_PipeRun),
        .op1_I(op1_I),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_708 Op1_Reg_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .of_PipeRun(of_PipeRun),
        .op1_Reg(op1_Reg),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FDE_709 Op2_DFF
       (.Clk(Clk),
        .D_19(D_19),
        .of_PipeRun(of_PipeRun),
        .op2_C(op2_C));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Operand_Select_Bit__parameterized10_572
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    op2_C,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    opsel1_SPR,
    sync_reset,
    of_PipeRun,
    Clk,
    D_18);
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  output [0:0]op2_C;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input opsel1_SPR;
  input sync_reset;
  input of_PipeRun;
  input Clk;
  input D_18;

  wire Clk;
  wire D_18;
  wire [0:0]Reg1_Data;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire of_PipeRun;
  wire op1_I;
  wire op1_Reg;
  wire [0:0]op2_C;
  wire opsel1_SPR;
  wire res_Forward1;
  wire sync_reset;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2_702 \Only_PC.Op1_LUT6 
       (.Reg1_Data(Reg1_Data),
        .ex_Result(ex_Result),
        .op1_I(op1_I),
        .op1_Reg(op1_Reg),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_703 Op1_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .of_PipeRun(of_PipeRun),
        .op1_I(op1_I),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_704 Op1_Reg_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .of_PipeRun(of_PipeRun),
        .op1_Reg(op1_Reg),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FDE_705 Op2_DFF
       (.Clk(Clk),
        .D_18(D_18),
        .of_PipeRun(of_PipeRun),
        .op2_C(op2_C));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Operand_Select_Bit__parameterized10_573
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    op2_C,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    opsel1_SPR,
    sync_reset,
    of_PipeRun,
    Clk,
    D_17);
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  output [0:0]op2_C;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input opsel1_SPR;
  input sync_reset;
  input of_PipeRun;
  input Clk;
  input D_17;

  wire Clk;
  wire D_17;
  wire [0:0]Reg1_Data;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire of_PipeRun;
  wire op1_I;
  wire op1_Reg;
  wire [0:0]op2_C;
  wire opsel1_SPR;
  wire res_Forward1;
  wire sync_reset;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2_698 \Only_PC.Op1_LUT6 
       (.Reg1_Data(Reg1_Data),
        .ex_Result(ex_Result),
        .op1_I(op1_I),
        .op1_Reg(op1_Reg),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_699 Op1_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .of_PipeRun(of_PipeRun),
        .op1_I(op1_I),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_700 Op1_Reg_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .of_PipeRun(of_PipeRun),
        .op1_Reg(op1_Reg),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FDE_701 Op2_DFF
       (.Clk(Clk),
        .D_17(D_17),
        .of_PipeRun(of_PipeRun),
        .op2_C(op2_C));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Operand_Select_Bit__parameterized10_574
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    op2_C,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    opsel1_SPR,
    sync_reset,
    of_PipeRun,
    Clk,
    D_16);
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  output [0:0]op2_C;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input opsel1_SPR;
  input sync_reset;
  input of_PipeRun;
  input Clk;
  input D_16;

  wire Clk;
  wire D_16;
  wire [0:0]Reg1_Data;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire of_PipeRun;
  wire op1_I;
  wire op1_Reg;
  wire [0:0]op2_C;
  wire opsel1_SPR;
  wire res_Forward1;
  wire sync_reset;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2_694 \Only_PC.Op1_LUT6 
       (.Reg1_Data(Reg1_Data),
        .ex_Result(ex_Result),
        .op1_I(op1_I),
        .op1_Reg(op1_Reg),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_695 Op1_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .of_PipeRun(of_PipeRun),
        .op1_I(op1_I),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_696 Op1_Reg_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .of_PipeRun(of_PipeRun),
        .op1_Reg(op1_Reg),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FDE_697 Op2_DFF
       (.Clk(Clk),
        .D_16(D_16),
        .of_PipeRun(of_PipeRun),
        .op2_C(op2_C));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Operand_Select_Bit__parameterized10_578
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    op2_C,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    opsel1_SPR,
    sync_reset,
    of_PipeRun,
    Clk,
    D_30);
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  output [0:0]op2_C;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input opsel1_SPR;
  input sync_reset;
  input of_PipeRun;
  input Clk;
  input D_30;

  wire Clk;
  wire D_30;
  wire [0:0]Reg1_Data;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire of_PipeRun;
  wire op1_I;
  wire op1_Reg;
  wire [0:0]op2_C;
  wire opsel1_SPR;
  wire res_Forward1;
  wire sync_reset;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2_674 \Only_PC.Op1_LUT6 
       (.Reg1_Data(Reg1_Data),
        .ex_Result(ex_Result),
        .op1_I(op1_I),
        .op1_Reg(op1_Reg),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_675 Op1_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .of_PipeRun(of_PipeRun),
        .op1_I(op1_I),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_676 Op1_Reg_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .of_PipeRun(of_PipeRun),
        .op1_Reg(op1_Reg),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FDE_677 Op2_DFF
       (.Clk(Clk),
        .D_30(D_30),
        .of_PipeRun(of_PipeRun),
        .op2_C(op2_C));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Operand_Select_Bit__parameterized10_585
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    op2_C,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    opsel1_SPR,
    sync_reset,
    of_PipeRun,
    Clk,
    D_29);
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  output [0:0]op2_C;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input opsel1_SPR;
  input sync_reset;
  input of_PipeRun;
  input Clk;
  input D_29;

  wire Clk;
  wire D_29;
  wire [0:0]Reg1_Data;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire of_PipeRun;
  wire op1_I;
  wire op1_Reg;
  wire [0:0]op2_C;
  wire opsel1_SPR;
  wire res_Forward1;
  wire sync_reset;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2_630 \Only_PC.Op1_LUT6 
       (.Reg1_Data(Reg1_Data),
        .ex_Result(ex_Result),
        .op1_I(op1_I),
        .op1_Reg(op1_Reg),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_631 Op1_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .of_PipeRun(of_PipeRun),
        .op1_I(op1_I),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_632 Op1_Reg_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .of_PipeRun(of_PipeRun),
        .op1_Reg(op1_Reg),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FDE_633 Op2_DFF
       (.Clk(Clk),
        .D_29(D_29),
        .of_PipeRun(of_PipeRun),
        .op2_C(op2_C));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Operand_Select_Bit__parameterized10_588
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    op2_C,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    opsel1_SPR,
    sync_reset,
    of_PipeRun,
    Clk,
    D_28);
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  output [0:0]op2_C;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input opsel1_SPR;
  input sync_reset;
  input of_PipeRun;
  input Clk;
  input D_28;

  wire Clk;
  wire D_28;
  wire [0:0]Reg1_Data;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire of_PipeRun;
  wire op1_I;
  wire op1_Reg;
  wire [0:0]op2_C;
  wire opsel1_SPR;
  wire res_Forward1;
  wire sync_reset;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2_618 \Only_PC.Op1_LUT6 
       (.Reg1_Data(Reg1_Data),
        .ex_Result(ex_Result),
        .op1_I(op1_I),
        .op1_Reg(op1_Reg),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_619 Op1_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .of_PipeRun(of_PipeRun),
        .op1_I(op1_I),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_620 Op1_Reg_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .of_PipeRun(of_PipeRun),
        .op1_Reg(op1_Reg),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FDE_621 Op2_DFF
       (.Clk(Clk),
        .D_28(D_28),
        .of_PipeRun(of_PipeRun),
        .op2_C(op2_C));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Operand_Select_Bit__parameterized10_589
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    op2_C,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    opsel1_SPR,
    sync_reset,
    of_PipeRun,
    Clk,
    D_27);
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  output [0:0]op2_C;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input opsel1_SPR;
  input sync_reset;
  input of_PipeRun;
  input Clk;
  input D_27;

  wire Clk;
  wire D_27;
  wire [0:0]Reg1_Data;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire of_PipeRun;
  wire op1_I;
  wire op1_Reg;
  wire [0:0]op2_C;
  wire opsel1_SPR;
  wire res_Forward1;
  wire sync_reset;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2_614 \Only_PC.Op1_LUT6 
       (.Reg1_Data(Reg1_Data),
        .ex_Result(ex_Result),
        .op1_I(op1_I),
        .op1_Reg(op1_Reg),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_615 Op1_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .of_PipeRun(of_PipeRun),
        .op1_I(op1_I),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_616 Op1_Reg_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .of_PipeRun(of_PipeRun),
        .op1_Reg(op1_Reg),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FDE_617 Op2_DFF
       (.Clk(Clk),
        .D_27(D_27),
        .of_PipeRun(of_PipeRun),
        .op2_C(op2_C));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Operand_Select_Bit__parameterized10_590
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    op2_C,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    opsel1_SPR,
    sync_reset,
    of_PipeRun,
    Clk,
    D_26);
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  output [0:0]op2_C;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input opsel1_SPR;
  input sync_reset;
  input of_PipeRun;
  input Clk;
  input D_26;

  wire Clk;
  wire D_26;
  wire [0:0]Reg1_Data;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire of_PipeRun;
  wire op1_I;
  wire op1_Reg;
  wire [0:0]op2_C;
  wire opsel1_SPR;
  wire res_Forward1;
  wire sync_reset;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2_610 \Only_PC.Op1_LUT6 
       (.Reg1_Data(Reg1_Data),
        .ex_Result(ex_Result),
        .op1_I(op1_I),
        .op1_Reg(op1_Reg),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_611 Op1_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .of_PipeRun(of_PipeRun),
        .op1_I(op1_I),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_612 Op1_Reg_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .of_PipeRun(of_PipeRun),
        .op1_Reg(op1_Reg),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FDE_613 Op2_DFF
       (.Clk(Clk),
        .D_26(D_26),
        .of_PipeRun(of_PipeRun),
        .op2_C(op2_C));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Operand_Select_Bit__parameterized10_591
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    op2_C,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    opsel1_SPR,
    sync_reset,
    of_PipeRun,
    Clk,
    D_25);
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  output [0:0]op2_C;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input opsel1_SPR;
  input sync_reset;
  input of_PipeRun;
  input Clk;
  input D_25;

  wire Clk;
  wire D_25;
  wire [0:0]Reg1_Data;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire of_PipeRun;
  wire op1_I;
  wire op1_Reg;
  wire [0:0]op2_C;
  wire opsel1_SPR;
  wire res_Forward1;
  wire sync_reset;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2_606 \Only_PC.Op1_LUT6 
       (.Reg1_Data(Reg1_Data),
        .ex_Result(ex_Result),
        .op1_I(op1_I),
        .op1_Reg(op1_Reg),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_607 Op1_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .of_PipeRun(of_PipeRun),
        .op1_I(op1_I),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_608 Op1_Reg_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .of_PipeRun(of_PipeRun),
        .op1_Reg(op1_Reg),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FDE_609 Op2_DFF
       (.Clk(Clk),
        .D_25(D_25),
        .of_PipeRun(of_PipeRun),
        .op2_C(op2_C));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Operand_Select_Bit__parameterized10_592
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    op2_C,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    opsel1_SPR,
    sync_reset,
    of_PipeRun,
    Clk,
    D_24);
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  output [0:0]op2_C;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input opsel1_SPR;
  input sync_reset;
  input of_PipeRun;
  input Clk;
  input D_24;

  wire Clk;
  wire D_24;
  wire [0:0]Reg1_Data;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire of_PipeRun;
  wire op1_I;
  wire op1_Reg;
  wire [0:0]op2_C;
  wire opsel1_SPR;
  wire res_Forward1;
  wire sync_reset;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2_602 \Only_PC.Op1_LUT6 
       (.Reg1_Data(Reg1_Data),
        .ex_Result(ex_Result),
        .op1_I(op1_I),
        .op1_Reg(op1_Reg),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_603 Op1_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .of_PipeRun(of_PipeRun),
        .op1_I(op1_I),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_604 Op1_Reg_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .of_PipeRun(of_PipeRun),
        .op1_Reg(op1_Reg),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FDE_605 Op2_DFF
       (.Clk(Clk),
        .D_24(D_24),
        .of_PipeRun(of_PipeRun),
        .op2_C(op2_C));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Operand_Select_Bit__parameterized10_593
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    op2_C,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    opsel1_SPR,
    sync_reset,
    of_PipeRun,
    Clk,
    D_23);
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  output [0:0]op2_C;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input opsel1_SPR;
  input sync_reset;
  input of_PipeRun;
  input Clk;
  input D_23;

  wire Clk;
  wire D_23;
  wire [0:0]Reg1_Data;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire of_PipeRun;
  wire op1_I;
  wire op1_Reg;
  wire [0:0]op2_C;
  wire opsel1_SPR;
  wire res_Forward1;
  wire sync_reset;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2_598 \Only_PC.Op1_LUT6 
       (.Reg1_Data(Reg1_Data),
        .ex_Result(ex_Result),
        .op1_I(op1_I),
        .op1_Reg(op1_Reg),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_599 Op1_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .of_PipeRun(of_PipeRun),
        .op1_I(op1_I),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_600 Op1_Reg_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .of_PipeRun(of_PipeRun),
        .op1_Reg(op1_Reg),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FDE_601 Op2_DFF
       (.Clk(Clk),
        .D_23(D_23),
        .of_PipeRun(of_PipeRun),
        .op2_C(op2_C));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Operand_Select_Bit__parameterized10_594
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    op2_C,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    opsel1_SPR,
    sync_reset,
    of_PipeRun,
    Clk,
    D_22);
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  output [0:0]op2_C;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input opsel1_SPR;
  input sync_reset;
  input of_PipeRun;
  input Clk;
  input D_22;

  wire Clk;
  wire D_22;
  wire [0:0]Reg1_Data;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire of_PipeRun;
  wire op1_I;
  wire op1_Reg;
  wire [0:0]op2_C;
  wire opsel1_SPR;
  wire res_Forward1;
  wire sync_reset;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2 \Only_PC.Op1_LUT6 
       (.Reg1_Data(Reg1_Data),
        .ex_Result(ex_Result),
        .op1_I(op1_I),
        .op1_Reg(op1_Reg),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_595 Op1_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .of_PipeRun(of_PipeRun),
        .op1_I(op1_I),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_596 Op1_Reg_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .of_PipeRun(of_PipeRun),
        .op1_Reg(op1_Reg),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FDE_597 Op2_DFF
       (.Clk(Clk),
        .D_22(D_22),
        .of_PipeRun(of_PipeRun),
        .op2_C(op2_C));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Operand_Select_Bit__parameterized12
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    op2_C,
    S,
    Compare_Instr_reg,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    I3_6,
    opsel1_SPR,
    sync_reset,
    of_PipeRun,
    Clk,
    D_31,
    compare_Instr,
    \Using_FPGA.Native_1 );
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  output [0:0]op2_C;
  output S;
  output Compare_Instr_reg;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input I3_6;
  input opsel1_SPR;
  input sync_reset;
  input of_PipeRun;
  input Clk;
  input D_31;
  input compare_Instr;
  input \Using_FPGA.Native_1 ;

  wire Clk;
  wire Compare_Instr_reg;
  wire D_31;
  wire I3_6;
  wire [0:0]Reg1_Data;
  wire S;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire compare_Instr;
  wire [0:0]ex_Result;
  wire of_PipeRun;
  wire op1_I;
  wire op1_Reg;
  wire [0:0]op2_C;
  wire opsel1_SPR;
  wire res_Forward1;
  wire sync_reset;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2_718 \Both_PC_and_MSR.Op1_LUT6 
       (.I3_6(I3_6),
        .Reg1_Data(Reg1_Data),
        .ex_Result(ex_Result),
        .op1_I(op1_I),
        .op1_Reg(op1_Reg),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_719 Op1_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .of_PipeRun(of_PipeRun),
        .op1_I(op1_I),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_720 Op1_Reg_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .of_PipeRun(of_PipeRun),
        .op1_Reg(op1_Reg),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FDE_721 Op2_DFF
       (.Clk(Clk),
        .Compare_Instr_reg(Compare_Instr_reg),
        .D_31(D_31),
        .S(S),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native ),
        .compare_Instr(compare_Instr),
        .of_PipeRun(of_PipeRun),
        .op2_C(op2_C));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Operand_Select_Bit__parameterized2
   (Shifted,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    I3_1,
    opsel1_SPR,
    sync_reset,
    of_PipeRun,
    Clk,
    D_3);
  output Shifted;
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input I3_1;
  input opsel1_SPR;
  input sync_reset;
  input of_PipeRun;
  input Clk;
  input D_3;

  wire Clk;
  wire D_3;
  wire I3_1;
  wire [0:0]Reg1_Data;
  wire Shifted;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire of_PipeRun;
  wire op1_I;
  wire op1_Reg;
  wire opsel1_SPR;
  wire res_Forward1;
  wire sync_reset;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2_638 \Both_PC_and_MSR.Op1_LUT6 
       (.I3_1(I3_1),
        .Reg1_Data(Reg1_Data),
        .ex_Result(ex_Result),
        .op1_I(op1_I),
        .op1_Reg(op1_Reg),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_639 Op1_DFF
       (.Clk(Clk),
        .Shifted(Shifted),
        .of_PipeRun(of_PipeRun),
        .op1_I(op1_I),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_640 Op1_Reg_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .of_PipeRun(of_PipeRun),
        .op1_Reg(op1_Reg),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FDE_641 Op2_DFF
       (.Clk(Clk),
        .D_3(D_3),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .of_PipeRun(of_PipeRun));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Operand_Select_Bit__parameterized4
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    op2_C,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    I3_2,
    opsel1_SPR,
    sync_reset,
    of_PipeRun,
    Clk,
    D_4);
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  output [0:0]op2_C;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input I3_2;
  input opsel1_SPR;
  input sync_reset;
  input of_PipeRun;
  input Clk;
  input D_4;

  wire Clk;
  wire D_4;
  wire I3_2;
  wire [0:0]Reg1_Data;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire of_PipeRun;
  wire op1_I;
  wire op1_Reg;
  wire [0:0]op2_C;
  wire opsel1_SPR;
  wire res_Forward1;
  wire sync_reset;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2_642 \Both_PC_and_MSR.Op1_LUT6 
       (.I3_2(I3_2),
        .Reg1_Data(Reg1_Data),
        .ex_Result(ex_Result),
        .op1_I(op1_I),
        .op1_Reg(op1_Reg),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_643 Op1_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .of_PipeRun(of_PipeRun),
        .op1_I(op1_I),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_644 Op1_Reg_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .of_PipeRun(of_PipeRun),
        .op1_Reg(op1_Reg),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FDE_645 Op2_DFF
       (.Clk(Clk),
        .D_4(D_4),
        .of_PipeRun(of_PipeRun),
        .op2_C(op2_C));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Operand_Select_Bit__parameterized6
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    op2_C,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    I3_3,
    opsel1_SPR,
    sync_reset,
    of_PipeRun,
    Clk,
    D_5);
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  output [0:0]op2_C;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input I3_3;
  input opsel1_SPR;
  input sync_reset;
  input of_PipeRun;
  input Clk;
  input D_5;

  wire Clk;
  wire D_5;
  wire I3_3;
  wire [0:0]Reg1_Data;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire of_PipeRun;
  wire op1_I;
  wire op1_Reg;
  wire [0:0]op2_C;
  wire opsel1_SPR;
  wire res_Forward1;
  wire sync_reset;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2_646 \Both_PC_and_MSR.Op1_LUT6 
       (.I3_3(I3_3),
        .Reg1_Data(Reg1_Data),
        .ex_Result(ex_Result),
        .op1_I(op1_I),
        .op1_Reg(op1_Reg),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_647 Op1_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .of_PipeRun(of_PipeRun),
        .op1_I(op1_I),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_648 Op1_Reg_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .of_PipeRun(of_PipeRun),
        .op1_Reg(op1_Reg),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FDE_649 Op2_DFF
       (.Clk(Clk),
        .D_5(D_5),
        .of_PipeRun(of_PipeRun),
        .op2_C(op2_C));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Operand_Select_Bit__parameterized8
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    op2_C,
    Sext,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    Address,
    opsel1_SPR,
    sync_reset,
    of_PipeRun,
    Clk,
    D_15,
    sext16,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    sext8);
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  output [0:0]op2_C;
  output Sext;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input [0:0]Address;
  input opsel1_SPR;
  input sync_reset;
  input of_PipeRun;
  input Clk;
  input D_15;
  input sext16;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input sext8;

  wire [0:0]Address;
  wire Clk;
  wire D_15;
  wire [0:0]Reg1_Data;
  wire Sext;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire [0:0]ex_Result;
  wire of_PipeRun;
  wire op1_I;
  wire op1_Reg;
  wire [0:0]op2_C;
  wire opsel1_SPR;
  wire res_Forward1;
  wire sext16;
  wire sext8;
  wire sync_reset;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2_690 \Only_PC.Op1_LUT6 
       (.Address(Address),
        .Reg1_Data(Reg1_Data),
        .ex_Result(ex_Result),
        .op1_I(op1_I),
        .op1_Reg(op1_Reg),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_691 Op1_DFF
       (.Clk(Clk),
        .Sext(Sext),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_2 ),
        .of_PipeRun(of_PipeRun),
        .op1_I(op1_I),
        .sext16(sext16),
        .sext8(sext8),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_692 Op1_Reg_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .of_PipeRun(of_PipeRun),
        .op1_Reg(op1_Reg),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FDE_693 Op2_DFF
       (.Clk(Clk),
        .D_15(D_15),
        .of_PipeRun(of_PipeRun),
        .op2_C(op2_C));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Operand_Select_Bit__parameterized8_575
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    op2_C,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    Address,
    opsel1_SPR,
    sync_reset,
    of_PipeRun,
    Clk,
    D_14);
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  output [0:0]op2_C;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input [0:0]Address;
  input opsel1_SPR;
  input sync_reset;
  input of_PipeRun;
  input Clk;
  input D_14;

  wire [0:0]Address;
  wire Clk;
  wire D_14;
  wire [0:0]Reg1_Data;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire of_PipeRun;
  wire op1_I;
  wire op1_Reg;
  wire [0:0]op2_C;
  wire opsel1_SPR;
  wire res_Forward1;
  wire sync_reset;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2_686 \Only_PC.Op1_LUT6 
       (.Address(Address),
        .Reg1_Data(Reg1_Data),
        .ex_Result(ex_Result),
        .op1_I(op1_I),
        .op1_Reg(op1_Reg),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_687 Op1_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .of_PipeRun(of_PipeRun),
        .op1_I(op1_I),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_688 Op1_Reg_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .of_PipeRun(of_PipeRun),
        .op1_Reg(op1_Reg),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FDE_689 Op2_DFF
       (.Clk(Clk),
        .D_14(D_14),
        .of_PipeRun(of_PipeRun),
        .op2_C(op2_C));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Operand_Select_Bit__parameterized8_576
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    op2_C,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    Address,
    opsel1_SPR,
    sync_reset,
    of_PipeRun,
    Clk,
    D_13);
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  output [0:0]op2_C;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input [0:0]Address;
  input opsel1_SPR;
  input sync_reset;
  input of_PipeRun;
  input Clk;
  input D_13;

  wire [0:0]Address;
  wire Clk;
  wire D_13;
  wire [0:0]Reg1_Data;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire of_PipeRun;
  wire op1_I;
  wire op1_Reg;
  wire [0:0]op2_C;
  wire opsel1_SPR;
  wire res_Forward1;
  wire sync_reset;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2_682 \Only_PC.Op1_LUT6 
       (.Address(Address),
        .Reg1_Data(Reg1_Data),
        .ex_Result(ex_Result),
        .op1_I(op1_I),
        .op1_Reg(op1_Reg),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_683 Op1_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .of_PipeRun(of_PipeRun),
        .op1_I(op1_I),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_684 Op1_Reg_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .of_PipeRun(of_PipeRun),
        .op1_Reg(op1_Reg),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FDE_685 Op2_DFF
       (.Clk(Clk),
        .D_13(D_13),
        .of_PipeRun(of_PipeRun),
        .op2_C(op2_C));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Operand_Select_Bit__parameterized8_577
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    op2_C,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    Address,
    opsel1_SPR,
    sync_reset,
    of_PipeRun,
    Clk,
    D_12);
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  output [0:0]op2_C;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input [0:0]Address;
  input opsel1_SPR;
  input sync_reset;
  input of_PipeRun;
  input Clk;
  input D_12;

  wire [0:0]Address;
  wire Clk;
  wire D_12;
  wire [0:0]Reg1_Data;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire of_PipeRun;
  wire op1_I;
  wire op1_Reg;
  wire [0:0]op2_C;
  wire opsel1_SPR;
  wire res_Forward1;
  wire sync_reset;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2_678 \Only_PC.Op1_LUT6 
       (.Address(Address),
        .Reg1_Data(Reg1_Data),
        .ex_Result(ex_Result),
        .op1_I(op1_I),
        .op1_Reg(op1_Reg),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_679 Op1_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .of_PipeRun(of_PipeRun),
        .op1_I(op1_I),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_680 Op1_Reg_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .of_PipeRun(of_PipeRun),
        .op1_Reg(op1_Reg),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FDE_681 Op2_DFF
       (.Clk(Clk),
        .D_12(D_12),
        .of_PipeRun(of_PipeRun),
        .op2_C(op2_C));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Operand_Select_Bit__parameterized8_579
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    op2_C,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    Address,
    opsel1_SPR,
    sync_reset,
    of_PipeRun,
    Clk,
    D_11);
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  output [0:0]op2_C;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input [0:0]Address;
  input opsel1_SPR;
  input sync_reset;
  input of_PipeRun;
  input Clk;
  input D_11;

  wire [0:0]Address;
  wire Clk;
  wire D_11;
  wire [0:0]Reg1_Data;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire of_PipeRun;
  wire op1_I;
  wire op1_Reg;
  wire [0:0]op2_C;
  wire opsel1_SPR;
  wire res_Forward1;
  wire sync_reset;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2_670 \Only_PC.Op1_LUT6 
       (.Address(Address),
        .Reg1_Data(Reg1_Data),
        .ex_Result(ex_Result),
        .op1_I(op1_I),
        .op1_Reg(op1_Reg),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_671 Op1_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .of_PipeRun(of_PipeRun),
        .op1_I(op1_I),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_672 Op1_Reg_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .of_PipeRun(of_PipeRun),
        .op1_Reg(op1_Reg),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FDE_673 Op2_DFF
       (.Clk(Clk),
        .D_11(D_11),
        .of_PipeRun(of_PipeRun),
        .op2_C(op2_C));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Operand_Select_Bit__parameterized8_580
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    op2_C,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    Address,
    opsel1_SPR,
    sync_reset,
    of_PipeRun,
    Clk,
    D_10);
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  output [0:0]op2_C;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input [0:0]Address;
  input opsel1_SPR;
  input sync_reset;
  input of_PipeRun;
  input Clk;
  input D_10;

  wire [0:0]Address;
  wire Clk;
  wire D_10;
  wire [0:0]Reg1_Data;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire of_PipeRun;
  wire op1_I;
  wire op1_Reg;
  wire [0:0]op2_C;
  wire opsel1_SPR;
  wire res_Forward1;
  wire sync_reset;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2_666 \Only_PC.Op1_LUT6 
       (.Address(Address),
        .Reg1_Data(Reg1_Data),
        .ex_Result(ex_Result),
        .op1_I(op1_I),
        .op1_Reg(op1_Reg),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_667 Op1_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .of_PipeRun(of_PipeRun),
        .op1_I(op1_I),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_668 Op1_Reg_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .of_PipeRun(of_PipeRun),
        .op1_Reg(op1_Reg),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FDE_669 Op2_DFF
       (.Clk(Clk),
        .D_10(D_10),
        .of_PipeRun(of_PipeRun),
        .op2_C(op2_C));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Operand_Select_Bit__parameterized8_581
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    op2_C,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    Address,
    opsel1_SPR,
    sync_reset,
    of_PipeRun,
    Clk,
    D_9);
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  output [0:0]op2_C;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input [0:0]Address;
  input opsel1_SPR;
  input sync_reset;
  input of_PipeRun;
  input Clk;
  input D_9;

  wire [0:0]Address;
  wire Clk;
  wire D_9;
  wire [0:0]Reg1_Data;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire of_PipeRun;
  wire op1_I;
  wire op1_Reg;
  wire [0:0]op2_C;
  wire opsel1_SPR;
  wire res_Forward1;
  wire sync_reset;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2_662 \Only_PC.Op1_LUT6 
       (.Address(Address),
        .Reg1_Data(Reg1_Data),
        .ex_Result(ex_Result),
        .op1_I(op1_I),
        .op1_Reg(op1_Reg),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_663 Op1_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .of_PipeRun(of_PipeRun),
        .op1_I(op1_I),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_664 Op1_Reg_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .of_PipeRun(of_PipeRun),
        .op1_Reg(op1_Reg),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FDE_665 Op2_DFF
       (.Clk(Clk),
        .D_9(D_9),
        .of_PipeRun(of_PipeRun),
        .op2_C(op2_C));
endmodule

(* ORIG_REF_NAME = "Operand_Select_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Operand_Select_Bit__parameterized8_582
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    op2_C,
    Reg1_Data,
    ex_Result,
    res_Forward1,
    Address,
    opsel1_SPR,
    sync_reset,
    of_PipeRun,
    Clk,
    D_8);
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  output [0:0]op2_C;
  input [0:0]Reg1_Data;
  input [0:0]ex_Result;
  input res_Forward1;
  input [0:0]Address;
  input opsel1_SPR;
  input sync_reset;
  input of_PipeRun;
  input Clk;
  input D_8;

  wire [0:0]Address;
  wire Clk;
  wire D_8;
  wire [0:0]Reg1_Data;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]ex_Result;
  wire of_PipeRun;
  wire op1_I;
  wire op1_Reg;
  wire [0:0]op2_C;
  wire opsel1_SPR;
  wire res_Forward1;
  wire sync_reset;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2_658 \Only_PC.Op1_LUT6 
       (.Address(Address),
        .Reg1_Data(Reg1_Data),
        .ex_Result(ex_Result),
        .op1_I(op1_I),
        .op1_Reg(op1_Reg),
        .opsel1_SPR(opsel1_SPR),
        .res_Forward1(res_Forward1));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_659 Op1_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .of_PipeRun(of_PipeRun),
        .op1_I(op1_I),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_660 Op1_Reg_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .of_PipeRun(of_PipeRun),
        .op1_Reg(op1_Reg),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FDE_661 Op2_DFF
       (.Clk(Clk),
        .D_8(D_8),
        .of_PipeRun(of_PipeRun),
        .op2_C(op2_C));
endmodule

module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_PC_Bit
   (\Using_FPGA.Native ,
    Address,
    PC_EX_i,
    LO,
    \Using_FPGA.Native_0 ,
    jump,
    sync_reset,
    PC_Write,
    Clk,
    IReady,
    Buffer_Addr,
    \Using_FPGA.Native_1 ,
    lopt,
    lopt_1);
  output [0:0]\Using_FPGA.Native ;
  output [0:0]Address;
  output [0:0]PC_EX_i;
  input LO;
  input [0:0]\Using_FPGA.Native_0 ;
  input jump;
  input sync_reset;
  input PC_Write;
  input Clk;
  input IReady;
  input [2:0]Buffer_Addr;
  input \Using_FPGA.Native_1 ;
  input lopt;
  output lopt_1;

  wire [0:0]Address;
  wire [2:0]Buffer_Addr;
  wire Clk;
  wire IReady;
  wire LO;
  wire [0:0]PC_EX_i;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native ;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire jump;
  wire lopt;
  wire pc_I;
  wire pc_Sum;
  wire sync_reset;
  wire xor_Sum;

  assign lopt_1 = xor_Sum;
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_XORCY_564 MUXCY_XOR_I
       (.LO(LO),
        .lopt(lopt),
        .pc_Sum(pc_Sum),
        .xor_Sum(xor_Sum));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized23_565 NewPC_Mux
       (.\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .jump(jump),
        .pc_Sum(pc_Sum));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FDE_566 PC_EX_DFF
       (.Address(Address),
        .Clk(Clk),
        .PC_EX_i(PC_EX_i),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E_567 PC_OF_Buffer
       (.Address(Address),
        .Buffer_Addr(Buffer_Addr),
        .Clk(Clk),
        .IReady(IReady),
        .pc_I(pc_I));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized21_568 SUM_I
       (.pc_I(pc_I),
        .xor_Sum(xor_Sum));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDSE_569 \Set_DFF.PC_IF_DFF 
       (.Clk(Clk),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .pc_I(pc_I),
        .sync_reset(sync_reset));
endmodule

(* ORIG_REF_NAME = "PC_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_PC_Bit_476
   (Carry_Out,
    \Using_FPGA.Native ,
    Address,
    PC_EX_i,
    LO,
    \Using_FPGA.Native_0 ,
    jump,
    sync_reset,
    PC_Write,
    Clk,
    IReady,
    Buffer_Addr,
    \Using_FPGA.Native_1 ,
    lopt,
    lopt_1);
  output Carry_Out;
  output [0:0]\Using_FPGA.Native ;
  output [0:0]Address;
  output [0:0]PC_EX_i;
  input LO;
  input [0:0]\Using_FPGA.Native_0 ;
  input jump;
  input sync_reset;
  input PC_Write;
  input Clk;
  input IReady;
  input [2:0]Buffer_Addr;
  input \Using_FPGA.Native_1 ;
  output lopt;
  input lopt_1;

  wire [0:0]Address;
  wire [2:0]Buffer_Addr;
  wire Carry_Out;
  wire Clk;
  wire IReady;
  wire LO;
  wire [0:0]PC_EX_i;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native ;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire jump;
  wire lopt;
  wire lopt_1;
  wire pc_I;
  wire pc_Sum;
  wire sync_reset;
  wire xor_Sum;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_XORCY_558 MUXCY_XOR_I
       (.Carry_Out(Carry_Out),
        .LO(LO),
        .O(pc_Sum),
        .S(xor_Sum),
        .lopt(lopt),
        .lopt_1(lopt_1));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized23_559 NewPC_Mux
       (.O(pc_Sum),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .jump(jump));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FDE_560 PC_EX_DFF
       (.Address(Address),
        .Clk(Clk),
        .PC_EX_i(PC_EX_i),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E_561 PC_OF_Buffer
       (.Address(Address),
        .Buffer_Addr(Buffer_Addr),
        .Clk(Clk),
        .IReady(IReady),
        .pc_I(pc_I));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized21_562 SUM_I
       (.S(xor_Sum),
        .pc_I(pc_I));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDSE_563 \Set_DFF.PC_IF_DFF 
       (.Clk(Clk),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .pc_I(pc_I),
        .sync_reset(sync_reset));
endmodule

(* ORIG_REF_NAME = "PC_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_PC_Bit_477
   (Carry_Out,
    \Using_FPGA.Native ,
    Address,
    PC_EX_i,
    LO,
    \Using_FPGA.Native_0 ,
    jump,
    sync_reset,
    PC_Write,
    Clk,
    IReady,
    Buffer_Addr,
    \Using_FPGA.Native_1 ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output Carry_Out;
  output [0:0]\Using_FPGA.Native ;
  output [0:0]Address;
  output [0:0]PC_EX_i;
  input LO;
  input [0:0]\Using_FPGA.Native_0 ;
  input jump;
  input sync_reset;
  input PC_Write;
  input Clk;
  input IReady;
  input [2:0]Buffer_Addr;
  input \Using_FPGA.Native_1 ;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]Address;
  wire [2:0]Buffer_Addr;
  wire Carry_Out;
  wire Clk;
  wire IReady;
  wire LO;
  wire [0:0]PC_EX_i;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native ;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire jump;
  wire lopt;
  wire lopt_1;
  wire \^lopt_2 ;
  wire pc_I;
  wire pc_Sum;
  wire sync_reset;
  wire xor_Sum;

  assign \^lopt_2  = lopt_3;
  assign lopt_2 = xor_Sum;
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_XORCY_552 MUXCY_XOR_I
       (.Carry_Out(Carry_Out),
        .LO(LO),
        .O(pc_Sum),
        .S(xor_Sum),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(\^lopt_2 ));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized23_553 NewPC_Mux
       (.O(pc_Sum),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .jump(jump));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FDE_554 PC_EX_DFF
       (.Address(Address),
        .Clk(Clk),
        .PC_EX_i(PC_EX_i),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E_555 PC_OF_Buffer
       (.Address(Address),
        .Buffer_Addr(Buffer_Addr),
        .Clk(Clk),
        .IReady(IReady),
        .pc_I(pc_I));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized21_556 SUM_I
       (.S(xor_Sum),
        .pc_I(pc_I));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDSE_557 \Set_DFF.PC_IF_DFF 
       (.Clk(Clk),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .pc_I(pc_I),
        .sync_reset(sync_reset));
endmodule

(* ORIG_REF_NAME = "PC_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_PC_Bit_478
   (Carry_Out,
    \Using_FPGA.Native ,
    Address,
    PC_EX_i,
    LO,
    \Using_FPGA.Native_0 ,
    jump,
    sync_reset,
    PC_Write,
    Clk,
    IReady,
    Buffer_Addr,
    \Using_FPGA.Native_1 ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output Carry_Out;
  output [0:0]\Using_FPGA.Native ;
  output [0:0]Address;
  output [0:0]PC_EX_i;
  input LO;
  input [0:0]\Using_FPGA.Native_0 ;
  input jump;
  input sync_reset;
  input PC_Write;
  input Clk;
  input IReady;
  input [2:0]Buffer_Addr;
  input \Using_FPGA.Native_1 ;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]Address;
  wire [2:0]Buffer_Addr;
  wire Carry_Out;
  wire Clk;
  wire IReady;
  wire LO;
  wire [0:0]PC_EX_i;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native ;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire jump;
  wire lopt;
  wire lopt_1;
  wire \^lopt_2 ;
  wire pc_I;
  wire pc_Sum;
  wire sync_reset;
  wire xor_Sum;

  assign \^lopt_2  = lopt_3;
  assign lopt_2 = xor_Sum;
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_XORCY_546 MUXCY_XOR_I
       (.Carry_Out(Carry_Out),
        .LO(LO),
        .O(pc_Sum),
        .S(xor_Sum),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(\^lopt_2 ));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized23_547 NewPC_Mux
       (.O(pc_Sum),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .jump(jump));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FDE_548 PC_EX_DFF
       (.Address(Address),
        .Clk(Clk),
        .PC_EX_i(PC_EX_i),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E_549 PC_OF_Buffer
       (.Address(Address),
        .Buffer_Addr(Buffer_Addr),
        .Clk(Clk),
        .IReady(IReady),
        .pc_I(pc_I));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized21_550 SUM_I
       (.S(xor_Sum),
        .pc_I(pc_I));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDSE_551 \Set_DFF.PC_IF_DFF 
       (.Clk(Clk),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .pc_I(pc_I),
        .sync_reset(sync_reset));
endmodule

(* ORIG_REF_NAME = "PC_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_PC_Bit_479
   (Carry_Out,
    \Using_FPGA.Native ,
    Address,
    PC_EX_i,
    LO,
    \Using_FPGA.Native_0 ,
    jump,
    sync_reset,
    PC_Write,
    Clk,
    IReady,
    Buffer_Addr,
    \Using_FPGA.Native_1 ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output Carry_Out;
  output [0:0]\Using_FPGA.Native ;
  output [0:0]Address;
  output [0:0]PC_EX_i;
  input LO;
  input [0:0]\Using_FPGA.Native_0 ;
  input jump;
  input sync_reset;
  input PC_Write;
  input Clk;
  input IReady;
  input [2:0]Buffer_Addr;
  input \Using_FPGA.Native_1 ;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]Address;
  wire [2:0]Buffer_Addr;
  wire Carry_Out;
  wire Clk;
  wire IReady;
  wire LO;
  wire [0:0]PC_EX_i;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native ;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire jump;
  wire lopt;
  wire lopt_1;
  wire \^lopt_2 ;
  wire pc_I;
  wire pc_Sum;
  wire sync_reset;
  wire xor_Sum;

  assign \^lopt_2  = lopt_3;
  assign lopt_2 = xor_Sum;
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_XORCY_540 MUXCY_XOR_I
       (.Carry_Out(Carry_Out),
        .LO(LO),
        .O(pc_Sum),
        .S(xor_Sum),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(\^lopt_2 ));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized23_541 NewPC_Mux
       (.O(pc_Sum),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .jump(jump));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FDE_542 PC_EX_DFF
       (.Address(Address),
        .Clk(Clk),
        .PC_EX_i(PC_EX_i),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E_543 PC_OF_Buffer
       (.Address(Address),
        .Buffer_Addr(Buffer_Addr),
        .Clk(Clk),
        .IReady(IReady),
        .pc_I(pc_I));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized21_544 SUM_I
       (.S(xor_Sum),
        .pc_I(pc_I));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDSE_545 \Set_DFF.PC_IF_DFF 
       (.Clk(Clk),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .pc_I(pc_I),
        .sync_reset(sync_reset));
endmodule

(* ORIG_REF_NAME = "PC_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_PC_Bit_480
   (Carry_Out,
    \Using_FPGA.Native ,
    Address,
    PC_EX_i,
    LO,
    \Using_FPGA.Native_0 ,
    jump,
    sync_reset,
    PC_Write,
    Clk,
    IReady,
    Buffer_Addr,
    \Using_FPGA.Native_1 ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11);
  output Carry_Out;
  output [0:0]\Using_FPGA.Native ;
  output [0:0]Address;
  output [0:0]PC_EX_i;
  input LO;
  input [0:0]\Using_FPGA.Native_0 ;
  input jump;
  input sync_reset;
  input PC_Write;
  input Clk;
  input IReady;
  input [2:0]Buffer_Addr;
  input \Using_FPGA.Native_1 ;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  output lopt_10;
  output lopt_11;

  wire [0:0]Address;
  wire [2:0]Buffer_Addr;
  wire Carry_Out;
  wire Clk;
  wire IReady;
  wire LO;
  wire [0:0]PC_EX_i;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native ;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire jump;
  wire lopt;
  wire lopt_1;
  wire lopt_10;
  wire lopt_11;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire lopt_9;
  wire pc_I;
  wire pc_Sum;
  wire sync_reset;
  wire xor_Sum;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_XORCY_534 MUXCY_XOR_I
       (.Carry_Out(Carry_Out),
        .LO(LO),
        .O(pc_Sum),
        .S(xor_Sum),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_10(lopt_10),
        .lopt_11(lopt_11),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8),
        .lopt_9(lopt_9));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized23_535 NewPC_Mux
       (.O(pc_Sum),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .jump(jump));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FDE_536 PC_EX_DFF
       (.Address(Address),
        .Clk(Clk),
        .PC_EX_i(PC_EX_i),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E_537 PC_OF_Buffer
       (.Address(Address),
        .Buffer_Addr(Buffer_Addr),
        .Clk(Clk),
        .IReady(IReady),
        .pc_I(pc_I));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized21_538 SUM_I
       (.S(xor_Sum),
        .pc_I(pc_I));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDSE_539 \Set_DFF.PC_IF_DFF 
       (.Clk(Clk),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .pc_I(pc_I),
        .sync_reset(sync_reset));
endmodule

(* ORIG_REF_NAME = "PC_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_PC_Bit_481
   (Carry_Out,
    \Using_FPGA.Native ,
    Address,
    PC_EX_i,
    LO,
    \Using_FPGA.Native_0 ,
    jump,
    sync_reset,
    PC_Write,
    Clk,
    IReady,
    Buffer_Addr,
    \Using_FPGA.Native_1 ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output Carry_Out;
  output [0:0]\Using_FPGA.Native ;
  output [0:0]Address;
  output [0:0]PC_EX_i;
  input LO;
  input [0:0]\Using_FPGA.Native_0 ;
  input jump;
  input sync_reset;
  input PC_Write;
  input Clk;
  input IReady;
  input [2:0]Buffer_Addr;
  input \Using_FPGA.Native_1 ;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]Address;
  wire [2:0]Buffer_Addr;
  wire Carry_Out;
  wire Clk;
  wire IReady;
  wire LO;
  wire [0:0]PC_EX_i;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native ;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire jump;
  wire lopt;
  wire lopt_1;
  wire \^lopt_2 ;
  wire pc_I;
  wire pc_Sum;
  wire sync_reset;
  wire xor_Sum;

  assign \^lopt_2  = lopt_3;
  assign lopt_2 = xor_Sum;
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_XORCY_528 MUXCY_XOR_I
       (.Carry_Out(Carry_Out),
        .LO(LO),
        .O(pc_Sum),
        .S(xor_Sum),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(\^lopt_2 ));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized23_529 NewPC_Mux
       (.O(pc_Sum),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .jump(jump));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FDE_530 PC_EX_DFF
       (.Address(Address),
        .Clk(Clk),
        .PC_EX_i(PC_EX_i),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E_531 PC_OF_Buffer
       (.Address(Address),
        .Buffer_Addr(Buffer_Addr),
        .Clk(Clk),
        .IReady(IReady),
        .pc_I(pc_I));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized21_532 SUM_I
       (.S(xor_Sum),
        .pc_I(pc_I));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDSE_533 \Set_DFF.PC_IF_DFF 
       (.Clk(Clk),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .pc_I(pc_I),
        .sync_reset(sync_reset));
endmodule

(* ORIG_REF_NAME = "PC_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_PC_Bit_482
   (Carry_Out,
    \Using_FPGA.Native ,
    Address,
    PC_EX_i,
    LO,
    \Using_FPGA.Native_0 ,
    jump,
    sync_reset,
    PC_Write,
    Clk,
    IReady,
    Buffer_Addr,
    \Using_FPGA.Native_1 ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output Carry_Out;
  output [0:0]\Using_FPGA.Native ;
  output [0:0]Address;
  output [0:0]PC_EX_i;
  input LO;
  input [0:0]\Using_FPGA.Native_0 ;
  input jump;
  input sync_reset;
  input PC_Write;
  input Clk;
  input IReady;
  input [2:0]Buffer_Addr;
  input \Using_FPGA.Native_1 ;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]Address;
  wire [2:0]Buffer_Addr;
  wire Carry_Out;
  wire Clk;
  wire IReady;
  wire LO;
  wire [0:0]PC_EX_i;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native ;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire jump;
  wire lopt;
  wire lopt_1;
  wire \^lopt_2 ;
  wire pc_I;
  wire pc_Sum;
  wire sync_reset;
  wire xor_Sum;

  assign \^lopt_2  = lopt_3;
  assign lopt_2 = xor_Sum;
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_XORCY_522 MUXCY_XOR_I
       (.Carry_Out(Carry_Out),
        .LO(LO),
        .O(pc_Sum),
        .S(xor_Sum),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(\^lopt_2 ));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized23_523 NewPC_Mux
       (.O(pc_Sum),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .jump(jump));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FDE_524 PC_EX_DFF
       (.Address(Address),
        .Clk(Clk),
        .PC_EX_i(PC_EX_i),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E_525 PC_OF_Buffer
       (.Address(Address),
        .Buffer_Addr(Buffer_Addr),
        .Clk(Clk),
        .IReady(IReady),
        .pc_I(pc_I));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized21_526 SUM_I
       (.S(xor_Sum),
        .pc_I(pc_I));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDSE_527 \Set_DFF.PC_IF_DFF 
       (.Clk(Clk),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .pc_I(pc_I),
        .sync_reset(sync_reset));
endmodule

(* ORIG_REF_NAME = "PC_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_PC_Bit_483
   (I3,
    Address,
    Carry_Out,
    \Using_FPGA.Native ,
    PC_EX_i,
    \Using_FPGA.Native_0 ,
    LO,
    \Using_FPGA.Native_1 ,
    jump,
    sync_reset,
    PC_Write,
    Clk,
    IReady,
    Buffer_Addr,
    \Using_FPGA.Native_2 ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output I3;
  output [0:0]Address;
  output Carry_Out;
  output [0:0]\Using_FPGA.Native ;
  output [0:0]PC_EX_i;
  input \Using_FPGA.Native_0 ;
  input LO;
  input [0:0]\Using_FPGA.Native_1 ;
  input jump;
  input sync_reset;
  input PC_Write;
  input Clk;
  input IReady;
  input [2:0]Buffer_Addr;
  input \Using_FPGA.Native_2 ;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]Address;
  wire [2:0]Buffer_Addr;
  wire Carry_Out;
  wire Clk;
  wire I3;
  wire IReady;
  wire LO;
  wire [0:0]PC_EX_i;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]\Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire jump;
  wire lopt;
  wire lopt_1;
  wire \^lopt_2 ;
  wire pc_I;
  wire pc_Sum;
  wire sync_reset;
  wire xor_Sum;

  assign \^lopt_2  = lopt_3;
  assign lopt_2 = xor_Sum;
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_XORCY_516 MUXCY_XOR_I
       (.Carry_Out(Carry_Out),
        .LO(LO),
        .O(pc_Sum),
        .S(xor_Sum),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(\^lopt_2 ));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized23_517 NewPC_Mux
       (.O(pc_Sum),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 ),
        .jump(jump));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FDE_518 PC_EX_DFF
       (.Address(Address),
        .Clk(Clk),
        .PC_EX_i(PC_EX_i),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_2 ));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E_519 PC_OF_Buffer
       (.Address(Address),
        .Buffer_Addr(Buffer_Addr),
        .Clk(Clk),
        .I3(I3),
        .IReady(IReady),
        .\Using_FPGA.Native (\Using_FPGA.Native_0 ),
        .pc_I(pc_I));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized21_520 SUM_I
       (.S(xor_Sum),
        .pc_I(pc_I));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDSE_521 \Set_DFF.PC_IF_DFF 
       (.Clk(Clk),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .pc_I(pc_I),
        .sync_reset(sync_reset));
endmodule

(* ORIG_REF_NAME = "PC_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_PC_Bit_484
   (I3_0,
    Address,
    Carry_Out,
    \Using_FPGA.Native ,
    PC_EX_i,
    \Using_FPGA.Native_0 ,
    LO,
    \Using_FPGA.Native_1 ,
    jump,
    sync_reset,
    PC_Write,
    Clk,
    IReady,
    Buffer_Addr,
    \Using_FPGA.Native_2 ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11);
  output I3_0;
  output [0:0]Address;
  output Carry_Out;
  output [0:0]\Using_FPGA.Native ;
  output [0:0]PC_EX_i;
  input \Using_FPGA.Native_0 ;
  input LO;
  input [0:0]\Using_FPGA.Native_1 ;
  input jump;
  input sync_reset;
  input PC_Write;
  input Clk;
  input IReady;
  input [2:0]Buffer_Addr;
  input \Using_FPGA.Native_2 ;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  output lopt_10;
  output lopt_11;

  wire [0:0]Address;
  wire [2:0]Buffer_Addr;
  wire Carry_Out;
  wire Clk;
  wire I3_0;
  wire IReady;
  wire LO;
  wire [0:0]PC_EX_i;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]\Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire jump;
  wire lopt;
  wire lopt_1;
  wire lopt_10;
  wire lopt_11;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire lopt_9;
  wire pc_I;
  wire pc_Sum;
  wire sync_reset;
  wire xor_Sum;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_XORCY_510 MUXCY_XOR_I
       (.Carry_Out(Carry_Out),
        .LO(LO),
        .O(pc_Sum),
        .S(xor_Sum),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_10(lopt_10),
        .lopt_11(lopt_11),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8),
        .lopt_9(lopt_9));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized23_511 NewPC_Mux
       (.O(pc_Sum),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 ),
        .jump(jump));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FDE_512 PC_EX_DFF
       (.Address(Address),
        .Clk(Clk),
        .PC_EX_i(PC_EX_i),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_2 ));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E_513 PC_OF_Buffer
       (.Address(Address),
        .Buffer_Addr(Buffer_Addr),
        .Clk(Clk),
        .I3_0(I3_0),
        .IReady(IReady),
        .\Using_FPGA.Native (\Using_FPGA.Native_0 ),
        .pc_I(pc_I));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized21_514 SUM_I
       (.S(xor_Sum),
        .pc_I(pc_I));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDSE_515 \Set_DFF.PC_IF_DFF 
       (.Clk(Clk),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .pc_I(pc_I),
        .sync_reset(sync_reset));
endmodule

(* ORIG_REF_NAME = "PC_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_PC_Bit_485
   (I3_1,
    Address,
    Carry_Out,
    \Using_FPGA.Native ,
    PC_EX_i,
    \Using_FPGA.Native_0 ,
    LO,
    \Using_FPGA.Native_1 ,
    jump,
    sync_reset,
    PC_Write,
    Clk,
    IReady,
    Buffer_Addr,
    \Using_FPGA.Native_2 ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output I3_1;
  output [0:0]Address;
  output Carry_Out;
  output [0:0]\Using_FPGA.Native ;
  output [0:0]PC_EX_i;
  input \Using_FPGA.Native_0 ;
  input LO;
  input [0:0]\Using_FPGA.Native_1 ;
  input jump;
  input sync_reset;
  input PC_Write;
  input Clk;
  input IReady;
  input [2:0]Buffer_Addr;
  input \Using_FPGA.Native_2 ;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]Address;
  wire [2:0]Buffer_Addr;
  wire Carry_Out;
  wire Clk;
  wire I3_1;
  wire IReady;
  wire LO;
  wire [0:0]PC_EX_i;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]\Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire jump;
  wire lopt;
  wire lopt_1;
  wire \^lopt_2 ;
  wire pc_I;
  wire pc_Sum;
  wire sync_reset;
  wire xor_Sum;

  assign \^lopt_2  = lopt_3;
  assign lopt_2 = xor_Sum;
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_XORCY_504 MUXCY_XOR_I
       (.Carry_Out(Carry_Out),
        .LO(LO),
        .O(pc_Sum),
        .S(xor_Sum),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(\^lopt_2 ));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized23_505 NewPC_Mux
       (.O(pc_Sum),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 ),
        .jump(jump));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FDE_506 PC_EX_DFF
       (.Address(Address),
        .Clk(Clk),
        .PC_EX_i(PC_EX_i),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_2 ));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E_507 PC_OF_Buffer
       (.Address(Address),
        .Buffer_Addr(Buffer_Addr),
        .Clk(Clk),
        .I3_1(I3_1),
        .IReady(IReady),
        .\Using_FPGA.Native (\Using_FPGA.Native_0 ),
        .pc_I(pc_I));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized21_508 SUM_I
       (.S(xor_Sum),
        .pc_I(pc_I));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDSE_509 \Set_DFF.PC_IF_DFF 
       (.Clk(Clk),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .pc_I(pc_I),
        .sync_reset(sync_reset));
endmodule

(* ORIG_REF_NAME = "PC_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_PC_Bit_486
   (I3_2,
    Address,
    Carry_Out,
    \Using_FPGA.Native ,
    PC_EX_i,
    \Using_FPGA.Native_0 ,
    LO,
    \Using_FPGA.Native_1 ,
    jump,
    sync_reset,
    PC_Write,
    Clk,
    IReady,
    Buffer_Addr,
    \Using_FPGA.Native_2 ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output I3_2;
  output [0:0]Address;
  output Carry_Out;
  output [0:0]\Using_FPGA.Native ;
  output [0:0]PC_EX_i;
  input \Using_FPGA.Native_0 ;
  input LO;
  input [0:0]\Using_FPGA.Native_1 ;
  input jump;
  input sync_reset;
  input PC_Write;
  input Clk;
  input IReady;
  input [2:0]Buffer_Addr;
  input \Using_FPGA.Native_2 ;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]Address;
  wire [2:0]Buffer_Addr;
  wire Carry_Out;
  wire Clk;
  wire I3_2;
  wire IReady;
  wire LO;
  wire [0:0]PC_EX_i;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]\Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire jump;
  wire lopt;
  wire lopt_1;
  wire \^lopt_2 ;
  wire pc_I;
  wire pc_Sum;
  wire sync_reset;
  wire xor_Sum;

  assign \^lopt_2  = lopt_3;
  assign lopt_2 = xor_Sum;
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_XORCY_498 MUXCY_XOR_I
       (.Carry_Out(Carry_Out),
        .LO(LO),
        .O(pc_Sum),
        .S(xor_Sum),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(\^lopt_2 ));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized23_499 NewPC_Mux
       (.O(pc_Sum),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 ),
        .jump(jump));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FDE_500 PC_EX_DFF
       (.Address(Address),
        .Clk(Clk),
        .PC_EX_i(PC_EX_i),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_2 ));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E_501 PC_OF_Buffer
       (.Address(Address),
        .Buffer_Addr(Buffer_Addr),
        .Clk(Clk),
        .I3_2(I3_2),
        .IReady(IReady),
        .\Using_FPGA.Native (\Using_FPGA.Native_0 ),
        .pc_I(pc_I));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized21_502 SUM_I
       (.S(xor_Sum),
        .pc_I(pc_I));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDSE_503 \Set_DFF.PC_IF_DFF 
       (.Clk(Clk),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .pc_I(pc_I),
        .sync_reset(sync_reset));
endmodule

(* ORIG_REF_NAME = "PC_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_PC_Bit_487
   (D,
    PC_EX_i,
    Carry_Out,
    \Using_FPGA.Native ,
    Address,
    \data_rd_reg_reg[28] ,
    msr_I,
    \data_rd_reg_reg[28]_0 ,
    register_write,
    \Using_FPGA.Native_0 ,
    LO,
    jump,
    sync_reset,
    PC_Write,
    Clk,
    IReady,
    Buffer_Addr,
    \Using_FPGA.Native_1 ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output [0:0]D;
  output [0:0]PC_EX_i;
  output Carry_Out;
  output [0:0]\Using_FPGA.Native ;
  output [0:0]Address;
  input \data_rd_reg_reg[28] ;
  input [0:0]msr_I;
  input \data_rd_reg_reg[28]_0 ;
  input register_write;
  input [1:0]\Using_FPGA.Native_0 ;
  input LO;
  input jump;
  input sync_reset;
  input PC_Write;
  input Clk;
  input IReady;
  input [2:0]Buffer_Addr;
  input \Using_FPGA.Native_1 ;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]Address;
  wire [2:0]Buffer_Addr;
  wire Carry_Out;
  wire Clk;
  wire [0:0]D;
  wire IReady;
  wire LO;
  wire [0:0]PC_EX_i;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native ;
  wire [1:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \data_rd_reg_reg[28] ;
  wire \data_rd_reg_reg[28]_0 ;
  wire jump;
  wire lopt;
  wire lopt_1;
  wire \^lopt_2 ;
  wire [0:0]msr_I;
  wire pc_I;
  wire pc_Sum;
  wire register_write;
  wire sync_reset;
  wire xor_Sum;

  assign \^lopt_2  = lopt_3;
  assign lopt_2 = xor_Sum;
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_XORCY_492 MUXCY_XOR_I
       (.Carry_Out(Carry_Out),
        .LO(LO),
        .O(pc_Sum),
        .S(xor_Sum),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(\^lopt_2 ));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized23_493 NewPC_Mux
       (.O(pc_Sum),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 [1]),
        .jump(jump));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FDE_494 PC_EX_DFF
       (.Address(Address),
        .Clk(Clk),
        .D(D),
        .PC_EX_i(PC_EX_i),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .\data_rd_reg_reg[28] (\data_rd_reg_reg[28] ),
        .\data_rd_reg_reg[28]_0 (\data_rd_reg_reg[28]_0 ),
        .\data_rd_reg_reg[28]_1 (\Using_FPGA.Native_0 [0]),
        .msr_I(msr_I),
        .register_write(register_write));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E_495 PC_OF_Buffer
       (.Address(Address),
        .Buffer_Addr(Buffer_Addr),
        .Clk(Clk),
        .IReady(IReady),
        .pc_I(pc_I));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized21_496 SUM_I
       (.S(xor_Sum),
        .pc_I(pc_I));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDSE_497 \Set_DFF.PC_IF_DFF 
       (.Clk(Clk),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .pc_I(pc_I),
        .sync_reset(sync_reset));
endmodule

(* ORIG_REF_NAME = "PC_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_PC_Bit_488
   (D,
    PC_EX_i,
    Carry_Out,
    \Using_FPGA.Native ,
    Address,
    \data_rd_reg_reg[29] ,
    msr_I,
    \data_rd_reg_reg[29]_0 ,
    register_write,
    \Using_FPGA.Native_0 ,
    DI,
    jump,
    sync_reset,
    PC_Write,
    Clk,
    IReady,
    Buffer_Addr,
    \Using_FPGA.Native_1 ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11);
  output [0:0]D;
  output [0:0]PC_EX_i;
  output Carry_Out;
  output [0:0]\Using_FPGA.Native ;
  output [0:0]Address;
  input \data_rd_reg_reg[29] ;
  input [0:0]msr_I;
  input \data_rd_reg_reg[29]_0 ;
  input register_write;
  input [1:0]\Using_FPGA.Native_0 ;
  input DI;
  input jump;
  input sync_reset;
  input PC_Write;
  input Clk;
  input IReady;
  input [2:0]Buffer_Addr;
  input \Using_FPGA.Native_1 ;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  output lopt_10;
  output lopt_11;

  wire [0:0]Address;
  wire [2:0]Buffer_Addr;
  wire Carry_Out;
  wire Clk;
  wire [0:0]D;
  wire DI;
  wire IReady;
  wire [0:0]PC_EX_i;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native ;
  wire [1:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \data_rd_reg_reg[29] ;
  wire \data_rd_reg_reg[29]_0 ;
  wire jump;
  wire lopt;
  wire lopt_1;
  wire lopt_10;
  wire lopt_11;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire lopt_9;
  wire [0:0]msr_I;
  wire pc_I;
  wire pc_Sum;
  wire register_write;
  wire sync_reset;
  wire xor_Sum;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_XORCY_489 MUXCY_XOR_I
       (.Carry_Out(Carry_Out),
        .DI(DI),
        .O(pc_Sum),
        .S(xor_Sum),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_10(lopt_10),
        .lopt_11(lopt_11),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8),
        .lopt_9(lopt_9));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized23 NewPC_Mux
       (.O(pc_Sum),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 [1]),
        .jump(jump));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FDE PC_EX_DFF
       (.Address(Address),
        .Clk(Clk),
        .D(D),
        .PC_EX_i(PC_EX_i),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .\data_rd_reg_reg[29] (\data_rd_reg_reg[29] ),
        .\data_rd_reg_reg[29]_0 (\data_rd_reg_reg[29]_0 ),
        .\data_rd_reg_reg[29]_1 (\Using_FPGA.Native_0 [0]),
        .msr_I(msr_I),
        .register_write(register_write));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E_490 PC_OF_Buffer
       (.Address(Address),
        .Buffer_Addr(Buffer_Addr),
        .Clk(Clk),
        .IReady(IReady),
        .pc_I(pc_I));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized21 SUM_I
       (.DI(DI),
        .S(xor_Sum),
        .pc_I(pc_I));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDSE_491 \Set_DFF.PC_IF_DFF 
       (.Clk(Clk),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .pc_I(pc_I),
        .sync_reset(sync_reset));
endmodule

module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_PC_Module
   (I3,
    Address,
    I3_0,
    I3_1,
    I3_2,
    D,
    PC_EX_i,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \data_rd_reg_reg[29] ,
    msr_I,
    \data_rd_reg_reg[29]_0 ,
    register_write,
    \Using_FPGA.Native_1 ,
    jump,
    sync_reset,
    PC_Write,
    Clk,
    IReady,
    Buffer_Addr,
    \Using_FPGA.Native_2 ,
    DI);
  output I3;
  output [13:0]Address;
  output I3_0;
  output I3_1;
  output I3_2;
  output [1:0]D;
  output [13:0]PC_EX_i;
  output [13:0]\Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input \data_rd_reg_reg[29] ;
  input [1:0]msr_I;
  input \data_rd_reg_reg[29]_0 ;
  input register_write;
  input [15:0]\Using_FPGA.Native_1 ;
  input jump;
  input sync_reset;
  input PC_Write;
  input Clk;
  input IReady;
  input [2:0]Buffer_Addr;
  input \Using_FPGA.Native_2 ;
  input DI;

  wire [13:0]Address;
  wire [2:0]Buffer_Addr;
  wire Carry_10;
  wire Carry_11;
  wire Carry_12;
  wire Carry_13;
  wire Carry_14;
  wire Carry_15;
  wire Carry_3;
  wire Carry_4;
  wire Carry_5;
  wire Carry_6;
  wire Carry_7;
  wire Carry_8;
  wire Carry_9;
  wire Clk;
  wire [1:0]D;
  wire DI;
  wire I3;
  wire I3_0;
  wire I3_1;
  wire I3_2;
  wire IReady;
  wire [13:0]PC_EX_i;
  wire PC_Write;
  wire [13:0]\Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [15:0]\Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \data_rd_reg_reg[29] ;
  wire \data_rd_reg_reg[29]_0 ;
  wire jump;
  wire lopt;
  wire lopt_1;
  wire lopt_10;
  wire lopt_11;
  wire lopt_12;
  wire lopt_13;
  wire lopt_14;
  wire lopt_15;
  wire lopt_16;
  wire lopt_17;
  wire lopt_18;
  wire lopt_19;
  wire lopt_2;
  wire lopt_20;
  wire lopt_21;
  wire lopt_22;
  wire lopt_23;
  wire lopt_24;
  wire lopt_25;
  wire lopt_26;
  wire lopt_27;
  wire lopt_28;
  wire lopt_29;
  wire lopt_3;
  wire lopt_30;
  wire lopt_31;
  wire lopt_32;
  wire lopt_33;
  wire lopt_34;
  wire lopt_35;
  wire lopt_36;
  wire lopt_37;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire lopt_9;
  wire [1:0]msr_I;
  wire register_write;
  wire sync_reset;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_PC_Bit \Not_All_Bits.Using_FPGA.PC_GEN[16].PC_Bit_I 
       (.Address(Address[13]),
        .Buffer_Addr(Buffer_Addr),
        .Clk(Clk),
        .IReady(IReady),
        .LO(Carry_15),
        .PC_EX_i(PC_EX_i[13]),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native (\Using_FPGA.Native [13]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 [15]),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_2 ),
        .jump(jump),
        .lopt(lopt_36),
        .lopt_1(lopt_37),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_PC_Bit_476 \Not_All_Bits.Using_FPGA.PC_GEN[17].PC_Bit_I 
       (.Address(Address[12]),
        .Buffer_Addr(Buffer_Addr),
        .Carry_Out(Carry_15),
        .Clk(Clk),
        .IReady(IReady),
        .LO(Carry_14),
        .PC_EX_i(PC_EX_i[12]),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native (\Using_FPGA.Native [12]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 [14]),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_2 ),
        .jump(jump),
        .lopt(lopt_36),
        .lopt_1(lopt_37),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_PC_Bit_477 \Not_All_Bits.Using_FPGA.PC_GEN[18].PC_Bit_I 
       (.Address(Address[11]),
        .Buffer_Addr(Buffer_Addr),
        .Carry_Out(Carry_14),
        .Clk(Clk),
        .IReady(IReady),
        .LO(Carry_13),
        .PC_EX_i(PC_EX_i[11]),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native (\Using_FPGA.Native [11]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 [13]),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_2 ),
        .jump(jump),
        .lopt(lopt_30),
        .lopt_1(lopt_31),
        .lopt_2(lopt_32),
        .lopt_3(lopt_35),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_PC_Bit_478 \Not_All_Bits.Using_FPGA.PC_GEN[19].PC_Bit_I 
       (.Address(Address[10]),
        .Buffer_Addr(Buffer_Addr),
        .Carry_Out(Carry_13),
        .Clk(Clk),
        .IReady(IReady),
        .LO(Carry_12),
        .PC_EX_i(PC_EX_i[10]),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native (\Using_FPGA.Native [10]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 [12]),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_2 ),
        .jump(jump),
        .lopt(lopt_27),
        .lopt_1(lopt_28),
        .lopt_2(lopt_29),
        .lopt_3(lopt_34),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_PC_Bit_479 \Not_All_Bits.Using_FPGA.PC_GEN[20].PC_Bit_I 
       (.Address(Address[9]),
        .Buffer_Addr(Buffer_Addr),
        .Carry_Out(Carry_12),
        .Clk(Clk),
        .IReady(IReady),
        .LO(Carry_11),
        .PC_EX_i(PC_EX_i[9]),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native (\Using_FPGA.Native [9]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 [11]),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_2 ),
        .jump(jump),
        .lopt(lopt_24),
        .lopt_1(lopt_25),
        .lopt_2(lopt_26),
        .lopt_3(lopt_33),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_PC_Bit_480 \Not_All_Bits.Using_FPGA.PC_GEN[21].PC_Bit_I 
       (.Address(Address[8]),
        .Buffer_Addr(Buffer_Addr),
        .Carry_Out(Carry_11),
        .Clk(Clk),
        .IReady(IReady),
        .LO(Carry_10),
        .PC_EX_i(PC_EX_i[8]),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native (\Using_FPGA.Native [8]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 [10]),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_2 ),
        .jump(jump),
        .lopt(lopt_24),
        .lopt_1(lopt_25),
        .lopt_10(lopt_34),
        .lopt_11(lopt_35),
        .lopt_2(lopt_26),
        .lopt_3(lopt_27),
        .lopt_4(lopt_28),
        .lopt_5(lopt_29),
        .lopt_6(lopt_30),
        .lopt_7(lopt_31),
        .lopt_8(lopt_32),
        .lopt_9(lopt_33),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_PC_Bit_481 \Not_All_Bits.Using_FPGA.PC_GEN[22].PC_Bit_I 
       (.Address(Address[7]),
        .Buffer_Addr(Buffer_Addr),
        .Carry_Out(Carry_10),
        .Clk(Clk),
        .IReady(IReady),
        .LO(Carry_9),
        .PC_EX_i(PC_EX_i[7]),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native (\Using_FPGA.Native [7]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 [9]),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_2 ),
        .jump(jump),
        .lopt(lopt_18),
        .lopt_1(lopt_19),
        .lopt_2(lopt_20),
        .lopt_3(lopt_23),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_PC_Bit_482 \Not_All_Bits.Using_FPGA.PC_GEN[23].PC_Bit_I 
       (.Address(Address[6]),
        .Buffer_Addr(Buffer_Addr),
        .Carry_Out(Carry_9),
        .Clk(Clk),
        .IReady(IReady),
        .LO(Carry_8),
        .PC_EX_i(PC_EX_i[6]),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native (\Using_FPGA.Native [6]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 [8]),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_2 ),
        .jump(jump),
        .lopt(lopt_15),
        .lopt_1(lopt_16),
        .lopt_2(lopt_17),
        .lopt_3(lopt_22),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_PC_Bit_483 \Not_All_Bits.Using_FPGA.PC_GEN[24].PC_Bit_I 
       (.Address(Address[5]),
        .Buffer_Addr(Buffer_Addr),
        .Carry_Out(Carry_8),
        .Clk(Clk),
        .I3(I3),
        .IReady(IReady),
        .LO(Carry_7),
        .PC_EX_i(PC_EX_i[5]),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native (\Using_FPGA.Native [5]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 [7]),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_2 ),
        .jump(jump),
        .lopt(lopt_12),
        .lopt_1(lopt_13),
        .lopt_2(lopt_14),
        .lopt_3(lopt_21),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_PC_Bit_484 \Not_All_Bits.Using_FPGA.PC_GEN[25].PC_Bit_I 
       (.Address(Address[4]),
        .Buffer_Addr(Buffer_Addr),
        .Carry_Out(Carry_7),
        .Clk(Clk),
        .I3_0(I3_0),
        .IReady(IReady),
        .LO(Carry_6),
        .PC_EX_i(PC_EX_i[4]),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native (\Using_FPGA.Native [4]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 [6]),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_2 ),
        .jump(jump),
        .lopt(lopt_12),
        .lopt_1(lopt_13),
        .lopt_10(lopt_22),
        .lopt_11(lopt_23),
        .lopt_2(lopt_14),
        .lopt_3(lopt_15),
        .lopt_4(lopt_16),
        .lopt_5(lopt_17),
        .lopt_6(lopt_18),
        .lopt_7(lopt_19),
        .lopt_8(lopt_20),
        .lopt_9(lopt_21),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_PC_Bit_485 \Not_All_Bits.Using_FPGA.PC_GEN[26].PC_Bit_I 
       (.Address(Address[3]),
        .Buffer_Addr(Buffer_Addr),
        .Carry_Out(Carry_6),
        .Clk(Clk),
        .I3_1(I3_1),
        .IReady(IReady),
        .LO(Carry_5),
        .PC_EX_i(PC_EX_i[3]),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native (\Using_FPGA.Native [3]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 [5]),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_2 ),
        .jump(jump),
        .lopt(lopt_6),
        .lopt_1(lopt_7),
        .lopt_2(lopt_8),
        .lopt_3(lopt_11),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_PC_Bit_486 \Not_All_Bits.Using_FPGA.PC_GEN[27].PC_Bit_I 
       (.Address(Address[2]),
        .Buffer_Addr(Buffer_Addr),
        .Carry_Out(Carry_5),
        .Clk(Clk),
        .I3_2(I3_2),
        .IReady(IReady),
        .LO(Carry_4),
        .PC_EX_i(PC_EX_i[2]),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native (\Using_FPGA.Native [2]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 [4]),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_2 ),
        .jump(jump),
        .lopt(lopt_3),
        .lopt_1(lopt_4),
        .lopt_2(lopt_5),
        .lopt_3(lopt_10),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_PC_Bit_487 \Not_All_Bits.Using_FPGA.PC_GEN[28].PC_Bit_I 
       (.Address(Address[1]),
        .Buffer_Addr(Buffer_Addr),
        .Carry_Out(Carry_4),
        .Clk(Clk),
        .D(D[1]),
        .IReady(IReady),
        .LO(Carry_3),
        .PC_EX_i(PC_EX_i[1]),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native (\Using_FPGA.Native [1]),
        .\Using_FPGA.Native_0 ({\Using_FPGA.Native_1 [3],\Using_FPGA.Native_1 [1]}),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_2 ),
        .\data_rd_reg_reg[28] (\data_rd_reg_reg[29] ),
        .\data_rd_reg_reg[28]_0 (\data_rd_reg_reg[29]_0 ),
        .jump(jump),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_9),
        .msr_I(msr_I[1]),
        .register_write(register_write),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_PC_Bit_488 \Not_All_Bits.Using_FPGA.PC_GEN[29].PC_Bit_I 
       (.Address(Address[0]),
        .Buffer_Addr(Buffer_Addr),
        .Carry_Out(Carry_3),
        .Clk(Clk),
        .D(D[0]),
        .DI(DI),
        .IReady(IReady),
        .PC_EX_i(PC_EX_i[0]),
        .PC_Write(PC_Write),
        .\Using_FPGA.Native (\Using_FPGA.Native [0]),
        .\Using_FPGA.Native_0 ({\Using_FPGA.Native_1 [2],\Using_FPGA.Native_1 [0]}),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_2 ),
        .\data_rd_reg_reg[29] (\data_rd_reg_reg[29] ),
        .\data_rd_reg_reg[29]_0 (\data_rd_reg_reg[29]_0 ),
        .jump(jump),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_10(lopt_10),
        .lopt_11(lopt_11),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8),
        .lopt_9(lopt_9),
        .msr_I(msr_I[0]),
        .register_write(register_write),
        .sync_reset(sync_reset));
endmodule

module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_PreFetch_Buffer
   (instr_OF_raw,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    D,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    of_Valid_Raw,
    inHibit_EX_reg,
    Sext16_reg,
    Sext8_reg,
    doublet_i_reg,
    byte_i13_out,
    byte_i_reg,
    \Using_FPGA.set_BIP_I_reg ,
    mtsmsr_write_i_reg,
    \Use_Async_Reset.sync_reset_reg ,
    of_mbar_decode,
    DI,
    buffer_Full,
    D_0,
    D_1,
    D_2,
    D_3,
    D_4,
    D_5,
    D_6,
    D_7,
    D_8,
    D_9,
    D_10,
    D_11,
    D_12,
    D_13,
    D_14,
    D_15,
    D_16,
    D_17,
    D_18,
    D_19,
    D_20,
    D_21,
    D_22,
    D_23,
    D_24,
    D_25,
    D_26,
    D_27,
    D_28,
    D_29,
    D_30,
    D_31,
    \Using_FPGA.Native_4 ,
    \Using_FPGA.Native_5 ,
    \Using_FPGA.Native_6 ,
    \Using_FPGA.Native_7 ,
    \Using_FPGA.Native_8 ,
    \Using_FPGA.Native_9 ,
    force1_i27_out,
    Reg_Test_Equal_i,
    Reg_Test_Equal_N_i7_out,
    use_Reg_Neg_DI_i24_out,
    force2_i,
    force_Val1_i25_out,
    use_Reg_Neg_S_i26_out,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    \Using_FPGA.Native_10 ,
    \Using_FPGA.Native_11 ,
    D_32,
    \Using_FPGA.Native_12 ,
    \Using_FPGA.Native_13 ,
    E,
    \Using_FPGA.Native_14 ,
    enable_Interrupts_I,
    reset_BIP_I8_out,
    mbar_first,
    \Area_Debug_Control.normal_stop_cmd_hold_reg ,
    \Serial_Dbg_Intf.control_reg_reg[8] ,
    \Using_FPGA.Native_15 ,
    \Using_FPGA.Native_16 ,
    d_AS_I16_out,
    mul_Executing_reg,
    writing,
    \Using_FPGA.Native_17 ,
    mbar_is_sleep0,
    dbg_pause_reg,
    \Use_Async_Reset.sync_reset_reg_0 ,
    \Using_FPGA.Native_18 ,
    \Using_FPGA.Native_19 ,
    \Using_FPGA.Native_20 ,
    CI,
    Y,
    Clk,
    S,
    inHibit_EX,
    IReady1_out,
    nonvalid_IFetch_n_reg,
    nonvalid_IFetch_n_reg_0,
    nonvalid_IFetch_n_reg_1,
    sext16,
    byte_i_reg_0,
    Sext8_reg_0,
    Sext8_reg_1,
    isdoublet,
    sync_reset,
    isbyte,
    take_Intr_Now_III,
    \Using_FPGA.set_BIP_I_reg_0 ,
    mtsmsr_write_i_reg_0,
    mbar_hold_I_reg,
    ex_Valid,
    \Using_FPGA.Native_I1 ,
    missed_IFetch,
    \Using_FPGA.Native_21 ,
    \Using_FPGA.Native_22 ,
    \Using_FPGA.Native_23 ,
    \Using_FPGA.Native_24 ,
    \Using_FPGA.Native_25 ,
    \Using_FPGA.Native_26 ,
    \Using_FPGA.Native_27 ,
    \Using_FPGA.Native_28 ,
    \Using_FPGA.Native_29 ,
    \Using_FPGA.Native_30 ,
    \Using_FPGA.Native_31 ,
    \Using_FPGA.Native_32 ,
    \Using_FPGA.Native_33 ,
    \Using_FPGA.Native_34 ,
    \Using_FPGA.Native_35 ,
    \Using_FPGA.Native_36 ,
    \Using_FPGA.Native_37 ,
    \Using_FPGA.Native_38 ,
    \Using_FPGA.Native_39 ,
    \Using_FPGA.Native_40 ,
    \Using_FPGA.Native_41 ,
    \Using_FPGA.Native_42 ,
    \Using_FPGA.Native_43 ,
    \Using_FPGA.Native_44 ,
    \Using_FPGA.Native_45 ,
    \Using_FPGA.Native_46 ,
    \Using_FPGA.Native_47 ,
    \Using_FPGA.Native_48 ,
    \Using_FPGA.Native_49 ,
    \Using_FPGA.Native_50 ,
    \Using_FPGA.Native_51 ,
    \Using_FPGA.Native_52 ,
    \Using_FPGA.Native_53 ,
    \Using_FPGA.Native_54 ,
    take_Intr_Now_II,
    \Using_FPGA.Native_55 ,
    S89_out,
    dbg_pause,
    ok_To_Stop,
    mul_Executing_reg_0,
    \Using_FPGA.Native_56 ,
    mul_Executing,
    ex_Valid_reg,
    ex_Valid_reg_0,
    jump_Carry2,
    trace_jump_taken_i_reg,
    \Area_Debug_Control.dbg_brki_hit_i_2 ,
    \Using_FPGA.Native_57 ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6);
  output [10:0]instr_OF_raw;
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  output \Using_FPGA.Native_1 ;
  output [18:0]D;
  output \Using_FPGA.Native_2 ;
  output \Using_FPGA.Native_3 ;
  output of_Valid_Raw;
  output inHibit_EX_reg;
  output Sext16_reg;
  output Sext8_reg;
  output doublet_i_reg;
  output byte_i13_out;
  output byte_i_reg;
  output \Using_FPGA.set_BIP_I_reg ;
  output mtsmsr_write_i_reg;
  output \Use_Async_Reset.sync_reset_reg ;
  output of_mbar_decode;
  output DI;
  output buffer_Full;
  output D_0;
  output D_1;
  output D_2;
  output D_3;
  output D_4;
  output D_5;
  output D_6;
  output D_7;
  output D_8;
  output D_9;
  output D_10;
  output D_11;
  output D_12;
  output D_13;
  output D_14;
  output D_15;
  output D_16;
  output D_17;
  output D_18;
  output D_19;
  output D_20;
  output D_21;
  output D_22;
  output D_23;
  output D_24;
  output D_25;
  output D_26;
  output D_27;
  output D_28;
  output D_29;
  output D_30;
  output D_31;
  output \Using_FPGA.Native_4 ;
  output \Using_FPGA.Native_5 ;
  output \Using_FPGA.Native_6 ;
  output \Using_FPGA.Native_7 ;
  output \Using_FPGA.Native_8 ;
  output \Using_FPGA.Native_9 ;
  output force1_i27_out;
  output Reg_Test_Equal_i;
  output Reg_Test_Equal_N_i7_out;
  output use_Reg_Neg_DI_i24_out;
  output force2_i;
  output force_Val1_i25_out;
  output use_Reg_Neg_S_i26_out;
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  output \Using_FPGA.Native_10 ;
  output \Using_FPGA.Native_11 ;
  output D_32;
  output \Using_FPGA.Native_12 ;
  output \Using_FPGA.Native_13 ;
  output [0:0]E;
  output \Using_FPGA.Native_14 ;
  output enable_Interrupts_I;
  output reset_BIP_I8_out;
  output mbar_first;
  output \Area_Debug_Control.normal_stop_cmd_hold_reg ;
  output \Serial_Dbg_Intf.control_reg_reg[8] ;
  output \Using_FPGA.Native_15 ;
  output \Using_FPGA.Native_16 ;
  output d_AS_I16_out;
  output mul_Executing_reg;
  output writing;
  output \Using_FPGA.Native_17 ;
  output mbar_is_sleep0;
  output dbg_pause_reg;
  output [1:0]\Use_Async_Reset.sync_reset_reg_0 ;
  output \Using_FPGA.Native_18 ;
  output \Using_FPGA.Native_19 ;
  output \Using_FPGA.Native_20 ;
  input CI;
  input [0:31]Y;
  input Clk;
  input S;
  input inHibit_EX;
  input IReady1_out;
  input nonvalid_IFetch_n_reg;
  input nonvalid_IFetch_n_reg_0;
  input nonvalid_IFetch_n_reg_1;
  input sext16;
  input byte_i_reg_0;
  input Sext8_reg_0;
  input Sext8_reg_1;
  input isdoublet;
  input sync_reset;
  input isbyte;
  input take_Intr_Now_III;
  input \Using_FPGA.set_BIP_I_reg_0 ;
  input mtsmsr_write_i_reg_0;
  input mbar_hold_I_reg;
  input ex_Valid;
  input \Using_FPGA.Native_I1 ;
  input missed_IFetch;
  input \Using_FPGA.Native_21 ;
  input [15:0]\Using_FPGA.Native_22 ;
  input \Using_FPGA.Native_23 ;
  input \Using_FPGA.Native_24 ;
  input \Using_FPGA.Native_25 ;
  input \Using_FPGA.Native_26 ;
  input \Using_FPGA.Native_27 ;
  input \Using_FPGA.Native_28 ;
  input \Using_FPGA.Native_29 ;
  input \Using_FPGA.Native_30 ;
  input \Using_FPGA.Native_31 ;
  input \Using_FPGA.Native_32 ;
  input \Using_FPGA.Native_33 ;
  input \Using_FPGA.Native_34 ;
  input \Using_FPGA.Native_35 ;
  input \Using_FPGA.Native_36 ;
  input \Using_FPGA.Native_37 ;
  input \Using_FPGA.Native_38 ;
  input \Using_FPGA.Native_39 ;
  input \Using_FPGA.Native_40 ;
  input \Using_FPGA.Native_41 ;
  input \Using_FPGA.Native_42 ;
  input \Using_FPGA.Native_43 ;
  input \Using_FPGA.Native_44 ;
  input \Using_FPGA.Native_45 ;
  input \Using_FPGA.Native_46 ;
  input \Using_FPGA.Native_47 ;
  input \Using_FPGA.Native_48 ;
  input \Using_FPGA.Native_49 ;
  input \Using_FPGA.Native_50 ;
  input \Using_FPGA.Native_51 ;
  input \Using_FPGA.Native_52 ;
  input \Using_FPGA.Native_53 ;
  input \Using_FPGA.Native_54 ;
  input take_Intr_Now_II;
  input \Using_FPGA.Native_55 ;
  input S89_out;
  input dbg_pause;
  input ok_To_Stop;
  input mul_Executing_reg_0;
  input \Using_FPGA.Native_56 ;
  input mul_Executing;
  input ex_Valid_reg;
  input ex_Valid_reg_0;
  input jump_Carry2;
  input trace_jump_taken_i_reg;
  input [0:0]\Area_Debug_Control.dbg_brki_hit_i_2 ;
  input \Using_FPGA.Native_57 ;
  input lopt;
  input lopt_1;
  output lopt_2;
  input lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;

  wire [0:0]\Area_Debug_Control.dbg_brki_hit_i_2 ;
  wire \Area_Debug_Control.normal_stop_cmd_hold_reg ;
  wire \Buffer_DFFs[1].FDS_I_n_2 ;
  wire CI;
  wire Clk;
  wire [18:0]D;
  wire DI;
  wire D_0;
  wire D_1;
  wire D_10;
  wire D_11;
  wire D_12;
  wire D_13;
  wire D_14;
  wire D_15;
  wire D_16;
  wire D_17;
  wire D_18;
  wire D_19;
  wire D_2;
  wire D_20;
  wire D_21;
  wire D_22;
  wire D_23;
  wire D_24;
  wire D_25;
  wire D_26;
  wire D_27;
  wire D_28;
  wire D_29;
  wire D_3;
  wire D_30;
  wire D_31;
  wire D_32;
  wire D_33;
  wire D_4;
  wire D_5;
  wire D_6;
  wire D_7;
  wire D_8;
  wire D_9;
  wire [0:0]E;
  wire IReady1_out;
  wire \PreFetch_Buffers[0].SRL16E_I_n_5 ;
  wire \PreFetch_Buffers[13].SRL16E_I_n_1 ;
  wire \PreFetch_Buffers[21].SRL16E_I_n_2 ;
  wire \PreFetch_Buffers[22].SRL16E_I_n_2 ;
  wire \PreFetch_Buffers[26].SRL16E_I_n_5 ;
  wire \PreFetch_Buffers[29].SRL16E_I_n_2 ;
  wire \PreFetch_Buffers[29].SRL16E_I_n_3 ;
  wire \PreFetch_Buffers[2].SRL16E_I_n_1 ;
  wire \PreFetch_Buffers[2].SRL16E_I_n_2 ;
  wire \PreFetch_Buffers[2].SRL16E_I_n_6 ;
  wire \PreFetch_Buffers[3].SRL16E_I_n_1 ;
  wire \PreFetch_Buffers[3].SRL16E_I_n_2 ;
  wire \PreFetch_Buffers[3].SRL16E_I_n_5 ;
  wire \PreFetch_Buffers[4].SRL16E_I_n_3 ;
  wire Reg_Test_Equal_N_i7_out;
  wire Reg_Test_Equal_i;
  wire S;
  wire S0_out;
  wire S89_out;
  wire \Serial_Dbg_Intf.control_reg_reg[8] ;
  wire Sext16_reg;
  wire Sext8_reg;
  wire Sext8_reg_0;
  wire Sext8_reg_1;
  wire \Use_Async_Reset.sync_reset_reg ;
  wire [1:0]\Use_Async_Reset.sync_reset_reg_0 ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_10 ;
  wire \Using_FPGA.Native_11 ;
  wire \Using_FPGA.Native_12 ;
  wire \Using_FPGA.Native_13 ;
  wire \Using_FPGA.Native_14 ;
  wire \Using_FPGA.Native_15 ;
  wire \Using_FPGA.Native_16 ;
  wire \Using_FPGA.Native_17 ;
  wire \Using_FPGA.Native_18 ;
  wire \Using_FPGA.Native_19 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_20 ;
  wire \Using_FPGA.Native_21 ;
  wire [15:0]\Using_FPGA.Native_22 ;
  wire \Using_FPGA.Native_23 ;
  wire \Using_FPGA.Native_24 ;
  wire \Using_FPGA.Native_25 ;
  wire \Using_FPGA.Native_26 ;
  wire \Using_FPGA.Native_27 ;
  wire \Using_FPGA.Native_28 ;
  wire \Using_FPGA.Native_29 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_30 ;
  wire \Using_FPGA.Native_31 ;
  wire \Using_FPGA.Native_32 ;
  wire \Using_FPGA.Native_33 ;
  wire \Using_FPGA.Native_34 ;
  wire \Using_FPGA.Native_35 ;
  wire \Using_FPGA.Native_36 ;
  wire \Using_FPGA.Native_37 ;
  wire \Using_FPGA.Native_38 ;
  wire \Using_FPGA.Native_39 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_40 ;
  wire \Using_FPGA.Native_41 ;
  wire \Using_FPGA.Native_42 ;
  wire \Using_FPGA.Native_43 ;
  wire \Using_FPGA.Native_44 ;
  wire \Using_FPGA.Native_45 ;
  wire \Using_FPGA.Native_46 ;
  wire \Using_FPGA.Native_47 ;
  wire \Using_FPGA.Native_48 ;
  wire \Using_FPGA.Native_49 ;
  wire \Using_FPGA.Native_5 ;
  wire \Using_FPGA.Native_50 ;
  wire \Using_FPGA.Native_51 ;
  wire \Using_FPGA.Native_52 ;
  wire \Using_FPGA.Native_53 ;
  wire \Using_FPGA.Native_54 ;
  wire \Using_FPGA.Native_55 ;
  wire \Using_FPGA.Native_56 ;
  wire \Using_FPGA.Native_57 ;
  wire \Using_FPGA.Native_6 ;
  wire \Using_FPGA.Native_7 ;
  wire \Using_FPGA.Native_8 ;
  wire \Using_FPGA.Native_9 ;
  wire \Using_FPGA.Native_I1 ;
  wire \Using_FPGA.set_BIP_I_reg ;
  wire \Using_FPGA.set_BIP_I_reg_0 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:31]Y;
  wire buffer_Addr_Carry_1;
  wire buffer_Addr_Carry_2;
  wire buffer_Addr_S_I_0;
  wire buffer_Addr_S_I_1;
  wire buffer_Addr_S_I_2;
  wire buffer_Full;
  wire byte_i13_out;
  wire byte_i_reg;
  wire byte_i_reg_0;
  wire d_AS_I16_out;
  wire dbg_pause;
  wire dbg_pause_reg;
  wire doublet_i_reg;
  wire enable_Interrupts_I;
  wire ex_Valid;
  wire ex_Valid_reg;
  wire ex_Valid_reg_0;
  wire force1_i27_out;
  wire force2_i;
  wire force_Val1_i25_out;
  wire inHibit_EX;
  wire inHibit_EX_reg;
  wire [10:0]instr_OF_raw;
  wire isbyte;
  wire isdoublet;
  wire jump_Carry2;
  wire lopt;
  wire lopt_1;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire mbar_first;
  wire mbar_hold_I_reg;
  wire mbar_is_sleep0;
  wire missed_IFetch;
  wire mtsmsr_write_i_reg;
  wire mtsmsr_write_i_reg_0;
  wire mul_Executing;
  wire mul_Executing_reg;
  wire mul_Executing_reg_0;
  wire nonvalid_IFetch_n_reg;
  wire nonvalid_IFetch_n_reg_0;
  wire nonvalid_IFetch_n_reg_1;
  wire of_Valid_Raw;
  wire of_mbar_decode;
  wire ok_To_Stop;
  wire reset_BIP_I8_out;
  wire sext16;
  wire sync_reset;
  wire take_Intr_Now_II;
  wire take_Intr_Now_III;
  wire trace_jump_taken_i_reg;
  wire use_Reg_Neg_DI_i24_out;
  wire use_Reg_Neg_S_i26_out;
  wire writing;

  assign \^lopt_2  = lopt_3;
  assign \^lopt_3  = lopt_4;
  assign \^lopt_4  = lopt_5;
  assign lopt_2 = S0_out;
  assign lopt_6 = \Buffer_DFFs[1].FDS_I_n_2 ;
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FDS \Buffer_DFFs[1].FDS_I 
       (.Clk(Clk),
        .DI(DI),
        .S(S),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_1 (\Buffer_DFFs[1].FDS_I_n_2 ),
        .\Using_FPGA.Native_2 (byte_i_reg_0),
        .\Using_FPGA.Native_I1 (mbar_hold_I_reg),
        .\Using_FPGA.Native_I1_0 (\Using_FPGA.Native_I1 ),
        .\Using_FPGA.Native_I1_1 (of_Valid_Raw),
        .buffer_Addr_S_I_2(buffer_Addr_S_I_2),
        .ex_Valid(ex_Valid),
        .missed_IFetch(missed_IFetch));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_XORCY \Buffer_DFFs[1].MUXCY_XOR_I 
       (.LO(buffer_Addr_Carry_2),
        .\Using_FPGA.Native (\Buffer_DFFs[1].FDS_I_n_2 ),
        .buffer_Addr_S_I_2(buffer_Addr_S_I_2),
        .lopt(\^lopt_4 ));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FDS_92 \Buffer_DFFs[2].FDS_I 
       (.Clk(Clk),
        .O(buffer_Addr_S_I_1),
        .S(S),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (S0_out),
        .\Using_FPGA.Native_2 (byte_i_reg_0));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_XORCY_93 \Buffer_DFFs[2].MUXCY_XOR_I 
       (.LO(buffer_Addr_Carry_2),
        .O(buffer_Addr_S_I_1),
        .S(S0_out),
        .\Using_FPGA.Native (byte_i_reg_0),
        .\Using_FPGA.Native_0 (buffer_Addr_Carry_1),
        .lopt(lopt_1),
        .lopt_1(\^lopt_3 ));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FDS_94 \Buffer_DFFs[3].FDS_I 
       (.Clk(Clk),
        .O(buffer_Addr_S_I_0),
        .S(S),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_XORCY_95 \Buffer_DFFs[3].MUXCY_XOR_I 
       (.CI(CI),
        .LO(buffer_Addr_Carry_1),
        .O(buffer_Addr_S_I_0),
        .\Using_FPGA.Native (\Using_FPGA.Native_57 ),
        .\Using_FPGA.Native_0 (byte_i_reg_0),
        .lopt(lopt),
        .lopt_1(\^lopt_2 ));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E \PreFetch_Buffers[0].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .\Result_Sel_reg[0] (\Using_FPGA.Native ),
        .\Result_Sel_reg[0]_0 (\Using_FPGA.Native_0 ),
        .\Result_Sel_reg[0]_1 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native (instr_OF_raw[10]),
        .\Using_FPGA.Native_0 (force2_i),
        .\Using_FPGA.Native_1 (\PreFetch_Buffers[0].SRL16E_I_n_5 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_17 ),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_18 ),
        .\Using_FPGA.Native_4 (instr_OF_raw[1]),
        .\Using_FPGA.Native_5 (instr_OF_raw[2]),
        .\Using_FPGA.Native_6 (instr_OF_raw[0]),
        .\Using_FPGA.Native_7 (instr_OF_raw[7]),
        .\Using_FPGA.Native_8 (instr_OF_raw[5]),
        .\Using_FPGA.Native_9 (instr_OF_raw[6]),
        .Y(Y[0]),
        .d_AS_I16_out(d_AS_I16_out),
        .d_AS_I_reg(instr_OF_raw[9]),
        .d_AS_I_reg_0(byte_i_reg_0),
        .d_AS_I_reg_1(nonvalid_IFetch_n_reg_0),
        .force_Val1_i25_out(force_Val1_i25_out),
        .inHibit_EX(inHibit_EX),
        .take_Intr_Now_III(take_Intr_Now_III),
        .use_Reg_Neg_DI_i24_out(use_Reg_Neg_DI_i24_out),
        .use_Reg_Neg_S_i26_out(use_Reg_Neg_S_i26_out));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E_96 \PreFetch_Buffers[10].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .Reg_Test_Equal_i(Reg_Test_Equal_i),
        .\Use_Async_Reset.sync_reset_reg (\Use_Async_Reset.sync_reset_reg_0 [0]),
        .\Using_FPGA.Native (instr_OF_raw[0]),
        .\Using_FPGA.Native_0 (instr_OF_raw[2]),
        .\Using_FPGA.Native_1 (instr_OF_raw[1]),
        .\Using_FPGA.Native_2 (\PreFetch_Buffers[4].SRL16E_I_n_3 ),
        .\Using_FPGA.enable_Interrupts_I_reg (\PreFetch_Buffers[2].SRL16E_I_n_6 ),
        .Y(Y[10]),
        .enable_Interrupts_I(enable_Interrupts_I),
        .\instr_EX_i_reg[10] (\Using_FPGA.Native ),
        .\instr_EX_i_reg[10]_0 (\Using_FPGA.Native_0 ),
        .\instr_EX_i_reg[10]_1 (\Using_FPGA.Native_1 ),
        .sync_reset(sync_reset),
        .take_Intr_Now_III(take_Intr_Now_III));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E_97 \PreFetch_Buffers[11].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .\Using_FPGA.Native (D[18]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_13 ),
        .Y(Y[11]),
        .\instr_EX_i_reg[11] (\Using_FPGA.Native ),
        .\instr_EX_i_reg[11]_0 (\Using_FPGA.Native_0 ),
        .\instr_EX_i_reg[11]_1 (\Using_FPGA.Native_1 ),
        .jump2_I_reg(instr_OF_raw[5]),
        .jump2_I_reg_0(instr_OF_raw[4]),
        .jump2_I_reg_1(\PreFetch_Buffers[3].SRL16E_I_n_2 ),
        .jump2_I_reg_2(instr_OF_raw[6]),
        .jump2_I_reg_3(instr_OF_raw[8]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E_98 \PreFetch_Buffers[12].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .D_32(D_32),
        .\Using_FPGA.Native (D[17]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_11 ),
        .\Using_FPGA.Native_1 (instr_OF_raw[7]),
        .\Using_FPGA.Native_2 (instr_OF_raw[9]),
        .\Using_FPGA.Native_3 (instr_OF_raw[10]),
        .\Using_FPGA.Native_4 (instr_OF_raw[6]),
        .\Using_FPGA.Native_5 (instr_OF_raw[5]),
        .\Using_FPGA.Native_6 (\Using_FPGA.Native_55 ),
        .\Using_FPGA.set_BIP_I_reg (\Using_FPGA.set_BIP_I_reg ),
        .\Using_FPGA.set_BIP_I_reg_0 (\Using_FPGA.set_BIP_I_reg_0 ),
        .\Using_FPGA.set_BIP_I_reg_1 (\PreFetch_Buffers[3].SRL16E_I_n_1 ),
        .\Using_FPGA.set_BIP_I_reg_2 (byte_i_reg_0),
        .\Using_FPGA.set_BIP_I_reg_3 (D[16]),
        .\Using_FPGA.set_BIP_I_reg_4 (D[18]),
        .Y(Y[12]),
        .\instr_EX_i_reg[12] (\Using_FPGA.Native ),
        .\instr_EX_i_reg[12]_0 (\Using_FPGA.Native_0 ),
        .\instr_EX_i_reg[12]_1 (\Using_FPGA.Native_1 ),
        .sync_reset(sync_reset),
        .take_Intr_Now_III(take_Intr_Now_III));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E_99 \PreFetch_Buffers[13].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .\Using_FPGA.Native (D[16]),
        .\Using_FPGA.Native_0 (\PreFetch_Buffers[13].SRL16E_I_n_1 ),
        .Y(Y[13]),
        .\instr_EX_i_reg[13] (\Using_FPGA.Native ),
        .\instr_EX_i_reg[13]_0 (\Using_FPGA.Native_0 ),
        .\instr_EX_i_reg[13]_1 (\Using_FPGA.Native_1 ),
        .write_Reg_i_2(instr_OF_raw[5]),
        .write_Reg_i_2_0(instr_OF_raw[6]),
        .write_Reg_i_2_1(instr_OF_raw[10]),
        .write_Reg_i_2_2(instr_OF_raw[9]),
        .write_Reg_i_2_3(instr_OF_raw[7]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E_100 \PreFetch_Buffers[14].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .D(D[15]),
        .\Use_Async_Reset.sync_reset_reg (\Use_Async_Reset.sync_reset_reg ),
        .Y(Y[14]),
        .\instr_EX_i_reg[14] (\Using_FPGA.Native ),
        .\instr_EX_i_reg[14]_0 (\Using_FPGA.Native_0 ),
        .\instr_EX_i_reg[14]_1 (\Using_FPGA.Native_1 ),
        .mbar_decode_I_reg(\PreFetch_Buffers[3].SRL16E_I_n_5 ),
        .mbar_hold_I_reg(mbar_hold_I_reg),
        .mbar_hold_I_reg_0(nonvalid_IFetch_n_reg),
        .mbar_hold_I_reg_1(byte_i_reg_0),
        .of_mbar_decode(of_mbar_decode),
        .sync_reset(sync_reset),
        .take_Intr_Now_III(take_Intr_Now_III));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E_101 \PreFetch_Buffers[15].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .D(D[14]),
        .Y(Y[15]),
        .\instr_EX_i_reg[15] (\Using_FPGA.Native ),
        .\instr_EX_i_reg[15]_0 (\Using_FPGA.Native_0 ),
        .\instr_EX_i_reg[15]_1 (\Using_FPGA.Native_1 ));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E_102 \PreFetch_Buffers[16].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .D_0(D_0),
        .D_1(D_1),
        .D_10(D_10),
        .D_11(D_11),
        .D_12(D_12),
        .D_13(D_13),
        .D_14(D_14),
        .D_15(D_15),
        .D_16(D_16),
        .D_2(D_2),
        .D_3(D_3),
        .D_4(D_4),
        .D_5(D_5),
        .D_6(D_6),
        .D_7(D_7),
        .D_8(D_8),
        .D_9(D_9),
        .\Using_FPGA.Native (D[13]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_21 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_22 ),
        .\Using_FPGA.Native_10 (\Using_FPGA.Native_30 ),
        .\Using_FPGA.Native_11 (\Using_FPGA.Native_31 ),
        .\Using_FPGA.Native_12 (\Using_FPGA.Native_32 ),
        .\Using_FPGA.Native_13 (\Using_FPGA.Native_33 ),
        .\Using_FPGA.Native_14 (\Using_FPGA.Native_34 ),
        .\Using_FPGA.Native_15 (\Using_FPGA.Native_35 ),
        .\Using_FPGA.Native_16 (\Using_FPGA.Native_36 ),
        .\Using_FPGA.Native_17 (\Using_FPGA.Native_37 ),
        .\Using_FPGA.Native_18 (\Using_FPGA.Native_38 ),
        .\Using_FPGA.Native_19 (\Using_FPGA.Native_39 ),
        .\Using_FPGA.Native_2 (\PreFetch_Buffers[2].SRL16E_I_n_1 ),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_23 ),
        .\Using_FPGA.Native_4 (\Using_FPGA.Native_24 ),
        .\Using_FPGA.Native_5 (\Using_FPGA.Native_25 ),
        .\Using_FPGA.Native_6 (\Using_FPGA.Native_26 ),
        .\Using_FPGA.Native_7 (\Using_FPGA.Native_27 ),
        .\Using_FPGA.Native_8 (\Using_FPGA.Native_28 ),
        .\Using_FPGA.Native_9 (\Using_FPGA.Native_29 ),
        .Y(Y[16]),
        .\instr_EX_i_reg[16] (\Using_FPGA.Native ),
        .\instr_EX_i_reg[16]_0 (\Using_FPGA.Native_0 ),
        .\instr_EX_i_reg[16]_1 (\Using_FPGA.Native_1 ));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E_103 \PreFetch_Buffers[17].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .D_17(D_17),
        .\Using_FPGA.Native (D[12]),
        .\Using_FPGA.Native_0 (\PreFetch_Buffers[2].SRL16E_I_n_1 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_40 ),
        .Y(Y[17]),
        .\instr_EX_i_reg[17] (\Using_FPGA.Native ),
        .\instr_EX_i_reg[17]_0 (\Using_FPGA.Native_0 ),
        .\instr_EX_i_reg[17]_1 (\Using_FPGA.Native_1 ),
        .mtsmsr_write_i_reg(mtsmsr_write_i_reg),
        .mtsmsr_write_i_reg_0(mtsmsr_write_i_reg_0),
        .mtsmsr_write_i_reg_1(byte_i_reg_0),
        .mtsmsr_write_i_reg_2(D[0]),
        .mtsmsr_write_i_reg_3(\PreFetch_Buffers[2].SRL16E_I_n_2 ));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E_104 \PreFetch_Buffers[18].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .D(D[11]),
        .D_18(D_18),
        .\Using_FPGA.Native (\PreFetch_Buffers[2].SRL16E_I_n_1 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_41 ),
        .Y(Y[18]),
        .\instr_EX_i_reg[18] (\Using_FPGA.Native ),
        .\instr_EX_i_reg[18]_0 (\Using_FPGA.Native_0 ),
        .\instr_EX_i_reg[18]_1 (\Using_FPGA.Native_1 ));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E_105 \PreFetch_Buffers[19].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .D(D[10]),
        .D_19(D_19),
        .\Using_FPGA.Native (\PreFetch_Buffers[2].SRL16E_I_n_1 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_42 ),
        .Y(Y[19]),
        .\instr_EX_i_reg[19] (\Using_FPGA.Native ),
        .\instr_EX_i_reg[19]_0 (\Using_FPGA.Native_0 ),
        .\instr_EX_i_reg[19]_1 (\Using_FPGA.Native_1 ));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E_106 \PreFetch_Buffers[1].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .\Result_Sel_reg[1] (\Using_FPGA.Native ),
        .\Result_Sel_reg[1]_0 (\Using_FPGA.Native_0 ),
        .\Result_Sel_reg[1]_1 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native (instr_OF_raw[9]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_15 ),
        .Y(Y[1]),
        .byte_i13_out(byte_i13_out),
        .byte_i_reg(byte_i_reg_0),
        .is_swx_I_reg(instr_OF_raw[5]),
        .is_swx_I_reg_0(instr_OF_raw[6]),
        .is_swx_I_reg_1(D[8]),
        .is_swx_I_reg_2(instr_OF_raw[8]),
        .take_Intr_Now_III(take_Intr_Now_III),
        .writing(writing),
        .writing_reg(instr_OF_raw[10]),
        .writing_reg_0(instr_OF_raw[7]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E_107 \PreFetch_Buffers[20].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .D(D[9]),
        .D_20(D_20),
        .\Using_FPGA.Native (\PreFetch_Buffers[2].SRL16E_I_n_1 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_43 ),
        .Y(Y[20]),
        .\instr_EX_i_reg[20] (\Using_FPGA.Native ),
        .\instr_EX_i_reg[20]_0 (\Using_FPGA.Native_0 ),
        .\instr_EX_i_reg[20]_1 (\Using_FPGA.Native_1 ));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E_108 \PreFetch_Buffers[21].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .D(D[13:9]),
        .D_21(D_21),
        .\Using_FPGA.Native (D[8]),
        .\Using_FPGA.Native_0 (\PreFetch_Buffers[21].SRL16E_I_n_2 ),
        .\Using_FPGA.Native_1 (\PreFetch_Buffers[2].SRL16E_I_n_1 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_44 ),
        .Y(Y[21]),
        .\instr_EX_i_reg[21] (\Using_FPGA.Native ),
        .\instr_EX_i_reg[21]_0 (\Using_FPGA.Native_0 ),
        .\instr_EX_i_reg[21]_1 (\Using_FPGA.Native_1 ));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E_109 \PreFetch_Buffers[22].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .D(D[7]),
        .D_22(D_22),
        .\Using_FPGA.Native (\PreFetch_Buffers[22].SRL16E_I_n_2 ),
        .\Using_FPGA.Native_0 (\PreFetch_Buffers[2].SRL16E_I_n_1 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_45 ),
        .\Using_FPGA.Native_i_6 (D[6:4]),
        .Y(Y[22]),
        .\instr_EX_i_reg[22] (\Using_FPGA.Native ),
        .\instr_EX_i_reg[22]_0 (\Using_FPGA.Native_0 ),
        .\instr_EX_i_reg[22]_1 (\Using_FPGA.Native_1 ));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E_110 \PreFetch_Buffers[23].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .D(D[6]),
        .D_23(D_23),
        .\Using_FPGA.Native (\PreFetch_Buffers[2].SRL16E_I_n_1 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_46 ),
        .Y(Y[23]),
        .\instr_EX_i_reg[23] (\Using_FPGA.Native ),
        .\instr_EX_i_reg[23]_0 (\Using_FPGA.Native_0 ),
        .\instr_EX_i_reg[23]_1 (\Using_FPGA.Native_1 ));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E_111 \PreFetch_Buffers[24].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .D(D[5]),
        .D_24(D_24),
        .\Using_FPGA.Native (\PreFetch_Buffers[2].SRL16E_I_n_1 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_47 ),
        .Y(Y[24]),
        .\instr_EX_i_reg[24] (\Using_FPGA.Native ),
        .\instr_EX_i_reg[24]_0 (\Using_FPGA.Native_0 ),
        .\instr_EX_i_reg[24]_1 (\Using_FPGA.Native_1 ));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E_112 \PreFetch_Buffers[25].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .D_25(D_25),
        .\Using_FPGA.Native (\Using_FPGA.Native_2 ),
        .\Using_FPGA.Native_0 (\PreFetch_Buffers[2].SRL16E_I_n_1 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_48 ),
        .Y(Y[25]),
        .\instr_EX_i_reg[25] (\Using_FPGA.Native ),
        .\instr_EX_i_reg[25]_0 (\Using_FPGA.Native_0 ),
        .\instr_EX_i_reg[25]_1 (\Using_FPGA.Native_1 ));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E_113 \PreFetch_Buffers[26].SRL16E_I 
       (.\Area_Debug_Control.dbg_brki_hit_i_2 (\Area_Debug_Control.dbg_brki_hit_i_2 ),
        .\Area_Debug_Control.dbg_brki_hit_i_2_0 (D[18]),
        .\Area_Debug_Control.normal_stop_cmd_hold_reg (\Area_Debug_Control.normal_stop_cmd_hold_reg ),
        .CI(CI),
        .Clk(Clk),
        .D(D[17:16]),
        .D_26(D_26),
        .\Serial_Dbg_Intf.control_reg_reg[8] (\PreFetch_Buffers[26].SRL16E_I_n_5 ),
        .Sext16_reg(Sext16_reg),
        .Sext16_reg_0(byte_i_reg_0),
        .Sext16_reg_1(D[0]),
        .Sext16_reg_2(Sext8_reg_0),
        .\Using_FPGA.Native (\Using_FPGA.Native_3 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_9 ),
        .\Using_FPGA.Native_1 (\PreFetch_Buffers[2].SRL16E_I_n_1 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_49 ),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_56 ),
        .\Using_FPGA.Native_4 (\PreFetch_Buffers[22].SRL16E_I_n_2 ),
        .\Using_FPGA.Native_5 (\PreFetch_Buffers[29].SRL16E_I_n_3 ),
        .\Using_FPGA.Native_6 (\PreFetch_Buffers[21].SRL16E_I_n_2 ),
        .\Using_FPGA.Native_7 (\PreFetch_Buffers[3].SRL16E_I_n_5 ),
        .Y(Y[26]),
        .\instr_EX_i_reg[26] (\Using_FPGA.Native ),
        .\instr_EX_i_reg[26]_0 (\Using_FPGA.Native_0 ),
        .\instr_EX_i_reg[26]_1 (\Using_FPGA.Native_1 ),
        .sext16(sext16),
        .write_Carry_I_reg(\Using_FPGA.Native_2 ),
        .write_Carry_I_reg_0(\Using_FPGA.Native_7 ),
        .write_Carry_I_reg_1(instr_OF_raw[7]),
        .write_Carry_I_reg_2(instr_OF_raw[9]),
        .write_Carry_I_reg_3(instr_OF_raw[10]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E_114 \PreFetch_Buffers[27].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .D(D[4]),
        .D_27(D_27),
        .\Using_FPGA.Native (\PreFetch_Buffers[2].SRL16E_I_n_1 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_50 ),
        .Y(Y[27]),
        .\instr_EX_i_reg[27] (\Using_FPGA.Native ),
        .\instr_EX_i_reg[27]_0 (\Using_FPGA.Native_0 ),
        .\instr_EX_i_reg[27]_1 (\Using_FPGA.Native_1 ));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E_115 \PreFetch_Buffers[28].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .D_28(D_28),
        .\Using_FPGA.Native (D[3]),
        .\Using_FPGA.Native_0 (\PreFetch_Buffers[2].SRL16E_I_n_1 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_51 ),
        .Y(Y[28]),
        .\instr_EX_i_reg[28] (\Using_FPGA.Native ),
        .\instr_EX_i_reg[28]_0 (\Using_FPGA.Native_0 ),
        .\instr_EX_i_reg[28]_1 (\Using_FPGA.Native_1 ));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E_116 \PreFetch_Buffers[29].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .D({D[3],D[1:0]}),
        .D_29(D_29),
        .\Using_FPGA.Native (D[2]),
        .\Using_FPGA.Native_0 (\PreFetch_Buffers[29].SRL16E_I_n_2 ),
        .\Using_FPGA.Native_1 (\PreFetch_Buffers[29].SRL16E_I_n_3 ),
        .\Using_FPGA.Native_2 (\PreFetch_Buffers[2].SRL16E_I_n_1 ),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_52 ),
        .Y(Y[29]),
        .\instr_EX_i_reg[29] (\Using_FPGA.Native ),
        .\instr_EX_i_reg[29]_0 (\Using_FPGA.Native_0 ),
        .\instr_EX_i_reg[29]_1 (\Using_FPGA.Native_1 ));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E_117 \PreFetch_Buffers[2].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .Compare_Instr_reg(instr_OF_raw[9]),
        .Compare_Instr_reg_0(instr_OF_raw[10]),
        .D(D[0]),
        .\Using_FPGA.Native (instr_OF_raw[8]),
        .\Using_FPGA.Native_0 (\PreFetch_Buffers[2].SRL16E_I_n_1 ),
        .\Using_FPGA.Native_1 (\PreFetch_Buffers[2].SRL16E_I_n_2 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_5 ),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_7 ),
        .\Using_FPGA.Native_4 (\Using_FPGA.Native_8 ),
        .\Using_FPGA.Native_5 (\PreFetch_Buffers[2].SRL16E_I_n_6 ),
        .\Using_FPGA.Native_6 (\Using_FPGA.Native_20 ),
        .\Using_FPGA.reset_BIP_I_reg (instr_OF_raw[7]),
        .\Using_FPGA.reset_BIP_I_reg_0 (instr_OF_raw[6]),
        .\Using_FPGA.reset_BIP_I_reg_1 (instr_OF_raw[5]),
        .Y(Y[2]),
        .\instr_EX_i_reg[2] (\Using_FPGA.Native ),
        .\instr_EX_i_reg[2]_0 (\Using_FPGA.Native_0 ),
        .\instr_EX_i_reg[2]_1 (\Using_FPGA.Native_1 ),
        .take_Intr_Now_II(take_Intr_Now_II),
        .write_Reg_reg(\PreFetch_Buffers[13].SRL16E_I_n_1 ),
        .write_Reg_reg_0(\Using_FPGA.Native_6 ),
        .write_Reg_reg_1(D[12]),
        .write_Reg_reg_2(\PreFetch_Buffers[29].SRL16E_I_n_2 ));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E_118 \PreFetch_Buffers[30].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .D(D[1]),
        .D_30(D_30),
        .\Using_FPGA.Native (\PreFetch_Buffers[2].SRL16E_I_n_1 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_53 ),
        .Y(Y[30]),
        .\instr_EX_i_reg[30] (\Using_FPGA.Native ),
        .\instr_EX_i_reg[30]_0 (\Using_FPGA.Native_0 ),
        .\instr_EX_i_reg[30]_1 (\Using_FPGA.Native_1 ));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E_119 \PreFetch_Buffers[31].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .D(D[0]),
        .D_31(D_31),
        .Sext8_reg(Sext8_reg),
        .Sext8_reg_0(Sext8_reg_1),
        .Sext8_reg_1(byte_i_reg_0),
        .Sext8_reg_2(\Using_FPGA.Native_3 ),
        .Sext8_reg_3(\Using_FPGA.Native_2 ),
        .Sext8_reg_4(Sext8_reg_0),
        .\Using_FPGA.Native (\PreFetch_Buffers[2].SRL16E_I_n_1 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_54 ),
        .Y(Y[31]),
        .\instr_EX_i_reg[31] (\Using_FPGA.Native ),
        .\instr_EX_i_reg[31]_0 (\Using_FPGA.Native_0 ),
        .\instr_EX_i_reg[31]_1 (\Using_FPGA.Native_1 ));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E_120 \PreFetch_Buffers[3].SRL16E_I 
       (.\Area_Debug_Control.dbg_brki_hit_reg (\PreFetch_Buffers[21].SRL16E_I_n_2 ),
        .\Area_Debug_Control.dbg_brki_hit_reg_0 (\PreFetch_Buffers[29].SRL16E_I_n_3 ),
        .\Area_Debug_Control.dbg_brki_hit_reg_1 (\PreFetch_Buffers[22].SRL16E_I_n_2 ),
        .\Area_Debug_Control.dbg_brki_hit_reg_2 (\PreFetch_Buffers[26].SRL16E_I_n_5 ),
        .CI(CI),
        .Clk(Clk),
        .D(D[15]),
        .\Serial_Dbg_Intf.control_reg_reg[8] (\Serial_Dbg_Intf.control_reg_reg[8] ),
        .\Using_FPGA.Native (instr_OF_raw[7]),
        .\Using_FPGA.Native_0 (\PreFetch_Buffers[3].SRL16E_I_n_1 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_14 ),
        .\Using_FPGA.Native_2 (\PreFetch_Buffers[3].SRL16E_I_n_5 ),
        .Y(Y[3]),
        .inHibit_EX(inHibit_EX),
        .inHibit_EX_reg(\PreFetch_Buffers[3].SRL16E_I_n_2 ),
        .\instr_EX_i_reg[3] (\Using_FPGA.Native ),
        .\instr_EX_i_reg[3]_0 (\Using_FPGA.Native_0 ),
        .\instr_EX_i_reg[3]_1 (\Using_FPGA.Native_1 ),
        .jump2_I_reg(nonvalid_IFetch_n_reg_0),
        .mbar_first(mbar_first),
        .mul_Executing_reg(instr_OF_raw[9]),
        .mul_Executing_reg_0(instr_OF_raw[10]),
        .mul_Executing_reg_1(instr_OF_raw[6]),
        .mul_Executing_reg_2(instr_OF_raw[5]),
        .mul_Executing_reg_3(instr_OF_raw[8]),
        .mul_Executing_reg_4(mul_Executing_reg_0),
        .ok_To_Stop(ok_To_Stop));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E_121 \PreFetch_Buffers[4].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .D(D[0]),
        .Reg_Test_Equal_N_i7_out(Reg_Test_Equal_N_i7_out),
        .\Using_FPGA.Native (instr_OF_raw[6]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_4 ),
        .\Using_FPGA.Native_1 (\PreFetch_Buffers[4].SRL16E_I_n_3 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_19 ),
        .\Using_FPGA.Native_3 (instr_OF_raw[1]),
        .\Using_FPGA.Native_4 (instr_OF_raw[2]),
        .\Using_FPGA.Native_i_1__41 (\PreFetch_Buffers[3].SRL16E_I_n_1 ),
        .\Using_FPGA.Native_i_1__41_0 (D[12]),
        .\Using_FPGA.Native_i_1__41_1 (\PreFetch_Buffers[2].SRL16E_I_n_2 ),
        .Y(Y[4]),
        .byte_i13_out(byte_i13_out),
        .doublet_i_reg(doublet_i_reg),
        .doublet_i_reg_0(byte_i_reg_0),
        .doublet_i_reg_1(instr_OF_raw[5]),
        .\instr_EX_i_reg[4] (\Using_FPGA.Native ),
        .\instr_EX_i_reg[4]_0 (\Using_FPGA.Native_0 ),
        .\instr_EX_i_reg[4]_1 (\Using_FPGA.Native_1 ),
        .instr_OF_raw({instr_OF_raw[10:9],instr_OF_raw[7],instr_OF_raw[0]}),
        .isdoublet(isdoublet),
        .sync_reset(sync_reset),
        .take_Intr_Now_III(take_Intr_Now_III));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E_122 \PreFetch_Buffers[5].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .D(D[17]),
        .\Using_FPGA.Native (instr_OF_raw[5]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_6 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_10 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_16 ),
        .\Using_FPGA.Native_3 (instr_OF_raw[8]),
        .\Using_FPGA.Native_4 (\Using_FPGA.Native_55 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .Y(Y[5]),
        .byte_i13_out(byte_i13_out),
        .byte_i_reg(byte_i_reg),
        .byte_i_reg_0(byte_i_reg_0),
        .byte_i_reg_1(instr_OF_raw[6]),
        .\instr_EX_i_reg[5] (\Using_FPGA.Native ),
        .\instr_EX_i_reg[5]_0 (\Using_FPGA.Native_0 ),
        .\instr_EX_i_reg[5]_1 (\Using_FPGA.Native_1 ),
        .instr_OF_raw({instr_OF_raw[10:9],instr_OF_raw[7]}),
        .isbyte(isbyte),
        .sync_reset(sync_reset),
        .take_Intr_Now_III(take_Intr_Now_III));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E_123 \PreFetch_Buffers[6].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .S89_out(S89_out),
        .\Use_Async_Reset.sync_reset_reg (\Use_Async_Reset.sync_reset_reg_0 [1]),
        .\Using_FPGA.Native (instr_OF_raw[4]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_12 ),
        .Y(Y[6]),
        .inHibit_EX_reg(instr_OF_raw[5]),
        .inHibit_EX_reg_0(D[18]),
        .inHibit_EX_reg_1(instr_OF_raw[6]),
        .inHibit_EX_reg_2(\PreFetch_Buffers[0].SRL16E_I_n_5 ),
        .\instr_EX_i_reg[6] (\Using_FPGA.Native ),
        .\instr_EX_i_reg[6]_0 (\Using_FPGA.Native_0 ),
        .\instr_EX_i_reg[6]_1 (\Using_FPGA.Native_1 ),
        .instr_OF_raw(instr_OF_raw[3]),
        .mbar_is_sleep0(mbar_is_sleep0),
        .sync_reset(sync_reset),
        .take_Intr_Now_III(take_Intr_Now_III));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E_124 \PreFetch_Buffers[7].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .Y(Y[7]),
        .\instr_EX_i_reg[7] (\Using_FPGA.Native ),
        .\instr_EX_i_reg[7]_0 (\Using_FPGA.Native_0 ),
        .\instr_EX_i_reg[7]_1 (\Using_FPGA.Native_1 ),
        .instr_OF_raw(instr_OF_raw[3]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E_125 \PreFetch_Buffers[8].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .\Using_FPGA.Native (instr_OF_raw[2]),
        .\Using_FPGA.Native_0 (instr_OF_raw[1]),
        .\Using_FPGA.Native_1 (\PreFetch_Buffers[4].SRL16E_I_n_3 ),
        .Y(Y[8]),
        .force1_i27_out(force1_i27_out),
        .\instr_EX_i_reg[8] (\Using_FPGA.Native ),
        .\instr_EX_i_reg[8]_0 (\Using_FPGA.Native_0 ),
        .\instr_EX_i_reg[8]_1 (\Using_FPGA.Native_1 ),
        .take_Intr_Now_III(take_Intr_Now_III));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E_126 \PreFetch_Buffers[9].SRL16E_I 
       (.CI(CI),
        .Clk(Clk),
        .\Using_FPGA.Native (instr_OF_raw[1]),
        .\Using_FPGA.reset_BIP_I_reg (\PreFetch_Buffers[2].SRL16E_I_n_6 ),
        .Y(Y[9]),
        .\instr_EX_i_reg[9] (\Using_FPGA.Native ),
        .\instr_EX_i_reg[9]_0 (\Using_FPGA.Native_0 ),
        .\instr_EX_i_reg[9]_1 (\Using_FPGA.Native_1 ),
        .reset_BIP_I8_out(reset_BIP_I8_out),
        .take_Intr_Now_III(take_Intr_Now_III));
  LUT3 #(
    .INIT(8'h7F)) 
    of_Valid_early
       (.I0(buffer_Addr_S_I_2),
        .I1(buffer_Addr_S_I_1),
        .I2(buffer_Addr_S_I_0),
        .O(D_33));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDR of_valid_FDR_I
       (.Clk(Clk),
        .D_33(D_33),
        .E(E),
        .IReady1_out(IReady1_out),
        .S(S),
        .\Size_17to32.imm_Reg_reg[15] (\Using_FPGA.Native_14 ),
        .\Using_FPGA.Native_0 (of_Valid_Raw),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 ),
        .buffer_Full(buffer_Full),
        .dbg_pause(dbg_pause),
        .dbg_pause_reg(dbg_pause_reg),
        .ex_Valid_reg(ex_Valid_reg),
        .ex_Valid_reg_0(ex_Valid_reg_0),
        .inHibit_EX(inHibit_EX),
        .inHibit_EX_reg(inHibit_EX_reg),
        .jump_Carry2(jump_Carry2),
        .mul_Executing(mul_Executing),
        .mul_Executing_reg(mul_Executing_reg),
        .nonvalid_IFetch_n_reg(nonvalid_IFetch_n_reg),
        .nonvalid_IFetch_n_reg_0(nonvalid_IFetch_n_reg_0),
        .nonvalid_IFetch_n_reg_1(nonvalid_IFetch_n_reg_1),
        .take_Intr_Now_III(take_Intr_Now_III),
        .trace_jump_taken_i_reg(trace_jump_taken_i_reg));
endmodule

module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Register_File
   (Reg1_Data,
    Clk_0,
    reg2_Data,
    Data_Write,
    Clk,
    ex_Result,
    Reg_Write,
    \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] ,
    reg1_Addr,
    imm_Value);
  output [0:31]Reg1_Data;
  output [7:0]Clk_0;
  output [0:31]reg2_Data;
  output [23:0]Data_Write;
  input Clk;
  input [0:31]ex_Result;
  input Reg_Write;
  input [4:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] ;
  input [0:4]reg1_Addr;
  input [4:0]imm_Value;

  wire [4:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] ;
  wire Clk;
  wire [7:0]Clk_0;
  wire [23:0]Data_Write;
  wire [0:31]Reg1_Data;
  wire Reg_Write;
  wire [0:31]ex_Result;
  wire [4:0]imm_Value;
  wire [0:4]reg1_Addr;
  wire [0:31]reg2_Data;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Register_File_Bit \Using_FPGA.Gen_RegFile[0].Register_File_Bit_I 
       (.Clk(Clk),
        .Data_Write(Data_Write[23]),
        .Reg1_Data(Reg1_Data[0]),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] ),
        .ex_Result(ex_Result[0]),
        .imm_Value(imm_Value),
        .reg1_Addr(reg1_Addr),
        .reg2_Data(reg2_Data[0]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Register_File_Bit_382 \Using_FPGA.Gen_RegFile[10].Register_File_Bit_I 
       (.Clk(Clk),
        .Data_Write(Data_Write[13]),
        .Reg1_Data(Reg1_Data[10]),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] ),
        .ex_Result(ex_Result[10]),
        .imm_Value(imm_Value),
        .reg1_Addr(reg1_Addr),
        .reg2_Data(reg2_Data[10]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Register_File_Bit_383 \Using_FPGA.Gen_RegFile[11].Register_File_Bit_I 
       (.Clk(Clk),
        .Data_Write(Data_Write[12]),
        .Reg1_Data(Reg1_Data[11]),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] ),
        .ex_Result(ex_Result[11]),
        .imm_Value(imm_Value),
        .reg1_Addr(reg1_Addr),
        .reg2_Data(reg2_Data[11]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Register_File_Bit_384 \Using_FPGA.Gen_RegFile[12].Register_File_Bit_I 
       (.Clk(Clk),
        .Data_Write(Data_Write[11]),
        .Reg1_Data(Reg1_Data[12]),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] ),
        .ex_Result(ex_Result[12]),
        .imm_Value(imm_Value),
        .reg1_Addr(reg1_Addr),
        .reg2_Data(reg2_Data[12]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Register_File_Bit_385 \Using_FPGA.Gen_RegFile[13].Register_File_Bit_I 
       (.Clk(Clk),
        .Data_Write(Data_Write[10]),
        .Reg1_Data(Reg1_Data[13]),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] ),
        .ex_Result(ex_Result[13]),
        .imm_Value(imm_Value),
        .reg1_Addr(reg1_Addr),
        .reg2_Data(reg2_Data[13]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Register_File_Bit_386 \Using_FPGA.Gen_RegFile[14].Register_File_Bit_I 
       (.Clk(Clk),
        .Data_Write(Data_Write[9]),
        .Reg1_Data(Reg1_Data[14]),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] ),
        .ex_Result(ex_Result[14]),
        .imm_Value(imm_Value),
        .reg1_Addr(reg1_Addr),
        .reg2_Data(reg2_Data[14]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Register_File_Bit_387 \Using_FPGA.Gen_RegFile[15].Register_File_Bit_I 
       (.Clk(Clk),
        .Data_Write(Data_Write[8]),
        .Reg1_Data(Reg1_Data[15]),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] ),
        .ex_Result(ex_Result[15]),
        .imm_Value(imm_Value),
        .reg1_Addr(reg1_Addr),
        .reg2_Data(reg2_Data[15]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Register_File_Bit_388 \Using_FPGA.Gen_RegFile[16].Register_File_Bit_I 
       (.Clk(Clk),
        .Data_Write(Data_Write[7]),
        .Reg1_Data(Reg1_Data[16]),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] ),
        .ex_Result(ex_Result[16]),
        .imm_Value(imm_Value),
        .reg1_Addr(reg1_Addr),
        .reg2_Data(reg2_Data[16]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Register_File_Bit_389 \Using_FPGA.Gen_RegFile[17].Register_File_Bit_I 
       (.Clk(Clk),
        .Data_Write(Data_Write[6]),
        .Reg1_Data(Reg1_Data[17]),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] ),
        .ex_Result(ex_Result[17]),
        .imm_Value(imm_Value),
        .reg1_Addr(reg1_Addr),
        .reg2_Data(reg2_Data[17]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Register_File_Bit_390 \Using_FPGA.Gen_RegFile[18].Register_File_Bit_I 
       (.Clk(Clk),
        .Data_Write(Data_Write[5]),
        .Reg1_Data(Reg1_Data[18]),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] ),
        .ex_Result(ex_Result[18]),
        .imm_Value(imm_Value),
        .reg1_Addr(reg1_Addr),
        .reg2_Data(reg2_Data[18]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Register_File_Bit_391 \Using_FPGA.Gen_RegFile[19].Register_File_Bit_I 
       (.Clk(Clk),
        .Data_Write(Data_Write[4]),
        .Reg1_Data(Reg1_Data[19]),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] ),
        .ex_Result(ex_Result[19]),
        .imm_Value(imm_Value),
        .reg1_Addr(reg1_Addr),
        .reg2_Data(reg2_Data[19]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Register_File_Bit_392 \Using_FPGA.Gen_RegFile[1].Register_File_Bit_I 
       (.Clk(Clk),
        .Data_Write(Data_Write[22]),
        .Reg1_Data(Reg1_Data[1]),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] ),
        .ex_Result(ex_Result[1]),
        .imm_Value(imm_Value),
        .reg1_Addr(reg1_Addr),
        .reg2_Data(reg2_Data[1]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Register_File_Bit_393 \Using_FPGA.Gen_RegFile[20].Register_File_Bit_I 
       (.Clk(Clk),
        .Data_Write(Data_Write[3]),
        .Reg1_Data(Reg1_Data[20]),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] ),
        .ex_Result(ex_Result[20]),
        .imm_Value(imm_Value),
        .reg1_Addr(reg1_Addr),
        .reg2_Data(reg2_Data[20]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Register_File_Bit_394 \Using_FPGA.Gen_RegFile[21].Register_File_Bit_I 
       (.Clk(Clk),
        .Data_Write(Data_Write[2]),
        .Reg1_Data(Reg1_Data[21]),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] ),
        .ex_Result(ex_Result[21]),
        .imm_Value(imm_Value),
        .reg1_Addr(reg1_Addr),
        .reg2_Data(reg2_Data[21]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Register_File_Bit_395 \Using_FPGA.Gen_RegFile[22].Register_File_Bit_I 
       (.Clk(Clk),
        .Data_Write(Data_Write[1]),
        .Reg1_Data(Reg1_Data[22]),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] ),
        .ex_Result(ex_Result[22]),
        .imm_Value(imm_Value),
        .reg1_Addr(reg1_Addr),
        .reg2_Data(reg2_Data[22]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Register_File_Bit_396 \Using_FPGA.Gen_RegFile[23].Register_File_Bit_I 
       (.Clk(Clk),
        .Data_Write(Data_Write[0]),
        .Reg1_Data(Reg1_Data[23]),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] ),
        .ex_Result(ex_Result[23]),
        .imm_Value(imm_Value),
        .reg1_Addr(reg1_Addr),
        .reg2_Data(reg2_Data[23]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Register_File_Bit_397 \Using_FPGA.Gen_RegFile[24].Register_File_Bit_I 
       (.\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[7] (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] ),
        .Clk(Clk),
        .Clk_0(Clk_0[7]),
        .Reg1_Data(Reg1_Data[24]),
        .Reg_Write(Reg_Write),
        .ex_Result(ex_Result[24]),
        .imm_Value(imm_Value),
        .reg1_Addr(reg1_Addr),
        .reg2_Data(reg2_Data[24]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Register_File_Bit_398 \Using_FPGA.Gen_RegFile[25].Register_File_Bit_I 
       (.\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[6] (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] ),
        .Clk(Clk),
        .Clk_0(Clk_0[6]),
        .Reg1_Data(Reg1_Data[25]),
        .Reg_Write(Reg_Write),
        .ex_Result(ex_Result[25]),
        .imm_Value(imm_Value),
        .reg1_Addr(reg1_Addr),
        .reg2_Data(reg2_Data[25]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Register_File_Bit_399 \Using_FPGA.Gen_RegFile[26].Register_File_Bit_I 
       (.\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[5] (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] ),
        .Clk(Clk),
        .Clk_0(Clk_0[5]),
        .Reg1_Data(Reg1_Data[26]),
        .Reg_Write(Reg_Write),
        .ex_Result(ex_Result[26]),
        .imm_Value(imm_Value),
        .reg1_Addr(reg1_Addr),
        .reg2_Data(reg2_Data[26]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Register_File_Bit_400 \Using_FPGA.Gen_RegFile[27].Register_File_Bit_I 
       (.\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[4] (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] ),
        .Clk(Clk),
        .Clk_0(Clk_0[4]),
        .Reg1_Data(Reg1_Data[27]),
        .Reg_Write(Reg_Write),
        .ex_Result(ex_Result[27]),
        .imm_Value(imm_Value),
        .reg1_Addr(reg1_Addr),
        .reg2_Data(reg2_Data[27]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Register_File_Bit_401 \Using_FPGA.Gen_RegFile[28].Register_File_Bit_I 
       (.\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[3] (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] ),
        .Clk(Clk),
        .Clk_0(Clk_0[3]),
        .Reg1_Data(Reg1_Data[28]),
        .Reg_Write(Reg_Write),
        .ex_Result(ex_Result[28]),
        .imm_Value(imm_Value),
        .reg1_Addr(reg1_Addr),
        .reg2_Data(reg2_Data[28]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Register_File_Bit_402 \Using_FPGA.Gen_RegFile[29].Register_File_Bit_I 
       (.\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[2] (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] ),
        .Clk(Clk),
        .Clk_0(Clk_0[2]),
        .Reg1_Data(Reg1_Data[29]),
        .Reg_Write(Reg_Write),
        .ex_Result(ex_Result[29]),
        .imm_Value(imm_Value),
        .reg1_Addr(reg1_Addr),
        .reg2_Data(reg2_Data[29]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Register_File_Bit_403 \Using_FPGA.Gen_RegFile[2].Register_File_Bit_I 
       (.Clk(Clk),
        .Data_Write(Data_Write[21]),
        .Reg1_Data(Reg1_Data[2]),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] ),
        .ex_Result(ex_Result[2]),
        .imm_Value(imm_Value),
        .reg1_Addr(reg1_Addr),
        .reg2_Data(reg2_Data[2]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Register_File_Bit_404 \Using_FPGA.Gen_RegFile[30].Register_File_Bit_I 
       (.\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[1] (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] ),
        .Clk(Clk),
        .Clk_0(Clk_0[1]),
        .Reg1_Data(Reg1_Data[30]),
        .Reg_Write(Reg_Write),
        .ex_Result(ex_Result[30]),
        .imm_Value(imm_Value),
        .reg1_Addr(reg1_Addr),
        .reg2_Data(reg2_Data[30]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Register_File_Bit_405 \Using_FPGA.Gen_RegFile[31].Register_File_Bit_I 
       (.\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] ),
        .Clk(Clk),
        .Clk_0(Clk_0[0]),
        .Reg1_Data(Reg1_Data[31]),
        .Reg_Write(Reg_Write),
        .ex_Result(ex_Result[31]),
        .imm_Value(imm_Value),
        .reg1_Addr(reg1_Addr),
        .reg2_Data(reg2_Data[31]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Register_File_Bit_406 \Using_FPGA.Gen_RegFile[3].Register_File_Bit_I 
       (.Clk(Clk),
        .Data_Write(Data_Write[20]),
        .Reg1_Data(Reg1_Data[3]),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] ),
        .ex_Result(ex_Result[3]),
        .imm_Value(imm_Value),
        .reg1_Addr(reg1_Addr),
        .reg2_Data(reg2_Data[3]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Register_File_Bit_407 \Using_FPGA.Gen_RegFile[4].Register_File_Bit_I 
       (.Clk(Clk),
        .Data_Write(Data_Write[19]),
        .Reg1_Data(Reg1_Data[4]),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] ),
        .ex_Result(ex_Result[4]),
        .imm_Value(imm_Value),
        .reg1_Addr(reg1_Addr),
        .reg2_Data(reg2_Data[4]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Register_File_Bit_408 \Using_FPGA.Gen_RegFile[5].Register_File_Bit_I 
       (.Clk(Clk),
        .Data_Write(Data_Write[18]),
        .Reg1_Data(Reg1_Data[5]),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] ),
        .ex_Result(ex_Result[5]),
        .imm_Value(imm_Value),
        .reg1_Addr(reg1_Addr),
        .reg2_Data(reg2_Data[5]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Register_File_Bit_409 \Using_FPGA.Gen_RegFile[6].Register_File_Bit_I 
       (.Clk(Clk),
        .Data_Write(Data_Write[17]),
        .Reg1_Data(Reg1_Data[6]),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] ),
        .ex_Result(ex_Result[6]),
        .imm_Value(imm_Value),
        .reg1_Addr(reg1_Addr),
        .reg2_Data(reg2_Data[6]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Register_File_Bit_410 \Using_FPGA.Gen_RegFile[7].Register_File_Bit_I 
       (.Clk(Clk),
        .Data_Write(Data_Write[16]),
        .Reg1_Data(Reg1_Data[7]),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] ),
        .ex_Result(ex_Result[7]),
        .imm_Value(imm_Value),
        .reg1_Addr(reg1_Addr),
        .reg2_Data(reg2_Data[7]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Register_File_Bit_411 \Using_FPGA.Gen_RegFile[8].Register_File_Bit_I 
       (.Clk(Clk),
        .Data_Write(Data_Write[15]),
        .Reg1_Data(Reg1_Data[8]),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] ),
        .ex_Result(ex_Result[8]),
        .imm_Value(imm_Value),
        .reg1_Addr(reg1_Addr),
        .reg2_Data(reg2_Data[8]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Register_File_Bit_412 \Using_FPGA.Gen_RegFile[9].Register_File_Bit_I 
       (.Clk(Clk),
        .Data_Write(Data_Write[14]),
        .Reg1_Data(Reg1_Data[9]),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] ),
        .ex_Result(ex_Result[9]),
        .imm_Value(imm_Value),
        .reg1_Addr(reg1_Addr),
        .reg2_Data(reg2_Data[9]));
endmodule

module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Register_File_Bit
   (Reg1_Data,
    Data_Write,
    reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native ,
    reg1_Addr,
    imm_Value);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native ;
  input [0:4]reg1_Addr;
  input [4:0]imm_Value;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native ;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:4]reg1_Addr;
  wire [0:0]reg2_Data;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_474 RegFile_X1
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result),
        .reg1_Addr(reg1_Addr));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_475 RegFile_X2
       (.Clk(Clk),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_i_2__7 (\Using_FPGA.Native ),
        .ex_Result(ex_Result),
        .imm_Value(imm_Value),
        .reg2_Data(reg2_Data));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Register_File_Bit_382
   (Reg1_Data,
    Data_Write,
    reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native ,
    reg1_Addr,
    imm_Value);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native ;
  input [0:4]reg1_Addr;
  input [4:0]imm_Value;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native ;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:4]reg1_Addr;
  wire [0:0]reg2_Data;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_472 RegFile_X1
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result),
        .reg1_Addr(reg1_Addr));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_473 RegFile_X2
       (.Clk(Clk),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_i_2__17 (\Using_FPGA.Native ),
        .ex_Result(ex_Result),
        .imm_Value(imm_Value),
        .reg2_Data(reg2_Data));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Register_File_Bit_383
   (Reg1_Data,
    Data_Write,
    reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native ,
    reg1_Addr,
    imm_Value);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native ;
  input [0:4]reg1_Addr;
  input [4:0]imm_Value;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native ;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:4]reg1_Addr;
  wire [0:0]reg2_Data;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_470 RegFile_X1
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result),
        .reg1_Addr(reg1_Addr));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_471 RegFile_X2
       (.Clk(Clk),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_i_2__18 (\Using_FPGA.Native ),
        .ex_Result(ex_Result),
        .imm_Value(imm_Value),
        .reg2_Data(reg2_Data));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Register_File_Bit_384
   (Reg1_Data,
    Data_Write,
    reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native ,
    reg1_Addr,
    imm_Value);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native ;
  input [0:4]reg1_Addr;
  input [4:0]imm_Value;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native ;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:4]reg1_Addr;
  wire [0:0]reg2_Data;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_468 RegFile_X1
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result),
        .reg1_Addr(reg1_Addr));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_469 RegFile_X2
       (.Clk(Clk),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_i_2__19 (\Using_FPGA.Native ),
        .ex_Result(ex_Result),
        .imm_Value(imm_Value),
        .reg2_Data(reg2_Data));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Register_File_Bit_385
   (Reg1_Data,
    Data_Write,
    reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native ,
    reg1_Addr,
    imm_Value);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native ;
  input [0:4]reg1_Addr;
  input [4:0]imm_Value;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native ;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:4]reg1_Addr;
  wire [0:0]reg2_Data;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_466 RegFile_X1
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result),
        .reg1_Addr(reg1_Addr));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_467 RegFile_X2
       (.Clk(Clk),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_i_2__20 (\Using_FPGA.Native ),
        .ex_Result(ex_Result),
        .imm_Value(imm_Value),
        .reg2_Data(reg2_Data));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Register_File_Bit_386
   (Reg1_Data,
    Data_Write,
    reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native ,
    reg1_Addr,
    imm_Value);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native ;
  input [0:4]reg1_Addr;
  input [4:0]imm_Value;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native ;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:4]reg1_Addr;
  wire [0:0]reg2_Data;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_464 RegFile_X1
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result),
        .reg1_Addr(reg1_Addr));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_465 RegFile_X2
       (.Clk(Clk),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_i_2__21 (\Using_FPGA.Native ),
        .ex_Result(ex_Result),
        .imm_Value(imm_Value),
        .reg2_Data(reg2_Data));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Register_File_Bit_387
   (Reg1_Data,
    Data_Write,
    reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native ,
    reg1_Addr,
    imm_Value);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native ;
  input [0:4]reg1_Addr;
  input [4:0]imm_Value;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native ;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:4]reg1_Addr;
  wire [0:0]reg2_Data;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_462 RegFile_X1
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result),
        .reg1_Addr(reg1_Addr));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_463 RegFile_X2
       (.Clk(Clk),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_i_2__22 (\Using_FPGA.Native ),
        .ex_Result(ex_Result),
        .imm_Value(imm_Value),
        .reg2_Data(reg2_Data));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Register_File_Bit_388
   (Reg1_Data,
    Data_Write,
    reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native ,
    reg1_Addr,
    imm_Value);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native ;
  input [0:4]reg1_Addr;
  input [4:0]imm_Value;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native ;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:4]reg1_Addr;
  wire [0:0]reg2_Data;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_460 RegFile_X1
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result),
        .reg1_Addr(reg1_Addr));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_461 RegFile_X2
       (.Clk(Clk),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_i_2__23 (\Using_FPGA.Native ),
        .ex_Result(ex_Result),
        .imm_Value(imm_Value),
        .reg2_Data(reg2_Data));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Register_File_Bit_389
   (Reg1_Data,
    Data_Write,
    reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native ,
    reg1_Addr,
    imm_Value);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native ;
  input [0:4]reg1_Addr;
  input [4:0]imm_Value;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native ;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:4]reg1_Addr;
  wire [0:0]reg2_Data;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_458 RegFile_X1
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result),
        .reg1_Addr(reg1_Addr));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_459 RegFile_X2
       (.Clk(Clk),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_i_2__24 (\Using_FPGA.Native ),
        .ex_Result(ex_Result),
        .imm_Value(imm_Value),
        .reg2_Data(reg2_Data));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Register_File_Bit_390
   (Reg1_Data,
    Data_Write,
    reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native ,
    reg1_Addr,
    imm_Value);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native ;
  input [0:4]reg1_Addr;
  input [4:0]imm_Value;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native ;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:4]reg1_Addr;
  wire [0:0]reg2_Data;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_456 RegFile_X1
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result),
        .reg1_Addr(reg1_Addr));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_457 RegFile_X2
       (.Clk(Clk),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_i_2__25 (\Using_FPGA.Native ),
        .ex_Result(ex_Result),
        .imm_Value(imm_Value),
        .reg2_Data(reg2_Data));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Register_File_Bit_391
   (Reg1_Data,
    Data_Write,
    reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native ,
    reg1_Addr,
    imm_Value);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native ;
  input [0:4]reg1_Addr;
  input [4:0]imm_Value;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native ;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:4]reg1_Addr;
  wire [0:0]reg2_Data;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_454 RegFile_X1
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result),
        .reg1_Addr(reg1_Addr));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_455 RegFile_X2
       (.Clk(Clk),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_i_2__26 (\Using_FPGA.Native ),
        .ex_Result(ex_Result),
        .imm_Value(imm_Value),
        .reg2_Data(reg2_Data));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Register_File_Bit_392
   (Reg1_Data,
    Data_Write,
    reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native ,
    reg1_Addr,
    imm_Value);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native ;
  input [0:4]reg1_Addr;
  input [4:0]imm_Value;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native ;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:4]reg1_Addr;
  wire [0:0]reg2_Data;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_452 RegFile_X1
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result),
        .reg1_Addr(reg1_Addr));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_453 RegFile_X2
       (.Clk(Clk),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_i_2__8 (\Using_FPGA.Native ),
        .ex_Result(ex_Result),
        .imm_Value(imm_Value),
        .reg2_Data(reg2_Data));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Register_File_Bit_393
   (Reg1_Data,
    Data_Write,
    reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native ,
    reg1_Addr,
    imm_Value);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native ;
  input [0:4]reg1_Addr;
  input [4:0]imm_Value;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native ;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:4]reg1_Addr;
  wire [0:0]reg2_Data;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_450 RegFile_X1
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result),
        .reg1_Addr(reg1_Addr));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_451 RegFile_X2
       (.Clk(Clk),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_i_2__27 (\Using_FPGA.Native ),
        .ex_Result(ex_Result),
        .imm_Value(imm_Value),
        .reg2_Data(reg2_Data));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Register_File_Bit_394
   (Reg1_Data,
    Data_Write,
    reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native ,
    reg1_Addr,
    imm_Value);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native ;
  input [0:4]reg1_Addr;
  input [4:0]imm_Value;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native ;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:4]reg1_Addr;
  wire [0:0]reg2_Data;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_448 RegFile_X1
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result),
        .reg1_Addr(reg1_Addr));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_449 RegFile_X2
       (.Clk(Clk),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_i_2__28 (\Using_FPGA.Native ),
        .ex_Result(ex_Result),
        .imm_Value(imm_Value),
        .reg2_Data(reg2_Data));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Register_File_Bit_395
   (Reg1_Data,
    Data_Write,
    reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native ,
    reg1_Addr,
    imm_Value);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native ;
  input [0:4]reg1_Addr;
  input [4:0]imm_Value;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native ;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:4]reg1_Addr;
  wire [0:0]reg2_Data;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_446 RegFile_X1
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result),
        .reg1_Addr(reg1_Addr));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_447 RegFile_X2
       (.Clk(Clk),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_i_2__29 (\Using_FPGA.Native ),
        .ex_Result(ex_Result),
        .imm_Value(imm_Value),
        .reg2_Data(reg2_Data));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Register_File_Bit_396
   (Reg1_Data,
    Data_Write,
    reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native ,
    reg1_Addr,
    imm_Value);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native ;
  input [0:4]reg1_Addr;
  input [4:0]imm_Value;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native ;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:4]reg1_Addr;
  wire [0:0]reg2_Data;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_444 RegFile_X1
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result),
        .reg1_Addr(reg1_Addr));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_445 RegFile_X2
       (.Clk(Clk),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_i_2__30 (\Using_FPGA.Native ),
        .ex_Result(ex_Result),
        .imm_Value(imm_Value),
        .reg2_Data(reg2_Data));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Register_File_Bit_397
   (Reg1_Data,
    Clk_0,
    reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[7] ,
    reg1_Addr,
    imm_Value);
  output [0:0]Reg1_Data;
  output [0:0]Clk_0;
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[7] ;
  input [0:4]reg1_Addr;
  input [4:0]imm_Value;

  wire [4:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[7] ;
  wire Clk;
  wire [0:0]Clk_0;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:4]reg1_Addr;
  wire [0:0]reg2_Data;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_442 RegFile_X1
       (.\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[7] (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[7] ),
        .Clk(Clk),
        .Clk_0(Clk_0),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .ex_Result(ex_Result),
        .reg1_Addr(reg1_Addr));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_443 RegFile_X2
       (.Clk(Clk),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_i_2__31 (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[7] ),
        .ex_Result(ex_Result),
        .imm_Value(imm_Value),
        .reg2_Data(reg2_Data));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Register_File_Bit_398
   (Reg1_Data,
    Clk_0,
    reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[6] ,
    reg1_Addr,
    imm_Value);
  output [0:0]Reg1_Data;
  output [0:0]Clk_0;
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[6] ;
  input [0:4]reg1_Addr;
  input [4:0]imm_Value;

  wire [4:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[6] ;
  wire Clk;
  wire [0:0]Clk_0;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:4]reg1_Addr;
  wire [0:0]reg2_Data;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_440 RegFile_X1
       (.\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[6] (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[6] ),
        .Clk(Clk),
        .Clk_0(Clk_0),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .ex_Result(ex_Result),
        .reg1_Addr(reg1_Addr));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_441 RegFile_X2
       (.Clk(Clk),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_i_2__32 (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[6] ),
        .ex_Result(ex_Result),
        .imm_Value(imm_Value),
        .reg2_Data(reg2_Data));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Register_File_Bit_399
   (Reg1_Data,
    Clk_0,
    reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[5] ,
    reg1_Addr,
    imm_Value);
  output [0:0]Reg1_Data;
  output [0:0]Clk_0;
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[5] ;
  input [0:4]reg1_Addr;
  input [4:0]imm_Value;

  wire [4:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[5] ;
  wire Clk;
  wire [0:0]Clk_0;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:4]reg1_Addr;
  wire [0:0]reg2_Data;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_438 RegFile_X1
       (.\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[5] (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[5] ),
        .Clk(Clk),
        .Clk_0(Clk_0),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .ex_Result(ex_Result),
        .reg1_Addr(reg1_Addr));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_439 RegFile_X2
       (.Clk(Clk),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_i_2__33 (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[5] ),
        .ex_Result(ex_Result),
        .imm_Value(imm_Value),
        .reg2_Data(reg2_Data));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Register_File_Bit_400
   (Reg1_Data,
    Clk_0,
    reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[4] ,
    reg1_Addr,
    imm_Value);
  output [0:0]Reg1_Data;
  output [0:0]Clk_0;
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[4] ;
  input [0:4]reg1_Addr;
  input [4:0]imm_Value;

  wire [4:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[4] ;
  wire Clk;
  wire [0:0]Clk_0;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:4]reg1_Addr;
  wire [0:0]reg2_Data;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_436 RegFile_X1
       (.\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[4] (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[4] ),
        .Clk(Clk),
        .Clk_0(Clk_0),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .ex_Result(ex_Result),
        .reg1_Addr(reg1_Addr));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_437 RegFile_X2
       (.Clk(Clk),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_i_2__34 (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[4] ),
        .ex_Result(ex_Result),
        .imm_Value(imm_Value),
        .reg2_Data(reg2_Data));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Register_File_Bit_401
   (Reg1_Data,
    Clk_0,
    reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[3] ,
    reg1_Addr,
    imm_Value);
  output [0:0]Reg1_Data;
  output [0:0]Clk_0;
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[3] ;
  input [0:4]reg1_Addr;
  input [4:0]imm_Value;

  wire [4:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[3] ;
  wire Clk;
  wire [0:0]Clk_0;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:4]reg1_Addr;
  wire [0:0]reg2_Data;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_434 RegFile_X1
       (.\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[3] (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[3] ),
        .Clk(Clk),
        .Clk_0(Clk_0),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .ex_Result(ex_Result),
        .reg1_Addr(reg1_Addr));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_435 RegFile_X2
       (.Clk(Clk),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_i_2__35 (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[3] ),
        .ex_Result(ex_Result),
        .imm_Value(imm_Value),
        .reg2_Data(reg2_Data));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Register_File_Bit_402
   (Reg1_Data,
    Clk_0,
    reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[2] ,
    reg1_Addr,
    imm_Value);
  output [0:0]Reg1_Data;
  output [0:0]Clk_0;
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[2] ;
  input [0:4]reg1_Addr;
  input [4:0]imm_Value;

  wire [4:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[2] ;
  wire Clk;
  wire [0:0]Clk_0;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:4]reg1_Addr;
  wire [0:0]reg2_Data;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_432 RegFile_X1
       (.\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[2] (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[2] ),
        .Clk(Clk),
        .Clk_0(Clk_0),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .ex_Result(ex_Result),
        .reg1_Addr(reg1_Addr));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_433 RegFile_X2
       (.Clk(Clk),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_i_2__36 (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[2] ),
        .ex_Result(ex_Result),
        .imm_Value(imm_Value),
        .reg2_Data(reg2_Data));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Register_File_Bit_403
   (Reg1_Data,
    Data_Write,
    reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native ,
    reg1_Addr,
    imm_Value);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native ;
  input [0:4]reg1_Addr;
  input [4:0]imm_Value;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native ;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:4]reg1_Addr;
  wire [0:0]reg2_Data;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_430 RegFile_X1
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result),
        .reg1_Addr(reg1_Addr));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_431 RegFile_X2
       (.Clk(Clk),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_i_2__9 (\Using_FPGA.Native ),
        .ex_Result(ex_Result),
        .imm_Value(imm_Value),
        .reg2_Data(reg2_Data));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Register_File_Bit_404
   (Reg1_Data,
    Clk_0,
    reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[1] ,
    reg1_Addr,
    imm_Value);
  output [0:0]Reg1_Data;
  output [0:0]Clk_0;
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[1] ;
  input [0:4]reg1_Addr;
  input [4:0]imm_Value;

  wire [4:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[1] ;
  wire Clk;
  wire [0:0]Clk_0;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:4]reg1_Addr;
  wire [0:0]reg2_Data;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_428 RegFile_X1
       (.\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[1] (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[1] ),
        .Clk(Clk),
        .Clk_0(Clk_0),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .ex_Result(ex_Result),
        .reg1_Addr(reg1_Addr));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_429 RegFile_X2
       (.Clk(Clk),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_i_2__37 (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[1] ),
        .ex_Result(ex_Result),
        .imm_Value(imm_Value),
        .reg2_Data(reg2_Data));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Register_File_Bit_405
   (Reg1_Data,
    Clk_0,
    reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] ,
    reg1_Addr,
    imm_Value);
  output [0:0]Reg1_Data;
  output [0:0]Clk_0;
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] ;
  input [0:4]reg1_Addr;
  input [4:0]imm_Value;

  wire [4:0]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] ;
  wire Clk;
  wire [0:0]Clk_0;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:4]reg1_Addr;
  wire [0:0]reg2_Data;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_426 RegFile_X1
       (.\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] ),
        .Clk(Clk),
        .Clk_0(Clk_0),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .ex_Result(ex_Result),
        .reg1_Addr(reg1_Addr));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_427 RegFile_X2
       (.Clk(Clk),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_i_3__4 (\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[0] ),
        .ex_Result(ex_Result),
        .imm_Value(imm_Value),
        .reg2_Data(reg2_Data));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Register_File_Bit_406
   (Reg1_Data,
    Data_Write,
    reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native ,
    reg1_Addr,
    imm_Value);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native ;
  input [0:4]reg1_Addr;
  input [4:0]imm_Value;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native ;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:4]reg1_Addr;
  wire [0:0]reg2_Data;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_424 RegFile_X1
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result),
        .reg1_Addr(reg1_Addr));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_425 RegFile_X2
       (.Clk(Clk),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_i_2__10 (\Using_FPGA.Native ),
        .ex_Result(ex_Result),
        .imm_Value(imm_Value),
        .reg2_Data(reg2_Data));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Register_File_Bit_407
   (Reg1_Data,
    Data_Write,
    reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native ,
    reg1_Addr,
    imm_Value);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native ;
  input [0:4]reg1_Addr;
  input [4:0]imm_Value;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native ;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:4]reg1_Addr;
  wire [0:0]reg2_Data;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_422 RegFile_X1
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result),
        .reg1_Addr(reg1_Addr));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_423 RegFile_X2
       (.Clk(Clk),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_i_2__11 (\Using_FPGA.Native ),
        .ex_Result(ex_Result),
        .imm_Value(imm_Value),
        .reg2_Data(reg2_Data));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Register_File_Bit_408
   (Reg1_Data,
    Data_Write,
    reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native ,
    reg1_Addr,
    imm_Value);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native ;
  input [0:4]reg1_Addr;
  input [4:0]imm_Value;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native ;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:4]reg1_Addr;
  wire [0:0]reg2_Data;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_420 RegFile_X1
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result),
        .reg1_Addr(reg1_Addr));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_421 RegFile_X2
       (.Clk(Clk),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_i_2__12 (\Using_FPGA.Native ),
        .ex_Result(ex_Result),
        .imm_Value(imm_Value),
        .reg2_Data(reg2_Data));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Register_File_Bit_409
   (Reg1_Data,
    Data_Write,
    reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native ,
    reg1_Addr,
    imm_Value);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native ;
  input [0:4]reg1_Addr;
  input [4:0]imm_Value;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native ;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:4]reg1_Addr;
  wire [0:0]reg2_Data;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_418 RegFile_X1
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result),
        .reg1_Addr(reg1_Addr));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_419 RegFile_X2
       (.Clk(Clk),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_i_2__13 (\Using_FPGA.Native ),
        .ex_Result(ex_Result),
        .imm_Value(imm_Value),
        .reg2_Data(reg2_Data));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Register_File_Bit_410
   (Reg1_Data,
    Data_Write,
    reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native ,
    reg1_Addr,
    imm_Value);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native ;
  input [0:4]reg1_Addr;
  input [4:0]imm_Value;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native ;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:4]reg1_Addr;
  wire [0:0]reg2_Data;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_416 RegFile_X1
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result),
        .reg1_Addr(reg1_Addr));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_417 RegFile_X2
       (.Clk(Clk),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_i_2__14 (\Using_FPGA.Native ),
        .ex_Result(ex_Result),
        .imm_Value(imm_Value),
        .reg2_Data(reg2_Data));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Register_File_Bit_411
   (Reg1_Data,
    Data_Write,
    reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native ,
    reg1_Addr,
    imm_Value);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native ;
  input [0:4]reg1_Addr;
  input [4:0]imm_Value;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native ;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:4]reg1_Addr;
  wire [0:0]reg2_Data;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_414 RegFile_X1
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result),
        .reg1_Addr(reg1_Addr));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_415 RegFile_X2
       (.Clk(Clk),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_i_2__15 (\Using_FPGA.Native ),
        .ex_Result(ex_Result),
        .imm_Value(imm_Value),
        .reg2_Data(reg2_Data));
endmodule

(* ORIG_REF_NAME = "Register_File_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Register_File_Bit_412
   (Reg1_Data,
    Data_Write,
    reg2_Data,
    Clk,
    ex_Result,
    Reg_Write,
    \Using_FPGA.Native ,
    reg1_Addr,
    imm_Value);
  output [0:0]Reg1_Data;
  output [0:0]Data_Write;
  output [0:0]reg2_Data;
  input Clk;
  input [0:0]ex_Result;
  input Reg_Write;
  input [4:0]\Using_FPGA.Native ;
  input [0:4]reg1_Addr;
  input [4:0]imm_Value;

  wire Clk;
  wire [0:0]Data_Write;
  wire [0:0]Reg1_Data;
  wire Reg_Write;
  wire [4:0]\Using_FPGA.Native ;
  wire [0:0]ex_Result;
  wire [4:0]imm_Value;
  wire [0:4]reg1_Addr;
  wire [0:0]reg2_Data;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D RegFile_X1
       (.Clk(Clk),
        .Data_Write(Data_Write),
        .Reg1_Data(Reg1_Data),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result),
        .reg1_Addr(reg1_Addr));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_RAM32X1D_413 RegFile_X2
       (.Clk(Clk),
        .Reg_Write(Reg_Write),
        .\Using_FPGA.Native_i_2__16 (\Using_FPGA.Native ),
        .ex_Result(ex_Result),
        .imm_Value(imm_Value),
        .reg2_Data(reg2_Data));
endmodule

module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Result_Mux
   (\Using_FPGA.take_Intr_2nd_Phase_reg ,
    ex_Result,
    \Using_FPGA.take_Intr_2nd_Phase_reg_0 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_1 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_2 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_3 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_4 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_5 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_6 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_7 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_8 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_9 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_10 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_11 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_12 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_13 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_14 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_15 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_16 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_17 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_18 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_19 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_20 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_21 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_22 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_23 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_24 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_25 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_26 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_27 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_28 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_29 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg_30 ,
    \Using_FPGA.Native ,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data,
    Q,
    raw_Data_Addr,
    Shift_Logic_Res,
    extend_Data_Read,
    Clk,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 ,
    \Using_FPGA.Native_5 ,
    \Using_FPGA.Native_6 ,
    \Using_FPGA.Native_7 ,
    \Using_FPGA.Native_8 ,
    Data_Read_Mask,
    \Using_FPGA.Native_9 ,
    \Using_FPGA.Native_10 ,
    \Using_FPGA.Native_11 ,
    \Using_FPGA.Native_12 ,
    \Using_FPGA.Native_13 ,
    \Using_FPGA.Native_14 ,
    \Using_FPGA.Native_15 ,
    \Using_FPGA.Native_16 ,
    \Using_FPGA.Native_17 ,
    Data_Read0_out,
    \Using_FPGA.Native_18 ,
    \Using_FPGA.Native_19 ,
    \Using_FPGA.Native_20 ,
    \Using_FPGA.Native_21 ,
    \Using_FPGA.Native_22 ,
    \Using_FPGA.Native_23 ,
    \Using_FPGA.Native_24 ,
    \Using_FPGA.Native_25 ,
    \Using_FPGA.Native_26 ,
    \Using_FPGA.Native_27 ,
    \Using_FPGA.Native_28 ,
    \Using_FPGA.Native_29 ,
    \Using_FPGA.Native_30 ,
    \Using_FPGA.Native_31 ,
    \Using_FPGA.Native_32 );
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  output [0:31]ex_Result;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_0 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_1 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_2 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_3 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_4 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_5 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_6 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_7 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_8 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_9 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_10 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_11 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_12 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_13 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_14 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_15 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_16 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_17 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_18 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_19 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_20 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_21 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_22 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_23 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_24 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_25 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_26 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_27 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_28 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_29 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg_30 ;
  output [31:0]\Using_FPGA.Native ;
  input [0:31]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:31]reg2_Data;
  input [1:0]Q;
  input [1:0]raw_Data_Addr;
  input Shift_Logic_Res;
  input [15:0]extend_Data_Read;
  input Clk;
  input \Using_FPGA.Native_0 ;
  input [29:0]\Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input \Using_FPGA.Native_3 ;
  input \Using_FPGA.Native_4 ;
  input \Using_FPGA.Native_5 ;
  input \Using_FPGA.Native_6 ;
  input \Using_FPGA.Native_7 ;
  input \Using_FPGA.Native_8 ;
  input Data_Read_Mask;
  input \Using_FPGA.Native_9 ;
  input \Using_FPGA.Native_10 ;
  input \Using_FPGA.Native_11 ;
  input \Using_FPGA.Native_12 ;
  input \Using_FPGA.Native_13 ;
  input \Using_FPGA.Native_14 ;
  input \Using_FPGA.Native_15 ;
  input \Using_FPGA.Native_16 ;
  input \Using_FPGA.Native_17 ;
  input [15:0]Data_Read0_out;
  input \Using_FPGA.Native_18 ;
  input \Using_FPGA.Native_19 ;
  input \Using_FPGA.Native_20 ;
  input \Using_FPGA.Native_21 ;
  input \Using_FPGA.Native_22 ;
  input \Using_FPGA.Native_23 ;
  input \Using_FPGA.Native_24 ;
  input \Using_FPGA.Native_25 ;
  input \Using_FPGA.Native_26 ;
  input \Using_FPGA.Native_27 ;
  input \Using_FPGA.Native_28 ;
  input \Using_FPGA.Native_29 ;
  input \Using_FPGA.Native_30 ;
  input \Using_FPGA.Native_31 ;
  input \Using_FPGA.Native_32 ;

  wire Clk;
  wire [15:0]Data_Read0_out;
  wire Data_Read_Mask;
  wire [0:31]Interrupt_Address;
  wire [1:0]Q;
  wire Shift_Logic_Res;
  wire [31:0]\Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [29:0]\Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_10 ;
  wire \Using_FPGA.Native_11 ;
  wire \Using_FPGA.Native_12 ;
  wire \Using_FPGA.Native_13 ;
  wire \Using_FPGA.Native_14 ;
  wire \Using_FPGA.Native_15 ;
  wire \Using_FPGA.Native_16 ;
  wire \Using_FPGA.Native_17 ;
  wire \Using_FPGA.Native_18 ;
  wire \Using_FPGA.Native_19 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_20 ;
  wire \Using_FPGA.Native_21 ;
  wire \Using_FPGA.Native_22 ;
  wire \Using_FPGA.Native_23 ;
  wire \Using_FPGA.Native_24 ;
  wire \Using_FPGA.Native_25 ;
  wire \Using_FPGA.Native_26 ;
  wire \Using_FPGA.Native_27 ;
  wire \Using_FPGA.Native_28 ;
  wire \Using_FPGA.Native_29 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_30 ;
  wire \Using_FPGA.Native_31 ;
  wire \Using_FPGA.Native_32 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_5 ;
  wire \Using_FPGA.Native_6 ;
  wire \Using_FPGA.Native_7 ;
  wire \Using_FPGA.Native_8 ;
  wire \Using_FPGA.Native_9 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_0 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_1 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_10 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_11 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_12 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_13 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_14 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_15 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_16 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_17 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_18 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_19 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_2 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_20 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_21 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_22 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_23 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_24 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_25 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_26 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_27 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_28 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_29 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_3 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_30 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_4 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_5 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_6 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_7 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_8 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_9 ;
  wire [0:31]ex_Result;
  wire [0:0]exception_kind;
  wire [15:0]extend_Data_Read;
  wire [1:0]raw_Data_Addr;
  wire [0:31]reg2_Data;
  wire res_Forward2;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Result_Mux_Bit \Result_Mux_Bits[0].Result_Mux_Bit_I 
       (.Clk(Clk),
        .Data_Read0_out(Data_Read0_out[15]),
        .Interrupt_Address(Interrupt_Address[0]),
        .Q(Q),
        .\Using_FPGA.Native (\Using_FPGA.Native [31]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 [29]),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_32 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_17 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .ex_Result(ex_Result[0]),
        .exception_kind(exception_kind),
        .reg2_Data(reg2_Data[0]),
        .res_Forward2(res_Forward2));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Result_Mux_Bit_258 \Result_Mux_Bits[10].Result_Mux_Bit_I 
       (.Clk(Clk),
        .Data_Read0_out(Data_Read0_out[5]),
        .Interrupt_Address(Interrupt_Address[10]),
        .Q(Q),
        .\Using_FPGA.Native (\Using_FPGA.Native [21]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 [19]),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_22 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_17 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg_9 ),
        .ex_Result(ex_Result[10]),
        .exception_kind(exception_kind),
        .reg2_Data(reg2_Data[10]),
        .res_Forward2(res_Forward2));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Result_Mux_Bit_259 \Result_Mux_Bits[11].Result_Mux_Bit_I 
       (.Clk(Clk),
        .Data_Read0_out(Data_Read0_out[4]),
        .Interrupt_Address(Interrupt_Address[11]),
        .Q(Q),
        .\Using_FPGA.Native (\Using_FPGA.Native [20]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 [18]),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_21 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_17 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg_10 ),
        .ex_Result(ex_Result[11]),
        .exception_kind(exception_kind),
        .reg2_Data(reg2_Data[11]),
        .res_Forward2(res_Forward2));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Result_Mux_Bit_260 \Result_Mux_Bits[12].Result_Mux_Bit_I 
       (.Clk(Clk),
        .Data_Read0_out(Data_Read0_out[3]),
        .Interrupt_Address(Interrupt_Address[12]),
        .Q(Q),
        .\Using_FPGA.Native (\Using_FPGA.Native [19]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 [17]),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_20 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_17 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg_11 ),
        .ex_Result(ex_Result[12]),
        .exception_kind(exception_kind),
        .reg2_Data(reg2_Data[12]),
        .res_Forward2(res_Forward2));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Result_Mux_Bit_261 \Result_Mux_Bits[13].Result_Mux_Bit_I 
       (.Clk(Clk),
        .Data_Read0_out(Data_Read0_out[2]),
        .Interrupt_Address(Interrupt_Address[13]),
        .Q(Q),
        .\Using_FPGA.Native (\Using_FPGA.Native [18]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 [16]),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_19 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_17 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg_12 ),
        .ex_Result(ex_Result[13]),
        .exception_kind(exception_kind),
        .reg2_Data(reg2_Data[13]),
        .res_Forward2(res_Forward2));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Result_Mux_Bit_262 \Result_Mux_Bits[14].Result_Mux_Bit_I 
       (.Clk(Clk),
        .Data_Read0_out(Data_Read0_out[1]),
        .Interrupt_Address(Interrupt_Address[14]),
        .Q(Q),
        .\Using_FPGA.Native (\Using_FPGA.Native [17]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 [15]),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_18 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_17 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg_13 ),
        .ex_Result(ex_Result[14]),
        .exception_kind(exception_kind),
        .reg2_Data(reg2_Data[14]),
        .res_Forward2(res_Forward2));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Result_Mux_Bit_263 \Result_Mux_Bits[15].Result_Mux_Bit_I 
       (.Clk(Clk),
        .Data_Read0_out(Data_Read0_out[0]),
        .Interrupt_Address(Interrupt_Address[15]),
        .Q(Q),
        .\Using_FPGA.Native (\Using_FPGA.Native [16]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 [14]),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_16 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_17 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg_14 ),
        .ex_Result(ex_Result[15]),
        .exception_kind(exception_kind),
        .reg2_Data(reg2_Data[15]),
        .res_Forward2(res_Forward2));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Result_Mux_Bit_264 \Result_Mux_Bits[16].Result_Mux_Bit_I 
       (.Clk(Clk),
        .Data_Read_Mask(Data_Read_Mask),
        .Interrupt_Address(Interrupt_Address[16]),
        .Q(Q),
        .\Using_FPGA.Native (\Using_FPGA.Native [15]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 [13]),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_15 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg_15 ),
        .ex_Result(ex_Result[16]),
        .exception_kind(exception_kind),
        .extend_Data_Read(extend_Data_Read[15]),
        .reg2_Data(reg2_Data[16]),
        .res_Forward2(res_Forward2));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Result_Mux_Bit_265 \Result_Mux_Bits[17].Result_Mux_Bit_I 
       (.Clk(Clk),
        .Data_Read_Mask(Data_Read_Mask),
        .Interrupt_Address(Interrupt_Address[17]),
        .Q(Q),
        .\Using_FPGA.Native (\Using_FPGA.Native [14]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 [12]),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_14 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg_16 ),
        .ex_Result(ex_Result[17]),
        .exception_kind(exception_kind),
        .extend_Data_Read(extend_Data_Read[14]),
        .reg2_Data(reg2_Data[17]),
        .res_Forward2(res_Forward2));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Result_Mux_Bit_266 \Result_Mux_Bits[18].Result_Mux_Bit_I 
       (.Clk(Clk),
        .Data_Read_Mask(Data_Read_Mask),
        .Interrupt_Address(Interrupt_Address[18]),
        .Q(Q),
        .\Using_FPGA.Native (\Using_FPGA.Native [13]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 [11]),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_13 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg_17 ),
        .ex_Result(ex_Result[18]),
        .exception_kind(exception_kind),
        .extend_Data_Read(extend_Data_Read[13]),
        .reg2_Data(reg2_Data[18]),
        .res_Forward2(res_Forward2));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Result_Mux_Bit_267 \Result_Mux_Bits[19].Result_Mux_Bit_I 
       (.Clk(Clk),
        .Data_Read_Mask(Data_Read_Mask),
        .Interrupt_Address(Interrupt_Address[19]),
        .Q(Q),
        .\Using_FPGA.Native (\Using_FPGA.Native [12]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 [10]),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_12 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg_18 ),
        .ex_Result(ex_Result[19]),
        .exception_kind(exception_kind),
        .extend_Data_Read(extend_Data_Read[12]),
        .reg2_Data(reg2_Data[19]),
        .res_Forward2(res_Forward2));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Result_Mux_Bit_268 \Result_Mux_Bits[1].Result_Mux_Bit_I 
       (.Clk(Clk),
        .Data_Read0_out(Data_Read0_out[14]),
        .Interrupt_Address(Interrupt_Address[1]),
        .Q(Q),
        .\Using_FPGA.Native (\Using_FPGA.Native [30]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 [28]),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_31 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_17 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg_0 ),
        .ex_Result(ex_Result[1]),
        .exception_kind(exception_kind),
        .reg2_Data(reg2_Data[1]),
        .res_Forward2(res_Forward2));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Result_Mux_Bit_269 \Result_Mux_Bits[20].Result_Mux_Bit_I 
       (.Clk(Clk),
        .Data_Read_Mask(Data_Read_Mask),
        .Interrupt_Address(Interrupt_Address[20]),
        .Q(Q),
        .\Using_FPGA.Native (\Using_FPGA.Native [11]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 [9]),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_11 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg_19 ),
        .ex_Result(ex_Result[20]),
        .exception_kind(exception_kind),
        .extend_Data_Read(extend_Data_Read[11]),
        .reg2_Data(reg2_Data[20]),
        .res_Forward2(res_Forward2));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Result_Mux_Bit_270 \Result_Mux_Bits[21].Result_Mux_Bit_I 
       (.Clk(Clk),
        .Data_Read_Mask(Data_Read_Mask),
        .Interrupt_Address(Interrupt_Address[21]),
        .Q(Q),
        .\Using_FPGA.Native (\Using_FPGA.Native [10]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 [8]),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_10 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg_20 ),
        .ex_Result(ex_Result[21]),
        .exception_kind(exception_kind),
        .extend_Data_Read(extend_Data_Read[10]),
        .reg2_Data(reg2_Data[21]),
        .res_Forward2(res_Forward2));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Result_Mux_Bit_271 \Result_Mux_Bits[22].Result_Mux_Bit_I 
       (.Clk(Clk),
        .Data_Read_Mask(Data_Read_Mask),
        .Interrupt_Address(Interrupt_Address[22]),
        .Q(Q),
        .\Using_FPGA.Native (\Using_FPGA.Native [9]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 [7]),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_9 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg_21 ),
        .ex_Result(ex_Result[22]),
        .exception_kind(exception_kind),
        .extend_Data_Read(extend_Data_Read[9]),
        .reg2_Data(reg2_Data[22]),
        .res_Forward2(res_Forward2));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Result_Mux_Bit_272 \Result_Mux_Bits[23].Result_Mux_Bit_I 
       (.Clk(Clk),
        .Data_Read_Mask(Data_Read_Mask),
        .Interrupt_Address(Interrupt_Address[23]),
        .Q(Q),
        .\Using_FPGA.Native (\Using_FPGA.Native [8]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 [6]),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_8 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg_22 ),
        .ex_Result(ex_Result[23]),
        .exception_kind(exception_kind),
        .extend_Data_Read(extend_Data_Read[8]),
        .reg2_Data(reg2_Data[23]),
        .res_Forward2(res_Forward2));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Result_Mux_Bit_273 \Result_Mux_Bits[24].Result_Mux_Bit_I 
       (.Clk(Clk),
        .Interrupt_Address(Interrupt_Address[24]),
        .Q(Q),
        .\Using_FPGA.Native (\Using_FPGA.Native [7]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 [5]),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_7 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg_23 ),
        .ex_Result(ex_Result[24]),
        .exception_kind(exception_kind),
        .extend_Data_Read(extend_Data_Read[7]),
        .reg2_Data(reg2_Data[24]),
        .res_Forward2(res_Forward2));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Result_Mux_Bit_274 \Result_Mux_Bits[25].Result_Mux_Bit_I 
       (.Clk(Clk),
        .Interrupt_Address(Interrupt_Address[25]),
        .Q(Q),
        .\Using_FPGA.Native (\Using_FPGA.Native [6]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 [4]),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_6 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg_24 ),
        .ex_Result(ex_Result[25]),
        .exception_kind(exception_kind),
        .extend_Data_Read(extend_Data_Read[6]),
        .reg2_Data(reg2_Data[25]),
        .res_Forward2(res_Forward2));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Result_Mux_Bit_275 \Result_Mux_Bits[26].Result_Mux_Bit_I 
       (.Clk(Clk),
        .Interrupt_Address(Interrupt_Address[26]),
        .Q(Q),
        .\Using_FPGA.Native (\Using_FPGA.Native [5]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 [3]),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_5 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg_25 ),
        .ex_Result(ex_Result[26]),
        .exception_kind(exception_kind),
        .extend_Data_Read(extend_Data_Read[5]),
        .reg2_Data(reg2_Data[26]),
        .res_Forward2(res_Forward2));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Result_Mux_Bit_276 \Result_Mux_Bits[27].Result_Mux_Bit_I 
       (.Clk(Clk),
        .Interrupt_Address(Interrupt_Address[27]),
        .Q(Q),
        .\Using_FPGA.Native (\Using_FPGA.Native [4]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 [2]),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_4 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg_26 ),
        .ex_Result(ex_Result[27]),
        .exception_kind(exception_kind),
        .extend_Data_Read(extend_Data_Read[4]),
        .reg2_Data(reg2_Data[27]),
        .res_Forward2(res_Forward2));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Result_Mux_Bit_277 \Result_Mux_Bits[28].Result_Mux_Bit_I 
       (.Clk(Clk),
        .Interrupt_Address(Interrupt_Address[28]),
        .Q(Q),
        .\Using_FPGA.Native (\Using_FPGA.Native [3]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 [1]),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_3 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg_27 ),
        .ex_Result(ex_Result[28]),
        .exception_kind(exception_kind),
        .extend_Data_Read(extend_Data_Read[3]),
        .reg2_Data(reg2_Data[28]),
        .res_Forward2(res_Forward2));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Result_Mux_Bit_278 \Result_Mux_Bits[29].Result_Mux_Bit_I 
       (.Clk(Clk),
        .Interrupt_Address(Interrupt_Address[29]),
        .Q(Q),
        .\Using_FPGA.Native (\Using_FPGA.Native [2]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 [0]),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_2 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg_28 ),
        .ex_Result(ex_Result[29]),
        .exception_kind(exception_kind),
        .extend_Data_Read(extend_Data_Read[2]),
        .reg2_Data(reg2_Data[29]),
        .res_Forward2(res_Forward2));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Result_Mux_Bit_279 \Result_Mux_Bits[2].Result_Mux_Bit_I 
       (.Clk(Clk),
        .Data_Read0_out(Data_Read0_out[13]),
        .Interrupt_Address(Interrupt_Address[2]),
        .Q(Q),
        .\Using_FPGA.Native (\Using_FPGA.Native [29]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 [27]),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_30 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_17 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg_1 ),
        .ex_Result(ex_Result[2]),
        .exception_kind(exception_kind),
        .reg2_Data(reg2_Data[2]),
        .res_Forward2(res_Forward2));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Result_Mux_Bit_280 \Result_Mux_Bits[30].Result_Mux_Bit_I 
       (.Clk(Clk),
        .Interrupt_Address(Interrupt_Address[30]),
        .Q(Q),
        .\Using_FPGA.Native (\Using_FPGA.Native [1]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg_29 ),
        .ex_Result(ex_Result[30]),
        .exception_kind(exception_kind),
        .extend_Data_Read(extend_Data_Read[1]),
        .raw_Data_Addr(raw_Data_Addr[1]),
        .reg2_Data(reg2_Data[30]),
        .res_Forward2(res_Forward2));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Result_Mux_Bit_281 \Result_Mux_Bits[31].Result_Mux_Bit_I 
       (.Clk(Clk),
        .Interrupt_Address(Interrupt_Address[31]),
        .Q(Q),
        .Shift_Logic_Res(Shift_Logic_Res),
        .\Using_FPGA.Native (\Using_FPGA.Native [0]),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg_30 ),
        .ex_Result(ex_Result[31]),
        .exception_kind(exception_kind),
        .extend_Data_Read(extend_Data_Read[0]),
        .raw_Data_Addr(raw_Data_Addr[0]),
        .reg2_Data(reg2_Data[31]),
        .res_Forward2(res_Forward2));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Result_Mux_Bit_282 \Result_Mux_Bits[3].Result_Mux_Bit_I 
       (.Clk(Clk),
        .Data_Read0_out(Data_Read0_out[12]),
        .Interrupt_Address(Interrupt_Address[3]),
        .Q(Q),
        .\Using_FPGA.Native (\Using_FPGA.Native [28]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 [26]),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_29 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_17 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg_2 ),
        .ex_Result(ex_Result[3]),
        .exception_kind(exception_kind),
        .reg2_Data(reg2_Data[3]),
        .res_Forward2(res_Forward2));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Result_Mux_Bit_283 \Result_Mux_Bits[4].Result_Mux_Bit_I 
       (.Clk(Clk),
        .Data_Read0_out(Data_Read0_out[11]),
        .Interrupt_Address(Interrupt_Address[4]),
        .Q(Q),
        .\Using_FPGA.Native (\Using_FPGA.Native [27]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 [25]),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_28 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_17 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg_3 ),
        .ex_Result(ex_Result[4]),
        .exception_kind(exception_kind),
        .reg2_Data(reg2_Data[4]),
        .res_Forward2(res_Forward2));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Result_Mux_Bit_284 \Result_Mux_Bits[5].Result_Mux_Bit_I 
       (.Clk(Clk),
        .Data_Read0_out(Data_Read0_out[10]),
        .Interrupt_Address(Interrupt_Address[5]),
        .Q(Q),
        .\Using_FPGA.Native (\Using_FPGA.Native [26]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 [24]),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_27 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_17 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg_4 ),
        .ex_Result(ex_Result[5]),
        .exception_kind(exception_kind),
        .reg2_Data(reg2_Data[5]),
        .res_Forward2(res_Forward2));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Result_Mux_Bit_285 \Result_Mux_Bits[6].Result_Mux_Bit_I 
       (.Clk(Clk),
        .Data_Read0_out(Data_Read0_out[9]),
        .Interrupt_Address(Interrupt_Address[6]),
        .Q(Q),
        .\Using_FPGA.Native (\Using_FPGA.Native [25]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 [23]),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_26 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_17 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg_5 ),
        .ex_Result(ex_Result[6]),
        .exception_kind(exception_kind),
        .reg2_Data(reg2_Data[6]),
        .res_Forward2(res_Forward2));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Result_Mux_Bit_286 \Result_Mux_Bits[7].Result_Mux_Bit_I 
       (.Clk(Clk),
        .Data_Read0_out(Data_Read0_out[8]),
        .Interrupt_Address(Interrupt_Address[7]),
        .Q(Q),
        .\Using_FPGA.Native (\Using_FPGA.Native [24]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 [22]),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_25 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_17 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg_6 ),
        .ex_Result(ex_Result[7]),
        .exception_kind(exception_kind),
        .reg2_Data(reg2_Data[7]),
        .res_Forward2(res_Forward2));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Result_Mux_Bit_287 \Result_Mux_Bits[8].Result_Mux_Bit_I 
       (.Clk(Clk),
        .Data_Read0_out(Data_Read0_out[7]),
        .Interrupt_Address(Interrupt_Address[8]),
        .Q(Q),
        .\Using_FPGA.Native (\Using_FPGA.Native [23]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 [21]),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_24 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_17 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg_7 ),
        .ex_Result(ex_Result[8]),
        .exception_kind(exception_kind),
        .reg2_Data(reg2_Data[8]),
        .res_Forward2(res_Forward2));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Result_Mux_Bit_288 \Result_Mux_Bits[9].Result_Mux_Bit_I 
       (.Clk(Clk),
        .Data_Read0_out(Data_Read0_out[6]),
        .Interrupt_Address(Interrupt_Address[9]),
        .Q(Q),
        .\Using_FPGA.Native (\Using_FPGA.Native [22]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 [20]),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_23 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_17 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg_8 ),
        .ex_Result(ex_Result[9]),
        .exception_kind(exception_kind),
        .reg2_Data(reg2_Data[9]),
        .res_Forward2(res_Forward2));
endmodule

module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Result_Mux_Bit
   (\Using_FPGA.take_Intr_2nd_Phase_reg ,
    ex_Result,
    \Using_FPGA.Native ,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data,
    Q,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Data_Read0_out,
    Clk);
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  output [0:0]ex_Result;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;
  input [1:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input [0:0]Data_Read0_out;
  input Clk;

  wire Clk;
  wire [0:0]Data_Read0_out;
  wire [0:0]Interrupt_Address;
  wire [1:0]Q;
  wire [0:0]\Using_FPGA.Native ;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_LUT6__parameterized0_379 Data_Shift_Mux
       (.Data_Read0_out(Data_Read0_out),
        .Interrupt_Address(Interrupt_Address),
        .Q(Q),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_2 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .ex_Result(ex_Result),
        .exception_kind(exception_kind),
        .mul_ALU_Res(mul_ALU_Res),
        .reg2_Data(reg2_Data),
        .res_Forward2(res_Forward2));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FD_380 EX_Result_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized19_381 Mul_ALU_Mux
       (.Q(Q[0]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .mul_ALU_Res(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Result_Mux_Bit_258
   (\Using_FPGA.take_Intr_2nd_Phase_reg ,
    ex_Result,
    \Using_FPGA.Native ,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data,
    Q,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Data_Read0_out,
    Clk);
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  output [0:0]ex_Result;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;
  input [1:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input [0:0]Data_Read0_out;
  input Clk;

  wire Clk;
  wire [0:0]Data_Read0_out;
  wire [0:0]Interrupt_Address;
  wire [1:0]Q;
  wire [0:0]\Using_FPGA.Native ;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_LUT6__parameterized0_376 Data_Shift_Mux
       (.Data_Read0_out(Data_Read0_out),
        .Interrupt_Address(Interrupt_Address),
        .Q(Q),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_2 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .ex_Result(ex_Result),
        .exception_kind(exception_kind),
        .mul_ALU_Res(mul_ALU_Res),
        .reg2_Data(reg2_Data),
        .res_Forward2(res_Forward2));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FD_377 EX_Result_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized19_378 Mul_ALU_Mux
       (.Q(Q[0]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .mul_ALU_Res(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Result_Mux_Bit_259
   (\Using_FPGA.take_Intr_2nd_Phase_reg ,
    ex_Result,
    \Using_FPGA.Native ,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data,
    Q,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Data_Read0_out,
    Clk);
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  output [0:0]ex_Result;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;
  input [1:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input [0:0]Data_Read0_out;
  input Clk;

  wire Clk;
  wire [0:0]Data_Read0_out;
  wire [0:0]Interrupt_Address;
  wire [1:0]Q;
  wire [0:0]\Using_FPGA.Native ;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_LUT6__parameterized0_373 Data_Shift_Mux
       (.Data_Read0_out(Data_Read0_out),
        .Interrupt_Address(Interrupt_Address),
        .Q(Q),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_2 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .ex_Result(ex_Result),
        .exception_kind(exception_kind),
        .mul_ALU_Res(mul_ALU_Res),
        .reg2_Data(reg2_Data),
        .res_Forward2(res_Forward2));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FD_374 EX_Result_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized19_375 Mul_ALU_Mux
       (.Q(Q[0]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .mul_ALU_Res(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Result_Mux_Bit_260
   (\Using_FPGA.take_Intr_2nd_Phase_reg ,
    ex_Result,
    \Using_FPGA.Native ,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data,
    Q,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Data_Read0_out,
    Clk);
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  output [0:0]ex_Result;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;
  input [1:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input [0:0]Data_Read0_out;
  input Clk;

  wire Clk;
  wire [0:0]Data_Read0_out;
  wire [0:0]Interrupt_Address;
  wire [1:0]Q;
  wire [0:0]\Using_FPGA.Native ;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_LUT6__parameterized0_370 Data_Shift_Mux
       (.Data_Read0_out(Data_Read0_out),
        .Interrupt_Address(Interrupt_Address),
        .Q(Q),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_2 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .ex_Result(ex_Result),
        .exception_kind(exception_kind),
        .mul_ALU_Res(mul_ALU_Res),
        .reg2_Data(reg2_Data),
        .res_Forward2(res_Forward2));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FD_371 EX_Result_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized19_372 Mul_ALU_Mux
       (.Q(Q[0]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .mul_ALU_Res(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Result_Mux_Bit_261
   (\Using_FPGA.take_Intr_2nd_Phase_reg ,
    ex_Result,
    \Using_FPGA.Native ,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data,
    Q,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Data_Read0_out,
    Clk);
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  output [0:0]ex_Result;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;
  input [1:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input [0:0]Data_Read0_out;
  input Clk;

  wire Clk;
  wire [0:0]Data_Read0_out;
  wire [0:0]Interrupt_Address;
  wire [1:0]Q;
  wire [0:0]\Using_FPGA.Native ;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_LUT6__parameterized0_367 Data_Shift_Mux
       (.Data_Read0_out(Data_Read0_out),
        .Interrupt_Address(Interrupt_Address),
        .Q(Q),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_2 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .ex_Result(ex_Result),
        .exception_kind(exception_kind),
        .mul_ALU_Res(mul_ALU_Res),
        .reg2_Data(reg2_Data),
        .res_Forward2(res_Forward2));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FD_368 EX_Result_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized19_369 Mul_ALU_Mux
       (.Q(Q[0]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .mul_ALU_Res(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Result_Mux_Bit_262
   (\Using_FPGA.take_Intr_2nd_Phase_reg ,
    ex_Result,
    \Using_FPGA.Native ,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data,
    Q,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Data_Read0_out,
    Clk);
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  output [0:0]ex_Result;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;
  input [1:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input [0:0]Data_Read0_out;
  input Clk;

  wire Clk;
  wire [0:0]Data_Read0_out;
  wire [0:0]Interrupt_Address;
  wire [1:0]Q;
  wire [0:0]\Using_FPGA.Native ;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_LUT6__parameterized0_364 Data_Shift_Mux
       (.Data_Read0_out(Data_Read0_out),
        .Interrupt_Address(Interrupt_Address),
        .Q(Q),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_2 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .ex_Result(ex_Result),
        .exception_kind(exception_kind),
        .mul_ALU_Res(mul_ALU_Res),
        .reg2_Data(reg2_Data),
        .res_Forward2(res_Forward2));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FD_365 EX_Result_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized19_366 Mul_ALU_Mux
       (.Q(Q[0]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .mul_ALU_Res(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Result_Mux_Bit_263
   (\Using_FPGA.take_Intr_2nd_Phase_reg ,
    ex_Result,
    \Using_FPGA.Native ,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data,
    Q,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Data_Read0_out,
    Clk);
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  output [0:0]ex_Result;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;
  input [1:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input [0:0]Data_Read0_out;
  input Clk;

  wire Clk;
  wire [0:0]Data_Read0_out;
  wire [0:0]Interrupt_Address;
  wire [1:0]Q;
  wire [0:0]\Using_FPGA.Native ;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_LUT6__parameterized0_361 Data_Shift_Mux
       (.Data_Read0_out(Data_Read0_out),
        .Interrupt_Address(Interrupt_Address),
        .Q(Q),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_2 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .ex_Result(ex_Result),
        .exception_kind(exception_kind),
        .mul_ALU_Res(mul_ALU_Res),
        .reg2_Data(reg2_Data),
        .res_Forward2(res_Forward2));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FD_362 EX_Result_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized19_363 Mul_ALU_Mux
       (.Q(Q[0]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .mul_ALU_Res(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Result_Mux_Bit_264
   (\Using_FPGA.take_Intr_2nd_Phase_reg ,
    ex_Result,
    \Using_FPGA.Native ,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data,
    Q,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Data_Read_Mask,
    extend_Data_Read,
    Clk);
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  output [0:0]ex_Result;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;
  input [1:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Data_Read_Mask;
  input [0:0]extend_Data_Read;
  input Clk;

  wire Clk;
  wire Data_Read_Mask;
  wire [0:0]Interrupt_Address;
  wire [1:0]Q;
  wire [0:0]\Using_FPGA.Native ;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [0:0]extend_Data_Read;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_LUT6__parameterized0_358 Data_Shift_Mux
       (.Data_Read_Mask(Data_Read_Mask),
        .Interrupt_Address(Interrupt_Address),
        .Q(Q),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .ex_Result(ex_Result),
        .exception_kind(exception_kind),
        .extend_Data_Read(extend_Data_Read),
        .mul_ALU_Res(mul_ALU_Res),
        .reg2_Data(reg2_Data),
        .res_Forward2(res_Forward2));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FD_359 EX_Result_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized19_360 Mul_ALU_Mux
       (.Q(Q[0]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .mul_ALU_Res(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Result_Mux_Bit_265
   (\Using_FPGA.take_Intr_2nd_Phase_reg ,
    ex_Result,
    \Using_FPGA.Native ,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data,
    Q,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Data_Read_Mask,
    extend_Data_Read,
    Clk);
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  output [0:0]ex_Result;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;
  input [1:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Data_Read_Mask;
  input [0:0]extend_Data_Read;
  input Clk;

  wire Clk;
  wire Data_Read_Mask;
  wire [0:0]Interrupt_Address;
  wire [1:0]Q;
  wire [0:0]\Using_FPGA.Native ;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [0:0]extend_Data_Read;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_LUT6__parameterized0_355 Data_Shift_Mux
       (.Data_Read_Mask(Data_Read_Mask),
        .Interrupt_Address(Interrupt_Address),
        .Q(Q),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .ex_Result(ex_Result),
        .exception_kind(exception_kind),
        .extend_Data_Read(extend_Data_Read),
        .mul_ALU_Res(mul_ALU_Res),
        .reg2_Data(reg2_Data),
        .res_Forward2(res_Forward2));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FD_356 EX_Result_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized19_357 Mul_ALU_Mux
       (.Q(Q[0]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .mul_ALU_Res(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Result_Mux_Bit_266
   (\Using_FPGA.take_Intr_2nd_Phase_reg ,
    ex_Result,
    \Using_FPGA.Native ,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data,
    Q,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Data_Read_Mask,
    extend_Data_Read,
    Clk);
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  output [0:0]ex_Result;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;
  input [1:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Data_Read_Mask;
  input [0:0]extend_Data_Read;
  input Clk;

  wire Clk;
  wire Data_Read_Mask;
  wire [0:0]Interrupt_Address;
  wire [1:0]Q;
  wire [0:0]\Using_FPGA.Native ;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [0:0]extend_Data_Read;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_LUT6__parameterized0_352 Data_Shift_Mux
       (.Data_Read_Mask(Data_Read_Mask),
        .Interrupt_Address(Interrupt_Address),
        .Q(Q),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .ex_Result(ex_Result),
        .exception_kind(exception_kind),
        .extend_Data_Read(extend_Data_Read),
        .mul_ALU_Res(mul_ALU_Res),
        .reg2_Data(reg2_Data),
        .res_Forward2(res_Forward2));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FD_353 EX_Result_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized19_354 Mul_ALU_Mux
       (.Q(Q[0]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .mul_ALU_Res(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Result_Mux_Bit_267
   (\Using_FPGA.take_Intr_2nd_Phase_reg ,
    ex_Result,
    \Using_FPGA.Native ,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data,
    Q,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Data_Read_Mask,
    extend_Data_Read,
    Clk);
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  output [0:0]ex_Result;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;
  input [1:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Data_Read_Mask;
  input [0:0]extend_Data_Read;
  input Clk;

  wire Clk;
  wire Data_Read_Mask;
  wire [0:0]Interrupt_Address;
  wire [1:0]Q;
  wire [0:0]\Using_FPGA.Native ;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [0:0]extend_Data_Read;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_LUT6__parameterized0_349 Data_Shift_Mux
       (.Data_Read_Mask(Data_Read_Mask),
        .Interrupt_Address(Interrupt_Address),
        .Q(Q),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .ex_Result(ex_Result),
        .exception_kind(exception_kind),
        .extend_Data_Read(extend_Data_Read),
        .mul_ALU_Res(mul_ALU_Res),
        .reg2_Data(reg2_Data),
        .res_Forward2(res_Forward2));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FD_350 EX_Result_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized19_351 Mul_ALU_Mux
       (.Q(Q[0]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .mul_ALU_Res(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Result_Mux_Bit_268
   (\Using_FPGA.take_Intr_2nd_Phase_reg ,
    ex_Result,
    \Using_FPGA.Native ,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data,
    Q,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Data_Read0_out,
    Clk);
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  output [0:0]ex_Result;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;
  input [1:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input [0:0]Data_Read0_out;
  input Clk;

  wire Clk;
  wire [0:0]Data_Read0_out;
  wire [0:0]Interrupt_Address;
  wire [1:0]Q;
  wire [0:0]\Using_FPGA.Native ;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_LUT6__parameterized0_346 Data_Shift_Mux
       (.Data_Read0_out(Data_Read0_out),
        .Interrupt_Address(Interrupt_Address),
        .Q(Q),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_2 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .ex_Result(ex_Result),
        .exception_kind(exception_kind),
        .mul_ALU_Res(mul_ALU_Res),
        .reg2_Data(reg2_Data),
        .res_Forward2(res_Forward2));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FD_347 EX_Result_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized19_348 Mul_ALU_Mux
       (.Q(Q[0]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .mul_ALU_Res(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Result_Mux_Bit_269
   (\Using_FPGA.take_Intr_2nd_Phase_reg ,
    ex_Result,
    \Using_FPGA.Native ,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data,
    Q,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Data_Read_Mask,
    extend_Data_Read,
    Clk);
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  output [0:0]ex_Result;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;
  input [1:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Data_Read_Mask;
  input [0:0]extend_Data_Read;
  input Clk;

  wire Clk;
  wire Data_Read_Mask;
  wire [0:0]Interrupt_Address;
  wire [1:0]Q;
  wire [0:0]\Using_FPGA.Native ;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [0:0]extend_Data_Read;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_LUT6__parameterized0_343 Data_Shift_Mux
       (.Data_Read_Mask(Data_Read_Mask),
        .Interrupt_Address(Interrupt_Address),
        .Q(Q),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .ex_Result(ex_Result),
        .exception_kind(exception_kind),
        .extend_Data_Read(extend_Data_Read),
        .mul_ALU_Res(mul_ALU_Res),
        .reg2_Data(reg2_Data),
        .res_Forward2(res_Forward2));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FD_344 EX_Result_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized19_345 Mul_ALU_Mux
       (.Q(Q[0]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .mul_ALU_Res(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Result_Mux_Bit_270
   (\Using_FPGA.take_Intr_2nd_Phase_reg ,
    ex_Result,
    \Using_FPGA.Native ,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data,
    Q,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Data_Read_Mask,
    extend_Data_Read,
    Clk);
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  output [0:0]ex_Result;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;
  input [1:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Data_Read_Mask;
  input [0:0]extend_Data_Read;
  input Clk;

  wire Clk;
  wire Data_Read_Mask;
  wire [0:0]Interrupt_Address;
  wire [1:0]Q;
  wire [0:0]\Using_FPGA.Native ;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [0:0]extend_Data_Read;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_LUT6__parameterized0_340 Data_Shift_Mux
       (.Data_Read_Mask(Data_Read_Mask),
        .Interrupt_Address(Interrupt_Address),
        .Q(Q),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .ex_Result(ex_Result),
        .exception_kind(exception_kind),
        .extend_Data_Read(extend_Data_Read),
        .mul_ALU_Res(mul_ALU_Res),
        .reg2_Data(reg2_Data),
        .res_Forward2(res_Forward2));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FD_341 EX_Result_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized19_342 Mul_ALU_Mux
       (.Q(Q[0]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .mul_ALU_Res(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Result_Mux_Bit_271
   (\Using_FPGA.take_Intr_2nd_Phase_reg ,
    ex_Result,
    \Using_FPGA.Native ,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data,
    Q,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Data_Read_Mask,
    extend_Data_Read,
    Clk);
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  output [0:0]ex_Result;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;
  input [1:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Data_Read_Mask;
  input [0:0]extend_Data_Read;
  input Clk;

  wire Clk;
  wire Data_Read_Mask;
  wire [0:0]Interrupt_Address;
  wire [1:0]Q;
  wire [0:0]\Using_FPGA.Native ;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [0:0]extend_Data_Read;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_LUT6__parameterized0_337 Data_Shift_Mux
       (.Data_Read_Mask(Data_Read_Mask),
        .Interrupt_Address(Interrupt_Address),
        .Q(Q),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .ex_Result(ex_Result),
        .exception_kind(exception_kind),
        .extend_Data_Read(extend_Data_Read),
        .mul_ALU_Res(mul_ALU_Res),
        .reg2_Data(reg2_Data),
        .res_Forward2(res_Forward2));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FD_338 EX_Result_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized19_339 Mul_ALU_Mux
       (.Q(Q[0]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .mul_ALU_Res(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Result_Mux_Bit_272
   (\Using_FPGA.take_Intr_2nd_Phase_reg ,
    ex_Result,
    \Using_FPGA.Native ,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data,
    Q,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Data_Read_Mask,
    extend_Data_Read,
    Clk);
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  output [0:0]ex_Result;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;
  input [1:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Data_Read_Mask;
  input [0:0]extend_Data_Read;
  input Clk;

  wire Clk;
  wire Data_Read_Mask;
  wire [0:0]Interrupt_Address;
  wire [1:0]Q;
  wire [0:0]\Using_FPGA.Native ;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [0:0]extend_Data_Read;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_LUT6__parameterized0_334 Data_Shift_Mux
       (.Data_Read_Mask(Data_Read_Mask),
        .Interrupt_Address(Interrupt_Address),
        .Q(Q),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .ex_Result(ex_Result),
        .exception_kind(exception_kind),
        .extend_Data_Read(extend_Data_Read),
        .mul_ALU_Res(mul_ALU_Res),
        .reg2_Data(reg2_Data),
        .res_Forward2(res_Forward2));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FD_335 EX_Result_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized19_336 Mul_ALU_Mux
       (.Q(Q[0]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .mul_ALU_Res(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Result_Mux_Bit_273
   (\Using_FPGA.take_Intr_2nd_Phase_reg ,
    ex_Result,
    \Using_FPGA.Native ,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data,
    Q,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    extend_Data_Read,
    Clk);
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  output [0:0]ex_Result;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;
  input [1:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [0:0]extend_Data_Read;
  input Clk;

  wire Clk;
  wire [0:0]Interrupt_Address;
  wire [1:0]Q;
  wire [0:0]\Using_FPGA.Native ;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [0:0]extend_Data_Read;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_LUT6__parameterized0_331 Data_Shift_Mux
       (.Interrupt_Address(Interrupt_Address),
        .Q(Q),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .ex_Result(ex_Result),
        .exception_kind(exception_kind),
        .extend_Data_Read(extend_Data_Read),
        .mul_ALU_Res(mul_ALU_Res),
        .reg2_Data(reg2_Data),
        .res_Forward2(res_Forward2));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FD_332 EX_Result_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized19_333 Mul_ALU_Mux
       (.Q(Q[0]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .mul_ALU_Res(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Result_Mux_Bit_274
   (\Using_FPGA.take_Intr_2nd_Phase_reg ,
    ex_Result,
    \Using_FPGA.Native ,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data,
    Q,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    extend_Data_Read,
    Clk);
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  output [0:0]ex_Result;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;
  input [1:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [0:0]extend_Data_Read;
  input Clk;

  wire Clk;
  wire [0:0]Interrupt_Address;
  wire [1:0]Q;
  wire [0:0]\Using_FPGA.Native ;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [0:0]extend_Data_Read;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_LUT6__parameterized0_328 Data_Shift_Mux
       (.Interrupt_Address(Interrupt_Address),
        .Q(Q),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .ex_Result(ex_Result),
        .exception_kind(exception_kind),
        .extend_Data_Read(extend_Data_Read),
        .mul_ALU_Res(mul_ALU_Res),
        .reg2_Data(reg2_Data),
        .res_Forward2(res_Forward2));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FD_329 EX_Result_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized19_330 Mul_ALU_Mux
       (.Q(Q[0]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .mul_ALU_Res(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Result_Mux_Bit_275
   (\Using_FPGA.take_Intr_2nd_Phase_reg ,
    ex_Result,
    \Using_FPGA.Native ,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data,
    Q,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    extend_Data_Read,
    Clk);
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  output [0:0]ex_Result;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;
  input [1:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [0:0]extend_Data_Read;
  input Clk;

  wire Clk;
  wire [0:0]Interrupt_Address;
  wire [1:0]Q;
  wire [0:0]\Using_FPGA.Native ;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [0:0]extend_Data_Read;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_LUT6__parameterized0_325 Data_Shift_Mux
       (.Interrupt_Address(Interrupt_Address),
        .Q(Q),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .ex_Result(ex_Result),
        .exception_kind(exception_kind),
        .extend_Data_Read(extend_Data_Read),
        .mul_ALU_Res(mul_ALU_Res),
        .reg2_Data(reg2_Data),
        .res_Forward2(res_Forward2));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FD_326 EX_Result_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized19_327 Mul_ALU_Mux
       (.Q(Q[0]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .mul_ALU_Res(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Result_Mux_Bit_276
   (\Using_FPGA.take_Intr_2nd_Phase_reg ,
    ex_Result,
    \Using_FPGA.Native ,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data,
    Q,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    extend_Data_Read,
    Clk);
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  output [0:0]ex_Result;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;
  input [1:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [0:0]extend_Data_Read;
  input Clk;

  wire Clk;
  wire [0:0]Interrupt_Address;
  wire [1:0]Q;
  wire [0:0]\Using_FPGA.Native ;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [0:0]extend_Data_Read;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_LUT6__parameterized0_322 Data_Shift_Mux
       (.Interrupt_Address(Interrupt_Address),
        .Q(Q),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .ex_Result(ex_Result),
        .exception_kind(exception_kind),
        .extend_Data_Read(extend_Data_Read),
        .mul_ALU_Res(mul_ALU_Res),
        .reg2_Data(reg2_Data),
        .res_Forward2(res_Forward2));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FD_323 EX_Result_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized19_324 Mul_ALU_Mux
       (.Q(Q[0]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .mul_ALU_Res(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Result_Mux_Bit_277
   (\Using_FPGA.take_Intr_2nd_Phase_reg ,
    ex_Result,
    \Using_FPGA.Native ,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data,
    Q,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    extend_Data_Read,
    Clk);
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  output [0:0]ex_Result;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;
  input [1:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [0:0]extend_Data_Read;
  input Clk;

  wire Clk;
  wire [0:0]Interrupt_Address;
  wire [1:0]Q;
  wire [0:0]\Using_FPGA.Native ;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [0:0]extend_Data_Read;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_LUT6__parameterized0_319 Data_Shift_Mux
       (.Interrupt_Address(Interrupt_Address),
        .Q(Q),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .ex_Result(ex_Result),
        .exception_kind(exception_kind),
        .extend_Data_Read(extend_Data_Read),
        .mul_ALU_Res(mul_ALU_Res),
        .reg2_Data(reg2_Data),
        .res_Forward2(res_Forward2));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FD_320 EX_Result_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized19_321 Mul_ALU_Mux
       (.Q(Q[0]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .mul_ALU_Res(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Result_Mux_Bit_278
   (\Using_FPGA.take_Intr_2nd_Phase_reg ,
    ex_Result,
    \Using_FPGA.Native ,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data,
    Q,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    extend_Data_Read,
    Clk);
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  output [0:0]ex_Result;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;
  input [1:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [0:0]extend_Data_Read;
  input Clk;

  wire Clk;
  wire [0:0]Interrupt_Address;
  wire [1:0]Q;
  wire [0:0]\Using_FPGA.Native ;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [0:0]extend_Data_Read;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_LUT6__parameterized0_316 Data_Shift_Mux
       (.Interrupt_Address(Interrupt_Address),
        .Q(Q),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .ex_Result(ex_Result),
        .exception_kind(exception_kind),
        .extend_Data_Read(extend_Data_Read),
        .mul_ALU_Res(mul_ALU_Res),
        .reg2_Data(reg2_Data),
        .res_Forward2(res_Forward2));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FD_317 EX_Result_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized19_318 Mul_ALU_Mux
       (.Q(Q[0]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .mul_ALU_Res(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Result_Mux_Bit_279
   (\Using_FPGA.take_Intr_2nd_Phase_reg ,
    ex_Result,
    \Using_FPGA.Native ,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data,
    Q,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Data_Read0_out,
    Clk);
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  output [0:0]ex_Result;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;
  input [1:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input [0:0]Data_Read0_out;
  input Clk;

  wire Clk;
  wire [0:0]Data_Read0_out;
  wire [0:0]Interrupt_Address;
  wire [1:0]Q;
  wire [0:0]\Using_FPGA.Native ;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_LUT6__parameterized0_313 Data_Shift_Mux
       (.Data_Read0_out(Data_Read0_out),
        .Interrupt_Address(Interrupt_Address),
        .Q(Q),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_2 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .ex_Result(ex_Result),
        .exception_kind(exception_kind),
        .mul_ALU_Res(mul_ALU_Res),
        .reg2_Data(reg2_Data),
        .res_Forward2(res_Forward2));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FD_314 EX_Result_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized19_315 Mul_ALU_Mux
       (.Q(Q[0]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .mul_ALU_Res(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Result_Mux_Bit_280
   (\Using_FPGA.take_Intr_2nd_Phase_reg ,
    ex_Result,
    \Using_FPGA.Native ,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data,
    Q,
    raw_Data_Addr,
    \Using_FPGA.Native_0 ,
    extend_Data_Read,
    Clk);
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  output [0:0]ex_Result;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;
  input [1:0]Q;
  input [0:0]raw_Data_Addr;
  input \Using_FPGA.Native_0 ;
  input [0:0]extend_Data_Read;
  input Clk;

  wire Clk;
  wire [0:0]Interrupt_Address;
  wire [1:0]Q;
  wire [0:0]\Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [0:0]extend_Data_Read;
  wire mul_ALU_Res;
  wire [0:0]raw_Data_Addr;
  wire [0:0]reg2_Data;
  wire res_Forward2;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_LUT6__parameterized0_310 Data_Shift_Mux
       (.Interrupt_Address(Interrupt_Address),
        .Q(Q),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .ex_Result(ex_Result),
        .exception_kind(exception_kind),
        .extend_Data_Read(extend_Data_Read),
        .mul_ALU_Res(mul_ALU_Res),
        .reg2_Data(reg2_Data),
        .res_Forward2(res_Forward2));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FD_311 EX_Result_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized19_312 Mul_ALU_Mux
       (.Q(Q[0]),
        .mul_ALU_Res(mul_ALU_Res),
        .raw_Data_Addr(raw_Data_Addr));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Result_Mux_Bit_281
   (\Using_FPGA.take_Intr_2nd_Phase_reg ,
    ex_Result,
    \Using_FPGA.Native ,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data,
    Q,
    raw_Data_Addr,
    Shift_Logic_Res,
    extend_Data_Read,
    Clk);
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  output [0:0]ex_Result;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;
  input [1:0]Q;
  input [0:0]raw_Data_Addr;
  input Shift_Logic_Res;
  input [0:0]extend_Data_Read;
  input Clk;

  wire Clk;
  wire [0:0]Interrupt_Address;
  wire [1:0]Q;
  wire Shift_Logic_Res;
  wire [0:0]\Using_FPGA.Native ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [0:0]extend_Data_Read;
  wire mul_ALU_Res;
  wire [0:0]raw_Data_Addr;
  wire [0:0]reg2_Data;
  wire res_Forward2;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_LUT6__parameterized0_307 Data_Shift_Mux
       (.Interrupt_Address(Interrupt_Address),
        .Q(Q),
        .Shift_Logic_Res(Shift_Logic_Res),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .ex_Result(ex_Result),
        .exception_kind(exception_kind),
        .extend_Data_Read(extend_Data_Read),
        .mul_ALU_Res(mul_ALU_Res),
        .reg2_Data(reg2_Data),
        .res_Forward2(res_Forward2));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FD_308 EX_Result_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized19_309 Mul_ALU_Mux
       (.Q(Q[0]),
        .mul_ALU_Res(mul_ALU_Res),
        .raw_Data_Addr(raw_Data_Addr));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Result_Mux_Bit_282
   (\Using_FPGA.take_Intr_2nd_Phase_reg ,
    ex_Result,
    \Using_FPGA.Native ,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data,
    Q,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Data_Read0_out,
    Clk);
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  output [0:0]ex_Result;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;
  input [1:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input [0:0]Data_Read0_out;
  input Clk;

  wire Clk;
  wire [0:0]Data_Read0_out;
  wire [0:0]Interrupt_Address;
  wire [1:0]Q;
  wire [0:0]\Using_FPGA.Native ;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_LUT6__parameterized0_304 Data_Shift_Mux
       (.Data_Read0_out(Data_Read0_out),
        .Interrupt_Address(Interrupt_Address),
        .Q(Q),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_2 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .ex_Result(ex_Result),
        .exception_kind(exception_kind),
        .mul_ALU_Res(mul_ALU_Res),
        .reg2_Data(reg2_Data),
        .res_Forward2(res_Forward2));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FD_305 EX_Result_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized19_306 Mul_ALU_Mux
       (.Q(Q[0]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .mul_ALU_Res(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Result_Mux_Bit_283
   (\Using_FPGA.take_Intr_2nd_Phase_reg ,
    ex_Result,
    \Using_FPGA.Native ,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data,
    Q,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Data_Read0_out,
    Clk);
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  output [0:0]ex_Result;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;
  input [1:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input [0:0]Data_Read0_out;
  input Clk;

  wire Clk;
  wire [0:0]Data_Read0_out;
  wire [0:0]Interrupt_Address;
  wire [1:0]Q;
  wire [0:0]\Using_FPGA.Native ;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_LUT6__parameterized0_301 Data_Shift_Mux
       (.Data_Read0_out(Data_Read0_out),
        .Interrupt_Address(Interrupt_Address),
        .Q(Q),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_2 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .ex_Result(ex_Result),
        .exception_kind(exception_kind),
        .mul_ALU_Res(mul_ALU_Res),
        .reg2_Data(reg2_Data),
        .res_Forward2(res_Forward2));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FD_302 EX_Result_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized19_303 Mul_ALU_Mux
       (.Q(Q[0]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .mul_ALU_Res(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Result_Mux_Bit_284
   (\Using_FPGA.take_Intr_2nd_Phase_reg ,
    ex_Result,
    \Using_FPGA.Native ,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data,
    Q,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Data_Read0_out,
    Clk);
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  output [0:0]ex_Result;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;
  input [1:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input [0:0]Data_Read0_out;
  input Clk;

  wire Clk;
  wire [0:0]Data_Read0_out;
  wire [0:0]Interrupt_Address;
  wire [1:0]Q;
  wire [0:0]\Using_FPGA.Native ;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_LUT6__parameterized0_298 Data_Shift_Mux
       (.Data_Read0_out(Data_Read0_out),
        .Interrupt_Address(Interrupt_Address),
        .Q(Q),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_2 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .ex_Result(ex_Result),
        .exception_kind(exception_kind),
        .mul_ALU_Res(mul_ALU_Res),
        .reg2_Data(reg2_Data),
        .res_Forward2(res_Forward2));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FD_299 EX_Result_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized19_300 Mul_ALU_Mux
       (.Q(Q[0]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .mul_ALU_Res(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Result_Mux_Bit_285
   (\Using_FPGA.take_Intr_2nd_Phase_reg ,
    ex_Result,
    \Using_FPGA.Native ,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data,
    Q,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Data_Read0_out,
    Clk);
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  output [0:0]ex_Result;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;
  input [1:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input [0:0]Data_Read0_out;
  input Clk;

  wire Clk;
  wire [0:0]Data_Read0_out;
  wire [0:0]Interrupt_Address;
  wire [1:0]Q;
  wire [0:0]\Using_FPGA.Native ;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_LUT6__parameterized0_295 Data_Shift_Mux
       (.Data_Read0_out(Data_Read0_out),
        .Interrupt_Address(Interrupt_Address),
        .Q(Q),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_2 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .ex_Result(ex_Result),
        .exception_kind(exception_kind),
        .mul_ALU_Res(mul_ALU_Res),
        .reg2_Data(reg2_Data),
        .res_Forward2(res_Forward2));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FD_296 EX_Result_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized19_297 Mul_ALU_Mux
       (.Q(Q[0]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .mul_ALU_Res(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Result_Mux_Bit_286
   (\Using_FPGA.take_Intr_2nd_Phase_reg ,
    ex_Result,
    \Using_FPGA.Native ,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data,
    Q,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Data_Read0_out,
    Clk);
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  output [0:0]ex_Result;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;
  input [1:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input [0:0]Data_Read0_out;
  input Clk;

  wire Clk;
  wire [0:0]Data_Read0_out;
  wire [0:0]Interrupt_Address;
  wire [1:0]Q;
  wire [0:0]\Using_FPGA.Native ;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_LUT6__parameterized0_292 Data_Shift_Mux
       (.Data_Read0_out(Data_Read0_out),
        .Interrupt_Address(Interrupt_Address),
        .Q(Q),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_2 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .ex_Result(ex_Result),
        .exception_kind(exception_kind),
        .mul_ALU_Res(mul_ALU_Res),
        .reg2_Data(reg2_Data),
        .res_Forward2(res_Forward2));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FD_293 EX_Result_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized19_294 Mul_ALU_Mux
       (.Q(Q[0]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .mul_ALU_Res(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Result_Mux_Bit_287
   (\Using_FPGA.take_Intr_2nd_Phase_reg ,
    ex_Result,
    \Using_FPGA.Native ,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data,
    Q,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Data_Read0_out,
    Clk);
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  output [0:0]ex_Result;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;
  input [1:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input [0:0]Data_Read0_out;
  input Clk;

  wire Clk;
  wire [0:0]Data_Read0_out;
  wire [0:0]Interrupt_Address;
  wire [1:0]Q;
  wire [0:0]\Using_FPGA.Native ;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_LUT6__parameterized0_289 Data_Shift_Mux
       (.Data_Read0_out(Data_Read0_out),
        .Interrupt_Address(Interrupt_Address),
        .Q(Q),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_2 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .ex_Result(ex_Result),
        .exception_kind(exception_kind),
        .mul_ALU_Res(mul_ALU_Res),
        .reg2_Data(reg2_Data),
        .res_Forward2(res_Forward2));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FD_290 EX_Result_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized19_291 Mul_ALU_Mux
       (.Q(Q[0]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .mul_ALU_Res(mul_ALU_Res));
endmodule

(* ORIG_REF_NAME = "Result_Mux_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Result_Mux_Bit_288
   (\Using_FPGA.take_Intr_2nd_Phase_reg ,
    ex_Result,
    \Using_FPGA.Native ,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data,
    Q,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Data_Read0_out,
    Clk);
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  output [0:0]ex_Result;
  output [0:0]\Using_FPGA.Native ;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;
  input [1:0]Q;
  input [0:0]\Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input [0:0]Data_Read0_out;
  input Clk;

  wire Clk;
  wire [0:0]Data_Read0_out;
  wire [0:0]Interrupt_Address;
  wire [1:0]Q;
  wire [0:0]\Using_FPGA.Native ;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_LUT6__parameterized0 Data_Shift_Mux
       (.Data_Read0_out(Data_Read0_out),
        .Interrupt_Address(Interrupt_Address),
        .Q(Q),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_2 ),
        .\Using_FPGA.take_Intr_2nd_Phase_reg (\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .ex_Result(ex_Result),
        .exception_kind(exception_kind),
        .mul_ALU_Res(mul_ALU_Res),
        .reg2_Data(reg2_Data),
        .res_Forward2(res_Forward2));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_FD EX_Result_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_Result(ex_Result));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized19 Mul_ALU_Mux
       (.Q(Q[0]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .mul_ALU_Res(mul_ALU_Res));
endmodule

module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Shift_Logic_Bit
   (Select_Logic_reg,
    op2_C,
    \Using_FPGA.Native ,
    Logic_Oper,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Shift_Oper,
    Select_Logic);
  output Select_Logic_reg;
  input [0:0]op2_C;
  input \Using_FPGA.Native ;
  input [0:1]Logic_Oper;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Shift_Oper;
  input Select_Logic;

  wire [0:1]Logic_Oper;
  wire Select_Logic;
  wire Select_Logic_reg;
  wire Shift_Oper;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire logic_Res_i;
  wire [0:0]op2_C;
  wire shift_Res;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized15_255 Logic_LUT
       (.Logic_Oper(Logic_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .logic_Res_i(logic_Res_i),
        .op2_C(op2_C));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized17_256 Shift_LUT
       (.Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_1 ),
        .shift_Res(shift_Res));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXF7_257 Shift_Logic_Mux
       (.Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg),
        .logic_Res_i(logic_Res_i),
        .shift_Res(shift_Res));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Shift_Logic_Bit_134
   (Select_Logic_reg,
    op2_C,
    \Using_FPGA.Native ,
    Logic_Oper,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Shift_Oper,
    Select_Logic);
  output Select_Logic_reg;
  input [0:0]op2_C;
  input \Using_FPGA.Native ;
  input [0:1]Logic_Oper;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Shift_Oper;
  input Select_Logic;

  wire [0:1]Logic_Oper;
  wire Select_Logic;
  wire Select_Logic_reg;
  wire Shift_Oper;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire logic_Res_i;
  wire [0:0]op2_C;
  wire shift_Res;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized15_252 Logic_LUT
       (.Logic_Oper(Logic_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .logic_Res_i(logic_Res_i),
        .op2_C(op2_C));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized17_253 Shift_LUT
       (.Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_1 ),
        .shift_Res(shift_Res));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXF7_254 Shift_Logic_Mux
       (.Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg),
        .logic_Res_i(logic_Res_i),
        .shift_Res(shift_Res));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Shift_Logic_Bit_135
   (Select_Logic_reg,
    op2_C,
    \Using_FPGA.Native ,
    Logic_Oper,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Shift_Oper,
    Select_Logic);
  output Select_Logic_reg;
  input [0:0]op2_C;
  input \Using_FPGA.Native ;
  input [0:1]Logic_Oper;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Shift_Oper;
  input Select_Logic;

  wire [0:1]Logic_Oper;
  wire Select_Logic;
  wire Select_Logic_reg;
  wire Shift_Oper;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire logic_Res_i;
  wire [0:0]op2_C;
  wire shift_Res;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized15_249 Logic_LUT
       (.Logic_Oper(Logic_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .logic_Res_i(logic_Res_i),
        .op2_C(op2_C));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized17_250 Shift_LUT
       (.Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_1 ),
        .shift_Res(shift_Res));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXF7_251 Shift_Logic_Mux
       (.Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg),
        .logic_Res_i(logic_Res_i),
        .shift_Res(shift_Res));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Shift_Logic_Bit_136
   (Select_Logic_reg,
    op2_C,
    \Using_FPGA.Native ,
    Logic_Oper,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Shift_Oper,
    Select_Logic);
  output Select_Logic_reg;
  input [0:0]op2_C;
  input \Using_FPGA.Native ;
  input [0:1]Logic_Oper;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Shift_Oper;
  input Select_Logic;

  wire [0:1]Logic_Oper;
  wire Select_Logic;
  wire Select_Logic_reg;
  wire Shift_Oper;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire logic_Res_i;
  wire [0:0]op2_C;
  wire shift_Res;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized15_246 Logic_LUT
       (.Logic_Oper(Logic_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .logic_Res_i(logic_Res_i),
        .op2_C(op2_C));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized17_247 Shift_LUT
       (.Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_1 ),
        .shift_Res(shift_Res));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXF7_248 Shift_Logic_Mux
       (.Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg),
        .logic_Res_i(logic_Res_i),
        .shift_Res(shift_Res));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Shift_Logic_Bit_137
   (Select_Logic_reg,
    op2_C,
    \Using_FPGA.Native ,
    Logic_Oper,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Shift_Oper,
    Select_Logic);
  output Select_Logic_reg;
  input [0:0]op2_C;
  input \Using_FPGA.Native ;
  input [0:1]Logic_Oper;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Shift_Oper;
  input Select_Logic;

  wire [0:1]Logic_Oper;
  wire Select_Logic;
  wire Select_Logic_reg;
  wire Shift_Oper;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire logic_Res_i;
  wire [0:0]op2_C;
  wire shift_Res;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized15_243 Logic_LUT
       (.Logic_Oper(Logic_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .logic_Res_i(logic_Res_i),
        .op2_C(op2_C));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized17_244 Shift_LUT
       (.Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_1 ),
        .shift_Res(shift_Res));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXF7_245 Shift_Logic_Mux
       (.Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg),
        .logic_Res_i(logic_Res_i),
        .shift_Res(shift_Res));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Shift_Logic_Bit_138
   (Select_Logic_reg,
    op2_C,
    \Using_FPGA.Native ,
    Logic_Oper,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Shift_Oper,
    Select_Logic);
  output Select_Logic_reg;
  input [0:0]op2_C;
  input \Using_FPGA.Native ;
  input [0:1]Logic_Oper;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Shift_Oper;
  input Select_Logic;

  wire [0:1]Logic_Oper;
  wire Select_Logic;
  wire Select_Logic_reg;
  wire Shift_Oper;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire logic_Res_i;
  wire [0:0]op2_C;
  wire shift_Res;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized15_240 Logic_LUT
       (.Logic_Oper(Logic_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .logic_Res_i(logic_Res_i),
        .op2_C(op2_C));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized17_241 Shift_LUT
       (.Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_1 ),
        .shift_Res(shift_Res));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXF7_242 Shift_Logic_Mux
       (.Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg),
        .logic_Res_i(logic_Res_i),
        .shift_Res(shift_Res));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Shift_Logic_Bit_139
   (Select_Logic_reg,
    op2_C,
    \Using_FPGA.Native ,
    Logic_Oper,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Shift_Oper,
    Select_Logic);
  output Select_Logic_reg;
  input [0:0]op2_C;
  input \Using_FPGA.Native ;
  input [0:1]Logic_Oper;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Shift_Oper;
  input Select_Logic;

  wire [0:1]Logic_Oper;
  wire Select_Logic;
  wire Select_Logic_reg;
  wire Shift_Oper;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire logic_Res_i;
  wire [0:0]op2_C;
  wire shift_Res;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized15_237 Logic_LUT
       (.Logic_Oper(Logic_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .logic_Res_i(logic_Res_i),
        .op2_C(op2_C));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized17_238 Shift_LUT
       (.Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_1 ),
        .shift_Res(shift_Res));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXF7_239 Shift_Logic_Mux
       (.Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg),
        .logic_Res_i(logic_Res_i),
        .shift_Res(shift_Res));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Shift_Logic_Bit_140
   (Select_Logic_reg,
    op2_C,
    \Using_FPGA.Native ,
    Logic_Oper,
    \Using_FPGA.Native_0 ,
    Sext,
    Shift_Oper,
    Select_Logic);
  output Select_Logic_reg;
  input [0:0]op2_C;
  input \Using_FPGA.Native ;
  input [0:1]Logic_Oper;
  input \Using_FPGA.Native_0 ;
  input Sext;
  input Shift_Oper;
  input Select_Logic;

  wire [0:1]Logic_Oper;
  wire Select_Logic;
  wire Select_Logic_reg;
  wire Sext;
  wire Shift_Oper;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire logic_Res_i;
  wire [0:0]op2_C;
  wire shift_Res;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized15_234 Logic_LUT
       (.Logic_Oper(Logic_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .logic_Res_i(logic_Res_i),
        .op2_C(op2_C));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized17_235 Shift_LUT
       (.Sext(Sext),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native ),
        .shift_Res(shift_Res));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXF7_236 Shift_Logic_Mux
       (.Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg),
        .logic_Res_i(logic_Res_i),
        .shift_Res(shift_Res));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Shift_Logic_Bit_141
   (Select_Logic_reg,
    op2_C,
    \Using_FPGA.Native ,
    Logic_Oper,
    \Using_FPGA.Native_0 ,
    Sext,
    Shift_Oper,
    Select_Logic);
  output Select_Logic_reg;
  input [0:0]op2_C;
  input \Using_FPGA.Native ;
  input [0:1]Logic_Oper;
  input \Using_FPGA.Native_0 ;
  input Sext;
  input Shift_Oper;
  input Select_Logic;

  wire [0:1]Logic_Oper;
  wire Select_Logic;
  wire Select_Logic_reg;
  wire Sext;
  wire Shift_Oper;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire logic_Res_i;
  wire [0:0]op2_C;
  wire shift_Res;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized15_231 Logic_LUT
       (.Logic_Oper(Logic_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .logic_Res_i(logic_Res_i),
        .op2_C(op2_C));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized17_232 Shift_LUT
       (.Sext(Sext),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native ),
        .shift_Res(shift_Res));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXF7_233 Shift_Logic_Mux
       (.Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg),
        .logic_Res_i(logic_Res_i),
        .shift_Res(shift_Res));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Shift_Logic_Bit_142
   (Select_Logic_reg,
    op2_C,
    \Using_FPGA.Native ,
    Logic_Oper,
    \Using_FPGA.Native_0 ,
    Sext,
    Shift_Oper,
    Select_Logic);
  output Select_Logic_reg;
  input [0:0]op2_C;
  input \Using_FPGA.Native ;
  input [0:1]Logic_Oper;
  input \Using_FPGA.Native_0 ;
  input Sext;
  input Shift_Oper;
  input Select_Logic;

  wire [0:1]Logic_Oper;
  wire Select_Logic;
  wire Select_Logic_reg;
  wire Sext;
  wire Shift_Oper;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire logic_Res_i;
  wire [0:0]op2_C;
  wire shift_Res;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized15_228 Logic_LUT
       (.Logic_Oper(Logic_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .logic_Res_i(logic_Res_i),
        .op2_C(op2_C));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized17_229 Shift_LUT
       (.Sext(Sext),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native ),
        .shift_Res(shift_Res));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXF7_230 Shift_Logic_Mux
       (.Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg),
        .logic_Res_i(logic_Res_i),
        .shift_Res(shift_Res));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Shift_Logic_Bit_143
   (Select_Logic_reg,
    op2_C,
    \Using_FPGA.Native ,
    Logic_Oper,
    \Using_FPGA.Native_0 ,
    Sext,
    Shift_Oper,
    Select_Logic);
  output Select_Logic_reg;
  input [0:0]op2_C;
  input \Using_FPGA.Native ;
  input [0:1]Logic_Oper;
  input \Using_FPGA.Native_0 ;
  input Sext;
  input Shift_Oper;
  input Select_Logic;

  wire [0:1]Logic_Oper;
  wire Select_Logic;
  wire Select_Logic_reg;
  wire Sext;
  wire Shift_Oper;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire logic_Res_i;
  wire [0:0]op2_C;
  wire shift_Res;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized15_225 Logic_LUT
       (.Logic_Oper(Logic_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .logic_Res_i(logic_Res_i),
        .op2_C(op2_C));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized17_226 Shift_LUT
       (.Sext(Sext),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native ),
        .shift_Res(shift_Res));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXF7_227 Shift_Logic_Mux
       (.Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg),
        .logic_Res_i(logic_Res_i),
        .shift_Res(shift_Res));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Shift_Logic_Bit_144
   (Select_Logic_reg,
    op2_C,
    \Using_FPGA.Native ,
    Logic_Oper,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Shift_Oper,
    Select_Logic);
  output Select_Logic_reg;
  input [0:0]op2_C;
  input \Using_FPGA.Native ;
  input [0:1]Logic_Oper;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Shift_Oper;
  input Select_Logic;

  wire [0:1]Logic_Oper;
  wire Select_Logic;
  wire Select_Logic_reg;
  wire Shift_Oper;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire logic_Res_i;
  wire [0:0]op2_C;
  wire shift_Res;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized15_222 Logic_LUT
       (.Logic_Oper(Logic_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .logic_Res_i(logic_Res_i),
        .op2_C(op2_C));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized17_223 Shift_LUT
       (.Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_1 ),
        .shift_Res(shift_Res));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXF7_224 Shift_Logic_Mux
       (.Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg),
        .logic_Res_i(logic_Res_i),
        .shift_Res(shift_Res));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Shift_Logic_Bit_145
   (Select_Logic_reg,
    op2_C,
    \Using_FPGA.Native ,
    Logic_Oper,
    \Using_FPGA.Native_0 ,
    Sext,
    Shift_Oper,
    Select_Logic);
  output Select_Logic_reg;
  input [0:0]op2_C;
  input \Using_FPGA.Native ;
  input [0:1]Logic_Oper;
  input \Using_FPGA.Native_0 ;
  input Sext;
  input Shift_Oper;
  input Select_Logic;

  wire [0:1]Logic_Oper;
  wire Select_Logic;
  wire Select_Logic_reg;
  wire Sext;
  wire Shift_Oper;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire logic_Res_i;
  wire [0:0]op2_C;
  wire shift_Res;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized15_219 Logic_LUT
       (.Logic_Oper(Logic_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .logic_Res_i(logic_Res_i),
        .op2_C(op2_C));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized17_220 Shift_LUT
       (.Sext(Sext),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native ),
        .shift_Res(shift_Res));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXF7_221 Shift_Logic_Mux
       (.Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg),
        .logic_Res_i(logic_Res_i),
        .shift_Res(shift_Res));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Shift_Logic_Bit_146
   (Select_Logic_reg,
    op2_C,
    \Using_FPGA.Native ,
    Logic_Oper,
    \Using_FPGA.Native_0 ,
    Sext,
    Shift_Oper,
    Select_Logic);
  output Select_Logic_reg;
  input [0:0]op2_C;
  input \Using_FPGA.Native ;
  input [0:1]Logic_Oper;
  input \Using_FPGA.Native_0 ;
  input Sext;
  input Shift_Oper;
  input Select_Logic;

  wire [0:1]Logic_Oper;
  wire Select_Logic;
  wire Select_Logic_reg;
  wire Sext;
  wire Shift_Oper;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire logic_Res_i;
  wire [0:0]op2_C;
  wire shift_Res;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized15_216 Logic_LUT
       (.Logic_Oper(Logic_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .logic_Res_i(logic_Res_i),
        .op2_C(op2_C));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized17_217 Shift_LUT
       (.Sext(Sext),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native ),
        .shift_Res(shift_Res));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXF7_218 Shift_Logic_Mux
       (.Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg),
        .logic_Res_i(logic_Res_i),
        .shift_Res(shift_Res));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Shift_Logic_Bit_147
   (Select_Logic_reg,
    op2_C,
    \Using_FPGA.Native ,
    Logic_Oper,
    \Using_FPGA.Native_0 ,
    Sext,
    Shift_Oper,
    Select_Logic);
  output Select_Logic_reg;
  input [0:0]op2_C;
  input \Using_FPGA.Native ;
  input [0:1]Logic_Oper;
  input \Using_FPGA.Native_0 ;
  input Sext;
  input Shift_Oper;
  input Select_Logic;

  wire [0:1]Logic_Oper;
  wire Select_Logic;
  wire Select_Logic_reg;
  wire Sext;
  wire Shift_Oper;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire logic_Res_i;
  wire [0:0]op2_C;
  wire shift_Res;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized15_213 Logic_LUT
       (.Logic_Oper(Logic_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .logic_Res_i(logic_Res_i),
        .op2_C(op2_C));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized17_214 Shift_LUT
       (.Sext(Sext),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native ),
        .shift_Res(shift_Res));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXF7_215 Shift_Logic_Mux
       (.Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg),
        .logic_Res_i(logic_Res_i),
        .shift_Res(shift_Res));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Shift_Logic_Bit_148
   (Select_Logic_reg,
    op2_C,
    \Using_FPGA.Native ,
    Logic_Oper,
    \Using_FPGA.Native_0 ,
    Sext,
    Shift_Oper,
    Select_Logic);
  output Select_Logic_reg;
  input [0:0]op2_C;
  input \Using_FPGA.Native ;
  input [0:1]Logic_Oper;
  input \Using_FPGA.Native_0 ;
  input Sext;
  input Shift_Oper;
  input Select_Logic;

  wire [0:1]Logic_Oper;
  wire Select_Logic;
  wire Select_Logic_reg;
  wire Sext;
  wire Shift_Oper;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire logic_Res_i;
  wire [0:0]op2_C;
  wire shift_Res;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized15_210 Logic_LUT
       (.Logic_Oper(Logic_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .logic_Res_i(logic_Res_i),
        .op2_C(op2_C));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized17_211 Shift_LUT
       (.Sext(Sext),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native ),
        .shift_Res(shift_Res));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXF7_212 Shift_Logic_Mux
       (.Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg),
        .logic_Res_i(logic_Res_i),
        .shift_Res(shift_Res));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Shift_Logic_Bit_149
   (Select_Logic_reg,
    op2_C,
    \Using_FPGA.Native ,
    Logic_Oper,
    \Using_FPGA.Native_0 ,
    Shift_Oper,
    Select_Logic);
  output Select_Logic_reg;
  input [0:0]op2_C;
  input \Using_FPGA.Native ;
  input [0:1]Logic_Oper;
  input \Using_FPGA.Native_0 ;
  input Shift_Oper;
  input Select_Logic;

  wire [0:1]Logic_Oper;
  wire Select_Logic;
  wire Select_Logic_reg;
  wire Shift_Oper;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire logic_Res_i;
  wire [0:0]op2_C;
  wire shift_Res;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized15_207 Logic_LUT
       (.Logic_Oper(Logic_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .logic_Res_i(logic_Res_i),
        .op2_C(op2_C));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized17_208 Shift_LUT
       (.Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native ),
        .shift_Res(shift_Res));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXF7_209 Shift_Logic_Mux
       (.Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg),
        .logic_Res_i(logic_Res_i),
        .shift_Res(shift_Res));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Shift_Logic_Bit_150
   (Select_Logic_reg,
    op2_C,
    \Using_FPGA.Native ,
    Logic_Oper,
    \Using_FPGA.Native_0 ,
    Shift_Oper,
    Select_Logic);
  output Select_Logic_reg;
  input [0:0]op2_C;
  input \Using_FPGA.Native ;
  input [0:1]Logic_Oper;
  input \Using_FPGA.Native_0 ;
  input Shift_Oper;
  input Select_Logic;

  wire [0:1]Logic_Oper;
  wire Select_Logic;
  wire Select_Logic_reg;
  wire Shift_Oper;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire logic_Res_i;
  wire [0:0]op2_C;
  wire shift_Res;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized15_204 Logic_LUT
       (.Logic_Oper(Logic_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .logic_Res_i(logic_Res_i),
        .op2_C(op2_C));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized17_205 Shift_LUT
       (.Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native ),
        .shift_Res(shift_Res));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXF7_206 Shift_Logic_Mux
       (.Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg),
        .logic_Res_i(logic_Res_i),
        .shift_Res(shift_Res));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Shift_Logic_Bit_151
   (Select_Logic_reg,
    op2_C,
    \Using_FPGA.Native ,
    Logic_Oper,
    \Using_FPGA.Native_0 ,
    Shift_Oper,
    Select_Logic);
  output Select_Logic_reg;
  input [0:0]op2_C;
  input \Using_FPGA.Native ;
  input [0:1]Logic_Oper;
  input \Using_FPGA.Native_0 ;
  input Shift_Oper;
  input Select_Logic;

  wire [0:1]Logic_Oper;
  wire Select_Logic;
  wire Select_Logic_reg;
  wire Shift_Oper;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire logic_Res_i;
  wire [0:0]op2_C;
  wire shift_Res;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized15_201 Logic_LUT
       (.Logic_Oper(Logic_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .logic_Res_i(logic_Res_i),
        .op2_C(op2_C));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized17_202 Shift_LUT
       (.Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native ),
        .shift_Res(shift_Res));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXF7_203 Shift_Logic_Mux
       (.Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg),
        .logic_Res_i(logic_Res_i),
        .shift_Res(shift_Res));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Shift_Logic_Bit_152
   (Select_Logic_reg,
    op2_C,
    \Using_FPGA.Native ,
    Logic_Oper,
    \Using_FPGA.Native_0 ,
    Shift_Oper,
    Select_Logic);
  output Select_Logic_reg;
  input [0:0]op2_C;
  input \Using_FPGA.Native ;
  input [0:1]Logic_Oper;
  input \Using_FPGA.Native_0 ;
  input Shift_Oper;
  input Select_Logic;

  wire [0:1]Logic_Oper;
  wire Select_Logic;
  wire Select_Logic_reg;
  wire Shift_Oper;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire logic_Res_i;
  wire [0:0]op2_C;
  wire shift_Res;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized15_198 Logic_LUT
       (.Logic_Oper(Logic_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .logic_Res_i(logic_Res_i),
        .op2_C(op2_C));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized17_199 Shift_LUT
       (.Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native ),
        .shift_Res(shift_Res));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXF7_200 Shift_Logic_Mux
       (.Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg),
        .logic_Res_i(logic_Res_i),
        .shift_Res(shift_Res));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Shift_Logic_Bit_153
   (Select_Logic_reg,
    \Using_FPGA.Native ,
    Shifted,
    Logic_Oper,
    \Using_FPGA.Native_0 ,
    Shift_Oper,
    Select_Logic);
  output Select_Logic_reg;
  input \Using_FPGA.Native ;
  input Shifted;
  input [0:1]Logic_Oper;
  input \Using_FPGA.Native_0 ;
  input Shift_Oper;
  input Select_Logic;

  wire [0:1]Logic_Oper;
  wire Select_Logic;
  wire Select_Logic_reg;
  wire Shift_Oper;
  wire Shifted;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire logic_Res_i;
  wire shift_Res;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized15_195 Logic_LUT
       (.Logic_Oper(Logic_Oper),
        .Shifted(Shifted),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .logic_Res_i(logic_Res_i));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized17_196 Shift_LUT
       (.Shift_Oper(Shift_Oper),
        .Shifted(Shifted),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .shift_Res(shift_Res));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXF7_197 Shift_Logic_Mux
       (.Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg),
        .logic_Res_i(logic_Res_i),
        .shift_Res(shift_Res));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Shift_Logic_Bit_154
   (Select_Logic_reg,
    Op2,
    \Using_FPGA.Native ,
    Logic_Oper,
    Shifted,
    Shift_Oper,
    Select_Logic);
  output Select_Logic_reg;
  input Op2;
  input \Using_FPGA.Native ;
  input [0:1]Logic_Oper;
  input Shifted;
  input Shift_Oper;
  input Select_Logic;

  wire [0:1]Logic_Oper;
  wire Op2;
  wire Select_Logic;
  wire Select_Logic_reg;
  wire Shift_Oper;
  wire Shifted;
  wire \Using_FPGA.Native ;
  wire logic_Res_i;
  wire shift_Res;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized15_192 Logic_LUT
       (.Logic_Oper(Logic_Oper),
        .Op2(Op2),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .logic_Res_i(logic_Res_i));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized17_193 Shift_LUT
       (.Shift_Oper(Shift_Oper),
        .Shifted(Shifted),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .shift_Res(shift_Res));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXF7_194 Shift_Logic_Mux
       (.Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg),
        .logic_Res_i(logic_Res_i),
        .shift_Res(shift_Res));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Shift_Logic_Bit_155
   (Select_Logic_reg,
    op2_C,
    \Using_FPGA.Native ,
    Logic_Oper,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Shift_Oper,
    Select_Logic);
  output Select_Logic_reg;
  input [0:0]op2_C;
  input \Using_FPGA.Native ;
  input [0:1]Logic_Oper;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Shift_Oper;
  input Select_Logic;

  wire [0:1]Logic_Oper;
  wire Select_Logic;
  wire Select_Logic_reg;
  wire Shift_Oper;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire logic_Res_i;
  wire [0:0]op2_C;
  wire shift_Res;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized15_189 Logic_LUT
       (.Logic_Oper(Logic_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .logic_Res_i(logic_Res_i),
        .op2_C(op2_C));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized17_190 Shift_LUT
       (.Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_1 ),
        .shift_Res(shift_Res));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXF7_191 Shift_Logic_Mux
       (.Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg),
        .logic_Res_i(logic_Res_i),
        .shift_Res(shift_Res));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Shift_Logic_Bit_156
   (Select_Logic_reg,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    Logic_Oper,
    \Using_FPGA.Native_1 ,
    Shift_Oper,
    Select_Logic);
  output Select_Logic_reg;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input [0:1]Logic_Oper;
  input \Using_FPGA.Native_1 ;
  input Shift_Oper;
  input Select_Logic;

  wire [0:1]Logic_Oper;
  wire Select_Logic;
  wire Select_Logic_reg;
  wire Shift_Oper;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire logic_Res_i;
  wire shift_Res;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized15_186 Logic_LUT
       (.Logic_Oper(Logic_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .logic_Res_i(logic_Res_i));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized17_187 Shift_LUT
       (.Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .shift_Res(shift_Res));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXF7_188 Shift_Logic_Mux
       (.Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg),
        .logic_Res_i(logic_Res_i),
        .shift_Res(shift_Res));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Shift_Logic_Bit_157
   (Shift_Logic_Res,
    EX_Op2,
    Op1_Logic,
    Logic_Oper,
    \Using_FPGA.Native ,
    Shift_Oper,
    Select_Logic);
  output Shift_Logic_Res;
  input EX_Op2;
  input Op1_Logic;
  input [0:1]Logic_Oper;
  input \Using_FPGA.Native ;
  input Shift_Oper;
  input Select_Logic;

  wire EX_Op2;
  wire [0:1]Logic_Oper;
  wire Op1_Logic;
  wire Select_Logic;
  wire Shift_Logic_Res;
  wire Shift_Oper;
  wire \Using_FPGA.Native ;
  wire logic_Res_i;
  wire shift_Res;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized15_183 Logic_LUT
       (.EX_Op2(EX_Op2),
        .Logic_Oper(Logic_Oper),
        .Op1_Logic(Op1_Logic),
        .logic_Res_i(logic_Res_i));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized17_184 Shift_LUT
       (.Op1_Logic(Op1_Logic),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .shift_Res(shift_Res));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXF7_185 Shift_Logic_Mux
       (.Select_Logic(Select_Logic),
        .Shift_Logic_Res(Shift_Logic_Res),
        .logic_Res_i(logic_Res_i),
        .shift_Res(shift_Res));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Shift_Logic_Bit_158
   (Select_Logic_reg,
    op2_C,
    \Using_FPGA.Native ,
    Logic_Oper,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Shift_Oper,
    Select_Logic);
  output Select_Logic_reg;
  input [0:0]op2_C;
  input \Using_FPGA.Native ;
  input [0:1]Logic_Oper;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Shift_Oper;
  input Select_Logic;

  wire [0:1]Logic_Oper;
  wire Select_Logic;
  wire Select_Logic_reg;
  wire Shift_Oper;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire logic_Res_i;
  wire [0:0]op2_C;
  wire shift_Res;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized15_180 Logic_LUT
       (.Logic_Oper(Logic_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .logic_Res_i(logic_Res_i),
        .op2_C(op2_C));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized17_181 Shift_LUT
       (.Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_1 ),
        .shift_Res(shift_Res));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXF7_182 Shift_Logic_Mux
       (.Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg),
        .logic_Res_i(logic_Res_i),
        .shift_Res(shift_Res));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Shift_Logic_Bit_159
   (Select_Logic_reg,
    op2_C,
    \Using_FPGA.Native ,
    Logic_Oper,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Shift_Oper,
    Select_Logic);
  output Select_Logic_reg;
  input [0:0]op2_C;
  input \Using_FPGA.Native ;
  input [0:1]Logic_Oper;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Shift_Oper;
  input Select_Logic;

  wire [0:1]Logic_Oper;
  wire Select_Logic;
  wire Select_Logic_reg;
  wire Shift_Oper;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire logic_Res_i;
  wire [0:0]op2_C;
  wire shift_Res;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized15_177 Logic_LUT
       (.Logic_Oper(Logic_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .logic_Res_i(logic_Res_i),
        .op2_C(op2_C));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized17_178 Shift_LUT
       (.Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_1 ),
        .shift_Res(shift_Res));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXF7_179 Shift_Logic_Mux
       (.Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg),
        .logic_Res_i(logic_Res_i),
        .shift_Res(shift_Res));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Shift_Logic_Bit_160
   (Select_Logic_reg,
    op2_C,
    \Using_FPGA.Native ,
    Logic_Oper,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Shift_Oper,
    Select_Logic);
  output Select_Logic_reg;
  input [0:0]op2_C;
  input \Using_FPGA.Native ;
  input [0:1]Logic_Oper;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Shift_Oper;
  input Select_Logic;

  wire [0:1]Logic_Oper;
  wire Select_Logic;
  wire Select_Logic_reg;
  wire Shift_Oper;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire logic_Res_i;
  wire [0:0]op2_C;
  wire shift_Res;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized15_174 Logic_LUT
       (.Logic_Oper(Logic_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .logic_Res_i(logic_Res_i),
        .op2_C(op2_C));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized17_175 Shift_LUT
       (.Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_1 ),
        .shift_Res(shift_Res));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXF7_176 Shift_Logic_Mux
       (.Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg),
        .logic_Res_i(logic_Res_i),
        .shift_Res(shift_Res));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Shift_Logic_Bit_161
   (Select_Logic_reg,
    op2_C,
    \Using_FPGA.Native ,
    Logic_Oper,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Shift_Oper,
    Select_Logic);
  output Select_Logic_reg;
  input [0:0]op2_C;
  input \Using_FPGA.Native ;
  input [0:1]Logic_Oper;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Shift_Oper;
  input Select_Logic;

  wire [0:1]Logic_Oper;
  wire Select_Logic;
  wire Select_Logic_reg;
  wire Shift_Oper;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire logic_Res_i;
  wire [0:0]op2_C;
  wire shift_Res;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized15_171 Logic_LUT
       (.Logic_Oper(Logic_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .logic_Res_i(logic_Res_i),
        .op2_C(op2_C));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized17_172 Shift_LUT
       (.Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_1 ),
        .shift_Res(shift_Res));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXF7_173 Shift_Logic_Mux
       (.Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg),
        .logic_Res_i(logic_Res_i),
        .shift_Res(shift_Res));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Shift_Logic_Bit_162
   (Select_Logic_reg,
    op2_C,
    \Using_FPGA.Native ,
    Logic_Oper,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Shift_Oper,
    Select_Logic);
  output Select_Logic_reg;
  input [0:0]op2_C;
  input \Using_FPGA.Native ;
  input [0:1]Logic_Oper;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Shift_Oper;
  input Select_Logic;

  wire [0:1]Logic_Oper;
  wire Select_Logic;
  wire Select_Logic_reg;
  wire Shift_Oper;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire logic_Res_i;
  wire [0:0]op2_C;
  wire shift_Res;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized15_168 Logic_LUT
       (.Logic_Oper(Logic_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .logic_Res_i(logic_Res_i),
        .op2_C(op2_C));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized17_169 Shift_LUT
       (.Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_1 ),
        .shift_Res(shift_Res));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXF7_170 Shift_Logic_Mux
       (.Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg),
        .logic_Res_i(logic_Res_i),
        .shift_Res(shift_Res));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Shift_Logic_Bit_163
   (Select_Logic_reg,
    op2_C,
    \Using_FPGA.Native ,
    Logic_Oper,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Shift_Oper,
    Select_Logic);
  output Select_Logic_reg;
  input [0:0]op2_C;
  input \Using_FPGA.Native ;
  input [0:1]Logic_Oper;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Shift_Oper;
  input Select_Logic;

  wire [0:1]Logic_Oper;
  wire Select_Logic;
  wire Select_Logic_reg;
  wire Shift_Oper;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire logic_Res_i;
  wire [0:0]op2_C;
  wire shift_Res;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized15_165 Logic_LUT
       (.Logic_Oper(Logic_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .logic_Res_i(logic_Res_i),
        .op2_C(op2_C));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized17_166 Shift_LUT
       (.Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_1 ),
        .shift_Res(shift_Res));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXF7_167 Shift_Logic_Mux
       (.Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg),
        .logic_Res_i(logic_Res_i),
        .shift_Res(shift_Res));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Shift_Logic_Bit_164
   (Select_Logic_reg,
    op2_C,
    \Using_FPGA.Native ,
    Logic_Oper,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Shift_Oper,
    Select_Logic);
  output Select_Logic_reg;
  input [0:0]op2_C;
  input \Using_FPGA.Native ;
  input [0:1]Logic_Oper;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Shift_Oper;
  input Select_Logic;

  wire [0:1]Logic_Oper;
  wire Select_Logic;
  wire Select_Logic_reg;
  wire Shift_Oper;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire logic_Res_i;
  wire [0:0]op2_C;
  wire shift_Res;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized15 Logic_LUT
       (.Logic_Oper(Logic_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .logic_Res_i(logic_Res_i),
        .op2_C(op2_C));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT4__parameterized17 Shift_LUT
       (.Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_1 ),
        .shift_Res(shift_Res));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXF7 Shift_Logic_Mux
       (.Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg),
        .logic_Res_i(logic_Res_i),
        .shift_Res(shift_Res));
endmodule

module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Shift_Logic_Module
   (Shift_Logic_Res,
    Select_Logic_reg,
    Select_Logic_reg_0,
    Select_Logic_reg_1,
    Select_Logic_reg_2,
    Select_Logic_reg_3,
    Select_Logic_reg_4,
    Select_Logic_reg_5,
    Select_Logic_reg_6,
    Select_Logic_reg_7,
    Select_Logic_reg_8,
    Select_Logic_reg_9,
    Select_Logic_reg_10,
    Select_Logic_reg_11,
    Select_Logic_reg_12,
    Select_Logic_reg_13,
    Select_Logic_reg_14,
    Select_Logic_reg_15,
    Select_Logic_reg_16,
    Select_Logic_reg_17,
    Select_Logic_reg_18,
    Select_Logic_reg_19,
    Select_Logic_reg_20,
    Select_Logic_reg_21,
    Select_Logic_reg_22,
    Select_Logic_reg_23,
    Select_Logic_reg_24,
    Select_Logic_reg_25,
    Select_Logic_reg_26,
    Select_Logic_reg_27,
    Select_Logic_reg_28,
    Select_Logic_reg_29,
    EX_Op2,
    Op1_Logic,
    Logic_Oper,
    \Using_FPGA.Native ,
    Shift_Oper,
    Select_Logic,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Op2,
    Shifted,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    op2_C,
    \Using_FPGA.Native_4 ,
    \Using_FPGA.Native_5 ,
    \Using_FPGA.Native_6 ,
    \Using_FPGA.Native_7 ,
    \Using_FPGA.Native_8 ,
    Sext,
    \Using_FPGA.Native_9 ,
    \Using_FPGA.Native_10 ,
    \Using_FPGA.Native_11 ,
    \Using_FPGA.Native_12 ,
    \Using_FPGA.Native_13 ,
    \Using_FPGA.Native_14 ,
    \Using_FPGA.Native_15 ,
    \Using_FPGA.Native_16 ,
    \Using_FPGA.Native_17 ,
    \Using_FPGA.Native_18 ,
    \Using_FPGA.Native_19 ,
    \Using_FPGA.Native_20 ,
    \Using_FPGA.Native_21 ,
    \Using_FPGA.Native_22 ,
    \Using_FPGA.Native_23 ,
    \Using_FPGA.Native_24 ,
    \Using_FPGA.Native_25 ,
    \Using_FPGA.Native_26 ,
    \Using_FPGA.Native_27 ,
    \Using_FPGA.Native_28 ,
    \Using_FPGA.Native_29 ,
    \Using_FPGA.Native_30 ,
    \Using_FPGA.Native_31 ,
    \Using_FPGA.Native_32 );
  output Shift_Logic_Res;
  output Select_Logic_reg;
  output Select_Logic_reg_0;
  output Select_Logic_reg_1;
  output Select_Logic_reg_2;
  output Select_Logic_reg_3;
  output Select_Logic_reg_4;
  output Select_Logic_reg_5;
  output Select_Logic_reg_6;
  output Select_Logic_reg_7;
  output Select_Logic_reg_8;
  output Select_Logic_reg_9;
  output Select_Logic_reg_10;
  output Select_Logic_reg_11;
  output Select_Logic_reg_12;
  output Select_Logic_reg_13;
  output Select_Logic_reg_14;
  output Select_Logic_reg_15;
  output Select_Logic_reg_16;
  output Select_Logic_reg_17;
  output Select_Logic_reg_18;
  output Select_Logic_reg_19;
  output Select_Logic_reg_20;
  output Select_Logic_reg_21;
  output Select_Logic_reg_22;
  output Select_Logic_reg_23;
  output Select_Logic_reg_24;
  output Select_Logic_reg_25;
  output Select_Logic_reg_26;
  output Select_Logic_reg_27;
  output Select_Logic_reg_28;
  output Select_Logic_reg_29;
  input EX_Op2;
  input Op1_Logic;
  input [0:1]Logic_Oper;
  input \Using_FPGA.Native ;
  input Shift_Oper;
  input Select_Logic;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Op2;
  input Shifted;
  input \Using_FPGA.Native_2 ;
  input \Using_FPGA.Native_3 ;
  input [27:0]op2_C;
  input \Using_FPGA.Native_4 ;
  input \Using_FPGA.Native_5 ;
  input \Using_FPGA.Native_6 ;
  input \Using_FPGA.Native_7 ;
  input \Using_FPGA.Native_8 ;
  input Sext;
  input \Using_FPGA.Native_9 ;
  input \Using_FPGA.Native_10 ;
  input \Using_FPGA.Native_11 ;
  input \Using_FPGA.Native_12 ;
  input \Using_FPGA.Native_13 ;
  input \Using_FPGA.Native_14 ;
  input \Using_FPGA.Native_15 ;
  input \Using_FPGA.Native_16 ;
  input \Using_FPGA.Native_17 ;
  input \Using_FPGA.Native_18 ;
  input \Using_FPGA.Native_19 ;
  input \Using_FPGA.Native_20 ;
  input \Using_FPGA.Native_21 ;
  input \Using_FPGA.Native_22 ;
  input \Using_FPGA.Native_23 ;
  input \Using_FPGA.Native_24 ;
  input \Using_FPGA.Native_25 ;
  input \Using_FPGA.Native_26 ;
  input \Using_FPGA.Native_27 ;
  input \Using_FPGA.Native_28 ;
  input \Using_FPGA.Native_29 ;
  input \Using_FPGA.Native_30 ;
  input \Using_FPGA.Native_31 ;
  input \Using_FPGA.Native_32 ;

  wire EX_Op2;
  wire [0:1]Logic_Oper;
  wire Op1_Logic;
  wire Op2;
  wire Select_Logic;
  wire Select_Logic_reg;
  wire Select_Logic_reg_0;
  wire Select_Logic_reg_1;
  wire Select_Logic_reg_10;
  wire Select_Logic_reg_11;
  wire Select_Logic_reg_12;
  wire Select_Logic_reg_13;
  wire Select_Logic_reg_14;
  wire Select_Logic_reg_15;
  wire Select_Logic_reg_16;
  wire Select_Logic_reg_17;
  wire Select_Logic_reg_18;
  wire Select_Logic_reg_19;
  wire Select_Logic_reg_2;
  wire Select_Logic_reg_20;
  wire Select_Logic_reg_21;
  wire Select_Logic_reg_22;
  wire Select_Logic_reg_23;
  wire Select_Logic_reg_24;
  wire Select_Logic_reg_25;
  wire Select_Logic_reg_26;
  wire Select_Logic_reg_27;
  wire Select_Logic_reg_28;
  wire Select_Logic_reg_29;
  wire Select_Logic_reg_3;
  wire Select_Logic_reg_4;
  wire Select_Logic_reg_5;
  wire Select_Logic_reg_6;
  wire Select_Logic_reg_7;
  wire Select_Logic_reg_8;
  wire Select_Logic_reg_9;
  wire Sext;
  wire Shift_Logic_Res;
  wire Shift_Oper;
  wire Shifted;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_10 ;
  wire \Using_FPGA.Native_11 ;
  wire \Using_FPGA.Native_12 ;
  wire \Using_FPGA.Native_13 ;
  wire \Using_FPGA.Native_14 ;
  wire \Using_FPGA.Native_15 ;
  wire \Using_FPGA.Native_16 ;
  wire \Using_FPGA.Native_17 ;
  wire \Using_FPGA.Native_18 ;
  wire \Using_FPGA.Native_19 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_20 ;
  wire \Using_FPGA.Native_21 ;
  wire \Using_FPGA.Native_22 ;
  wire \Using_FPGA.Native_23 ;
  wire \Using_FPGA.Native_24 ;
  wire \Using_FPGA.Native_25 ;
  wire \Using_FPGA.Native_26 ;
  wire \Using_FPGA.Native_27 ;
  wire \Using_FPGA.Native_28 ;
  wire \Using_FPGA.Native_29 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_30 ;
  wire \Using_FPGA.Native_31 ;
  wire \Using_FPGA.Native_32 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_5 ;
  wire \Using_FPGA.Native_6 ;
  wire \Using_FPGA.Native_7 ;
  wire \Using_FPGA.Native_8 ;
  wire \Using_FPGA.Native_9 ;
  wire [27:0]op2_C;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Shift_Logic_Bit \Shift_Logic_Bits[0].Shift_Logic_Bit_I 
       (.Logic_Oper(Logic_Oper),
        .Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg_29),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native_31 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_32 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_17 ),
        .op2_C(op2_C[27]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Shift_Logic_Bit_134 \Shift_Logic_Bits[10].Shift_Logic_Bit_I 
       (.Logic_Oper(Logic_Oper),
        .Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg_19),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native_21 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_22 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_17 ),
        .op2_C(op2_C[17]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Shift_Logic_Bit_135 \Shift_Logic_Bits[11].Shift_Logic_Bit_I 
       (.Logic_Oper(Logic_Oper),
        .Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg_18),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native_20 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_21 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_17 ),
        .op2_C(op2_C[16]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Shift_Logic_Bit_136 \Shift_Logic_Bits[12].Shift_Logic_Bit_I 
       (.Logic_Oper(Logic_Oper),
        .Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg_17),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native_19 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_20 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_17 ),
        .op2_C(op2_C[15]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Shift_Logic_Bit_137 \Shift_Logic_Bits[13].Shift_Logic_Bit_I 
       (.Logic_Oper(Logic_Oper),
        .Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg_16),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native_18 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_19 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_17 ),
        .op2_C(op2_C[14]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Shift_Logic_Bit_138 \Shift_Logic_Bits[14].Shift_Logic_Bit_I 
       (.Logic_Oper(Logic_Oper),
        .Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg_15),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native_16 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_18 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_17 ),
        .op2_C(op2_C[13]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Shift_Logic_Bit_139 \Shift_Logic_Bits[15].Shift_Logic_Bit_I 
       (.Logic_Oper(Logic_Oper),
        .Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg_14),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native_15 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_16 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_17 ),
        .op2_C(op2_C[12]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Shift_Logic_Bit_140 \Shift_Logic_Bits[16].Shift_Logic_Bit_I 
       (.Logic_Oper(Logic_Oper),
        .Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg_13),
        .Sext(Sext),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native_14 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_15 ),
        .op2_C(op2_C[11]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Shift_Logic_Bit_141 \Shift_Logic_Bits[17].Shift_Logic_Bit_I 
       (.Logic_Oper(Logic_Oper),
        .Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg_12),
        .Sext(Sext),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native_13 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_14 ),
        .op2_C(op2_C[10]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Shift_Logic_Bit_142 \Shift_Logic_Bits[18].Shift_Logic_Bit_I 
       (.Logic_Oper(Logic_Oper),
        .Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg_11),
        .Sext(Sext),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native_12 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_13 ),
        .op2_C(op2_C[9]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Shift_Logic_Bit_143 \Shift_Logic_Bits[19].Shift_Logic_Bit_I 
       (.Logic_Oper(Logic_Oper),
        .Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg_10),
        .Sext(Sext),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native_11 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_12 ),
        .op2_C(op2_C[8]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Shift_Logic_Bit_144 \Shift_Logic_Bits[1].Shift_Logic_Bit_I 
       (.Logic_Oper(Logic_Oper),
        .Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg_28),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native_30 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_31 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_17 ),
        .op2_C(op2_C[26]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Shift_Logic_Bit_145 \Shift_Logic_Bits[20].Shift_Logic_Bit_I 
       (.Logic_Oper(Logic_Oper),
        .Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg_9),
        .Sext(Sext),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native_10 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_11 ),
        .op2_C(op2_C[7]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Shift_Logic_Bit_146 \Shift_Logic_Bits[21].Shift_Logic_Bit_I 
       (.Logic_Oper(Logic_Oper),
        .Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg_8),
        .Sext(Sext),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native_9 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_10 ),
        .op2_C(op2_C[6]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Shift_Logic_Bit_147 \Shift_Logic_Bits[22].Shift_Logic_Bit_I 
       (.Logic_Oper(Logic_Oper),
        .Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg_7),
        .Sext(Sext),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native_8 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_9 ),
        .op2_C(op2_C[5]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Shift_Logic_Bit_148 \Shift_Logic_Bits[23].Shift_Logic_Bit_I 
       (.Logic_Oper(Logic_Oper),
        .Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg_6),
        .Sext(Sext),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native_7 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_8 ),
        .op2_C(op2_C[4]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Shift_Logic_Bit_149 \Shift_Logic_Bits[24].Shift_Logic_Bit_I 
       (.Logic_Oper(Logic_Oper),
        .Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg_5),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native_6 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_7 ),
        .op2_C(op2_C[3]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Shift_Logic_Bit_150 \Shift_Logic_Bits[25].Shift_Logic_Bit_I 
       (.Logic_Oper(Logic_Oper),
        .Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg_4),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native_5 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_6 ),
        .op2_C(op2_C[2]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Shift_Logic_Bit_151 \Shift_Logic_Bits[26].Shift_Logic_Bit_I 
       (.Logic_Oper(Logic_Oper),
        .Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg_3),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native_4 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_5 ),
        .op2_C(op2_C[1]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Shift_Logic_Bit_152 \Shift_Logic_Bits[27].Shift_Logic_Bit_I 
       (.Logic_Oper(Logic_Oper),
        .Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg_2),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native_3 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_4 ),
        .op2_C(op2_C[0]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Shift_Logic_Bit_153 \Shift_Logic_Bits[28].Shift_Logic_Bit_I 
       (.Logic_Oper(Logic_Oper),
        .Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg_1),
        .Shift_Oper(Shift_Oper),
        .Shifted(Shifted),
        .\Using_FPGA.Native (\Using_FPGA.Native_2 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_3 ));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Shift_Logic_Bit_154 \Shift_Logic_Bits[29].Shift_Logic_Bit_I 
       (.Logic_Oper(Logic_Oper),
        .Op2(Op2),
        .Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg_0),
        .Shift_Oper(Shift_Oper),
        .Shifted(Shifted),
        .\Using_FPGA.Native (\Using_FPGA.Native_1 ));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Shift_Logic_Bit_155 \Shift_Logic_Bits[2].Shift_Logic_Bit_I 
       (.Logic_Oper(Logic_Oper),
        .Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg_27),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native_29 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_30 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_17 ),
        .op2_C(op2_C[25]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Shift_Logic_Bit_156 \Shift_Logic_Bits[30].Shift_Logic_Bit_I 
       (.Logic_Oper(Logic_Oper),
        .Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 ));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Shift_Logic_Bit_157 \Shift_Logic_Bits[31].Shift_Logic_Bit_I 
       (.EX_Op2(EX_Op2),
        .Logic_Oper(Logic_Oper),
        .Op1_Logic(Op1_Logic),
        .Select_Logic(Select_Logic),
        .Shift_Logic_Res(Shift_Logic_Res),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native ));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Shift_Logic_Bit_158 \Shift_Logic_Bits[3].Shift_Logic_Bit_I 
       (.Logic_Oper(Logic_Oper),
        .Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg_26),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native_28 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_29 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_17 ),
        .op2_C(op2_C[24]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Shift_Logic_Bit_159 \Shift_Logic_Bits[4].Shift_Logic_Bit_I 
       (.Logic_Oper(Logic_Oper),
        .Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg_25),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native_27 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_28 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_17 ),
        .op2_C(op2_C[23]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Shift_Logic_Bit_160 \Shift_Logic_Bits[5].Shift_Logic_Bit_I 
       (.Logic_Oper(Logic_Oper),
        .Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg_24),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native_26 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_27 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_17 ),
        .op2_C(op2_C[22]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Shift_Logic_Bit_161 \Shift_Logic_Bits[6].Shift_Logic_Bit_I 
       (.Logic_Oper(Logic_Oper),
        .Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg_23),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native_25 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_26 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_17 ),
        .op2_C(op2_C[21]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Shift_Logic_Bit_162 \Shift_Logic_Bits[7].Shift_Logic_Bit_I 
       (.Logic_Oper(Logic_Oper),
        .Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg_22),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native_24 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_25 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_17 ),
        .op2_C(op2_C[20]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Shift_Logic_Bit_163 \Shift_Logic_Bits[8].Shift_Logic_Bit_I 
       (.Logic_Oper(Logic_Oper),
        .Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg_21),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native_23 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_24 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_17 ),
        .op2_C(op2_C[19]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Shift_Logic_Bit_164 \Shift_Logic_Bits[9].Shift_Logic_Bit_I 
       (.Logic_Oper(Logic_Oper),
        .Select_Logic(Select_Logic),
        .Select_Logic_reg(Select_Logic_reg_20),
        .Shift_Oper(Shift_Oper),
        .\Using_FPGA.Native (\Using_FPGA.Native_22 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_23 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_17 ),
        .op2_C(op2_C[18]));
endmodule

module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_Zero_Detect
   (Reg_zero,
    Reg_Test_Equal,
    reg_Test_Equal_N,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 ,
    \Using_FPGA.Native_5 ,
    \Using_FPGA.Native_6 ,
    \Using_FPGA.Native_7 ,
    \Using_FPGA.Native_8 ,
    \Using_FPGA.Native_9 ,
    \Using_FPGA.Native_10 ,
    \Using_FPGA.Native_11 ,
    \Using_FPGA.Native_12 ,
    \Using_FPGA.Native_13 ,
    \Using_FPGA.Native_14 ,
    \Using_FPGA.Native_15 ,
    \Using_FPGA.Native_16 ,
    \Using_FPGA.Native_17 ,
    \Using_FPGA.Native_18 ,
    \Using_FPGA.Native_19 ,
    \Using_FPGA.Native_20 ,
    \Using_FPGA.Native_21 ,
    \Using_FPGA.Native_22 ,
    \Using_FPGA.Native_23 ,
    \Using_FPGA.Native_24 ,
    \Using_FPGA.Native_25 ,
    \Using_FPGA.Native_26 ,
    \Using_FPGA.Native_27 ,
    \Using_FPGA.Native_28 ,
    \Using_FPGA.Native_29 ,
    lopt,
    lopt_1,
    lopt_2);
  output Reg_zero;
  input Reg_Test_Equal;
  input reg_Test_Equal_N;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input \Using_FPGA.Native_3 ;
  input \Using_FPGA.Native_4 ;
  input \Using_FPGA.Native_5 ;
  input \Using_FPGA.Native_6 ;
  input \Using_FPGA.Native_7 ;
  input \Using_FPGA.Native_8 ;
  input \Using_FPGA.Native_9 ;
  input \Using_FPGA.Native_10 ;
  input \Using_FPGA.Native_11 ;
  input \Using_FPGA.Native_12 ;
  input \Using_FPGA.Native_13 ;
  input \Using_FPGA.Native_14 ;
  input \Using_FPGA.Native_15 ;
  input \Using_FPGA.Native_16 ;
  input \Using_FPGA.Native_17 ;
  input \Using_FPGA.Native_18 ;
  input \Using_FPGA.Native_19 ;
  input \Using_FPGA.Native_20 ;
  input \Using_FPGA.Native_21 ;
  input \Using_FPGA.Native_22 ;
  input \Using_FPGA.Native_23 ;
  input \Using_FPGA.Native_24 ;
  input \Using_FPGA.Native_25 ;
  input \Using_FPGA.Native_26 ;
  input \Using_FPGA.Native_27 ;
  input \Using_FPGA.Native_28 ;
  input \Using_FPGA.Native_29 ;
  output lopt;
  input lopt_1;
  input lopt_2;

  wire Reg_Test_Equal;
  wire Reg_zero;
  wire S;
  wire \S0_inferred__0/i__n_0 ;
  wire \S0_inferred__1/i__n_0 ;
  wire \S0_inferred__2/i__n_0 ;
  wire \S0_inferred__3/i__n_0 ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_10 ;
  wire \Using_FPGA.Native_11 ;
  wire \Using_FPGA.Native_12 ;
  wire \Using_FPGA.Native_13 ;
  wire \Using_FPGA.Native_14 ;
  wire \Using_FPGA.Native_15 ;
  wire \Using_FPGA.Native_16 ;
  wire \Using_FPGA.Native_17 ;
  wire \Using_FPGA.Native_18 ;
  wire \Using_FPGA.Native_19 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_20 ;
  wire \Using_FPGA.Native_21 ;
  wire \Using_FPGA.Native_22 ;
  wire \Using_FPGA.Native_23 ;
  wire \Using_FPGA.Native_24 ;
  wire \Using_FPGA.Native_25 ;
  wire \Using_FPGA.Native_26 ;
  wire \Using_FPGA.Native_27 ;
  wire \Using_FPGA.Native_28 ;
  wire \Using_FPGA.Native_29 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_5 ;
  wire \Using_FPGA.Native_6 ;
  wire \Using_FPGA.Native_7 ;
  wire \Using_FPGA.Native_8 ;
  wire \Using_FPGA.Native_9 ;
  wire \^lopt ;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire reg_Test_Equal_N;
  wire zero_CI_1;
  wire zero_CI_2;
  wire zero_CI_3;
  wire zero_CI_4;
  wire zero_CI_5;
  wire zero_CI_6;

  assign lopt = lopt_5;
  assign lopt_6 = lopt_1;
  assign lopt_7 = lopt_2;
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_127 Part_Of_Zero_Carry_Start
       (.Reg_Test_Equal(Reg_Test_Equal),
        .lopt(\^lopt ),
        .lopt_1(reg_Test_Equal_N),
        .lopt_2(S),
        .lopt_3(\^lopt_1 ),
        .lopt_4(\S0_inferred__3/i__n_0 ),
        .lopt_5(\^lopt_2 ),
        .lopt_6(\S0_inferred__2/i__n_0 ),
        .zero_CI_6(zero_CI_6));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    \S0_inferred__0/i_ 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(\Using_FPGA.Native_2 ),
        .I3(\Using_FPGA.Native_3 ),
        .I4(\Using_FPGA.Native_4 ),
        .I5(\Using_FPGA.Native_5 ),
        .O(\S0_inferred__0/i__n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    \S0_inferred__1/i_ 
       (.I0(\Using_FPGA.Native_6 ),
        .I1(\Using_FPGA.Native_7 ),
        .I2(\Using_FPGA.Native_8 ),
        .I3(\Using_FPGA.Native_9 ),
        .I4(\Using_FPGA.Native_10 ),
        .I5(\Using_FPGA.Native_11 ),
        .O(\S0_inferred__1/i__n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    \S0_inferred__2/i_ 
       (.I0(\Using_FPGA.Native_12 ),
        .I1(\Using_FPGA.Native_13 ),
        .I2(\Using_FPGA.Native_14 ),
        .I3(\Using_FPGA.Native_15 ),
        .I4(\Using_FPGA.Native_16 ),
        .I5(\Using_FPGA.Native_17 ),
        .O(\S0_inferred__2/i__n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    \S0_inferred__3/i_ 
       (.I0(\Using_FPGA.Native_18 ),
        .I1(\Using_FPGA.Native_19 ),
        .I2(\Using_FPGA.Native_20 ),
        .I3(\Using_FPGA.Native_21 ),
        .I4(\Using_FPGA.Native_22 ),
        .I5(\Using_FPGA.Native_23 ),
        .O(\S0_inferred__3/i__n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    \S0_inferred__4/i_ 
       (.I0(\Using_FPGA.Native_24 ),
        .I1(\Using_FPGA.Native_25 ),
        .I2(\Using_FPGA.Native_26 ),
        .I3(\Using_FPGA.Native_27 ),
        .I4(\Using_FPGA.Native_28 ),
        .I5(\Using_FPGA.Native_29 ),
        .O(S));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_128 \Zero_Detecting[1].I_Part_Of_Zero_Detect 
       (.Reg_zero(Reg_zero),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .lopt(lopt_4),
        .reg_Test_Equal_N(reg_Test_Equal_N),
        .zero_CI_1(zero_CI_1));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_129 \Zero_Detecting[2].I_Part_Of_Zero_Detect 
       (.\Using_FPGA.Native_0 (\S0_inferred__0/i__n_0 ),
        .lopt(lopt_3),
        .reg_Test_Equal_N(reg_Test_Equal_N),
        .zero_CI_1(zero_CI_1),
        .zero_CI_2(zero_CI_2));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_130 \Zero_Detecting[3].I_Part_Of_Zero_Detect 
       (.\Using_FPGA.Native_0 (\S0_inferred__1/i__n_0 ),
        .lopt(lopt_3),
        .lopt_1(\S0_inferred__0/i__n_0 ),
        .lopt_2(lopt_4),
        .lopt_3(\Using_FPGA.Native ),
        .lopt_4(lopt_5),
        .lopt_5(lopt_6),
        .lopt_6(lopt_7),
        .reg_Test_Equal_N(reg_Test_Equal_N),
        .zero_CI_2(zero_CI_2),
        .zero_CI_3(zero_CI_3));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_131 \Zero_Detecting[4].I_Part_Of_Zero_Detect 
       (.\Using_FPGA.Native_0 (\S0_inferred__2/i__n_0 ),
        .lopt(\^lopt_2 ),
        .reg_Test_Equal_N(reg_Test_Equal_N),
        .zero_CI_3(zero_CI_3),
        .zero_CI_4(zero_CI_4));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_132 \Zero_Detecting[5].I_Part_Of_Zero_Detect 
       (.\Using_FPGA.Native_0 (\S0_inferred__3/i__n_0 ),
        .lopt(\^lopt_1 ),
        .reg_Test_Equal_N(reg_Test_Equal_N),
        .zero_CI_4(zero_CI_4),
        .zero_CI_5(zero_CI_5));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_133 \Zero_Detecting[6].I_Part_Of_Zero_Detect 
       (.S(S),
        .lopt(\^lopt ),
        .reg_Test_Equal_N(reg_Test_Equal_N),
        .zero_CI_5(zero_CI_5),
        .zero_CI_6(zero_CI_6));
endmodule

module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_address_hit
   (\Area_Debug_Control.normal_stop_cmd_hold_reg ,
    Hit,
    Dbg_Reg_En,
    normal_stop_cmd_hold,
    normal_stop_cmd_i,
    \Using_FPGA.Native_i_6 ,
    \Using_FPGA.Native_i_6_0 ,
    Dbg_TDI,
    Dbg_Clk,
    Address,
    Q,
    Single_Step_N);
  output \Area_Debug_Control.normal_stop_cmd_hold_reg ;
  output Hit;
  input [0:7]Dbg_Reg_En;
  input normal_stop_cmd_hold;
  input normal_stop_cmd_i;
  input \Using_FPGA.Native_i_6 ;
  input \Using_FPGA.Native_i_6_0 ;
  input Dbg_TDI;
  input Dbg_Clk;
  input [13:0]Address;
  input [0:0]Q;
  input Single_Step_N;

  wire [13:0]Address;
  wire \Area_Debug_Control.normal_stop_cmd_hold_reg ;
  wire Dbg_Clk;
  wire [0:7]Dbg_Reg_En;
  wire Dbg_TDI;
  wire Hit;
  wire [0:0]Q;
  wire SRL16_MC15_1;
  wire SRL16_MC15_2;
  wire SRL16_MC15_3;
  wire SRL16_MC15_4;
  wire SRL16_MC15_5;
  wire SRL16_MC15_6;
  wire SRL16_MC15_7;
  wire SRL16_Sel_0;
  wire SRL16_Sel_1;
  wire SRL16_Sel_2;
  wire SRL16_Sel_3;
  wire SRL16_Sel_4;
  wire SRL16_Sel_5;
  wire SRL16_Sel_6;
  wire SRL16_Sel_7;
  wire Single_Step_N;
  wire \Using_FPGA.Native_i_6 ;
  wire \Using_FPGA.Native_i_6_0 ;
  wire carry_0;
  wire carry_1;
  wire carry_2;
  wire carry_3;
  wire carry_4;
  wire carry_5;
  wire carry_6;
  wire carry_7;
  wire lopt;
  wire lopt_1;
  wire lopt_10;
  wire lopt_11;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire lopt_9;
  wire normal_stop_cmd_hold;
  wire normal_stop_cmd_i;
  wire which_pc__0;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY \Compare[0].MUXCY_I 
       (.Q(Q),
        .SRL16_Sel_7(SRL16_Sel_7),
        .carry_7(carry_7),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(SRL16_Sel_6),
        .lopt_3(lopt_2),
        .lopt_4(lopt_3),
        .lopt_5(SRL16_Sel_5),
        .lopt_6(lopt_4),
        .lopt_7(lopt_5),
        .lopt_8(SRL16_Sel_4));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_SRLC16E \Compare[0].SRLC16E_I 
       (.Address(Address[1:0]),
        .Dbg_Clk(Dbg_Clk),
        .Dbg_Reg_En(Dbg_Reg_En),
        .SRL16_MC15_7(SRL16_MC15_7),
        .SRL16_Sel_7(SRL16_Sel_7),
        .which_pc__0(which_pc__0));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_34 \Compare[1].MUXCY_I 
       (.SRL16_Sel_6(SRL16_Sel_6),
        .carry_6(carry_6),
        .carry_7(carry_7),
        .lopt(lopt),
        .lopt_1(lopt_1));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_SRLC16E_35 \Compare[1].SRLC16E_I 
       (.Address(Address[5:2]),
        .Dbg_Clk(Dbg_Clk),
        .SRL16_MC15_6(SRL16_MC15_6),
        .SRL16_MC15_7(SRL16_MC15_7),
        .SRL16_Sel_6(SRL16_Sel_6),
        .which_pc__0(which_pc__0));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_36 \Compare[2].MUXCY_I 
       (.SRL16_Sel_5(SRL16_Sel_5),
        .carry_5(carry_5),
        .carry_6(carry_6),
        .lopt(lopt_2),
        .lopt_1(lopt_3));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_SRLC16E_37 \Compare[2].SRLC16E_I 
       (.Address(Address[9:6]),
        .Dbg_Clk(Dbg_Clk),
        .SRL16_MC15_5(SRL16_MC15_5),
        .SRL16_MC15_6(SRL16_MC15_6),
        .SRL16_Sel_5(SRL16_Sel_5),
        .which_pc__0(which_pc__0));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_38 \Compare[3].MUXCY_I 
       (.SRL16_Sel_4(SRL16_Sel_4),
        .carry_4(carry_4),
        .carry_5(carry_5),
        .lopt(lopt_4),
        .lopt_1(lopt_5));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_SRLC16E_39 \Compare[3].SRLC16E_I 
       (.Address(Address[13:10]),
        .Dbg_Clk(Dbg_Clk),
        .SRL16_MC15_4(SRL16_MC15_4),
        .SRL16_MC15_5(SRL16_MC15_5),
        .SRL16_Sel_4(SRL16_Sel_4),
        .which_pc__0(which_pc__0));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_40 \Compare[4].MUXCY_I 
       (.SRL16_Sel_3(SRL16_Sel_3),
        .carry_3(carry_3),
        .carry_4(carry_4),
        .lopt(lopt_6),
        .lopt_1(lopt_7),
        .lopt_2(SRL16_Sel_2),
        .lopt_3(lopt_8),
        .lopt_4(lopt_9),
        .lopt_5(SRL16_Sel_1),
        .lopt_6(lopt_10),
        .lopt_7(lopt_11),
        .lopt_8(SRL16_Sel_0));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_SRLC16E_41 \Compare[4].SRLC16E_I 
       (.Dbg_Clk(Dbg_Clk),
        .SRL16_MC15_3(SRL16_MC15_3),
        .SRL16_MC15_4(SRL16_MC15_4),
        .SRL16_Sel_3(SRL16_Sel_3),
        .which_pc__0(which_pc__0));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_42 \Compare[5].MUXCY_I 
       (.SRL16_Sel_2(SRL16_Sel_2),
        .carry_2(carry_2),
        .carry_3(carry_3),
        .lopt(lopt_6),
        .lopt_1(lopt_7));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_SRLC16E_43 \Compare[5].SRLC16E_I 
       (.Dbg_Clk(Dbg_Clk),
        .SRL16_MC15_2(SRL16_MC15_2),
        .SRL16_MC15_3(SRL16_MC15_3),
        .SRL16_Sel_2(SRL16_Sel_2),
        .which_pc__0(which_pc__0));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_44 \Compare[6].MUXCY_I 
       (.SRL16_Sel_1(SRL16_Sel_1),
        .carry_1(carry_1),
        .carry_2(carry_2),
        .lopt(lopt_8),
        .lopt_1(lopt_9));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_SRLC16E_45 \Compare[6].SRLC16E_I 
       (.Dbg_Clk(Dbg_Clk),
        .SRL16_MC15_1(SRL16_MC15_1),
        .SRL16_MC15_2(SRL16_MC15_2),
        .SRL16_Sel_1(SRL16_Sel_1),
        .which_pc__0(which_pc__0));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_46 \Compare[7].MUXCY_I 
       (.SRL16_Sel_0(SRL16_Sel_0),
        .carry_0(carry_0),
        .carry_1(carry_1),
        .lopt(lopt_10),
        .lopt_1(lopt_11));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_SRLC16E_47 \Compare[7].SRLC16E_I 
       (.Dbg_Clk(Dbg_Clk),
        .Dbg_TDI(Dbg_TDI),
        .SRL16_MC15_1(SRL16_MC15_1),
        .SRL16_Sel_0(SRL16_Sel_0),
        .which_pc__0(which_pc__0));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_48 \The_First_BreakPoints.MUXCY_Post 
       (.\Area_Debug_Control.normal_stop_cmd_hold_reg (\Area_Debug_Control.normal_stop_cmd_hold_reg ),
        .Hit(Hit),
        .Single_Step_N(Single_Step_N),
        .\Using_FPGA.Native_i_6 (\Using_FPGA.Native_i_6 ),
        .\Using_FPGA.Native_i_6_0 (\Using_FPGA.Native_i_6_0 ),
        .carry_0(carry_0),
        .normal_stop_cmd_hold(normal_stop_cmd_hold),
        .normal_stop_cmd_i(normal_stop_cmd_i));
endmodule

module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_blk_mem_gen_generic_cstr
   (douta,
    doutb,
    rsta_busy,
    rstb_busy,
    clkb,
    clka,
    addra,
    addrb,
    dina,
    dinb,
    wea,
    web,
    rsta,
    ena,
    rstb,
    enb);
  output [31:0]douta;
  output [31:0]doutb;
  output rsta_busy;
  output rstb_busy;
  input clkb;
  input clka;
  input [13:0]addra;
  input [13:0]addrb;
  input [31:0]dina;
  input [31:0]dinb;
  input [3:0]wea;
  input [3:0]web;
  input rsta;
  input ena;
  input rstb;
  input enb;

  wire ENA_I;
  wire ENB_I;
  wire [13:0]addra;
  wire [13:0]addrb;
  wire clka;
  wire clkb;
  wire [31:0]dina;
  wire [31:0]dinb;
  wire [31:0]douta;
  wire [31:0]doutb;
  wire ena;
  wire enb;
  wire ram_rstram_a;
  wire ram_rstram_b;
  wire rsta;
  wire rsta_busy;
  wire rstb;
  wire rstb_busy;
  wire [3:0]wea;
  wire [3:0]web;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_blk_mem_gen_prim_width \ramloop[0].ram.r 
       (.ENA_I(ENA_I),
        .ENB_I(ENB_I),
        .addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(clkb),
        .dina(dina[1:0]),
        .dinb(dinb[1:0]),
        .douta(douta[1:0]),
        .doutb(doutb[1:0]),
        .ram_rstram_a(ram_rstram_a),
        .ram_rstram_b(ram_rstram_b),
        .wea(wea[0]),
        .web(web[0]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_blk_mem_gen_prim_width__parameterized9 \ramloop[10].ram.r 
       (.ENA_I(ENA_I),
        .ENB_I(ENB_I),
        .addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(clkb),
        .dina(dina[21:20]),
        .dinb(dinb[21:20]),
        .douta(douta[21:20]),
        .doutb(doutb[21:20]),
        .ram_rstram_a(ram_rstram_a),
        .ram_rstram_b(ram_rstram_b),
        .wea(wea[2]),
        .web(web[2]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_blk_mem_gen_prim_width__parameterized10 \ramloop[11].ram.r 
       (.ENA_I(ENA_I),
        .ENB_I(ENB_I),
        .addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(clkb),
        .dina(dina[23:22]),
        .dinb(dinb[23:22]),
        .douta(douta[23:22]),
        .doutb(doutb[23:22]),
        .ram_rstram_a(ram_rstram_a),
        .ram_rstram_b(ram_rstram_b),
        .wea(wea[2]),
        .web(web[2]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_blk_mem_gen_prim_width__parameterized11 \ramloop[12].ram.r 
       (.ENA_I(ENA_I),
        .ENB_I(ENB_I),
        .addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(clkb),
        .dina(dina[25:24]),
        .dinb(dinb[25:24]),
        .douta(douta[25:24]),
        .doutb(doutb[25:24]),
        .ram_rstram_a(ram_rstram_a),
        .ram_rstram_b(ram_rstram_b),
        .wea(wea[3]),
        .web(web[3]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_blk_mem_gen_prim_width__parameterized12 \ramloop[13].ram.r 
       (.ENA_I(ENA_I),
        .ENB_I(ENB_I),
        .addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(clkb),
        .dina(dina[27:26]),
        .dinb(dinb[27:26]),
        .douta(douta[27:26]),
        .doutb(doutb[27:26]),
        .ram_rstram_a(ram_rstram_a),
        .ram_rstram_b(ram_rstram_b),
        .wea(wea[3]),
        .web(web[3]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_blk_mem_gen_prim_width__parameterized13 \ramloop[14].ram.r 
       (.ENA_I(ENA_I),
        .ENB_I(ENB_I),
        .addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(clkb),
        .dina(dina[29:28]),
        .dinb(dinb[29:28]),
        .douta(douta[29:28]),
        .doutb(doutb[29:28]),
        .ram_rstram_a(ram_rstram_a),
        .ram_rstram_b(ram_rstram_b),
        .wea(wea[3]),
        .web(web[3]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_blk_mem_gen_prim_width__parameterized14 \ramloop[15].ram.r 
       (.ENA_I(ENA_I),
        .ENB_I(ENB_I),
        .addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(clkb),
        .dina(dina[31:30]),
        .dinb(dinb[31:30]),
        .douta(douta[31:30]),
        .doutb(doutb[31:30]),
        .ena(ena),
        .enb(enb),
        .ram_rstram_a(ram_rstram_a),
        .ram_rstram_b(ram_rstram_b),
        .rsta(rsta),
        .rsta_busy(rsta_busy),
        .rstb(rstb),
        .rstb_busy(rstb_busy),
        .wea(wea[3]),
        .web(web[3]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_blk_mem_gen_prim_width__parameterized0 \ramloop[1].ram.r 
       (.ENA_I(ENA_I),
        .ENB_I(ENB_I),
        .addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(clkb),
        .dina(dina[3:2]),
        .dinb(dinb[3:2]),
        .douta(douta[3:2]),
        .doutb(doutb[3:2]),
        .ram_rstram_a(ram_rstram_a),
        .ram_rstram_b(ram_rstram_b),
        .wea(wea[0]),
        .web(web[0]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_blk_mem_gen_prim_width__parameterized1 \ramloop[2].ram.r 
       (.ENA_I(ENA_I),
        .ENB_I(ENB_I),
        .addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(clkb),
        .dina(dina[5:4]),
        .dinb(dinb[5:4]),
        .douta(douta[5:4]),
        .doutb(doutb[5:4]),
        .ram_rstram_a(ram_rstram_a),
        .ram_rstram_b(ram_rstram_b),
        .wea(wea[0]),
        .web(web[0]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_blk_mem_gen_prim_width__parameterized2 \ramloop[3].ram.r 
       (.ENA_I(ENA_I),
        .ENB_I(ENB_I),
        .addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(clkb),
        .dina(dina[7:6]),
        .dinb(dinb[7:6]),
        .douta(douta[7:6]),
        .doutb(doutb[7:6]),
        .ram_rstram_a(ram_rstram_a),
        .ram_rstram_b(ram_rstram_b),
        .wea(wea[0]),
        .web(web[0]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_blk_mem_gen_prim_width__parameterized3 \ramloop[4].ram.r 
       (.ENA_I(ENA_I),
        .ENB_I(ENB_I),
        .addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(clkb),
        .dina(dina[9:8]),
        .dinb(dinb[9:8]),
        .douta(douta[9:8]),
        .doutb(doutb[9:8]),
        .ram_rstram_a(ram_rstram_a),
        .ram_rstram_b(ram_rstram_b),
        .wea(wea[1]),
        .web(web[1]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_blk_mem_gen_prim_width__parameterized4 \ramloop[5].ram.r 
       (.ENA_I(ENA_I),
        .ENB_I(ENB_I),
        .addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(clkb),
        .dina(dina[11:10]),
        .dinb(dinb[11:10]),
        .douta(douta[11:10]),
        .doutb(doutb[11:10]),
        .ram_rstram_a(ram_rstram_a),
        .ram_rstram_b(ram_rstram_b),
        .wea(wea[1]),
        .web(web[1]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_blk_mem_gen_prim_width__parameterized5 \ramloop[6].ram.r 
       (.ENA_I(ENA_I),
        .ENB_I(ENB_I),
        .addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(clkb),
        .dina(dina[13:12]),
        .dinb(dinb[13:12]),
        .douta(douta[13:12]),
        .doutb(doutb[13:12]),
        .ram_rstram_a(ram_rstram_a),
        .ram_rstram_b(ram_rstram_b),
        .wea(wea[1]),
        .web(web[1]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_blk_mem_gen_prim_width__parameterized6 \ramloop[7].ram.r 
       (.ENA_I(ENA_I),
        .ENB_I(ENB_I),
        .addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(clkb),
        .dina(dina[15:14]),
        .dinb(dinb[15:14]),
        .douta(douta[15:14]),
        .doutb(doutb[15:14]),
        .ram_rstram_a(ram_rstram_a),
        .ram_rstram_b(ram_rstram_b),
        .wea(wea[1]),
        .web(web[1]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_blk_mem_gen_prim_width__parameterized7 \ramloop[8].ram.r 
       (.ENA_I(ENA_I),
        .ENB_I(ENB_I),
        .addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(clkb),
        .dina(dina[17:16]),
        .dinb(dinb[17:16]),
        .douta(douta[17:16]),
        .doutb(doutb[17:16]),
        .ram_rstram_a(ram_rstram_a),
        .ram_rstram_b(ram_rstram_b),
        .wea(wea[2]),
        .web(web[2]));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_blk_mem_gen_prim_width__parameterized8 \ramloop[9].ram.r 
       (.ENA_I(ENA_I),
        .ENB_I(ENB_I),
        .addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(clkb),
        .dina(dina[19:18]),
        .dinb(dinb[19:18]),
        .douta(douta[19:18]),
        .doutb(doutb[19:18]),
        .ram_rstram_a(ram_rstram_a),
        .ram_rstram_b(ram_rstram_b),
        .wea(wea[2]),
        .web(web[2]));
endmodule

module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_blk_mem_gen_prim_width
   (douta,
    doutb,
    clka,
    clkb,
    ENA_I,
    ENB_I,
    ram_rstram_a,
    ram_rstram_b,
    addra,
    addrb,
    dina,
    dinb,
    wea,
    web);
  output [1:0]douta;
  output [1:0]doutb;
  input clka;
  input clkb;
  input ENA_I;
  input ENB_I;
  input ram_rstram_a;
  input ram_rstram_b;
  input [13:0]addra;
  input [13:0]addrb;
  input [1:0]dina;
  input [1:0]dinb;
  input [0:0]wea;
  input [0:0]web;

  wire ENA_I;
  wire ENB_I;
  wire [13:0]addra;
  wire [13:0]addrb;
  wire clka;
  wire clkb;
  wire [1:0]dina;
  wire [1:0]dinb;
  wire [1:0]douta;
  wire [1:0]doutb;
  wire ram_rstram_a;
  wire ram_rstram_b;
  wire [0:0]wea;
  wire [0:0]web;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_blk_mem_gen_prim_wrapper \prim_noinit.ram 
       (.ENA_I(ENA_I),
        .ENB_I(ENB_I),
        .addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(clkb),
        .dina(dina),
        .dinb(dinb),
        .douta(douta),
        .doutb(doutb),
        .ram_rstram_a(ram_rstram_a),
        .ram_rstram_b(ram_rstram_b),
        .wea(wea),
        .web(web));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_width" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_blk_mem_gen_prim_width__parameterized0
   (douta,
    doutb,
    clka,
    clkb,
    ENA_I,
    ENB_I,
    ram_rstram_a,
    ram_rstram_b,
    addra,
    addrb,
    dina,
    dinb,
    wea,
    web);
  output [1:0]douta;
  output [1:0]doutb;
  input clka;
  input clkb;
  input ENA_I;
  input ENB_I;
  input ram_rstram_a;
  input ram_rstram_b;
  input [13:0]addra;
  input [13:0]addrb;
  input [1:0]dina;
  input [1:0]dinb;
  input [0:0]wea;
  input [0:0]web;

  wire ENA_I;
  wire ENB_I;
  wire [13:0]addra;
  wire [13:0]addrb;
  wire clka;
  wire clkb;
  wire [1:0]dina;
  wire [1:0]dinb;
  wire [1:0]douta;
  wire [1:0]doutb;
  wire ram_rstram_a;
  wire ram_rstram_b;
  wire [0:0]wea;
  wire [0:0]web;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_blk_mem_gen_prim_wrapper__parameterized0 \prim_noinit.ram 
       (.ENA_I(ENA_I),
        .ENB_I(ENB_I),
        .addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(clkb),
        .dina(dina),
        .dinb(dinb),
        .douta(douta),
        .doutb(doutb),
        .ram_rstram_a(ram_rstram_a),
        .ram_rstram_b(ram_rstram_b),
        .wea(wea),
        .web(web));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_width" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_blk_mem_gen_prim_width__parameterized1
   (douta,
    doutb,
    clka,
    clkb,
    ENA_I,
    ENB_I,
    ram_rstram_a,
    ram_rstram_b,
    addra,
    addrb,
    dina,
    dinb,
    wea,
    web);
  output [1:0]douta;
  output [1:0]doutb;
  input clka;
  input clkb;
  input ENA_I;
  input ENB_I;
  input ram_rstram_a;
  input ram_rstram_b;
  input [13:0]addra;
  input [13:0]addrb;
  input [1:0]dina;
  input [1:0]dinb;
  input [0:0]wea;
  input [0:0]web;

  wire ENA_I;
  wire ENB_I;
  wire [13:0]addra;
  wire [13:0]addrb;
  wire clka;
  wire clkb;
  wire [1:0]dina;
  wire [1:0]dinb;
  wire [1:0]douta;
  wire [1:0]doutb;
  wire ram_rstram_a;
  wire ram_rstram_b;
  wire [0:0]wea;
  wire [0:0]web;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_blk_mem_gen_prim_wrapper__parameterized1 \prim_noinit.ram 
       (.ENA_I(ENA_I),
        .ENB_I(ENB_I),
        .addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(clkb),
        .dina(dina),
        .dinb(dinb),
        .douta(douta),
        .doutb(doutb),
        .ram_rstram_a(ram_rstram_a),
        .ram_rstram_b(ram_rstram_b),
        .wea(wea),
        .web(web));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_width" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_blk_mem_gen_prim_width__parameterized10
   (douta,
    doutb,
    clka,
    clkb,
    ENA_I,
    ENB_I,
    ram_rstram_a,
    ram_rstram_b,
    addra,
    addrb,
    dina,
    dinb,
    wea,
    web);
  output [1:0]douta;
  output [1:0]doutb;
  input clka;
  input clkb;
  input ENA_I;
  input ENB_I;
  input ram_rstram_a;
  input ram_rstram_b;
  input [13:0]addra;
  input [13:0]addrb;
  input [1:0]dina;
  input [1:0]dinb;
  input [0:0]wea;
  input [0:0]web;

  wire ENA_I;
  wire ENB_I;
  wire [13:0]addra;
  wire [13:0]addrb;
  wire clka;
  wire clkb;
  wire [1:0]dina;
  wire [1:0]dinb;
  wire [1:0]douta;
  wire [1:0]doutb;
  wire ram_rstram_a;
  wire ram_rstram_b;
  wire [0:0]wea;
  wire [0:0]web;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_blk_mem_gen_prim_wrapper__parameterized10 \prim_noinit.ram 
       (.ENA_I(ENA_I),
        .ENB_I(ENB_I),
        .addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(clkb),
        .dina(dina),
        .dinb(dinb),
        .douta(douta),
        .doutb(doutb),
        .ram_rstram_a(ram_rstram_a),
        .ram_rstram_b(ram_rstram_b),
        .wea(wea),
        .web(web));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_width" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_blk_mem_gen_prim_width__parameterized11
   (douta,
    doutb,
    clka,
    clkb,
    ENA_I,
    ENB_I,
    ram_rstram_a,
    ram_rstram_b,
    addra,
    addrb,
    dina,
    dinb,
    wea,
    web);
  output [1:0]douta;
  output [1:0]doutb;
  input clka;
  input clkb;
  input ENA_I;
  input ENB_I;
  input ram_rstram_a;
  input ram_rstram_b;
  input [13:0]addra;
  input [13:0]addrb;
  input [1:0]dina;
  input [1:0]dinb;
  input [0:0]wea;
  input [0:0]web;

  wire ENA_I;
  wire ENB_I;
  wire [13:0]addra;
  wire [13:0]addrb;
  wire clka;
  wire clkb;
  wire [1:0]dina;
  wire [1:0]dinb;
  wire [1:0]douta;
  wire [1:0]doutb;
  wire ram_rstram_a;
  wire ram_rstram_b;
  wire [0:0]wea;
  wire [0:0]web;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_blk_mem_gen_prim_wrapper__parameterized11 \prim_noinit.ram 
       (.ENA_I(ENA_I),
        .ENB_I(ENB_I),
        .addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(clkb),
        .dina(dina),
        .dinb(dinb),
        .douta(douta),
        .doutb(doutb),
        .ram_rstram_a(ram_rstram_a),
        .ram_rstram_b(ram_rstram_b),
        .wea(wea),
        .web(web));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_width" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_blk_mem_gen_prim_width__parameterized12
   (douta,
    doutb,
    clka,
    clkb,
    ENA_I,
    ENB_I,
    ram_rstram_a,
    ram_rstram_b,
    addra,
    addrb,
    dina,
    dinb,
    wea,
    web);
  output [1:0]douta;
  output [1:0]doutb;
  input clka;
  input clkb;
  input ENA_I;
  input ENB_I;
  input ram_rstram_a;
  input ram_rstram_b;
  input [13:0]addra;
  input [13:0]addrb;
  input [1:0]dina;
  input [1:0]dinb;
  input [0:0]wea;
  input [0:0]web;

  wire ENA_I;
  wire ENB_I;
  wire [13:0]addra;
  wire [13:0]addrb;
  wire clka;
  wire clkb;
  wire [1:0]dina;
  wire [1:0]dinb;
  wire [1:0]douta;
  wire [1:0]doutb;
  wire ram_rstram_a;
  wire ram_rstram_b;
  wire [0:0]wea;
  wire [0:0]web;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_blk_mem_gen_prim_wrapper__parameterized12 \prim_noinit.ram 
       (.ENA_I(ENA_I),
        .ENB_I(ENB_I),
        .addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(clkb),
        .dina(dina),
        .dinb(dinb),
        .douta(douta),
        .doutb(doutb),
        .ram_rstram_a(ram_rstram_a),
        .ram_rstram_b(ram_rstram_b),
        .wea(wea),
        .web(web));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_width" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_blk_mem_gen_prim_width__parameterized13
   (douta,
    doutb,
    clka,
    clkb,
    ENA_I,
    ENB_I,
    ram_rstram_a,
    ram_rstram_b,
    addra,
    addrb,
    dina,
    dinb,
    wea,
    web);
  output [1:0]douta;
  output [1:0]doutb;
  input clka;
  input clkb;
  input ENA_I;
  input ENB_I;
  input ram_rstram_a;
  input ram_rstram_b;
  input [13:0]addra;
  input [13:0]addrb;
  input [1:0]dina;
  input [1:0]dinb;
  input [0:0]wea;
  input [0:0]web;

  wire ENA_I;
  wire ENB_I;
  wire [13:0]addra;
  wire [13:0]addrb;
  wire clka;
  wire clkb;
  wire [1:0]dina;
  wire [1:0]dinb;
  wire [1:0]douta;
  wire [1:0]doutb;
  wire ram_rstram_a;
  wire ram_rstram_b;
  wire [0:0]wea;
  wire [0:0]web;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_blk_mem_gen_prim_wrapper__parameterized13 \prim_noinit.ram 
       (.ENA_I(ENA_I),
        .ENB_I(ENB_I),
        .addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(clkb),
        .dina(dina),
        .dinb(dinb),
        .douta(douta),
        .doutb(doutb),
        .ram_rstram_a(ram_rstram_a),
        .ram_rstram_b(ram_rstram_b),
        .wea(wea),
        .web(web));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_width" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_blk_mem_gen_prim_width__parameterized14
   (douta,
    doutb,
    ENA_I,
    ENB_I,
    ram_rstram_a,
    ram_rstram_b,
    rsta_busy,
    rstb_busy,
    clkb,
    clka,
    addra,
    addrb,
    dina,
    dinb,
    wea,
    web,
    rsta,
    ena,
    rstb,
    enb);
  output [1:0]douta;
  output [1:0]doutb;
  output ENA_I;
  output ENB_I;
  output ram_rstram_a;
  output ram_rstram_b;
  output rsta_busy;
  output rstb_busy;
  input clkb;
  input clka;
  input [13:0]addra;
  input [13:0]addrb;
  input [1:0]dina;
  input [1:0]dinb;
  input [0:0]wea;
  input [0:0]web;
  input rsta;
  input ena;
  input rstb;
  input enb;

  wire ENA_I;
  wire ENA_dly;
  wire ENA_dly_D;
  wire ENB_I;
  wire ENB_dly;
  wire ENB_dly_D;
  wire POR_A;
  wire POR_B;
  wire \SAFETY_CKT_GEN.POR_A_i_1_n_0 ;
  wire \SAFETY_CKT_GEN.POR_B_i_1_n_0 ;
  wire \SAFETY_CKT_GEN.RSTA_SHFT_REG_reg[3]_srl3_n_0 ;
  wire \SAFETY_CKT_GEN.RSTA_SHFT_REG_reg_n_0_[0] ;
  wire \SAFETY_CKT_GEN.RSTA_SHFT_REG_reg_n_0_[4] ;
  wire \SAFETY_CKT_GEN.RSTB_SHFT_REG_reg[3]_srl3_n_0 ;
  wire \SAFETY_CKT_GEN.RSTB_SHFT_REG_reg_n_0_[0] ;
  wire \SAFETY_CKT_GEN.RSTB_SHFT_REG_reg_n_0_[4] ;
  wire [13:0]addra;
  wire [13:0]addrb;
  wire clka;
  wire clkb;
  wire [1:0]dina;
  wire [1:0]dinb;
  wire [1:0]douta;
  wire [1:0]doutb;
  wire ena;
  wire enb;
  wire ram_rstram_a;
  wire ram_rstram_a_busy;
  wire ram_rstram_b;
  wire ram_rstram_b_busy;
  wire rsta;
  wire rsta_busy;
  wire rstb;
  wire rstb_busy;
  wire [0:0]wea;
  wire [0:0]web;

  FDRE #(
    .INIT(1'b0)) 
    \SAFETY_CKT_GEN.ENA_NO_REG.ENA_dly_D_reg 
       (.C(clka),
        .CE(1'b1),
        .D(ENA_dly),
        .Q(ENA_dly_D),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \SAFETY_CKT_GEN.ENA_NO_REG.ENA_dly_reg 
       (.C(clka),
        .CE(1'b1),
        .D(ram_rstram_a),
        .Q(ENA_dly),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \SAFETY_CKT_GEN.ENB_NO_REG.ENB_dly_D_reg 
       (.C(clkb),
        .CE(1'b1),
        .D(ENB_dly),
        .Q(ENB_dly_D),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \SAFETY_CKT_GEN.ENB_NO_REG.ENB_dly_reg 
       (.C(clkb),
        .CE(1'b1),
        .D(ram_rstram_b),
        .Q(ENB_dly),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h6)) 
    \SAFETY_CKT_GEN.POR_A_i_1 
       (.I0(\SAFETY_CKT_GEN.RSTA_SHFT_REG_reg_n_0_[0] ),
        .I1(\SAFETY_CKT_GEN.RSTA_SHFT_REG_reg_n_0_[4] ),
        .O(\SAFETY_CKT_GEN.POR_A_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \SAFETY_CKT_GEN.POR_A_reg 
       (.C(clka),
        .CE(1'b1),
        .D(\SAFETY_CKT_GEN.POR_A_i_1_n_0 ),
        .Q(POR_A),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h6)) 
    \SAFETY_CKT_GEN.POR_B_i_1 
       (.I0(\SAFETY_CKT_GEN.RSTB_SHFT_REG_reg_n_0_[0] ),
        .I1(\SAFETY_CKT_GEN.RSTB_SHFT_REG_reg_n_0_[4] ),
        .O(\SAFETY_CKT_GEN.POR_B_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \SAFETY_CKT_GEN.POR_B_reg 
       (.C(clkb),
        .CE(1'b1),
        .D(\SAFETY_CKT_GEN.POR_B_i_1_n_0 ),
        .Q(POR_B),
        .R(1'b0));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \SAFETY_CKT_GEN.RSTA_BUSY_NO_REG.RSTA_BUSY_i_1 
       (.I0(POR_A),
        .I1(rsta),
        .I2(ENA_dly),
        .I3(ENA_dly_D),
        .O(ram_rstram_a_busy));
  FDRE \SAFETY_CKT_GEN.RSTA_BUSY_NO_REG.RSTA_BUSY_reg 
       (.C(clka),
        .CE(1'b1),
        .D(ram_rstram_a_busy),
        .Q(rsta_busy),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \SAFETY_CKT_GEN.RSTA_SHFT_REG_reg[0] 
       (.C(clka),
        .CE(1'b1),
        .D(1'b1),
        .Q(\SAFETY_CKT_GEN.RSTA_SHFT_REG_reg_n_0_[0] ),
        .R(1'b0));
  (* srl_bus_name = "inst/lmb_bram_I/U0/\inst_blk_mem_gen/gnbram.gnative_mem_map_bmg.native_mem_map_blk_mem_gen/valid.cstr/ramloop[15].ram.r/SAFETY_CKT_GEN.RSTA_SHFT_REG_reg " *) 
  (* srl_name = "inst/lmb_bram_I/U0/\inst_blk_mem_gen/gnbram.gnative_mem_map_bmg.native_mem_map_blk_mem_gen/valid.cstr/ramloop[15].ram.r/SAFETY_CKT_GEN.RSTA_SHFT_REG_reg[3]_srl3 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \SAFETY_CKT_GEN.RSTA_SHFT_REG_reg[3]_srl3 
       (.A0(1'b0),
        .A1(1'b1),
        .A2(1'b0),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(clka),
        .D(\SAFETY_CKT_GEN.RSTA_SHFT_REG_reg_n_0_[0] ),
        .Q(\SAFETY_CKT_GEN.RSTA_SHFT_REG_reg[3]_srl3_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \SAFETY_CKT_GEN.RSTA_SHFT_REG_reg[4] 
       (.C(clka),
        .CE(1'b1),
        .D(\SAFETY_CKT_GEN.RSTA_SHFT_REG_reg[3]_srl3_n_0 ),
        .Q(\SAFETY_CKT_GEN.RSTA_SHFT_REG_reg_n_0_[4] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \SAFETY_CKT_GEN.RSTB_SHFT_REG_reg[0] 
       (.C(clkb),
        .CE(1'b1),
        .D(1'b1),
        .Q(\SAFETY_CKT_GEN.RSTB_SHFT_REG_reg_n_0_[0] ),
        .R(1'b0));
  (* srl_bus_name = "inst/lmb_bram_I/U0/\inst_blk_mem_gen/gnbram.gnative_mem_map_bmg.native_mem_map_blk_mem_gen/valid.cstr/ramloop[15].ram.r/SAFETY_CKT_GEN.RSTB_SHFT_REG_reg " *) 
  (* srl_name = "inst/lmb_bram_I/U0/\inst_blk_mem_gen/gnbram.gnative_mem_map_bmg.native_mem_map_blk_mem_gen/valid.cstr/ramloop[15].ram.r/SAFETY_CKT_GEN.RSTB_SHFT_REG_reg[3]_srl3 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \SAFETY_CKT_GEN.RSTB_SHFT_REG_reg[3]_srl3 
       (.A0(1'b0),
        .A1(1'b1),
        .A2(1'b0),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(clkb),
        .D(\SAFETY_CKT_GEN.RSTB_SHFT_REG_reg_n_0_[0] ),
        .Q(\SAFETY_CKT_GEN.RSTB_SHFT_REG_reg[3]_srl3_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \SAFETY_CKT_GEN.RSTB_SHFT_REG_reg[4] 
       (.C(clkb),
        .CE(1'b1),
        .D(\SAFETY_CKT_GEN.RSTB_SHFT_REG_reg[3]_srl3_n_0 ),
        .Q(\SAFETY_CKT_GEN.RSTB_SHFT_REG_reg_n_0_[4] ),
        .R(1'b0));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \SAFETY_CKT_GEN.nSPRAM_RST_BUSY.RSTB_BUSY_NO_REG.RSTB_BUSY_i_1 
       (.I0(POR_B),
        .I1(rstb),
        .I2(ENB_dly),
        .I3(ENB_dly_D),
        .O(ram_rstram_b_busy));
  FDRE \SAFETY_CKT_GEN.nSPRAM_RST_BUSY.RSTB_BUSY_NO_REG.RSTB_BUSY_reg 
       (.C(clkb),
        .CE(1'b1),
        .D(ram_rstram_b_busy),
        .Q(rstb_busy),
        .R(1'b0));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_blk_mem_gen_prim_wrapper__parameterized14 \prim_noinit.ram 
       (.ENA_I(ENA_I),
        .ENA_dly_D(ENA_dly_D),
        .ENB_I(ENB_I),
        .ENB_dly_D(ENB_dly_D),
        .POR_A(POR_A),
        .POR_B(POR_B),
        .addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(clkb),
        .dina(dina),
        .dinb(dinb),
        .douta(douta),
        .doutb(doutb),
        .ena(ena),
        .enb(enb),
        .ram_rstram_a(ram_rstram_a),
        .ram_rstram_b(ram_rstram_b),
        .rsta(rsta),
        .rstb(rstb),
        .wea(wea),
        .web(web));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_width" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_blk_mem_gen_prim_width__parameterized2
   (douta,
    doutb,
    clka,
    clkb,
    ENA_I,
    ENB_I,
    ram_rstram_a,
    ram_rstram_b,
    addra,
    addrb,
    dina,
    dinb,
    wea,
    web);
  output [1:0]douta;
  output [1:0]doutb;
  input clka;
  input clkb;
  input ENA_I;
  input ENB_I;
  input ram_rstram_a;
  input ram_rstram_b;
  input [13:0]addra;
  input [13:0]addrb;
  input [1:0]dina;
  input [1:0]dinb;
  input [0:0]wea;
  input [0:0]web;

  wire ENA_I;
  wire ENB_I;
  wire [13:0]addra;
  wire [13:0]addrb;
  wire clka;
  wire clkb;
  wire [1:0]dina;
  wire [1:0]dinb;
  wire [1:0]douta;
  wire [1:0]doutb;
  wire ram_rstram_a;
  wire ram_rstram_b;
  wire [0:0]wea;
  wire [0:0]web;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_blk_mem_gen_prim_wrapper__parameterized2 \prim_noinit.ram 
       (.ENA_I(ENA_I),
        .ENB_I(ENB_I),
        .addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(clkb),
        .dina(dina),
        .dinb(dinb),
        .douta(douta),
        .doutb(doutb),
        .ram_rstram_a(ram_rstram_a),
        .ram_rstram_b(ram_rstram_b),
        .wea(wea),
        .web(web));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_width" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_blk_mem_gen_prim_width__parameterized3
   (douta,
    doutb,
    clka,
    clkb,
    ENA_I,
    ENB_I,
    ram_rstram_a,
    ram_rstram_b,
    addra,
    addrb,
    dina,
    dinb,
    wea,
    web);
  output [1:0]douta;
  output [1:0]doutb;
  input clka;
  input clkb;
  input ENA_I;
  input ENB_I;
  input ram_rstram_a;
  input ram_rstram_b;
  input [13:0]addra;
  input [13:0]addrb;
  input [1:0]dina;
  input [1:0]dinb;
  input [0:0]wea;
  input [0:0]web;

  wire ENA_I;
  wire ENB_I;
  wire [13:0]addra;
  wire [13:0]addrb;
  wire clka;
  wire clkb;
  wire [1:0]dina;
  wire [1:0]dinb;
  wire [1:0]douta;
  wire [1:0]doutb;
  wire ram_rstram_a;
  wire ram_rstram_b;
  wire [0:0]wea;
  wire [0:0]web;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_blk_mem_gen_prim_wrapper__parameterized3 \prim_noinit.ram 
       (.ENA_I(ENA_I),
        .ENB_I(ENB_I),
        .addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(clkb),
        .dina(dina),
        .dinb(dinb),
        .douta(douta),
        .doutb(doutb),
        .ram_rstram_a(ram_rstram_a),
        .ram_rstram_b(ram_rstram_b),
        .wea(wea),
        .web(web));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_width" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_blk_mem_gen_prim_width__parameterized4
   (douta,
    doutb,
    clka,
    clkb,
    ENA_I,
    ENB_I,
    ram_rstram_a,
    ram_rstram_b,
    addra,
    addrb,
    dina,
    dinb,
    wea,
    web);
  output [1:0]douta;
  output [1:0]doutb;
  input clka;
  input clkb;
  input ENA_I;
  input ENB_I;
  input ram_rstram_a;
  input ram_rstram_b;
  input [13:0]addra;
  input [13:0]addrb;
  input [1:0]dina;
  input [1:0]dinb;
  input [0:0]wea;
  input [0:0]web;

  wire ENA_I;
  wire ENB_I;
  wire [13:0]addra;
  wire [13:0]addrb;
  wire clka;
  wire clkb;
  wire [1:0]dina;
  wire [1:0]dinb;
  wire [1:0]douta;
  wire [1:0]doutb;
  wire ram_rstram_a;
  wire ram_rstram_b;
  wire [0:0]wea;
  wire [0:0]web;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_blk_mem_gen_prim_wrapper__parameterized4 \prim_noinit.ram 
       (.ENA_I(ENA_I),
        .ENB_I(ENB_I),
        .addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(clkb),
        .dina(dina),
        .dinb(dinb),
        .douta(douta),
        .doutb(doutb),
        .ram_rstram_a(ram_rstram_a),
        .ram_rstram_b(ram_rstram_b),
        .wea(wea),
        .web(web));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_width" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_blk_mem_gen_prim_width__parameterized5
   (douta,
    doutb,
    clka,
    clkb,
    ENA_I,
    ENB_I,
    ram_rstram_a,
    ram_rstram_b,
    addra,
    addrb,
    dina,
    dinb,
    wea,
    web);
  output [1:0]douta;
  output [1:0]doutb;
  input clka;
  input clkb;
  input ENA_I;
  input ENB_I;
  input ram_rstram_a;
  input ram_rstram_b;
  input [13:0]addra;
  input [13:0]addrb;
  input [1:0]dina;
  input [1:0]dinb;
  input [0:0]wea;
  input [0:0]web;

  wire ENA_I;
  wire ENB_I;
  wire [13:0]addra;
  wire [13:0]addrb;
  wire clka;
  wire clkb;
  wire [1:0]dina;
  wire [1:0]dinb;
  wire [1:0]douta;
  wire [1:0]doutb;
  wire ram_rstram_a;
  wire ram_rstram_b;
  wire [0:0]wea;
  wire [0:0]web;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_blk_mem_gen_prim_wrapper__parameterized5 \prim_noinit.ram 
       (.ENA_I(ENA_I),
        .ENB_I(ENB_I),
        .addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(clkb),
        .dina(dina),
        .dinb(dinb),
        .douta(douta),
        .doutb(doutb),
        .ram_rstram_a(ram_rstram_a),
        .ram_rstram_b(ram_rstram_b),
        .wea(wea),
        .web(web));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_width" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_blk_mem_gen_prim_width__parameterized6
   (douta,
    doutb,
    clka,
    clkb,
    ENA_I,
    ENB_I,
    ram_rstram_a,
    ram_rstram_b,
    addra,
    addrb,
    dina,
    dinb,
    wea,
    web);
  output [1:0]douta;
  output [1:0]doutb;
  input clka;
  input clkb;
  input ENA_I;
  input ENB_I;
  input ram_rstram_a;
  input ram_rstram_b;
  input [13:0]addra;
  input [13:0]addrb;
  input [1:0]dina;
  input [1:0]dinb;
  input [0:0]wea;
  input [0:0]web;

  wire ENA_I;
  wire ENB_I;
  wire [13:0]addra;
  wire [13:0]addrb;
  wire clka;
  wire clkb;
  wire [1:0]dina;
  wire [1:0]dinb;
  wire [1:0]douta;
  wire [1:0]doutb;
  wire ram_rstram_a;
  wire ram_rstram_b;
  wire [0:0]wea;
  wire [0:0]web;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_blk_mem_gen_prim_wrapper__parameterized6 \prim_noinit.ram 
       (.ENA_I(ENA_I),
        .ENB_I(ENB_I),
        .addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(clkb),
        .dina(dina),
        .dinb(dinb),
        .douta(douta),
        .doutb(doutb),
        .ram_rstram_a(ram_rstram_a),
        .ram_rstram_b(ram_rstram_b),
        .wea(wea),
        .web(web));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_width" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_blk_mem_gen_prim_width__parameterized7
   (douta,
    doutb,
    clka,
    clkb,
    ENA_I,
    ENB_I,
    ram_rstram_a,
    ram_rstram_b,
    addra,
    addrb,
    dina,
    dinb,
    wea,
    web);
  output [1:0]douta;
  output [1:0]doutb;
  input clka;
  input clkb;
  input ENA_I;
  input ENB_I;
  input ram_rstram_a;
  input ram_rstram_b;
  input [13:0]addra;
  input [13:0]addrb;
  input [1:0]dina;
  input [1:0]dinb;
  input [0:0]wea;
  input [0:0]web;

  wire ENA_I;
  wire ENB_I;
  wire [13:0]addra;
  wire [13:0]addrb;
  wire clka;
  wire clkb;
  wire [1:0]dina;
  wire [1:0]dinb;
  wire [1:0]douta;
  wire [1:0]doutb;
  wire ram_rstram_a;
  wire ram_rstram_b;
  wire [0:0]wea;
  wire [0:0]web;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_blk_mem_gen_prim_wrapper__parameterized7 \prim_noinit.ram 
       (.ENA_I(ENA_I),
        .ENB_I(ENB_I),
        .addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(clkb),
        .dina(dina),
        .dinb(dinb),
        .douta(douta),
        .doutb(doutb),
        .ram_rstram_a(ram_rstram_a),
        .ram_rstram_b(ram_rstram_b),
        .wea(wea),
        .web(web));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_width" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_blk_mem_gen_prim_width__parameterized8
   (douta,
    doutb,
    clka,
    clkb,
    ENA_I,
    ENB_I,
    ram_rstram_a,
    ram_rstram_b,
    addra,
    addrb,
    dina,
    dinb,
    wea,
    web);
  output [1:0]douta;
  output [1:0]doutb;
  input clka;
  input clkb;
  input ENA_I;
  input ENB_I;
  input ram_rstram_a;
  input ram_rstram_b;
  input [13:0]addra;
  input [13:0]addrb;
  input [1:0]dina;
  input [1:0]dinb;
  input [0:0]wea;
  input [0:0]web;

  wire ENA_I;
  wire ENB_I;
  wire [13:0]addra;
  wire [13:0]addrb;
  wire clka;
  wire clkb;
  wire [1:0]dina;
  wire [1:0]dinb;
  wire [1:0]douta;
  wire [1:0]doutb;
  wire ram_rstram_a;
  wire ram_rstram_b;
  wire [0:0]wea;
  wire [0:0]web;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_blk_mem_gen_prim_wrapper__parameterized8 \prim_noinit.ram 
       (.ENA_I(ENA_I),
        .ENB_I(ENB_I),
        .addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(clkb),
        .dina(dina),
        .dinb(dinb),
        .douta(douta),
        .doutb(doutb),
        .ram_rstram_a(ram_rstram_a),
        .ram_rstram_b(ram_rstram_b),
        .wea(wea),
        .web(web));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_width" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_blk_mem_gen_prim_width__parameterized9
   (douta,
    doutb,
    clka,
    clkb,
    ENA_I,
    ENB_I,
    ram_rstram_a,
    ram_rstram_b,
    addra,
    addrb,
    dina,
    dinb,
    wea,
    web);
  output [1:0]douta;
  output [1:0]doutb;
  input clka;
  input clkb;
  input ENA_I;
  input ENB_I;
  input ram_rstram_a;
  input ram_rstram_b;
  input [13:0]addra;
  input [13:0]addrb;
  input [1:0]dina;
  input [1:0]dinb;
  input [0:0]wea;
  input [0:0]web;

  wire ENA_I;
  wire ENB_I;
  wire [13:0]addra;
  wire [13:0]addrb;
  wire clka;
  wire clkb;
  wire [1:0]dina;
  wire [1:0]dinb;
  wire [1:0]douta;
  wire [1:0]doutb;
  wire ram_rstram_a;
  wire ram_rstram_b;
  wire [0:0]wea;
  wire [0:0]web;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_blk_mem_gen_prim_wrapper__parameterized9 \prim_noinit.ram 
       (.ENA_I(ENA_I),
        .ENB_I(ENB_I),
        .addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(clkb),
        .dina(dina),
        .dinb(dinb),
        .douta(douta),
        .doutb(doutb),
        .ram_rstram_a(ram_rstram_a),
        .ram_rstram_b(ram_rstram_b),
        .wea(wea),
        .web(web));
endmodule

module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_blk_mem_gen_prim_wrapper
   (douta,
    doutb,
    clka,
    clkb,
    ENA_I,
    ENB_I,
    ram_rstram_a,
    ram_rstram_b,
    addra,
    addrb,
    dina,
    dinb,
    wea,
    web);
  output [1:0]douta;
  output [1:0]doutb;
  input clka;
  input clkb;
  input ENA_I;
  input ENB_I;
  input ram_rstram_a;
  input ram_rstram_b;
  input [13:0]addra;
  input [13:0]addrb;
  input [1:0]dina;
  input [1:0]dinb;
  input [0:0]wea;
  input [0:0]web;

  wire ENA_I;
  wire ENB_I;
  wire [13:0]addra;
  wire [13:0]addrb;
  wire clka;
  wire clkb;
  wire [1:0]dina;
  wire [1:0]dinb;
  wire [1:0]douta;
  wire [1:0]doutb;
  wire ram_rstram_a;
  wire ram_rstram_b;
  wire [0:0]wea;
  wire [0:0]web;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTA_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTB_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_SBITERR_UNCONNECTED ;
  wire [31:2]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOADO_UNCONNECTED ;
  wire [31:2]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOBDO_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPADOP_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPBDOP_UNCONNECTED ;
  wire [7:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_RDADDRECC_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* bmm_info_memory_device = "[1:0][0:16383]" *) 
  RAMB36E1 #(
    .DOA_REG(0),
    .DOB_REG(0),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RAM_EXTENSION_A("NONE"),
    .RAM_EXTENSION_B("NONE"),
    .RAM_MODE("TDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(2),
    .READ_WIDTH_B(2),
    .RSTREG_PRIORITY_A("REGCE"),
    .RSTREG_PRIORITY_B("REGCE"),
    .SIM_COLLISION_CHECK("ALL"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("WRITE_FIRST"),
    .WRITE_MODE_B("WRITE_FIRST"),
    .WRITE_WIDTH_A(2),
    .WRITE_WIDTH_B(2)) 
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram 
       (.ADDRARDADDR({1'b1,addra,1'b1}),
        .ADDRBWRADDR({1'b1,addrb,1'b1}),
        .CASCADEINA(1'b0),
        .CASCADEINB(1'b0),
        .CASCADEOUTA(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTA_UNCONNECTED ),
        .CASCADEOUTB(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTB_UNCONNECTED ),
        .CLKARDCLK(clka),
        .CLKBWRCLK(clkb),
        .DBITERR(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DBITERR_UNCONNECTED ),
        .DIADI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,dina}),
        .DIBDI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,dinb}),
        .DIPADIP({1'b0,1'b0,1'b0,1'b0}),
        .DIPBDIP({1'b0,1'b0,1'b0,1'b0}),
        .DOADO({\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOADO_UNCONNECTED [31:2],douta}),
        .DOBDO({\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOBDO_UNCONNECTED [31:2],doutb}),
        .DOPADOP(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPADOP_UNCONNECTED [3:0]),
        .DOPBDOP(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPBDOP_UNCONNECTED [3:0]),
        .ECCPARITY(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_ECCPARITY_UNCONNECTED [7:0]),
        .ENARDEN(ENA_I),
        .ENBWREN(ENB_I),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b0),
        .REGCEB(1'b0),
        .RSTRAMARSTRAM(ram_rstram_a),
        .RSTRAMB(ram_rstram_b),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SBITERR(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_SBITERR_UNCONNECTED ),
        .WEA({wea,wea,wea,wea}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,web,web,web,web}));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_wrapper" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_blk_mem_gen_prim_wrapper__parameterized0
   (douta,
    doutb,
    clka,
    clkb,
    ENA_I,
    ENB_I,
    ram_rstram_a,
    ram_rstram_b,
    addra,
    addrb,
    dina,
    dinb,
    wea,
    web);
  output [1:0]douta;
  output [1:0]doutb;
  input clka;
  input clkb;
  input ENA_I;
  input ENB_I;
  input ram_rstram_a;
  input ram_rstram_b;
  input [13:0]addra;
  input [13:0]addrb;
  input [1:0]dina;
  input [1:0]dinb;
  input [0:0]wea;
  input [0:0]web;

  wire ENA_I;
  wire ENB_I;
  wire [13:0]addra;
  wire [13:0]addrb;
  wire clka;
  wire clkb;
  wire [1:0]dina;
  wire [1:0]dinb;
  wire [1:0]douta;
  wire [1:0]doutb;
  wire ram_rstram_a;
  wire ram_rstram_b;
  wire [0:0]wea;
  wire [0:0]web;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTA_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTB_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_SBITERR_UNCONNECTED ;
  wire [31:2]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOADO_UNCONNECTED ;
  wire [31:2]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOBDO_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPADOP_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPBDOP_UNCONNECTED ;
  wire [7:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_RDADDRECC_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* bmm_info_memory_device = "[3:2][0:16383]" *) 
  RAMB36E1 #(
    .DOA_REG(0),
    .DOB_REG(0),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RAM_EXTENSION_A("NONE"),
    .RAM_EXTENSION_B("NONE"),
    .RAM_MODE("TDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(2),
    .READ_WIDTH_B(2),
    .RSTREG_PRIORITY_A("REGCE"),
    .RSTREG_PRIORITY_B("REGCE"),
    .SIM_COLLISION_CHECK("ALL"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("WRITE_FIRST"),
    .WRITE_MODE_B("WRITE_FIRST"),
    .WRITE_WIDTH_A(2),
    .WRITE_WIDTH_B(2)) 
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram 
       (.ADDRARDADDR({1'b1,addra,1'b1}),
        .ADDRBWRADDR({1'b1,addrb,1'b1}),
        .CASCADEINA(1'b0),
        .CASCADEINB(1'b0),
        .CASCADEOUTA(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTA_UNCONNECTED ),
        .CASCADEOUTB(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTB_UNCONNECTED ),
        .CLKARDCLK(clka),
        .CLKBWRCLK(clkb),
        .DBITERR(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DBITERR_UNCONNECTED ),
        .DIADI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,dina}),
        .DIBDI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,dinb}),
        .DIPADIP({1'b0,1'b0,1'b0,1'b0}),
        .DIPBDIP({1'b0,1'b0,1'b0,1'b0}),
        .DOADO({\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOADO_UNCONNECTED [31:2],douta}),
        .DOBDO({\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOBDO_UNCONNECTED [31:2],doutb}),
        .DOPADOP(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPADOP_UNCONNECTED [3:0]),
        .DOPBDOP(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPBDOP_UNCONNECTED [3:0]),
        .ECCPARITY(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_ECCPARITY_UNCONNECTED [7:0]),
        .ENARDEN(ENA_I),
        .ENBWREN(ENB_I),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b0),
        .REGCEB(1'b0),
        .RSTRAMARSTRAM(ram_rstram_a),
        .RSTRAMB(ram_rstram_b),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SBITERR(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_SBITERR_UNCONNECTED ),
        .WEA({wea,wea,wea,wea}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,web,web,web,web}));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_wrapper" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_blk_mem_gen_prim_wrapper__parameterized1
   (douta,
    doutb,
    clka,
    clkb,
    ENA_I,
    ENB_I,
    ram_rstram_a,
    ram_rstram_b,
    addra,
    addrb,
    dina,
    dinb,
    wea,
    web);
  output [1:0]douta;
  output [1:0]doutb;
  input clka;
  input clkb;
  input ENA_I;
  input ENB_I;
  input ram_rstram_a;
  input ram_rstram_b;
  input [13:0]addra;
  input [13:0]addrb;
  input [1:0]dina;
  input [1:0]dinb;
  input [0:0]wea;
  input [0:0]web;

  wire ENA_I;
  wire ENB_I;
  wire [13:0]addra;
  wire [13:0]addrb;
  wire clka;
  wire clkb;
  wire [1:0]dina;
  wire [1:0]dinb;
  wire [1:0]douta;
  wire [1:0]doutb;
  wire ram_rstram_a;
  wire ram_rstram_b;
  wire [0:0]wea;
  wire [0:0]web;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTA_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTB_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_SBITERR_UNCONNECTED ;
  wire [31:2]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOADO_UNCONNECTED ;
  wire [31:2]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOBDO_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPADOP_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPBDOP_UNCONNECTED ;
  wire [7:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_RDADDRECC_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* bmm_info_memory_device = "[5:4][0:16383]" *) 
  RAMB36E1 #(
    .DOA_REG(0),
    .DOB_REG(0),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RAM_EXTENSION_A("NONE"),
    .RAM_EXTENSION_B("NONE"),
    .RAM_MODE("TDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(2),
    .READ_WIDTH_B(2),
    .RSTREG_PRIORITY_A("REGCE"),
    .RSTREG_PRIORITY_B("REGCE"),
    .SIM_COLLISION_CHECK("ALL"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("WRITE_FIRST"),
    .WRITE_MODE_B("WRITE_FIRST"),
    .WRITE_WIDTH_A(2),
    .WRITE_WIDTH_B(2)) 
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram 
       (.ADDRARDADDR({1'b1,addra,1'b1}),
        .ADDRBWRADDR({1'b1,addrb,1'b1}),
        .CASCADEINA(1'b0),
        .CASCADEINB(1'b0),
        .CASCADEOUTA(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTA_UNCONNECTED ),
        .CASCADEOUTB(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTB_UNCONNECTED ),
        .CLKARDCLK(clka),
        .CLKBWRCLK(clkb),
        .DBITERR(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DBITERR_UNCONNECTED ),
        .DIADI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,dina}),
        .DIBDI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,dinb}),
        .DIPADIP({1'b0,1'b0,1'b0,1'b0}),
        .DIPBDIP({1'b0,1'b0,1'b0,1'b0}),
        .DOADO({\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOADO_UNCONNECTED [31:2],douta}),
        .DOBDO({\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOBDO_UNCONNECTED [31:2],doutb}),
        .DOPADOP(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPADOP_UNCONNECTED [3:0]),
        .DOPBDOP(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPBDOP_UNCONNECTED [3:0]),
        .ECCPARITY(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_ECCPARITY_UNCONNECTED [7:0]),
        .ENARDEN(ENA_I),
        .ENBWREN(ENB_I),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b0),
        .REGCEB(1'b0),
        .RSTRAMARSTRAM(ram_rstram_a),
        .RSTRAMB(ram_rstram_b),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SBITERR(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_SBITERR_UNCONNECTED ),
        .WEA({wea,wea,wea,wea}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,web,web,web,web}));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_wrapper" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_blk_mem_gen_prim_wrapper__parameterized10
   (douta,
    doutb,
    clka,
    clkb,
    ENA_I,
    ENB_I,
    ram_rstram_a,
    ram_rstram_b,
    addra,
    addrb,
    dina,
    dinb,
    wea,
    web);
  output [1:0]douta;
  output [1:0]doutb;
  input clka;
  input clkb;
  input ENA_I;
  input ENB_I;
  input ram_rstram_a;
  input ram_rstram_b;
  input [13:0]addra;
  input [13:0]addrb;
  input [1:0]dina;
  input [1:0]dinb;
  input [0:0]wea;
  input [0:0]web;

  wire ENA_I;
  wire ENB_I;
  wire [13:0]addra;
  wire [13:0]addrb;
  wire clka;
  wire clkb;
  wire [1:0]dina;
  wire [1:0]dinb;
  wire [1:0]douta;
  wire [1:0]doutb;
  wire ram_rstram_a;
  wire ram_rstram_b;
  wire [0:0]wea;
  wire [0:0]web;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTA_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTB_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_SBITERR_UNCONNECTED ;
  wire [31:2]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOADO_UNCONNECTED ;
  wire [31:2]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOBDO_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPADOP_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPBDOP_UNCONNECTED ;
  wire [7:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_RDADDRECC_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* bmm_info_memory_device = "[23:22][0:16383]" *) 
  RAMB36E1 #(
    .DOA_REG(0),
    .DOB_REG(0),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RAM_EXTENSION_A("NONE"),
    .RAM_EXTENSION_B("NONE"),
    .RAM_MODE("TDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(2),
    .READ_WIDTH_B(2),
    .RSTREG_PRIORITY_A("REGCE"),
    .RSTREG_PRIORITY_B("REGCE"),
    .SIM_COLLISION_CHECK("ALL"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("WRITE_FIRST"),
    .WRITE_MODE_B("WRITE_FIRST"),
    .WRITE_WIDTH_A(2),
    .WRITE_WIDTH_B(2)) 
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram 
       (.ADDRARDADDR({1'b1,addra,1'b1}),
        .ADDRBWRADDR({1'b1,addrb,1'b1}),
        .CASCADEINA(1'b0),
        .CASCADEINB(1'b0),
        .CASCADEOUTA(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTA_UNCONNECTED ),
        .CASCADEOUTB(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTB_UNCONNECTED ),
        .CLKARDCLK(clka),
        .CLKBWRCLK(clkb),
        .DBITERR(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DBITERR_UNCONNECTED ),
        .DIADI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,dina}),
        .DIBDI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,dinb}),
        .DIPADIP({1'b0,1'b0,1'b0,1'b0}),
        .DIPBDIP({1'b0,1'b0,1'b0,1'b0}),
        .DOADO({\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOADO_UNCONNECTED [31:2],douta}),
        .DOBDO({\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOBDO_UNCONNECTED [31:2],doutb}),
        .DOPADOP(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPADOP_UNCONNECTED [3:0]),
        .DOPBDOP(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPBDOP_UNCONNECTED [3:0]),
        .ECCPARITY(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_ECCPARITY_UNCONNECTED [7:0]),
        .ENARDEN(ENA_I),
        .ENBWREN(ENB_I),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b0),
        .REGCEB(1'b0),
        .RSTRAMARSTRAM(ram_rstram_a),
        .RSTRAMB(ram_rstram_b),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SBITERR(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_SBITERR_UNCONNECTED ),
        .WEA({wea,wea,wea,wea}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,web,web,web,web}));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_wrapper" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_blk_mem_gen_prim_wrapper__parameterized11
   (douta,
    doutb,
    clka,
    clkb,
    ENA_I,
    ENB_I,
    ram_rstram_a,
    ram_rstram_b,
    addra,
    addrb,
    dina,
    dinb,
    wea,
    web);
  output [1:0]douta;
  output [1:0]doutb;
  input clka;
  input clkb;
  input ENA_I;
  input ENB_I;
  input ram_rstram_a;
  input ram_rstram_b;
  input [13:0]addra;
  input [13:0]addrb;
  input [1:0]dina;
  input [1:0]dinb;
  input [0:0]wea;
  input [0:0]web;

  wire ENA_I;
  wire ENB_I;
  wire [13:0]addra;
  wire [13:0]addrb;
  wire clka;
  wire clkb;
  wire [1:0]dina;
  wire [1:0]dinb;
  wire [1:0]douta;
  wire [1:0]doutb;
  wire ram_rstram_a;
  wire ram_rstram_b;
  wire [0:0]wea;
  wire [0:0]web;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTA_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTB_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_SBITERR_UNCONNECTED ;
  wire [31:2]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOADO_UNCONNECTED ;
  wire [31:2]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOBDO_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPADOP_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPBDOP_UNCONNECTED ;
  wire [7:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_RDADDRECC_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* bmm_info_memory_device = "[25:24][0:16383]" *) 
  RAMB36E1 #(
    .DOA_REG(0),
    .DOB_REG(0),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RAM_EXTENSION_A("NONE"),
    .RAM_EXTENSION_B("NONE"),
    .RAM_MODE("TDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(2),
    .READ_WIDTH_B(2),
    .RSTREG_PRIORITY_A("REGCE"),
    .RSTREG_PRIORITY_B("REGCE"),
    .SIM_COLLISION_CHECK("ALL"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("WRITE_FIRST"),
    .WRITE_MODE_B("WRITE_FIRST"),
    .WRITE_WIDTH_A(2),
    .WRITE_WIDTH_B(2)) 
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram 
       (.ADDRARDADDR({1'b1,addra,1'b1}),
        .ADDRBWRADDR({1'b1,addrb,1'b1}),
        .CASCADEINA(1'b0),
        .CASCADEINB(1'b0),
        .CASCADEOUTA(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTA_UNCONNECTED ),
        .CASCADEOUTB(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTB_UNCONNECTED ),
        .CLKARDCLK(clka),
        .CLKBWRCLK(clkb),
        .DBITERR(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DBITERR_UNCONNECTED ),
        .DIADI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,dina}),
        .DIBDI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,dinb}),
        .DIPADIP({1'b0,1'b0,1'b0,1'b0}),
        .DIPBDIP({1'b0,1'b0,1'b0,1'b0}),
        .DOADO({\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOADO_UNCONNECTED [31:2],douta}),
        .DOBDO({\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOBDO_UNCONNECTED [31:2],doutb}),
        .DOPADOP(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPADOP_UNCONNECTED [3:0]),
        .DOPBDOP(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPBDOP_UNCONNECTED [3:0]),
        .ECCPARITY(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_ECCPARITY_UNCONNECTED [7:0]),
        .ENARDEN(ENA_I),
        .ENBWREN(ENB_I),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b0),
        .REGCEB(1'b0),
        .RSTRAMARSTRAM(ram_rstram_a),
        .RSTRAMB(ram_rstram_b),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SBITERR(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_SBITERR_UNCONNECTED ),
        .WEA({wea,wea,wea,wea}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,web,web,web,web}));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_wrapper" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_blk_mem_gen_prim_wrapper__parameterized12
   (douta,
    doutb,
    clka,
    clkb,
    ENA_I,
    ENB_I,
    ram_rstram_a,
    ram_rstram_b,
    addra,
    addrb,
    dina,
    dinb,
    wea,
    web);
  output [1:0]douta;
  output [1:0]doutb;
  input clka;
  input clkb;
  input ENA_I;
  input ENB_I;
  input ram_rstram_a;
  input ram_rstram_b;
  input [13:0]addra;
  input [13:0]addrb;
  input [1:0]dina;
  input [1:0]dinb;
  input [0:0]wea;
  input [0:0]web;

  wire ENA_I;
  wire ENB_I;
  wire [13:0]addra;
  wire [13:0]addrb;
  wire clka;
  wire clkb;
  wire [1:0]dina;
  wire [1:0]dinb;
  wire [1:0]douta;
  wire [1:0]doutb;
  wire ram_rstram_a;
  wire ram_rstram_b;
  wire [0:0]wea;
  wire [0:0]web;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTA_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTB_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_SBITERR_UNCONNECTED ;
  wire [31:2]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOADO_UNCONNECTED ;
  wire [31:2]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOBDO_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPADOP_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPBDOP_UNCONNECTED ;
  wire [7:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_RDADDRECC_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* bmm_info_memory_device = "[27:26][0:16383]" *) 
  RAMB36E1 #(
    .DOA_REG(0),
    .DOB_REG(0),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RAM_EXTENSION_A("NONE"),
    .RAM_EXTENSION_B("NONE"),
    .RAM_MODE("TDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(2),
    .READ_WIDTH_B(2),
    .RSTREG_PRIORITY_A("REGCE"),
    .RSTREG_PRIORITY_B("REGCE"),
    .SIM_COLLISION_CHECK("ALL"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("WRITE_FIRST"),
    .WRITE_MODE_B("WRITE_FIRST"),
    .WRITE_WIDTH_A(2),
    .WRITE_WIDTH_B(2)) 
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram 
       (.ADDRARDADDR({1'b1,addra,1'b1}),
        .ADDRBWRADDR({1'b1,addrb,1'b1}),
        .CASCADEINA(1'b0),
        .CASCADEINB(1'b0),
        .CASCADEOUTA(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTA_UNCONNECTED ),
        .CASCADEOUTB(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTB_UNCONNECTED ),
        .CLKARDCLK(clka),
        .CLKBWRCLK(clkb),
        .DBITERR(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DBITERR_UNCONNECTED ),
        .DIADI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,dina}),
        .DIBDI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,dinb}),
        .DIPADIP({1'b0,1'b0,1'b0,1'b0}),
        .DIPBDIP({1'b0,1'b0,1'b0,1'b0}),
        .DOADO({\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOADO_UNCONNECTED [31:2],douta}),
        .DOBDO({\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOBDO_UNCONNECTED [31:2],doutb}),
        .DOPADOP(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPADOP_UNCONNECTED [3:0]),
        .DOPBDOP(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPBDOP_UNCONNECTED [3:0]),
        .ECCPARITY(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_ECCPARITY_UNCONNECTED [7:0]),
        .ENARDEN(ENA_I),
        .ENBWREN(ENB_I),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b0),
        .REGCEB(1'b0),
        .RSTRAMARSTRAM(ram_rstram_a),
        .RSTRAMB(ram_rstram_b),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SBITERR(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_SBITERR_UNCONNECTED ),
        .WEA({wea,wea,wea,wea}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,web,web,web,web}));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_wrapper" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_blk_mem_gen_prim_wrapper__parameterized13
   (douta,
    doutb,
    clka,
    clkb,
    ENA_I,
    ENB_I,
    ram_rstram_a,
    ram_rstram_b,
    addra,
    addrb,
    dina,
    dinb,
    wea,
    web);
  output [1:0]douta;
  output [1:0]doutb;
  input clka;
  input clkb;
  input ENA_I;
  input ENB_I;
  input ram_rstram_a;
  input ram_rstram_b;
  input [13:0]addra;
  input [13:0]addrb;
  input [1:0]dina;
  input [1:0]dinb;
  input [0:0]wea;
  input [0:0]web;

  wire ENA_I;
  wire ENB_I;
  wire [13:0]addra;
  wire [13:0]addrb;
  wire clka;
  wire clkb;
  wire [1:0]dina;
  wire [1:0]dinb;
  wire [1:0]douta;
  wire [1:0]doutb;
  wire ram_rstram_a;
  wire ram_rstram_b;
  wire [0:0]wea;
  wire [0:0]web;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTA_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTB_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_SBITERR_UNCONNECTED ;
  wire [31:2]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOADO_UNCONNECTED ;
  wire [31:2]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOBDO_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPADOP_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPBDOP_UNCONNECTED ;
  wire [7:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_RDADDRECC_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* bmm_info_memory_device = "[29:28][0:16383]" *) 
  RAMB36E1 #(
    .DOA_REG(0),
    .DOB_REG(0),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RAM_EXTENSION_A("NONE"),
    .RAM_EXTENSION_B("NONE"),
    .RAM_MODE("TDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(2),
    .READ_WIDTH_B(2),
    .RSTREG_PRIORITY_A("REGCE"),
    .RSTREG_PRIORITY_B("REGCE"),
    .SIM_COLLISION_CHECK("ALL"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("WRITE_FIRST"),
    .WRITE_MODE_B("WRITE_FIRST"),
    .WRITE_WIDTH_A(2),
    .WRITE_WIDTH_B(2)) 
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram 
       (.ADDRARDADDR({1'b1,addra,1'b1}),
        .ADDRBWRADDR({1'b1,addrb,1'b1}),
        .CASCADEINA(1'b0),
        .CASCADEINB(1'b0),
        .CASCADEOUTA(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTA_UNCONNECTED ),
        .CASCADEOUTB(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTB_UNCONNECTED ),
        .CLKARDCLK(clka),
        .CLKBWRCLK(clkb),
        .DBITERR(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DBITERR_UNCONNECTED ),
        .DIADI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,dina}),
        .DIBDI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,dinb}),
        .DIPADIP({1'b0,1'b0,1'b0,1'b0}),
        .DIPBDIP({1'b0,1'b0,1'b0,1'b0}),
        .DOADO({\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOADO_UNCONNECTED [31:2],douta}),
        .DOBDO({\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOBDO_UNCONNECTED [31:2],doutb}),
        .DOPADOP(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPADOP_UNCONNECTED [3:0]),
        .DOPBDOP(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPBDOP_UNCONNECTED [3:0]),
        .ECCPARITY(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_ECCPARITY_UNCONNECTED [7:0]),
        .ENARDEN(ENA_I),
        .ENBWREN(ENB_I),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b0),
        .REGCEB(1'b0),
        .RSTRAMARSTRAM(ram_rstram_a),
        .RSTRAMB(ram_rstram_b),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SBITERR(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_SBITERR_UNCONNECTED ),
        .WEA({wea,wea,wea,wea}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,web,web,web,web}));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_wrapper" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_blk_mem_gen_prim_wrapper__parameterized14
   (douta,
    doutb,
    ENA_I,
    ENB_I,
    ram_rstram_a,
    ram_rstram_b,
    clka,
    clkb,
    addra,
    addrb,
    dina,
    dinb,
    wea,
    web,
    rsta,
    POR_A,
    ENA_dly_D,
    ena,
    rstb,
    POR_B,
    ENB_dly_D,
    enb);
  output [1:0]douta;
  output [1:0]doutb;
  output ENA_I;
  output ENB_I;
  output ram_rstram_a;
  output ram_rstram_b;
  input clka;
  input clkb;
  input [13:0]addra;
  input [13:0]addrb;
  input [1:0]dina;
  input [1:0]dinb;
  input [0:0]wea;
  input [0:0]web;
  input rsta;
  input POR_A;
  input ENA_dly_D;
  input ena;
  input rstb;
  input POR_B;
  input ENB_dly_D;
  input enb;

  wire ENA_I;
  wire ENA_dly_D;
  wire ENB_I;
  wire ENB_dly_D;
  wire POR_A;
  wire POR_B;
  wire [13:0]addra;
  wire [13:0]addrb;
  wire clka;
  wire clkb;
  wire [1:0]dina;
  wire [1:0]dinb;
  wire [1:0]douta;
  wire [1:0]doutb;
  wire ena;
  wire enb;
  wire ram_rstram_a;
  wire ram_rstram_b;
  wire rsta;
  wire rstb;
  wire [0:0]wea;
  wire [0:0]web;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTA_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTB_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_SBITERR_UNCONNECTED ;
  wire [31:2]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOADO_UNCONNECTED ;
  wire [31:2]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOBDO_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPADOP_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPBDOP_UNCONNECTED ;
  wire [7:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_RDADDRECC_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* bmm_info_memory_device = "[31:30][0:16383]" *) 
  RAMB36E1 #(
    .DOA_REG(0),
    .DOB_REG(0),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RAM_EXTENSION_A("NONE"),
    .RAM_EXTENSION_B("NONE"),
    .RAM_MODE("TDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(2),
    .READ_WIDTH_B(2),
    .RSTREG_PRIORITY_A("REGCE"),
    .RSTREG_PRIORITY_B("REGCE"),
    .SIM_COLLISION_CHECK("ALL"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("WRITE_FIRST"),
    .WRITE_MODE_B("WRITE_FIRST"),
    .WRITE_WIDTH_A(2),
    .WRITE_WIDTH_B(2)) 
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram 
       (.ADDRARDADDR({1'b1,addra,1'b1}),
        .ADDRBWRADDR({1'b1,addrb,1'b1}),
        .CASCADEINA(1'b0),
        .CASCADEINB(1'b0),
        .CASCADEOUTA(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTA_UNCONNECTED ),
        .CASCADEOUTB(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTB_UNCONNECTED ),
        .CLKARDCLK(clka),
        .CLKBWRCLK(clkb),
        .DBITERR(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DBITERR_UNCONNECTED ),
        .DIADI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,dina}),
        .DIBDI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,dinb}),
        .DIPADIP({1'b0,1'b0,1'b0,1'b0}),
        .DIPBDIP({1'b0,1'b0,1'b0,1'b0}),
        .DOADO({\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOADO_UNCONNECTED [31:2],douta}),
        .DOBDO({\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOBDO_UNCONNECTED [31:2],doutb}),
        .DOPADOP(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPADOP_UNCONNECTED [3:0]),
        .DOPBDOP(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPBDOP_UNCONNECTED [3:0]),
        .ECCPARITY(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_ECCPARITY_UNCONNECTED [7:0]),
        .ENARDEN(ENA_I),
        .ENBWREN(ENB_I),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b0),
        .REGCEB(1'b0),
        .RSTRAMARSTRAM(ram_rstram_a),
        .RSTRAMB(ram_rstram_b),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SBITERR(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_SBITERR_UNCONNECTED ),
        .WEA({wea,wea,wea,wea}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,web,web,web,web}));
  LUT2 #(
    .INIT(4'hE)) 
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_i_1 
       (.I0(ENA_dly_D),
        .I1(ena),
        .O(ENA_I));
  LUT2 #(
    .INIT(4'hE)) 
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_i_2 
       (.I0(ENB_dly_D),
        .I1(enb),
        .O(ENB_I));
  LUT2 #(
    .INIT(4'hE)) 
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_i_3 
       (.I0(rsta),
        .I1(POR_A),
        .O(ram_rstram_a));
  LUT2 #(
    .INIT(4'hE)) 
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_i_4 
       (.I0(rstb),
        .I1(POR_B),
        .O(ram_rstram_b));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_wrapper" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_blk_mem_gen_prim_wrapper__parameterized2
   (douta,
    doutb,
    clka,
    clkb,
    ENA_I,
    ENB_I,
    ram_rstram_a,
    ram_rstram_b,
    addra,
    addrb,
    dina,
    dinb,
    wea,
    web);
  output [1:0]douta;
  output [1:0]doutb;
  input clka;
  input clkb;
  input ENA_I;
  input ENB_I;
  input ram_rstram_a;
  input ram_rstram_b;
  input [13:0]addra;
  input [13:0]addrb;
  input [1:0]dina;
  input [1:0]dinb;
  input [0:0]wea;
  input [0:0]web;

  wire ENA_I;
  wire ENB_I;
  wire [13:0]addra;
  wire [13:0]addrb;
  wire clka;
  wire clkb;
  wire [1:0]dina;
  wire [1:0]dinb;
  wire [1:0]douta;
  wire [1:0]doutb;
  wire ram_rstram_a;
  wire ram_rstram_b;
  wire [0:0]wea;
  wire [0:0]web;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTA_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTB_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_SBITERR_UNCONNECTED ;
  wire [31:2]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOADO_UNCONNECTED ;
  wire [31:2]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOBDO_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPADOP_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPBDOP_UNCONNECTED ;
  wire [7:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_RDADDRECC_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* bmm_info_memory_device = "[7:6][0:16383]" *) 
  RAMB36E1 #(
    .DOA_REG(0),
    .DOB_REG(0),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RAM_EXTENSION_A("NONE"),
    .RAM_EXTENSION_B("NONE"),
    .RAM_MODE("TDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(2),
    .READ_WIDTH_B(2),
    .RSTREG_PRIORITY_A("REGCE"),
    .RSTREG_PRIORITY_B("REGCE"),
    .SIM_COLLISION_CHECK("ALL"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("WRITE_FIRST"),
    .WRITE_MODE_B("WRITE_FIRST"),
    .WRITE_WIDTH_A(2),
    .WRITE_WIDTH_B(2)) 
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram 
       (.ADDRARDADDR({1'b1,addra,1'b1}),
        .ADDRBWRADDR({1'b1,addrb,1'b1}),
        .CASCADEINA(1'b0),
        .CASCADEINB(1'b0),
        .CASCADEOUTA(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTA_UNCONNECTED ),
        .CASCADEOUTB(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTB_UNCONNECTED ),
        .CLKARDCLK(clka),
        .CLKBWRCLK(clkb),
        .DBITERR(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DBITERR_UNCONNECTED ),
        .DIADI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,dina}),
        .DIBDI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,dinb}),
        .DIPADIP({1'b0,1'b0,1'b0,1'b0}),
        .DIPBDIP({1'b0,1'b0,1'b0,1'b0}),
        .DOADO({\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOADO_UNCONNECTED [31:2],douta}),
        .DOBDO({\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOBDO_UNCONNECTED [31:2],doutb}),
        .DOPADOP(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPADOP_UNCONNECTED [3:0]),
        .DOPBDOP(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPBDOP_UNCONNECTED [3:0]),
        .ECCPARITY(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_ECCPARITY_UNCONNECTED [7:0]),
        .ENARDEN(ENA_I),
        .ENBWREN(ENB_I),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b0),
        .REGCEB(1'b0),
        .RSTRAMARSTRAM(ram_rstram_a),
        .RSTRAMB(ram_rstram_b),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SBITERR(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_SBITERR_UNCONNECTED ),
        .WEA({wea,wea,wea,wea}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,web,web,web,web}));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_wrapper" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_blk_mem_gen_prim_wrapper__parameterized3
   (douta,
    doutb,
    clka,
    clkb,
    ENA_I,
    ENB_I,
    ram_rstram_a,
    ram_rstram_b,
    addra,
    addrb,
    dina,
    dinb,
    wea,
    web);
  output [1:0]douta;
  output [1:0]doutb;
  input clka;
  input clkb;
  input ENA_I;
  input ENB_I;
  input ram_rstram_a;
  input ram_rstram_b;
  input [13:0]addra;
  input [13:0]addrb;
  input [1:0]dina;
  input [1:0]dinb;
  input [0:0]wea;
  input [0:0]web;

  wire ENA_I;
  wire ENB_I;
  wire [13:0]addra;
  wire [13:0]addrb;
  wire clka;
  wire clkb;
  wire [1:0]dina;
  wire [1:0]dinb;
  wire [1:0]douta;
  wire [1:0]doutb;
  wire ram_rstram_a;
  wire ram_rstram_b;
  wire [0:0]wea;
  wire [0:0]web;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTA_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTB_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_SBITERR_UNCONNECTED ;
  wire [31:2]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOADO_UNCONNECTED ;
  wire [31:2]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOBDO_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPADOP_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPBDOP_UNCONNECTED ;
  wire [7:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_RDADDRECC_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* bmm_info_memory_device = "[9:8][0:16383]" *) 
  RAMB36E1 #(
    .DOA_REG(0),
    .DOB_REG(0),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RAM_EXTENSION_A("NONE"),
    .RAM_EXTENSION_B("NONE"),
    .RAM_MODE("TDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(2),
    .READ_WIDTH_B(2),
    .RSTREG_PRIORITY_A("REGCE"),
    .RSTREG_PRIORITY_B("REGCE"),
    .SIM_COLLISION_CHECK("ALL"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("WRITE_FIRST"),
    .WRITE_MODE_B("WRITE_FIRST"),
    .WRITE_WIDTH_A(2),
    .WRITE_WIDTH_B(2)) 
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram 
       (.ADDRARDADDR({1'b1,addra,1'b1}),
        .ADDRBWRADDR({1'b1,addrb,1'b1}),
        .CASCADEINA(1'b0),
        .CASCADEINB(1'b0),
        .CASCADEOUTA(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTA_UNCONNECTED ),
        .CASCADEOUTB(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTB_UNCONNECTED ),
        .CLKARDCLK(clka),
        .CLKBWRCLK(clkb),
        .DBITERR(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DBITERR_UNCONNECTED ),
        .DIADI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,dina}),
        .DIBDI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,dinb}),
        .DIPADIP({1'b0,1'b0,1'b0,1'b0}),
        .DIPBDIP({1'b0,1'b0,1'b0,1'b0}),
        .DOADO({\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOADO_UNCONNECTED [31:2],douta}),
        .DOBDO({\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOBDO_UNCONNECTED [31:2],doutb}),
        .DOPADOP(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPADOP_UNCONNECTED [3:0]),
        .DOPBDOP(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPBDOP_UNCONNECTED [3:0]),
        .ECCPARITY(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_ECCPARITY_UNCONNECTED [7:0]),
        .ENARDEN(ENA_I),
        .ENBWREN(ENB_I),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b0),
        .REGCEB(1'b0),
        .RSTRAMARSTRAM(ram_rstram_a),
        .RSTRAMB(ram_rstram_b),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SBITERR(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_SBITERR_UNCONNECTED ),
        .WEA({wea,wea,wea,wea}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,web,web,web,web}));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_wrapper" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_blk_mem_gen_prim_wrapper__parameterized4
   (douta,
    doutb,
    clka,
    clkb,
    ENA_I,
    ENB_I,
    ram_rstram_a,
    ram_rstram_b,
    addra,
    addrb,
    dina,
    dinb,
    wea,
    web);
  output [1:0]douta;
  output [1:0]doutb;
  input clka;
  input clkb;
  input ENA_I;
  input ENB_I;
  input ram_rstram_a;
  input ram_rstram_b;
  input [13:0]addra;
  input [13:0]addrb;
  input [1:0]dina;
  input [1:0]dinb;
  input [0:0]wea;
  input [0:0]web;

  wire ENA_I;
  wire ENB_I;
  wire [13:0]addra;
  wire [13:0]addrb;
  wire clka;
  wire clkb;
  wire [1:0]dina;
  wire [1:0]dinb;
  wire [1:0]douta;
  wire [1:0]doutb;
  wire ram_rstram_a;
  wire ram_rstram_b;
  wire [0:0]wea;
  wire [0:0]web;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTA_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTB_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_SBITERR_UNCONNECTED ;
  wire [31:2]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOADO_UNCONNECTED ;
  wire [31:2]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOBDO_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPADOP_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPBDOP_UNCONNECTED ;
  wire [7:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_RDADDRECC_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* bmm_info_memory_device = "[11:10][0:16383]" *) 
  RAMB36E1 #(
    .DOA_REG(0),
    .DOB_REG(0),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RAM_EXTENSION_A("NONE"),
    .RAM_EXTENSION_B("NONE"),
    .RAM_MODE("TDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(2),
    .READ_WIDTH_B(2),
    .RSTREG_PRIORITY_A("REGCE"),
    .RSTREG_PRIORITY_B("REGCE"),
    .SIM_COLLISION_CHECK("ALL"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("WRITE_FIRST"),
    .WRITE_MODE_B("WRITE_FIRST"),
    .WRITE_WIDTH_A(2),
    .WRITE_WIDTH_B(2)) 
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram 
       (.ADDRARDADDR({1'b1,addra,1'b1}),
        .ADDRBWRADDR({1'b1,addrb,1'b1}),
        .CASCADEINA(1'b0),
        .CASCADEINB(1'b0),
        .CASCADEOUTA(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTA_UNCONNECTED ),
        .CASCADEOUTB(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTB_UNCONNECTED ),
        .CLKARDCLK(clka),
        .CLKBWRCLK(clkb),
        .DBITERR(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DBITERR_UNCONNECTED ),
        .DIADI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,dina}),
        .DIBDI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,dinb}),
        .DIPADIP({1'b0,1'b0,1'b0,1'b0}),
        .DIPBDIP({1'b0,1'b0,1'b0,1'b0}),
        .DOADO({\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOADO_UNCONNECTED [31:2],douta}),
        .DOBDO({\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOBDO_UNCONNECTED [31:2],doutb}),
        .DOPADOP(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPADOP_UNCONNECTED [3:0]),
        .DOPBDOP(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPBDOP_UNCONNECTED [3:0]),
        .ECCPARITY(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_ECCPARITY_UNCONNECTED [7:0]),
        .ENARDEN(ENA_I),
        .ENBWREN(ENB_I),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b0),
        .REGCEB(1'b0),
        .RSTRAMARSTRAM(ram_rstram_a),
        .RSTRAMB(ram_rstram_b),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SBITERR(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_SBITERR_UNCONNECTED ),
        .WEA({wea,wea,wea,wea}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,web,web,web,web}));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_wrapper" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_blk_mem_gen_prim_wrapper__parameterized5
   (douta,
    doutb,
    clka,
    clkb,
    ENA_I,
    ENB_I,
    ram_rstram_a,
    ram_rstram_b,
    addra,
    addrb,
    dina,
    dinb,
    wea,
    web);
  output [1:0]douta;
  output [1:0]doutb;
  input clka;
  input clkb;
  input ENA_I;
  input ENB_I;
  input ram_rstram_a;
  input ram_rstram_b;
  input [13:0]addra;
  input [13:0]addrb;
  input [1:0]dina;
  input [1:0]dinb;
  input [0:0]wea;
  input [0:0]web;

  wire ENA_I;
  wire ENB_I;
  wire [13:0]addra;
  wire [13:0]addrb;
  wire clka;
  wire clkb;
  wire [1:0]dina;
  wire [1:0]dinb;
  wire [1:0]douta;
  wire [1:0]doutb;
  wire ram_rstram_a;
  wire ram_rstram_b;
  wire [0:0]wea;
  wire [0:0]web;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTA_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTB_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_SBITERR_UNCONNECTED ;
  wire [31:2]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOADO_UNCONNECTED ;
  wire [31:2]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOBDO_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPADOP_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPBDOP_UNCONNECTED ;
  wire [7:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_RDADDRECC_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* bmm_info_memory_device = "[13:12][0:16383]" *) 
  RAMB36E1 #(
    .DOA_REG(0),
    .DOB_REG(0),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RAM_EXTENSION_A("NONE"),
    .RAM_EXTENSION_B("NONE"),
    .RAM_MODE("TDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(2),
    .READ_WIDTH_B(2),
    .RSTREG_PRIORITY_A("REGCE"),
    .RSTREG_PRIORITY_B("REGCE"),
    .SIM_COLLISION_CHECK("ALL"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("WRITE_FIRST"),
    .WRITE_MODE_B("WRITE_FIRST"),
    .WRITE_WIDTH_A(2),
    .WRITE_WIDTH_B(2)) 
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram 
       (.ADDRARDADDR({1'b1,addra,1'b1}),
        .ADDRBWRADDR({1'b1,addrb,1'b1}),
        .CASCADEINA(1'b0),
        .CASCADEINB(1'b0),
        .CASCADEOUTA(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTA_UNCONNECTED ),
        .CASCADEOUTB(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTB_UNCONNECTED ),
        .CLKARDCLK(clka),
        .CLKBWRCLK(clkb),
        .DBITERR(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DBITERR_UNCONNECTED ),
        .DIADI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,dina}),
        .DIBDI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,dinb}),
        .DIPADIP({1'b0,1'b0,1'b0,1'b0}),
        .DIPBDIP({1'b0,1'b0,1'b0,1'b0}),
        .DOADO({\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOADO_UNCONNECTED [31:2],douta}),
        .DOBDO({\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOBDO_UNCONNECTED [31:2],doutb}),
        .DOPADOP(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPADOP_UNCONNECTED [3:0]),
        .DOPBDOP(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPBDOP_UNCONNECTED [3:0]),
        .ECCPARITY(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_ECCPARITY_UNCONNECTED [7:0]),
        .ENARDEN(ENA_I),
        .ENBWREN(ENB_I),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b0),
        .REGCEB(1'b0),
        .RSTRAMARSTRAM(ram_rstram_a),
        .RSTRAMB(ram_rstram_b),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SBITERR(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_SBITERR_UNCONNECTED ),
        .WEA({wea,wea,wea,wea}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,web,web,web,web}));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_wrapper" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_blk_mem_gen_prim_wrapper__parameterized6
   (douta,
    doutb,
    clka,
    clkb,
    ENA_I,
    ENB_I,
    ram_rstram_a,
    ram_rstram_b,
    addra,
    addrb,
    dina,
    dinb,
    wea,
    web);
  output [1:0]douta;
  output [1:0]doutb;
  input clka;
  input clkb;
  input ENA_I;
  input ENB_I;
  input ram_rstram_a;
  input ram_rstram_b;
  input [13:0]addra;
  input [13:0]addrb;
  input [1:0]dina;
  input [1:0]dinb;
  input [0:0]wea;
  input [0:0]web;

  wire ENA_I;
  wire ENB_I;
  wire [13:0]addra;
  wire [13:0]addrb;
  wire clka;
  wire clkb;
  wire [1:0]dina;
  wire [1:0]dinb;
  wire [1:0]douta;
  wire [1:0]doutb;
  wire ram_rstram_a;
  wire ram_rstram_b;
  wire [0:0]wea;
  wire [0:0]web;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTA_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTB_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_SBITERR_UNCONNECTED ;
  wire [31:2]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOADO_UNCONNECTED ;
  wire [31:2]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOBDO_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPADOP_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPBDOP_UNCONNECTED ;
  wire [7:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_RDADDRECC_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* bmm_info_memory_device = "[15:14][0:16383]" *) 
  RAMB36E1 #(
    .DOA_REG(0),
    .DOB_REG(0),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RAM_EXTENSION_A("NONE"),
    .RAM_EXTENSION_B("NONE"),
    .RAM_MODE("TDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(2),
    .READ_WIDTH_B(2),
    .RSTREG_PRIORITY_A("REGCE"),
    .RSTREG_PRIORITY_B("REGCE"),
    .SIM_COLLISION_CHECK("ALL"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("WRITE_FIRST"),
    .WRITE_MODE_B("WRITE_FIRST"),
    .WRITE_WIDTH_A(2),
    .WRITE_WIDTH_B(2)) 
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram 
       (.ADDRARDADDR({1'b1,addra,1'b1}),
        .ADDRBWRADDR({1'b1,addrb,1'b1}),
        .CASCADEINA(1'b0),
        .CASCADEINB(1'b0),
        .CASCADEOUTA(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTA_UNCONNECTED ),
        .CASCADEOUTB(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTB_UNCONNECTED ),
        .CLKARDCLK(clka),
        .CLKBWRCLK(clkb),
        .DBITERR(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DBITERR_UNCONNECTED ),
        .DIADI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,dina}),
        .DIBDI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,dinb}),
        .DIPADIP({1'b0,1'b0,1'b0,1'b0}),
        .DIPBDIP({1'b0,1'b0,1'b0,1'b0}),
        .DOADO({\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOADO_UNCONNECTED [31:2],douta}),
        .DOBDO({\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOBDO_UNCONNECTED [31:2],doutb}),
        .DOPADOP(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPADOP_UNCONNECTED [3:0]),
        .DOPBDOP(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPBDOP_UNCONNECTED [3:0]),
        .ECCPARITY(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_ECCPARITY_UNCONNECTED [7:0]),
        .ENARDEN(ENA_I),
        .ENBWREN(ENB_I),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b0),
        .REGCEB(1'b0),
        .RSTRAMARSTRAM(ram_rstram_a),
        .RSTRAMB(ram_rstram_b),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SBITERR(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_SBITERR_UNCONNECTED ),
        .WEA({wea,wea,wea,wea}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,web,web,web,web}));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_wrapper" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_blk_mem_gen_prim_wrapper__parameterized7
   (douta,
    doutb,
    clka,
    clkb,
    ENA_I,
    ENB_I,
    ram_rstram_a,
    ram_rstram_b,
    addra,
    addrb,
    dina,
    dinb,
    wea,
    web);
  output [1:0]douta;
  output [1:0]doutb;
  input clka;
  input clkb;
  input ENA_I;
  input ENB_I;
  input ram_rstram_a;
  input ram_rstram_b;
  input [13:0]addra;
  input [13:0]addrb;
  input [1:0]dina;
  input [1:0]dinb;
  input [0:0]wea;
  input [0:0]web;

  wire ENA_I;
  wire ENB_I;
  wire [13:0]addra;
  wire [13:0]addrb;
  wire clka;
  wire clkb;
  wire [1:0]dina;
  wire [1:0]dinb;
  wire [1:0]douta;
  wire [1:0]doutb;
  wire ram_rstram_a;
  wire ram_rstram_b;
  wire [0:0]wea;
  wire [0:0]web;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTA_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTB_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_SBITERR_UNCONNECTED ;
  wire [31:2]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOADO_UNCONNECTED ;
  wire [31:2]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOBDO_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPADOP_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPBDOP_UNCONNECTED ;
  wire [7:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_RDADDRECC_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* bmm_info_memory_device = "[17:16][0:16383]" *) 
  RAMB36E1 #(
    .DOA_REG(0),
    .DOB_REG(0),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RAM_EXTENSION_A("NONE"),
    .RAM_EXTENSION_B("NONE"),
    .RAM_MODE("TDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(2),
    .READ_WIDTH_B(2),
    .RSTREG_PRIORITY_A("REGCE"),
    .RSTREG_PRIORITY_B("REGCE"),
    .SIM_COLLISION_CHECK("ALL"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("WRITE_FIRST"),
    .WRITE_MODE_B("WRITE_FIRST"),
    .WRITE_WIDTH_A(2),
    .WRITE_WIDTH_B(2)) 
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram 
       (.ADDRARDADDR({1'b1,addra,1'b1}),
        .ADDRBWRADDR({1'b1,addrb,1'b1}),
        .CASCADEINA(1'b0),
        .CASCADEINB(1'b0),
        .CASCADEOUTA(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTA_UNCONNECTED ),
        .CASCADEOUTB(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTB_UNCONNECTED ),
        .CLKARDCLK(clka),
        .CLKBWRCLK(clkb),
        .DBITERR(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DBITERR_UNCONNECTED ),
        .DIADI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,dina}),
        .DIBDI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,dinb}),
        .DIPADIP({1'b0,1'b0,1'b0,1'b0}),
        .DIPBDIP({1'b0,1'b0,1'b0,1'b0}),
        .DOADO({\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOADO_UNCONNECTED [31:2],douta}),
        .DOBDO({\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOBDO_UNCONNECTED [31:2],doutb}),
        .DOPADOP(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPADOP_UNCONNECTED [3:0]),
        .DOPBDOP(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPBDOP_UNCONNECTED [3:0]),
        .ECCPARITY(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_ECCPARITY_UNCONNECTED [7:0]),
        .ENARDEN(ENA_I),
        .ENBWREN(ENB_I),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b0),
        .REGCEB(1'b0),
        .RSTRAMARSTRAM(ram_rstram_a),
        .RSTRAMB(ram_rstram_b),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SBITERR(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_SBITERR_UNCONNECTED ),
        .WEA({wea,wea,wea,wea}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,web,web,web,web}));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_wrapper" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_blk_mem_gen_prim_wrapper__parameterized8
   (douta,
    doutb,
    clka,
    clkb,
    ENA_I,
    ENB_I,
    ram_rstram_a,
    ram_rstram_b,
    addra,
    addrb,
    dina,
    dinb,
    wea,
    web);
  output [1:0]douta;
  output [1:0]doutb;
  input clka;
  input clkb;
  input ENA_I;
  input ENB_I;
  input ram_rstram_a;
  input ram_rstram_b;
  input [13:0]addra;
  input [13:0]addrb;
  input [1:0]dina;
  input [1:0]dinb;
  input [0:0]wea;
  input [0:0]web;

  wire ENA_I;
  wire ENB_I;
  wire [13:0]addra;
  wire [13:0]addrb;
  wire clka;
  wire clkb;
  wire [1:0]dina;
  wire [1:0]dinb;
  wire [1:0]douta;
  wire [1:0]doutb;
  wire ram_rstram_a;
  wire ram_rstram_b;
  wire [0:0]wea;
  wire [0:0]web;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTA_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTB_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_SBITERR_UNCONNECTED ;
  wire [31:2]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOADO_UNCONNECTED ;
  wire [31:2]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOBDO_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPADOP_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPBDOP_UNCONNECTED ;
  wire [7:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_RDADDRECC_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* bmm_info_memory_device = "[19:18][0:16383]" *) 
  RAMB36E1 #(
    .DOA_REG(0),
    .DOB_REG(0),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RAM_EXTENSION_A("NONE"),
    .RAM_EXTENSION_B("NONE"),
    .RAM_MODE("TDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(2),
    .READ_WIDTH_B(2),
    .RSTREG_PRIORITY_A("REGCE"),
    .RSTREG_PRIORITY_B("REGCE"),
    .SIM_COLLISION_CHECK("ALL"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("WRITE_FIRST"),
    .WRITE_MODE_B("WRITE_FIRST"),
    .WRITE_WIDTH_A(2),
    .WRITE_WIDTH_B(2)) 
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram 
       (.ADDRARDADDR({1'b1,addra,1'b1}),
        .ADDRBWRADDR({1'b1,addrb,1'b1}),
        .CASCADEINA(1'b0),
        .CASCADEINB(1'b0),
        .CASCADEOUTA(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTA_UNCONNECTED ),
        .CASCADEOUTB(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTB_UNCONNECTED ),
        .CLKARDCLK(clka),
        .CLKBWRCLK(clkb),
        .DBITERR(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DBITERR_UNCONNECTED ),
        .DIADI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,dina}),
        .DIBDI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,dinb}),
        .DIPADIP({1'b0,1'b0,1'b0,1'b0}),
        .DIPBDIP({1'b0,1'b0,1'b0,1'b0}),
        .DOADO({\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOADO_UNCONNECTED [31:2],douta}),
        .DOBDO({\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOBDO_UNCONNECTED [31:2],doutb}),
        .DOPADOP(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPADOP_UNCONNECTED [3:0]),
        .DOPBDOP(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPBDOP_UNCONNECTED [3:0]),
        .ECCPARITY(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_ECCPARITY_UNCONNECTED [7:0]),
        .ENARDEN(ENA_I),
        .ENBWREN(ENB_I),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b0),
        .REGCEB(1'b0),
        .RSTRAMARSTRAM(ram_rstram_a),
        .RSTRAMB(ram_rstram_b),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SBITERR(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_SBITERR_UNCONNECTED ),
        .WEA({wea,wea,wea,wea}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,web,web,web,web}));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_wrapper" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_blk_mem_gen_prim_wrapper__parameterized9
   (douta,
    doutb,
    clka,
    clkb,
    ENA_I,
    ENB_I,
    ram_rstram_a,
    ram_rstram_b,
    addra,
    addrb,
    dina,
    dinb,
    wea,
    web);
  output [1:0]douta;
  output [1:0]doutb;
  input clka;
  input clkb;
  input ENA_I;
  input ENB_I;
  input ram_rstram_a;
  input ram_rstram_b;
  input [13:0]addra;
  input [13:0]addrb;
  input [1:0]dina;
  input [1:0]dinb;
  input [0:0]wea;
  input [0:0]web;

  wire ENA_I;
  wire ENB_I;
  wire [13:0]addra;
  wire [13:0]addrb;
  wire clka;
  wire clkb;
  wire [1:0]dina;
  wire [1:0]dinb;
  wire [1:0]douta;
  wire [1:0]doutb;
  wire ram_rstram_a;
  wire ram_rstram_b;
  wire [0:0]wea;
  wire [0:0]web;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTA_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTB_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_SBITERR_UNCONNECTED ;
  wire [31:2]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOADO_UNCONNECTED ;
  wire [31:2]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOBDO_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPADOP_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPBDOP_UNCONNECTED ;
  wire [7:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_RDADDRECC_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* bmm_info_memory_device = "[21:20][0:16383]" *) 
  RAMB36E1 #(
    .DOA_REG(0),
    .DOB_REG(0),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RAM_EXTENSION_A("NONE"),
    .RAM_EXTENSION_B("NONE"),
    .RAM_MODE("TDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(2),
    .READ_WIDTH_B(2),
    .RSTREG_PRIORITY_A("REGCE"),
    .RSTREG_PRIORITY_B("REGCE"),
    .SIM_COLLISION_CHECK("ALL"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("WRITE_FIRST"),
    .WRITE_MODE_B("WRITE_FIRST"),
    .WRITE_WIDTH_A(2),
    .WRITE_WIDTH_B(2)) 
    \DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram 
       (.ADDRARDADDR({1'b1,addra,1'b1}),
        .ADDRBWRADDR({1'b1,addrb,1'b1}),
        .CASCADEINA(1'b0),
        .CASCADEINB(1'b0),
        .CASCADEOUTA(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTA_UNCONNECTED ),
        .CASCADEOUTB(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_CASCADEOUTB_UNCONNECTED ),
        .CLKARDCLK(clka),
        .CLKBWRCLK(clkb),
        .DBITERR(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DBITERR_UNCONNECTED ),
        .DIADI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,dina}),
        .DIBDI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,dinb}),
        .DIPADIP({1'b0,1'b0,1'b0,1'b0}),
        .DIPBDIP({1'b0,1'b0,1'b0,1'b0}),
        .DOADO({\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOADO_UNCONNECTED [31:2],douta}),
        .DOBDO({\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOBDO_UNCONNECTED [31:2],doutb}),
        .DOPADOP(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPADOP_UNCONNECTED [3:0]),
        .DOPBDOP(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_DOPBDOP_UNCONNECTED [3:0]),
        .ECCPARITY(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_ECCPARITY_UNCONNECTED [7:0]),
        .ENARDEN(ENA_I),
        .ENBWREN(ENB_I),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b0),
        .REGCEB(1'b0),
        .RSTRAMARSTRAM(ram_rstram_a),
        .RSTRAMB(ram_rstram_b),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SBITERR(\NLW_DEVICE_7SERIES.WITH_BMM_INFO.TRUE_DP.SIMPLE_PRIM36.TDP_SP36_NO_ECC_ATTR.ram_SBITERR_UNCONNECTED ),
        .WEA({wea,wea,wea,wea}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,web,web,web,web}));
endmodule

module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_blk_mem_gen_top
   (douta,
    doutb,
    rsta_busy,
    rstb_busy,
    clkb,
    clka,
    addra,
    addrb,
    dina,
    dinb,
    wea,
    web,
    rsta,
    ena,
    rstb,
    enb);
  output [31:0]douta;
  output [31:0]doutb;
  output rsta_busy;
  output rstb_busy;
  input clkb;
  input clka;
  input [13:0]addra;
  input [13:0]addrb;
  input [31:0]dina;
  input [31:0]dinb;
  input [3:0]wea;
  input [3:0]web;
  input rsta;
  input ena;
  input rstb;
  input enb;

  wire [13:0]addra;
  wire [13:0]addrb;
  wire clka;
  wire clkb;
  wire [31:0]dina;
  wire [31:0]dinb;
  wire [31:0]douta;
  wire [31:0]doutb;
  wire ena;
  wire enb;
  wire rsta;
  wire rsta_busy;
  wire rstb;
  wire rstb_busy;
  wire [3:0]wea;
  wire [3:0]web;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_blk_mem_gen_generic_cstr \valid.cstr 
       (.addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(clkb),
        .dina(dina),
        .dinb(dinb),
        .douta(douta),
        .doutb(doutb),
        .ena(ena),
        .enb(enb),
        .rsta(rsta),
        .rsta_busy(rsta_busy),
        .rstb(rstb),
        .rstb_busy(rstb_busy),
        .wea(wea),
        .web(web));
endmodule

(* C_ADDRA_WIDTH = "32" *) (* C_ADDRB_WIDTH = "32" *) (* C_ALGORITHM = "1" *) 
(* C_AXI_ID_WIDTH = "4" *) (* C_AXI_SLAVE_TYPE = "0" *) (* C_AXI_TYPE = "1" *) 
(* C_BYTE_SIZE = "8" *) (* C_COMMON_CLK = "0" *) (* C_COUNT_18K_BRAM = "0" *) 
(* C_COUNT_36K_BRAM = "16" *) (* C_CTRL_ECC_ALGO = "NONE" *) (* C_DEFAULT_DATA = "0" *) 
(* C_DISABLE_WARN_BHV_COLL = "0" *) (* C_DISABLE_WARN_BHV_RANGE = "0" *) (* C_ELABORATION_DIR = "./" *) 
(* C_ENABLE_32BIT_ADDRESS = "1" *) (* C_EN_DEEPSLEEP_PIN = "0" *) (* C_EN_ECC_PIPE = "0" *) 
(* C_EN_RDADDRA_CHG = "0" *) (* C_EN_RDADDRB_CHG = "0" *) (* C_EN_SAFETY_CKT = "1" *) 
(* C_EN_SHUTDOWN_PIN = "0" *) (* C_EN_SLEEP_PIN = "0" *) (* C_EST_POWER_SUMMARY = "Estimated Power for IP     :     20.388 mW" *) 
(* C_FAMILY = "artix7" *) (* C_HAS_AXI_ID = "0" *) (* C_HAS_ENA = "1" *) 
(* C_HAS_ENB = "1" *) (* C_HAS_INJECTERR = "0" *) (* C_HAS_MEM_OUTPUT_REGS_A = "0" *) 
(* C_HAS_MEM_OUTPUT_REGS_B = "0" *) (* C_HAS_MUX_OUTPUT_REGS_A = "0" *) (* C_HAS_MUX_OUTPUT_REGS_B = "0" *) 
(* C_HAS_REGCEA = "0" *) (* C_HAS_REGCEB = "0" *) (* C_HAS_RSTA = "1" *) 
(* C_HAS_RSTB = "1" *) (* C_HAS_SOFTECC_INPUT_REGS_A = "0" *) (* C_HAS_SOFTECC_OUTPUT_REGS_B = "0" *) 
(* C_INITA_VAL = "0" *) (* C_INITB_VAL = "0" *) (* C_INIT_FILE = "bd_6665_lmb_bram_I_0.mem" *) 
(* C_INIT_FILE_NAME = "no_coe_file_loaded" *) (* C_INTERFACE_TYPE = "0" *) (* C_LOAD_INIT_FILE = "0" *) 
(* C_MEM_TYPE = "2" *) (* C_MUX_PIPELINE_STAGES = "0" *) (* C_PRIM_TYPE = "1" *) 
(* C_READ_DEPTH_A = "16384" *) (* C_READ_DEPTH_B = "16384" *) (* C_READ_LATENCY_A = "1" *) 
(* C_READ_LATENCY_B = "1" *) (* C_READ_WIDTH_A = "32" *) (* C_READ_WIDTH_B = "32" *) 
(* C_RSTRAM_A = "0" *) (* C_RSTRAM_B = "0" *) (* C_RST_PRIORITY_A = "CE" *) 
(* C_RST_PRIORITY_B = "CE" *) (* C_SIM_COLLISION_CHECK = "ALL" *) (* C_USE_BRAM_BLOCK = "1" *) 
(* C_USE_BYTE_WEA = "1" *) (* C_USE_BYTE_WEB = "1" *) (* C_USE_DEFAULT_DATA = "0" *) 
(* C_USE_ECC = "0" *) (* C_USE_SOFTECC = "0" *) (* C_USE_URAM = "0" *) 
(* C_WEA_WIDTH = "4" *) (* C_WEB_WIDTH = "4" *) (* C_WRITE_DEPTH_A = "16384" *) 
(* C_WRITE_DEPTH_B = "16384" *) (* C_WRITE_MODE_A = "WRITE_FIRST" *) (* C_WRITE_MODE_B = "WRITE_FIRST" *) 
(* C_WRITE_WIDTH_A = "32" *) (* C_WRITE_WIDTH_B = "32" *) (* C_XDEVICEFAMILY = "artix7" *) 
(* DowngradeIPIdentifiedWarnings = "yes" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_blk_mem_gen_v8_4_4
   (clka,
    rsta,
    ena,
    regcea,
    wea,
    addra,
    dina,
    douta,
    clkb,
    rstb,
    enb,
    regceb,
    web,
    addrb,
    dinb,
    doutb,
    injectsbiterr,
    injectdbiterr,
    eccpipece,
    sbiterr,
    dbiterr,
    rdaddrecc,
    sleep,
    deepsleep,
    shutdown,
    rsta_busy,
    rstb_busy,
    s_aclk,
    s_aresetn,
    s_axi_awid,
    s_axi_awaddr,
    s_axi_awlen,
    s_axi_awsize,
    s_axi_awburst,
    s_axi_awvalid,
    s_axi_awready,
    s_axi_wdata,
    s_axi_wstrb,
    s_axi_wlast,
    s_axi_wvalid,
    s_axi_wready,
    s_axi_bid,
    s_axi_bresp,
    s_axi_bvalid,
    s_axi_bready,
    s_axi_arid,
    s_axi_araddr,
    s_axi_arlen,
    s_axi_arsize,
    s_axi_arburst,
    s_axi_arvalid,
    s_axi_arready,
    s_axi_rid,
    s_axi_rdata,
    s_axi_rresp,
    s_axi_rlast,
    s_axi_rvalid,
    s_axi_rready,
    s_axi_injectsbiterr,
    s_axi_injectdbiterr,
    s_axi_sbiterr,
    s_axi_dbiterr,
    s_axi_rdaddrecc);
  input clka;
  input rsta;
  input ena;
  input regcea;
  input [3:0]wea;
  input [31:0]addra;
  input [31:0]dina;
  output [31:0]douta;
  input clkb;
  input rstb;
  input enb;
  input regceb;
  input [3:0]web;
  input [31:0]addrb;
  input [31:0]dinb;
  output [31:0]doutb;
  input injectsbiterr;
  input injectdbiterr;
  input eccpipece;
  output sbiterr;
  output dbiterr;
  output [31:0]rdaddrecc;
  input sleep;
  input deepsleep;
  input shutdown;
  output rsta_busy;
  output rstb_busy;
  input s_aclk;
  input s_aresetn;
  input [3:0]s_axi_awid;
  input [31:0]s_axi_awaddr;
  input [7:0]s_axi_awlen;
  input [2:0]s_axi_awsize;
  input [1:0]s_axi_awburst;
  input s_axi_awvalid;
  output s_axi_awready;
  input [31:0]s_axi_wdata;
  input [3:0]s_axi_wstrb;
  input s_axi_wlast;
  input s_axi_wvalid;
  output s_axi_wready;
  output [3:0]s_axi_bid;
  output [1:0]s_axi_bresp;
  output s_axi_bvalid;
  input s_axi_bready;
  input [3:0]s_axi_arid;
  input [31:0]s_axi_araddr;
  input [7:0]s_axi_arlen;
  input [2:0]s_axi_arsize;
  input [1:0]s_axi_arburst;
  input s_axi_arvalid;
  output s_axi_arready;
  output [3:0]s_axi_rid;
  output [31:0]s_axi_rdata;
  output [1:0]s_axi_rresp;
  output s_axi_rlast;
  output s_axi_rvalid;
  input s_axi_rready;
  input s_axi_injectsbiterr;
  input s_axi_injectdbiterr;
  output s_axi_sbiterr;
  output s_axi_dbiterr;
  output [31:0]s_axi_rdaddrecc;

  wire \<const0> ;
  wire [31:0]addra;
  wire [31:0]addrb;
  wire clka;
  wire clkb;
  wire [31:0]dina;
  wire [31:0]dinb;
  wire [31:0]douta;
  wire [31:0]doutb;
  wire ena;
  wire enb;
  wire rsta;
  wire rsta_busy;
  wire rstb;
  wire rstb_busy;
  wire [3:0]wea;
  wire [3:0]web;

  assign dbiterr = \<const0> ;
  assign rdaddrecc[31] = \<const0> ;
  assign rdaddrecc[30] = \<const0> ;
  assign rdaddrecc[29] = \<const0> ;
  assign rdaddrecc[28] = \<const0> ;
  assign rdaddrecc[27] = \<const0> ;
  assign rdaddrecc[26] = \<const0> ;
  assign rdaddrecc[25] = \<const0> ;
  assign rdaddrecc[24] = \<const0> ;
  assign rdaddrecc[23] = \<const0> ;
  assign rdaddrecc[22] = \<const0> ;
  assign rdaddrecc[21] = \<const0> ;
  assign rdaddrecc[20] = \<const0> ;
  assign rdaddrecc[19] = \<const0> ;
  assign rdaddrecc[18] = \<const0> ;
  assign rdaddrecc[17] = \<const0> ;
  assign rdaddrecc[16] = \<const0> ;
  assign rdaddrecc[15] = \<const0> ;
  assign rdaddrecc[14] = \<const0> ;
  assign rdaddrecc[13] = \<const0> ;
  assign rdaddrecc[12] = \<const0> ;
  assign rdaddrecc[11] = \<const0> ;
  assign rdaddrecc[10] = \<const0> ;
  assign rdaddrecc[9] = \<const0> ;
  assign rdaddrecc[8] = \<const0> ;
  assign rdaddrecc[7] = \<const0> ;
  assign rdaddrecc[6] = \<const0> ;
  assign rdaddrecc[5] = \<const0> ;
  assign rdaddrecc[4] = \<const0> ;
  assign rdaddrecc[3] = \<const0> ;
  assign rdaddrecc[2] = \<const0> ;
  assign rdaddrecc[1] = \<const0> ;
  assign rdaddrecc[0] = \<const0> ;
  assign s_axi_arready = \<const0> ;
  assign s_axi_awready = \<const0> ;
  assign s_axi_bid[3] = \<const0> ;
  assign s_axi_bid[2] = \<const0> ;
  assign s_axi_bid[1] = \<const0> ;
  assign s_axi_bid[0] = \<const0> ;
  assign s_axi_bresp[1] = \<const0> ;
  assign s_axi_bresp[0] = \<const0> ;
  assign s_axi_bvalid = \<const0> ;
  assign s_axi_dbiterr = \<const0> ;
  assign s_axi_rdaddrecc[31] = \<const0> ;
  assign s_axi_rdaddrecc[30] = \<const0> ;
  assign s_axi_rdaddrecc[29] = \<const0> ;
  assign s_axi_rdaddrecc[28] = \<const0> ;
  assign s_axi_rdaddrecc[27] = \<const0> ;
  assign s_axi_rdaddrecc[26] = \<const0> ;
  assign s_axi_rdaddrecc[25] = \<const0> ;
  assign s_axi_rdaddrecc[24] = \<const0> ;
  assign s_axi_rdaddrecc[23] = \<const0> ;
  assign s_axi_rdaddrecc[22] = \<const0> ;
  assign s_axi_rdaddrecc[21] = \<const0> ;
  assign s_axi_rdaddrecc[20] = \<const0> ;
  assign s_axi_rdaddrecc[19] = \<const0> ;
  assign s_axi_rdaddrecc[18] = \<const0> ;
  assign s_axi_rdaddrecc[17] = \<const0> ;
  assign s_axi_rdaddrecc[16] = \<const0> ;
  assign s_axi_rdaddrecc[15] = \<const0> ;
  assign s_axi_rdaddrecc[14] = \<const0> ;
  assign s_axi_rdaddrecc[13] = \<const0> ;
  assign s_axi_rdaddrecc[12] = \<const0> ;
  assign s_axi_rdaddrecc[11] = \<const0> ;
  assign s_axi_rdaddrecc[10] = \<const0> ;
  assign s_axi_rdaddrecc[9] = \<const0> ;
  assign s_axi_rdaddrecc[8] = \<const0> ;
  assign s_axi_rdaddrecc[7] = \<const0> ;
  assign s_axi_rdaddrecc[6] = \<const0> ;
  assign s_axi_rdaddrecc[5] = \<const0> ;
  assign s_axi_rdaddrecc[4] = \<const0> ;
  assign s_axi_rdaddrecc[3] = \<const0> ;
  assign s_axi_rdaddrecc[2] = \<const0> ;
  assign s_axi_rdaddrecc[1] = \<const0> ;
  assign s_axi_rdaddrecc[0] = \<const0> ;
  assign s_axi_rdata[31] = \<const0> ;
  assign s_axi_rdata[30] = \<const0> ;
  assign s_axi_rdata[29] = \<const0> ;
  assign s_axi_rdata[28] = \<const0> ;
  assign s_axi_rdata[27] = \<const0> ;
  assign s_axi_rdata[26] = \<const0> ;
  assign s_axi_rdata[25] = \<const0> ;
  assign s_axi_rdata[24] = \<const0> ;
  assign s_axi_rdata[23] = \<const0> ;
  assign s_axi_rdata[22] = \<const0> ;
  assign s_axi_rdata[21] = \<const0> ;
  assign s_axi_rdata[20] = \<const0> ;
  assign s_axi_rdata[19] = \<const0> ;
  assign s_axi_rdata[18] = \<const0> ;
  assign s_axi_rdata[17] = \<const0> ;
  assign s_axi_rdata[16] = \<const0> ;
  assign s_axi_rdata[15] = \<const0> ;
  assign s_axi_rdata[14] = \<const0> ;
  assign s_axi_rdata[13] = \<const0> ;
  assign s_axi_rdata[12] = \<const0> ;
  assign s_axi_rdata[11] = \<const0> ;
  assign s_axi_rdata[10] = \<const0> ;
  assign s_axi_rdata[9] = \<const0> ;
  assign s_axi_rdata[8] = \<const0> ;
  assign s_axi_rdata[7] = \<const0> ;
  assign s_axi_rdata[6] = \<const0> ;
  assign s_axi_rdata[5] = \<const0> ;
  assign s_axi_rdata[4] = \<const0> ;
  assign s_axi_rdata[3] = \<const0> ;
  assign s_axi_rdata[2] = \<const0> ;
  assign s_axi_rdata[1] = \<const0> ;
  assign s_axi_rdata[0] = \<const0> ;
  assign s_axi_rid[3] = \<const0> ;
  assign s_axi_rid[2] = \<const0> ;
  assign s_axi_rid[1] = \<const0> ;
  assign s_axi_rid[0] = \<const0> ;
  assign s_axi_rlast = \<const0> ;
  assign s_axi_rresp[1] = \<const0> ;
  assign s_axi_rresp[0] = \<const0> ;
  assign s_axi_rvalid = \<const0> ;
  assign s_axi_sbiterr = \<const0> ;
  assign s_axi_wready = \<const0> ;
  assign sbiterr = \<const0> ;
  GND GND
       (.G(\<const0> ));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_blk_mem_gen_v8_4_4_synth inst_blk_mem_gen
       (.addra(addra[15:2]),
        .addrb(addrb[15:2]),
        .clka(clka),
        .clkb(clkb),
        .dina(dina),
        .dinb(dinb),
        .douta(douta),
        .doutb(doutb),
        .ena(ena),
        .enb(enb),
        .rsta(rsta),
        .rsta_busy(rsta_busy),
        .rstb(rstb),
        .rstb_busy(rstb_busy),
        .wea(wea),
        .web(web));
endmodule

module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_blk_mem_gen_v8_4_4_synth
   (douta,
    doutb,
    rsta_busy,
    rstb_busy,
    clkb,
    clka,
    addra,
    addrb,
    dina,
    dinb,
    wea,
    web,
    rsta,
    ena,
    rstb,
    enb);
  output [31:0]douta;
  output [31:0]doutb;
  output rsta_busy;
  output rstb_busy;
  input clkb;
  input clka;
  input [13:0]addra;
  input [13:0]addrb;
  input [31:0]dina;
  input [31:0]dinb;
  input [3:0]wea;
  input [3:0]web;
  input rsta;
  input ena;
  input rstb;
  input enb;

  wire [13:0]addra;
  wire [13:0]addrb;
  wire clka;
  wire clkb;
  wire [31:0]dina;
  wire [31:0]dinb;
  wire [31:0]douta;
  wire [31:0]doutb;
  wire ena;
  wire enb;
  wire rsta;
  wire rsta_busy;
  wire rstb;
  wire rstb_busy;
  wire [3:0]wea;
  wire [3:0]web;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_blk_mem_gen_top \gnbram.gnative_mem_map_bmg.native_mem_map_blk_mem_gen 
       (.addra(addra),
        .addrb(addrb),
        .clka(clka),
        .clkb(clkb),
        .dina(dina),
        .dinb(dinb),
        .douta(douta),
        .doutb(doutb),
        .ena(ena),
        .enb(enb),
        .rsta(rsta),
        .rsta_busy(rsta_busy),
        .rstb(rstb),
        .rstb_busy(rstb_busy),
        .wea(wea),
        .web(web));
endmodule

module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_instr_mux
   (Y,
    Instr,
    LOCKSTEP_Master_Out);
  output [0:31]Y;
  input [0:31]Instr;
  input [32:0]LOCKSTEP_Master_Out;

  wire [0:31]Instr;
  wire [32:0]LOCKSTEP_Master_Out;
  wire [0:31]Y;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_mux_bus \Mux_LD.LD_inst 
       (.Instr(Instr),
        .LOCKSTEP_Master_Out(LOCKSTEP_Master_Out),
        .Y(Y));
endmodule

module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDR
   (\Using_FPGA.Native_0 ,
    inHibit_EX_reg,
    buffer_Full,
    E,
    mul_Executing_reg,
    dbg_pause_reg,
    S,
    D_33,
    Clk,
    inHibit_EX,
    IReady1_out,
    nonvalid_IFetch_n_reg,
    nonvalid_IFetch_n_reg_0,
    nonvalid_IFetch_n_reg_1,
    \Using_FPGA.Native_1 ,
    take_Intr_Now_III,
    dbg_pause,
    \Size_17to32.imm_Reg_reg[15] ,
    mul_Executing,
    ex_Valid_reg,
    ex_Valid_reg_0,
    jump_Carry2,
    trace_jump_taken_i_reg);
  output \Using_FPGA.Native_0 ;
  output inHibit_EX_reg;
  output buffer_Full;
  output [0:0]E;
  output mul_Executing_reg;
  output dbg_pause_reg;
  input S;
  input D_33;
  input Clk;
  input inHibit_EX;
  input IReady1_out;
  input nonvalid_IFetch_n_reg;
  input nonvalid_IFetch_n_reg_0;
  input nonvalid_IFetch_n_reg_1;
  input \Using_FPGA.Native_1 ;
  input take_Intr_Now_III;
  input dbg_pause;
  input \Size_17to32.imm_Reg_reg[15] ;
  input mul_Executing;
  input ex_Valid_reg;
  input ex_Valid_reg_0;
  input jump_Carry2;
  input trace_jump_taken_i_reg;

  wire Clk;
  wire D_33;
  wire [0:0]E;
  wire IReady1_out;
  wire S;
  wire \Size_17to32.imm_Reg_reg[15] ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire buffer_Full;
  wire dbg_pause;
  wire dbg_pause_reg;
  wire ex_Valid_reg;
  wire ex_Valid_reg_0;
  wire inHibit_EX;
  wire inHibit_EX_reg;
  wire jump_Carry2;
  wire mul_Executing;
  wire mul_Executing_reg;
  wire nonvalid_IFetch_n_i_2_n_0;
  wire nonvalid_IFetch_n_reg;
  wire nonvalid_IFetch_n_reg_0;
  wire nonvalid_IFetch_n_reg_1;
  wire take_Intr_Now_III;
  wire trace_jump_taken_i_reg;

  (* SOFT_HLUTNM = "soft_lutpair56" *) 
  LUT4 #(
    .INIT(16'h0004)) 
    \Size_17to32.imm_Reg[0]_i_1 
       (.I0(take_Intr_Now_III),
        .I1(\Using_FPGA.Native_0 ),
        .I2(dbg_pause),
        .I3(\Size_17to32.imm_Reg_reg[15] ),
        .O(E));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(D_33),
        .Q(\Using_FPGA.Native_0 ),
        .R(S));
  LUT2 #(
    .INIT(4'h8)) 
    \Using_FPGA.Native_i_1__1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .O(buffer_Full));
  LUT3 #(
    .INIT(8'h4F)) 
    \Using_FPGA.Native_i_1__60 
       (.I0(dbg_pause),
        .I1(\Using_FPGA.Native_0 ),
        .I2(trace_jump_taken_i_reg),
        .O(dbg_pause_reg));
  LUT6 #(
    .INIT(64'hAEFFAEAEAEAEAEAE)) 
    ex_Valid_i_3
       (.I0(mul_Executing),
        .I1(ex_Valid_reg),
        .I2(ex_Valid_reg_0),
        .I3(nonvalid_IFetch_n_i_2_n_0),
        .I4(jump_Carry2),
        .I5(trace_jump_taken_i_reg),
        .O(mul_Executing_reg));
  LUT6 #(
    .INIT(64'hFF11FFFFF0F0F0F0)) 
    nonvalid_IFetch_n_i_1
       (.I0(nonvalid_IFetch_n_i_2_n_0),
        .I1(inHibit_EX),
        .I2(IReady1_out),
        .I3(nonvalid_IFetch_n_reg),
        .I4(nonvalid_IFetch_n_reg_0),
        .I5(nonvalid_IFetch_n_reg_1),
        .O(inHibit_EX_reg));
  (* SOFT_HLUTNM = "soft_lutpair56" *) 
  LUT2 #(
    .INIT(4'h2)) 
    nonvalid_IFetch_n_i_2
       (.I0(\Using_FPGA.Native_0 ),
        .I1(dbg_pause),
        .O(nonvalid_IFetch_n_i_2_n_0));
endmodule

module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE
   (carry_In,
    sync_reset,
    \Using_FPGA.Native_0 ,
    correct_Carry_II,
    Clk);
  output carry_In;
  input sync_reset;
  input \Using_FPGA.Native_0 ;
  input correct_Carry_II;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire carry_In;
  wire correct_Carry_II;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(\Using_FPGA.Native_0 ),
        .D(correct_Carry_II),
        .Q(carry_In),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_FDRE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_595
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_I,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_I;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_I;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_I),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_FDRE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_596
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_Reg,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_Reg;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_Reg;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_Reg),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_FDRE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_599
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_I,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_I;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_I;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_I),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_FDRE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_600
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_Reg,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_Reg;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_Reg;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_Reg),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_FDRE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_603
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_I,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_I;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_I;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_I),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_FDRE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_604
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_Reg,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_Reg;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_Reg;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_Reg),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_FDRE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_607
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_I,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_I;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_I;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_I),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_FDRE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_608
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_Reg,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_Reg;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_Reg;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_Reg),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_FDRE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_61
   (alu_Op,
    sync_reset,
    \Using_FPGA.Native_0 ,
    D_32,
    Clk);
  output [0:0]alu_Op;
  input sync_reset;
  input \Using_FPGA.Native_0 ;
  input D_32;
  input Clk;

  wire Clk;
  wire D_32;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]alu_Op;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(\Using_FPGA.Native_0 ),
        .D(D_32),
        .Q(alu_Op),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_FDRE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_611
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_I,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_I;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_I;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_I),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_FDRE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_612
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_Reg,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_Reg;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_Reg;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_Reg),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_FDRE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_615
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_I,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_I;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_I;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_I),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_FDRE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_616
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_Reg,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_Reg;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_Reg;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_Reg),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_FDRE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_619
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_I,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_I;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_I;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_I),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_FDRE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_62
   (alu_Op,
    sync_reset,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Clk);
  output [0:0]alu_Op;
  input sync_reset;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire [0:0]alu_Op;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(\Using_FPGA.Native_0 ),
        .D(\Using_FPGA.Native_1 ),
        .Q(alu_Op),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_FDRE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_620
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_Reg,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_Reg;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_Reg;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_Reg),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_FDRE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_623
   (Op1_Logic,
    sync_reset,
    of_PipeRun,
    op1_I,
    Clk);
  output Op1_Logic;
  input sync_reset;
  input of_PipeRun;
  input op1_I;
  input Clk;

  wire Clk;
  wire Op1_Logic;
  wire of_PipeRun;
  wire op1_I;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_I),
        .Q(Op1_Logic),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_FDRE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_624
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_Reg,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_Reg;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_Reg;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_Reg),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_FDRE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_627
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_I,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_I;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_I;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_I),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_FDRE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_628
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_Reg,
    Clk,
    \Using_FPGA.Native_1 );
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_Reg;
  input Clk;
  input \Using_FPGA.Native_1 ;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_n_0 ;
  wire of_PipeRun;
  wire op1_Reg;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_Reg),
        .Q(\Using_FPGA.Native_n_0 ),
        .R(sync_reset));
  LUT2 #(
    .INIT(4'h1)) 
    \Using_FPGA.Native_i_1 
       (.I0(\Using_FPGA.Native_n_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_FDRE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_631
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_I,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_I;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_I;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_I),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_FDRE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_632
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_Reg,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_Reg;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_Reg;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_Reg),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_FDRE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_635
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_I,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_I;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_I;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_I),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_FDRE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_636
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_Reg,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_Reg;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_Reg;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_Reg),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_FDRE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_639
   (Shifted,
    sync_reset,
    of_PipeRun,
    op1_I,
    Clk);
  output Shifted;
  input sync_reset;
  input of_PipeRun;
  input op1_I;
  input Clk;

  wire Clk;
  wire Shifted;
  wire of_PipeRun;
  wire op1_I;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_I),
        .Q(Shifted),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_FDRE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_64
   (force1,
    R,
    \Using_FPGA.Native_0 ,
    force1_i27_out,
    Clk);
  output force1;
  input R;
  input \Using_FPGA.Native_0 ;
  input force1_i27_out;
  input Clk;

  wire Clk;
  wire R;
  wire \Using_FPGA.Native_0 ;
  wire force1;
  wire force1_i27_out;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(\Using_FPGA.Native_0 ),
        .D(force1_i27_out),
        .Q(force1),
        .R(R));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_FDRE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_640
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_Reg,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_Reg;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_Reg;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_Reg),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_FDRE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_643
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_I,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_I;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_I;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_I),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_FDRE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_644
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_Reg,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_Reg;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_Reg;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_Reg),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_FDRE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_647
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_I,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_I;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_I;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_I),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_FDRE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_648
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_Reg,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_Reg;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_Reg;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_Reg),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_FDRE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_65
   (force2,
    R,
    \Using_FPGA.Native_0 ,
    force2_i,
    Clk);
  output force2;
  input R;
  input \Using_FPGA.Native_0 ;
  input force2_i;
  input Clk;

  wire Clk;
  wire R;
  wire \Using_FPGA.Native_0 ;
  wire force2;
  wire force2_i;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(\Using_FPGA.Native_0 ),
        .D(force2_i),
        .Q(force2),
        .R(R));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_FDRE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_651
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_I,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_I;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_I;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_I),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_FDRE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_652
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_Reg,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_Reg;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_Reg;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_Reg),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_FDRE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_655
   (\Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    sync_reset,
    of_PipeRun,
    op1_I,
    Clk,
    \Using_FPGA.Native_2 ,
    sext8);
  output \Using_FPGA.Native_0 ;
  output \Using_FPGA.Native_1 ;
  input sync_reset;
  input of_PipeRun;
  input op1_I;
  input Clk;
  input \Using_FPGA.Native_2 ;
  input sext8;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire of_PipeRun;
  wire op1_I;
  wire sext8;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_I),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
  LUT3 #(
    .INIT(8'h20)) 
    \Using_FPGA.Native_i_1__67 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_2 ),
        .I2(sext8),
        .O(\Using_FPGA.Native_1 ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_FDRE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_656
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_Reg,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_Reg;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_Reg;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_Reg),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_FDRE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_659
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_I,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_I;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_I;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_I),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_FDRE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_66
   (force_Val1,
    R,
    \Using_FPGA.Native_0 ,
    force_Val1_i25_out,
    Clk);
  output force_Val1;
  input R;
  input \Using_FPGA.Native_0 ;
  input force_Val1_i25_out;
  input Clk;

  wire Clk;
  wire R;
  wire \Using_FPGA.Native_0 ;
  wire force_Val1;
  wire force_Val1_i25_out;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(\Using_FPGA.Native_0 ),
        .D(force_Val1_i25_out),
        .Q(force_Val1),
        .R(R));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_FDRE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_660
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_Reg,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_Reg;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_Reg;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_Reg),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_FDRE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_663
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_I,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_I;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_I;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_I),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_FDRE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_664
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_Reg,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_Reg;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_Reg;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_Reg),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_FDRE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_667
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_I,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_I;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_I;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_I),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_FDRE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_668
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_Reg,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_Reg;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_Reg;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_Reg),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_FDRE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_671
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_I,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_I;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_I;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_I),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_FDRE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_672
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_Reg,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_Reg;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_Reg;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_Reg),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_FDRE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_675
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_I,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_I;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_I;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_I),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_FDRE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_676
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_Reg,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_Reg;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_Reg;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_Reg),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_FDRE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_679
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_I,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_I;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_I;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_I),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_FDRE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_680
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_Reg,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_Reg;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_Reg;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_Reg),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_FDRE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_683
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_I,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_I;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_I;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_I),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_FDRE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_684
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_Reg,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_Reg;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_Reg;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_Reg),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_FDRE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_687
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_I,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_I;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_I;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_I),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_FDRE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_688
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_Reg,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_Reg;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_Reg;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_Reg),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_FDRE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_691
   (\Using_FPGA.Native_0 ,
    Sext,
    sync_reset,
    of_PipeRun,
    op1_I,
    Clk,
    sext16,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    sext8);
  output \Using_FPGA.Native_0 ;
  output Sext;
  input sync_reset;
  input of_PipeRun;
  input op1_I;
  input Clk;
  input sext16;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input sext8;

  wire Clk;
  wire Sext;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire of_PipeRun;
  wire op1_I;
  wire sext16;
  wire sext8;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_I),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
  LUT5 #(
    .INIT(32'h0B080808)) 
    \Using_FPGA.Native_i_1__66 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(sext16),
        .I2(\Using_FPGA.Native_1 ),
        .I3(\Using_FPGA.Native_2 ),
        .I4(sext8),
        .O(Sext));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_FDRE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_692
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_Reg,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_Reg;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_Reg;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_Reg),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_FDRE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_695
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_I,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_I;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_I;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_I),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_FDRE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_696
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_Reg,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_Reg;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_Reg;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_Reg),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_FDRE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_699
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_I,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_I;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_I;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_I),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_FDRE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_700
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_Reg,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_Reg;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_Reg;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_Reg),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_FDRE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_703
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_I,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_I;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_I;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_I),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_FDRE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_704
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_Reg,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_Reg;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_Reg;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_Reg),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_FDRE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_707
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_I,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_I;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_I;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_I),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_FDRE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_708
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_Reg,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_Reg;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_Reg;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_Reg),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_FDRE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_711
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_I,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_I;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_I;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_I),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_FDRE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_712
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_Reg,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_Reg;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_Reg;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_Reg),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_FDRE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_715
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_I,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_I;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_I;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_I),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_FDRE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_716
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_Reg,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_Reg;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_Reg;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_Reg),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_FDRE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_719
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_I,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_I;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_I;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_I),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_FDRE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_720
   (\Using_FPGA.Native_0 ,
    sync_reset,
    of_PipeRun,
    op1_Reg,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input of_PipeRun;
  input op1_Reg;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire of_PipeRun;
  wire op1_Reg;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(of_PipeRun),
        .D(op1_Reg),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_FDRE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_73
   (reg_Test_Equal_N,
    R,
    \Using_FPGA.Native_0 ,
    Reg_Test_Equal_N_i7_out,
    Clk);
  output reg_Test_Equal_N;
  input R;
  input \Using_FPGA.Native_0 ;
  input Reg_Test_Equal_N_i7_out;
  input Clk;

  wire Clk;
  wire R;
  wire Reg_Test_Equal_N_i7_out;
  wire \Using_FPGA.Native_0 ;
  wire reg_Test_Equal_N;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(\Using_FPGA.Native_0 ),
        .D(Reg_Test_Equal_N_i7_out),
        .Q(reg_Test_Equal_N),
        .R(R));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_FDRE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_79
   (use_Reg_Neg_DI,
    R,
    \Using_FPGA.Native_0 ,
    use_Reg_Neg_DI_i24_out,
    Clk);
  output use_Reg_Neg_DI;
  input R;
  input \Using_FPGA.Native_0 ;
  input use_Reg_Neg_DI_i24_out;
  input Clk;

  wire Clk;
  wire R;
  wire \Using_FPGA.Native_0 ;
  wire use_Reg_Neg_DI;
  wire use_Reg_Neg_DI_i24_out;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(\Using_FPGA.Native_0 ),
        .D(use_Reg_Neg_DI_i24_out),
        .Q(use_Reg_Neg_DI),
        .R(R));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_FDRE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRE_80
   (use_Reg_Neg_S,
    R,
    \Using_FPGA.Native_0 ,
    use_Reg_Neg_S_i26_out,
    Clk);
  output use_Reg_Neg_S;
  input R;
  input \Using_FPGA.Native_0 ;
  input use_Reg_Neg_S_i26_out;
  input Clk;

  wire Clk;
  wire R;
  wire \Using_FPGA.Native_0 ;
  wire use_Reg_Neg_S;
  wire use_Reg_Neg_S_i26_out;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(\Using_FPGA.Native_0 ),
        .D(use_Reg_Neg_S_i26_out),
        .Q(use_Reg_Neg_S),
        .R(R));
endmodule

module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRSE
   (\Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Serial_Dbg_Intf.if_debug_ready_i_reg ,
    Clk,
    S_1,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    load_Store_i,
    \Using_FPGA.Native_4 ,
    \Using_FPGA.Native_5 ,
    sync_reset,
    Reset_Mode,
    \data_rd_reg_reg[32] ,
    \data_rd_reg_reg[32]_0 ,
    Valid_Instr_i,
    \data_rd_reg_reg[32]_1 ,
    \data_rd_reg_reg[32]_2 );
  output \Using_FPGA.Native_0 ;
  output \Using_FPGA.Native_1 ;
  output \Serial_Dbg_Intf.if_debug_ready_i_reg ;
  input Clk;
  input S_1;
  input \Using_FPGA.Native_2 ;
  input \Using_FPGA.Native_3 ;
  input load_Store_i;
  input \Using_FPGA.Native_4 ;
  input \Using_FPGA.Native_5 ;
  input sync_reset;
  input [0:1]Reset_Mode;
  input \data_rd_reg_reg[32] ;
  input \data_rd_reg_reg[32]_0 ;
  input Valid_Instr_i;
  input \data_rd_reg_reg[32]_1 ;
  input \data_rd_reg_reg[32]_2 ;

  wire Clk;
  wire [0:1]Reset_Mode;
  wire S_1;
  wire \Serial_Dbg_Intf.if_debug_ready_i_reg ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_5 ;
  wire \Using_FPGA.Native_i_1__69_n_0 ;
  wire \Using_FPGA.Native_i_2__52_n_0 ;
  wire Valid_Instr_i;
  wire \data_rd_reg_reg[32] ;
  wire \data_rd_reg_reg[32]_0 ;
  wire \data_rd_reg_reg[32]_1 ;
  wire \data_rd_reg_reg[32]_2 ;
  wire load_Store_i;
  wire sync_reset;

  (* SOFT_HLUTNM = "soft_lutpair73" *) 
  LUT2 #(
    .INIT(4'hB)) 
    Pause_Ack_i_2
       (.I0(\Using_FPGA.Native_0 ),
        .I1(load_Store_i),
        .O(\Using_FPGA.Native_1 ));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* IS_CE_INVERTED = "1'b0" *) 
  (* IS_S_INVERTED = "1'b0" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_i_2__52_n_0 ),
        .Q(\Using_FPGA.Native_0 ),
        .R(\Using_FPGA.Native_i_1__69_n_0 ));
  LUT5 #(
    .INIT(32'hEEAEAEEE)) 
    \Using_FPGA.Native_i_1__69 
       (.I0(\Using_FPGA.Native_4 ),
        .I1(\Using_FPGA.Native_5 ),
        .I2(sync_reset),
        .I3(Reset_Mode[1]),
        .I4(Reset_Mode[0]),
        .O(\Using_FPGA.Native_i_1__69_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair73" *) 
  LUT4 #(
    .INIT(16'hFEAE)) 
    \Using_FPGA.Native_i_2__52 
       (.I0(S_1),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Using_FPGA.Native_2 ),
        .I3(\Using_FPGA.Native_3 ),
        .O(\Using_FPGA.Native_i_2__52_n_0 ));
  LUT6 #(
    .INIT(64'hFFFF5554FFFCFFFC)) 
    \data_rd_reg[32]_i_2 
       (.I0(\data_rd_reg_reg[32] ),
        .I1(\data_rd_reg_reg[32]_0 ),
        .I2(Valid_Instr_i),
        .I3(\Using_FPGA.Native_0 ),
        .I4(\data_rd_reg_reg[32]_1 ),
        .I5(\data_rd_reg_reg[32]_2 ),
        .O(\Serial_Dbg_Intf.if_debug_ready_i_reg ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_FDRSE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRSE_18
   (\Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    S,
    \Use_Async_Reset.sync_reset_reg ,
    Clk,
    dbg_stop_1,
    trig_out_0_synced_1,
    trig_out_0_synced,
    Dbg_Stop,
    \Area_Debug_Control.dbg_stop_Detected_reg ,
    S_1,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    sync_reset,
    jump,
    \Using_FPGA.Native_4 ,
    \Using_FPGA.Native_5 ,
    Reset_Mode);
  output \Using_FPGA.Native_0 ;
  output \Using_FPGA.Native_1 ;
  output S;
  output \Use_Async_Reset.sync_reset_reg ;
  input Clk;
  input dbg_stop_1;
  input trig_out_0_synced_1;
  input trig_out_0_synced;
  input Dbg_Stop;
  input \Area_Debug_Control.dbg_stop_Detected_reg ;
  input S_1;
  input \Using_FPGA.Native_2 ;
  input \Using_FPGA.Native_3 ;
  input sync_reset;
  input jump;
  input \Using_FPGA.Native_4 ;
  input \Using_FPGA.Native_5 ;
  input [0:1]Reset_Mode;

  wire \Area_Debug_Control.dbg_stop_Detected_reg ;
  wire Clk;
  wire Dbg_Stop;
  wire [0:1]Reset_Mode;
  wire S;
  wire S_1;
  wire \Use_Async_Reset.sync_reset_reg ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_5 ;
  wire \Using_FPGA.Native_i_1__70_n_0 ;
  wire \Using_FPGA.Native_i_2__51_n_0 ;
  wire dbg_stop_1;
  wire jump;
  wire sync_reset;
  wire trig_out_0_synced;
  wire trig_out_0_synced_1;

  LUT6 #(
    .INIT(64'h5555555515110500)) 
    \Area_Debug_Control.dbg_stop_Detected_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(dbg_stop_1),
        .I2(trig_out_0_synced_1),
        .I3(trig_out_0_synced),
        .I4(Dbg_Stop),
        .I5(\Area_Debug_Control.dbg_stop_Detected_reg ),
        .O(\Using_FPGA.Native_1 ));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* IS_CE_INVERTED = "1'b0" *) 
  (* IS_S_INVERTED = "1'b0" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_i_2__51_n_0 ),
        .Q(\Using_FPGA.Native_0 ),
        .R(\Using_FPGA.Native_i_1__70_n_0 ));
  LUT3 #(
    .INIT(8'hFE)) 
    \Using_FPGA.Native_i_1__2 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(sync_reset),
        .I2(jump),
        .O(S));
  LUT5 #(
    .INIT(32'hEEAEAEEE)) 
    \Using_FPGA.Native_i_1__70 
       (.I0(\Using_FPGA.Native_4 ),
        .I1(\Using_FPGA.Native_5 ),
        .I2(sync_reset),
        .I3(Reset_Mode[1]),
        .I4(Reset_Mode[0]),
        .O(\Using_FPGA.Native_i_1__70_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair74" *) 
  LUT4 #(
    .INIT(16'hFEAE)) 
    \Using_FPGA.Native_i_2__51 
       (.I0(S_1),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Using_FPGA.Native_2 ),
        .I3(\Using_FPGA.Native_3 ),
        .O(\Using_FPGA.Native_i_2__51_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair74" *) 
  LUT2 #(
    .INIT(4'hE)) 
    using_Imm_i_2
       (.I0(sync_reset),
        .I1(\Using_FPGA.Native_0 ),
        .O(\Use_Async_Reset.sync_reset_reg ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_FDRSE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRSE_19
   (\Using_FPGA.Native_0 ,
    S_1,
    \Area_Debug_Control.normal_stop_cmd_hold_reg ,
    trace_exception_taken_i_reg,
    \Use_Async_Reset.sync_reset_reg ,
    start_single_step_reg,
    \Use_Async_Reset.sync_reset_reg_0 ,
    \Using_FPGA.Native_1 ,
    E,
    Clk,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    exception_reg,
    exception_reg_0,
    force_stop_overrun,
    D,
    ok_To_Stop,
    normal_stop_cmd_hold,
    normal_stop_cmd_i,
    \Using_FPGA.Native_4 ,
    \Using_FPGA.Native_5 ,
    dbg_clean_stop,
    \Using_FPGA.Native_6 ,
    Sleep_Out,
    saved_reset_mode_sleep,
    saved_reset_mode_dbg_halt,
    \Using_FPGA.Native_7 ,
    sync_reset,
    Reset_Mode,
    saved_reset_mode_sleep_1,
    \Using_FPGA.Native_8 ,
    \Using_FPGA.Native_9 ,
    Q,
    \data_rd_reg_reg[31] ,
    \data_rd_reg_reg[31]_0 ,
    \data_rd_reg_reg[30] ,
    PC_EX_i,
    \data_rd_reg_reg[31]_1 );
  output \Using_FPGA.Native_0 ;
  output S_1;
  output \Area_Debug_Control.normal_stop_cmd_hold_reg ;
  output trace_exception_taken_i_reg;
  output \Use_Async_Reset.sync_reset_reg ;
  output start_single_step_reg;
  output \Use_Async_Reset.sync_reset_reg_0 ;
  output [29:0]\Using_FPGA.Native_1 ;
  output [0:0]E;
  input Clk;
  input \Using_FPGA.Native_2 ;
  input \Using_FPGA.Native_3 ;
  input [31:0]exception_reg;
  input exception_reg_0;
  input force_stop_overrun;
  input [0:0]D;
  input ok_To_Stop;
  input normal_stop_cmd_hold;
  input normal_stop_cmd_i;
  input \Using_FPGA.Native_4 ;
  input \Using_FPGA.Native_5 ;
  input dbg_clean_stop;
  input \Using_FPGA.Native_6 ;
  input Sleep_Out;
  input saved_reset_mode_sleep;
  input saved_reset_mode_dbg_halt;
  input \Using_FPGA.Native_7 ;
  input sync_reset;
  input [0:1]Reset_Mode;
  input saved_reset_mode_sleep_1;
  input \Using_FPGA.Native_8 ;
  input \Using_FPGA.Native_9 ;
  input [0:0]Q;
  input \data_rd_reg_reg[31] ;
  input \data_rd_reg_reg[31]_0 ;
  input [0:0]\data_rd_reg_reg[30] ;
  input [11:0]PC_EX_i;
  input \data_rd_reg_reg[31]_1 ;

  wire \Area_Debug_Control.normal_stop_cmd_hold_reg ;
  wire Clk;
  wire [0:0]D;
  wire [0:0]E;
  wire [11:0]PC_EX_i;
  wire [0:0]Q;
  wire [0:1]Reset_Mode;
  wire S_1;
  wire Sleep_Out;
  wire \Use_Async_Reset.sync_reset_reg ;
  wire \Use_Async_Reset.sync_reset_reg_0 ;
  wire \Using_FPGA.Native_0 ;
  wire [29:0]\Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_5 ;
  wire \Using_FPGA.Native_6 ;
  wire \Using_FPGA.Native_7 ;
  wire \Using_FPGA.Native_8 ;
  wire \Using_FPGA.Native_9 ;
  wire \Using_FPGA.Native_i_1__71_n_0 ;
  wire \Using_FPGA.Native_i_2__53_n_0 ;
  wire [0:0]\data_rd_reg_reg[30] ;
  wire \data_rd_reg_reg[31] ;
  wire \data_rd_reg_reg[31]_0 ;
  wire \data_rd_reg_reg[31]_1 ;
  wire dbg_clean_stop;
  wire [31:0]exception_reg;
  wire exception_reg_0;
  wire force_stop_overrun;
  wire normal_stop_cmd_hold;
  wire normal_stop_cmd_i;
  wire ok_To_Stop;
  wire saved_reset_mode_dbg_halt;
  wire saved_reset_mode_sleep;
  wire saved_reset_mode_sleep_1;
  wire start_single_step_reg;
  wire sync_reset;
  wire trace_exception_taken_i_reg;

  LUT5 #(
    .INIT(32'h20202F20)) 
    \Area_Debug_Control.mb_halted_i_i_1 
       (.I0(Reset_Mode[0]),
        .I1(Reset_Mode[1]),
        .I2(sync_reset),
        .I3(\Using_FPGA.Native_0 ),
        .I4(saved_reset_mode_sleep_1),
        .O(\Use_Async_Reset.sync_reset_reg_0 ));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* IS_CE_INVERTED = "1'b0" *) 
  (* IS_S_INVERTED = "1'b0" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_i_2__53_n_0 ),
        .Q(\Using_FPGA.Native_0 ),
        .R(\Using_FPGA.Native_i_1__71_n_0 ));
  LUT2 #(
    .INIT(4'h1)) 
    \Using_FPGA.Native_i_1__62 
       (.I0(sync_reset),
        .I1(\Using_FPGA.Native_0 ),
        .O(\Use_Async_Reset.sync_reset_reg ));
  LUT4 #(
    .INIT(16'h9F00)) 
    \Using_FPGA.Native_i_1__71 
       (.I0(Reset_Mode[0]),
        .I1(Reset_Mode[1]),
        .I2(sync_reset),
        .I3(start_single_step_reg),
        .O(\Using_FPGA.Native_i_1__71_n_0 ));
  LUT5 #(
    .INIT(32'hFEFEFEAE)) 
    \Using_FPGA.Native_i_2__53 
       (.I0(S_1),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Area_Debug_Control.normal_stop_cmd_hold_reg ),
        .I3(\Using_FPGA.Native_2 ),
        .I4(\Using_FPGA.Native_3 ),
        .O(\Using_FPGA.Native_i_2__53_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF000000EF)) 
    \Using_FPGA.Native_i_3__2 
       (.I0(\Using_FPGA.Native_8 ),
        .I1(\Using_FPGA.Native_9 ),
        .I2(Q),
        .I3(\Using_FPGA.Native_7 ),
        .I4(saved_reset_mode_sleep),
        .I5(sync_reset),
        .O(start_single_step_reg));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \Using_FPGA.Native_i_4 
       (.I0(\Using_FPGA.Native_6 ),
        .I1(ok_To_Stop),
        .I2(Sleep_Out),
        .I3(saved_reset_mode_sleep),
        .I4(saved_reset_mode_dbg_halt),
        .I5(\Using_FPGA.Native_7 ),
        .O(S_1));
  LUT6 #(
    .INIT(64'hAAAAAAAAAAAAAA02)) 
    \Using_FPGA.Native_i_5 
       (.I0(ok_To_Stop),
        .I1(normal_stop_cmd_hold),
        .I2(normal_stop_cmd_i),
        .I3(\Using_FPGA.Native_4 ),
        .I4(\Using_FPGA.Native_5 ),
        .I5(dbg_clean_stop),
        .O(\Area_Debug_Control.normal_stop_cmd_hold_reg ));
  (* SOFT_HLUTNM = "soft_lutpair75" *) 
  LUT4 #(
    .INIT(16'hFFEA)) 
    \data_rd_reg[0]_i_1 
       (.I0(\data_rd_reg_reg[31]_0 ),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\data_rd_reg_reg[31] ),
        .I3(\data_rd_reg_reg[31]_1 ),
        .O(E));
  (* SOFT_HLUTNM = "soft_lutpair83" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \data_rd_reg[0]_i_2 
       (.I0(exception_reg[30]),
        .I1(\data_rd_reg_reg[31] ),
        .I2(\Using_FPGA.Native_0 ),
        .O(\Using_FPGA.Native_1 [29]));
  (* SOFT_HLUTNM = "soft_lutpair78" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \data_rd_reg[10]_i_1 
       (.I0(exception_reg[20]),
        .I1(\data_rd_reg_reg[31] ),
        .I2(\Using_FPGA.Native_0 ),
        .O(\Using_FPGA.Native_1 [19]));
  (* SOFT_HLUTNM = "soft_lutpair78" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \data_rd_reg[11]_i_1 
       (.I0(exception_reg[19]),
        .I1(\data_rd_reg_reg[31] ),
        .I2(\Using_FPGA.Native_0 ),
        .O(\Using_FPGA.Native_1 [18]));
  (* SOFT_HLUTNM = "soft_lutpair77" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \data_rd_reg[12]_i_1 
       (.I0(exception_reg[18]),
        .I1(\data_rd_reg_reg[31] ),
        .I2(\Using_FPGA.Native_0 ),
        .O(\Using_FPGA.Native_1 [17]));
  (* SOFT_HLUTNM = "soft_lutpair77" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \data_rd_reg[13]_i_1 
       (.I0(exception_reg[17]),
        .I1(\data_rd_reg_reg[31] ),
        .I2(\Using_FPGA.Native_0 ),
        .O(\Using_FPGA.Native_1 [16]));
  (* SOFT_HLUTNM = "soft_lutpair76" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \data_rd_reg[14]_i_1 
       (.I0(exception_reg[16]),
        .I1(\data_rd_reg_reg[31] ),
        .I2(\Using_FPGA.Native_0 ),
        .O(\Using_FPGA.Native_1 [15]));
  (* SOFT_HLUTNM = "soft_lutpair76" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \data_rd_reg[15]_i_1 
       (.I0(exception_reg[15]),
        .I1(\data_rd_reg_reg[31] ),
        .I2(\Using_FPGA.Native_0 ),
        .O(\Using_FPGA.Native_1 [14]));
  LUT5 #(
    .INIT(32'h80BF8080)) 
    \data_rd_reg[16]_i_1 
       (.I0(exception_reg[14]),
        .I1(\data_rd_reg_reg[31] ),
        .I2(\Using_FPGA.Native_0 ),
        .I3(\data_rd_reg_reg[31]_0 ),
        .I4(PC_EX_i[11]),
        .O(\Using_FPGA.Native_1 [13]));
  LUT5 #(
    .INIT(32'h80BF8080)) 
    \data_rd_reg[17]_i_1 
       (.I0(exception_reg[13]),
        .I1(\data_rd_reg_reg[31] ),
        .I2(\Using_FPGA.Native_0 ),
        .I3(\data_rd_reg_reg[31]_0 ),
        .I4(PC_EX_i[10]),
        .O(\Using_FPGA.Native_1 [12]));
  LUT5 #(
    .INIT(32'h80BF8080)) 
    \data_rd_reg[18]_i_1 
       (.I0(exception_reg[12]),
        .I1(\data_rd_reg_reg[31] ),
        .I2(\Using_FPGA.Native_0 ),
        .I3(\data_rd_reg_reg[31]_0 ),
        .I4(PC_EX_i[9]),
        .O(\Using_FPGA.Native_1 [11]));
  LUT5 #(
    .INIT(32'h80BF8080)) 
    \data_rd_reg[19]_i_1 
       (.I0(exception_reg[11]),
        .I1(\data_rd_reg_reg[31] ),
        .I2(\Using_FPGA.Native_0 ),
        .I3(\data_rd_reg_reg[31]_0 ),
        .I4(PC_EX_i[8]),
        .O(\Using_FPGA.Native_1 [10]));
  (* SOFT_HLUTNM = "soft_lutpair83" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \data_rd_reg[1]_i_1 
       (.I0(exception_reg[29]),
        .I1(\data_rd_reg_reg[31] ),
        .I2(\Using_FPGA.Native_0 ),
        .O(\Using_FPGA.Native_1 [28]));
  LUT5 #(
    .INIT(32'h80BF8080)) 
    \data_rd_reg[20]_i_1 
       (.I0(exception_reg[10]),
        .I1(\data_rd_reg_reg[31] ),
        .I2(\Using_FPGA.Native_0 ),
        .I3(\data_rd_reg_reg[31]_0 ),
        .I4(PC_EX_i[7]),
        .O(\Using_FPGA.Native_1 [9]));
  LUT5 #(
    .INIT(32'h80BF8080)) 
    \data_rd_reg[21]_i_1 
       (.I0(exception_reg[9]),
        .I1(\data_rd_reg_reg[31] ),
        .I2(\Using_FPGA.Native_0 ),
        .I3(\data_rd_reg_reg[31]_0 ),
        .I4(PC_EX_i[6]),
        .O(\Using_FPGA.Native_1 [8]));
  LUT5 #(
    .INIT(32'h80BF8080)) 
    \data_rd_reg[22]_i_1 
       (.I0(exception_reg[8]),
        .I1(\data_rd_reg_reg[31] ),
        .I2(\Using_FPGA.Native_0 ),
        .I3(\data_rd_reg_reg[31]_0 ),
        .I4(PC_EX_i[5]),
        .O(\Using_FPGA.Native_1 [7]));
  LUT5 #(
    .INIT(32'h80BF8080)) 
    \data_rd_reg[23]_i_1 
       (.I0(exception_reg[7]),
        .I1(\data_rd_reg_reg[31] ),
        .I2(\Using_FPGA.Native_0 ),
        .I3(\data_rd_reg_reg[31]_0 ),
        .I4(PC_EX_i[4]),
        .O(\Using_FPGA.Native_1 [6]));
  LUT5 #(
    .INIT(32'h80BF8080)) 
    \data_rd_reg[24]_i_1 
       (.I0(exception_reg[6]),
        .I1(\data_rd_reg_reg[31] ),
        .I2(\Using_FPGA.Native_0 ),
        .I3(\data_rd_reg_reg[31]_0 ),
        .I4(PC_EX_i[3]),
        .O(\Using_FPGA.Native_1 [5]));
  LUT5 #(
    .INIT(32'h80BF8080)) 
    \data_rd_reg[25]_i_1 
       (.I0(exception_reg[5]),
        .I1(\data_rd_reg_reg[31] ),
        .I2(\Using_FPGA.Native_0 ),
        .I3(\data_rd_reg_reg[31]_0 ),
        .I4(PC_EX_i[2]),
        .O(\Using_FPGA.Native_1 [4]));
  LUT5 #(
    .INIT(32'h80BF8080)) 
    \data_rd_reg[26]_i_1 
       (.I0(exception_reg[4]),
        .I1(\data_rd_reg_reg[31] ),
        .I2(\Using_FPGA.Native_0 ),
        .I3(\data_rd_reg_reg[31]_0 ),
        .I4(PC_EX_i[1]),
        .O(\Using_FPGA.Native_1 [3]));
  LUT5 #(
    .INIT(32'h80BF8080)) 
    \data_rd_reg[27]_i_1 
       (.I0(exception_reg[3]),
        .I1(\data_rd_reg_reg[31] ),
        .I2(\Using_FPGA.Native_0 ),
        .I3(\data_rd_reg_reg[31]_0 ),
        .I4(PC_EX_i[0]),
        .O(\Using_FPGA.Native_1 [2]));
  (* SOFT_HLUTNM = "soft_lutpair82" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \data_rd_reg[2]_i_1 
       (.I0(exception_reg[28]),
        .I1(\data_rd_reg_reg[31] ),
        .I2(\Using_FPGA.Native_0 ),
        .O(\Using_FPGA.Native_1 [27]));
  LUT5 #(
    .INIT(32'hBF808080)) 
    \data_rd_reg[30]_i_1 
       (.I0(exception_reg[2]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\data_rd_reg_reg[31] ),
        .I3(\data_rd_reg_reg[31]_0 ),
        .I4(\data_rd_reg_reg[30] ),
        .O(\Using_FPGA.Native_1 [1]));
  (* SOFT_HLUTNM = "soft_lutpair75" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \data_rd_reg[31]_i_1 
       (.I0(exception_reg[1]),
        .I1(\data_rd_reg_reg[31] ),
        .I2(\Using_FPGA.Native_0 ),
        .O(\Using_FPGA.Native_1 [0]));
  (* SOFT_HLUTNM = "soft_lutpair82" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \data_rd_reg[3]_i_1 
       (.I0(exception_reg[27]),
        .I1(\data_rd_reg_reg[31] ),
        .I2(\Using_FPGA.Native_0 ),
        .O(\Using_FPGA.Native_1 [26]));
  (* SOFT_HLUTNM = "soft_lutpair81" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \data_rd_reg[4]_i_1 
       (.I0(exception_reg[26]),
        .I1(\data_rd_reg_reg[31] ),
        .I2(\Using_FPGA.Native_0 ),
        .O(\Using_FPGA.Native_1 [25]));
  (* SOFT_HLUTNM = "soft_lutpair81" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \data_rd_reg[5]_i_1 
       (.I0(exception_reg[25]),
        .I1(\data_rd_reg_reg[31] ),
        .I2(\Using_FPGA.Native_0 ),
        .O(\Using_FPGA.Native_1 [24]));
  (* SOFT_HLUTNM = "soft_lutpair80" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \data_rd_reg[6]_i_1 
       (.I0(exception_reg[24]),
        .I1(\data_rd_reg_reg[31] ),
        .I2(\Using_FPGA.Native_0 ),
        .O(\Using_FPGA.Native_1 [23]));
  (* SOFT_HLUTNM = "soft_lutpair80" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \data_rd_reg[7]_i_1 
       (.I0(exception_reg[23]),
        .I1(\data_rd_reg_reg[31] ),
        .I2(\Using_FPGA.Native_0 ),
        .O(\Using_FPGA.Native_1 [22]));
  (* SOFT_HLUTNM = "soft_lutpair79" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \data_rd_reg[8]_i_1 
       (.I0(exception_reg[22]),
        .I1(\data_rd_reg_reg[31] ),
        .I2(\Using_FPGA.Native_0 ),
        .O(\Using_FPGA.Native_1 [21]));
  (* SOFT_HLUTNM = "soft_lutpair79" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \data_rd_reg[9]_i_1 
       (.I0(exception_reg[21]),
        .I1(\data_rd_reg_reg[31] ),
        .I2(\Using_FPGA.Native_0 ),
        .O(\Using_FPGA.Native_1 [20]));
  LUT6 #(
    .INIT(64'h0008000F00080000)) 
    exception_i_1
       (.I0(exception_reg[0]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(exception_reg_0),
        .I3(force_stop_overrun),
        .I4(exception_reg[31]),
        .I5(D),
        .O(trace_exception_taken_i_reg));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_FDRSE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRSE_67
   (force_Val2_N,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Clk);
  output force_Val2_N;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire force_Val2_N;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* IS_CE_INVERTED = "1'b0" *) 
  (* IS_S_INVERTED = "1'b0" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_1 ),
        .Q(force_Val2_N),
        .R(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_FDRSE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRSE_724
   (msr_I,
    I3_0,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Clk,
    \Using_FPGA.Native_3 ,
    \Using_dynamic_instr_Address.old_IE_value_reg );
  output [0:0]msr_I;
  output I3_0;
  output \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input Clk;
  input \Using_FPGA.Native_3 ;
  input \Using_dynamic_instr_Address.old_IE_value_reg ;

  wire Clk;
  wire I3_0;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_dynamic_instr_Address.old_IE_value_reg ;
  wire [0:0]msr_I;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* IS_CE_INVERTED = "1'b0" *) 
  (* IS_S_INVERTED = "1'b0" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_2 ),
        .Q(msr_I),
        .R(\Using_FPGA.Native_1 ));
  (* SOFT_HLUTNM = "soft_lutpair48" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \Using_FPGA.Native_i_1__36 
       (.I0(msr_I),
        .I1(\Using_FPGA.Native_3 ),
        .O(I3_0));
  (* SOFT_HLUTNM = "soft_lutpair48" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \Using_dynamic_instr_Address.old_IE_value_i_1 
       (.I0(msr_I),
        .I1(\Using_dynamic_instr_Address.old_IE_value_reg ),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_FDRSE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRSE_725
   (msr_I,
    I3,
    I3_2,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Clk,
    \Using_FPGA.Native_2 ,
    Address);
  output [0:0]msr_I;
  output I3;
  output I3_2;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Clk;
  input \Using_FPGA.Native_2 ;
  input [0:0]Address;

  wire [0:0]Address;
  wire Clk;
  wire I3;
  wire I3_2;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire [0:0]msr_I;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* IS_CE_INVERTED = "1'b0" *) 
  (* IS_S_INVERTED = "1'b0" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_1 ),
        .Q(msr_I),
        .R(\Using_FPGA.Native_0 ));
  (* SOFT_HLUTNM = "soft_lutpair47" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \Using_FPGA.Native_i_1__35 
       (.I0(msr_I),
        .I1(\Using_FPGA.Native_2 ),
        .O(I3));
  (* SOFT_HLUTNM = "soft_lutpair47" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__42 
       (.I0(msr_I),
        .I1(\Using_FPGA.Native_2 ),
        .I2(Address),
        .O(I3_2));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_FDRSE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDRSE_726
   (msr_I,
    I3_1,
    MSR_Rst,
    \Using_FPGA.Native_0 ,
    Clk,
    \Using_FPGA.Native_1 ,
    Address);
  output [0:0]msr_I;
  output I3_1;
  input MSR_Rst;
  input \Using_FPGA.Native_0 ;
  input Clk;
  input \Using_FPGA.Native_1 ;
  input [0:0]Address;

  wire [0:0]Address;
  wire Clk;
  wire I3_1;
  wire MSR_Rst;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire [0:0]msr_I;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* IS_CE_INVERTED = "1'b0" *) 
  (* IS_S_INVERTED = "1'b0" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_0 ),
        .Q(msr_I),
        .R(MSR_Rst));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__41 
       (.I0(msr_I),
        .I1(\Using_FPGA.Native_1 ),
        .I2(Address),
        .O(I3_1));
endmodule

module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDSE
   (Reg_Test_Equal,
    R,
    \Using_FPGA.Native_0 ,
    Reg_Test_Equal_i,
    Clk);
  output Reg_Test_Equal;
  input R;
  input \Using_FPGA.Native_0 ;
  input Reg_Test_Equal_i;
  input Clk;

  wire Clk;
  wire R;
  wire Reg_Test_Equal;
  wire Reg_Test_Equal_i;
  wire \Using_FPGA.Native_0 ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(\Using_FPGA.Native_0 ),
        .D(Reg_Test_Equal_i),
        .Q(Reg_Test_Equal),
        .S(R));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_FDSE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDSE_491
   (pc_I,
    sync_reset,
    PC_Write,
    \Using_FPGA.Native_0 ,
    Clk);
  output pc_I;
  input sync_reset;
  input PC_Write;
  input [0:0]\Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire pc_I;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(PC_Write),
        .D(\Using_FPGA.Native_0 ),
        .Q(pc_I),
        .S(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_FDSE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDSE_497
   (pc_I,
    sync_reset,
    PC_Write,
    \Using_FPGA.Native_0 ,
    Clk);
  output pc_I;
  input sync_reset;
  input PC_Write;
  input [0:0]\Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire pc_I;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(PC_Write),
        .D(\Using_FPGA.Native_0 ),
        .Q(pc_I),
        .S(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_FDSE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDSE_503
   (pc_I,
    sync_reset,
    PC_Write,
    \Using_FPGA.Native_0 ,
    Clk);
  output pc_I;
  input sync_reset;
  input PC_Write;
  input [0:0]\Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire pc_I;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(PC_Write),
        .D(\Using_FPGA.Native_0 ),
        .Q(pc_I),
        .S(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_FDSE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDSE_509
   (pc_I,
    sync_reset,
    PC_Write,
    \Using_FPGA.Native_0 ,
    Clk);
  output pc_I;
  input sync_reset;
  input PC_Write;
  input [0:0]\Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire pc_I;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(PC_Write),
        .D(\Using_FPGA.Native_0 ),
        .Q(pc_I),
        .S(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_FDSE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDSE_515
   (pc_I,
    sync_reset,
    PC_Write,
    \Using_FPGA.Native_0 ,
    Clk);
  output pc_I;
  input sync_reset;
  input PC_Write;
  input [0:0]\Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire pc_I;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(PC_Write),
        .D(\Using_FPGA.Native_0 ),
        .Q(pc_I),
        .S(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_FDSE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDSE_521
   (pc_I,
    sync_reset,
    PC_Write,
    \Using_FPGA.Native_0 ,
    Clk);
  output pc_I;
  input sync_reset;
  input PC_Write;
  input [0:0]\Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire pc_I;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(PC_Write),
        .D(\Using_FPGA.Native_0 ),
        .Q(pc_I),
        .S(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_FDSE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDSE_527
   (pc_I,
    sync_reset,
    PC_Write,
    \Using_FPGA.Native_0 ,
    Clk);
  output pc_I;
  input sync_reset;
  input PC_Write;
  input [0:0]\Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire pc_I;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(PC_Write),
        .D(\Using_FPGA.Native_0 ),
        .Q(pc_I),
        .S(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_FDSE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDSE_533
   (pc_I,
    sync_reset,
    PC_Write,
    \Using_FPGA.Native_0 ,
    Clk);
  output pc_I;
  input sync_reset;
  input PC_Write;
  input [0:0]\Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire pc_I;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(PC_Write),
        .D(\Using_FPGA.Native_0 ),
        .Q(pc_I),
        .S(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_FDSE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDSE_539
   (pc_I,
    sync_reset,
    PC_Write,
    \Using_FPGA.Native_0 ,
    Clk);
  output pc_I;
  input sync_reset;
  input PC_Write;
  input [0:0]\Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire pc_I;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(PC_Write),
        .D(\Using_FPGA.Native_0 ),
        .Q(pc_I),
        .S(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_FDSE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDSE_545
   (pc_I,
    sync_reset,
    PC_Write,
    \Using_FPGA.Native_0 ,
    Clk);
  output pc_I;
  input sync_reset;
  input PC_Write;
  input [0:0]\Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire pc_I;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(PC_Write),
        .D(\Using_FPGA.Native_0 ),
        .Q(pc_I),
        .S(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_FDSE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDSE_551
   (pc_I,
    sync_reset,
    PC_Write,
    \Using_FPGA.Native_0 ,
    Clk);
  output pc_I;
  input sync_reset;
  input PC_Write;
  input [0:0]\Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire pc_I;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(PC_Write),
        .D(\Using_FPGA.Native_0 ),
        .Q(pc_I),
        .S(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_FDSE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDSE_557
   (pc_I,
    sync_reset,
    PC_Write,
    \Using_FPGA.Native_0 ,
    Clk);
  output pc_I;
  input sync_reset;
  input PC_Write;
  input [0:0]\Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire pc_I;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(PC_Write),
        .D(\Using_FPGA.Native_0 ),
        .Q(pc_I),
        .S(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_FDSE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDSE_563
   (pc_I,
    sync_reset,
    PC_Write,
    \Using_FPGA.Native_0 ,
    Clk);
  output pc_I;
  input sync_reset;
  input PC_Write;
  input [0:0]\Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire pc_I;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(PC_Write),
        .D(\Using_FPGA.Native_0 ),
        .Q(pc_I),
        .S(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_FDSE" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_FDSE_569
   (pc_I,
    sync_reset,
    PC_Write,
    \Using_FPGA.Native_0 ,
    Clk);
  output pc_I;
  input sync_reset;
  input PC_Write;
  input [0:0]\Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire PC_Write;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire pc_I;
  wire sync_reset;

  (* BOX_TYPE = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(PC_Write),
        .D(\Using_FPGA.Native_0 ),
        .Q(pc_I),
        .S(sync_reset));
endmodule

module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_LUT3
   (opsel1_SPR_Select_2_2,
    instr_OF_raw,
    D);
  output opsel1_SPR_Select_2_2;
  input [1:0]instr_OF_raw;
  input [0:0]D;

  wire [0:0]D;
  wire [1:0]instr_OF_raw;
  wire opsel1_SPR_Select_2_2;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT3 #(
    .INIT(8'h04)) 
    \Using_FPGA.Native 
       (.I0(instr_OF_raw[1]),
        .I1(instr_OF_raw[0]),
        .I2(D),
        .O(opsel1_SPR_Select_2_2));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_LUT3" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_LUT3__parameterized0
   (opsel1_SPR_Select,
    opsel1_SPR_Select_1,
    opsel1_SPR_Select_2_1,
    opsel1_SPR_Select_2_2);
  output opsel1_SPR_Select;
  input opsel1_SPR_Select_1;
  input opsel1_SPR_Select_2_1;
  input opsel1_SPR_Select_2_2;

  wire opsel1_SPR_Select;
  wire opsel1_SPR_Select_1;
  wire opsel1_SPR_Select_2_1;
  wire opsel1_SPR_Select_2_2;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT3 #(
    .INIT(8'h15)) 
    \Using_FPGA.Native 
       (.I0(opsel1_SPR_Select_1),
        .I1(opsel1_SPR_Select_2_1),
        .I2(opsel1_SPR_Select_2_2),
        .O(opsel1_SPR_Select));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_LUT3" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_LUT3__parameterized1
   (res_forward1_3,
    reg1_Addr,
    Q,
    ex_Valid);
  output res_forward1_3;
  input [0:0]reg1_Addr;
  input [0:0]Q;
  input ex_Valid;

  wire [0:0]Q;
  wire ex_Valid;
  wire [0:0]reg1_Addr;
  wire res_forward1_3;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT3 #(
    .INIT(8'h90)) 
    \Using_FPGA.Native 
       (.I0(reg1_Addr),
        .I1(Q),
        .I2(ex_Valid),
        .O(res_forward1_3));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_LUT3" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_LUT3__parameterized1_77
   (res_forward2_3,
    imm_Value,
    Q,
    ex_Valid);
  output res_forward2_3;
  input [0:0]imm_Value;
  input [0:0]Q;
  input ex_Valid;

  wire [0:0]Q;
  wire ex_Valid;
  wire [0:0]imm_Value;
  wire res_forward2_3;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT3 #(
    .INIT(8'h90)) 
    \Using_FPGA.Native 
       (.I0(imm_Value),
        .I1(Q),
        .I2(ex_Valid),
        .O(res_forward2_3));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_LUT3" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_LUT3__parameterized2
   (force_DI1,
    \Using_FPGA.Native_0 ,
    use_Reg_Neg_DI,
    force_Val1);
  output force_DI1;
  input \Using_FPGA.Native_0 ;
  input use_Reg_Neg_DI;
  input force_Val1;

  wire \Using_FPGA.Native_0 ;
  wire force_DI1;
  wire force_Val1;
  wire use_Reg_Neg_DI;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT3 #(
    .INIT(8'hB4)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(use_Reg_Neg_DI),
        .I2(force_Val1),
        .O(force_DI1));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_LUT3" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_LUT3__parameterized2_86
   (force_jump1,
    \Using_FPGA.Native_0 ,
    use_Reg_Neg_S,
    force1);
  output force_jump1;
  input \Using_FPGA.Native_0 ;
  input use_Reg_Neg_S;
  input force1;

  wire \Using_FPGA.Native_0 ;
  wire force1;
  wire force_jump1;
  wire use_Reg_Neg_S;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT3 #(
    .INIT(8'hB4)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(use_Reg_Neg_S),
        .I2(force1),
        .O(force_jump1));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_LUT3" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_LUT3__parameterized3
   (control_carry,
    carry_In);
  output control_carry;
  input carry_In;

  wire carry_In;
  wire control_carry;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT3 #(
    .INIT(8'h00)) 
    \Using_FPGA.Native 
       (.I0(carry_In),
        .I1(carry_In),
        .I2(1'b1),
        .O(control_carry));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_LUT3" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_LUT3__parameterized4
   (byte_i_reg,
    extend_Data_Read,
    byte_selects_1,
    isbyte,
    isdoublet,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    DReady,
    Q,
    Data_Read);
  output byte_i_reg;
  output [7:0]extend_Data_Read;
  input byte_selects_1;
  input isbyte;
  input isdoublet;
  input [7:0]\Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input DReady;
  input [15:0]Q;
  input [15:0]Data_Read;

  wire DReady;
  wire [15:0]Data_Read;
  wire [15:0]Q;
  wire [7:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_i_2__39_n_0 ;
  wire \Using_FPGA.Native_i_2__40_n_0 ;
  wire \Using_FPGA.Native_i_2__41_n_0 ;
  wire \Using_FPGA.Native_i_2__42_n_0 ;
  wire \Using_FPGA.Native_i_2__43_n_0 ;
  wire \Using_FPGA.Native_i_2__44_n_0 ;
  wire \Using_FPGA.Native_i_2__45_n_0 ;
  wire \Using_FPGA.Native_i_2__46_n_0 ;
  wire byte_i_reg;
  wire byte_selects_1;
  wire [7:0]extend_Data_Read;
  wire isbyte;
  wire isdoublet;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT3 #(
    .INIT(8'hAB)) 
    \Using_FPGA.Native 
       (.I0(byte_selects_1),
        .I1(isbyte),
        .I2(isdoublet),
        .O(byte_i_reg));
  LUT6 #(
    .INIT(64'hAEFEAEAEAEAEAEAE)) 
    \Using_FPGA.Native_i_1__76 
       (.I0(\Using_FPGA.Native_i_2__39_n_0 ),
        .I1(\Using_FPGA.Native_0 [7]),
        .I2(\Using_FPGA.Native_1 ),
        .I3(DReady),
        .I4(byte_i_reg),
        .I5(Q[7]),
        .O(extend_Data_Read[7]));
  LUT6 #(
    .INIT(64'hAEFEAEAEAEAEAEAE)) 
    \Using_FPGA.Native_i_1__79 
       (.I0(\Using_FPGA.Native_i_2__40_n_0 ),
        .I1(\Using_FPGA.Native_0 [6]),
        .I2(\Using_FPGA.Native_1 ),
        .I3(DReady),
        .I4(byte_i_reg),
        .I5(Q[6]),
        .O(extend_Data_Read[6]));
  LUT6 #(
    .INIT(64'hAEFEAEAEAEAEAEAE)) 
    \Using_FPGA.Native_i_1__82 
       (.I0(\Using_FPGA.Native_i_2__41_n_0 ),
        .I1(\Using_FPGA.Native_0 [5]),
        .I2(\Using_FPGA.Native_1 ),
        .I3(DReady),
        .I4(byte_i_reg),
        .I5(Q[5]),
        .O(extend_Data_Read[5]));
  LUT6 #(
    .INIT(64'hAEFEAEAEAEAEAEAE)) 
    \Using_FPGA.Native_i_1__85 
       (.I0(\Using_FPGA.Native_i_2__42_n_0 ),
        .I1(\Using_FPGA.Native_0 [4]),
        .I2(\Using_FPGA.Native_1 ),
        .I3(DReady),
        .I4(byte_i_reg),
        .I5(Q[4]),
        .O(extend_Data_Read[4]));
  LUT6 #(
    .INIT(64'hAEFEAEAEAEAEAEAE)) 
    \Using_FPGA.Native_i_1__88 
       (.I0(\Using_FPGA.Native_i_2__43_n_0 ),
        .I1(\Using_FPGA.Native_0 [3]),
        .I2(\Using_FPGA.Native_1 ),
        .I3(DReady),
        .I4(byte_i_reg),
        .I5(Q[3]),
        .O(extend_Data_Read[3]));
  LUT6 #(
    .INIT(64'hAEFEAEAEAEAEAEAE)) 
    \Using_FPGA.Native_i_1__91 
       (.I0(\Using_FPGA.Native_i_2__44_n_0 ),
        .I1(\Using_FPGA.Native_0 [2]),
        .I2(\Using_FPGA.Native_1 ),
        .I3(DReady),
        .I4(byte_i_reg),
        .I5(Q[2]),
        .O(extend_Data_Read[2]));
  LUT6 #(
    .INIT(64'hAEFEAEAEAEAEAEAE)) 
    \Using_FPGA.Native_i_1__94 
       (.I0(\Using_FPGA.Native_i_2__45_n_0 ),
        .I1(\Using_FPGA.Native_0 [1]),
        .I2(\Using_FPGA.Native_1 ),
        .I3(DReady),
        .I4(byte_i_reg),
        .I5(Q[1]),
        .O(extend_Data_Read[1]));
  LUT6 #(
    .INIT(64'hAEFEAEAEAEAEAEAE)) 
    \Using_FPGA.Native_i_1__97 
       (.I0(\Using_FPGA.Native_i_2__46_n_0 ),
        .I1(\Using_FPGA.Native_0 [0]),
        .I2(\Using_FPGA.Native_1 ),
        .I3(DReady),
        .I4(byte_i_reg),
        .I5(Q[0]),
        .O(extend_Data_Read[0]));
  LUT6 #(
    .INIT(64'hB0803030B0800000)) 
    \Using_FPGA.Native_i_2__39 
       (.I0(Data_Read[7]),
        .I1(byte_i_reg),
        .I2(\Using_FPGA.Native_1 ),
        .I3(Data_Read[15]),
        .I4(DReady),
        .I5(Q[15]),
        .O(\Using_FPGA.Native_i_2__39_n_0 ));
  LUT6 #(
    .INIT(64'hB0803030B0800000)) 
    \Using_FPGA.Native_i_2__40 
       (.I0(Data_Read[6]),
        .I1(byte_i_reg),
        .I2(\Using_FPGA.Native_1 ),
        .I3(Data_Read[14]),
        .I4(DReady),
        .I5(Q[14]),
        .O(\Using_FPGA.Native_i_2__40_n_0 ));
  LUT6 #(
    .INIT(64'hB0803030B0800000)) 
    \Using_FPGA.Native_i_2__41 
       (.I0(Data_Read[5]),
        .I1(byte_i_reg),
        .I2(\Using_FPGA.Native_1 ),
        .I3(Data_Read[13]),
        .I4(DReady),
        .I5(Q[13]),
        .O(\Using_FPGA.Native_i_2__41_n_0 ));
  LUT6 #(
    .INIT(64'hB0803030B0800000)) 
    \Using_FPGA.Native_i_2__42 
       (.I0(Data_Read[4]),
        .I1(byte_i_reg),
        .I2(\Using_FPGA.Native_1 ),
        .I3(Data_Read[12]),
        .I4(DReady),
        .I5(Q[12]),
        .O(\Using_FPGA.Native_i_2__42_n_0 ));
  LUT6 #(
    .INIT(64'hB0803030B0800000)) 
    \Using_FPGA.Native_i_2__43 
       (.I0(Data_Read[3]),
        .I1(byte_i_reg),
        .I2(\Using_FPGA.Native_1 ),
        .I3(Data_Read[11]),
        .I4(DReady),
        .I5(Q[11]),
        .O(\Using_FPGA.Native_i_2__43_n_0 ));
  LUT6 #(
    .INIT(64'hB0803030B0800000)) 
    \Using_FPGA.Native_i_2__44 
       (.I0(Data_Read[2]),
        .I1(byte_i_reg),
        .I2(\Using_FPGA.Native_1 ),
        .I3(Data_Read[10]),
        .I4(DReady),
        .I5(Q[10]),
        .O(\Using_FPGA.Native_i_2__44_n_0 ));
  LUT6 #(
    .INIT(64'hB0803030B0800000)) 
    \Using_FPGA.Native_i_2__45 
       (.I0(Data_Read[1]),
        .I1(byte_i_reg),
        .I2(\Using_FPGA.Native_1 ),
        .I3(Data_Read[9]),
        .I4(DReady),
        .I5(Q[9]),
        .O(\Using_FPGA.Native_i_2__45_n_0 ));
  LUT6 #(
    .INIT(64'hB0803030B0800000)) 
    \Using_FPGA.Native_i_2__46 
       (.I0(Data_Read[0]),
        .I1(byte_i_reg),
        .I2(\Using_FPGA.Native_1 ),
        .I3(Data_Read[8]),
        .I4(DReady),
        .I5(Q[8]),
        .O(\Using_FPGA.Native_i_2__46_n_0 ));
endmodule

module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_LUT6
   (alu_AddSub_1,
    op2_C,
    alu_Op,
    Op1_Logic);
  output alu_AddSub_1;
  input [0:0]op2_C;
  input [0:1]alu_Op;
  input Op1_Logic;

  wire Op1_Logic;
  wire alu_AddSub_1;
  wire [0:1]alu_Op;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(alu_Op[0]),
        .I2(Op1_Logic),
        .I3(alu_Op[1]),
        .I4(1'b0),
        .I5(1'b1),
        .O(alu_AddSub_1));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_LUT6" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_LUT6__parameterized0
   (ex_Result,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    Q,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Data_Read0_out,
    mul_ALU_Res,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data);
  output [0:0]ex_Result;
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input [1:0]Q;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [0:0]Data_Read0_out;
  input mul_ALU_Res;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;

  wire [0:0]Data_Read0_out;
  wire [0:0]Interrupt_Address;
  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(Q[0]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Using_FPGA.Native_1 ),
        .I3(Data_Read0_out),
        .I4(mul_ALU_Res),
        .I5(Q[1]),
        .O(ex_Result));
  LUT5 #(
    .INIT(32'hCACFCAC0)) 
    \Using_FPGA.Native_i_2__16 
       (.I0(ex_Result),
        .I1(Interrupt_Address),
        .I2(exception_kind),
        .I3(res_Forward2),
        .I4(reg2_Data),
        .O(\Using_FPGA.take_Intr_2nd_Phase_reg ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_LUT6" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_LUT6__parameterized0_289
   (ex_Result,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    Q,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Data_Read0_out,
    mul_ALU_Res,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data);
  output [0:0]ex_Result;
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input [1:0]Q;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [0:0]Data_Read0_out;
  input mul_ALU_Res;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;

  wire [0:0]Data_Read0_out;
  wire [0:0]Interrupt_Address;
  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(Q[0]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Using_FPGA.Native_1 ),
        .I3(Data_Read0_out),
        .I4(mul_ALU_Res),
        .I5(Q[1]),
        .O(ex_Result));
  LUT5 #(
    .INIT(32'hCACFCAC0)) 
    \Using_FPGA.Native_i_2__15 
       (.I0(ex_Result),
        .I1(Interrupt_Address),
        .I2(exception_kind),
        .I3(res_Forward2),
        .I4(reg2_Data),
        .O(\Using_FPGA.take_Intr_2nd_Phase_reg ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_LUT6" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_LUT6__parameterized0_292
   (ex_Result,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    Q,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Data_Read0_out,
    mul_ALU_Res,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data);
  output [0:0]ex_Result;
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input [1:0]Q;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [0:0]Data_Read0_out;
  input mul_ALU_Res;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;

  wire [0:0]Data_Read0_out;
  wire [0:0]Interrupt_Address;
  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(Q[0]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Using_FPGA.Native_1 ),
        .I3(Data_Read0_out),
        .I4(mul_ALU_Res),
        .I5(Q[1]),
        .O(ex_Result));
  LUT5 #(
    .INIT(32'hCACFCAC0)) 
    \Using_FPGA.Native_i_2__14 
       (.I0(ex_Result),
        .I1(Interrupt_Address),
        .I2(exception_kind),
        .I3(res_Forward2),
        .I4(reg2_Data),
        .O(\Using_FPGA.take_Intr_2nd_Phase_reg ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_LUT6" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_LUT6__parameterized0_295
   (ex_Result,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    Q,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Data_Read0_out,
    mul_ALU_Res,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data);
  output [0:0]ex_Result;
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input [1:0]Q;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [0:0]Data_Read0_out;
  input mul_ALU_Res;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;

  wire [0:0]Data_Read0_out;
  wire [0:0]Interrupt_Address;
  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(Q[0]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Using_FPGA.Native_1 ),
        .I3(Data_Read0_out),
        .I4(mul_ALU_Res),
        .I5(Q[1]),
        .O(ex_Result));
  LUT5 #(
    .INIT(32'hCACFCAC0)) 
    \Using_FPGA.Native_i_2__13 
       (.I0(ex_Result),
        .I1(Interrupt_Address),
        .I2(exception_kind),
        .I3(res_Forward2),
        .I4(reg2_Data),
        .O(\Using_FPGA.take_Intr_2nd_Phase_reg ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_LUT6" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_LUT6__parameterized0_298
   (ex_Result,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    Q,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Data_Read0_out,
    mul_ALU_Res,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data);
  output [0:0]ex_Result;
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input [1:0]Q;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [0:0]Data_Read0_out;
  input mul_ALU_Res;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;

  wire [0:0]Data_Read0_out;
  wire [0:0]Interrupt_Address;
  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(Q[0]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Using_FPGA.Native_1 ),
        .I3(Data_Read0_out),
        .I4(mul_ALU_Res),
        .I5(Q[1]),
        .O(ex_Result));
  LUT5 #(
    .INIT(32'hCACFCAC0)) 
    \Using_FPGA.Native_i_2__12 
       (.I0(ex_Result),
        .I1(Interrupt_Address),
        .I2(exception_kind),
        .I3(res_Forward2),
        .I4(reg2_Data),
        .O(\Using_FPGA.take_Intr_2nd_Phase_reg ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_LUT6" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_LUT6__parameterized0_301
   (ex_Result,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    Q,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Data_Read0_out,
    mul_ALU_Res,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data);
  output [0:0]ex_Result;
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input [1:0]Q;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [0:0]Data_Read0_out;
  input mul_ALU_Res;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;

  wire [0:0]Data_Read0_out;
  wire [0:0]Interrupt_Address;
  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(Q[0]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Using_FPGA.Native_1 ),
        .I3(Data_Read0_out),
        .I4(mul_ALU_Res),
        .I5(Q[1]),
        .O(ex_Result));
  LUT5 #(
    .INIT(32'hCACFCAC0)) 
    \Using_FPGA.Native_i_2__11 
       (.I0(ex_Result),
        .I1(Interrupt_Address),
        .I2(exception_kind),
        .I3(res_Forward2),
        .I4(reg2_Data),
        .O(\Using_FPGA.take_Intr_2nd_Phase_reg ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_LUT6" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_LUT6__parameterized0_304
   (ex_Result,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    Q,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Data_Read0_out,
    mul_ALU_Res,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data);
  output [0:0]ex_Result;
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input [1:0]Q;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [0:0]Data_Read0_out;
  input mul_ALU_Res;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;

  wire [0:0]Data_Read0_out;
  wire [0:0]Interrupt_Address;
  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(Q[0]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Using_FPGA.Native_1 ),
        .I3(Data_Read0_out),
        .I4(mul_ALU_Res),
        .I5(Q[1]),
        .O(ex_Result));
  LUT5 #(
    .INIT(32'hCACFCAC0)) 
    \Using_FPGA.Native_i_2__10 
       (.I0(ex_Result),
        .I1(Interrupt_Address),
        .I2(exception_kind),
        .I3(res_Forward2),
        .I4(reg2_Data),
        .O(\Using_FPGA.take_Intr_2nd_Phase_reg ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_LUT6" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_LUT6__parameterized0_307
   (ex_Result,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    Q,
    Shift_Logic_Res,
    extend_Data_Read,
    mul_ALU_Res,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data);
  output [0:0]ex_Result;
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input [1:0]Q;
  input Shift_Logic_Res;
  input [0:0]extend_Data_Read;
  input mul_ALU_Res;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;

  wire [0:0]Interrupt_Address;
  wire [1:0]Q;
  wire Shift_Logic_Res;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [0:0]extend_Data_Read;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(Q[0]),
        .I1(Shift_Logic_Res),
        .I2(1'b1),
        .I3(extend_Data_Read),
        .I4(mul_ALU_Res),
        .I5(Q[1]),
        .O(ex_Result));
  LUT5 #(
    .INIT(32'hCACFCAC0)) 
    \Using_FPGA.Native_i_3__4 
       (.I0(ex_Result),
        .I1(Interrupt_Address),
        .I2(exception_kind),
        .I3(res_Forward2),
        .I4(reg2_Data),
        .O(\Using_FPGA.take_Intr_2nd_Phase_reg ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_LUT6" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_LUT6__parameterized0_310
   (ex_Result,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    Q,
    \Using_FPGA.Native_0 ,
    extend_Data_Read,
    mul_ALU_Res,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data);
  output [0:0]ex_Result;
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input [1:0]Q;
  input \Using_FPGA.Native_0 ;
  input [0:0]extend_Data_Read;
  input mul_ALU_Res;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;

  wire [0:0]Interrupt_Address;
  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [0:0]extend_Data_Read;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(Q[0]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(1'b1),
        .I3(extend_Data_Read),
        .I4(mul_ALU_Res),
        .I5(Q[1]),
        .O(ex_Result));
  LUT5 #(
    .INIT(32'hCACFCAC0)) 
    \Using_FPGA.Native_i_2__37 
       (.I0(ex_Result),
        .I1(Interrupt_Address),
        .I2(exception_kind),
        .I3(res_Forward2),
        .I4(reg2_Data),
        .O(\Using_FPGA.take_Intr_2nd_Phase_reg ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_LUT6" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_LUT6__parameterized0_313
   (ex_Result,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    Q,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Data_Read0_out,
    mul_ALU_Res,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data);
  output [0:0]ex_Result;
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input [1:0]Q;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [0:0]Data_Read0_out;
  input mul_ALU_Res;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;

  wire [0:0]Data_Read0_out;
  wire [0:0]Interrupt_Address;
  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(Q[0]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Using_FPGA.Native_1 ),
        .I3(Data_Read0_out),
        .I4(mul_ALU_Res),
        .I5(Q[1]),
        .O(ex_Result));
  LUT5 #(
    .INIT(32'hCACFCAC0)) 
    \Using_FPGA.Native_i_2__9 
       (.I0(ex_Result),
        .I1(Interrupt_Address),
        .I2(exception_kind),
        .I3(res_Forward2),
        .I4(reg2_Data),
        .O(\Using_FPGA.take_Intr_2nd_Phase_reg ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_LUT6" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_LUT6__parameterized0_316
   (ex_Result,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    Q,
    \Using_FPGA.Native_0 ,
    extend_Data_Read,
    mul_ALU_Res,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data);
  output [0:0]ex_Result;
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input [1:0]Q;
  input \Using_FPGA.Native_0 ;
  input [0:0]extend_Data_Read;
  input mul_ALU_Res;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;

  wire [0:0]Interrupt_Address;
  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [0:0]extend_Data_Read;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(Q[0]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(1'b1),
        .I3(extend_Data_Read),
        .I4(mul_ALU_Res),
        .I5(Q[1]),
        .O(ex_Result));
  LUT5 #(
    .INIT(32'hCACFCAC0)) 
    \Using_FPGA.Native_i_2__36 
       (.I0(ex_Result),
        .I1(Interrupt_Address),
        .I2(exception_kind),
        .I3(res_Forward2),
        .I4(reg2_Data),
        .O(\Using_FPGA.take_Intr_2nd_Phase_reg ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_LUT6" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_LUT6__parameterized0_319
   (ex_Result,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    Q,
    \Using_FPGA.Native_0 ,
    extend_Data_Read,
    mul_ALU_Res,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data);
  output [0:0]ex_Result;
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input [1:0]Q;
  input \Using_FPGA.Native_0 ;
  input [0:0]extend_Data_Read;
  input mul_ALU_Res;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;

  wire [0:0]Interrupt_Address;
  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [0:0]extend_Data_Read;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(Q[0]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(1'b1),
        .I3(extend_Data_Read),
        .I4(mul_ALU_Res),
        .I5(Q[1]),
        .O(ex_Result));
  LUT5 #(
    .INIT(32'hCACFCAC0)) 
    \Using_FPGA.Native_i_2__35 
       (.I0(ex_Result),
        .I1(Interrupt_Address),
        .I2(exception_kind),
        .I3(res_Forward2),
        .I4(reg2_Data),
        .O(\Using_FPGA.take_Intr_2nd_Phase_reg ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_LUT6" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_LUT6__parameterized0_322
   (ex_Result,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    Q,
    \Using_FPGA.Native_0 ,
    extend_Data_Read,
    mul_ALU_Res,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data);
  output [0:0]ex_Result;
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input [1:0]Q;
  input \Using_FPGA.Native_0 ;
  input [0:0]extend_Data_Read;
  input mul_ALU_Res;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;

  wire [0:0]Interrupt_Address;
  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [0:0]extend_Data_Read;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(Q[0]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(1'b1),
        .I3(extend_Data_Read),
        .I4(mul_ALU_Res),
        .I5(Q[1]),
        .O(ex_Result));
  LUT5 #(
    .INIT(32'hCACFCAC0)) 
    \Using_FPGA.Native_i_2__34 
       (.I0(ex_Result),
        .I1(Interrupt_Address),
        .I2(exception_kind),
        .I3(res_Forward2),
        .I4(reg2_Data),
        .O(\Using_FPGA.take_Intr_2nd_Phase_reg ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_LUT6" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_LUT6__parameterized0_325
   (ex_Result,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    Q,
    \Using_FPGA.Native_0 ,
    extend_Data_Read,
    mul_ALU_Res,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data);
  output [0:0]ex_Result;
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input [1:0]Q;
  input \Using_FPGA.Native_0 ;
  input [0:0]extend_Data_Read;
  input mul_ALU_Res;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;

  wire [0:0]Interrupt_Address;
  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [0:0]extend_Data_Read;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(Q[0]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(1'b1),
        .I3(extend_Data_Read),
        .I4(mul_ALU_Res),
        .I5(Q[1]),
        .O(ex_Result));
  LUT5 #(
    .INIT(32'hCACFCAC0)) 
    \Using_FPGA.Native_i_2__33 
       (.I0(ex_Result),
        .I1(Interrupt_Address),
        .I2(exception_kind),
        .I3(res_Forward2),
        .I4(reg2_Data),
        .O(\Using_FPGA.take_Intr_2nd_Phase_reg ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_LUT6" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_LUT6__parameterized0_328
   (ex_Result,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    Q,
    \Using_FPGA.Native_0 ,
    extend_Data_Read,
    mul_ALU_Res,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data);
  output [0:0]ex_Result;
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input [1:0]Q;
  input \Using_FPGA.Native_0 ;
  input [0:0]extend_Data_Read;
  input mul_ALU_Res;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;

  wire [0:0]Interrupt_Address;
  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [0:0]extend_Data_Read;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(Q[0]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(1'b1),
        .I3(extend_Data_Read),
        .I4(mul_ALU_Res),
        .I5(Q[1]),
        .O(ex_Result));
  LUT5 #(
    .INIT(32'hCACFCAC0)) 
    \Using_FPGA.Native_i_2__32 
       (.I0(ex_Result),
        .I1(Interrupt_Address),
        .I2(exception_kind),
        .I3(res_Forward2),
        .I4(reg2_Data),
        .O(\Using_FPGA.take_Intr_2nd_Phase_reg ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_LUT6" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_LUT6__parameterized0_331
   (ex_Result,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    Q,
    \Using_FPGA.Native_0 ,
    extend_Data_Read,
    mul_ALU_Res,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data);
  output [0:0]ex_Result;
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input [1:0]Q;
  input \Using_FPGA.Native_0 ;
  input [0:0]extend_Data_Read;
  input mul_ALU_Res;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;

  wire [0:0]Interrupt_Address;
  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [0:0]extend_Data_Read;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(Q[0]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(1'b1),
        .I3(extend_Data_Read),
        .I4(mul_ALU_Res),
        .I5(Q[1]),
        .O(ex_Result));
  LUT5 #(
    .INIT(32'hCACFCAC0)) 
    \Using_FPGA.Native_i_2__31 
       (.I0(ex_Result),
        .I1(Interrupt_Address),
        .I2(exception_kind),
        .I3(res_Forward2),
        .I4(reg2_Data),
        .O(\Using_FPGA.take_Intr_2nd_Phase_reg ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_LUT6" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_LUT6__parameterized0_334
   (ex_Result,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    Q,
    \Using_FPGA.Native_0 ,
    Data_Read_Mask,
    extend_Data_Read,
    mul_ALU_Res,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data);
  output [0:0]ex_Result;
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input [1:0]Q;
  input \Using_FPGA.Native_0 ;
  input Data_Read_Mask;
  input [0:0]extend_Data_Read;
  input mul_ALU_Res;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;

  wire Data_Read_Mask;
  wire [0:0]Interrupt_Address;
  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [0:0]extend_Data_Read;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(Q[0]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(Data_Read_Mask),
        .I3(extend_Data_Read),
        .I4(mul_ALU_Res),
        .I5(Q[1]),
        .O(ex_Result));
  LUT5 #(
    .INIT(32'hCACFCAC0)) 
    \Using_FPGA.Native_i_2__30 
       (.I0(ex_Result),
        .I1(Interrupt_Address),
        .I2(exception_kind),
        .I3(res_Forward2),
        .I4(reg2_Data),
        .O(\Using_FPGA.take_Intr_2nd_Phase_reg ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_LUT6" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_LUT6__parameterized0_337
   (ex_Result,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    Q,
    \Using_FPGA.Native_0 ,
    Data_Read_Mask,
    extend_Data_Read,
    mul_ALU_Res,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data);
  output [0:0]ex_Result;
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input [1:0]Q;
  input \Using_FPGA.Native_0 ;
  input Data_Read_Mask;
  input [0:0]extend_Data_Read;
  input mul_ALU_Res;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;

  wire Data_Read_Mask;
  wire [0:0]Interrupt_Address;
  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [0:0]extend_Data_Read;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(Q[0]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(Data_Read_Mask),
        .I3(extend_Data_Read),
        .I4(mul_ALU_Res),
        .I5(Q[1]),
        .O(ex_Result));
  LUT5 #(
    .INIT(32'hCACFCAC0)) 
    \Using_FPGA.Native_i_2__29 
       (.I0(ex_Result),
        .I1(Interrupt_Address),
        .I2(exception_kind),
        .I3(res_Forward2),
        .I4(reg2_Data),
        .O(\Using_FPGA.take_Intr_2nd_Phase_reg ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_LUT6" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_LUT6__parameterized0_340
   (ex_Result,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    Q,
    \Using_FPGA.Native_0 ,
    Data_Read_Mask,
    extend_Data_Read,
    mul_ALU_Res,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data);
  output [0:0]ex_Result;
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input [1:0]Q;
  input \Using_FPGA.Native_0 ;
  input Data_Read_Mask;
  input [0:0]extend_Data_Read;
  input mul_ALU_Res;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;

  wire Data_Read_Mask;
  wire [0:0]Interrupt_Address;
  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [0:0]extend_Data_Read;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(Q[0]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(Data_Read_Mask),
        .I3(extend_Data_Read),
        .I4(mul_ALU_Res),
        .I5(Q[1]),
        .O(ex_Result));
  LUT5 #(
    .INIT(32'hCACFCAC0)) 
    \Using_FPGA.Native_i_2__28 
       (.I0(ex_Result),
        .I1(Interrupt_Address),
        .I2(exception_kind),
        .I3(res_Forward2),
        .I4(reg2_Data),
        .O(\Using_FPGA.take_Intr_2nd_Phase_reg ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_LUT6" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_LUT6__parameterized0_343
   (ex_Result,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    Q,
    \Using_FPGA.Native_0 ,
    Data_Read_Mask,
    extend_Data_Read,
    mul_ALU_Res,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data);
  output [0:0]ex_Result;
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input [1:0]Q;
  input \Using_FPGA.Native_0 ;
  input Data_Read_Mask;
  input [0:0]extend_Data_Read;
  input mul_ALU_Res;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;

  wire Data_Read_Mask;
  wire [0:0]Interrupt_Address;
  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [0:0]extend_Data_Read;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(Q[0]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(Data_Read_Mask),
        .I3(extend_Data_Read),
        .I4(mul_ALU_Res),
        .I5(Q[1]),
        .O(ex_Result));
  LUT5 #(
    .INIT(32'hCACFCAC0)) 
    \Using_FPGA.Native_i_2__27 
       (.I0(ex_Result),
        .I1(Interrupt_Address),
        .I2(exception_kind),
        .I3(res_Forward2),
        .I4(reg2_Data),
        .O(\Using_FPGA.take_Intr_2nd_Phase_reg ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_LUT6" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_LUT6__parameterized0_346
   (ex_Result,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    Q,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Data_Read0_out,
    mul_ALU_Res,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data);
  output [0:0]ex_Result;
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input [1:0]Q;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [0:0]Data_Read0_out;
  input mul_ALU_Res;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;

  wire [0:0]Data_Read0_out;
  wire [0:0]Interrupt_Address;
  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(Q[0]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Using_FPGA.Native_1 ),
        .I3(Data_Read0_out),
        .I4(mul_ALU_Res),
        .I5(Q[1]),
        .O(ex_Result));
  LUT5 #(
    .INIT(32'hCACFCAC0)) 
    \Using_FPGA.Native_i_2__8 
       (.I0(ex_Result),
        .I1(Interrupt_Address),
        .I2(exception_kind),
        .I3(res_Forward2),
        .I4(reg2_Data),
        .O(\Using_FPGA.take_Intr_2nd_Phase_reg ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_LUT6" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_LUT6__parameterized0_349
   (ex_Result,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    Q,
    \Using_FPGA.Native_0 ,
    Data_Read_Mask,
    extend_Data_Read,
    mul_ALU_Res,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data);
  output [0:0]ex_Result;
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input [1:0]Q;
  input \Using_FPGA.Native_0 ;
  input Data_Read_Mask;
  input [0:0]extend_Data_Read;
  input mul_ALU_Res;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;

  wire Data_Read_Mask;
  wire [0:0]Interrupt_Address;
  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [0:0]extend_Data_Read;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(Q[0]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(Data_Read_Mask),
        .I3(extend_Data_Read),
        .I4(mul_ALU_Res),
        .I5(Q[1]),
        .O(ex_Result));
  LUT5 #(
    .INIT(32'hCACFCAC0)) 
    \Using_FPGA.Native_i_2__26 
       (.I0(ex_Result),
        .I1(Interrupt_Address),
        .I2(exception_kind),
        .I3(res_Forward2),
        .I4(reg2_Data),
        .O(\Using_FPGA.take_Intr_2nd_Phase_reg ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_LUT6" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_LUT6__parameterized0_352
   (ex_Result,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    Q,
    \Using_FPGA.Native_0 ,
    Data_Read_Mask,
    extend_Data_Read,
    mul_ALU_Res,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data);
  output [0:0]ex_Result;
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input [1:0]Q;
  input \Using_FPGA.Native_0 ;
  input Data_Read_Mask;
  input [0:0]extend_Data_Read;
  input mul_ALU_Res;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;

  wire Data_Read_Mask;
  wire [0:0]Interrupt_Address;
  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [0:0]extend_Data_Read;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(Q[0]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(Data_Read_Mask),
        .I3(extend_Data_Read),
        .I4(mul_ALU_Res),
        .I5(Q[1]),
        .O(ex_Result));
  LUT5 #(
    .INIT(32'hCACFCAC0)) 
    \Using_FPGA.Native_i_2__25 
       (.I0(ex_Result),
        .I1(Interrupt_Address),
        .I2(exception_kind),
        .I3(res_Forward2),
        .I4(reg2_Data),
        .O(\Using_FPGA.take_Intr_2nd_Phase_reg ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_LUT6" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_LUT6__parameterized0_355
   (ex_Result,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    Q,
    \Using_FPGA.Native_0 ,
    Data_Read_Mask,
    extend_Data_Read,
    mul_ALU_Res,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data);
  output [0:0]ex_Result;
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input [1:0]Q;
  input \Using_FPGA.Native_0 ;
  input Data_Read_Mask;
  input [0:0]extend_Data_Read;
  input mul_ALU_Res;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;

  wire Data_Read_Mask;
  wire [0:0]Interrupt_Address;
  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [0:0]extend_Data_Read;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(Q[0]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(Data_Read_Mask),
        .I3(extend_Data_Read),
        .I4(mul_ALU_Res),
        .I5(Q[1]),
        .O(ex_Result));
  LUT5 #(
    .INIT(32'hCACFCAC0)) 
    \Using_FPGA.Native_i_2__24 
       (.I0(ex_Result),
        .I1(Interrupt_Address),
        .I2(exception_kind),
        .I3(res_Forward2),
        .I4(reg2_Data),
        .O(\Using_FPGA.take_Intr_2nd_Phase_reg ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_LUT6" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_LUT6__parameterized0_358
   (ex_Result,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    Q,
    \Using_FPGA.Native_0 ,
    Data_Read_Mask,
    extend_Data_Read,
    mul_ALU_Res,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data);
  output [0:0]ex_Result;
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input [1:0]Q;
  input \Using_FPGA.Native_0 ;
  input Data_Read_Mask;
  input [0:0]extend_Data_Read;
  input mul_ALU_Res;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;

  wire Data_Read_Mask;
  wire [0:0]Interrupt_Address;
  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire [0:0]extend_Data_Read;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(Q[0]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(Data_Read_Mask),
        .I3(extend_Data_Read),
        .I4(mul_ALU_Res),
        .I5(Q[1]),
        .O(ex_Result));
  LUT5 #(
    .INIT(32'hCACFCAC0)) 
    \Using_FPGA.Native_i_2__23 
       (.I0(ex_Result),
        .I1(Interrupt_Address),
        .I2(exception_kind),
        .I3(res_Forward2),
        .I4(reg2_Data),
        .O(\Using_FPGA.take_Intr_2nd_Phase_reg ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_LUT6" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_LUT6__parameterized0_361
   (ex_Result,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    Q,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Data_Read0_out,
    mul_ALU_Res,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data);
  output [0:0]ex_Result;
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input [1:0]Q;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [0:0]Data_Read0_out;
  input mul_ALU_Res;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;

  wire [0:0]Data_Read0_out;
  wire [0:0]Interrupt_Address;
  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(Q[0]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Using_FPGA.Native_1 ),
        .I3(Data_Read0_out),
        .I4(mul_ALU_Res),
        .I5(Q[1]),
        .O(ex_Result));
  LUT5 #(
    .INIT(32'hCACFCAC0)) 
    \Using_FPGA.Native_i_2__22 
       (.I0(ex_Result),
        .I1(Interrupt_Address),
        .I2(exception_kind),
        .I3(res_Forward2),
        .I4(reg2_Data),
        .O(\Using_FPGA.take_Intr_2nd_Phase_reg ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_LUT6" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_LUT6__parameterized0_364
   (ex_Result,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    Q,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Data_Read0_out,
    mul_ALU_Res,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data);
  output [0:0]ex_Result;
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input [1:0]Q;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [0:0]Data_Read0_out;
  input mul_ALU_Res;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;

  wire [0:0]Data_Read0_out;
  wire [0:0]Interrupt_Address;
  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(Q[0]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Using_FPGA.Native_1 ),
        .I3(Data_Read0_out),
        .I4(mul_ALU_Res),
        .I5(Q[1]),
        .O(ex_Result));
  LUT5 #(
    .INIT(32'hCACFCAC0)) 
    \Using_FPGA.Native_i_2__21 
       (.I0(ex_Result),
        .I1(Interrupt_Address),
        .I2(exception_kind),
        .I3(res_Forward2),
        .I4(reg2_Data),
        .O(\Using_FPGA.take_Intr_2nd_Phase_reg ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_LUT6" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_LUT6__parameterized0_367
   (ex_Result,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    Q,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Data_Read0_out,
    mul_ALU_Res,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data);
  output [0:0]ex_Result;
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input [1:0]Q;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [0:0]Data_Read0_out;
  input mul_ALU_Res;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;

  wire [0:0]Data_Read0_out;
  wire [0:0]Interrupt_Address;
  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(Q[0]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Using_FPGA.Native_1 ),
        .I3(Data_Read0_out),
        .I4(mul_ALU_Res),
        .I5(Q[1]),
        .O(ex_Result));
  LUT5 #(
    .INIT(32'hCACFCAC0)) 
    \Using_FPGA.Native_i_2__20 
       (.I0(ex_Result),
        .I1(Interrupt_Address),
        .I2(exception_kind),
        .I3(res_Forward2),
        .I4(reg2_Data),
        .O(\Using_FPGA.take_Intr_2nd_Phase_reg ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_LUT6" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_LUT6__parameterized0_370
   (ex_Result,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    Q,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Data_Read0_out,
    mul_ALU_Res,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data);
  output [0:0]ex_Result;
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input [1:0]Q;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [0:0]Data_Read0_out;
  input mul_ALU_Res;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;

  wire [0:0]Data_Read0_out;
  wire [0:0]Interrupt_Address;
  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(Q[0]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Using_FPGA.Native_1 ),
        .I3(Data_Read0_out),
        .I4(mul_ALU_Res),
        .I5(Q[1]),
        .O(ex_Result));
  LUT5 #(
    .INIT(32'hCACFCAC0)) 
    \Using_FPGA.Native_i_2__19 
       (.I0(ex_Result),
        .I1(Interrupt_Address),
        .I2(exception_kind),
        .I3(res_Forward2),
        .I4(reg2_Data),
        .O(\Using_FPGA.take_Intr_2nd_Phase_reg ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_LUT6" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_LUT6__parameterized0_373
   (ex_Result,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    Q,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Data_Read0_out,
    mul_ALU_Res,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data);
  output [0:0]ex_Result;
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input [1:0]Q;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [0:0]Data_Read0_out;
  input mul_ALU_Res;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;

  wire [0:0]Data_Read0_out;
  wire [0:0]Interrupt_Address;
  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(Q[0]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Using_FPGA.Native_1 ),
        .I3(Data_Read0_out),
        .I4(mul_ALU_Res),
        .I5(Q[1]),
        .O(ex_Result));
  LUT5 #(
    .INIT(32'hCACFCAC0)) 
    \Using_FPGA.Native_i_2__18 
       (.I0(ex_Result),
        .I1(Interrupt_Address),
        .I2(exception_kind),
        .I3(res_Forward2),
        .I4(reg2_Data),
        .O(\Using_FPGA.take_Intr_2nd_Phase_reg ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_LUT6" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_LUT6__parameterized0_376
   (ex_Result,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    Q,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Data_Read0_out,
    mul_ALU_Res,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data);
  output [0:0]ex_Result;
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input [1:0]Q;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [0:0]Data_Read0_out;
  input mul_ALU_Res;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;

  wire [0:0]Data_Read0_out;
  wire [0:0]Interrupt_Address;
  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(Q[0]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Using_FPGA.Native_1 ),
        .I3(Data_Read0_out),
        .I4(mul_ALU_Res),
        .I5(Q[1]),
        .O(ex_Result));
  LUT5 #(
    .INIT(32'hCACFCAC0)) 
    \Using_FPGA.Native_i_2__17 
       (.I0(ex_Result),
        .I1(Interrupt_Address),
        .I2(exception_kind),
        .I3(res_Forward2),
        .I4(reg2_Data),
        .O(\Using_FPGA.take_Intr_2nd_Phase_reg ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_LUT6" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_LUT6__parameterized0_379
   (ex_Result,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    Q,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Data_Read0_out,
    mul_ALU_Res,
    Interrupt_Address,
    exception_kind,
    res_Forward2,
    reg2_Data);
  output [0:0]ex_Result;
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  input [1:0]Q;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [0:0]Data_Read0_out;
  input mul_ALU_Res;
  input [0:0]Interrupt_Address;
  input [0:0]exception_kind;
  input res_Forward2;
  input [0:0]reg2_Data;

  wire [0:0]Data_Read0_out;
  wire [0:0]Interrupt_Address;
  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]ex_Result;
  wire [0:0]exception_kind;
  wire mul_ALU_Res;
  wire [0:0]reg2_Data;
  wire res_Forward2;

  (* BOX_TYPE = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hE040E040FFFF0000)) 
    \Using_FPGA.Native 
       (.I0(Q[0]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Using_FPGA.Native_1 ),
        .I3(Data_Read0_out),
        .I4(mul_ALU_Res),
        .I5(Q[1]),
        .O(ex_Result));
  LUT5 #(
    .INIT(32'hCACFCAC0)) 
    \Using_FPGA.Native_i_2__7 
       (.I0(ex_Result),
        .I1(Interrupt_Address),
        .I2(exception_kind),
        .I3(res_Forward2),
        .I4(reg2_Data),
        .O(\Using_FPGA.take_Intr_2nd_Phase_reg ));
endmodule

module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MULT_AND
   (sub_Carry,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 );
  output sub_Carry;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;

  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire sub_Carry;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "MULT_AND" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .O(sub_Carry));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MULT_AND" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MULT_AND_819
   (DI,
    op2_C,
    alu_Op);
  output DI;
  input [0:0]op2_C;
  input [0:0]alu_Op;

  wire DI;
  wire [0:0]alu_Op;
  wire [0:0]op2_C;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "MULT_AND" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \Using_FPGA.Native 
       (.I0(op2_C),
        .I1(alu_Op),
        .O(DI));
endmodule

module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY
   (carry_7,
    SRL16_Sel_7,
    Q,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output carry_7;
  input SRL16_Sel_7;
  input [0:0]Q;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire [0:0]Q;
  wire SRL16_Sel_7;
  wire carry_7;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(1'b0),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,carry_7}),
        .CYINIT(Q),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,SRL16_Sel_7}));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MUXCY" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_127
   (zero_CI_6,
    Reg_Test_Equal,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6);
  output zero_CI_6;
  input Reg_Test_Equal;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  output lopt_5;
  input lopt_6;

  wire Reg_Test_Equal;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire lopt_7;
  wire zero_CI_6;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_5 = \^lopt_6 ;
  assign lopt_7 = lopt_6;
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(1'b0),
        .CO({\^lopt_6 ,\^lopt_4 ,\^lopt_1 ,zero_CI_6}),
        .CYINIT(1'b1),
        .DI({\^lopt_2 ,\^lopt_2 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_7,\^lopt_5 ,\^lopt_3 ,Reg_Test_Equal}));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MUXCY" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_128
   (Reg_zero,
    \Using_FPGA.Native_0 ,
    reg_Test_Equal_N,
    zero_CI_1,
    lopt);
  output Reg_zero;
  input \Using_FPGA.Native_0 ;
  input reg_Test_Equal_N;
  input zero_CI_1;
  input lopt;

  wire Reg_zero;
  wire \Using_FPGA.Native_0 ;
  wire reg_Test_Equal_N;
  wire zero_CI_1;

  assign Reg_zero = lopt;
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MUXCY" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_129
   (zero_CI_1,
    \Using_FPGA.Native_0 ,
    reg_Test_Equal_N,
    zero_CI_2,
    lopt);
  output zero_CI_1;
  input \Using_FPGA.Native_0 ;
  input reg_Test_Equal_N;
  input zero_CI_2;
  input lopt;

  wire \Using_FPGA.Native_0 ;
  wire reg_Test_Equal_N;
  wire zero_CI_1;
  wire zero_CI_2;

  assign zero_CI_1 = lopt;
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MUXCY" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_130
   (zero_CI_2,
    \Using_FPGA.Native_0 ,
    reg_Test_Equal_N,
    zero_CI_3,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6);
  output zero_CI_2;
  input \Using_FPGA.Native_0 ;
  input reg_Test_Equal_N;
  input zero_CI_3;
  output lopt;
  input lopt_1;
  output lopt_2;
  input lopt_3;
  output lopt_4;
  input lopt_5;
  input lopt_6;

  wire \Using_FPGA.Native_0 ;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire lopt_7;
  wire reg_Test_Equal_N;
  wire zero_CI_2;
  wire zero_CI_3;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_4  = lopt_3;
  assign \^lopt_6  = lopt_5;
  assign lopt = \^lopt_1 ;
  assign lopt_2 = \^lopt_3 ;
  assign lopt_4 = \^lopt_5 ;
  assign lopt_7 = lopt_6;
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(zero_CI_3),
        .CO({\^lopt_5 ,\^lopt_3 ,\^lopt_1 ,zero_CI_2}),
        .CYINIT(1'b0),
        .DI({\^lopt_6 ,reg_Test_Equal_N,reg_Test_Equal_N,reg_Test_Equal_N}),
        .O(\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_7,\^lopt_4 ,\^lopt_2 ,\Using_FPGA.Native_0 }));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MUXCY" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_131
   (zero_CI_3,
    \Using_FPGA.Native_0 ,
    reg_Test_Equal_N,
    zero_CI_4,
    lopt);
  output zero_CI_3;
  input \Using_FPGA.Native_0 ;
  input reg_Test_Equal_N;
  input zero_CI_4;
  input lopt;

  wire \Using_FPGA.Native_0 ;
  wire reg_Test_Equal_N;
  wire zero_CI_3;
  wire zero_CI_4;

  assign zero_CI_3 = lopt;
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MUXCY" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_132
   (zero_CI_4,
    \Using_FPGA.Native_0 ,
    reg_Test_Equal_N,
    zero_CI_5,
    lopt);
  output zero_CI_4;
  input \Using_FPGA.Native_0 ;
  input reg_Test_Equal_N;
  input zero_CI_5;
  input lopt;

  wire \Using_FPGA.Native_0 ;
  wire reg_Test_Equal_N;
  wire zero_CI_4;
  wire zero_CI_5;

  assign zero_CI_4 = lopt;
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MUXCY" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_133
   (zero_CI_5,
    S,
    reg_Test_Equal_N,
    zero_CI_6,
    lopt);
  output zero_CI_5;
  input S;
  input reg_Test_Equal_N;
  input zero_CI_6;
  input lopt;

  wire S;
  wire reg_Test_Equal_N;
  wire zero_CI_5;
  wire zero_CI_6;

  assign zero_CI_5 = lopt;
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MUXCY" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_34
   (carry_6,
    SRL16_Sel_6,
    carry_7,
    lopt,
    lopt_1);
  output carry_6;
  input SRL16_Sel_6;
  input carry_7;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire SRL16_Sel_6;
  wire carry_6;
  wire carry_7;

  assign carry_6 = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MUXCY" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_36
   (carry_5,
    SRL16_Sel_5,
    carry_6,
    lopt,
    lopt_1);
  output carry_5;
  input SRL16_Sel_5;
  input carry_6;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire SRL16_Sel_5;
  wire carry_5;
  wire carry_6;

  assign carry_5 = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MUXCY" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_38
   (carry_4,
    SRL16_Sel_4,
    carry_5,
    lopt,
    lopt_1);
  output carry_4;
  input SRL16_Sel_4;
  input carry_5;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire SRL16_Sel_4;
  wire carry_4;
  wire carry_5;

  assign carry_4 = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MUXCY" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_40
   (carry_3,
    SRL16_Sel_3,
    carry_4,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output carry_3;
  input SRL16_Sel_3;
  input carry_4;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire SRL16_Sel_3;
  wire carry_3;
  wire carry_4;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(carry_4),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,carry_3}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,SRL16_Sel_3}));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MUXCY" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_42
   (carry_2,
    SRL16_Sel_2,
    carry_3,
    lopt,
    lopt_1);
  output carry_2;
  input SRL16_Sel_2;
  input carry_3;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire SRL16_Sel_2;
  wire carry_2;
  wire carry_3;

  assign carry_2 = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MUXCY" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_44
   (carry_1,
    SRL16_Sel_1,
    carry_2,
    lopt,
    lopt_1);
  output carry_1;
  input SRL16_Sel_1;
  input carry_2;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire SRL16_Sel_1;
  wire carry_1;
  wire carry_2;

  assign carry_1 = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MUXCY" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_46
   (carry_0,
    SRL16_Sel_0,
    carry_1,
    lopt,
    lopt_1);
  output carry_0;
  input SRL16_Sel_0;
  input carry_1;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire SRL16_Sel_0;
  wire carry_0;
  wire carry_1;

  assign carry_0 = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MUXCY" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_48
   (Hit,
    \Area_Debug_Control.normal_stop_cmd_hold_reg ,
    Single_Step_N,
    carry_0,
    normal_stop_cmd_hold,
    normal_stop_cmd_i,
    \Using_FPGA.Native_i_6 ,
    \Using_FPGA.Native_i_6_0 );
  output Hit;
  output \Area_Debug_Control.normal_stop_cmd_hold_reg ;
  input Single_Step_N;
  input carry_0;
  input normal_stop_cmd_hold;
  input normal_stop_cmd_i;
  input \Using_FPGA.Native_i_6 ;
  input \Using_FPGA.Native_i_6_0 ;

  wire \Area_Debug_Control.normal_stop_cmd_hold_reg ;
  wire Hit;
  wire Single_Step_N;
  wire \Using_FPGA.Native_i_6 ;
  wire \Using_FPGA.Native_i_6_0 ;
  wire carry_0;
  wire normal_stop_cmd_hold;
  wire normal_stop_cmd_i;
  wire [3:1]\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED ;
  wire [3:1]\NLW_Using_FPGA.Native_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;
  wire [3:1]\NLW_Using_FPGA.Native_CARRY4_S_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(carry_0),
        .CO({\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED [3:1],Hit}),
        .CYINIT(1'b0),
        .DI({\NLW_Using_FPGA.Native_CARRY4_DI_UNCONNECTED [3:1],1'b1}),
        .O(\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_Using_FPGA.Native_CARRY4_S_UNCONNECTED [3:1],Single_Step_N}));
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    \Using_FPGA.Native_i_7 
       (.I0(normal_stop_cmd_hold),
        .I1(normal_stop_cmd_i),
        .I2(Hit),
        .I3(\Using_FPGA.Native_i_6 ),
        .I4(\Using_FPGA.Native_i_6_0 ),
        .O(\Area_Debug_Control.normal_stop_cmd_hold_reg ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MUXCY" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_60
   (correct_Carry_I,
    correct_Carry_Select,
    sub_Carry,
    correct_Carry,
    lopt,
    lopt_1,
    lopt_2);
  output correct_Carry_I;
  input correct_Carry_Select;
  input sub_Carry;
  input correct_Carry;
  output lopt;
  input lopt_1;
  input lopt_2;

  wire correct_Carry;
  wire correct_Carry_I;
  wire correct_Carry_Select;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire lopt_3;
  wire sub_Carry;
  wire [3:2]\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED ;
  wire [3:2]\NLW_Using_FPGA.Native_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;
  wire [3:2]\NLW_Using_FPGA.Native_CARRY4_S_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = lopt_2;
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(correct_Carry),
        .CO({\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED [3:2],\^lopt_1 ,correct_Carry_I}),
        .CYINIT(1'b0),
        .DI({\NLW_Using_FPGA.Native_CARRY4_DI_UNCONNECTED [3:2],\^lopt_2 ,sub_Carry}),
        .O(\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_Using_FPGA.Native_CARRY4_S_UNCONNECTED [3:2],lopt_3,correct_Carry_Select}));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MUXCY" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_63
   (correct_Carry,
    ex_Valid_reg,
    new_Carry,
    Shift_Carry_In_reg,
    is_lwx_I,
    Shift_Carry_In_reg_0,
    Shift_Carry_In_reg_1,
    Shift_Carry_In_reg_2,
    ex_Valid,
    Shift_Carry_In_reg_3,
    Shift_Carry_In_reg_4,
    lopt,
    lopt_1,
    lopt_2);
  output correct_Carry;
  output ex_Valid_reg;
  input new_Carry;
  input [0:0]Shift_Carry_In_reg;
  input is_lwx_I;
  input Shift_Carry_In_reg_0;
  input Shift_Carry_In_reg_1;
  input Shift_Carry_In_reg_2;
  input ex_Valid;
  input Shift_Carry_In_reg_3;
  input Shift_Carry_In_reg_4;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire DI_33;
  wire [0:0]Shift_Carry_In_reg;
  wire Shift_Carry_In_reg_0;
  wire Shift_Carry_In_reg_1;
  wire Shift_Carry_In_reg_2;
  wire Shift_Carry_In_reg_3;
  wire Shift_Carry_In_reg_4;
  wire \Using_FPGA.Native_i_1__106_n_0 ;
  wire correct_Carry;
  wire ex_Valid;
  wire ex_Valid_reg;
  wire is_lwx_I;
  wire new_Carry;

  assign correct_Carry = lopt;
  assign lopt_1 = DI_33;
  assign lopt_2 = \Using_FPGA.Native_i_1__106_n_0 ;
  LUT2 #(
    .INIT(4'h2)) 
    \LOCKSTEP_Master_Out[1]_INST_0_i_1 
       (.I0(ex_Valid),
        .I1(Shift_Carry_In_reg_3),
        .O(ex_Valid_reg));
  LUT3 #(
    .INIT(8'h20)) 
    \Using_FPGA.Native_i_1__106 
       (.I0(Shift_Carry_In_reg_4),
        .I1(Shift_Carry_In_reg_3),
        .I2(ex_Valid),
        .O(\Using_FPGA.Native_i_1__106_n_0 ));
  LUT6 #(
    .INIT(64'h02AAAAAAF2AAAAAA)) 
    \Using_FPGA.Native_i_2__5 
       (.I0(Shift_Carry_In_reg),
        .I1(is_lwx_I),
        .I2(Shift_Carry_In_reg_0),
        .I3(ex_Valid_reg),
        .I4(Shift_Carry_In_reg_1),
        .I5(Shift_Carry_In_reg_2),
        .O(DI_33));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MUXCY" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_68
   (correct_Carry_II,
    load_Store_i2,
    correct_Carry_I,
    lopt,
    lopt_1);
  output correct_Carry_II;
  input load_Store_i2;
  input correct_Carry_I;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire correct_Carry_I;
  wire correct_Carry_II;
  wire load_Store_i2;

  assign correct_Carry_II = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MUXCY" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_69
   (jump_Carry1,
    force_jump1,
    force_DI1,
    Reg_zero,
    lopt);
  output jump_Carry1;
  input force_jump1;
  input force_DI1;
  input Reg_zero;
  input lopt;

  wire Reg_zero;
  wire force_DI1;
  wire force_jump1;
  wire jump_Carry1;

  assign jump_Carry1 = lopt;
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MUXCY" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_70
   (jump_Carry2,
    force_jump2,
    force_DI2,
    jump_Carry1,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output jump_Carry2;
  input force_jump2;
  input force_DI2;
  input jump_Carry1;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire force_DI2;
  wire force_jump2;
  wire jump_Carry1;
  wire jump_Carry2;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(jump_Carry1),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,jump_Carry2}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,force_DI2}),
        .O(\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,force_jump2}));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MUXCY" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_71
   (dbg_pause_reg,
    inHibit_EX_reg,
    ok_To_Stop,
    R,
    S89_out,
    PC_Write,
    break_Pipe_i_reg0,
    branch_with_delay,
    trace_jump_taken_i_reg,
    jump_Carry2,
    inHibit_EX,
    force_Val2_N,
    \Using_FPGA.Native_0 ,
    take_Intr_Now_III,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    ex_Valid,
    break_Pipe_i_reg,
    break_Pipe_i_reg_0,
    Interrupt,
    break_Pipe_i_reg_1,
    delay_slot_instr_reg,
    lopt,
    lopt_1);
  output dbg_pause_reg;
  output inHibit_EX_reg;
  output ok_To_Stop;
  output R;
  output S89_out;
  output PC_Write;
  output break_Pipe_i_reg0;
  output branch_with_delay;
  input trace_jump_taken_i_reg;
  input jump_Carry2;
  input inHibit_EX;
  input force_Val2_N;
  input \Using_FPGA.Native_0 ;
  input take_Intr_Now_III;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input \Using_FPGA.Native_3 ;
  input ex_Valid;
  input break_Pipe_i_reg;
  input break_Pipe_i_reg_0;
  input Interrupt;
  input [0:0]break_Pipe_i_reg_1;
  input delay_slot_instr_reg;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire Interrupt;
  wire PC_Write;
  wire R;
  wire S89_out;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire branch_with_delay;
  wire break_Pipe_i_reg;
  wire break_Pipe_i_reg0;
  wire break_Pipe_i_reg_0;
  wire [0:0]break_Pipe_i_reg_1;
  wire dbg_pause_reg;
  wire delay_slot_instr_reg;
  wire ex_Valid;
  wire force_Val2_N;
  wire inHibit_EX;
  wire inHibit_EX_reg;
  wire jump_Carry2;
  wire ok_To_Stop;
  wire take_Intr_Now_III;
  wire trace_jump_taken_i_reg;

  assign dbg_pause_reg = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
  LUT6 #(
    .INIT(64'hFFF8FFF8FFF888F8)) 
    \Using_FPGA.Native_i_1__108 
       (.I0(inHibit_EX),
        .I1(dbg_pause_reg),
        .I2(force_Val2_N),
        .I3(\Using_FPGA.Native_0 ),
        .I4(take_Intr_Now_III),
        .I5(\Using_FPGA.Native_1 ),
        .O(inHibit_EX_reg));
  LUT3 #(
    .INIT(8'hEA)) 
    \Using_FPGA.Native_i_1__53 
       (.I0(\Using_FPGA.Native_2 ),
        .I1(inHibit_EX),
        .I2(dbg_pause_reg),
        .O(R));
  (* SOFT_HLUTNM = "soft_lutpair58" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \Using_FPGA.Native_i_1__59 
       (.I0(dbg_pause_reg),
        .I1(\Using_FPGA.Native_3 ),
        .O(PC_Write));
  LUT6 #(
    .INIT(64'h0000000000700000)) 
    break_Pipe_i_i_1
       (.I0(ex_Valid),
        .I1(break_Pipe_i_reg),
        .I2(break_Pipe_i_reg_0),
        .I3(branch_with_delay),
        .I4(Interrupt),
        .I5(break_Pipe_i_reg_1),
        .O(break_Pipe_i_reg0));
  (* SOFT_HLUTNM = "soft_lutpair58" *) 
  LUT2 #(
    .INIT(4'h8)) 
    delay_slot_instr_i_1
       (.I0(dbg_pause_reg),
        .I1(delay_slot_instr_reg),
        .O(branch_with_delay));
  (* SOFT_HLUTNM = "soft_lutpair57" *) 
  LUT2 #(
    .INIT(4'h8)) 
    ex_Valid_i_2
       (.I0(dbg_pause_reg),
        .I1(inHibit_EX),
        .O(S89_out));
  (* SOFT_HLUTNM = "soft_lutpair57" *) 
  LUT4 #(
    .INIT(16'h0070)) 
    mbar_first_i_2
       (.I0(inHibit_EX),
        .I1(dbg_pause_reg),
        .I2(\Using_FPGA.Native_0 ),
        .I3(take_Intr_Now_III),
        .O(ok_To_Stop));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MUXCY" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_72
   (new_Carry,
    ex_Valid_reg,
    select_ALU_Carry,
    Op1_Low,
    LO,
    ex_Valid,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    sync_reset,
    lopt);
  output new_Carry;
  output ex_Valid_reg;
  input select_ALU_Carry;
  input [0:0]Op1_Low;
  input LO;
  input ex_Valid;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input sync_reset;
  input lopt;

  wire LO;
  wire [0:0]Op1_Low;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire ex_Valid;
  wire ex_Valid_reg;
  wire new_Carry;
  wire select_ALU_Carry;
  wire sync_reset;

  assign new_Carry = lopt;
  LUT5 #(
    .INIT(32'hFFFF0020)) 
    \Using_FPGA.Native_i_1__57 
       (.I0(ex_Valid),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Using_FPGA.Native_1 ),
        .I3(new_Carry),
        .I4(sync_reset),
        .O(ex_Valid_reg));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MUXCY" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_727
   (CI,
    control_carry,
    carry_In,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11);
  output CI;
  input control_carry;
  input carry_In;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  output lopt_10;
  output lopt_11;

  wire CI;
  wire carry_In;
  wire control_carry;
  wire \^lopt_1 ;
  wire \^lopt_10 ;
  wire \^lopt_11 ;
  wire lopt_12;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire \^lopt_9 ;
  wire [0:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign \^lopt_9  = lopt_8;
  assign lopt = \^lopt_1 ;
  assign lopt_10 = \^lopt_11 ;
  assign lopt_11 = lopt_12;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = \^lopt_10 ;
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(1'b0),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,CI}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,carry_In}),
        .O({lopt_12,\^lopt_11 ,\^lopt_10 ,\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [0]}),
        .S({\^lopt_9 ,\^lopt_6 ,\^lopt_3 ,control_carry}));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MUXCY" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_81
   (opsel1_SPR,
    opsel1_SPR_Select,
    take_Intr_Now_III);
  output opsel1_SPR;
  input opsel1_SPR_Select;
  input take_Intr_Now_III;

  wire opsel1_SPR;
  wire opsel1_SPR_Select;
  wire take_Intr_Now_III;
  wire [3:1]\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED ;
  wire [3:1]\NLW_Using_FPGA.Native_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;
  wire [3:1]\NLW_Using_FPGA.Native_CARRY4_S_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(take_Intr_Now_III),
        .CO({\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED [3:1],opsel1_SPR}),
        .CYINIT(1'b0),
        .DI({\NLW_Using_FPGA.Native_CARRY4_DI_UNCONNECTED [3:1],1'b1}),
        .O(\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_Using_FPGA.Native_CARRY4_S_UNCONNECTED [3:1],opsel1_SPR_Select}));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MUXCY" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_82
   (take_Intr_Now_I,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    inHibit_EX,
    \Using_FPGA.Native_3 ,
    lopt,
    lopt_1,
    lopt_2);
  output take_Intr_Now_I;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input inHibit_EX;
  input \Using_FPGA.Native_3 ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire S19_out;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire inHibit_EX;
  wire take_Intr_Now_I;

  assign lopt_1 = \<const0> ;
  assign lopt_2 = S19_out;
  assign take_Intr_Now_I = lopt;
  GND GND
       (.G(\<const0> ));
  LUT4 #(
    .INIT(16'hFF01)) 
    \Using_FPGA.Native_i_1__74 
       (.I0(\Using_FPGA.Native_1 ),
        .I1(\Using_FPGA.Native_2 ),
        .I2(inHibit_EX),
        .I3(\Using_FPGA.Native_3 ),
        .O(S19_out));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MUXCY" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_821
   (CI,
    \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31] ,
    Unsigned_Op,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9);
  output CI;
  input \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31] ;
  input Unsigned_Op;
  input LO;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;

  wire \Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31] ;
  wire CI;
  wire LO;
  wire Unsigned_Op;
  wire \^lopt_1 ;
  wire lopt_10;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire \^lopt_9 ;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign \^lopt_9  = lopt_8;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_10;
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(LO),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,CI}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,Unsigned_Op}),
        .O({\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:2],lopt_10,\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [0]}),
        .S({\^lopt_9 ,\^lopt_6 ,\^lopt_3 ,\Add_Output_DFFs.M_AXI_DP_AWADDR_reg[31] }));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MUXCY" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_83
   (take_Intr_Now_II,
    take_Intr_Now_I,
    ex_Valid,
    \Using_FPGA.Native_0 ,
    break_Pipe_i_reg__0,
    \Using_FPGA.Native_1 ,
    lopt,
    lopt_1,
    lopt_2);
  output take_Intr_Now_II;
  input take_Intr_Now_I;
  input ex_Valid;
  input \Using_FPGA.Native_0 ;
  input break_Pipe_i_reg__0;
  input \Using_FPGA.Native_1 ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire S_34;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire break_Pipe_i_reg__0;
  wire ex_Valid;
  wire take_Intr_Now_I;
  wire take_Intr_Now_II;

  assign lopt_1 = \<const0> ;
  assign lopt_2 = S_34;
  assign take_Intr_Now_II = lopt;
  GND GND
       (.G(\<const0> ));
  LUT4 #(
    .INIT(16'hFF70)) 
    \Using_FPGA.Native_i_1__73 
       (.I0(ex_Valid),
        .I1(\Using_FPGA.Native_0 ),
        .I2(break_Pipe_i_reg__0),
        .I3(\Using_FPGA.Native_1 ),
        .O(S_34));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MUXCY" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_84
   (take_Intr_Now_III,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    inHibit_EX1,
    load_Store_i2,
    force_stop_cmd_hold0,
    is_lwx_I_reg,
    \Use_Async_Reset.sync_reset_reg ,
    Select_Logic0,
    D,
    take_Intr_Now_II,
    S89_out,
    ex_Valid_reg,
    \Area_Debug_Control.force_stop_cmd_hold_reg ,
    ex_Valid_reg_0,
    ex_Valid,
    \Using_FPGA.take_Intr_2nd_Phase_reg_0 ,
    inHibit_EX_reg,
    inHibit_EX,
    inHibit_EX_reg_0,
    force_stop_cmd_i,
    force_stop_cmd_hold,
    \Area_Debug_Control.force_stop_cmd_hold_reg_0 ,
    \Using_LWX_SWX_instr.reservation_reg ,
    is_lwx_I,
    \Using_LWX_SWX_instr.reservation_reg_0 ,
    \Using_LWX_SWX_instr.reservation_reg_1 ,
    \Using_LWX_SWX_instr.reservation_reg_2 ,
    sync_reset,
    instr_OF_raw,
    lopt,
    lopt_1,
    lopt_2);
  output take_Intr_Now_III;
  output \Using_FPGA.Native_0 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  output inHibit_EX1;
  output load_Store_i2;
  output force_stop_cmd_hold0;
  output is_lwx_I_reg;
  output \Use_Async_Reset.sync_reset_reg ;
  output Select_Logic0;
  output [1:0]D;
  input take_Intr_Now_II;
  input S89_out;
  input ex_Valid_reg;
  input \Area_Debug_Control.force_stop_cmd_hold_reg ;
  input ex_Valid_reg_0;
  input ex_Valid;
  input \Using_FPGA.take_Intr_2nd_Phase_reg_0 ;
  input inHibit_EX_reg;
  input inHibit_EX;
  input inHibit_EX_reg_0;
  input force_stop_cmd_i;
  input force_stop_cmd_hold;
  input \Area_Debug_Control.force_stop_cmd_hold_reg_0 ;
  input \Using_LWX_SWX_instr.reservation_reg ;
  input is_lwx_I;
  input \Using_LWX_SWX_instr.reservation_reg_0 ;
  input \Using_LWX_SWX_instr.reservation_reg_1 ;
  input \Using_LWX_SWX_instr.reservation_reg_2 ;
  input sync_reset;
  input [2:0]instr_OF_raw;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire \<const1> ;
  wire \Area_Debug_Control.force_stop_cmd_hold_reg ;
  wire \Area_Debug_Control.force_stop_cmd_hold_reg_0 ;
  wire [1:0]D;
  wire S89_out;
  wire Select_Logic0;
  wire \Use_Async_Reset.sync_reset_reg ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg_0 ;
  wire \Using_LWX_SWX_instr.reservation_i_4_n_0 ;
  wire \Using_LWX_SWX_instr.reservation_reg ;
  wire \Using_LWX_SWX_instr.reservation_reg_0 ;
  wire \Using_LWX_SWX_instr.reservation_reg_1 ;
  wire \Using_LWX_SWX_instr.reservation_reg_2 ;
  wire ex_Valid;
  wire ex_Valid_reg;
  wire ex_Valid_reg_0;
  wire force_stop_cmd_hold;
  wire force_stop_cmd_hold0;
  wire force_stop_cmd_i;
  wire inHibit_EX;
  wire inHibit_EX1;
  wire inHibit_EX_reg;
  wire inHibit_EX_reg_0;
  wire [2:0]instr_OF_raw;
  wire is_lwx_I;
  wire is_lwx_I_reg;
  wire load_Store_i2;
  wire sync_reset;
  wire take_Intr_Now_II;
  wire take_Intr_Now_III;

  assign lopt_1 = \<const0> ;
  assign lopt_2 = \<const1> ;
  assign take_Intr_Now_III = lopt;
  LUT6 #(
    .INIT(64'hEEEEE0EEE0EEE0EE)) 
    \Area_Debug_Control.force_stop_cmd_hold_i_1 
       (.I0(force_stop_cmd_i),
        .I1(force_stop_cmd_hold),
        .I2(take_Intr_Now_III),
        .I3(\Area_Debug_Control.force_stop_cmd_hold_reg ),
        .I4(\Area_Debug_Control.force_stop_cmd_hold_reg_0 ),
        .I5(inHibit_EX),
        .O(force_stop_cmd_hold0));
  GND GND
       (.G(\<const0> ));
  (* SOFT_HLUTNM = "soft_lutpair61" *) 
  LUT2 #(
    .INIT(4'h1)) 
    Select_Logic_i_1
       (.I0(take_Intr_Now_III),
        .I1(instr_OF_raw[2]),
        .O(Select_Logic0));
  LUT1 #(
    .INIT(2'h1)) 
    \Using_FPGA.Native_i_1__52 
       (.I0(take_Intr_Now_III),
        .O(load_Store_i2));
  (* SOFT_HLUTNM = "soft_lutpair59" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \Using_FPGA.Native_i_1__61 
       (.I0(sync_reset),
        .I1(take_Intr_Now_III),
        .O(\Use_Async_Reset.sync_reset_reg ));
  (* SOFT_HLUTNM = "soft_lutpair61" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \Using_FPGA.take_Intr_2nd_Phase_i_1 
       (.I0(take_Intr_Now_III),
        .I1(\Using_FPGA.take_Intr_2nd_Phase_reg_0 ),
        .O(inHibit_EX1));
  LUT6 #(
    .INIT(64'hFFFF55DF55DF55DF)) 
    \Using_LWX_SWX_instr.reservation_i_3 
       (.I0(\Using_LWX_SWX_instr.reservation_i_4_n_0 ),
        .I1(\Using_LWX_SWX_instr.reservation_reg ),
        .I2(is_lwx_I),
        .I3(\Using_LWX_SWX_instr.reservation_reg_0 ),
        .I4(\Using_LWX_SWX_instr.reservation_reg_1 ),
        .I5(\Using_LWX_SWX_instr.reservation_reg_2 ),
        .O(is_lwx_I_reg));
  (* SOFT_HLUTNM = "soft_lutpair60" *) 
  LUT2 #(
    .INIT(4'h1)) 
    \Using_LWX_SWX_instr.reservation_i_4 
       (.I0(take_Intr_Now_III),
        .I1(sync_reset),
        .O(\Using_LWX_SWX_instr.reservation_i_4_n_0 ));
  VCC VCC
       (.P(\<const1> ));
  LUT6 #(
    .INIT(64'hBBFFBBF0BB00BBF0)) 
    ex_Valid_i_1
       (.I0(take_Intr_Now_III),
        .I1(S89_out),
        .I2(ex_Valid_reg),
        .I3(\Area_Debug_Control.force_stop_cmd_hold_reg ),
        .I4(ex_Valid_reg_0),
        .I5(ex_Valid),
        .O(\Using_FPGA.Native_0 ));
  LUT6 #(
    .INIT(64'h00000000DCDDDCCC)) 
    inHibit_EX_i_1
       (.I0(take_Intr_Now_III),
        .I1(\Using_FPGA.take_Intr_2nd_Phase_reg_0 ),
        .I2(inHibit_EX_reg),
        .I3(\Area_Debug_Control.force_stop_cmd_hold_reg ),
        .I4(inHibit_EX),
        .I5(inHibit_EX_reg_0),
        .O(\Using_FPGA.take_Intr_2nd_Phase_reg ));
  (* SOFT_HLUTNM = "soft_lutpair59" *) 
  LUT3 #(
    .INIT(8'h32)) 
    \write_Addr_I[1]_i_1 
       (.I0(take_Intr_Now_III),
        .I1(sync_reset),
        .I2(instr_OF_raw[1]),
        .O(D[1]));
  (* SOFT_HLUTNM = "soft_lutpair60" *) 
  LUT3 #(
    .INIT(8'h32)) 
    \write_Addr_I[2]_i_1 
       (.I0(take_Intr_Now_III),
        .I1(sync_reset),
        .I2(instr_OF_raw[0]),
        .O(D[0]));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MUXCY" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_85
   (IReady,
    \instr_EX_i_reg[9] ,
    IReady1_out,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output IReady;
  input \instr_EX_i_reg[9] ;
  input IReady1_out;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  output lopt_5;
  output lopt_6;
  output lopt_7;
  input lopt_8;

  wire IReady;
  wire IReady1_out;
  wire \instr_EX_i_reg[9] ;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire [3:3]\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED ;
  wire [3:3]\NLW_Using_FPGA.Native_CARRY4_DI_UNCONNECTED ;
  wire [0:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_5 = \^lopt_6 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_7 = \^lopt_8 ;
  assign lopt_9 = lopt_8;
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(1'b0),
        .CO({\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED [3],\^lopt_4 ,\^lopt_1 ,IReady}),
        .CYINIT(IReady1_out),
        .DI({\NLW_Using_FPGA.Native_CARRY4_DI_UNCONNECTED [3],\^lopt_2 ,\^lopt_2 ,1'b0}),
        .O({\^lopt_8 ,\^lopt_7 ,\^lopt_6 ,\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [0]}),
        .S({lopt_9,\^lopt_5 ,\^lopt_3 ,\instr_EX_i_reg[9] }));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MUXCY" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_88
   (ifetch_carry1,
    buffer_Full,
    \Using_FPGA.Native_0 ,
    lopt,
    lopt_1);
  output ifetch_carry1;
  input buffer_Full;
  input \Using_FPGA.Native_0 ;
  input lopt;
  output lopt_1;

  wire \<const1> ;
  wire \Using_FPGA.Native_0 ;
  wire buffer_Full;
  wire ifetch_carry1;

  assign ifetch_carry1 = lopt;
  assign lopt_1 = \<const1> ;
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MUXCY" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_89
   (ifetch_carry2,
    iFetch_In_Progress_reg,
    iFetch_In_Progress_reg_0,
    \Serial_Dbg_Intf.if_debug_ready_i_reg ,
    \LOCKSTEP_Out_reg[3] ,
    ifetch_carry1,
    iFetch_In_Progress,
    missed_IFetch_reg,
    missed_IFetch_reg_0,
    missed_IFetch_reg_1,
    missed_IFetch,
    IReady1_out,
    mul_Executing,
    mbar_decode_I,
    \LOCKSTEP_Out_reg[3]_0 ,
    lopt,
    lopt_1);
  output ifetch_carry2;
  output iFetch_In_Progress_reg;
  output iFetch_In_Progress_reg_0;
  output \Serial_Dbg_Intf.if_debug_ready_i_reg ;
  input \LOCKSTEP_Out_reg[3] ;
  input ifetch_carry1;
  input iFetch_In_Progress;
  input missed_IFetch_reg;
  input missed_IFetch_reg_0;
  input missed_IFetch_reg_1;
  input missed_IFetch;
  input IReady1_out;
  input mul_Executing;
  input mbar_decode_I;
  input \LOCKSTEP_Out_reg[3]_0 ;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire IReady1_out;
  wire \LOCKSTEP_Out_reg[3] ;
  wire \LOCKSTEP_Out_reg[3]_0 ;
  wire \Serial_Dbg_Intf.if_debug_ready_i_reg ;
  wire iFetch_In_Progress;
  wire iFetch_In_Progress_reg;
  wire iFetch_In_Progress_reg_0;
  wire ifetch_carry1;
  wire ifetch_carry2;
  wire mbar_decode_I;
  wire missed_IFetch;
  wire missed_IFetch_reg;
  wire missed_IFetch_reg_0;
  wire missed_IFetch_reg_1;
  wire mul_Executing;

  assign ifetch_carry2 = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
  LUT6 #(
    .INIT(64'h00D0D0D0D0D0D0D0)) 
    I_AS_INST_0
       (.I0(iFetch_In_Progress),
        .I1(IReady1_out),
        .I2(ifetch_carry2),
        .I3(mul_Executing),
        .I4(mbar_decode_I),
        .I5(\LOCKSTEP_Out_reg[3]_0 ),
        .O(iFetch_In_Progress_reg_0));
  LUT4 #(
    .INIT(16'hAAAE)) 
    iFetch_In_Progress_i_1
       (.I0(iFetch_In_Progress_reg_0),
        .I1(iFetch_In_Progress),
        .I2(missed_IFetch_reg),
        .I3(missed_IFetch_reg_0),
        .O(iFetch_In_Progress_reg));
  LUT5 #(
    .INIT(32'h11110F00)) 
    missed_IFetch_i_1
       (.I0(missed_IFetch_reg_0),
        .I1(missed_IFetch_reg),
        .I2(iFetch_In_Progress_reg_0),
        .I3(missed_IFetch_reg_1),
        .I4(missed_IFetch),
        .O(\Serial_Dbg_Intf.if_debug_ready_i_reg ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MUXCY" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_90
   (D,
    ifetch_carry2,
    iFetch_In_Progress);
  output [0:0]D;
  input ifetch_carry2;
  input iFetch_In_Progress;

  wire [0:0]D;
  wire \Using_FPGA.Native_i_1__72_n_0 ;
  wire iFetch_In_Progress;
  wire ifetch_carry2;
  wire [3:1]\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED ;
  wire [3:1]\NLW_Using_FPGA.Native_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;
  wire [3:1]\NLW_Using_FPGA.Native_CARRY4_S_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(ifetch_carry2),
        .CO({\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED [3:1],D}),
        .CYINIT(1'b0),
        .DI({\NLW_Using_FPGA.Native_CARRY4_DI_UNCONNECTED [3:1],1'b1}),
        .O(\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_Using_FPGA.Native_CARRY4_S_UNCONNECTED [3:1],\Using_FPGA.Native_i_1__72_n_0 }));
  LUT1 #(
    .INIT(2'h1)) 
    \Using_FPGA.Native_i_1__72 
       (.I0(iFetch_In_Progress),
        .O(\Using_FPGA.Native_i_1__72_n_0 ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MUXCY" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_91
   (mul_Executing_reg,
    using_Imm_reg,
    write_Reg_reg,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    is_swx_I_reg,
    is_lwx_I_reg,
    load_Store_i_reg,
    mtsmsr_write_i_reg,
    \Use_Async_Reset.sync_reset_reg ,
    \Using_FPGA.Native_0 ,
    \Use_Async_Reset.sync_reset_reg_0 ,
    dbg_brki_hit0,
    Valid_Instr0,
    ex_Valid_1st_cycle4_out,
    mem_access_completed_reg,
    mem_access_completed_reg_0,
    \Use_Async_Reset.sync_reset_reg_1 ,
    \Use_Async_Reset.sync_reset_reg_2 ,
    E,
    \Using_FPGA.Native_1 ,
    Blocked_Valid_Instr0,
    of_PipeRun_Select,
    of_PipeRun_without_dready,
    DReady0_out,
    using_Imm_reg_0,
    using_Imm_reg_1,
    S89_out,
    take_Intr_Now_III,
    using_Imm_reg_2,
    write_Reg_reg_0,
    write_Reg_reg_1,
    write_Reg_reg_2,
    is_swx_I_reg_0,
    is_swx_I_reg_1,
    instr_OF_raw,
    is_lwx_I,
    load_Store_i_reg_0,
    ex_Valid_1st_cycle_reg,
    inHibit_EX,
    load_Store_i_reg_1,
    mtsmsr_write_i_reg_0,
    sync_reset,
    break_Pipe_i_reg__0,
    Unsigned_Op_reg,
    take_intr_2nd_cycle_reg,
    Buffer_Addr,
    Sext8_reg,
    dbg_brki_hit,
    \Area_Debug_Control.dbg_brki_hit_reg ,
    MEM_DAXI_Data_Strobe,
    DReady,
    \Using_LWX_SWX_instr.reservation_reg ,
    \Using_LWX_SWX_instr.reservation_reg_0 ,
    ex_Valid,
    load_Store_i_reg_2,
    swx_ready,
    load_Store_i_reg_3,
    swx_ready_reg,
    delay_slot_instr_reg,
    Blocked_Valid_Instr_reg,
    take_intr_Done,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output mul_Executing_reg;
  output using_Imm_reg;
  output write_Reg_reg;
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  output is_swx_I_reg;
  output is_lwx_I_reg;
  output load_Store_i_reg;
  output mtsmsr_write_i_reg;
  output \Use_Async_Reset.sync_reset_reg ;
  output \Using_FPGA.Native_0 ;
  output \Use_Async_Reset.sync_reset_reg_0 ;
  output dbg_brki_hit0;
  output Valid_Instr0;
  output ex_Valid_1st_cycle4_out;
  output mem_access_completed_reg;
  output mem_access_completed_reg_0;
  output \Use_Async_Reset.sync_reset_reg_1 ;
  output \Use_Async_Reset.sync_reset_reg_2 ;
  output [0:0]E;
  output \Using_FPGA.Native_1 ;
  output Blocked_Valid_Instr0;
  input of_PipeRun_Select;
  input of_PipeRun_without_dready;
  input DReady0_out;
  input using_Imm_reg_0;
  input using_Imm_reg_1;
  input S89_out;
  input take_Intr_Now_III;
  input using_Imm_reg_2;
  input write_Reg_reg_0;
  input write_Reg_reg_1;
  input write_Reg_reg_2;
  input is_swx_I_reg_0;
  input is_swx_I_reg_1;
  input [0:0]instr_OF_raw;
  input is_lwx_I;
  input load_Store_i_reg_0;
  input ex_Valid_1st_cycle_reg;
  input inHibit_EX;
  input load_Store_i_reg_1;
  input mtsmsr_write_i_reg_0;
  input sync_reset;
  input break_Pipe_i_reg__0;
  input Unsigned_Op_reg;
  input take_intr_2nd_cycle_reg;
  input [0:0]Buffer_Addr;
  input Sext8_reg;
  input dbg_brki_hit;
  input \Area_Debug_Control.dbg_brki_hit_reg ;
  input MEM_DAXI_Data_Strobe;
  input DReady;
  input \Using_LWX_SWX_instr.reservation_reg ;
  input \Using_LWX_SWX_instr.reservation_reg_0 ;
  input ex_Valid;
  input load_Store_i_reg_2;
  input swx_ready;
  input load_Store_i_reg_3;
  input swx_ready_reg;
  input delay_slot_instr_reg;
  input Blocked_Valid_Instr_reg;
  input take_intr_Done;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire \Area_Debug_Control.dbg_brki_hit_reg ;
  wire Blocked_Valid_Instr0;
  wire Blocked_Valid_Instr_reg;
  wire [0:0]Buffer_Addr;
  wire DReady;
  wire DReady0_out;
  wire [0:0]E;
  wire MEM_DAXI_Data_Strobe;
  wire S89_out;
  wire Sext8_reg;
  wire Unsigned_Op_reg;
  wire \Use_Async_Reset.sync_reset_reg ;
  wire \Use_Async_Reset.sync_reset_reg_0 ;
  wire \Use_Async_Reset.sync_reset_reg_1 ;
  wire \Use_Async_Reset.sync_reset_reg_2 ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire \Using_LWX_SWX_instr.reservation_reg ;
  wire \Using_LWX_SWX_instr.reservation_reg_0 ;
  wire Valid_Instr0;
  wire break_Pipe_i_reg__0;
  wire dbg_brki_hit;
  wire dbg_brki_hit0;
  wire delay_slot_instr_reg;
  wire ex_Valid;
  wire ex_Valid_1st_cycle4_out;
  wire ex_Valid_1st_cycle_reg;
  wire inHibit_EX;
  wire [0:0]instr_OF_raw;
  wire is_lwx_I;
  wire is_lwx_I_reg;
  wire is_swx_I;
  wire is_swx_I_reg;
  wire is_swx_I_reg_0;
  wire is_swx_I_reg_1;
  wire load_Store_i_reg;
  wire load_Store_i_reg_0;
  wire load_Store_i_reg_1;
  wire load_Store_i_reg_2;
  wire load_Store_i_reg_3;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire mem_access_completed_reg;
  wire mem_access_completed_reg_0;
  wire mtsmsr_write_i_reg;
  wire mtsmsr_write_i_reg_0;
  wire mul_Executing_reg;
  wire of_PipeRun_Select;
  wire of_PipeRun_without_dready;
  wire swx_ready;
  wire swx_ready_reg;
  wire sync_reset;
  wire take_Intr_Now_III;
  wire take_intr_2nd_cycle_reg;
  wire take_intr_Done;
  wire using_Imm_reg;
  wire using_Imm_reg_0;
  wire using_Imm_reg_1;
  wire using_Imm_reg_2;
  wire write_Reg_reg;
  wire write_Reg_reg_0;
  wire write_Reg_reg_1;
  wire write_Reg_reg_2;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  LUT3 #(
    .INIT(8'hF4)) 
    \Area_Debug_Control.dbg_brki_hit_i_1 
       (.I0(mul_Executing_reg),
        .I1(dbg_brki_hit),
        .I2(\Area_Debug_Control.dbg_brki_hit_reg ),
        .O(dbg_brki_hit0));
  (* SOFT_HLUTNM = "soft_lutpair66" *) 
  LUT3 #(
    .INIT(8'h08)) 
    Blocked_Valid_Instr_i_1
       (.I0(mul_Executing_reg),
        .I1(Blocked_Valid_Instr_reg),
        .I2(take_intr_Done),
        .O(Blocked_Valid_Instr0));
  (* SOFT_HLUTNM = "soft_lutpair65" *) 
  LUT3 #(
    .INIT(8'hEC)) 
    Compare_Instr_i_1
       (.I0(mul_Executing_reg),
        .I1(sync_reset),
        .I2(take_Intr_Now_III),
        .O(\Use_Async_Reset.sync_reset_reg_2 ));
  (* SOFT_HLUTNM = "soft_lutpair63" *) 
  LUT4 #(
    .INIT(16'hEAEE)) 
    Sext8_i_2
       (.I0(sync_reset),
        .I1(mul_Executing_reg),
        .I2(Unsigned_Op_reg),
        .I3(Sext8_reg),
        .O(\Use_Async_Reset.sync_reset_reg_0 ));
  (* SOFT_HLUTNM = "soft_lutpair63" *) 
  LUT3 #(
    .INIT(8'hF8)) 
    Unsigned_Op_i_1
       (.I0(Unsigned_Op_reg),
        .I1(mul_Executing_reg),
        .I2(sync_reset),
        .O(\Using_FPGA.take_Intr_2nd_Phase_reg ));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(1'b0),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,mul_Executing_reg}),
        .CYINIT(DReady0_out),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,of_PipeRun_without_dready}),
        .O(\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,of_PipeRun_Select}));
  LUT2 #(
    .INIT(4'h6)) 
    \Using_FPGA.Native_I1_i_1__0 
       (.I0(mul_Executing_reg),
        .I1(Buffer_Addr),
        .O(\Using_FPGA.Native_0 ));
  (* SOFT_HLUTNM = "soft_lutpair66" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \Using_FPGA.Native_i_1__68 
       (.I0(mul_Executing_reg),
        .I1(delay_slot_instr_reg),
        .O(\Using_FPGA.Native_1 ));
  (* SOFT_HLUTNM = "soft_lutpair62" *) 
  LUT3 #(
    .INIT(8'h2A)) 
    \Using_FPGA.Valid_Instr_i_1 
       (.I0(mul_Executing_reg),
        .I1(inHibit_EX),
        .I2(ex_Valid_1st_cycle_reg),
        .O(Valid_Instr0));
  LUT6 #(
    .INIT(64'h00000000FF01FFFF)) 
    \Using_LWX_SWX_instr.reservation_i_1 
       (.I0(mul_Executing_reg),
        .I1(MEM_DAXI_Data_Strobe),
        .I2(DReady),
        .I3(\Using_LWX_SWX_instr.reservation_reg ),
        .I4(is_swx_I_reg_0),
        .I5(\Using_LWX_SWX_instr.reservation_reg_0 ),
        .O(mem_access_completed_reg));
  LUT6 #(
    .INIT(64'hFFFF01FFFFFFFFFF)) 
    \Using_LWX_SWX_instr.reservation_i_5 
       (.I0(mul_Executing_reg),
        .I1(MEM_DAXI_Data_Strobe),
        .I2(DReady),
        .I3(ex_Valid),
        .I4(load_Store_i_reg_2),
        .I5(load_Store_i_reg_0),
        .O(mem_access_completed_reg_0));
  (* SOFT_HLUTNM = "soft_lutpair62" *) 
  LUT5 #(
    .INIT(32'h44440444)) 
    ex_Valid_1st_cycle_i_1
       (.I0(sync_reset),
        .I1(mul_Executing_reg),
        .I2(ex_Valid_1st_cycle_reg),
        .I3(inHibit_EX),
        .I4(take_Intr_Now_III),
        .O(ex_Valid_1st_cycle4_out));
  LUT5 #(
    .INIT(32'h0000222E)) 
    is_lwx_I_i_1
       (.I0(is_lwx_I),
        .I1(mul_Executing_reg),
        .I2(instr_OF_raw),
        .I3(is_swx_I_reg_1),
        .I4(is_swx_I),
        .O(is_lwx_I_reg));
  LUT6 #(
    .INIT(64'hFFFFFFFF00004500)) 
    is_lwx_I_i_3
       (.I0(mul_Executing_reg),
        .I1(swx_ready),
        .I2(load_Store_i_reg_3),
        .I3(load_Store_i_reg_0),
        .I4(load_Store_i_reg_2),
        .I5(sync_reset),
        .O(is_swx_I));
  LUT5 #(
    .INIT(32'h00002E22)) 
    is_swx_I_i_1
       (.I0(is_swx_I_reg_0),
        .I1(mul_Executing_reg),
        .I2(is_swx_I_reg_1),
        .I3(instr_OF_raw),
        .I4(is_swx_I),
        .O(is_swx_I_reg));
  LUT6 #(
    .INIT(64'h000000002EEE2222)) 
    load_Store_i_i_1
       (.I0(load_Store_i_reg_0),
        .I1(mul_Executing_reg),
        .I2(ex_Valid_1st_cycle_reg),
        .I3(inHibit_EX),
        .I4(load_Store_i_reg_1),
        .I5(is_swx_I),
        .O(load_Store_i_reg));
  (* SOFT_HLUTNM = "soft_lutpair65" *) 
  LUT4 #(
    .INIT(16'h002E)) 
    mtsmsr_write_i_i_2
       (.I0(mtsmsr_write_i_reg_0),
        .I1(mul_Executing_reg),
        .I2(take_Intr_Now_III),
        .I3(sync_reset),
        .O(mtsmsr_write_i_reg));
  (* SOFT_HLUTNM = "soft_lutpair64" *) 
  LUT4 #(
    .INIT(16'h0100)) 
    swx_ready_i_1
       (.I0(sync_reset),
        .I1(mul_Executing_reg),
        .I2(swx_ready_reg),
        .I3(is_swx_I_reg_0),
        .O(\Use_Async_Reset.sync_reset_reg_1 ));
  LUT6 #(
    .INIT(64'h0404040400005500)) 
    take_intr_2nd_cycle_i_1
       (.I0(sync_reset),
        .I1(break_Pipe_i_reg__0),
        .I2(Unsigned_Op_reg),
        .I3(take_intr_2nd_cycle_reg),
        .I4(mul_Executing_reg),
        .I5(take_Intr_Now_III),
        .O(\Use_Async_Reset.sync_reset_reg ));
  LUT6 #(
    .INIT(64'h000000002222222E)) 
    using_Imm_i_1
       (.I0(using_Imm_reg_0),
        .I1(mul_Executing_reg),
        .I2(using_Imm_reg_1),
        .I3(S89_out),
        .I4(take_Intr_Now_III),
        .I5(using_Imm_reg_2),
        .O(using_Imm_reg));
  (* SOFT_HLUTNM = "soft_lutpair64" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \write_Addr_I[0]_i_1 
       (.I0(sync_reset),
        .I1(mul_Executing_reg),
        .O(E));
  LUT6 #(
    .INIT(64'h00000000EEEEEEE2)) 
    write_Reg_i_1
       (.I0(write_Reg_reg_0),
        .I1(mul_Executing_reg),
        .I2(write_Reg_reg_1),
        .I3(write_Reg_reg_2),
        .I4(take_Intr_Now_III),
        .I5(\Using_FPGA.take_Intr_2nd_Phase_reg ),
        .O(write_Reg_reg));
endmodule

module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_XORCY
   (buffer_Addr_S_I_2,
    \Using_FPGA.Native ,
    LO,
    lopt);
  output buffer_Addr_S_I_2;
  input \Using_FPGA.Native ;
  input LO;
  input lopt;

  wire LO;
  wire \Using_FPGA.Native ;
  wire buffer_Addr_S_I_2;

  assign buffer_Addr_S_I_2 = lopt;
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MUXCY_XORCY" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_XORCY_489
   (Carry_Out,
    O,
    S,
    DI,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11);
  output Carry_Out;
  output O;
  input S;
  input DI;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  output lopt_10;
  output lopt_11;

  wire Carry_Out;
  wire DI;
  wire O;
  wire S;
  wire \^lopt_1 ;
  wire \^lopt_10 ;
  wire \^lopt_11 ;
  wire lopt_12;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire \^lopt_9 ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign \^lopt_9  = lopt_8;
  assign lopt = \^lopt_1 ;
  assign lopt_10 = \^lopt_11 ;
  assign lopt_11 = lopt_12;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = \^lopt_10 ;
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  CARRY4 \Using_FPGA.Native_I1_CARRY4 
       (.CI(1'b0),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,Carry_Out}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,DI}),
        .O({lopt_12,\^lopt_11 ,\^lopt_10 ,O}),
        .S({\^lopt_9 ,\^lopt_6 ,\^lopt_3 ,S}));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MUXCY_XORCY" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_XORCY_492
   (Carry_Out,
    O,
    S,
    LO,
    lopt,
    lopt_1,
    lopt_2);
  output Carry_Out;
  output O;
  input S;
  input LO;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire Carry_Out;
  wire LO;
  wire O;
  wire S;

  assign Carry_Out = lopt;
  assign O = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MUXCY_XORCY" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_XORCY_498
   (Carry_Out,
    O,
    S,
    LO,
    lopt,
    lopt_1,
    lopt_2);
  output Carry_Out;
  output O;
  input S;
  input LO;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire Carry_Out;
  wire LO;
  wire O;
  wire S;

  assign Carry_Out = lopt;
  assign O = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MUXCY_XORCY" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_XORCY_504
   (Carry_Out,
    O,
    S,
    LO,
    lopt,
    lopt_1,
    lopt_2);
  output Carry_Out;
  output O;
  input S;
  input LO;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire Carry_Out;
  wire LO;
  wire O;
  wire S;

  assign Carry_Out = lopt;
  assign O = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MUXCY_XORCY" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_XORCY_510
   (Carry_Out,
    O,
    S,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11);
  output Carry_Out;
  output O;
  input S;
  input LO;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  output lopt_10;
  output lopt_11;

  wire Carry_Out;
  wire LO;
  wire O;
  wire S;
  wire \^lopt_1 ;
  wire \^lopt_10 ;
  wire \^lopt_11 ;
  wire lopt_12;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire \^lopt_9 ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign \^lopt_9  = lopt_8;
  assign lopt = \^lopt_1 ;
  assign lopt_10 = \^lopt_11 ;
  assign lopt_11 = lopt_12;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = \^lopt_10 ;
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  CARRY4 \Using_FPGA.Native_I1_CARRY4 
       (.CI(LO),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,Carry_Out}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O({lopt_12,\^lopt_11 ,\^lopt_10 ,O}),
        .S({\^lopt_9 ,\^lopt_6 ,\^lopt_3 ,S}));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MUXCY_XORCY" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_XORCY_516
   (Carry_Out,
    O,
    S,
    LO,
    lopt,
    lopt_1,
    lopt_2);
  output Carry_Out;
  output O;
  input S;
  input LO;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire Carry_Out;
  wire LO;
  wire O;
  wire S;

  assign Carry_Out = lopt;
  assign O = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MUXCY_XORCY" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_XORCY_522
   (Carry_Out,
    O,
    S,
    LO,
    lopt,
    lopt_1,
    lopt_2);
  output Carry_Out;
  output O;
  input S;
  input LO;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire Carry_Out;
  wire LO;
  wire O;
  wire S;

  assign Carry_Out = lopt;
  assign O = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MUXCY_XORCY" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_XORCY_528
   (Carry_Out,
    O,
    S,
    LO,
    lopt,
    lopt_1,
    lopt_2);
  output Carry_Out;
  output O;
  input S;
  input LO;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire Carry_Out;
  wire LO;
  wire O;
  wire S;

  assign Carry_Out = lopt;
  assign O = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MUXCY_XORCY" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_XORCY_534
   (Carry_Out,
    O,
    S,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11);
  output Carry_Out;
  output O;
  input S;
  input LO;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  output lopt_10;
  output lopt_11;

  wire Carry_Out;
  wire LO;
  wire O;
  wire S;
  wire \^lopt_1 ;
  wire \^lopt_10 ;
  wire \^lopt_11 ;
  wire lopt_12;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire \^lopt_9 ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign \^lopt_9  = lopt_8;
  assign lopt = \^lopt_1 ;
  assign lopt_10 = \^lopt_11 ;
  assign lopt_11 = lopt_12;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = \^lopt_10 ;
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  CARRY4 \Using_FPGA.Native_I1_CARRY4 
       (.CI(LO),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,Carry_Out}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O({lopt_12,\^lopt_11 ,\^lopt_10 ,O}),
        .S({\^lopt_9 ,\^lopt_6 ,\^lopt_3 ,S}));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MUXCY_XORCY" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_XORCY_540
   (Carry_Out,
    O,
    S,
    LO,
    lopt,
    lopt_1,
    lopt_2);
  output Carry_Out;
  output O;
  input S;
  input LO;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire Carry_Out;
  wire LO;
  wire O;
  wire S;

  assign Carry_Out = lopt;
  assign O = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MUXCY_XORCY" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_XORCY_546
   (Carry_Out,
    O,
    S,
    LO,
    lopt,
    lopt_1,
    lopt_2);
  output Carry_Out;
  output O;
  input S;
  input LO;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire Carry_Out;
  wire LO;
  wire O;
  wire S;

  assign Carry_Out = lopt;
  assign O = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MUXCY_XORCY" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_XORCY_552
   (Carry_Out,
    O,
    S,
    LO,
    lopt,
    lopt_1,
    lopt_2);
  output Carry_Out;
  output O;
  input S;
  input LO;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire Carry_Out;
  wire LO;
  wire O;
  wire S;

  assign Carry_Out = lopt;
  assign O = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MUXCY_XORCY" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_XORCY_558
   (Carry_Out,
    O,
    S,
    LO,
    lopt,
    lopt_1);
  output Carry_Out;
  output O;
  input S;
  input LO;
  output lopt;
  input lopt_1;

  wire Carry_Out;
  wire LO;
  wire O;
  wire S;
  wire \^lopt_1 ;
  wire lopt_2;
  wire [3:1]\NLW_Using_FPGA.Native_I1_CARRY4_CO_UNCONNECTED ;
  wire [3:1]\NLW_Using_FPGA.Native_I1_CARRY4_DI_UNCONNECTED ;
  wire [3:2]\NLW_Using_FPGA.Native_I1_CARRY4_O_UNCONNECTED ;
  wire [3:2]\NLW_Using_FPGA.Native_I1_CARRY4_S_UNCONNECTED ;

  assign lopt = \^lopt_1 ;
  assign lopt_2 = lopt_1;
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  CARRY4 \Using_FPGA.Native_I1_CARRY4 
       (.CI(LO),
        .CO({\NLW_Using_FPGA.Native_I1_CARRY4_CO_UNCONNECTED [3:1],Carry_Out}),
        .CYINIT(1'b0),
        .DI({\NLW_Using_FPGA.Native_I1_CARRY4_DI_UNCONNECTED [3:1],1'b0}),
        .O({\NLW_Using_FPGA.Native_I1_CARRY4_O_UNCONNECTED [3:2],\^lopt_1 ,O}),
        .S({\NLW_Using_FPGA.Native_I1_CARRY4_S_UNCONNECTED [3:2],lopt_2,S}));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MUXCY_XORCY" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_XORCY_564
   (pc_Sum,
    xor_Sum,
    LO,
    lopt);
  output pc_Sum;
  input xor_Sum;
  input LO;
  input lopt;

  wire LO;
  wire pc_Sum;
  wire xor_Sum;

  assign pc_Sum = lopt;
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MUXCY_XORCY" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_XORCY_758
   (EX_CarryOut,
    \Using_FPGA.Native ,
    S,
    DI,
    EX_CarryIn,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input S;
  input DI;
  input EX_CarryIn;
  input lopt;
  input lopt_1;

  wire DI;
  wire EX_CarryIn;
  wire EX_CarryOut;
  wire S;
  wire [0:0]\Using_FPGA.Native ;

  assign EX_CarryOut = lopt;
  assign \Using_FPGA.Native  = lopt_1;
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MUXCY_XORCY" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_XORCY_760
   (EX_CarryOut,
    \Using_FPGA.Native ,
    S,
    DI,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input S;
  input DI;
  input LO;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  output lopt_10;
  output lopt_11;

  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;
  wire [0:0]\Using_FPGA.Native ;
  wire \^lopt_1 ;
  wire \^lopt_10 ;
  wire \^lopt_11 ;
  wire lopt_12;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire \^lopt_9 ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign \^lopt_9  = lopt_8;
  assign lopt = \^lopt_1 ;
  assign lopt_10 = \^lopt_11 ;
  assign lopt_11 = lopt_12;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = \^lopt_10 ;
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  CARRY4 \Using_FPGA.Native_I1_CARRY4 
       (.CI(LO),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,EX_CarryOut}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,DI}),
        .O({lopt_12,\^lopt_11 ,\^lopt_10 ,\Using_FPGA.Native }),
        .S({\^lopt_9 ,\^lopt_6 ,\^lopt_3 ,S}));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MUXCY_XORCY" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_XORCY_762
   (EX_CarryOut,
    \Using_FPGA.Native ,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;
  wire [0:0]\Using_FPGA.Native ;

  assign EX_CarryOut = lopt;
  assign \Using_FPGA.Native  = lopt_1;
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MUXCY_XORCY" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_XORCY_764
   (EX_CarryOut,
    \Using_FPGA.Native ,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;
  wire [0:0]\Using_FPGA.Native ;

  assign EX_CarryOut = lopt;
  assign \Using_FPGA.Native  = lopt_1;
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MUXCY_XORCY" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_XORCY_766
   (EX_CarryOut,
    \Using_FPGA.Native ,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;
  wire [0:0]\Using_FPGA.Native ;

  assign EX_CarryOut = lopt;
  assign \Using_FPGA.Native  = lopt_1;
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MUXCY_XORCY" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_XORCY_768
   (EX_CarryOut,
    \Using_FPGA.Native ,
    S,
    DI,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input S;
  input DI;
  input LO;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  output lopt_10;
  output lopt_11;

  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;
  wire [0:0]\Using_FPGA.Native ;
  wire \^lopt_1 ;
  wire \^lopt_10 ;
  wire \^lopt_11 ;
  wire lopt_12;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire \^lopt_9 ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign \^lopt_9  = lopt_8;
  assign lopt = \^lopt_1 ;
  assign lopt_10 = \^lopt_11 ;
  assign lopt_11 = lopt_12;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = \^lopt_10 ;
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  CARRY4 \Using_FPGA.Native_I1_CARRY4 
       (.CI(LO),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,EX_CarryOut}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,DI}),
        .O({lopt_12,\^lopt_11 ,\^lopt_10 ,\Using_FPGA.Native }),
        .S({\^lopt_9 ,\^lopt_6 ,\^lopt_3 ,S}));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MUXCY_XORCY" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_XORCY_770
   (EX_CarryOut,
    \Using_FPGA.Native ,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;
  wire [0:0]\Using_FPGA.Native ;

  assign EX_CarryOut = lopt;
  assign \Using_FPGA.Native  = lopt_1;
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MUXCY_XORCY" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_XORCY_772
   (EX_CarryOut,
    raw_Data_Addr,
    S,
    DI,
    EX_CarryIn,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]raw_Data_Addr;
  input S;
  input DI;
  input EX_CarryIn;
  input lopt;
  input lopt_1;

  wire DI;
  wire EX_CarryIn;
  wire EX_CarryOut;
  wire S;
  wire [0:0]raw_Data_Addr;

  assign EX_CarryOut = lopt;
  assign raw_Data_Addr = lopt_1;
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MUXCY_XORCY" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_XORCY_774
   (EX_CarryOut,
    raw_Data_Addr,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]raw_Data_Addr;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;
  wire [0:0]raw_Data_Addr;

  assign EX_CarryOut = lopt;
  assign raw_Data_Addr = lopt_1;
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MUXCY_XORCY" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_XORCY_776
   (EX_CarryOut,
    \Using_FPGA.Native ,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;
  wire [0:0]\Using_FPGA.Native ;

  assign EX_CarryOut = lopt;
  assign \Using_FPGA.Native  = lopt_1;
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MUXCY_XORCY" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_XORCY_778
   (EX_CarryOut,
    \Using_FPGA.Native ,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;
  wire [0:0]\Using_FPGA.Native ;

  assign EX_CarryOut = lopt;
  assign \Using_FPGA.Native  = lopt_1;
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MUXCY_XORCY" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_XORCY_780
   (EX_CarryOut,
    \Using_FPGA.Native ,
    S,
    DI,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input S;
  input DI;
  input LO;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  output lopt_10;
  output lopt_11;

  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;
  wire [0:0]\Using_FPGA.Native ;
  wire \^lopt_1 ;
  wire \^lopt_10 ;
  wire \^lopt_11 ;
  wire lopt_12;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire \^lopt_9 ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign \^lopt_9  = lopt_8;
  assign lopt = \^lopt_1 ;
  assign lopt_10 = \^lopt_11 ;
  assign lopt_11 = lopt_12;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = \^lopt_10 ;
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  CARRY4 \Using_FPGA.Native_I1_CARRY4 
       (.CI(LO),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,EX_CarryOut}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,DI}),
        .O({lopt_12,\^lopt_11 ,\^lopt_10 ,\Using_FPGA.Native }),
        .S({\^lopt_9 ,\^lopt_6 ,\^lopt_3 ,S}));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MUXCY_XORCY" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_XORCY_782
   (EX_CarryOut,
    \Using_FPGA.Native ,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;
  wire [0:0]\Using_FPGA.Native ;

  assign EX_CarryOut = lopt;
  assign \Using_FPGA.Native  = lopt_1;
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MUXCY_XORCY" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_XORCY_784
   (EX_CarryOut,
    \Using_FPGA.Native ,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;
  wire [0:0]\Using_FPGA.Native ;

  assign EX_CarryOut = lopt;
  assign \Using_FPGA.Native  = lopt_1;
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MUXCY_XORCY" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_XORCY_786
   (EX_CarryOut,
    \Using_FPGA.Native ,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;
  wire [0:0]\Using_FPGA.Native ;

  assign EX_CarryOut = lopt;
  assign \Using_FPGA.Native  = lopt_1;
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MUXCY_XORCY" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_XORCY_788
   (EX_CarryOut,
    \Using_FPGA.Native ,
    S,
    DI,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input S;
  input DI;
  input LO;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  output lopt_10;
  output lopt_11;

  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;
  wire [0:0]\Using_FPGA.Native ;
  wire \^lopt_1 ;
  wire \^lopt_10 ;
  wire \^lopt_11 ;
  wire lopt_12;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire \^lopt_9 ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign \^lopt_9  = lopt_8;
  assign lopt = \^lopt_1 ;
  assign lopt_10 = \^lopt_11 ;
  assign lopt_11 = lopt_12;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = \^lopt_10 ;
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  CARRY4 \Using_FPGA.Native_I1_CARRY4 
       (.CI(LO),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,EX_CarryOut}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,DI}),
        .O({lopt_12,\^lopt_11 ,\^lopt_10 ,\Using_FPGA.Native }),
        .S({\^lopt_9 ,\^lopt_6 ,\^lopt_3 ,S}));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MUXCY_XORCY" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_XORCY_790
   (EX_CarryOut,
    \Using_FPGA.Native ,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;
  wire [0:0]\Using_FPGA.Native ;

  assign EX_CarryOut = lopt;
  assign \Using_FPGA.Native  = lopt_1;
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MUXCY_XORCY" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_XORCY_792
   (EX_CarryOut,
    \Using_FPGA.Native ,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;
  wire [0:0]\Using_FPGA.Native ;

  assign EX_CarryOut = lopt;
  assign \Using_FPGA.Native  = lopt_1;
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MUXCY_XORCY" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_XORCY_794
   (EX_CarryOut,
    \Using_FPGA.Native ,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;
  wire [0:0]\Using_FPGA.Native ;

  assign EX_CarryOut = lopt;
  assign \Using_FPGA.Native  = lopt_1;
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MUXCY_XORCY" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_XORCY_796
   (EX_CarryOut,
    \Using_FPGA.Native ,
    S,
    DI,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input S;
  input DI;
  input LO;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  output lopt_10;
  output lopt_11;

  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;
  wire [0:0]\Using_FPGA.Native ;
  wire \^lopt_1 ;
  wire \^lopt_10 ;
  wire \^lopt_11 ;
  wire lopt_12;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire \^lopt_9 ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign \^lopt_9  = lopt_8;
  assign lopt = \^lopt_1 ;
  assign lopt_10 = \^lopt_11 ;
  assign lopt_11 = lopt_12;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = \^lopt_10 ;
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  CARRY4 \Using_FPGA.Native_I1_CARRY4 
       (.CI(LO),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,EX_CarryOut}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,DI}),
        .O({lopt_12,\^lopt_11 ,\^lopt_10 ,\Using_FPGA.Native }),
        .S({\^lopt_9 ,\^lopt_6 ,\^lopt_3 ,S}));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MUXCY_XORCY" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_XORCY_798
   (EX_CarryOut,
    \Using_FPGA.Native ,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;
  wire [0:0]\Using_FPGA.Native ;

  assign EX_CarryOut = lopt;
  assign \Using_FPGA.Native  = lopt_1;
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MUXCY_XORCY" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_XORCY_800
   (EX_CarryOut,
    \Using_FPGA.Native ,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;
  wire [0:0]\Using_FPGA.Native ;

  assign EX_CarryOut = lopt;
  assign \Using_FPGA.Native  = lopt_1;
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MUXCY_XORCY" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_XORCY_802
   (EX_CarryOut,
    \Using_FPGA.Native ,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;
  wire [0:0]\Using_FPGA.Native ;

  assign EX_CarryOut = lopt;
  assign \Using_FPGA.Native  = lopt_1;
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MUXCY_XORCY" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_XORCY_804
   (EX_CarryOut,
    \Using_FPGA.Native ,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;
  wire [0:0]\Using_FPGA.Native ;

  assign EX_CarryOut = lopt;
  assign \Using_FPGA.Native  = lopt_1;
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MUXCY_XORCY" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_XORCY_806
   (EX_CarryOut,
    \Using_FPGA.Native ,
    S,
    DI,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input S;
  input DI;
  input LO;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  output lopt_10;
  output lopt_11;

  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;
  wire [0:0]\Using_FPGA.Native ;
  wire \^lopt_1 ;
  wire \^lopt_10 ;
  wire \^lopt_11 ;
  wire lopt_12;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire \^lopt_9 ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign \^lopt_9  = lopt_8;
  assign lopt = \^lopt_1 ;
  assign lopt_10 = \^lopt_11 ;
  assign lopt_11 = lopt_12;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = \^lopt_10 ;
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  CARRY4 \Using_FPGA.Native_I1_CARRY4 
       (.CI(LO),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,EX_CarryOut}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,DI}),
        .O({lopt_12,\^lopt_11 ,\^lopt_10 ,\Using_FPGA.Native }),
        .S({\^lopt_9 ,\^lopt_6 ,\^lopt_3 ,S}));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MUXCY_XORCY" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_XORCY_808
   (EX_CarryOut,
    \Using_FPGA.Native ,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;
  wire [0:0]\Using_FPGA.Native ;

  assign EX_CarryOut = lopt;
  assign \Using_FPGA.Native  = lopt_1;
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MUXCY_XORCY" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_XORCY_810
   (EX_CarryOut,
    \Using_FPGA.Native ,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;
  wire [0:0]\Using_FPGA.Native ;

  assign EX_CarryOut = lopt;
  assign \Using_FPGA.Native  = lopt_1;
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MUXCY_XORCY" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_XORCY_812
   (EX_CarryOut,
    \Using_FPGA.Native ,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;
  wire [0:0]\Using_FPGA.Native ;

  assign EX_CarryOut = lopt;
  assign \Using_FPGA.Native  = lopt_1;
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MUXCY_XORCY" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_XORCY_814
   (EX_CarryOut,
    \Using_FPGA.Native ,
    S,
    DI,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input S;
  input DI;
  input LO;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  output lopt_10;
  output lopt_11;

  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;
  wire [0:0]\Using_FPGA.Native ;
  wire \^lopt_1 ;
  wire \^lopt_10 ;
  wire \^lopt_11 ;
  wire lopt_12;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire \^lopt_9 ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign \^lopt_9  = lopt_8;
  assign lopt = \^lopt_1 ;
  assign lopt_10 = \^lopt_11 ;
  assign lopt_11 = lopt_12;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = \^lopt_10 ;
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  CARRY4 \Using_FPGA.Native_I1_CARRY4 
       (.CI(LO),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,EX_CarryOut}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,DI}),
        .O({lopt_12,\^lopt_11 ,\^lopt_10 ,\Using_FPGA.Native }),
        .S({\^lopt_9 ,\^lopt_6 ,\^lopt_3 ,S}));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MUXCY_XORCY" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_XORCY_816
   (EX_CarryOut,
    \Using_FPGA.Native ,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;
  wire [0:0]\Using_FPGA.Native ;

  assign EX_CarryOut = lopt;
  assign \Using_FPGA.Native  = lopt_1;
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MUXCY_XORCY" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_XORCY_818
   (EX_CarryOut,
    \Using_FPGA.Native ,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]\Using_FPGA.Native ;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;
  wire [0:0]\Using_FPGA.Native ;

  assign EX_CarryOut = lopt;
  assign \Using_FPGA.Native  = lopt_1;
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MUXCY_XORCY" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_XORCY_820
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    S,
    DI,
    CI,
    lopt,
    lopt_1);
  output \Using_FPGA.Native ;
  output [0:0]\Using_FPGA.Native_0 ;
  input S;
  input DI;
  input CI;
  input lopt;
  input lopt_1;

  wire CI;
  wire DI;
  wire S;
  wire \Using_FPGA.Native ;
  wire [0:0]\Using_FPGA.Native_0 ;

  assign \Using_FPGA.Native  = lopt;
  assign \Using_FPGA.Native_0  = lopt_1;
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MUXCY_XORCY" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_XORCY_93
   (LO,
    O,
    S,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    lopt,
    lopt_1);
  output LO;
  output O;
  input S;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input lopt;
  input lopt_1;

  wire LO;
  wire O;
  wire S;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;

  assign LO = lopt;
  assign O = lopt_1;
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MUXCY_XORCY" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXCY_XORCY_95
   (LO,
    O,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    CI,
    lopt,
    lopt_1);
  output LO;
  output O;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input CI;
  input lopt;
  input lopt_1;

  wire CI;
  wire LO;
  wire O;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;

  assign LO = lopt;
  assign O = lopt_1;
endmodule

module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXF7
   (Select_Logic_reg,
    Select_Logic,
    shift_Res,
    logic_Res_i);
  output Select_Logic_reg;
  input Select_Logic;
  input shift_Res;
  input logic_Res_i;

  wire Select_Logic;
  wire Select_Logic_reg;
  wire logic_Res_i;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(shift_Res),
        .I1(logic_Res_i),
        .O(Select_Logic_reg),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MUXF7" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXF7_167
   (Select_Logic_reg,
    Select_Logic,
    shift_Res,
    logic_Res_i);
  output Select_Logic_reg;
  input Select_Logic;
  input shift_Res;
  input logic_Res_i;

  wire Select_Logic;
  wire Select_Logic_reg;
  wire logic_Res_i;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(shift_Res),
        .I1(logic_Res_i),
        .O(Select_Logic_reg),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MUXF7" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXF7_170
   (Select_Logic_reg,
    Select_Logic,
    shift_Res,
    logic_Res_i);
  output Select_Logic_reg;
  input Select_Logic;
  input shift_Res;
  input logic_Res_i;

  wire Select_Logic;
  wire Select_Logic_reg;
  wire logic_Res_i;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(shift_Res),
        .I1(logic_Res_i),
        .O(Select_Logic_reg),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MUXF7" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXF7_173
   (Select_Logic_reg,
    Select_Logic,
    shift_Res,
    logic_Res_i);
  output Select_Logic_reg;
  input Select_Logic;
  input shift_Res;
  input logic_Res_i;

  wire Select_Logic;
  wire Select_Logic_reg;
  wire logic_Res_i;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(shift_Res),
        .I1(logic_Res_i),
        .O(Select_Logic_reg),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MUXF7" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXF7_176
   (Select_Logic_reg,
    Select_Logic,
    shift_Res,
    logic_Res_i);
  output Select_Logic_reg;
  input Select_Logic;
  input shift_Res;
  input logic_Res_i;

  wire Select_Logic;
  wire Select_Logic_reg;
  wire logic_Res_i;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(shift_Res),
        .I1(logic_Res_i),
        .O(Select_Logic_reg),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MUXF7" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXF7_179
   (Select_Logic_reg,
    Select_Logic,
    shift_Res,
    logic_Res_i);
  output Select_Logic_reg;
  input Select_Logic;
  input shift_Res;
  input logic_Res_i;

  wire Select_Logic;
  wire Select_Logic_reg;
  wire logic_Res_i;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(shift_Res),
        .I1(logic_Res_i),
        .O(Select_Logic_reg),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MUXF7" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXF7_182
   (Select_Logic_reg,
    Select_Logic,
    shift_Res,
    logic_Res_i);
  output Select_Logic_reg;
  input Select_Logic;
  input shift_Res;
  input logic_Res_i;

  wire Select_Logic;
  wire Select_Logic_reg;
  wire logic_Res_i;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(shift_Res),
        .I1(logic_Res_i),
        .O(Select_Logic_reg),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MUXF7" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXF7_185
   (Shift_Logic_Res,
    Select_Logic,
    shift_Res,
    logic_Res_i);
  output Shift_Logic_Res;
  input Select_Logic;
  input shift_Res;
  input logic_Res_i;

  wire Select_Logic;
  wire Shift_Logic_Res;
  wire logic_Res_i;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(shift_Res),
        .I1(logic_Res_i),
        .O(Shift_Logic_Res),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MUXF7" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXF7_188
   (Select_Logic_reg,
    Select_Logic,
    shift_Res,
    logic_Res_i);
  output Select_Logic_reg;
  input Select_Logic;
  input shift_Res;
  input logic_Res_i;

  wire Select_Logic;
  wire Select_Logic_reg;
  wire logic_Res_i;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(shift_Res),
        .I1(logic_Res_i),
        .O(Select_Logic_reg),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MUXF7" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXF7_191
   (Select_Logic_reg,
    Select_Logic,
    shift_Res,
    logic_Res_i);
  output Select_Logic_reg;
  input Select_Logic;
  input shift_Res;
  input logic_Res_i;

  wire Select_Logic;
  wire Select_Logic_reg;
  wire logic_Res_i;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(shift_Res),
        .I1(logic_Res_i),
        .O(Select_Logic_reg),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MUXF7" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXF7_194
   (Select_Logic_reg,
    Select_Logic,
    shift_Res,
    logic_Res_i);
  output Select_Logic_reg;
  input Select_Logic;
  input shift_Res;
  input logic_Res_i;

  wire Select_Logic;
  wire Select_Logic_reg;
  wire logic_Res_i;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(shift_Res),
        .I1(logic_Res_i),
        .O(Select_Logic_reg),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MUXF7" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXF7_197
   (Select_Logic_reg,
    Select_Logic,
    shift_Res,
    logic_Res_i);
  output Select_Logic_reg;
  input Select_Logic;
  input shift_Res;
  input logic_Res_i;

  wire Select_Logic;
  wire Select_Logic_reg;
  wire logic_Res_i;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(shift_Res),
        .I1(logic_Res_i),
        .O(Select_Logic_reg),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MUXF7" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXF7_200
   (Select_Logic_reg,
    Select_Logic,
    shift_Res,
    logic_Res_i);
  output Select_Logic_reg;
  input Select_Logic;
  input shift_Res;
  input logic_Res_i;

  wire Select_Logic;
  wire Select_Logic_reg;
  wire logic_Res_i;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(shift_Res),
        .I1(logic_Res_i),
        .O(Select_Logic_reg),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MUXF7" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXF7_203
   (Select_Logic_reg,
    Select_Logic,
    shift_Res,
    logic_Res_i);
  output Select_Logic_reg;
  input Select_Logic;
  input shift_Res;
  input logic_Res_i;

  wire Select_Logic;
  wire Select_Logic_reg;
  wire logic_Res_i;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(shift_Res),
        .I1(logic_Res_i),
        .O(Select_Logic_reg),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MUXF7" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXF7_206
   (Select_Logic_reg,
    Select_Logic,
    shift_Res,
    logic_Res_i);
  output Select_Logic_reg;
  input Select_Logic;
  input shift_Res;
  input logic_Res_i;

  wire Select_Logic;
  wire Select_Logic_reg;
  wire logic_Res_i;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(shift_Res),
        .I1(logic_Res_i),
        .O(Select_Logic_reg),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MUXF7" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXF7_209
   (Select_Logic_reg,
    Select_Logic,
    shift_Res,
    logic_Res_i);
  output Select_Logic_reg;
  input Select_Logic;
  input shift_Res;
  input logic_Res_i;

  wire Select_Logic;
  wire Select_Logic_reg;
  wire logic_Res_i;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(shift_Res),
        .I1(logic_Res_i),
        .O(Select_Logic_reg),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MUXF7" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXF7_212
   (Select_Logic_reg,
    Select_Logic,
    shift_Res,
    logic_Res_i);
  output Select_Logic_reg;
  input Select_Logic;
  input shift_Res;
  input logic_Res_i;

  wire Select_Logic;
  wire Select_Logic_reg;
  wire logic_Res_i;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(shift_Res),
        .I1(logic_Res_i),
        .O(Select_Logic_reg),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MUXF7" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXF7_215
   (Select_Logic_reg,
    Select_Logic,
    shift_Res,
    logic_Res_i);
  output Select_Logic_reg;
  input Select_Logic;
  input shift_Res;
  input logic_Res_i;

  wire Select_Logic;
  wire Select_Logic_reg;
  wire logic_Res_i;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(shift_Res),
        .I1(logic_Res_i),
        .O(Select_Logic_reg),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MUXF7" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXF7_218
   (Select_Logic_reg,
    Select_Logic,
    shift_Res,
    logic_Res_i);
  output Select_Logic_reg;
  input Select_Logic;
  input shift_Res;
  input logic_Res_i;

  wire Select_Logic;
  wire Select_Logic_reg;
  wire logic_Res_i;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(shift_Res),
        .I1(logic_Res_i),
        .O(Select_Logic_reg),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MUXF7" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXF7_221
   (Select_Logic_reg,
    Select_Logic,
    shift_Res,
    logic_Res_i);
  output Select_Logic_reg;
  input Select_Logic;
  input shift_Res;
  input logic_Res_i;

  wire Select_Logic;
  wire Select_Logic_reg;
  wire logic_Res_i;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(shift_Res),
        .I1(logic_Res_i),
        .O(Select_Logic_reg),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MUXF7" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXF7_224
   (Select_Logic_reg,
    Select_Logic,
    shift_Res,
    logic_Res_i);
  output Select_Logic_reg;
  input Select_Logic;
  input shift_Res;
  input logic_Res_i;

  wire Select_Logic;
  wire Select_Logic_reg;
  wire logic_Res_i;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(shift_Res),
        .I1(logic_Res_i),
        .O(Select_Logic_reg),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MUXF7" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXF7_227
   (Select_Logic_reg,
    Select_Logic,
    shift_Res,
    logic_Res_i);
  output Select_Logic_reg;
  input Select_Logic;
  input shift_Res;
  input logic_Res_i;

  wire Select_Logic;
  wire Select_Logic_reg;
  wire logic_Res_i;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(shift_Res),
        .I1(logic_Res_i),
        .O(Select_Logic_reg),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MUXF7" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXF7_230
   (Select_Logic_reg,
    Select_Logic,
    shift_Res,
    logic_Res_i);
  output Select_Logic_reg;
  input Select_Logic;
  input shift_Res;
  input logic_Res_i;

  wire Select_Logic;
  wire Select_Logic_reg;
  wire logic_Res_i;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(shift_Res),
        .I1(logic_Res_i),
        .O(Select_Logic_reg),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MUXF7" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXF7_233
   (Select_Logic_reg,
    Select_Logic,
    shift_Res,
    logic_Res_i);
  output Select_Logic_reg;
  input Select_Logic;
  input shift_Res;
  input logic_Res_i;

  wire Select_Logic;
  wire Select_Logic_reg;
  wire logic_Res_i;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(shift_Res),
        .I1(logic_Res_i),
        .O(Select_Logic_reg),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MUXF7" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXF7_236
   (Select_Logic_reg,
    Select_Logic,
    shift_Res,
    logic_Res_i);
  output Select_Logic_reg;
  input Select_Logic;
  input shift_Res;
  input logic_Res_i;

  wire Select_Logic;
  wire Select_Logic_reg;
  wire logic_Res_i;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(shift_Res),
        .I1(logic_Res_i),
        .O(Select_Logic_reg),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MUXF7" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXF7_239
   (Select_Logic_reg,
    Select_Logic,
    shift_Res,
    logic_Res_i);
  output Select_Logic_reg;
  input Select_Logic;
  input shift_Res;
  input logic_Res_i;

  wire Select_Logic;
  wire Select_Logic_reg;
  wire logic_Res_i;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(shift_Res),
        .I1(logic_Res_i),
        .O(Select_Logic_reg),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MUXF7" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXF7_242
   (Select_Logic_reg,
    Select_Logic,
    shift_Res,
    logic_Res_i);
  output Select_Logic_reg;
  input Select_Logic;
  input shift_Res;
  input logic_Res_i;

  wire Select_Logic;
  wire Select_Logic_reg;
  wire logic_Res_i;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(shift_Res),
        .I1(logic_Res_i),
        .O(Select_Logic_reg),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MUXF7" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXF7_245
   (Select_Logic_reg,
    Select_Logic,
    shift_Res,
    logic_Res_i);
  output Select_Logic_reg;
  input Select_Logic;
  input shift_Res;
  input logic_Res_i;

  wire Select_Logic;
  wire Select_Logic_reg;
  wire logic_Res_i;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(shift_Res),
        .I1(logic_Res_i),
        .O(Select_Logic_reg),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MUXF7" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXF7_248
   (Select_Logic_reg,
    Select_Logic,
    shift_Res,
    logic_Res_i);
  output Select_Logic_reg;
  input Select_Logic;
  input shift_Res;
  input logic_Res_i;

  wire Select_Logic;
  wire Select_Logic_reg;
  wire logic_Res_i;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(shift_Res),
        .I1(logic_Res_i),
        .O(Select_Logic_reg),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MUXF7" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXF7_251
   (Select_Logic_reg,
    Select_Logic,
    shift_Res,
    logic_Res_i);
  output Select_Logic_reg;
  input Select_Logic;
  input shift_Res;
  input logic_Res_i;

  wire Select_Logic;
  wire Select_Logic_reg;
  wire logic_Res_i;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(shift_Res),
        .I1(logic_Res_i),
        .O(Select_Logic_reg),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MUXF7" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXF7_254
   (Select_Logic_reg,
    Select_Logic,
    shift_Res,
    logic_Res_i);
  output Select_Logic_reg;
  input Select_Logic;
  input shift_Res;
  input logic_Res_i;

  wire Select_Logic;
  wire Select_Logic_reg;
  wire logic_Res_i;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(shift_Res),
        .I1(logic_Res_i),
        .O(Select_Logic_reg),
        .S(Select_Logic));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_MUXF7" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_MUXF7_257
   (Select_Logic_reg,
    Select_Logic,
    shift_Res,
    logic_Res_i);
  output Select_Logic_reg;
  input Select_Logic;
  input shift_Res;
  input logic_Res_i;

  wire Select_Logic;
  wire Select_Logic_reg;
  wire logic_Res_i;
  wire shift_Res;

  (* BOX_TYPE = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(shift_Res),
        .I1(logic_Res_i),
        .O(Select_Logic_reg),
        .S(Select_Logic));
endmodule

module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E
   (\Using_FPGA.Native ,
    use_Reg_Neg_DI_i24_out,
    \Using_FPGA.Native_0 ,
    force_Val1_i25_out,
    use_Reg_Neg_S_i26_out,
    \Using_FPGA.Native_1 ,
    d_AS_I16_out,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    CI,
    Y,
    \Result_Sel_reg[0] ,
    \Result_Sel_reg[0]_0 ,
    \Result_Sel_reg[0]_1 ,
    Clk,
    \Using_FPGA.Native_4 ,
    \Using_FPGA.Native_5 ,
    \Using_FPGA.Native_6 ,
    d_AS_I_reg,
    \Using_FPGA.Native_7 ,
    \Using_FPGA.Native_8 ,
    \Using_FPGA.Native_9 ,
    take_Intr_Now_III,
    d_AS_I_reg_0,
    d_AS_I_reg_1,
    inHibit_EX);
  output \Using_FPGA.Native ;
  output use_Reg_Neg_DI_i24_out;
  output \Using_FPGA.Native_0 ;
  output force_Val1_i25_out;
  output use_Reg_Neg_S_i26_out;
  output \Using_FPGA.Native_1 ;
  output d_AS_I16_out;
  output \Using_FPGA.Native_2 ;
  output \Using_FPGA.Native_3 ;
  input CI;
  input [0:0]Y;
  input \Result_Sel_reg[0] ;
  input \Result_Sel_reg[0]_0 ;
  input \Result_Sel_reg[0]_1 ;
  input Clk;
  input \Using_FPGA.Native_4 ;
  input \Using_FPGA.Native_5 ;
  input \Using_FPGA.Native_6 ;
  input d_AS_I_reg;
  input \Using_FPGA.Native_7 ;
  input \Using_FPGA.Native_8 ;
  input \Using_FPGA.Native_9 ;
  input take_Intr_Now_III;
  input d_AS_I_reg_0;
  input d_AS_I_reg_1;
  input inHibit_EX;

  wire CI;
  wire Clk;
  wire \Result_Sel_reg[0] ;
  wire \Result_Sel_reg[0]_0 ;
  wire \Result_Sel_reg[0]_1 ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_5 ;
  wire \Using_FPGA.Native_6 ;
  wire \Using_FPGA.Native_7 ;
  wire \Using_FPGA.Native_8 ;
  wire \Using_FPGA.Native_9 ;
  wire [0:0]Y;
  wire d_AS_I16_out;
  wire d_AS_I_reg;
  wire d_AS_I_reg_0;
  wire d_AS_I_reg_1;
  wire force_Val1_i25_out;
  wire inHibit_EX;
  wire take_Intr_Now_III;
  wire use_Reg_Neg_DI_i24_out;
  wire use_Reg_Neg_S_i26_out;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[0].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\Result_Sel_reg[0] ),
        .A1(\Result_Sel_reg[0]_0 ),
        .A2(\Result_Sel_reg[0]_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(Y),
        .Q(\Using_FPGA.Native ));
  (* SOFT_HLUTNM = "soft_lutpair49" *) 
  LUT4 #(
    .INIT(16'h2008)) 
    \Using_FPGA.Native_i_1__45 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_4 ),
        .I2(\Using_FPGA.Native_5 ),
        .I3(\Using_FPGA.Native_6 ),
        .O(use_Reg_Neg_DI_i24_out));
  LUT3 #(
    .INIT(8'h08)) 
    \Using_FPGA.Native_i_1__46 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_4 ),
        .I2(\Using_FPGA.Native_5 ),
        .O(force_Val1_i25_out));
  (* SOFT_HLUTNM = "soft_lutpair49" *) 
  LUT4 #(
    .INIT(16'h0820)) 
    \Using_FPGA.Native_i_1__47 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_4 ),
        .I2(\Using_FPGA.Native_5 ),
        .I3(\Using_FPGA.Native_6 ),
        .O(use_Reg_Neg_S_i26_out));
  LUT6 #(
    .INIT(64'h0000000020000000)) 
    \Using_FPGA.Native_i_1__48 
       (.I0(\Using_FPGA.Native ),
        .I1(d_AS_I_reg),
        .I2(\Using_FPGA.Native_7 ),
        .I3(\Using_FPGA.Native_8 ),
        .I4(\Using_FPGA.Native_9 ),
        .I5(take_Intr_Now_III),
        .O(\Using_FPGA.Native_0 ));
  LUT6 #(
    .INIT(64'h0444000000000000)) 
    d_AS_I_i_1
       (.I0(take_Intr_Now_III),
        .I1(d_AS_I_reg_0),
        .I2(d_AS_I_reg_1),
        .I3(inHibit_EX),
        .I4(\Using_FPGA.Native ),
        .I5(d_AS_I_reg),
        .O(d_AS_I16_out));
  (* SOFT_HLUTNM = "soft_lutpair50" *) 
  LUT3 #(
    .INIT(8'hDF)) 
    inHibit_EX_i_4
       (.I0(\Using_FPGA.Native ),
        .I1(d_AS_I_reg),
        .I2(\Using_FPGA.Native_7 ),
        .O(\Using_FPGA.Native_1 ));
  (* SOFT_HLUTNM = "soft_lutpair50" *) 
  LUT3 #(
    .INIT(8'h08)) 
    load_Store_i_i_2
       (.I0(\Using_FPGA.Native ),
        .I1(d_AS_I_reg),
        .I2(take_Intr_Now_III),
        .O(\Using_FPGA.Native_2 ));
  LUT1 #(
    .INIT(2'h1)) 
    select_ALU_Carry_i_1
       (.I0(\Using_FPGA.Native ),
        .O(\Using_FPGA.Native_3 ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_SRL16E" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E_100
   (D,
    \Use_Async_Reset.sync_reset_reg ,
    of_mbar_decode,
    CI,
    Y,
    \instr_EX_i_reg[14] ,
    \instr_EX_i_reg[14]_0 ,
    \instr_EX_i_reg[14]_1 ,
    Clk,
    sync_reset,
    mbar_hold_I_reg,
    mbar_hold_I_reg_0,
    mbar_hold_I_reg_1,
    take_Intr_Now_III,
    mbar_decode_I_reg);
  output [0:0]D;
  output \Use_Async_Reset.sync_reset_reg ;
  output of_mbar_decode;
  input CI;
  input [0:0]Y;
  input \instr_EX_i_reg[14] ;
  input \instr_EX_i_reg[14]_0 ;
  input \instr_EX_i_reg[14]_1 ;
  input Clk;
  input sync_reset;
  input mbar_hold_I_reg;
  input mbar_hold_I_reg_0;
  input mbar_hold_I_reg_1;
  input take_Intr_Now_III;
  input mbar_decode_I_reg;

  wire CI;
  wire Clk;
  wire [0:0]D;
  wire \Use_Async_Reset.sync_reset_reg ;
  wire [0:0]Y;
  wire \instr_EX_i_reg[14] ;
  wire \instr_EX_i_reg[14]_0 ;
  wire \instr_EX_i_reg[14]_1 ;
  wire mbar_decode_I_reg;
  wire mbar_hold_I_reg;
  wire mbar_hold_I_reg_0;
  wire mbar_hold_I_reg_1;
  wire of_mbar_decode;
  wire sync_reset;
  wire take_Intr_Now_III;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[14].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\instr_EX_i_reg[14] ),
        .A1(\instr_EX_i_reg[14]_0 ),
        .A2(\instr_EX_i_reg[14]_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(Y),
        .Q(D));
  LUT3 #(
    .INIT(8'h04)) 
    mbar_decode_I_i_1
       (.I0(take_Intr_Now_III),
        .I1(D),
        .I2(mbar_decode_I_reg),
        .O(of_mbar_decode));
  LUT5 #(
    .INIT(32'h44440050)) 
    mbar_hold_I_i_1
       (.I0(sync_reset),
        .I1(of_mbar_decode),
        .I2(mbar_hold_I_reg),
        .I3(mbar_hold_I_reg_0),
        .I4(mbar_hold_I_reg_1),
        .O(\Use_Async_Reset.sync_reset_reg ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_SRL16E" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E_101
   (D,
    CI,
    Y,
    \instr_EX_i_reg[15] ,
    \instr_EX_i_reg[15]_0 ,
    \instr_EX_i_reg[15]_1 ,
    Clk);
  output [0:0]D;
  input CI;
  input [0:0]Y;
  input \instr_EX_i_reg[15] ;
  input \instr_EX_i_reg[15]_0 ;
  input \instr_EX_i_reg[15]_1 ;
  input Clk;

  wire CI;
  wire Clk;
  wire [0:0]D;
  wire [0:0]Y;
  wire \instr_EX_i_reg[15] ;
  wire \instr_EX_i_reg[15]_0 ;
  wire \instr_EX_i_reg[15]_1 ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[15].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\instr_EX_i_reg[15] ),
        .A1(\instr_EX_i_reg[15]_0 ),
        .A2(\instr_EX_i_reg[15]_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(Y),
        .Q(D));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_SRL16E" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E_102
   (\Using_FPGA.Native ,
    D_0,
    D_1,
    D_2,
    D_3,
    D_4,
    D_5,
    D_6,
    D_7,
    D_8,
    D_9,
    D_10,
    D_11,
    D_12,
    D_13,
    D_14,
    D_15,
    D_16,
    CI,
    Y,
    \instr_EX_i_reg[16] ,
    \instr_EX_i_reg[16]_0 ,
    \instr_EX_i_reg[16]_1 ,
    Clk,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 ,
    \Using_FPGA.Native_5 ,
    \Using_FPGA.Native_6 ,
    \Using_FPGA.Native_7 ,
    \Using_FPGA.Native_8 ,
    \Using_FPGA.Native_9 ,
    \Using_FPGA.Native_10 ,
    \Using_FPGA.Native_11 ,
    \Using_FPGA.Native_12 ,
    \Using_FPGA.Native_13 ,
    \Using_FPGA.Native_14 ,
    \Using_FPGA.Native_15 ,
    \Using_FPGA.Native_16 ,
    \Using_FPGA.Native_17 ,
    \Using_FPGA.Native_18 ,
    \Using_FPGA.Native_19 );
  output \Using_FPGA.Native ;
  output D_0;
  output D_1;
  output D_2;
  output D_3;
  output D_4;
  output D_5;
  output D_6;
  output D_7;
  output D_8;
  output D_9;
  output D_10;
  output D_11;
  output D_12;
  output D_13;
  output D_14;
  output D_15;
  output D_16;
  input CI;
  input [0:0]Y;
  input \instr_EX_i_reg[16] ;
  input \instr_EX_i_reg[16]_0 ;
  input \instr_EX_i_reg[16]_1 ;
  input Clk;
  input \Using_FPGA.Native_0 ;
  input [15:0]\Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input \Using_FPGA.Native_3 ;
  input \Using_FPGA.Native_4 ;
  input \Using_FPGA.Native_5 ;
  input \Using_FPGA.Native_6 ;
  input \Using_FPGA.Native_7 ;
  input \Using_FPGA.Native_8 ;
  input \Using_FPGA.Native_9 ;
  input \Using_FPGA.Native_10 ;
  input \Using_FPGA.Native_11 ;
  input \Using_FPGA.Native_12 ;
  input \Using_FPGA.Native_13 ;
  input \Using_FPGA.Native_14 ;
  input \Using_FPGA.Native_15 ;
  input \Using_FPGA.Native_16 ;
  input \Using_FPGA.Native_17 ;
  input \Using_FPGA.Native_18 ;
  input \Using_FPGA.Native_19 ;

  wire CI;
  wire Clk;
  wire D_0;
  wire D_1;
  wire D_10;
  wire D_11;
  wire D_12;
  wire D_13;
  wire D_14;
  wire D_15;
  wire D_16;
  wire D_2;
  wire D_3;
  wire D_4;
  wire D_5;
  wire D_6;
  wire D_7;
  wire D_8;
  wire D_9;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [15:0]\Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_10 ;
  wire \Using_FPGA.Native_11 ;
  wire \Using_FPGA.Native_12 ;
  wire \Using_FPGA.Native_13 ;
  wire \Using_FPGA.Native_14 ;
  wire \Using_FPGA.Native_15 ;
  wire \Using_FPGA.Native_16 ;
  wire \Using_FPGA.Native_17 ;
  wire \Using_FPGA.Native_18 ;
  wire \Using_FPGA.Native_19 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_5 ;
  wire \Using_FPGA.Native_6 ;
  wire \Using_FPGA.Native_7 ;
  wire \Using_FPGA.Native_8 ;
  wire \Using_FPGA.Native_9 ;
  wire [0:0]Y;
  wire \instr_EX_i_reg[16] ;
  wire \instr_EX_i_reg[16]_0 ;
  wire \instr_EX_i_reg[16]_1 ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[16].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\instr_EX_i_reg[16] ),
        .A1(\instr_EX_i_reg[16]_0 ),
        .A2(\instr_EX_i_reg[16]_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(Y),
        .Q(\Using_FPGA.Native ));
  LUT5 #(
    .INIT(32'hF0CCAACC)) 
    \Using_FPGA.Native_i_1__10 
       (.I0(\Using_FPGA.Native ),
        .I1(\Using_FPGA.Native_10 ),
        .I2(\Using_FPGA.Native_1 [8]),
        .I3(\Using_FPGA.Native_2 ),
        .I4(\Using_FPGA.Native_3 ),
        .O(D_7));
  LUT5 #(
    .INIT(32'hF0CCAACC)) 
    \Using_FPGA.Native_i_1__11 
       (.I0(\Using_FPGA.Native ),
        .I1(\Using_FPGA.Native_11 ),
        .I2(\Using_FPGA.Native_1 [7]),
        .I3(\Using_FPGA.Native_2 ),
        .I4(\Using_FPGA.Native_3 ),
        .O(D_8));
  LUT5 #(
    .INIT(32'hF0CCAACC)) 
    \Using_FPGA.Native_i_1__12 
       (.I0(\Using_FPGA.Native ),
        .I1(\Using_FPGA.Native_12 ),
        .I2(\Using_FPGA.Native_1 [6]),
        .I3(\Using_FPGA.Native_2 ),
        .I4(\Using_FPGA.Native_3 ),
        .O(D_9));
  LUT5 #(
    .INIT(32'hF0CCAACC)) 
    \Using_FPGA.Native_i_1__13 
       (.I0(\Using_FPGA.Native ),
        .I1(\Using_FPGA.Native_13 ),
        .I2(\Using_FPGA.Native_1 [5]),
        .I3(\Using_FPGA.Native_2 ),
        .I4(\Using_FPGA.Native_3 ),
        .O(D_10));
  LUT5 #(
    .INIT(32'hF0CCAACC)) 
    \Using_FPGA.Native_i_1__14 
       (.I0(\Using_FPGA.Native ),
        .I1(\Using_FPGA.Native_14 ),
        .I2(\Using_FPGA.Native_1 [4]),
        .I3(\Using_FPGA.Native_2 ),
        .I4(\Using_FPGA.Native_3 ),
        .O(D_11));
  LUT5 #(
    .INIT(32'hF0CCAACC)) 
    \Using_FPGA.Native_i_1__15 
       (.I0(\Using_FPGA.Native ),
        .I1(\Using_FPGA.Native_15 ),
        .I2(\Using_FPGA.Native_1 [3]),
        .I3(\Using_FPGA.Native_2 ),
        .I4(\Using_FPGA.Native_3 ),
        .O(D_12));
  LUT5 #(
    .INIT(32'hF0CCAACC)) 
    \Using_FPGA.Native_i_1__16 
       (.I0(\Using_FPGA.Native ),
        .I1(\Using_FPGA.Native_16 ),
        .I2(\Using_FPGA.Native_1 [2]),
        .I3(\Using_FPGA.Native_2 ),
        .I4(\Using_FPGA.Native_3 ),
        .O(D_13));
  LUT5 #(
    .INIT(32'hF0CCAACC)) 
    \Using_FPGA.Native_i_1__17 
       (.I0(\Using_FPGA.Native ),
        .I1(\Using_FPGA.Native_17 ),
        .I2(\Using_FPGA.Native_1 [1]),
        .I3(\Using_FPGA.Native_2 ),
        .I4(\Using_FPGA.Native_3 ),
        .O(D_14));
  LUT5 #(
    .INIT(32'hF0CCAACC)) 
    \Using_FPGA.Native_i_1__18 
       (.I0(\Using_FPGA.Native ),
        .I1(\Using_FPGA.Native_18 ),
        .I2(\Using_FPGA.Native_1 [0]),
        .I3(\Using_FPGA.Native_2 ),
        .I4(\Using_FPGA.Native_3 ),
        .O(D_15));
  LUT3 #(
    .INIT(8'hCA)) 
    \Using_FPGA.Native_i_1__19 
       (.I0(\Using_FPGA.Native_19 ),
        .I1(\Using_FPGA.Native ),
        .I2(\Using_FPGA.Native_2 ),
        .O(D_16));
  LUT5 #(
    .INIT(32'hF0CCAACC)) 
    \Using_FPGA.Native_i_1__3 
       (.I0(\Using_FPGA.Native ),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Using_FPGA.Native_1 [15]),
        .I3(\Using_FPGA.Native_2 ),
        .I4(\Using_FPGA.Native_3 ),
        .O(D_0));
  LUT5 #(
    .INIT(32'hF0CCAACC)) 
    \Using_FPGA.Native_i_1__4 
       (.I0(\Using_FPGA.Native ),
        .I1(\Using_FPGA.Native_4 ),
        .I2(\Using_FPGA.Native_1 [14]),
        .I3(\Using_FPGA.Native_2 ),
        .I4(\Using_FPGA.Native_3 ),
        .O(D_1));
  LUT5 #(
    .INIT(32'hF0CCAACC)) 
    \Using_FPGA.Native_i_1__5 
       (.I0(\Using_FPGA.Native ),
        .I1(\Using_FPGA.Native_5 ),
        .I2(\Using_FPGA.Native_1 [13]),
        .I3(\Using_FPGA.Native_2 ),
        .I4(\Using_FPGA.Native_3 ),
        .O(D_2));
  LUT5 #(
    .INIT(32'hF0CCAACC)) 
    \Using_FPGA.Native_i_1__6 
       (.I0(\Using_FPGA.Native ),
        .I1(\Using_FPGA.Native_6 ),
        .I2(\Using_FPGA.Native_1 [12]),
        .I3(\Using_FPGA.Native_2 ),
        .I4(\Using_FPGA.Native_3 ),
        .O(D_3));
  LUT5 #(
    .INIT(32'hF0CCAACC)) 
    \Using_FPGA.Native_i_1__7 
       (.I0(\Using_FPGA.Native ),
        .I1(\Using_FPGA.Native_7 ),
        .I2(\Using_FPGA.Native_1 [11]),
        .I3(\Using_FPGA.Native_2 ),
        .I4(\Using_FPGA.Native_3 ),
        .O(D_4));
  LUT5 #(
    .INIT(32'hF0CCAACC)) 
    \Using_FPGA.Native_i_1__8 
       (.I0(\Using_FPGA.Native ),
        .I1(\Using_FPGA.Native_8 ),
        .I2(\Using_FPGA.Native_1 [10]),
        .I3(\Using_FPGA.Native_2 ),
        .I4(\Using_FPGA.Native_3 ),
        .O(D_5));
  LUT5 #(
    .INIT(32'hF0CCAACC)) 
    \Using_FPGA.Native_i_1__9 
       (.I0(\Using_FPGA.Native ),
        .I1(\Using_FPGA.Native_9 ),
        .I2(\Using_FPGA.Native_1 [9]),
        .I3(\Using_FPGA.Native_2 ),
        .I4(\Using_FPGA.Native_3 ),
        .O(D_6));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_SRL16E" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E_103
   (\Using_FPGA.Native ,
    mtsmsr_write_i_reg,
    D_17,
    CI,
    Y,
    \instr_EX_i_reg[17] ,
    \instr_EX_i_reg[17]_0 ,
    \instr_EX_i_reg[17]_1 ,
    Clk,
    mtsmsr_write_i_reg_0,
    mtsmsr_write_i_reg_1,
    mtsmsr_write_i_reg_2,
    mtsmsr_write_i_reg_3,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 );
  output \Using_FPGA.Native ;
  output mtsmsr_write_i_reg;
  output D_17;
  input CI;
  input [0:0]Y;
  input \instr_EX_i_reg[17] ;
  input \instr_EX_i_reg[17]_0 ;
  input \instr_EX_i_reg[17]_1 ;
  input Clk;
  input mtsmsr_write_i_reg_0;
  input mtsmsr_write_i_reg_1;
  input mtsmsr_write_i_reg_2;
  input mtsmsr_write_i_reg_3;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;

  wire CI;
  wire Clk;
  wire D_17;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire [0:0]Y;
  wire \instr_EX_i_reg[17] ;
  wire \instr_EX_i_reg[17]_0 ;
  wire \instr_EX_i_reg[17]_1 ;
  wire mtsmsr_write_i_reg;
  wire mtsmsr_write_i_reg_0;
  wire mtsmsr_write_i_reg_1;
  wire mtsmsr_write_i_reg_2;
  wire mtsmsr_write_i_reg_3;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[17].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\instr_EX_i_reg[17] ),
        .A1(\instr_EX_i_reg[17]_0 ),
        .A2(\instr_EX_i_reg[17]_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(Y),
        .Q(\Using_FPGA.Native ));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__20 
       (.I0(\Using_FPGA.Native ),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Using_FPGA.Native_1 ),
        .O(D_17));
  LUT5 #(
    .INIT(32'hA2222222)) 
    mtsmsr_write_i_i_1
       (.I0(mtsmsr_write_i_reg_0),
        .I1(mtsmsr_write_i_reg_1),
        .I2(\Using_FPGA.Native ),
        .I3(mtsmsr_write_i_reg_2),
        .I4(mtsmsr_write_i_reg_3),
        .O(mtsmsr_write_i_reg));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_SRL16E" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E_104
   (D,
    D_18,
    CI,
    Y,
    \instr_EX_i_reg[18] ,
    \instr_EX_i_reg[18]_0 ,
    \instr_EX_i_reg[18]_1 ,
    Clk,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 );
  output [0:0]D;
  output D_18;
  input CI;
  input [0:0]Y;
  input \instr_EX_i_reg[18] ;
  input \instr_EX_i_reg[18]_0 ;
  input \instr_EX_i_reg[18]_1 ;
  input Clk;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;

  wire CI;
  wire Clk;
  wire [0:0]D;
  wire D_18;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]Y;
  wire \instr_EX_i_reg[18] ;
  wire \instr_EX_i_reg[18]_0 ;
  wire \instr_EX_i_reg[18]_1 ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[18].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\instr_EX_i_reg[18] ),
        .A1(\instr_EX_i_reg[18]_0 ),
        .A2(\instr_EX_i_reg[18]_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(Y),
        .Q(D));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__21 
       (.I0(D),
        .I1(\Using_FPGA.Native ),
        .I2(\Using_FPGA.Native_0 ),
        .O(D_18));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_SRL16E" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E_105
   (D,
    D_19,
    CI,
    Y,
    \instr_EX_i_reg[19] ,
    \instr_EX_i_reg[19]_0 ,
    \instr_EX_i_reg[19]_1 ,
    Clk,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 );
  output [0:0]D;
  output D_19;
  input CI;
  input [0:0]Y;
  input \instr_EX_i_reg[19] ;
  input \instr_EX_i_reg[19]_0 ;
  input \instr_EX_i_reg[19]_1 ;
  input Clk;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;

  wire CI;
  wire Clk;
  wire [0:0]D;
  wire D_19;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]Y;
  wire \instr_EX_i_reg[19] ;
  wire \instr_EX_i_reg[19]_0 ;
  wire \instr_EX_i_reg[19]_1 ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[19].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\instr_EX_i_reg[19] ),
        .A1(\instr_EX_i_reg[19]_0 ),
        .A2(\instr_EX_i_reg[19]_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(Y),
        .Q(D));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__22 
       (.I0(D),
        .I1(\Using_FPGA.Native ),
        .I2(\Using_FPGA.Native_0 ),
        .O(D_19));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_SRL16E" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E_106
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    byte_i13_out,
    writing,
    CI,
    Y,
    \Result_Sel_reg[1] ,
    \Result_Sel_reg[1]_0 ,
    \Result_Sel_reg[1]_1 ,
    Clk,
    writing_reg,
    is_swx_I_reg,
    is_swx_I_reg_0,
    is_swx_I_reg_1,
    is_swx_I_reg_2,
    byte_i_reg,
    take_Intr_Now_III,
    writing_reg_0);
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  output byte_i13_out;
  output writing;
  input CI;
  input [0:0]Y;
  input \Result_Sel_reg[1] ;
  input \Result_Sel_reg[1]_0 ;
  input \Result_Sel_reg[1]_1 ;
  input Clk;
  input writing_reg;
  input is_swx_I_reg;
  input is_swx_I_reg_0;
  input is_swx_I_reg_1;
  input is_swx_I_reg_2;
  input byte_i_reg;
  input take_Intr_Now_III;
  input writing_reg_0;

  wire CI;
  wire Clk;
  wire \Result_Sel_reg[1] ;
  wire \Result_Sel_reg[1]_0 ;
  wire \Result_Sel_reg[1]_1 ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]Y;
  wire byte_i13_out;
  wire byte_i_reg;
  wire is_swx_I_reg;
  wire is_swx_I_reg_0;
  wire is_swx_I_reg_1;
  wire is_swx_I_reg_2;
  wire take_Intr_Now_III;
  wire writing;
  wire writing_reg;
  wire writing_reg_0;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[1].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\Result_Sel_reg[1] ),
        .A1(\Result_Sel_reg[1]_0 ),
        .A2(\Result_Sel_reg[1]_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(Y),
        .Q(\Using_FPGA.Native ));
  (* SOFT_HLUTNM = "soft_lutpair52" *) 
  LUT4 #(
    .INIT(16'h8AAA)) 
    doublet_Read_i_i_2
       (.I0(byte_i_reg),
        .I1(take_Intr_Now_III),
        .I2(\Using_FPGA.Native ),
        .I3(writing_reg),
        .O(byte_i13_out));
  LUT6 #(
    .INIT(64'hFFFFFFFFF7FFFFFF)) 
    is_lwx_I_i_2
       (.I0(\Using_FPGA.Native ),
        .I1(writing_reg),
        .I2(is_swx_I_reg),
        .I3(is_swx_I_reg_0),
        .I4(is_swx_I_reg_1),
        .I5(is_swx_I_reg_2),
        .O(\Using_FPGA.Native_0 ));
  (* SOFT_HLUTNM = "soft_lutpair52" *) 
  LUT4 #(
    .INIT(16'h4000)) 
    writing_i_1
       (.I0(take_Intr_Now_III),
        .I1(\Using_FPGA.Native ),
        .I2(writing_reg),
        .I3(writing_reg_0),
        .O(writing));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_SRL16E" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E_107
   (D,
    D_20,
    CI,
    Y,
    \instr_EX_i_reg[20] ,
    \instr_EX_i_reg[20]_0 ,
    \instr_EX_i_reg[20]_1 ,
    Clk,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 );
  output [0:0]D;
  output D_20;
  input CI;
  input [0:0]Y;
  input \instr_EX_i_reg[20] ;
  input \instr_EX_i_reg[20]_0 ;
  input \instr_EX_i_reg[20]_1 ;
  input Clk;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;

  wire CI;
  wire Clk;
  wire [0:0]D;
  wire D_20;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]Y;
  wire \instr_EX_i_reg[20] ;
  wire \instr_EX_i_reg[20]_0 ;
  wire \instr_EX_i_reg[20]_1 ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[20].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\instr_EX_i_reg[20] ),
        .A1(\instr_EX_i_reg[20]_0 ),
        .A2(\instr_EX_i_reg[20]_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(Y),
        .Q(D));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__23 
       (.I0(D),
        .I1(\Using_FPGA.Native ),
        .I2(\Using_FPGA.Native_0 ),
        .O(D_20));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_SRL16E" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E_108
   (\Using_FPGA.Native ,
    D_21,
    \Using_FPGA.Native_0 ,
    CI,
    Y,
    \instr_EX_i_reg[21] ,
    \instr_EX_i_reg[21]_0 ,
    \instr_EX_i_reg[21]_1 ,
    Clk,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    D);
  output \Using_FPGA.Native ;
  output D_21;
  output \Using_FPGA.Native_0 ;
  input CI;
  input [0:0]Y;
  input \instr_EX_i_reg[21] ;
  input \instr_EX_i_reg[21]_0 ;
  input \instr_EX_i_reg[21]_1 ;
  input Clk;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input [4:0]D;

  wire CI;
  wire Clk;
  wire [4:0]D;
  wire D_21;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire [0:0]Y;
  wire \instr_EX_i_reg[21] ;
  wire \instr_EX_i_reg[21]_0 ;
  wire \instr_EX_i_reg[21]_1 ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[21].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\instr_EX_i_reg[21] ),
        .A1(\instr_EX_i_reg[21]_0 ),
        .A2(\instr_EX_i_reg[21]_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(Y),
        .Q(\Using_FPGA.Native ));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    \Using_FPGA.Native_i_11 
       (.I0(\Using_FPGA.Native ),
        .I1(D[0]),
        .I2(D[1]),
        .I3(D[2]),
        .I4(D[4]),
        .I5(D[3]),
        .O(\Using_FPGA.Native_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__24 
       (.I0(\Using_FPGA.Native ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(\Using_FPGA.Native_2 ),
        .O(D_21));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_SRL16E" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E_109
   (D,
    D_22,
    \Using_FPGA.Native ,
    CI,
    Y,
    \instr_EX_i_reg[22] ,
    \instr_EX_i_reg[22]_0 ,
    \instr_EX_i_reg[22]_1 ,
    Clk,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_i_6 );
  output [0:0]D;
  output D_22;
  output \Using_FPGA.Native ;
  input CI;
  input [0:0]Y;
  input \instr_EX_i_reg[22] ;
  input \instr_EX_i_reg[22]_0 ;
  input \instr_EX_i_reg[22]_1 ;
  input Clk;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [2:0]\Using_FPGA.Native_i_6 ;

  wire CI;
  wire Clk;
  wire [0:0]D;
  wire D_22;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire [2:0]\Using_FPGA.Native_i_6 ;
  wire [0:0]Y;
  wire \instr_EX_i_reg[22] ;
  wire \instr_EX_i_reg[22]_0 ;
  wire \instr_EX_i_reg[22]_1 ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[22].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\instr_EX_i_reg[22] ),
        .A1(\instr_EX_i_reg[22]_0 ),
        .A2(\instr_EX_i_reg[22]_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(Y),
        .Q(D));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__25 
       (.I0(D),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Using_FPGA.Native_1 ),
        .O(D_22));
  LUT4 #(
    .INIT(16'h0100)) 
    \Using_FPGA.Native_i_9 
       (.I0(D),
        .I1(\Using_FPGA.Native_i_6 [2]),
        .I2(\Using_FPGA.Native_i_6 [1]),
        .I3(\Using_FPGA.Native_i_6 [0]),
        .O(\Using_FPGA.Native ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_SRL16E" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E_110
   (D,
    D_23,
    CI,
    Y,
    \instr_EX_i_reg[23] ,
    \instr_EX_i_reg[23]_0 ,
    \instr_EX_i_reg[23]_1 ,
    Clk,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 );
  output [0:0]D;
  output D_23;
  input CI;
  input [0:0]Y;
  input \instr_EX_i_reg[23] ;
  input \instr_EX_i_reg[23]_0 ;
  input \instr_EX_i_reg[23]_1 ;
  input Clk;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;

  wire CI;
  wire Clk;
  wire [0:0]D;
  wire D_23;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]Y;
  wire \instr_EX_i_reg[23] ;
  wire \instr_EX_i_reg[23]_0 ;
  wire \instr_EX_i_reg[23]_1 ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[23].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\instr_EX_i_reg[23] ),
        .A1(\instr_EX_i_reg[23]_0 ),
        .A2(\instr_EX_i_reg[23]_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(Y),
        .Q(D));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__26 
       (.I0(D),
        .I1(\Using_FPGA.Native ),
        .I2(\Using_FPGA.Native_0 ),
        .O(D_23));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_SRL16E" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E_111
   (D,
    D_24,
    CI,
    Y,
    \instr_EX_i_reg[24] ,
    \instr_EX_i_reg[24]_0 ,
    \instr_EX_i_reg[24]_1 ,
    Clk,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 );
  output [0:0]D;
  output D_24;
  input CI;
  input [0:0]Y;
  input \instr_EX_i_reg[24] ;
  input \instr_EX_i_reg[24]_0 ;
  input \instr_EX_i_reg[24]_1 ;
  input Clk;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;

  wire CI;
  wire Clk;
  wire [0:0]D;
  wire D_24;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]Y;
  wire \instr_EX_i_reg[24] ;
  wire \instr_EX_i_reg[24]_0 ;
  wire \instr_EX_i_reg[24]_1 ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[24].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\instr_EX_i_reg[24] ),
        .A1(\instr_EX_i_reg[24]_0 ),
        .A2(\instr_EX_i_reg[24]_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(Y),
        .Q(D));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__27 
       (.I0(D),
        .I1(\Using_FPGA.Native ),
        .I2(\Using_FPGA.Native_0 ),
        .O(D_24));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_SRL16E" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E_112
   (\Using_FPGA.Native ,
    D_25,
    CI,
    Y,
    \instr_EX_i_reg[25] ,
    \instr_EX_i_reg[25]_0 ,
    \instr_EX_i_reg[25]_1 ,
    Clk,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 );
  output \Using_FPGA.Native ;
  output D_25;
  input CI;
  input [0:0]Y;
  input \instr_EX_i_reg[25] ;
  input \instr_EX_i_reg[25]_0 ;
  input \instr_EX_i_reg[25]_1 ;
  input Clk;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;

  wire CI;
  wire Clk;
  wire D_25;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire [0:0]Y;
  wire \instr_EX_i_reg[25] ;
  wire \instr_EX_i_reg[25]_0 ;
  wire \instr_EX_i_reg[25]_1 ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[25].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\instr_EX_i_reg[25] ),
        .A1(\instr_EX_i_reg[25]_0 ),
        .A2(\instr_EX_i_reg[25]_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(Y),
        .Q(\Using_FPGA.Native ));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__28 
       (.I0(\Using_FPGA.Native ),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Using_FPGA.Native_1 ),
        .O(D_25));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_SRL16E" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E_113
   (\Using_FPGA.Native ,
    Sext16_reg,
    D_26,
    \Using_FPGA.Native_0 ,
    \Area_Debug_Control.normal_stop_cmd_hold_reg ,
    \Serial_Dbg_Intf.control_reg_reg[8] ,
    CI,
    Y,
    \instr_EX_i_reg[26] ,
    \instr_EX_i_reg[26]_0 ,
    \instr_EX_i_reg[26]_1 ,
    Clk,
    sext16,
    Sext16_reg_0,
    write_Carry_I_reg,
    Sext16_reg_1,
    Sext16_reg_2,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    write_Carry_I_reg_0,
    write_Carry_I_reg_1,
    write_Carry_I_reg_2,
    write_Carry_I_reg_3,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 ,
    \Using_FPGA.Native_5 ,
    \Using_FPGA.Native_6 ,
    \Using_FPGA.Native_7 ,
    \Area_Debug_Control.dbg_brki_hit_i_2 ,
    \Area_Debug_Control.dbg_brki_hit_i_2_0 ,
    D);
  output \Using_FPGA.Native ;
  output Sext16_reg;
  output D_26;
  output \Using_FPGA.Native_0 ;
  output \Area_Debug_Control.normal_stop_cmd_hold_reg ;
  output \Serial_Dbg_Intf.control_reg_reg[8] ;
  input CI;
  input [0:0]Y;
  input \instr_EX_i_reg[26] ;
  input \instr_EX_i_reg[26]_0 ;
  input \instr_EX_i_reg[26]_1 ;
  input Clk;
  input sext16;
  input Sext16_reg_0;
  input write_Carry_I_reg;
  input Sext16_reg_1;
  input Sext16_reg_2;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input write_Carry_I_reg_0;
  input write_Carry_I_reg_1;
  input write_Carry_I_reg_2;
  input write_Carry_I_reg_3;
  input \Using_FPGA.Native_3 ;
  input \Using_FPGA.Native_4 ;
  input \Using_FPGA.Native_5 ;
  input \Using_FPGA.Native_6 ;
  input \Using_FPGA.Native_7 ;
  input [0:0]\Area_Debug_Control.dbg_brki_hit_i_2 ;
  input \Area_Debug_Control.dbg_brki_hit_i_2_0 ;
  input [1:0]D;

  wire [0:0]\Area_Debug_Control.dbg_brki_hit_i_2 ;
  wire \Area_Debug_Control.dbg_brki_hit_i_2_0 ;
  wire \Area_Debug_Control.normal_stop_cmd_hold_reg ;
  wire CI;
  wire Clk;
  wire [1:0]D;
  wire D_26;
  wire \Serial_Dbg_Intf.control_reg_reg[8] ;
  wire Sext16_reg;
  wire Sext16_reg_0;
  wire Sext16_reg_1;
  wire Sext16_reg_2;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_5 ;
  wire \Using_FPGA.Native_6 ;
  wire \Using_FPGA.Native_7 ;
  wire [0:0]Y;
  wire \instr_EX_i_reg[26] ;
  wire \instr_EX_i_reg[26]_0 ;
  wire \instr_EX_i_reg[26]_1 ;
  wire sext16;
  wire write_Carry_I_reg;
  wire write_Carry_I_reg_0;
  wire write_Carry_I_reg_1;
  wire write_Carry_I_reg_2;
  wire write_Carry_I_reg_3;

  LUT6 #(
    .INIT(64'h00000000E2222222)) 
    Sext16_i_1
       (.I0(sext16),
        .I1(Sext16_reg_0),
        .I2(\Using_FPGA.Native ),
        .I3(write_Carry_I_reg),
        .I4(Sext16_reg_1),
        .I5(Sext16_reg_2),
        .O(Sext16_reg));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[26].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\instr_EX_i_reg[26] ),
        .A1(\instr_EX_i_reg[26]_0 ),
        .A2(\instr_EX_i_reg[26]_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(Y),
        .Q(\Using_FPGA.Native ));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__29 
       (.I0(\Using_FPGA.Native ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(\Using_FPGA.Native_2 ),
        .O(D_26));
  LUT6 #(
    .INIT(64'hAAAAAAAAEAAAAAAA)) 
    \Using_FPGA.Native_i_6 
       (.I0(\Using_FPGA.Native_3 ),
        .I1(\Serial_Dbg_Intf.control_reg_reg[8] ),
        .I2(\Using_FPGA.Native_4 ),
        .I3(\Using_FPGA.Native_5 ),
        .I4(\Using_FPGA.Native_6 ),
        .I5(\Using_FPGA.Native_7 ),
        .O(\Area_Debug_Control.normal_stop_cmd_hold_reg ));
  LUT6 #(
    .INIT(64'h0002000000000000)) 
    \Using_FPGA.Native_i_8 
       (.I0(\Area_Debug_Control.dbg_brki_hit_i_2 ),
        .I1(\Using_FPGA.Native ),
        .I2(write_Carry_I_reg),
        .I3(\Area_Debug_Control.dbg_brki_hit_i_2_0 ),
        .I4(D[0]),
        .I5(D[1]),
        .O(\Serial_Dbg_Intf.control_reg_reg[8] ));
  LUT6 #(
    .INIT(64'h70707070707070FF)) 
    write_Carry_I_i_1
       (.I0(\Using_FPGA.Native ),
        .I1(write_Carry_I_reg),
        .I2(write_Carry_I_reg_0),
        .I3(write_Carry_I_reg_1),
        .I4(write_Carry_I_reg_2),
        .I5(write_Carry_I_reg_3),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_SRL16E" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E_114
   (D,
    D_27,
    CI,
    Y,
    \instr_EX_i_reg[27] ,
    \instr_EX_i_reg[27]_0 ,
    \instr_EX_i_reg[27]_1 ,
    Clk,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 );
  output [0:0]D;
  output D_27;
  input CI;
  input [0:0]Y;
  input \instr_EX_i_reg[27] ;
  input \instr_EX_i_reg[27]_0 ;
  input \instr_EX_i_reg[27]_1 ;
  input Clk;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;

  wire CI;
  wire Clk;
  wire [0:0]D;
  wire D_27;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]Y;
  wire \instr_EX_i_reg[27] ;
  wire \instr_EX_i_reg[27]_0 ;
  wire \instr_EX_i_reg[27]_1 ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[27].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\instr_EX_i_reg[27] ),
        .A1(\instr_EX_i_reg[27]_0 ),
        .A2(\instr_EX_i_reg[27]_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(Y),
        .Q(D));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__30 
       (.I0(D),
        .I1(\Using_FPGA.Native ),
        .I2(\Using_FPGA.Native_0 ),
        .O(D_27));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_SRL16E" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E_115
   (\Using_FPGA.Native ,
    D_28,
    CI,
    Y,
    \instr_EX_i_reg[28] ,
    \instr_EX_i_reg[28]_0 ,
    \instr_EX_i_reg[28]_1 ,
    Clk,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 );
  output \Using_FPGA.Native ;
  output D_28;
  input CI;
  input [0:0]Y;
  input \instr_EX_i_reg[28] ;
  input \instr_EX_i_reg[28]_0 ;
  input \instr_EX_i_reg[28]_1 ;
  input Clk;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;

  wire CI;
  wire Clk;
  wire D_28;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire [0:0]Y;
  wire \instr_EX_i_reg[28] ;
  wire \instr_EX_i_reg[28]_0 ;
  wire \instr_EX_i_reg[28]_1 ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[28].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\instr_EX_i_reg[28] ),
        .A1(\instr_EX_i_reg[28]_0 ),
        .A2(\instr_EX_i_reg[28]_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(Y),
        .Q(\Using_FPGA.Native ));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__31 
       (.I0(\Using_FPGA.Native ),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Using_FPGA.Native_1 ),
        .O(D_28));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_SRL16E" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E_116
   (\Using_FPGA.Native ,
    D_29,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    CI,
    Y,
    \instr_EX_i_reg[29] ,
    \instr_EX_i_reg[29]_0 ,
    \instr_EX_i_reg[29]_1 ,
    Clk,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    D);
  output \Using_FPGA.Native ;
  output D_29;
  output \Using_FPGA.Native_0 ;
  output \Using_FPGA.Native_1 ;
  input CI;
  input [0:0]Y;
  input \instr_EX_i_reg[29] ;
  input \instr_EX_i_reg[29]_0 ;
  input \instr_EX_i_reg[29]_1 ;
  input Clk;
  input \Using_FPGA.Native_2 ;
  input \Using_FPGA.Native_3 ;
  input [2:0]D;

  wire CI;
  wire Clk;
  wire [2:0]D;
  wire D_29;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire [0:0]Y;
  wire \instr_EX_i_reg[29] ;
  wire \instr_EX_i_reg[29]_0 ;
  wire \instr_EX_i_reg[29]_1 ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[29].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\instr_EX_i_reg[29] ),
        .A1(\instr_EX_i_reg[29]_0 ),
        .A2(\instr_EX_i_reg[29]_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(Y),
        .Q(\Using_FPGA.Native ));
  (* SOFT_HLUTNM = "soft_lutpair53" *) 
  LUT4 #(
    .INIT(16'h0004)) 
    \Using_FPGA.Native_i_10 
       (.I0(\Using_FPGA.Native ),
        .I1(D[2]),
        .I2(D[1]),
        .I3(D[0]),
        .O(\Using_FPGA.Native_1 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__32 
       (.I0(\Using_FPGA.Native ),
        .I1(\Using_FPGA.Native_2 ),
        .I2(\Using_FPGA.Native_3 ),
        .O(D_29));
  (* SOFT_HLUTNM = "soft_lutpair53" *) 
  LUT2 #(
    .INIT(4'h1)) 
    write_Reg_i_4
       (.I0(\Using_FPGA.Native ),
        .I1(D[2]),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_SRL16E" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E_117
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 ,
    \Using_FPGA.Native_5 ,
    \Using_FPGA.Native_6 ,
    CI,
    Y,
    \instr_EX_i_reg[2] ,
    \instr_EX_i_reg[2]_0 ,
    \instr_EX_i_reg[2]_1 ,
    Clk,
    take_Intr_Now_II,
    write_Reg_reg,
    write_Reg_reg_0,
    write_Reg_reg_1,
    write_Reg_reg_2,
    Compare_Instr_reg,
    Compare_Instr_reg_0,
    \Using_FPGA.reset_BIP_I_reg ,
    \Using_FPGA.reset_BIP_I_reg_0 ,
    \Using_FPGA.reset_BIP_I_reg_1 ,
    D);
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  output \Using_FPGA.Native_1 ;
  output \Using_FPGA.Native_2 ;
  output \Using_FPGA.Native_3 ;
  output \Using_FPGA.Native_4 ;
  output \Using_FPGA.Native_5 ;
  output \Using_FPGA.Native_6 ;
  input CI;
  input [0:0]Y;
  input \instr_EX_i_reg[2] ;
  input \instr_EX_i_reg[2]_0 ;
  input \instr_EX_i_reg[2]_1 ;
  input Clk;
  input take_Intr_Now_II;
  input write_Reg_reg;
  input write_Reg_reg_0;
  input write_Reg_reg_1;
  input write_Reg_reg_2;
  input Compare_Instr_reg;
  input Compare_Instr_reg_0;
  input \Using_FPGA.reset_BIP_I_reg ;
  input \Using_FPGA.reset_BIP_I_reg_0 ;
  input \Using_FPGA.reset_BIP_I_reg_1 ;
  input [0:0]D;

  wire CI;
  wire Clk;
  wire Compare_Instr_reg;
  wire Compare_Instr_reg_0;
  wire [0:0]D;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_5 ;
  wire \Using_FPGA.Native_6 ;
  wire \Using_FPGA.reset_BIP_I_reg ;
  wire \Using_FPGA.reset_BIP_I_reg_0 ;
  wire \Using_FPGA.reset_BIP_I_reg_1 ;
  wire [0:0]Y;
  wire \instr_EX_i_reg[2] ;
  wire \instr_EX_i_reg[2]_0 ;
  wire \instr_EX_i_reg[2]_1 ;
  wire take_Intr_Now_II;
  wire write_Reg_i_6_n_0;
  wire write_Reg_reg;
  wire write_Reg_reg_0;
  wire write_Reg_reg_1;
  wire write_Reg_reg_2;

  LUT4 #(
    .INIT(16'h0004)) 
    Compare_Instr_i_2
       (.I0(\Using_FPGA.Native ),
        .I1(D),
        .I2(Compare_Instr_reg_0),
        .I3(Compare_Instr_reg),
        .O(\Using_FPGA.Native_6 ));
  LUT6 #(
    .INIT(64'h0000010000000000)) 
    Sign_Extend_i_2
       (.I0(\Using_FPGA.Native ),
        .I1(\Using_FPGA.reset_BIP_I_reg_1 ),
        .I2(\Using_FPGA.reset_BIP_I_reg_0 ),
        .I3(\Using_FPGA.reset_BIP_I_reg ),
        .I4(Compare_Instr_reg),
        .I5(Compare_Instr_reg_0),
        .O(\Using_FPGA.Native_3 ));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[2].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\instr_EX_i_reg[2] ),
        .A1(\instr_EX_i_reg[2]_0 ),
        .A2(\instr_EX_i_reg[2]_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(Y),
        .Q(\Using_FPGA.Native ));
  LUT3 #(
    .INIT(8'h32)) 
    \Using_FPGA.Native_i_2 
       (.I0(\Using_FPGA.Native ),
        .I1(take_Intr_Now_II),
        .I2(\Using_FPGA.Native_1 ),
        .O(\Using_FPGA.Native_0 ));
  LUT6 #(
    .INIT(64'h0000200000000000)) 
    \Using_FPGA.enable_Interrupts_I_i_2 
       (.I0(\Using_FPGA.Native ),
        .I1(Compare_Instr_reg),
        .I2(Compare_Instr_reg_0),
        .I3(\Using_FPGA.reset_BIP_I_reg ),
        .I4(\Using_FPGA.reset_BIP_I_reg_0 ),
        .I5(\Using_FPGA.reset_BIP_I_reg_1 ),
        .O(\Using_FPGA.Native_5 ));
  LUT6 #(
    .INIT(64'h0000100000000000)) 
    mtsmsr_write_i_i_3
       (.I0(\Using_FPGA.Native ),
        .I1(Compare_Instr_reg),
        .I2(Compare_Instr_reg_0),
        .I3(\Using_FPGA.reset_BIP_I_reg ),
        .I4(\Using_FPGA.reset_BIP_I_reg_0 ),
        .I5(\Using_FPGA.reset_BIP_I_reg_1 ),
        .O(\Using_FPGA.Native_1 ));
  LUT6 #(
    .INIT(64'h8888A888A888A888)) 
    write_Reg_i_2
       (.I0(write_Reg_reg_2),
        .I1(write_Reg_reg),
        .I2(write_Reg_i_6_n_0),
        .I3(write_Reg_reg_0),
        .I4(write_Reg_reg_1),
        .I5(\Using_FPGA.Native_1 ),
        .O(\Using_FPGA.Native_4 ));
  LUT6 #(
    .INIT(64'h00000000AAEAEAEA)) 
    write_Reg_i_3
       (.I0(write_Reg_reg),
        .I1(write_Reg_i_6_n_0),
        .I2(write_Reg_reg_0),
        .I3(write_Reg_reg_1),
        .I4(\Using_FPGA.Native_1 ),
        .I5(\Using_FPGA.Native_3 ),
        .O(\Using_FPGA.Native_2 ));
  LUT6 #(
    .INIT(64'h333F3F3F3F3F373F)) 
    write_Reg_i_6
       (.I0(\Using_FPGA.Native ),
        .I1(Compare_Instr_reg_0),
        .I2(Compare_Instr_reg),
        .I3(\Using_FPGA.reset_BIP_I_reg ),
        .I4(\Using_FPGA.reset_BIP_I_reg_1 ),
        .I5(\Using_FPGA.reset_BIP_I_reg_0 ),
        .O(write_Reg_i_6_n_0));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_SRL16E" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E_118
   (D,
    D_30,
    CI,
    Y,
    \instr_EX_i_reg[30] ,
    \instr_EX_i_reg[30]_0 ,
    \instr_EX_i_reg[30]_1 ,
    Clk,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 );
  output [0:0]D;
  output D_30;
  input CI;
  input [0:0]Y;
  input \instr_EX_i_reg[30] ;
  input \instr_EX_i_reg[30]_0 ;
  input \instr_EX_i_reg[30]_1 ;
  input Clk;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;

  wire CI;
  wire Clk;
  wire [0:0]D;
  wire D_30;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]Y;
  wire \instr_EX_i_reg[30] ;
  wire \instr_EX_i_reg[30]_0 ;
  wire \instr_EX_i_reg[30]_1 ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[30].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\instr_EX_i_reg[30] ),
        .A1(\instr_EX_i_reg[30]_0 ),
        .A2(\instr_EX_i_reg[30]_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(Y),
        .Q(D));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__33 
       (.I0(D),
        .I1(\Using_FPGA.Native ),
        .I2(\Using_FPGA.Native_0 ),
        .O(D_30));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_SRL16E" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E_119
   (D,
    Sext8_reg,
    D_31,
    CI,
    Y,
    \instr_EX_i_reg[31] ,
    \instr_EX_i_reg[31]_0 ,
    \instr_EX_i_reg[31]_1 ,
    Clk,
    Sext8_reg_0,
    Sext8_reg_1,
    Sext8_reg_2,
    Sext8_reg_3,
    Sext8_reg_4,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 );
  output [0:0]D;
  output Sext8_reg;
  output D_31;
  input CI;
  input [0:0]Y;
  input \instr_EX_i_reg[31] ;
  input \instr_EX_i_reg[31]_0 ;
  input \instr_EX_i_reg[31]_1 ;
  input Clk;
  input Sext8_reg_0;
  input Sext8_reg_1;
  input Sext8_reg_2;
  input Sext8_reg_3;
  input Sext8_reg_4;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;

  wire CI;
  wire Clk;
  wire [0:0]D;
  wire D_31;
  wire Sext8_reg;
  wire Sext8_reg_0;
  wire Sext8_reg_1;
  wire Sext8_reg_2;
  wire Sext8_reg_3;
  wire Sext8_reg_4;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]Y;
  wire \instr_EX_i_reg[31] ;
  wire \instr_EX_i_reg[31]_0 ;
  wire \instr_EX_i_reg[31]_1 ;

  LUT6 #(
    .INIT(64'h000000002E222222)) 
    Sext8_i_1
       (.I0(Sext8_reg_0),
        .I1(Sext8_reg_1),
        .I2(D),
        .I3(Sext8_reg_2),
        .I4(Sext8_reg_3),
        .I5(Sext8_reg_4),
        .O(Sext8_reg));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[31].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\instr_EX_i_reg[31] ),
        .A1(\instr_EX_i_reg[31]_0 ),
        .A2(\instr_EX_i_reg[31]_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(Y),
        .Q(D));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__34 
       (.I0(D),
        .I1(\Using_FPGA.Native ),
        .I2(\Using_FPGA.Native_0 ),
        .O(D_31));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_SRL16E" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E_120
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    inHibit_EX_reg,
    \Using_FPGA.Native_1 ,
    mbar_first,
    \Using_FPGA.Native_2 ,
    \Serial_Dbg_Intf.control_reg_reg[8] ,
    CI,
    Y,
    \instr_EX_i_reg[3] ,
    \instr_EX_i_reg[3]_0 ,
    \instr_EX_i_reg[3]_1 ,
    Clk,
    mul_Executing_reg,
    mul_Executing_reg_0,
    mul_Executing_reg_1,
    mul_Executing_reg_2,
    inHibit_EX,
    jump2_I_reg,
    mul_Executing_reg_3,
    D,
    ok_To_Stop,
    mul_Executing_reg_4,
    \Area_Debug_Control.dbg_brki_hit_reg ,
    \Area_Debug_Control.dbg_brki_hit_reg_0 ,
    \Area_Debug_Control.dbg_brki_hit_reg_1 ,
    \Area_Debug_Control.dbg_brki_hit_reg_2 );
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  output inHibit_EX_reg;
  output \Using_FPGA.Native_1 ;
  output mbar_first;
  output \Using_FPGA.Native_2 ;
  output \Serial_Dbg_Intf.control_reg_reg[8] ;
  input CI;
  input [0:0]Y;
  input \instr_EX_i_reg[3] ;
  input \instr_EX_i_reg[3]_0 ;
  input \instr_EX_i_reg[3]_1 ;
  input Clk;
  input mul_Executing_reg;
  input mul_Executing_reg_0;
  input mul_Executing_reg_1;
  input mul_Executing_reg_2;
  input inHibit_EX;
  input jump2_I_reg;
  input mul_Executing_reg_3;
  input [0:0]D;
  input ok_To_Stop;
  input mul_Executing_reg_4;
  input \Area_Debug_Control.dbg_brki_hit_reg ;
  input \Area_Debug_Control.dbg_brki_hit_reg_0 ;
  input \Area_Debug_Control.dbg_brki_hit_reg_1 ;
  input \Area_Debug_Control.dbg_brki_hit_reg_2 ;

  wire \Area_Debug_Control.dbg_brki_hit_reg ;
  wire \Area_Debug_Control.dbg_brki_hit_reg_0 ;
  wire \Area_Debug_Control.dbg_brki_hit_reg_1 ;
  wire \Area_Debug_Control.dbg_brki_hit_reg_2 ;
  wire CI;
  wire Clk;
  wire [0:0]D;
  wire \Serial_Dbg_Intf.control_reg_reg[8] ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire [0:0]Y;
  wire inHibit_EX;
  wire inHibit_EX_reg;
  wire \instr_EX_i_reg[3] ;
  wire \instr_EX_i_reg[3]_0 ;
  wire \instr_EX_i_reg[3]_1 ;
  wire jump2_I_reg;
  wire mbar_first;
  wire mul_Executing_reg;
  wire mul_Executing_reg_0;
  wire mul_Executing_reg_1;
  wire mul_Executing_reg_2;
  wire mul_Executing_reg_3;
  wire mul_Executing_reg_4;
  wire ok_To_Stop;

  LUT5 #(
    .INIT(32'h40000000)) 
    \Area_Debug_Control.dbg_brki_hit_i_2 
       (.I0(\Using_FPGA.Native_2 ),
        .I1(\Area_Debug_Control.dbg_brki_hit_reg ),
        .I2(\Area_Debug_Control.dbg_brki_hit_reg_0 ),
        .I3(\Area_Debug_Control.dbg_brki_hit_reg_1 ),
        .I4(\Area_Debug_Control.dbg_brki_hit_reg_2 ),
        .O(\Serial_Dbg_Intf.control_reg_reg[8] ));
  LUT6 #(
    .INIT(64'hFFFFFDFFFFFFFFFF)) 
    \Size_17to32.imm_Reg[0]_i_2 
       (.I0(\Using_FPGA.Native ),
        .I1(mul_Executing_reg_2),
        .I2(mul_Executing_reg_1),
        .I3(mul_Executing_reg_3),
        .I4(mul_Executing_reg),
        .I5(mul_Executing_reg_0),
        .O(\Using_FPGA.Native_1 ));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[3].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\instr_EX_i_reg[3] ),
        .A1(\instr_EX_i_reg[3]_0 ),
        .A2(\instr_EX_i_reg[3]_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(Y),
        .Q(\Using_FPGA.Native ));
  LUT5 #(
    .INIT(32'hFFFFDFFF)) 
    \Using_FPGA.Native_i_2__4 
       (.I0(\Using_FPGA.Native ),
        .I1(mul_Executing_reg),
        .I2(mul_Executing_reg_0),
        .I3(mul_Executing_reg_1),
        .I4(mul_Executing_reg_2),
        .O(\Using_FPGA.Native_0 ));
  LUT5 #(
    .INIT(32'hFFDFDFDF)) 
    jump2_I_i_2
       (.I0(\Using_FPGA.Native ),
        .I1(mul_Executing_reg),
        .I2(mul_Executing_reg_0),
        .I3(inHibit_EX),
        .I4(jump2_I_reg),
        .O(inHibit_EX_reg));
  LUT6 #(
    .INIT(64'hFFFFDFFFFFFFFFFF)) 
    mbar_decode_I_i_2
       (.I0(\Using_FPGA.Native ),
        .I1(mul_Executing_reg_2),
        .I2(mul_Executing_reg_1),
        .I3(mul_Executing_reg_3),
        .I4(mul_Executing_reg),
        .I5(mul_Executing_reg_0),
        .O(\Using_FPGA.Native_2 ));
  LUT4 #(
    .INIT(16'h4F40)) 
    mbar_first_i_1
       (.I0(\Using_FPGA.Native_2 ),
        .I1(D),
        .I2(ok_To_Stop),
        .I3(mul_Executing_reg_4),
        .O(mbar_first));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_SRL16E" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E_121
   (\Using_FPGA.Native ,
    doublet_i_reg,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Reg_Test_Equal_N_i7_out,
    \Using_FPGA.Native_2 ,
    CI,
    Y,
    \instr_EX_i_reg[4] ,
    \instr_EX_i_reg[4]_0 ,
    \instr_EX_i_reg[4]_1 ,
    Clk,
    isdoublet,
    doublet_i_reg_0,
    doublet_i_reg_1,
    sync_reset,
    byte_i13_out,
    take_Intr_Now_III,
    \Using_FPGA.Native_i_1__41 ,
    \Using_FPGA.Native_i_1__41_0 ,
    D,
    \Using_FPGA.Native_i_1__41_1 ,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 ,
    instr_OF_raw);
  output \Using_FPGA.Native ;
  output doublet_i_reg;
  output \Using_FPGA.Native_0 ;
  output \Using_FPGA.Native_1 ;
  output Reg_Test_Equal_N_i7_out;
  output \Using_FPGA.Native_2 ;
  input CI;
  input [0:0]Y;
  input \instr_EX_i_reg[4] ;
  input \instr_EX_i_reg[4]_0 ;
  input \instr_EX_i_reg[4]_1 ;
  input Clk;
  input isdoublet;
  input doublet_i_reg_0;
  input doublet_i_reg_1;
  input sync_reset;
  input byte_i13_out;
  input take_Intr_Now_III;
  input \Using_FPGA.Native_i_1__41 ;
  input \Using_FPGA.Native_i_1__41_0 ;
  input [0:0]D;
  input \Using_FPGA.Native_i_1__41_1 ;
  input \Using_FPGA.Native_3 ;
  input \Using_FPGA.Native_4 ;
  input [3:0]instr_OF_raw;

  wire CI;
  wire Clk;
  wire [0:0]D;
  wire Reg_Test_Equal_N_i7_out;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_i_1__41 ;
  wire \Using_FPGA.Native_i_1__41_0 ;
  wire \Using_FPGA.Native_i_1__41_1 ;
  wire [0:0]Y;
  wire byte_i13_out;
  wire doublet_i_reg;
  wire doublet_i_reg_0;
  wire doublet_i_reg_1;
  wire \instr_EX_i_reg[4] ;
  wire \instr_EX_i_reg[4]_0 ;
  wire \instr_EX_i_reg[4]_1 ;
  wire [3:0]instr_OF_raw;
  wire isdoublet;
  wire sync_reset;
  wire take_Intr_Now_III;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[4].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\instr_EX_i_reg[4] ),
        .A1(\instr_EX_i_reg[4]_0 ),
        .A2(\instr_EX_i_reg[4]_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(Y),
        .Q(\Using_FPGA.Native ));
  LUT5 #(
    .INIT(32'h00020200)) 
    \Using_FPGA.Native_i_1__44 
       (.I0(\Using_FPGA.Native_1 ),
        .I1(take_Intr_Now_III),
        .I2(\Using_FPGA.Native_3 ),
        .I3(\Using_FPGA.Native_4 ),
        .I4(instr_OF_raw[0]),
        .O(Reg_Test_Equal_N_i7_out));
  LUT6 #(
    .INIT(64'h1010100010101010)) 
    \Using_FPGA.Native_i_2__0 
       (.I0(take_Intr_Now_III),
        .I1(\Using_FPGA.Native_1 ),
        .I2(\Using_FPGA.Native_i_1__41 ),
        .I3(\Using_FPGA.Native_i_1__41_0 ),
        .I4(D),
        .I5(\Using_FPGA.Native_i_1__41_1 ),
        .O(\Using_FPGA.Native_0 ));
  (* SOFT_HLUTNM = "soft_lutpair54" *) 
  LUT5 #(
    .INIT(32'h00800000)) 
    \Using_FPGA.Native_i_3 
       (.I0(\Using_FPGA.Native ),
        .I1(doublet_i_reg_1),
        .I2(instr_OF_raw[1]),
        .I3(instr_OF_raw[2]),
        .I4(instr_OF_raw[3]),
        .O(\Using_FPGA.Native_1 ));
  (* SOFT_HLUTNM = "soft_lutpair54" *) 
  LUT3 #(
    .INIT(8'h02)) 
    \Using_FPGA.Native_i_3__3 
       (.I0(\Using_FPGA.Native ),
        .I1(instr_OF_raw[3]),
        .I2(instr_OF_raw[2]),
        .O(\Using_FPGA.Native_2 ));
  LUT6 #(
    .INIT(64'h0000000000002E22)) 
    doublet_i_i_1
       (.I0(isdoublet),
        .I1(doublet_i_reg_0),
        .I2(\Using_FPGA.Native ),
        .I3(doublet_i_reg_1),
        .I4(sync_reset),
        .I5(byte_i13_out),
        .O(doublet_i_reg));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_SRL16E" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E_122
   (\Using_FPGA.Native ,
    byte_i_reg,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.take_Intr_2nd_Phase_reg ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    CI,
    Y,
    \instr_EX_i_reg[5] ,
    \instr_EX_i_reg[5]_0 ,
    \instr_EX_i_reg[5]_1 ,
    Clk,
    isbyte,
    byte_i_reg_0,
    byte_i_reg_1,
    sync_reset,
    byte_i13_out,
    instr_OF_raw,
    \Using_FPGA.Native_3 ,
    take_Intr_Now_III,
    \Using_FPGA.Native_4 ,
    D);
  output \Using_FPGA.Native ;
  output byte_i_reg;
  output \Using_FPGA.Native_0 ;
  output \Using_FPGA.take_Intr_2nd_Phase_reg ;
  output \Using_FPGA.Native_1 ;
  output \Using_FPGA.Native_2 ;
  input CI;
  input [0:0]Y;
  input \instr_EX_i_reg[5] ;
  input \instr_EX_i_reg[5]_0 ;
  input \instr_EX_i_reg[5]_1 ;
  input Clk;
  input isbyte;
  input byte_i_reg_0;
  input byte_i_reg_1;
  input sync_reset;
  input byte_i13_out;
  input [2:0]instr_OF_raw;
  input \Using_FPGA.Native_3 ;
  input take_Intr_Now_III;
  input \Using_FPGA.Native_4 ;
  input [0:0]D;

  wire CI;
  wire Clk;
  wire [0:0]D;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.take_Intr_2nd_Phase_reg ;
  wire [0:0]Y;
  wire byte_i13_out;
  wire byte_i_reg;
  wire byte_i_reg_0;
  wire byte_i_reg_1;
  wire \instr_EX_i_reg[5] ;
  wire \instr_EX_i_reg[5]_0 ;
  wire \instr_EX_i_reg[5]_1 ;
  wire [2:0]instr_OF_raw;
  wire isbyte;
  wire sync_reset;
  wire take_Intr_Now_III;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[5].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\instr_EX_i_reg[5] ),
        .A1(\instr_EX_i_reg[5]_0 ),
        .A2(\instr_EX_i_reg[5]_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(Y),
        .Q(\Using_FPGA.Native ));
  LUT6 #(
    .INIT(64'hFFFFFFFF01005555)) 
    \Using_FPGA.Native_i_1__49 
       (.I0(take_Intr_Now_III),
        .I1(instr_OF_raw[1]),
        .I2(instr_OF_raw[2]),
        .I3(\Using_FPGA.Native ),
        .I4(\Using_FPGA.Native_1 ),
        .I5(\Using_FPGA.Native_4 ),
        .O(\Using_FPGA.take_Intr_2nd_Phase_reg ));
  LUT6 #(
    .INIT(64'hFFFF9FFFFFFFBFFF)) 
    \Using_FPGA.Native_i_2__2 
       (.I0(\Using_FPGA.Native ),
        .I1(byte_i_reg_1),
        .I2(instr_OF_raw[0]),
        .I3(instr_OF_raw[2]),
        .I4(instr_OF_raw[1]),
        .I5(\Using_FPGA.Native_3 ),
        .O(\Using_FPGA.Native_0 ));
  LUT6 #(
    .INIT(64'hFFBFFFFFFFFFFFFF)) 
    \Using_FPGA.Native_i_2__3 
       (.I0(\Using_FPGA.Native ),
        .I1(byte_i_reg_1),
        .I2(instr_OF_raw[2]),
        .I3(instr_OF_raw[1]),
        .I4(instr_OF_raw[0]),
        .I5(D),
        .O(\Using_FPGA.Native_1 ));
  LUT6 #(
    .INIT(64'h000000000000222E)) 
    byte_i_i_1
       (.I0(isbyte),
        .I1(byte_i_reg_0),
        .I2(\Using_FPGA.Native ),
        .I3(byte_i_reg_1),
        .I4(sync_reset),
        .I5(byte_i13_out),
        .O(byte_i_reg));
  LUT2 #(
    .INIT(4'hB)) 
    quadlet_Read_i_i_2
       (.I0(\Using_FPGA.Native ),
        .I1(byte_i_reg_1),
        .O(\Using_FPGA.Native_2 ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_SRL16E" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E_123
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    mbar_is_sleep0,
    \Use_Async_Reset.sync_reset_reg ,
    CI,
    Y,
    \instr_EX_i_reg[6] ,
    \instr_EX_i_reg[6]_0 ,
    \instr_EX_i_reg[6]_1 ,
    Clk,
    inHibit_EX_reg,
    inHibit_EX_reg_0,
    inHibit_EX_reg_1,
    S89_out,
    inHibit_EX_reg_2,
    instr_OF_raw,
    sync_reset,
    take_Intr_Now_III);
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  output mbar_is_sleep0;
  output [0:0]\Use_Async_Reset.sync_reset_reg ;
  input CI;
  input [0:0]Y;
  input \instr_EX_i_reg[6] ;
  input \instr_EX_i_reg[6]_0 ;
  input \instr_EX_i_reg[6]_1 ;
  input Clk;
  input inHibit_EX_reg;
  input inHibit_EX_reg_0;
  input inHibit_EX_reg_1;
  input S89_out;
  input inHibit_EX_reg_2;
  input [0:0]instr_OF_raw;
  input sync_reset;
  input take_Intr_Now_III;

  wire CI;
  wire Clk;
  wire S89_out;
  wire [0:0]\Use_Async_Reset.sync_reset_reg ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]Y;
  wire inHibit_EX_reg;
  wire inHibit_EX_reg_0;
  wire inHibit_EX_reg_1;
  wire inHibit_EX_reg_2;
  wire \instr_EX_i_reg[6] ;
  wire \instr_EX_i_reg[6]_0 ;
  wire \instr_EX_i_reg[6]_1 ;
  wire [0:0]instr_OF_raw;
  wire mbar_is_sleep0;
  wire sync_reset;
  wire take_Intr_Now_III;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[6].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\instr_EX_i_reg[6] ),
        .A1(\instr_EX_i_reg[6]_0 ),
        .A2(\instr_EX_i_reg[6]_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(Y),
        .Q(\Using_FPGA.Native ));
  LUT6 #(
    .INIT(64'h0000000000004700)) 
    inHibit_EX_i_2
       (.I0(\Using_FPGA.Native ),
        .I1(inHibit_EX_reg),
        .I2(inHibit_EX_reg_0),
        .I3(inHibit_EX_reg_1),
        .I4(S89_out),
        .I5(inHibit_EX_reg_2),
        .O(\Using_FPGA.Native_0 ));
  (* SOFT_HLUTNM = "soft_lutpair55" *) 
  LUT2 #(
    .INIT(4'hE)) 
    mbar_is_sleep_i_1
       (.I0(\Using_FPGA.Native ),
        .I1(instr_OF_raw),
        .O(mbar_is_sleep0));
  (* SOFT_HLUTNM = "soft_lutpair55" *) 
  LUT3 #(
    .INIT(8'h02)) 
    \write_Addr_I[0]_i_2 
       (.I0(\Using_FPGA.Native ),
        .I1(sync_reset),
        .I2(take_Intr_Now_III),
        .O(\Use_Async_Reset.sync_reset_reg ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_SRL16E" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E_124
   (instr_OF_raw,
    CI,
    Y,
    \instr_EX_i_reg[7] ,
    \instr_EX_i_reg[7]_0 ,
    \instr_EX_i_reg[7]_1 ,
    Clk);
  output [0:0]instr_OF_raw;
  input CI;
  input [0:0]Y;
  input \instr_EX_i_reg[7] ;
  input \instr_EX_i_reg[7]_0 ;
  input \instr_EX_i_reg[7]_1 ;
  input Clk;

  wire CI;
  wire Clk;
  wire [0:0]Y;
  wire \instr_EX_i_reg[7] ;
  wire \instr_EX_i_reg[7]_0 ;
  wire \instr_EX_i_reg[7]_1 ;
  wire [0:0]instr_OF_raw;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[7].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\instr_EX_i_reg[7] ),
        .A1(\instr_EX_i_reg[7]_0 ),
        .A2(\instr_EX_i_reg[7]_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(Y),
        .Q(instr_OF_raw));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_SRL16E" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E_125
   (\Using_FPGA.Native ,
    force1_i27_out,
    CI,
    Y,
    \instr_EX_i_reg[8] ,
    \instr_EX_i_reg[8]_0 ,
    \instr_EX_i_reg[8]_1 ,
    Clk,
    take_Intr_Now_III,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 );
  output \Using_FPGA.Native ;
  output force1_i27_out;
  input CI;
  input [0:0]Y;
  input \instr_EX_i_reg[8] ;
  input \instr_EX_i_reg[8]_0 ;
  input \instr_EX_i_reg[8]_1 ;
  input Clk;
  input take_Intr_Now_III;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;

  wire CI;
  wire Clk;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire [0:0]Y;
  wire force1_i27_out;
  wire \instr_EX_i_reg[8] ;
  wire \instr_EX_i_reg[8]_0 ;
  wire \instr_EX_i_reg[8]_1 ;
  wire take_Intr_Now_III;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[8].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\instr_EX_i_reg[8] ),
        .A1(\instr_EX_i_reg[8]_0 ),
        .A2(\instr_EX_i_reg[8]_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(Y),
        .Q(\Using_FPGA.Native ));
  LUT4 #(
    .INIT(16'h0100)) 
    \Using_FPGA.Native_i_2__1 
       (.I0(\Using_FPGA.Native ),
        .I1(take_Intr_Now_III),
        .I2(\Using_FPGA.Native_0 ),
        .I3(\Using_FPGA.Native_1 ),
        .O(force1_i27_out));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_SRL16E" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E_126
   (\Using_FPGA.Native ,
    reset_BIP_I8_out,
    CI,
    Y,
    \instr_EX_i_reg[9] ,
    \instr_EX_i_reg[9]_0 ,
    \instr_EX_i_reg[9]_1 ,
    Clk,
    take_Intr_Now_III,
    \Using_FPGA.reset_BIP_I_reg );
  output \Using_FPGA.Native ;
  output reset_BIP_I8_out;
  input CI;
  input [0:0]Y;
  input \instr_EX_i_reg[9] ;
  input \instr_EX_i_reg[9]_0 ;
  input \instr_EX_i_reg[9]_1 ;
  input Clk;
  input take_Intr_Now_III;
  input \Using_FPGA.reset_BIP_I_reg ;

  wire CI;
  wire Clk;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.reset_BIP_I_reg ;
  wire [0:0]Y;
  wire \instr_EX_i_reg[9] ;
  wire \instr_EX_i_reg[9]_0 ;
  wire \instr_EX_i_reg[9]_1 ;
  wire reset_BIP_I8_out;
  wire take_Intr_Now_III;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[9].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\instr_EX_i_reg[9] ),
        .A1(\instr_EX_i_reg[9]_0 ),
        .A2(\instr_EX_i_reg[9]_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(Y),
        .Q(\Using_FPGA.Native ));
  LUT3 #(
    .INIT(8'h40)) 
    \Using_FPGA.reset_BIP_I_i_1 
       (.I0(take_Intr_Now_III),
        .I1(\Using_FPGA.Native ),
        .I2(\Using_FPGA.reset_BIP_I_reg ),
        .O(reset_BIP_I8_out));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_SRL16E" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E_490
   (Address,
    IReady,
    pc_I,
    Buffer_Addr,
    Clk);
  output [0:0]Address;
  input IReady;
  input pc_I;
  input [2:0]Buffer_Addr;
  input Clk;

  wire [0:0]Address;
  wire [2:0]Buffer_Addr;
  wire Clk;
  wire IReady;
  wire pc_I;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/Not_All_Bits.Using_FPGA.PC_GEN " *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/Not_All_Bits.Using_FPGA.PC_GEN[29].PC_Bit_I/PC_OF_Buffer/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Buffer_Addr[0]),
        .A1(Buffer_Addr[1]),
        .A2(Buffer_Addr[2]),
        .A3(1'b0),
        .CE(IReady),
        .CLK(Clk),
        .D(pc_I),
        .Q(Address));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_SRL16E" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E_495
   (Address,
    IReady,
    pc_I,
    Buffer_Addr,
    Clk);
  output [0:0]Address;
  input IReady;
  input pc_I;
  input [2:0]Buffer_Addr;
  input Clk;

  wire [0:0]Address;
  wire [2:0]Buffer_Addr;
  wire Clk;
  wire IReady;
  wire pc_I;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/Not_All_Bits.Using_FPGA.PC_GEN " *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/Not_All_Bits.Using_FPGA.PC_GEN[28].PC_Bit_I/PC_OF_Buffer/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Buffer_Addr[0]),
        .A1(Buffer_Addr[1]),
        .A2(Buffer_Addr[2]),
        .A3(1'b0),
        .CE(IReady),
        .CLK(Clk),
        .D(pc_I),
        .Q(Address));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_SRL16E" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E_501
   (Address,
    I3_2,
    IReady,
    pc_I,
    Buffer_Addr,
    Clk,
    \Using_FPGA.Native );
  output [0:0]Address;
  output I3_2;
  input IReady;
  input pc_I;
  input [2:0]Buffer_Addr;
  input Clk;
  input \Using_FPGA.Native ;

  wire [0:0]Address;
  wire [2:0]Buffer_Addr;
  wire Clk;
  wire I3_2;
  wire IReady;
  wire \Using_FPGA.Native ;
  wire pc_I;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/Not_All_Bits.Using_FPGA.PC_GEN " *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/Not_All_Bits.Using_FPGA.PC_GEN[27].PC_Bit_I/PC_OF_Buffer/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Buffer_Addr[0]),
        .A1(Buffer_Addr[1]),
        .A2(Buffer_Addr[2]),
        .A3(1'b0),
        .CE(IReady),
        .CLK(Clk),
        .D(pc_I),
        .Q(Address));
  LUT2 #(
    .INIT(4'h2)) 
    \Using_FPGA.Native_i_1__40 
       (.I0(Address),
        .I1(\Using_FPGA.Native ),
        .O(I3_2));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_SRL16E" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E_507
   (Address,
    I3_1,
    IReady,
    pc_I,
    Buffer_Addr,
    Clk,
    \Using_FPGA.Native );
  output [0:0]Address;
  output I3_1;
  input IReady;
  input pc_I;
  input [2:0]Buffer_Addr;
  input Clk;
  input \Using_FPGA.Native ;

  wire [0:0]Address;
  wire [2:0]Buffer_Addr;
  wire Clk;
  wire I3_1;
  wire IReady;
  wire \Using_FPGA.Native ;
  wire pc_I;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/Not_All_Bits.Using_FPGA.PC_GEN " *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/Not_All_Bits.Using_FPGA.PC_GEN[26].PC_Bit_I/PC_OF_Buffer/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Buffer_Addr[0]),
        .A1(Buffer_Addr[1]),
        .A2(Buffer_Addr[2]),
        .A3(1'b0),
        .CE(IReady),
        .CLK(Clk),
        .D(pc_I),
        .Q(Address));
  LUT2 #(
    .INIT(4'h2)) 
    \Using_FPGA.Native_i_1__39 
       (.I0(Address),
        .I1(\Using_FPGA.Native ),
        .O(I3_1));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_SRL16E" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E_513
   (Address,
    I3_0,
    IReady,
    pc_I,
    Buffer_Addr,
    Clk,
    \Using_FPGA.Native );
  output [0:0]Address;
  output I3_0;
  input IReady;
  input pc_I;
  input [2:0]Buffer_Addr;
  input Clk;
  input \Using_FPGA.Native ;

  wire [0:0]Address;
  wire [2:0]Buffer_Addr;
  wire Clk;
  wire I3_0;
  wire IReady;
  wire \Using_FPGA.Native ;
  wire pc_I;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/Not_All_Bits.Using_FPGA.PC_GEN " *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/Not_All_Bits.Using_FPGA.PC_GEN[25].PC_Bit_I/PC_OF_Buffer/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Buffer_Addr[0]),
        .A1(Buffer_Addr[1]),
        .A2(Buffer_Addr[2]),
        .A3(1'b0),
        .CE(IReady),
        .CLK(Clk),
        .D(pc_I),
        .Q(Address));
  LUT2 #(
    .INIT(4'h2)) 
    \Using_FPGA.Native_i_1__38 
       (.I0(Address),
        .I1(\Using_FPGA.Native ),
        .O(I3_0));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_SRL16E" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E_519
   (Address,
    I3,
    IReady,
    pc_I,
    Buffer_Addr,
    Clk,
    \Using_FPGA.Native );
  output [0:0]Address;
  output I3;
  input IReady;
  input pc_I;
  input [2:0]Buffer_Addr;
  input Clk;
  input \Using_FPGA.Native ;

  wire [0:0]Address;
  wire [2:0]Buffer_Addr;
  wire Clk;
  wire I3;
  wire IReady;
  wire \Using_FPGA.Native ;
  wire pc_I;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/Not_All_Bits.Using_FPGA.PC_GEN " *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/Not_All_Bits.Using_FPGA.PC_GEN[24].PC_Bit_I/PC_OF_Buffer/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Buffer_Addr[0]),
        .A1(Buffer_Addr[1]),
        .A2(Buffer_Addr[2]),
        .A3(1'b0),
        .CE(IReady),
        .CLK(Clk),
        .D(pc_I),
        .Q(Address));
  LUT2 #(
    .INIT(4'h2)) 
    \Using_FPGA.Native_i_1__37 
       (.I0(Address),
        .I1(\Using_FPGA.Native ),
        .O(I3));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_SRL16E" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E_525
   (Address,
    IReady,
    pc_I,
    Buffer_Addr,
    Clk);
  output [0:0]Address;
  input IReady;
  input pc_I;
  input [2:0]Buffer_Addr;
  input Clk;

  wire [0:0]Address;
  wire [2:0]Buffer_Addr;
  wire Clk;
  wire IReady;
  wire pc_I;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/Not_All_Bits.Using_FPGA.PC_GEN " *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/Not_All_Bits.Using_FPGA.PC_GEN[23].PC_Bit_I/PC_OF_Buffer/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Buffer_Addr[0]),
        .A1(Buffer_Addr[1]),
        .A2(Buffer_Addr[2]),
        .A3(1'b0),
        .CE(IReady),
        .CLK(Clk),
        .D(pc_I),
        .Q(Address));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_SRL16E" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E_531
   (Address,
    IReady,
    pc_I,
    Buffer_Addr,
    Clk);
  output [0:0]Address;
  input IReady;
  input pc_I;
  input [2:0]Buffer_Addr;
  input Clk;

  wire [0:0]Address;
  wire [2:0]Buffer_Addr;
  wire Clk;
  wire IReady;
  wire pc_I;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/Not_All_Bits.Using_FPGA.PC_GEN " *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/Not_All_Bits.Using_FPGA.PC_GEN[22].PC_Bit_I/PC_OF_Buffer/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Buffer_Addr[0]),
        .A1(Buffer_Addr[1]),
        .A2(Buffer_Addr[2]),
        .A3(1'b0),
        .CE(IReady),
        .CLK(Clk),
        .D(pc_I),
        .Q(Address));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_SRL16E" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E_537
   (Address,
    IReady,
    pc_I,
    Buffer_Addr,
    Clk);
  output [0:0]Address;
  input IReady;
  input pc_I;
  input [2:0]Buffer_Addr;
  input Clk;

  wire [0:0]Address;
  wire [2:0]Buffer_Addr;
  wire Clk;
  wire IReady;
  wire pc_I;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/Not_All_Bits.Using_FPGA.PC_GEN " *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/Not_All_Bits.Using_FPGA.PC_GEN[21].PC_Bit_I/PC_OF_Buffer/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Buffer_Addr[0]),
        .A1(Buffer_Addr[1]),
        .A2(Buffer_Addr[2]),
        .A3(1'b0),
        .CE(IReady),
        .CLK(Clk),
        .D(pc_I),
        .Q(Address));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_SRL16E" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E_543
   (Address,
    IReady,
    pc_I,
    Buffer_Addr,
    Clk);
  output [0:0]Address;
  input IReady;
  input pc_I;
  input [2:0]Buffer_Addr;
  input Clk;

  wire [0:0]Address;
  wire [2:0]Buffer_Addr;
  wire Clk;
  wire IReady;
  wire pc_I;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/Not_All_Bits.Using_FPGA.PC_GEN " *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/Not_All_Bits.Using_FPGA.PC_GEN[20].PC_Bit_I/PC_OF_Buffer/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Buffer_Addr[0]),
        .A1(Buffer_Addr[1]),
        .A2(Buffer_Addr[2]),
        .A3(1'b0),
        .CE(IReady),
        .CLK(Clk),
        .D(pc_I),
        .Q(Address));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_SRL16E" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E_549
   (Address,
    IReady,
    pc_I,
    Buffer_Addr,
    Clk);
  output [0:0]Address;
  input IReady;
  input pc_I;
  input [2:0]Buffer_Addr;
  input Clk;

  wire [0:0]Address;
  wire [2:0]Buffer_Addr;
  wire Clk;
  wire IReady;
  wire pc_I;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/Not_All_Bits.Using_FPGA.PC_GEN " *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/Not_All_Bits.Using_FPGA.PC_GEN[19].PC_Bit_I/PC_OF_Buffer/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Buffer_Addr[0]),
        .A1(Buffer_Addr[1]),
        .A2(Buffer_Addr[2]),
        .A3(1'b0),
        .CE(IReady),
        .CLK(Clk),
        .D(pc_I),
        .Q(Address));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_SRL16E" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E_555
   (Address,
    IReady,
    pc_I,
    Buffer_Addr,
    Clk);
  output [0:0]Address;
  input IReady;
  input pc_I;
  input [2:0]Buffer_Addr;
  input Clk;

  wire [0:0]Address;
  wire [2:0]Buffer_Addr;
  wire Clk;
  wire IReady;
  wire pc_I;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/Not_All_Bits.Using_FPGA.PC_GEN " *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/Not_All_Bits.Using_FPGA.PC_GEN[18].PC_Bit_I/PC_OF_Buffer/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Buffer_Addr[0]),
        .A1(Buffer_Addr[1]),
        .A2(Buffer_Addr[2]),
        .A3(1'b0),
        .CE(IReady),
        .CLK(Clk),
        .D(pc_I),
        .Q(Address));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_SRL16E" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E_561
   (Address,
    IReady,
    pc_I,
    Buffer_Addr,
    Clk);
  output [0:0]Address;
  input IReady;
  input pc_I;
  input [2:0]Buffer_Addr;
  input Clk;

  wire [0:0]Address;
  wire [2:0]Buffer_Addr;
  wire Clk;
  wire IReady;
  wire pc_I;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/Not_All_Bits.Using_FPGA.PC_GEN " *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/Not_All_Bits.Using_FPGA.PC_GEN[17].PC_Bit_I/PC_OF_Buffer/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Buffer_Addr[0]),
        .A1(Buffer_Addr[1]),
        .A2(Buffer_Addr[2]),
        .A3(1'b0),
        .CE(IReady),
        .CLK(Clk),
        .D(pc_I),
        .Q(Address));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_SRL16E" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E_567
   (Address,
    IReady,
    pc_I,
    Buffer_Addr,
    Clk);
  output [0:0]Address;
  input IReady;
  input pc_I;
  input [2:0]Buffer_Addr;
  input Clk;

  wire [0:0]Address;
  wire [2:0]Buffer_Addr;
  wire Clk;
  wire IReady;
  wire pc_I;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/Not_All_Bits.Using_FPGA.PC_GEN " *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Data_Flow_I/PC_Module_I/Not_All_Bits.Using_FPGA.PC_GEN[16].PC_Bit_I/PC_OF_Buffer/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Buffer_Addr[0]),
        .A1(Buffer_Addr[1]),
        .A2(Buffer_Addr[2]),
        .A3(1'b0),
        .CE(IReady),
        .CLK(Clk),
        .D(pc_I),
        .Q(Address));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_SRL16E" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E_96
   (\Using_FPGA.Native ,
    Reg_Test_Equal_i,
    enable_Interrupts_I,
    \Use_Async_Reset.sync_reset_reg ,
    CI,
    Y,
    \instr_EX_i_reg[10] ,
    \instr_EX_i_reg[10]_0 ,
    \instr_EX_i_reg[10]_1 ,
    Clk,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    take_Intr_Now_III,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.enable_Interrupts_I_reg ,
    sync_reset);
  output \Using_FPGA.Native ;
  output Reg_Test_Equal_i;
  output enable_Interrupts_I;
  output [0:0]\Use_Async_Reset.sync_reset_reg ;
  input CI;
  input [0:0]Y;
  input \instr_EX_i_reg[10] ;
  input \instr_EX_i_reg[10]_0 ;
  input \instr_EX_i_reg[10]_1 ;
  input Clk;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input take_Intr_Now_III;
  input \Using_FPGA.Native_2 ;
  input \Using_FPGA.enable_Interrupts_I_reg ;
  input sync_reset;

  wire CI;
  wire Clk;
  wire Reg_Test_Equal_i;
  wire [0:0]\Use_Async_Reset.sync_reset_reg ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.enable_Interrupts_I_reg ;
  wire [0:0]Y;
  wire enable_Interrupts_I;
  wire \instr_EX_i_reg[10] ;
  wire \instr_EX_i_reg[10]_0 ;
  wire \instr_EX_i_reg[10]_1 ;
  wire sync_reset;
  wire take_Intr_Now_III;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[10].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\instr_EX_i_reg[10] ),
        .A1(\instr_EX_i_reg[10]_0 ),
        .A2(\instr_EX_i_reg[10]_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(Y),
        .Q(\Using_FPGA.Native ));
  LUT5 #(
    .INIT(32'hFFF9FFFF)) 
    \Using_FPGA.Native_i_1__43 
       (.I0(\Using_FPGA.Native ),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Using_FPGA.Native_1 ),
        .I3(take_Intr_Now_III),
        .I4(\Using_FPGA.Native_2 ),
        .O(Reg_Test_Equal_i));
  (* SOFT_HLUTNM = "soft_lutpair51" *) 
  LUT3 #(
    .INIT(8'h40)) 
    \Using_FPGA.enable_Interrupts_I_i_1 
       (.I0(take_Intr_Now_III),
        .I1(\Using_FPGA.Native ),
        .I2(\Using_FPGA.enable_Interrupts_I_reg ),
        .O(enable_Interrupts_I));
  (* SOFT_HLUTNM = "soft_lutpair51" *) 
  LUT3 #(
    .INIT(8'h02)) 
    \write_Addr_I[4]_i_1 
       (.I0(\Using_FPGA.Native ),
        .I1(sync_reset),
        .I2(take_Intr_Now_III),
        .O(\Use_Async_Reset.sync_reset_reg ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_SRL16E" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E_97
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    CI,
    Y,
    \instr_EX_i_reg[11] ,
    \instr_EX_i_reg[11]_0 ,
    \instr_EX_i_reg[11]_1 ,
    Clk,
    jump2_I_reg,
    jump2_I_reg_0,
    jump2_I_reg_1,
    jump2_I_reg_2,
    jump2_I_reg_3);
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  input CI;
  input [0:0]Y;
  input \instr_EX_i_reg[11] ;
  input \instr_EX_i_reg[11]_0 ;
  input \instr_EX_i_reg[11]_1 ;
  input Clk;
  input jump2_I_reg;
  input jump2_I_reg_0;
  input jump2_I_reg_1;
  input jump2_I_reg_2;
  input jump2_I_reg_3;

  wire CI;
  wire Clk;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]Y;
  wire \instr_EX_i_reg[11] ;
  wire \instr_EX_i_reg[11]_0 ;
  wire \instr_EX_i_reg[11]_1 ;
  wire jump2_I_reg;
  wire jump2_I_reg_0;
  wire jump2_I_reg_1;
  wire jump2_I_reg_2;
  wire jump2_I_reg_3;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[11].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\instr_EX_i_reg[11] ),
        .A1(\instr_EX_i_reg[11]_0 ),
        .A2(\instr_EX_i_reg[11]_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(Y),
        .Q(\Using_FPGA.Native ));
  LUT6 #(
    .INIT(64'h00E200CC00E20000)) 
    jump2_I_i_1
       (.I0(\Using_FPGA.Native ),
        .I1(jump2_I_reg),
        .I2(jump2_I_reg_0),
        .I3(jump2_I_reg_1),
        .I4(jump2_I_reg_2),
        .I5(jump2_I_reg_3),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_SRL16E" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E_98
   (\Using_FPGA.Native ,
    \Using_FPGA.set_BIP_I_reg ,
    \Using_FPGA.Native_0 ,
    D_32,
    CI,
    Y,
    \instr_EX_i_reg[12] ,
    \instr_EX_i_reg[12]_0 ,
    \instr_EX_i_reg[12]_1 ,
    Clk,
    take_Intr_Now_III,
    \Using_FPGA.set_BIP_I_reg_0 ,
    \Using_FPGA.set_BIP_I_reg_1 ,
    \Using_FPGA.set_BIP_I_reg_2 ,
    sync_reset,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 ,
    \Using_FPGA.Native_5 ,
    \Using_FPGA.Native_6 ,
    \Using_FPGA.set_BIP_I_reg_3 ,
    \Using_FPGA.set_BIP_I_reg_4 );
  output \Using_FPGA.Native ;
  output \Using_FPGA.set_BIP_I_reg ;
  output \Using_FPGA.Native_0 ;
  output D_32;
  input CI;
  input [0:0]Y;
  input \instr_EX_i_reg[12] ;
  input \instr_EX_i_reg[12]_0 ;
  input \instr_EX_i_reg[12]_1 ;
  input Clk;
  input take_Intr_Now_III;
  input \Using_FPGA.set_BIP_I_reg_0 ;
  input \Using_FPGA.set_BIP_I_reg_1 ;
  input \Using_FPGA.set_BIP_I_reg_2 ;
  input sync_reset;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input \Using_FPGA.Native_3 ;
  input \Using_FPGA.Native_4 ;
  input \Using_FPGA.Native_5 ;
  input \Using_FPGA.Native_6 ;
  input \Using_FPGA.set_BIP_I_reg_3 ;
  input \Using_FPGA.set_BIP_I_reg_4 ;

  wire CI;
  wire Clk;
  wire D_32;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_5 ;
  wire \Using_FPGA.Native_6 ;
  wire \Using_FPGA.set_BIP_I_i_2_n_0 ;
  wire \Using_FPGA.set_BIP_I_reg ;
  wire \Using_FPGA.set_BIP_I_reg_0 ;
  wire \Using_FPGA.set_BIP_I_reg_1 ;
  wire \Using_FPGA.set_BIP_I_reg_2 ;
  wire \Using_FPGA.set_BIP_I_reg_3 ;
  wire \Using_FPGA.set_BIP_I_reg_4 ;
  wire [0:0]Y;
  wire \instr_EX_i_reg[12] ;
  wire \instr_EX_i_reg[12]_0 ;
  wire \instr_EX_i_reg[12]_1 ;
  wire sync_reset;
  wire take_Intr_Now_III;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[12].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\instr_EX_i_reg[12] ),
        .A1(\instr_EX_i_reg[12]_0 ),
        .A2(\instr_EX_i_reg[12]_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(Y),
        .Q(\Using_FPGA.Native ));
  LUT6 #(
    .INIT(64'h000F000F08000000)) 
    \Using_FPGA.Native_i_1__50 
       (.I0(\Using_FPGA.Native ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(\Using_FPGA.Native_2 ),
        .I3(\Using_FPGA.Native_3 ),
        .I4(\Using_FPGA.Native_4 ),
        .I5(\Using_FPGA.Native_5 ),
        .O(\Using_FPGA.Native_0 ));
  LUT4 #(
    .INIT(16'h1101)) 
    \Using_FPGA.Native_i_1__51 
       (.I0(\Using_FPGA.Native_6 ),
        .I1(take_Intr_Now_III),
        .I2(\Using_FPGA.Native ),
        .I3(\Using_FPGA.set_BIP_I_reg_1 ),
        .O(D_32));
  LUT6 #(
    .INIT(64'h000000000011F0F0)) 
    \Using_FPGA.set_BIP_I_i_1 
       (.I0(take_Intr_Now_III),
        .I1(\Using_FPGA.set_BIP_I_i_2_n_0 ),
        .I2(\Using_FPGA.set_BIP_I_reg_0 ),
        .I3(\Using_FPGA.set_BIP_I_reg_1 ),
        .I4(\Using_FPGA.set_BIP_I_reg_2 ),
        .I5(sync_reset),
        .O(\Using_FPGA.set_BIP_I_reg ));
  LUT3 #(
    .INIT(8'hF7)) 
    \Using_FPGA.set_BIP_I_i_2 
       (.I0(\Using_FPGA.Native ),
        .I1(\Using_FPGA.set_BIP_I_reg_3 ),
        .I2(\Using_FPGA.set_BIP_I_reg_4 ),
        .O(\Using_FPGA.set_BIP_I_i_2_n_0 ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_SRL16E" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E_99
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    CI,
    Y,
    \instr_EX_i_reg[13] ,
    \instr_EX_i_reg[13]_0 ,
    \instr_EX_i_reg[13]_1 ,
    Clk,
    write_Reg_i_2,
    write_Reg_i_2_0,
    write_Reg_i_2_1,
    write_Reg_i_2_2,
    write_Reg_i_2_3);
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  input CI;
  input [0:0]Y;
  input \instr_EX_i_reg[13] ;
  input \instr_EX_i_reg[13]_0 ;
  input \instr_EX_i_reg[13]_1 ;
  input Clk;
  input write_Reg_i_2;
  input write_Reg_i_2_0;
  input write_Reg_i_2_1;
  input write_Reg_i_2_2;
  input write_Reg_i_2_3;

  wire CI;
  wire Clk;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]Y;
  wire \instr_EX_i_reg[13] ;
  wire \instr_EX_i_reg[13]_0 ;
  wire \instr_EX_i_reg[13]_1 ;
  wire write_Reg_i_2;
  wire write_Reg_i_2_0;
  wire write_Reg_i_2_1;
  wire write_Reg_i_2_2;
  wire write_Reg_i_2_3;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers " *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Decode_I/PreFetch_Buffer_I/PreFetch_Buffers[13].SRL16E_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(\instr_EX_i_reg[13] ),
        .A1(\instr_EX_i_reg[13]_0 ),
        .A2(\instr_EX_i_reg[13]_1 ),
        .A3(1'b0),
        .CE(CI),
        .CLK(Clk),
        .D(Y),
        .Q(\Using_FPGA.Native ));
  LUT6 #(
    .INIT(64'h0000200000000000)) 
    write_Reg_i_5
       (.I0(\Using_FPGA.Native ),
        .I1(write_Reg_i_2),
        .I2(write_Reg_i_2_0),
        .I3(write_Reg_i_2_1),
        .I4(write_Reg_i_2_2),
        .I5(write_Reg_i_2_3),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_SRL16E" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E__parameterized0
   (Q_0,
    Q,
    Dbg_Clk);
  output Q_0;
  input [3:0]Q;
  input Dbg_Clk;

  wire Dbg_Clk;
  wire [3:0]Q;
  wire Q_0;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Implement_Debug_Logic.Master_Core.Debug_Area/Serial_Dbg_Intf.SRL16E_1/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h001B),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Q[0]),
        .A1(Q[1]),
        .A2(Q[2]),
        .A3(Q[3]),
        .CE(1'b0),
        .CLK(Dbg_Clk),
        .D(1'b0),
        .Q(Q_0));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_SRL16E" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E__parameterized1
   (tdo_config_word1_14,
    Q,
    Dbg_Clk);
  output tdo_config_word1_14;
  input [3:0]Q;
  input Dbg_Clk;

  wire Dbg_Clk;
  wire [3:0]Q;
  wire tdo_config_word1_14;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Implement_Debug_Logic.Master_Core.Debug_Area/Serial_Dbg_Intf.SRL16E_2/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Q[0]),
        .A1(Q[1]),
        .A2(Q[2]),
        .A3(Q[3]),
        .CE(1'b0),
        .CLK(Dbg_Clk),
        .D(1'b0),
        .Q(tdo_config_word1_14));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_SRL16E" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E__parameterized1_20
   (tdo_config_word1_1,
    Q,
    Dbg_Clk);
  output tdo_config_word1_1;
  input [3:0]Q;
  input Dbg_Clk;

  wire Dbg_Clk;
  wire [3:0]Q;
  wire tdo_config_word1_1;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Implement_Debug_Logic.Master_Core.Debug_Area/Serial_Dbg_Intf.The_Base_Vector " *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Implement_Debug_Logic.Master_Core.Debug_Area/Serial_Dbg_Intf.The_Base_Vector[1].SRL16E_Base_Vector/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Q[0]),
        .A1(Q[1]),
        .A2(Q[2]),
        .A3(Q[3]),
        .CE(1'b0),
        .CLK(Dbg_Clk),
        .D(1'b0),
        .Q(tdo_config_word1_1));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_SRL16E" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E__parameterized1_21
   (tdo_config_word1_0,
    Q,
    Dbg_Clk);
  output tdo_config_word1_0;
  input [3:0]Q;
  input Dbg_Clk;

  wire Dbg_Clk;
  wire [3:0]Q;
  wire tdo_config_word1_0;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Implement_Debug_Logic.Master_Core.Debug_Area/Serial_Dbg_Intf.The_Base_Vector " *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Implement_Debug_Logic.Master_Core.Debug_Area/Serial_Dbg_Intf.The_Base_Vector[2].SRL16E_Base_Vector/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Q[0]),
        .A1(Q[1]),
        .A2(Q[2]),
        .A3(Q[3]),
        .CE(1'b0),
        .CLK(Dbg_Clk),
        .D(1'b0),
        .Q(tdo_config_word1_0));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_SRL16E" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E__parameterized1_22
   (tdo_config_word1_11,
    Q,
    Dbg_Clk);
  output tdo_config_word1_11;
  input [3:0]Q;
  input Dbg_Clk;

  wire Dbg_Clk;
  wire [3:0]Q;
  wire tdo_config_word1_11;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Implement_Debug_Logic.Master_Core.Debug_Area/Serial_Dbg_Intf.The_Cache_Addresses " *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Implement_Debug_Logic.Master_Core.Debug_Area/Serial_Dbg_Intf.The_Cache_Addresses[3].SRL16E_Cache_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Q[0]),
        .A1(Q[1]),
        .A2(Q[2]),
        .A3(Q[3]),
        .CE(1'b0),
        .CLK(Dbg_Clk),
        .D(1'b0),
        .Q(tdo_config_word1_11));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_SRL16E" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E__parameterized1_23
   (tdo_config_word1_10,
    Q,
    Dbg_Clk);
  output tdo_config_word1_10;
  input [3:0]Q;
  input Dbg_Clk;

  wire Dbg_Clk;
  wire [3:0]Q;
  wire tdo_config_word1_10;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Implement_Debug_Logic.Master_Core.Debug_Area/Serial_Dbg_Intf.The_Cache_Addresses " *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Implement_Debug_Logic.Master_Core.Debug_Area/Serial_Dbg_Intf.The_Cache_Addresses[4].SRL16E_Cache_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Q[0]),
        .A1(Q[1]),
        .A2(Q[2]),
        .A3(Q[3]),
        .CE(1'b0),
        .CLK(Dbg_Clk),
        .D(1'b0),
        .Q(tdo_config_word1_10));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_SRL16E" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E__parameterized1_26
   (tdo_config_word1_7,
    Q,
    Dbg_Clk);
  output tdo_config_word1_7;
  input [3:0]Q;
  input Dbg_Clk;

  wire Dbg_Clk;
  wire [3:0]Q;
  wire tdo_config_word1_7;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Implement_Debug_Logic.Master_Core.Debug_Area/Serial_Dbg_Intf.The_Cache_Addresses " *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Implement_Debug_Logic.Master_Core.Debug_Area/Serial_Dbg_Intf.The_Cache_Addresses[7].SRL16E_Cache_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Q[0]),
        .A1(Q[1]),
        .A2(Q[2]),
        .A3(Q[3]),
        .CE(1'b0),
        .CLK(Dbg_Clk),
        .D(1'b0),
        .Q(tdo_config_word1_7));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_SRL16E" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E__parameterized1_27
   (tdo_config_word1_6,
    Q,
    Dbg_Clk);
  output tdo_config_word1_6;
  input [3:0]Q;
  input Dbg_Clk;

  wire Dbg_Clk;
  wire [3:0]Q;
  wire tdo_config_word1_6;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Implement_Debug_Logic.Master_Core.Debug_Area/Serial_Dbg_Intf.The_Cache_Addresses " *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Implement_Debug_Logic.Master_Core.Debug_Area/Serial_Dbg_Intf.The_Cache_Addresses[8].SRL16E_Cache_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Q[0]),
        .A1(Q[1]),
        .A2(Q[2]),
        .A3(Q[3]),
        .CE(1'b0),
        .CLK(Dbg_Clk),
        .D(1'b0),
        .Q(tdo_config_word1_6));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_SRL16E" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E__parameterized2
   (tdo_config_word1_13,
    Q,
    Dbg_Clk);
  output tdo_config_word1_13;
  input [3:0]Q;
  input Dbg_Clk;

  wire Dbg_Clk;
  wire [3:0]Q;
  wire tdo_config_word1_13;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Implement_Debug_Logic.Master_Core.Debug_Area/Serial_Dbg_Intf.The_Cache_Addresses " *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Implement_Debug_Logic.Master_Core.Debug_Area/Serial_Dbg_Intf.The_Cache_Addresses[1].SRL16E_Cache_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'hFFFF),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Q[0]),
        .A1(Q[1]),
        .A2(Q[2]),
        .A3(Q[3]),
        .CE(1'b0),
        .CLK(Dbg_Clk),
        .D(1'b0),
        .Q(tdo_config_word1_13));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_SRL16E" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E__parameterized2_24
   (tdo_config_word1_9,
    Q,
    Dbg_Clk);
  output tdo_config_word1_9;
  input [3:0]Q;
  input Dbg_Clk;

  wire Dbg_Clk;
  wire [3:0]Q;
  wire tdo_config_word1_9;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Implement_Debug_Logic.Master_Core.Debug_Area/Serial_Dbg_Intf.The_Cache_Addresses " *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Implement_Debug_Logic.Master_Core.Debug_Area/Serial_Dbg_Intf.The_Cache_Addresses[5].SRL16E_Cache_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'hFFFF),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Q[0]),
        .A1(Q[1]),
        .A2(Q[2]),
        .A3(Q[3]),
        .CE(1'b0),
        .CLK(Dbg_Clk),
        .D(1'b0),
        .Q(tdo_config_word1_9));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_SRL16E" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E__parameterized3
   (\Serial_Dbg_Intf.shift_count_reg[6] ,
    Q,
    Dbg_Clk,
    Dbg_TDO_INST_0_i_5,
    tdo_config_word1_13,
    tdo_config_word1_14,
    Q_0);
  output \Serial_Dbg_Intf.shift_count_reg[6] ;
  input [6:0]Q;
  input Dbg_Clk;
  input Dbg_TDO_INST_0_i_5;
  input tdo_config_word1_13;
  input tdo_config_word1_14;
  input Q_0;

  wire Dbg_Clk;
  wire Dbg_TDO_INST_0_i_24_n_0;
  wire Dbg_TDO_INST_0_i_5;
  wire [6:0]Q;
  wire Q_0;
  wire \Serial_Dbg_Intf.shift_count_reg[6] ;
  wire tdo_config_word1_12;
  wire tdo_config_word1_13;
  wire tdo_config_word1_14;

  MUXF7 Dbg_TDO_INST_0_i_13
       (.I0(Dbg_TDO_INST_0_i_24_n_0),
        .I1(Dbg_TDO_INST_0_i_5),
        .O(\Serial_Dbg_Intf.shift_count_reg[6] ),
        .S(Q[6]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    Dbg_TDO_INST_0_i_24
       (.I0(tdo_config_word1_12),
        .I1(tdo_config_word1_13),
        .I2(Q[5]),
        .I3(tdo_config_word1_14),
        .I4(Q[4]),
        .I5(Q_0),
        .O(Dbg_TDO_INST_0_i_24_n_0));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Implement_Debug_Logic.Master_Core.Debug_Area/Serial_Dbg_Intf.The_Cache_Addresses " *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Implement_Debug_Logic.Master_Core.Debug_Area/Serial_Dbg_Intf.The_Cache_Addresses[2].SRL16E_Cache_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h3FFF),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Q[0]),
        .A1(Q[1]),
        .A2(Q[2]),
        .A3(Q[3]),
        .CE(1'b0),
        .CLK(Dbg_Clk),
        .D(1'b0),
        .Q(tdo_config_word1_12));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_SRL16E" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E__parameterized3_25
   (\Serial_Dbg_Intf.shift_count_reg[5] ,
    Q,
    Dbg_Clk,
    tdo_config_word1_9,
    tdo_config_word1_10,
    tdo_config_word1_11);
  output \Serial_Dbg_Intf.shift_count_reg[5] ;
  input [5:0]Q;
  input Dbg_Clk;
  input tdo_config_word1_9;
  input tdo_config_word1_10;
  input tdo_config_word1_11;

  wire Dbg_Clk;
  wire [5:0]Q;
  wire \Serial_Dbg_Intf.shift_count_reg[5] ;
  wire tdo_config_word1_10;
  wire tdo_config_word1_11;
  wire tdo_config_word1_8;
  wire tdo_config_word1_9;

  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    Dbg_TDO_INST_0_i_25
       (.I0(tdo_config_word1_8),
        .I1(tdo_config_word1_9),
        .I2(Q[5]),
        .I3(tdo_config_word1_10),
        .I4(Q[4]),
        .I5(tdo_config_word1_11),
        .O(\Serial_Dbg_Intf.shift_count_reg[5] ));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_bus_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Implement_Debug_Logic.Master_Core.Debug_Area/Serial_Dbg_Intf.The_Cache_Addresses " *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Implement_Debug_Logic.Master_Core.Debug_Area/Serial_Dbg_Intf.The_Cache_Addresses[6].SRL16E_Cache_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h3FFF),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Q[0]),
        .A1(Q[1]),
        .A2(Q[2]),
        .A3(Q[3]),
        .CE(1'b0),
        .CLK(Dbg_Clk),
        .D(1'b0),
        .Q(tdo_config_word1_8));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_SRL16E" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E__parameterized4
   (tdo_config_word1_5,
    Q,
    Dbg_Clk);
  output tdo_config_word1_5;
  input [3:0]Q;
  input Dbg_Clk;

  wire Dbg_Clk;
  wire [3:0]Q;
  wire tdo_config_word1_5;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Implement_Debug_Logic.Master_Core.Debug_Area/Serial_Dbg_Intf.SRL16E_3/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h1060),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Q[0]),
        .A1(Q[1]),
        .A2(Q[2]),
        .A3(Q[3]),
        .CE(1'b0),
        .CLK(Dbg_Clk),
        .D(1'b0),
        .Q(tdo_config_word1_5));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_MB_SRL16E" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_MB_SRL16E__parameterized5
   (Dbg_TDO,
    Q,
    Dbg_Clk,
    Data_Read_Reg_En,
    TDO_Data_Reg__31,
    Dbg_TDO_INST_0_i_2_0,
    Config_Reg_En,
    Instr_Insert_Reg_En,
    TDO_Instr_Reg__0,
    tdo_config_word1_0,
    tdo_config_word1_1,
    tdo_config_word1_5,
    tdo_config_word1_6,
    tdo_config_word1_7,
    Status_Reg_En,
    TDO_Status_Reg__17);
  output Dbg_TDO;
  input [7:0]Q;
  input Dbg_Clk;
  input Data_Read_Reg_En;
  input TDO_Data_Reg__31;
  input Dbg_TDO_INST_0_i_2_0;
  input Config_Reg_En;
  input Instr_Insert_Reg_En;
  input TDO_Instr_Reg__0;
  input tdo_config_word1_0;
  input tdo_config_word1_1;
  input tdo_config_word1_5;
  input tdo_config_word1_6;
  input tdo_config_word1_7;
  input Status_Reg_En;
  input TDO_Status_Reg__17;

  wire Config_Reg_En;
  wire Data_Read_Reg_En;
  wire Dbg_Clk;
  wire Dbg_TDO;
  wire Dbg_TDO_INST_0_i_12_n_0;
  wire Dbg_TDO_INST_0_i_23_n_0;
  wire Dbg_TDO_INST_0_i_2_0;
  wire Dbg_TDO_INST_0_i_2_n_0;
  wire Dbg_TDO_INST_0_i_5_n_0;
  wire Instr_Insert_Reg_En;
  wire [7:0]Q;
  wire Status_Reg_En;
  wire TDO_Data_Reg__31;
  wire TDO_Instr_Reg__0;
  wire TDO_Status_Reg__17;
  wire tdo_config_word1_0;
  wire tdo_config_word1_1;
  wire tdo_config_word1_4;
  wire tdo_config_word1_5;
  wire tdo_config_word1_6;
  wire tdo_config_word1_7;

  LUT3 #(
    .INIT(8'hE4)) 
    Dbg_TDO_INST_0
       (.I0(Status_Reg_En),
        .I1(Dbg_TDO_INST_0_i_2_n_0),
        .I2(TDO_Status_Reg__17),
        .O(Dbg_TDO));
  LUT6 #(
    .INIT(64'hCA0ACACACA0A0A0A)) 
    Dbg_TDO_INST_0_i_12
       (.I0(Dbg_TDO_INST_0_i_23_n_0),
        .I1(Q[5]),
        .I2(Q[6]),
        .I3(tdo_config_word1_0),
        .I4(Q[4]),
        .I5(tdo_config_word1_1),
        .O(Dbg_TDO_INST_0_i_12_n_0));
  MUXF7 Dbg_TDO_INST_0_i_2
       (.I0(Dbg_TDO_INST_0_i_5_n_0),
        .I1(TDO_Data_Reg__31),
        .O(Dbg_TDO_INST_0_i_2_n_0),
        .S(Data_Read_Reg_En));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    Dbg_TDO_INST_0_i_23
       (.I0(tdo_config_word1_4),
        .I1(tdo_config_word1_5),
        .I2(Q[5]),
        .I3(tdo_config_word1_6),
        .I4(Q[4]),
        .I5(tdo_config_word1_7),
        .O(Dbg_TDO_INST_0_i_23_n_0));
  LUT6 #(
    .INIT(64'hB8FFB800B800B800)) 
    Dbg_TDO_INST_0_i_5
       (.I0(Dbg_TDO_INST_0_i_12_n_0),
        .I1(Q[7]),
        .I2(Dbg_TDO_INST_0_i_2_0),
        .I3(Config_Reg_En),
        .I4(Instr_Insert_Reg_En),
        .I5(TDO_Instr_Reg__0),
        .O(Dbg_TDO_INST_0_i_5_n_0));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* srl_name = "inst/microblaze_I/U0/\MicroBlaze_Core_I/Area.Core/Implement_Debug_Logic.Master_Core.Debug_Area/Serial_Dbg_Intf.SRL16E_4/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h2500),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Q[0]),
        .A1(Q[1]),
        .A2(Q[2]),
        .A3(Q[3]),
        .CE(1'b0),
        .CLK(Dbg_Clk),
        .D(1'b0),
        .Q(tdo_config_word1_4));
endmodule

module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_mb_sync_bit
   (out,
    reset_temp,
    Clk);
  output [0:0]out;
  input reset_temp;
  input Clk;

  wire Clk;
  wire reset_temp;
  (* async_reg = "true" *) wire [1:2]sync;

  assign out[0] = sync[2];
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(reset_temp),
        .Q(sync[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(sync[1]),
        .Q(sync[2]),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_mb_sync_bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_mb_sync_bit_1
   (out,
    SR,
    Wakeup,
    Clk);
  output [0:0]out;
  input [0:0]SR;
  input [0:0]Wakeup;
  input Clk;

  wire Clk;
  wire [0:0]SR;
  wire [0:0]Wakeup;
  (* async_reg = "true" *) wire [1:2]sync;

  assign out[0] = sync[2];
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(Wakeup),
        .Q(sync[1]),
        .R(SR));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(sync[1]),
        .Q(sync[2]),
        .R(SR));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_mb_sync_bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_mb_sync_bit_2
   (out,
    SR,
    Wakeup,
    Clk);
  output [0:0]out;
  input [0:0]SR;
  input [0:0]Wakeup;
  input Clk;

  wire Clk;
  wire [0:0]SR;
  wire [0:0]Wakeup;
  (* async_reg = "true" *) wire [1:2]sync;

  assign out[0] = sync[2];
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(Wakeup),
        .Q(sync[1]),
        .R(SR));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(sync[1]),
        .Q(sync[2]),
        .R(SR));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_mb_sync_bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_mb_sync_bit_49
   (sample_synced,
    normal_stop_cmd_i0,
    Q,
    sync_reset,
    D,
    Clk);
  output [0:0]sample_synced;
  output normal_stop_cmd_i0;
  input [0:0]Q;
  input sync_reset;
  input [0:0]D;
  input Clk;

  wire Clk;
  wire [0:0]D;
  wire [0:0]Q;
  wire normal_stop_cmd_i0;
  (* async_reg = "true" *) wire [1:2]sync;
  wire sync_reset;

  assign sample_synced[0] = sync[2];
  LUT2 #(
    .INIT(4'h2)) 
    \Serial_Dbg_Intf.normal_stop_cmd_i_i_1 
       (.I0(sync[2]),
        .I1(Q),
        .O(normal_stop_cmd_i0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(D),
        .Q(sync[1]),
        .R(sync_reset));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(sync[1]),
        .Q(sync[2]),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_mb_sync_bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_mb_sync_bit_50
   (sample_synced,
    force_stop_cmd_i0,
    Q,
    sync_reset,
    \Synchronize.use_sync_reset.sync_reg[1]_0 ,
    Clk);
  output [0:0]sample_synced;
  output force_stop_cmd_i0;
  input [0:0]Q;
  input sync_reset;
  input [0:0]\Synchronize.use_sync_reset.sync_reg[1]_0 ;
  input Clk;

  wire Clk;
  wire [0:0]Q;
  wire [0:0]\Synchronize.use_sync_reset.sync_reg[1]_0 ;
  wire force_stop_cmd_i0;
  (* async_reg = "true" *) wire [1:2]sync;
  wire sync_reset;

  assign sample_synced[0] = sync[2];
  LUT2 #(
    .INIT(4'h2)) 
    \Serial_Dbg_Intf.force_stop_cmd_i_i_1 
       (.I0(sync[2]),
        .I1(Q),
        .O(force_stop_cmd_i0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Synchronize.use_sync_reset.sync_reg[1]_0 ),
        .Q(sync[1]),
        .R(sync_reset));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(sync[1]),
        .Q(sync[2]),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_mb_sync_bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_mb_sync_bit_51
   (sample_synced,
    \Serial_Dbg_Intf.sample_synced_1_reg[8] ,
    start_single_cmd0,
    Q,
    \Serial_Dbg_Intf.trig_in_1_reg ,
    Dbg_Trig_In,
    sync_reset,
    \Synchronize.use_sync_reset.sync_reg[1]_0 ,
    Clk);
  output [0:0]sample_synced;
  output \Serial_Dbg_Intf.sample_synced_1_reg[8] ;
  output start_single_cmd0;
  input [2:0]Q;
  input [1:0]\Serial_Dbg_Intf.trig_in_1_reg ;
  input [0:0]Dbg_Trig_In;
  input sync_reset;
  input [0:0]\Synchronize.use_sync_reset.sync_reg[1]_0 ;
  input Clk;

  wire Clk;
  wire [0:0]Dbg_Trig_In;
  wire [2:0]Q;
  wire \Serial_Dbg_Intf.sample_synced_1_reg[8] ;
  wire [1:0]\Serial_Dbg_Intf.trig_in_1_reg ;
  wire [0:0]\Synchronize.use_sync_reset.sync_reg[1]_0 ;
  wire start_single_cmd0;
  (* async_reg = "true" *) wire [1:2]sync;
  wire sync_reset;
  wire trig_in_10;

  assign sample_synced[0] = sync[2];
  LUT2 #(
    .INIT(4'h2)) 
    \Serial_Dbg_Intf.start_single_cmd_i_1 
       (.I0(sync[2]),
        .I1(Q[2]),
        .O(start_single_cmd0));
  LUT4 #(
    .INIT(16'hCF8A)) 
    \Serial_Dbg_Intf.trig_in_1_i_1 
       (.I0(trig_in_10),
        .I1(Q[0]),
        .I2(\Serial_Dbg_Intf.trig_in_1_reg [0]),
        .I3(Dbg_Trig_In),
        .O(\Serial_Dbg_Intf.sample_synced_1_reg[8] ));
  LUT4 #(
    .INIT(16'h4F44)) 
    \Serial_Dbg_Intf.trig_in_1_i_2 
       (.I0(Q[2]),
        .I1(sync[2]),
        .I2(Q[1]),
        .I3(\Serial_Dbg_Intf.trig_in_1_reg [1]),
        .O(trig_in_10));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Synchronize.use_sync_reset.sync_reg[1]_0 ),
        .Q(sync[1]),
        .R(sync_reset));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(sync[1]),
        .Q(sync[2]),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_mb_sync_bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_mb_sync_bit_52
   (sample_synced,
    read_register_MSR0,
    Q,
    sync_reset,
    \Synchronize.use_sync_reset.sync_reg[1]_0 ,
    Clk);
  output [0:0]sample_synced;
  output read_register_MSR0;
  input [0:0]Q;
  input sync_reset;
  input [0:0]\Synchronize.use_sync_reset.sync_reg[1]_0 ;
  input Clk;

  wire Clk;
  wire [0:0]Q;
  wire [0:0]\Synchronize.use_sync_reset.sync_reg[1]_0 ;
  wire read_register_MSR0;
  (* async_reg = "true" *) wire [1:2]sync;
  wire sync_reset;

  assign sample_synced[0] = sync[2];
  LUT2 #(
    .INIT(4'h2)) 
    \Serial_Dbg_Intf.read_register_MSR_i_1 
       (.I0(sync[2]),
        .I1(Q),
        .O(read_register_MSR0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Synchronize.use_sync_reset.sync_reg[1]_0 ),
        .Q(sync[1]),
        .R(sync_reset));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(sync[1]),
        .Q(sync[2]),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_mb_sync_bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_mb_sync_bit_53
   (sample_synced,
    read_register_PC0,
    Q,
    sync_reset,
    \Synchronize.use_sync_reset.sync_reg[1]_0 ,
    Clk);
  output [0:0]sample_synced;
  output read_register_PC0;
  input [0:0]Q;
  input sync_reset;
  input [0:0]\Synchronize.use_sync_reset.sync_reg[1]_0 ;
  input Clk;

  wire Clk;
  wire [0:0]Q;
  wire [0:0]\Synchronize.use_sync_reset.sync_reg[1]_0 ;
  wire read_register_PC0;
  (* async_reg = "true" *) wire [1:2]sync;
  wire sync_reset;

  assign sample_synced[0] = sync[2];
  LUT2 #(
    .INIT(4'h2)) 
    \Serial_Dbg_Intf.read_register_PC_i_1 
       (.I0(sync[2]),
        .I1(Q),
        .O(read_register_PC0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Synchronize.use_sync_reset.sync_reg[1]_0 ),
        .Q(sync[1]),
        .R(sync_reset));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(sync[1]),
        .Q(sync[2]),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_mb_sync_bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_mb_sync_bit_54
   (sample_synced,
    continue_from_brk0,
    Q,
    \Serial_Dbg_Intf.continue_from_brk_reg ,
    sync_reset,
    \Synchronize.use_sync_reset.sync_reg[1]_0 ,
    Clk);
  output [0:0]sample_synced;
  output continue_from_brk0;
  input [1:0]Q;
  input [0:0]\Serial_Dbg_Intf.continue_from_brk_reg ;
  input sync_reset;
  input [0:0]\Synchronize.use_sync_reset.sync_reg[1]_0 ;
  input Clk;

  wire Clk;
  wire [1:0]Q;
  wire [0:0]\Serial_Dbg_Intf.continue_from_brk_reg ;
  wire [0:0]\Synchronize.use_sync_reset.sync_reg[1]_0 ;
  wire continue_from_brk0;
  (* async_reg = "true" *) wire [1:2]sync;
  wire sync_reset;

  assign sample_synced[0] = sync[2];
  LUT4 #(
    .INIT(16'h4F44)) 
    \Serial_Dbg_Intf.continue_from_brk_i_1 
       (.I0(Q[1]),
        .I1(sync[2]),
        .I2(Q[0]),
        .I3(\Serial_Dbg_Intf.continue_from_brk_reg ),
        .O(continue_from_brk0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Synchronize.use_sync_reset.sync_reg[1]_0 ),
        .Q(sync[1]),
        .R(sync_reset));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(sync[1]),
        .Q(sync[2]),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_mb_sync_bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_mb_sync_bit_55
   (sample_synced,
    if_debug_ready_i0,
    \Serial_Dbg_Intf.if_debug_ready_i_reg ,
    sync_reset,
    \Synchronize.use_sync_reset.sync_reg[1]_0 ,
    Clk);
  output [0:0]sample_synced;
  output if_debug_ready_i0;
  input \Serial_Dbg_Intf.if_debug_ready_i_reg ;
  input sync_reset;
  input [0:0]\Synchronize.use_sync_reset.sync_reg[1]_0 ;
  input Clk;

  wire Clk;
  wire \Serial_Dbg_Intf.if_debug_ready_i_reg ;
  wire [0:0]\Synchronize.use_sync_reset.sync_reg[1]_0 ;
  wire if_debug_ready_i0;
  (* async_reg = "true" *) wire [1:2]sync;
  wire sync_reset;

  assign sample_synced[0] = sync[2];
  LUT2 #(
    .INIT(4'h2)) 
    \Serial_Dbg_Intf.if_debug_ready_i_i_1 
       (.I0(sync[2]),
        .I1(\Serial_Dbg_Intf.if_debug_ready_i_reg ),
        .O(if_debug_ready_i0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Synchronize.use_sync_reset.sync_reg[1]_0 ),
        .Q(sync[1]),
        .R(sync_reset));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(sync[1]),
        .Q(sync[2]),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_mb_sync_bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_mb_sync_bit_56
   (sample_synced,
    \Synchronize.use_sync_reset.sync_reg[2]_0 ,
    Q,
    Dbg_Trig_Ack_Out,
    sync_reset,
    Dbg_Trig_Out,
    Clk);
  output [0:0]sample_synced;
  output \Synchronize.use_sync_reset.sync_reg[2]_0 ;
  input [0:0]Q;
  input [0:0]Dbg_Trig_Ack_Out;
  input sync_reset;
  input [0:0]Dbg_Trig_Out;
  input Clk;

  wire Clk;
  wire [0:0]Dbg_Trig_Ack_Out;
  wire [0:0]Dbg_Trig_Out;
  wire [0:0]Q;
  wire \Synchronize.use_sync_reset.sync_reg[2]_0 ;
  (* async_reg = "true" *) wire [1:2]sync;
  wire sync_reset;

  assign sample_synced[0] = sync[2];
  LUT3 #(
    .INIT(8'hB2)) 
    \Serial_Dbg_Intf.trig_ack_out_1_i_1 
       (.I0(sync[2]),
        .I1(Q),
        .I2(Dbg_Trig_Ack_Out),
        .O(\Synchronize.use_sync_reset.sync_reg[2]_0 ));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(Dbg_Trig_Out),
        .Q(sync[1]),
        .R(sync_reset));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(sync[1]),
        .Q(sync[2]),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_mb_sync_bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_mb_sync_bit_57
   (sample_synced,
    sync_reset,
    Dbg_Trig_Ack_In,
    Clk);
  output [0:0]sample_synced;
  input sync_reset;
  input [0:0]Dbg_Trig_Ack_In;
  input Clk;

  wire Clk;
  wire [0:0]Dbg_Trig_Ack_In;
  (* async_reg = "true" *) wire [1:2]sync;
  wire sync_reset;

  assign sample_synced[0] = sync[2];
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(Dbg_Trig_Ack_In),
        .Q(sync[1]),
        .R(sync_reset));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(sync[1]),
        .Q(sync[2]),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_mb_sync_bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_mb_sync_bit_58
   (sample_synced,
    sync_reset,
    \Synchronize.use_sync_reset.sync_reg[1]_0 ,
    Clk);
  output [0:0]sample_synced;
  input sync_reset;
  input [0:0]\Synchronize.use_sync_reset.sync_reg[1]_0 ;
  input Clk;

  wire Clk;
  wire [0:0]\Synchronize.use_sync_reset.sync_reg[1]_0 ;
  (* async_reg = "true" *) wire [1:2]sync;
  wire sync_reset;

  assign sample_synced[0] = sync[2];
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Synchronize.use_sync_reset.sync_reg[1]_0 ),
        .Q(sync[1]),
        .R(sync_reset));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(sync[1]),
        .Q(sync[2]),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_mb_sync_bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_mb_sync_bit__parameterized0
   (D,
    dbg_brki_hit,
    Dbg_Clk,
    config_with_scan_reset);
  output [0:0]D;
  input dbg_brki_hit;
  input Dbg_Clk;
  input config_with_scan_reset;

  wire [0:0]D;
  wire Dbg_Clk;
  wire config_with_scan_reset;
  wire dbg_brki_hit;

  FDCE #(
    .INIT(1'b0)) 
    \Single_Synchronize.use_async_reset.sync_reg 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(dbg_brki_hit),
        .Q(D));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_mb_sync_bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_mb_sync_bit__parameterized0_28
   (D,
    Pause,
    Dbg_Clk,
    config_with_scan_reset);
  output [0:0]D;
  input Pause;
  input Dbg_Clk;
  input config_with_scan_reset;

  wire [0:0]D;
  wire Dbg_Clk;
  wire Pause;
  wire config_with_scan_reset;

  FDCE #(
    .INIT(1'b0)) 
    \Single_Synchronize.use_async_reset.sync_reg 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(Pause),
        .Q(D));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_mb_sync_bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_mb_sync_bit__parameterized0_29
   (D,
    running_clock,
    Dbg_Clk,
    config_with_scan_reset);
  output [0:0]D;
  input running_clock;
  input Dbg_Clk;
  input config_with_scan_reset;

  wire [0:0]D;
  wire Dbg_Clk;
  wire config_with_scan_reset;
  wire running_clock;

  FDCE #(
    .INIT(1'b0)) 
    \Single_Synchronize.use_async_reset.sync_reg 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(running_clock),
        .Q(D));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_mb_sync_bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_mb_sync_bit__parameterized0_30
   (D,
    Sleep,
    Dbg_Clk,
    config_with_scan_reset,
    Sleep_Out,
    Sleep_Decode);
  output [0:0]D;
  output Sleep;
  input Dbg_Clk;
  input config_with_scan_reset;
  input Sleep_Out;
  input Sleep_Decode;

  wire [0:0]D;
  wire Dbg_Clk;
  wire Sleep;
  wire Sleep_Decode;
  wire Sleep_Out;
  wire config_with_scan_reset;

  FDCE #(
    .INIT(1'b0)) 
    \Single_Synchronize.use_async_reset.sync_reg 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(Sleep),
        .Q(D));
  LUT2 #(
    .INIT(4'hE)) 
    Sleep_INST_0
       (.I0(Sleep_Out),
        .I1(Sleep_Decode),
        .O(Sleep));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_mb_sync_bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_mb_sync_bit__parameterized0_31
   (D,
    \Single_Synchronize.use_async_reset.sync_reg_0 ,
    Dbg_Clk,
    config_with_scan_reset);
  output [0:0]D;
  input \Single_Synchronize.use_async_reset.sync_reg_0 ;
  input Dbg_Clk;
  input config_with_scan_reset;

  wire [0:0]D;
  wire Dbg_Clk;
  wire \Single_Synchronize.use_async_reset.sync_reg_0 ;
  wire config_with_scan_reset;

  FDCE #(
    .INIT(1'b0)) 
    \Single_Synchronize.use_async_reset.sync_reg 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\Single_Synchronize.use_async_reset.sync_reg_0 ),
        .Q(D));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_mb_sync_bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_mb_sync_bit__parameterized0_59
   (D,
    config_with_scan_reset,
    Raw,
    Dbg_Clk,
    Scan_En,
    Scan_Reset,
    Scan_Reset_Sel);
  output [0:0]D;
  output config_with_scan_reset;
  input Raw;
  input Dbg_Clk;
  input Scan_En;
  input Scan_Reset;
  input Scan_Reset_Sel;

  wire [0:0]D;
  wire Dbg_Clk;
  wire Raw;
  wire Scan_En;
  wire Scan_Reset;
  wire Scan_Reset_Sel;
  wire config_with_scan_reset;

  LUT3 #(
    .INIT(8'h40)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK[0]_i_1 
       (.I0(Scan_En),
        .I1(Scan_Reset),
        .I2(Scan_Reset_Sel),
        .O(config_with_scan_reset));
  FDCE #(
    .INIT(1'b0)) 
    \Single_Synchronize.use_async_reset.sync_reg 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(Raw),
        .Q(D));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_mb_sync_bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_mb_sync_bit__parameterized1
   (\Serial_Dbg_Intf.continue_from_brk_reg ,
    sync_reset,
    LOCKSTEP_Master_Out,
    Clk,
    dbg_continue_i_reg,
    dbg_pause,
    dbg_continue_i_reg_0,
    normal_stop_cmd_i,
    dbg_continue_i_reg_1,
    start_single_cmd);
  output \Serial_Dbg_Intf.continue_from_brk_reg ;
  input sync_reset;
  input [2:0]LOCKSTEP_Master_Out;
  input Clk;
  input dbg_continue_i_reg;
  input dbg_pause;
  input dbg_continue_i_reg_0;
  input normal_stop_cmd_i;
  input dbg_continue_i_reg_1;
  input start_single_cmd;

  wire Clk;
  wire [2:0]LOCKSTEP_Master_Out;
  wire \Serial_Dbg_Intf.continue_from_brk_reg ;
  wire dbg_continue_i_i_2_n_0;
  wire dbg_continue_i_reg;
  wire dbg_continue_i_reg_0;
  wire dbg_continue_i_reg_1;
  wire dbg_pause;
  wire dbg_wakeup_synced;
  wire normal_stop_cmd_i;
  wire start_single_cmd;
  wire sync_reset;

  FDRE #(
    .INIT(1'b0)) 
    \Single_Synchronize.use_sync_reset.sync_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(LOCKSTEP_Master_Out[1]),
        .Q(dbg_wakeup_synced),
        .R(sync_reset));
  LUT6 #(
    .INIT(64'hCCCCCCCCCCCCCCC8)) 
    dbg_continue_i_i_1
       (.I0(dbg_continue_i_reg),
        .I1(dbg_pause),
        .I2(dbg_continue_i_reg_0),
        .I3(normal_stop_cmd_i),
        .I4(dbg_continue_i_i_2_n_0),
        .I5(LOCKSTEP_Master_Out[0]),
        .O(\Serial_Dbg_Intf.continue_from_brk_reg ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    dbg_continue_i_i_2
       (.I0(dbg_continue_i_reg_1),
        .I1(start_single_cmd),
        .I2(dbg_wakeup_synced),
        .I3(LOCKSTEP_Master_Out[2]),
        .O(dbg_continue_i_i_2_n_0));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_mb_sync_bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_mb_sync_bit__parameterized1_32
   (trig_ack_in_0_synced,
    mb_halted_1_reg,
    sync_reset,
    Dbg_Trig_Ack_In,
    Clk,
    mb_halted_1,
    D,
    trig_ack_in_0_synced_1,
    Dbg_Trig_In);
  output trig_ack_in_0_synced;
  output mb_halted_1_reg;
  input sync_reset;
  input [0:0]Dbg_Trig_Ack_In;
  input Clk;
  input mb_halted_1;
  input [0:0]D;
  input trig_ack_in_0_synced_1;
  input [0:0]Dbg_Trig_In;

  wire Clk;
  wire [0:0]D;
  wire [0:0]Dbg_Trig_Ack_In;
  wire [0:0]Dbg_Trig_In;
  wire mb_halted_1;
  wire mb_halted_1_reg;
  wire sync_reset;
  wire trig_ack_in_0_synced;
  wire trig_ack_in_0_synced_1;

  FDRE #(
    .INIT(1'b0)) 
    \Single_Synchronize.use_sync_reset.sync_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(Dbg_Trig_Ack_In),
        .Q(trig_ack_in_0_synced),
        .R(sync_reset));
  LUT5 #(
    .INIT(32'hF0FF4044)) 
    trig_in_0_i_1
       (.I0(mb_halted_1),
        .I1(D),
        .I2(trig_ack_in_0_synced_1),
        .I3(trig_ack_in_0_synced),
        .I4(Dbg_Trig_In),
        .O(mb_halted_1_reg));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_mb_sync_bit" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_mb_sync_bit__parameterized1_33
   (trig_out_0_synced,
    \Single_Synchronize.use_sync_reset.sync_reg_0 ,
    sync_reset,
    Dbg_Trig_Out,
    Clk,
    trig_out_0_synced_1,
    Dbg_Trig_Ack_Out);
  output trig_out_0_synced;
  output \Single_Synchronize.use_sync_reset.sync_reg_0 ;
  input sync_reset;
  input [0:0]Dbg_Trig_Out;
  input Clk;
  input trig_out_0_synced_1;
  input [0:0]Dbg_Trig_Ack_Out;

  wire Clk;
  wire [0:0]Dbg_Trig_Ack_Out;
  wire [0:0]Dbg_Trig_Out;
  wire \Single_Synchronize.use_sync_reset.sync_reg_0 ;
  wire sync_reset;
  wire trig_out_0_synced;
  wire trig_out_0_synced_1;

  LUT3 #(
    .INIT(8'hB2)) 
    \Area_Debug_Control.trig_ack_out_0_i_1 
       (.I0(trig_out_0_synced),
        .I1(trig_out_0_synced_1),
        .I2(Dbg_Trig_Ack_Out),
        .O(\Single_Synchronize.use_sync_reset.sync_reg_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \Single_Synchronize.use_sync_reset.sync_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(Dbg_Trig_Out),
        .Q(trig_out_0_synced),
        .R(sync_reset));
endmodule

module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_mb_sync_vec
   (D,
    config_with_scan_reset,
    Raw,
    Dbg_Clk,
    Scan_En,
    Scan_Reset,
    Scan_Reset_Sel);
  output [0:0]D;
  output config_with_scan_reset;
  input Raw;
  input Dbg_Clk;
  input Scan_En;
  input Scan_Reset;
  input Scan_Reset_Sel;

  wire [0:0]D;
  wire Dbg_Clk;
  wire Raw;
  wire Scan_En;
  wire Scan_Reset;
  wire Scan_Reset_Sel;
  wire config_with_scan_reset;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_mb_sync_bit__parameterized0_59 \sync_bits[0].sync_bit 
       (.D(D),
        .Dbg_Clk(Dbg_Clk),
        .Raw(Raw),
        .Scan_En(Scan_En),
        .Scan_Reset(Scan_Reset),
        .Scan_Reset_Sel(Scan_Reset_Sel),
        .config_with_scan_reset(config_with_scan_reset));
endmodule

(* ORIG_REF_NAME = "microblaze_v11_0_2_mb_sync_vec" *) 
module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_mb_sync_vec__parameterized0
   (sample_synced,
    normal_stop_cmd_i0,
    force_stop_cmd_i0,
    read_register_MSR0,
    read_register_PC0,
    \Serial_Dbg_Intf.sample_synced_1_reg[8] ,
    \Synchronize.use_sync_reset.sync_reg[2] ,
    if_debug_ready_i0,
    continue_from_brk0,
    start_single_cmd0,
    Q,
    Dbg_Trig_In,
    Dbg_Trig_Ack_Out,
    \Serial_Dbg_Intf.if_debug_ready_i_reg ,
    sync_reset,
    D,
    Clk,
    \Synchronize.use_sync_reset.sync_reg[1] ,
    \Synchronize.use_sync_reset.sync_reg[1]_0 ,
    \Synchronize.use_sync_reset.sync_reg[1]_1 ,
    \Synchronize.use_sync_reset.sync_reg[1]_2 ,
    \Synchronize.use_sync_reset.sync_reg[1]_3 ,
    Dbg_Trig_Out,
    Dbg_Trig_Ack_In,
    \Synchronize.use_sync_reset.sync_reg[1]_4 );
  output [0:9]sample_synced;
  output normal_stop_cmd_i0;
  output force_stop_cmd_i0;
  output read_register_MSR0;
  output read_register_PC0;
  output \Serial_Dbg_Intf.sample_synced_1_reg[8] ;
  output \Synchronize.use_sync_reset.sync_reg[2] ;
  output if_debug_ready_i0;
  output continue_from_brk0;
  output start_single_cmd0;
  input [7:0]Q;
  input [0:0]Dbg_Trig_In;
  input [0:0]Dbg_Trig_Ack_Out;
  input \Serial_Dbg_Intf.if_debug_ready_i_reg ;
  input sync_reset;
  input [0:0]D;
  input Clk;
  input [0:0]\Synchronize.use_sync_reset.sync_reg[1] ;
  input [0:0]\Synchronize.use_sync_reset.sync_reg[1]_0 ;
  input [1:0]\Synchronize.use_sync_reset.sync_reg[1]_1 ;
  input [0:0]\Synchronize.use_sync_reset.sync_reg[1]_2 ;
  input [0:0]\Synchronize.use_sync_reset.sync_reg[1]_3 ;
  input [0:0]Dbg_Trig_Out;
  input [0:0]Dbg_Trig_Ack_In;
  input [0:0]\Synchronize.use_sync_reset.sync_reg[1]_4 ;

  wire Clk;
  wire [0:0]D;
  wire [0:0]Dbg_Trig_Ack_In;
  wire [0:0]Dbg_Trig_Ack_Out;
  wire [0:0]Dbg_Trig_In;
  wire [0:0]Dbg_Trig_Out;
  wire [7:0]Q;
  wire \Serial_Dbg_Intf.if_debug_ready_i_reg ;
  wire \Serial_Dbg_Intf.sample_synced_1_reg[8] ;
  wire [0:0]\Synchronize.use_sync_reset.sync_reg[1] ;
  wire [0:0]\Synchronize.use_sync_reset.sync_reg[1]_0 ;
  wire [1:0]\Synchronize.use_sync_reset.sync_reg[1]_1 ;
  wire [0:0]\Synchronize.use_sync_reset.sync_reg[1]_2 ;
  wire [0:0]\Synchronize.use_sync_reset.sync_reg[1]_3 ;
  wire [0:0]\Synchronize.use_sync_reset.sync_reg[1]_4 ;
  wire \Synchronize.use_sync_reset.sync_reg[2] ;
  wire continue_from_brk0;
  wire force_stop_cmd_i0;
  wire if_debug_ready_i0;
  wire normal_stop_cmd_i0;
  wire read_register_MSR0;
  wire read_register_PC0;
  wire [0:9]sample_synced;
  wire start_single_cmd0;
  wire sync_reset;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_mb_sync_bit_49 \sync_bits[0].sync_bit 
       (.Clk(Clk),
        .D(D),
        .Q(Q[7]),
        .normal_stop_cmd_i0(normal_stop_cmd_i0),
        .sample_synced(sample_synced[0]),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_mb_sync_bit_50 \sync_bits[1].sync_bit 
       (.Clk(Clk),
        .Q(Q[6]),
        .\Synchronize.use_sync_reset.sync_reg[1]_0 (\Synchronize.use_sync_reset.sync_reg[1] ),
        .force_stop_cmd_i0(force_stop_cmd_i0),
        .sample_synced(sample_synced[1]),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_mb_sync_bit_51 \sync_bits[2].sync_bit 
       (.Clk(Clk),
        .Dbg_Trig_In(Dbg_Trig_In),
        .Q({Q[5],Q[2],Q[0]}),
        .\Serial_Dbg_Intf.sample_synced_1_reg[8] (\Serial_Dbg_Intf.sample_synced_1_reg[8] ),
        .\Serial_Dbg_Intf.trig_in_1_reg ({sample_synced[5],sample_synced[8]}),
        .\Synchronize.use_sync_reset.sync_reg[1]_0 (\Synchronize.use_sync_reset.sync_reg[1]_0 ),
        .sample_synced(sample_synced[2]),
        .start_single_cmd0(start_single_cmd0),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_mb_sync_bit_52 \sync_bits[3].sync_bit 
       (.Clk(Clk),
        .Q(Q[4]),
        .\Synchronize.use_sync_reset.sync_reg[1]_0 (\Synchronize.use_sync_reset.sync_reg[1]_1 [1]),
        .read_register_MSR0(read_register_MSR0),
        .sample_synced(sample_synced[3]),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_mb_sync_bit_53 \sync_bits[4].sync_bit 
       (.Clk(Clk),
        .Q(Q[3]),
        .\Synchronize.use_sync_reset.sync_reg[1]_0 (\Synchronize.use_sync_reset.sync_reg[1]_1 [0]),
        .read_register_PC0(read_register_PC0),
        .sample_synced(sample_synced[4]),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_mb_sync_bit_54 \sync_bits[5].sync_bit 
       (.Clk(Clk),
        .Q(Q[2:1]),
        .\Serial_Dbg_Intf.continue_from_brk_reg (sample_synced[7]),
        .\Synchronize.use_sync_reset.sync_reg[1]_0 (\Synchronize.use_sync_reset.sync_reg[1]_2 ),
        .continue_from_brk0(continue_from_brk0),
        .sample_synced(sample_synced[5]),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_mb_sync_bit_55 \sync_bits[6].sync_bit 
       (.Clk(Clk),
        .\Serial_Dbg_Intf.if_debug_ready_i_reg (\Serial_Dbg_Intf.if_debug_ready_i_reg ),
        .\Synchronize.use_sync_reset.sync_reg[1]_0 (\Synchronize.use_sync_reset.sync_reg[1]_3 ),
        .if_debug_ready_i0(if_debug_ready_i0),
        .sample_synced(sample_synced[6]),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_mb_sync_bit_56 \sync_bits[7].sync_bit 
       (.Clk(Clk),
        .Dbg_Trig_Ack_Out(Dbg_Trig_Ack_Out),
        .Dbg_Trig_Out(Dbg_Trig_Out),
        .Q(Q[1]),
        .\Synchronize.use_sync_reset.sync_reg[2]_0 (\Synchronize.use_sync_reset.sync_reg[2] ),
        .sample_synced(sample_synced[7]),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_mb_sync_bit_57 \sync_bits[8].sync_bit 
       (.Clk(Clk),
        .Dbg_Trig_Ack_In(Dbg_Trig_Ack_In),
        .sample_synced(sample_synced[8]),
        .sync_reset(sync_reset));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_microblaze_v11_0_2_mb_sync_bit_58 \sync_bits[9].sync_bit 
       (.Clk(Clk),
        .\Synchronize.use_sync_reset.sync_reg[1]_0 (\Synchronize.use_sync_reset.sync_reg[1]_4 ),
        .sample_synced(sample_synced[9]),
        .sync_reset(sync_reset));
endmodule

module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_mux4_8
   (D,
    \Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] ,
    sel_Write_Mux_MSB);
  output [15:0]D;
  input [0:31]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] ;
  input [1:0]sel_Write_Mux_MSB;

  wire [0:31]\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] ;
  wire [15:0]D;
  wire [1:0]sel_Write_Mux_MSB;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized16_826 \GEN4_LOOP[0].BYTESTEER_LUT6 
       (.\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] ({\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [0],\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [8],\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [16],\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [24]}),
        .D({D[15],D[7]}),
        .sel_Write_Mux_MSB(sel_Write_Mux_MSB));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized16_827 \GEN4_LOOP[1].BYTESTEER_LUT6 
       (.\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[22] ({\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [1],\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [9],\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [17],\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [25]}),
        .D({D[14],D[6]}),
        .sel_Write_Mux_MSB(sel_Write_Mux_MSB));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized16_828 \GEN4_LOOP[2].BYTESTEER_LUT6 
       (.\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[21] ({\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [2],\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [10],\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [18],\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [26]}),
        .D({D[13],D[5]}),
        .sel_Write_Mux_MSB(sel_Write_Mux_MSB));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized16_829 \GEN4_LOOP[3].BYTESTEER_LUT6 
       (.\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[20] ({\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [3],\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [11],\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [19],\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [27]}),
        .D({D[12],D[4]}),
        .sel_Write_Mux_MSB(sel_Write_Mux_MSB));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized16_830 \GEN4_LOOP[4].BYTESTEER_LUT6 
       (.\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[19] ({\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [4],\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [12],\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [20],\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [28]}),
        .D({D[11],D[3]}),
        .sel_Write_Mux_MSB(sel_Write_Mux_MSB));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized16_831 \GEN4_LOOP[5].BYTESTEER_LUT6 
       (.\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[18] ({\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [5],\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [13],\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [21],\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [29]}),
        .D({D[10],D[2]}),
        .sel_Write_Mux_MSB(sel_Write_Mux_MSB));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized16_832 \GEN4_LOOP[6].BYTESTEER_LUT6 
       (.\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[17] ({\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [6],\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [14],\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [22],\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [30]}),
        .D({D[9],D[1]}),
        .sel_Write_Mux_MSB(sel_Write_Mux_MSB));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized16_833 \GEN4_LOOP[7].BYTESTEER_LUT6 
       (.\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[16] ({\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [7],\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [15],\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [23],\Add_Output_DFFs.M_AXI_DP_WDATA_i_reg[23] [31]}),
        .D({D[8],D[0]}),
        .sel_Write_Mux_MSB(sel_Write_Mux_MSB));
endmodule

module decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_mux_bus
   (Y,
    Instr,
    LOCKSTEP_Master_Out);
  output [0:31]Y;
  input [0:31]Instr;
  input [32:0]LOCKSTEP_Master_Out;

  wire [0:31]Instr;
  wire [32:0]LOCKSTEP_Master_Out;
  wire [0:31]Y;

  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized16 \Mux_Loop[0].I_MUX_LUT6 
       (.Instr({Instr[0],Instr[16]}),
        .LOCKSTEP_Master_Out({LOCKSTEP_Master_Out[32:31],LOCKSTEP_Master_Out[15]}),
        .Y({Y[0],Y[16]}));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized16_3 \Mux_Loop[10].I_MUX_LUT6 
       (.Instr({Instr[10],Instr[26]}),
        .LOCKSTEP_Master_Out({LOCKSTEP_Master_Out[32],LOCKSTEP_Master_Out[21],LOCKSTEP_Master_Out[5]}),
        .Y({Y[10],Y[26]}));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized16_4 \Mux_Loop[11].I_MUX_LUT6 
       (.Instr({Instr[11],Instr[27]}),
        .LOCKSTEP_Master_Out({LOCKSTEP_Master_Out[32],LOCKSTEP_Master_Out[20],LOCKSTEP_Master_Out[4]}),
        .Y({Y[11],Y[27]}));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized16_5 \Mux_Loop[12].I_MUX_LUT6 
       (.Instr({Instr[12],Instr[28]}),
        .LOCKSTEP_Master_Out({LOCKSTEP_Master_Out[32],LOCKSTEP_Master_Out[19],LOCKSTEP_Master_Out[3]}),
        .Y({Y[12],Y[28]}));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized16_6 \Mux_Loop[13].I_MUX_LUT6 
       (.Instr({Instr[13],Instr[29]}),
        .LOCKSTEP_Master_Out({LOCKSTEP_Master_Out[32],LOCKSTEP_Master_Out[18],LOCKSTEP_Master_Out[2]}),
        .Y({Y[13],Y[29]}));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized16_7 \Mux_Loop[14].I_MUX_LUT6 
       (.Instr({Instr[14],Instr[30]}),
        .LOCKSTEP_Master_Out({LOCKSTEP_Master_Out[32],LOCKSTEP_Master_Out[17],LOCKSTEP_Master_Out[1]}),
        .Y({Y[14],Y[30]}));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized16_8 \Mux_Loop[15].I_MUX_LUT6 
       (.Instr({Instr[15],Instr[31]}),
        .LOCKSTEP_Master_Out({LOCKSTEP_Master_Out[32],LOCKSTEP_Master_Out[16],LOCKSTEP_Master_Out[0]}),
        .Y({Y[15],Y[31]}));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized16_9 \Mux_Loop[1].I_MUX_LUT6 
       (.Instr({Instr[1],Instr[17]}),
        .LOCKSTEP_Master_Out({LOCKSTEP_Master_Out[32],LOCKSTEP_Master_Out[30],LOCKSTEP_Master_Out[14]}),
        .Y({Y[1],Y[17]}));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized16_10 \Mux_Loop[2].I_MUX_LUT6 
       (.Instr({Instr[2],Instr[18]}),
        .LOCKSTEP_Master_Out({LOCKSTEP_Master_Out[32],LOCKSTEP_Master_Out[29],LOCKSTEP_Master_Out[13]}),
        .Y({Y[2],Y[18]}));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized16_11 \Mux_Loop[3].I_MUX_LUT6 
       (.Instr({Instr[3],Instr[19]}),
        .LOCKSTEP_Master_Out({LOCKSTEP_Master_Out[32],LOCKSTEP_Master_Out[28],LOCKSTEP_Master_Out[12]}),
        .Y({Y[3],Y[19]}));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized16_12 \Mux_Loop[4].I_MUX_LUT6 
       (.Instr({Instr[4],Instr[20]}),
        .LOCKSTEP_Master_Out({LOCKSTEP_Master_Out[32],LOCKSTEP_Master_Out[27],LOCKSTEP_Master_Out[11]}),
        .Y({Y[4],Y[20]}));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized16_13 \Mux_Loop[5].I_MUX_LUT6 
       (.Instr({Instr[5],Instr[21]}),
        .LOCKSTEP_Master_Out({LOCKSTEP_Master_Out[32],LOCKSTEP_Master_Out[26],LOCKSTEP_Master_Out[10]}),
        .Y({Y[5],Y[21]}));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized16_14 \Mux_Loop[6].I_MUX_LUT6 
       (.Instr({Instr[6],Instr[22]}),
        .LOCKSTEP_Master_Out({LOCKSTEP_Master_Out[32],LOCKSTEP_Master_Out[25],LOCKSTEP_Master_Out[9]}),
        .Y({Y[6],Y[22]}));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized16_15 \Mux_Loop[7].I_MUX_LUT6 
       (.Instr({Instr[7],Instr[23]}),
        .LOCKSTEP_Master_Out({LOCKSTEP_Master_Out[32],LOCKSTEP_Master_Out[24],LOCKSTEP_Master_Out[8]}),
        .Y({Y[7],Y[23]}));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized16_16 \Mux_Loop[8].I_MUX_LUT6 
       (.Instr({Instr[8],Instr[24]}),
        .LOCKSTEP_Master_Out({LOCKSTEP_Master_Out[32],LOCKSTEP_Master_Out[23],LOCKSTEP_Master_Out[7]}),
        .Y({Y[8],Y[24]}));
  decalper_eb_ot_sdeen_pot_pi_dehcac_xnilix_MB_LUT6_2__parameterized16_17 \Mux_Loop[9].I_MUX_LUT6 
       (.Instr({Instr[9],Instr[25]}),
        .LOCKSTEP_Master_Out({LOCKSTEP_Master_Out[32],LOCKSTEP_Master_Out[22],LOCKSTEP_Master_Out[6]}),
        .Y({Y[9],Y[25]}));
endmodule
`ifndef GLBL
`define GLBL
`timescale  1 ps / 1 ps

module glbl ();

    parameter ROC_WIDTH = 100000;
    parameter TOC_WIDTH = 0;

//--------   STARTUP Globals --------------
    wire GSR;
    wire GTS;
    wire GWE;
    wire PRLD;
    tri1 p_up_tmp;
    tri (weak1, strong0) PLL_LOCKG = p_up_tmp;

    wire PROGB_GLBL;
    wire CCLKO_GLBL;
    wire FCSBO_GLBL;
    wire [3:0] DO_GLBL;
    wire [3:0] DI_GLBL;
   
    reg GSR_int;
    reg GTS_int;
    reg PRLD_int;

//--------   JTAG Globals --------------
    wire JTAG_TDO_GLBL;
    wire JTAG_TCK_GLBL;
    wire JTAG_TDI_GLBL;
    wire JTAG_TMS_GLBL;
    wire JTAG_TRST_GLBL;

    reg JTAG_CAPTURE_GLBL;
    reg JTAG_RESET_GLBL;
    reg JTAG_SHIFT_GLBL;
    reg JTAG_UPDATE_GLBL;
    reg JTAG_RUNTEST_GLBL;

    reg JTAG_SEL1_GLBL = 0;
    reg JTAG_SEL2_GLBL = 0 ;
    reg JTAG_SEL3_GLBL = 0;
    reg JTAG_SEL4_GLBL = 0;

    reg JTAG_USER_TDO1_GLBL = 1'bz;
    reg JTAG_USER_TDO2_GLBL = 1'bz;
    reg JTAG_USER_TDO3_GLBL = 1'bz;
    reg JTAG_USER_TDO4_GLBL = 1'bz;

    assign (strong1, weak0) GSR = GSR_int;
    assign (strong1, weak0) GTS = GTS_int;
    assign (weak1, weak0) PRLD = PRLD_int;

    initial begin
	GSR_int = 1'b1;
	PRLD_int = 1'b1;
	#(ROC_WIDTH)
	GSR_int = 1'b0;
	PRLD_int = 1'b0;
    end

    initial begin
	GTS_int = 1'b1;
	#(TOC_WIDTH)
	GTS_int = 1'b0;
    end

endmodule
`endif
